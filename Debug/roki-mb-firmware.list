
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb68  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b814  0803ce08  0803ce08  0002ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805861c  0805861c  0004861c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08058624  08058624  00048624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805862c  0805862c  0004862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  08058634  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00026680  24000168  0805879c  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240267e8  0805879c  000567e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004c20a  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076d6  00000000  00000000  0009c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e8  00000000  00000000  000a3a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002e68  00000000  00000000  000a6b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000a99c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003995a  00000000  00000000  000eeecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189cd3  00000000  00000000  00128829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b24fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dec8  00000000  00000000  002b254c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803cdf0 	.word	0x0803cdf0

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803cdf0 	.word	0x0803cdf0

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01b fb49 	bl	803bd48 <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803ce08 	.word	0x0803ce08
 80206c4:	0803ce14 	.word	0x0803ce14
 80206c8:	0803ce40 	.word	0x0803ce40

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f007 fae6 	bl	8027cd6 <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f007 fac0 	bl	8027ca6 <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f007 f99b 	bl	8027a7e <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f007 fa2d 	bl	8027bcc <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f007 fa38 	bl	8027c04 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f007 fa5d 	bl	8027c6e <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f007 f988 	bl	8027ae6 <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f007 f9ad 	bl	8027b5e <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f007 fb3f 	bl	8027ea4 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f007 f9a8 	bl	8027b9c <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f007 fb1b 	bl	8027ea4 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f007 f90c 	bl	8027ab2 <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f007 fa30 	bl	8027d2a <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f006 ff6b 	bl	80277da <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f007 fa34 	bl	8027d88 <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f007 f87c 	bl	8027a3c <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	0803de90 	.word	0x0803de90
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f007 f952 	bl	8027c3a <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f006 ff0c 	bl	80277da <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01b f9ba 	bl	803bd48 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	0803ce5c 	.word	0x0803ce5c
 80209fc:	0803ceb0 	.word	0x0803ceb0
 8020a00:	0803ce40 	.word	0x0803ce40

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01b f97b 	bl	803bd48 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f008 fb9f 	bl	80291b2 <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	0803cec8 	.word	0x0803cec8
 8020b4c:	0803ced0 	.word	0x0803ced0
 8020b50:	0803ce40 	.word	0x0803ce40
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01b f8e9 	bl	803bd48 <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01b f8e0 	bl	803bd48 <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	0803cf1c 	.word	0x0803cf1c
 8020c08:	0803cf24 	.word	0x0803cf24
 8020c0c:	0803ce40 	.word	0x0803ce40
 8020c10:	0803cf60 	.word	0x0803cf60

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f012 fbdf 	bl	8033474 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f013 fa68 	bl	8034190 <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f012 fcfd 	bl	8033708 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f013 fa3c 	bl	8034190 <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01b f813 	bl	803be1c <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f009 feff 	bl	802ac6c <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ec8:	b480      	push	{r7}
 8020eca:	b083      	sub	sp, #12
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed6:	d205      	bcs.n	8020ee4 <_ZSt16__deque_buf_sizej+0x1c>
 8020ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ee2:	e000      	b.n	8020ee6 <_ZSt16__deque_buf_sizej+0x1e>
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;
		static constexpr Type ResetQueue = 4;

		static uint8_t Serialize(Type mode) {
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	4603      	mov	r3, r0
 8020efa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020efc:	79fb      	ldrb	r3, [r7, #7]
		}
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f14:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f16:	4618      	mov	r0, r3
 8020f18:	370c      	adds	r7, #12
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr

08020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;
		static constexpr Type QueueFull = 5;

		static uint8_t Serialize(Type error) {
 8020f22:	b480      	push	{r7}
 8020f24:	b083      	sub	sp, #12
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	4603      	mov	r3, r0
 8020f2a:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f2c:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	370c      	adds	r7, #12
 8020f32:	46bd      	mov	sp, r7
 8020f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f38:	4770      	bx	lr
	...

08020f3c <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b082      	sub	sp, #8
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d105      	bne.n	8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f4c:	4b13      	ldr	r3, [pc, #76]	; (8020f9c <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f4e:	4a14      	ldr	r2, [pc, #80]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f50:	21ae      	movs	r1, #174	; 0xae
 8020f52:	4814      	ldr	r0, [pc, #80]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f54:	f01a fef8 	bl	803bd48 <__assert_func>
			assert(*ptr);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f60:	4b11      	ldr	r3, [pc, #68]	; (8020fa8 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	21af      	movs	r1, #175	; 0xaf
 8020f66:	480f      	ldr	r0, [pc, #60]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01a feee 	bl	803bd48 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	8812      	ldrh	r2, [r2, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	1c9a      	adds	r2, r3, #2
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8852      	ldrh	r2, [r2, #2]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]
		}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0803cf68 	.word	0x0803cf68
 8020fa0:	0803cf6c 	.word	0x0803cf6c
 8020fa4:	0803cf9c 	.word	0x0803cf9c
 8020fa8:	0803cfb8 	.word	0x0803cfb8

08020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020fac:	b480      	push	{r7}
 8020fae:	b083      	sub	sp, #12
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	601a      	str	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	605a      	str	r2, [r3, #4]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4618      	mov	r0, r3
 8020fca:	370c      	adds	r7, #12
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	2200      	movs	r2, #0
 8020fec:	609a      	str	r2, [r3, #8]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
 8021008:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	4618      	mov	r0, r3
 802100e:	f7ff ffcd 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	4b22      	ldr	r3, [pc, #136]	; (80210a0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa4>)
 8021016:	4413      	add	r3, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ffdb 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021024:	2200      	movs	r2, #0
 8021026:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021030:	2200      	movs	r2, #0
 8021032:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802103c:	461a      	mov	r2, r3
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021058:	461a      	mov	r2, r3
 802105a:	78fb      	ldrb	r3, [r7, #3]
 802105c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021066:	2200      	movs	r2, #0
 8021068:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021072:	2201      	movs	r2, #1
 8021074:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802107e:	2200      	movs	r2, #0
 8021080:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		assert(uart != NULL);
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d105      	bne.n	8021096 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x9a>
 802108a:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa8>)
 802108c:	4a06      	ldr	r2, [pc, #24]	; (80210a8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xac>)
 802108e:	21be      	movs	r1, #190	; 0xbe
 8021090:	4806      	ldr	r0, [pc, #24]	; (80210ac <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8021092:	f01a fe59 	bl	803bd48 <__assert_func>
	}
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	4618      	mov	r0, r3
 802109a:	3710      	adds	r7, #16
 802109c:	46bd      	mov	sp, r7
 802109e:	bd80      	pop	{r7, pc}
 80210a0:	00020b7c 	.word	0x00020b7c
 80210a4:	0803cfc0 	.word	0x0803cfc0
 80210a8:	0803cfd0 	.word	0x0803cfd0
 80210ac:	0803cf9c 	.word	0x0803cf9c

080210b0 <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 80210b0:	b590      	push	{r4, r7, lr}
 80210b2:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210bc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80210c0:	6018      	str	r0, [r3, #0]
 80210c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210c6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210ca:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210d0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80210da:	4618      	mov	r0, r3
 80210dc:	f7ff ff15 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80210e0:	4603      	mov	r3, r0
 80210e2:	2b04      	cmp	r3, #4
 80210e4:	f200 80aa 	bhi.w	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
 80210e8:	a201      	add	r2, pc, #4	; (adr r2, 80210f0 <_ZN11QueueSender10AddRequestERK7Request+0x40>)
 80210ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210ee:	bf00      	nop
 80210f0:	08021141 	.word	0x08021141
 80210f4:	08021105 	.word	0x08021105
 80210f8:	08021197 	.word	0x08021197
 80210fc:	080211cb 	.word	0x080211cb
 8021100:	08021207 	.word	0x08021207
		case MessageMode::Async:
			Responces.Push(CreateAsyncResponce(request));
 8021104:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021108:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	4c4e      	ldr	r4, [pc, #312]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 8021110:	441c      	add	r4, r3
 8021112:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021116:	f5a3 6084 	sub.w	r0, r3, #1056	; 0x420
 802111a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802111e:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 8021122:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021126:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802112a:	6812      	ldr	r2, [r2, #0]
 802112c:	6819      	ldr	r1, [r3, #0]
 802112e:	f000 fced 	bl	8021b0c <_ZN11QueueSender19CreateAsyncResponceERK7Request>
 8021132:	f107 0308 	add.w	r3, r7, #8
 8021136:	4619      	mov	r1, r3
 8021138:	4620      	mov	r0, r4
 802113a:	f002 f9ff 	bl	802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 802113e:	e07d      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 8021140:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021144:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802114e:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 8021152:	2b00      	cmp	r3, #0
 8021154:	d171      	bne.n	802123a <_ZN11QueueSender10AddRequestERK7Request+0x18a>
				break;

			PriorityRequest = request;
 8021156:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802115a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021164:	4619      	mov	r1, r3
 8021166:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802116a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 802116e:	681a      	ldr	r2, [r3, #0]
 8021170:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 8021174:	4611      	mov	r1, r2
 8021176:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802117a:	4618      	mov	r0, r3
 802117c:	f01a fe4e 	bl	803be1c <memcpy>
			HasPriorityRequest = true;
 8021180:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021184:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802118e:	2201      	movs	r2, #1
 8021190:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 8021194:	e052      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 8021196:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802119a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802119e:	681b      	ldr	r3, [r3, #0]
 80211a0:	4c29      	ldr	r4, [pc, #164]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211a2:	441c      	add	r4, r3
 80211a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211a8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80211ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211b0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211b4:	6819      	ldr	r1, [r3, #0]
 80211b6:	4610      	mov	r0, r2
 80211b8:	f000 fbb5 	bl	8021926 <_ZNK11QueueSender18CreateInfoResponceEv>
 80211bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211c0:	4619      	mov	r1, r3
 80211c2:	4620      	mov	r0, r4
 80211c4:	f002 f9ba 	bl	802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211c8:	e038      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80211ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211ce:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	4c1c      	ldr	r4, [pc, #112]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211d6:	441c      	add	r4, r3
 80211d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211dc:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80211e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211e4:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 80211e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211ec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211f0:	6812      	ldr	r2, [r2, #0]
 80211f2:	6819      	ldr	r1, [r3, #0]
 80211f4:	f000 fc1e 	bl	8021a34 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 80211f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211fc:	4619      	mov	r1, r3
 80211fe:	4620      	mov	r0, r4
 8021200:	f002 f99c 	bl	802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021204:	e01a      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::ResetQueue:
			Responces.Push(ResetQueue());
 8021206:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802120a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	4c0d      	ldr	r4, [pc, #52]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 8021212:	441c      	add	r4, r3
 8021214:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021218:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 802121c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021220:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021224:	6819      	ldr	r1, [r3, #0]
 8021226:	4610      	mov	r0, r2
 8021228:	f000 fbc3 	bl	80219b2 <_ZN11QueueSender10ResetQueueEv>
 802122c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021230:	4619      	mov	r1, r3
 8021232:	4620      	mov	r0, r4
 8021234:	f002 f982 	bl	802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021238:	e000      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
				break;
 802123a:	bf00      	nop
		}
	}
 802123c:	bf00      	nop
 802123e:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 8021242:	46bd      	mov	sp, r7
 8021244:	bd90      	pop	{r4, r7, pc}
 8021246:	bf00      	nop
 8021248:	00020b7c 	.word	0x00020b7c

0802124c <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 802124c:	b580      	push	{r7, lr}
 802124e:	b082      	sub	sp, #8
 8021250:	af00      	add	r7, sp, #0
 8021252:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 8021254:	687a      	ldr	r2, [r7, #4]
 8021256:	4b06      	ldr	r3, [pc, #24]	; (8021270 <_ZNK11QueueSender11HasResponceEv+0x24>)
 8021258:	4413      	add	r3, r2
 802125a:	4618      	mov	r0, r3
 802125c:	f002 f9b0 	bl	80235c0 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 8021260:	4603      	mov	r3, r0
 8021262:	f083 0301 	eor.w	r3, r3, #1
 8021266:	b2db      	uxtb	r3, r3
	}
 8021268:	4618      	mov	r0, r3
 802126a:	3708      	adds	r7, #8
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}
 8021270:	00020b7c 	.word	0x00020b7c

08021274 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021274:	b480      	push	{r7}
 8021276:	b083      	sub	sp, #12
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021282:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 8021286:	3301      	adds	r3, #1
 8021288:	687a      	ldr	r2, [r7, #4]
 802128a:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 802128e:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 8021292:	fb93 f1f2 	sdiv	r1, r3, r2
 8021296:	fb01 f202 	mul.w	r2, r1, r2
 802129a:	1a9b      	subs	r3, r3, r2
 802129c:	b2da      	uxtb	r2, r3
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212a4:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212ae:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d106      	bne.n	80212c4 <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212bc:	2201      	movs	r2, #1
 80212be:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 80212c2:	e000      	b.n	80212c6 <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 80212c4:	bf00      	nop
	}
 80212c6:	370c      	adds	r7, #12
 80212c8:	46bd      	mov	sp, r7
 80212ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ce:	4770      	bx	lr

080212d0 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 80212d0:	b580      	push	{r7, lr}
 80212d2:	b082      	sub	sp, #8
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	6078      	str	r0, [r7, #4]
 80212d8:	460b      	mov	r3, r1
 80212da:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80212dc:	78fb      	ldrb	r3, [r7, #3]
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d105      	bne.n	80212ee <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80212e2:	4b08      	ldr	r3, [pc, #32]	; (8021304 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80212e4:	4a08      	ldr	r2, [pc, #32]	; (8021308 <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80212e6:	21e7      	movs	r1, #231	; 0xe7
 80212e8:	4808      	ldr	r0, [pc, #32]	; (802130c <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 80212ea:	f01a fd2d 	bl	803bd48 <__assert_func>
		SendPeriod = periodMs;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212f4:	461a      	mov	r2, r3
 80212f6:	78fb      	ldrb	r3, [r7, #3]
 80212f8:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 80212fc:	bf00      	nop
 80212fe:	3708      	adds	r7, #8
 8021300:	46bd      	mov	sp, r7
 8021302:	bd80      	pop	{r7, pc}
 8021304:	0803d010 	.word	0x0803d010
 8021308:	0803d01c 	.word	0x0803d01c
 802130c:	0803cf9c 	.word	0x0803cf9c

08021310 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021310:	b580      	push	{r7, lr}
 8021312:	b082      	sub	sp, #8
 8021314:	af00      	add	r7, sp, #0
 8021316:	6078      	str	r0, [r7, #4]
 8021318:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 802131a:	6838      	ldr	r0, [r7, #0]
 802131c:	f7ff ff96 	bl	802124c <_ZNK11QueueSender11HasResponceEv>
 8021320:	4603      	mov	r3, r0
 8021322:	2b00      	cmp	r3, #0
 8021324:	d105      	bne.n	8021332 <_ZN11QueueSender11GetResponceEv+0x22>
 8021326:	4b10      	ldr	r3, [pc, #64]	; (8021368 <_ZN11QueueSender11GetResponceEv+0x58>)
 8021328:	4a10      	ldr	r2, [pc, #64]	; (802136c <_ZN11QueueSender11GetResponceEv+0x5c>)
 802132a:	21ec      	movs	r1, #236	; 0xec
 802132c:	4810      	ldr	r0, [pc, #64]	; (8021370 <_ZN11QueueSender11GetResponceEv+0x60>)
 802132e:	f01a fd0b 	bl	803bd48 <__assert_func>
		Responce responce = Responces.Front();
 8021332:	683a      	ldr	r2, [r7, #0]
 8021334:	4b0f      	ldr	r3, [pc, #60]	; (8021374 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021336:	4413      	add	r3, r2
 8021338:	4618      	mov	r0, r3
 802133a:	f002 f953 	bl	80235e4 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv>
 802133e:	4602      	mov	r2, r0
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	4618      	mov	r0, r3
 8021344:	4611      	mov	r1, r2
 8021346:	f44f 7384 	mov.w	r3, #264	; 0x108
 802134a:	461a      	mov	r2, r3
 802134c:	f01a fd66 	bl	803be1c <memcpy>
		Responces.Pop();
 8021350:	683a      	ldr	r2, [r7, #0]
 8021352:	4b08      	ldr	r3, [pc, #32]	; (8021374 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021354:	4413      	add	r3, r2
 8021356:	4618      	mov	r0, r3
 8021358:	f002 f966 	bl	8023628 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 802135c:	bf00      	nop
	}
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	3708      	adds	r7, #8
 8021362:	46bd      	mov	sp, r7
 8021364:	bd80      	pop	{r7, pc}
 8021366:	bf00      	nop
 8021368:	0803d048 	.word	0x0803d048
 802136c:	0803d058 	.word	0x0803d058
 8021370:	0803cf9c 	.word	0x0803cf9c
 8021374:	00020b7c 	.word	0x00020b7c

08021378 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 8021378:	b5b0      	push	{r4, r5, r7, lr}
 802137a:	b0cc      	sub	sp, #304	; 0x130
 802137c:	af02      	add	r7, sp, #8
 802137e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021382:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021386:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021388:	b672      	cpsid	i
}
 802138a:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 802138c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021390:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802139a:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802139e:	2b00      	cmp	r3, #0
 80213a0:	f000 80f0 	beq.w	8021584 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
 80213a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213b2:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80213b6:	f083 0301 	eor.w	r3, r3, #1
 80213ba:	b2db      	uxtb	r3, r3
 80213bc:	2b00      	cmp	r3, #0
 80213be:	f000 80e1 	beq.w	8021584 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
 80213c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ca:	681b      	ldr	r3, [r3, #0]
 80213cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213d0:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	f000 80d5 	beq.w	8021584 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20c>
			HasPriorityRequest = false;
 80213da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213e8:	2200      	movs	r2, #0
 80213ea:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 80213ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213fc:	2201      	movs	r2, #1
 80213fe:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 8021402:	b662      	cpsie	i
}
 8021404:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 8021406:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802140a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802140e:	681a      	ldr	r2, [r3, #0]
 8021410:	4b60      	ldr	r3, [pc, #384]	; (8021594 <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 8021412:	4413      	add	r3, r2
 8021414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 8021418:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802141c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 8021420:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021424:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021428:	4618      	mov	r0, r3
 802142a:	f7ff fd6e 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 802142e:	4603      	mov	r3, r0
 8021430:	2b00      	cmp	r3, #0
 8021432:	d005      	beq.n	8021440 <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 8021434:	4b58      	ldr	r3, [pc, #352]	; (8021598 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021436:	4a59      	ldr	r2, [pc, #356]	; (802159c <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021438:	21fc      	movs	r1, #252	; 0xfc
 802143a:	4859      	ldr	r0, [pc, #356]	; (80215a0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 802143c:	f01a fc84 	bl	803bd48 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021440:	b672      	cpsid	i
}
 8021442:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021444:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021452:	2200      	movs	r2, #0
 8021454:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 8021458:	b662      	cpsie	i
}
 802145a:	bf00      	nop
			__enable_irq();

			assert(
 802145c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802146a:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802146e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8021472:	f002 f907 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8021476:	4601      	mov	r1, r0
 8021478:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802147c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021480:	b29b      	uxth	r3, r3
 8021482:	461a      	mov	r2, r3
 8021484:	4620      	mov	r0, r4
 8021486:	f013 fe33 	bl	80350f0 <HAL_UART_Transmit_IT>
 802148a:	4603      	mov	r3, r0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d006      	beq.n	802149e <_ZN11QueueSender22ProcessPriorityRequestEv+0x126>
 8021490:	4b44      	ldr	r3, [pc, #272]	; (80215a4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 8021492:	4a42      	ldr	r2, [pc, #264]	; (802159c <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021494:	f240 1103 	movw	r1, #259	; 0x103
 8021498:	4841      	ldr	r0, [pc, #260]	; (80215a0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 802149a:	f01a fc55 	bl	803bd48 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 802149e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214ac:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d100      	bne.n	80214b6 <_ZN11QueueSender22ProcessPriorityRequestEv+0x13e>
 80214b4:	e7f3      	b.n	802149e <_ZN11QueueSender22ProcessPriorityRequestEv+0x126>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 80214b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80214ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80214be:	b2da      	uxtb	r2, r3
 80214c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214c8:	4611      	mov	r1, r2
 80214ca:	6818      	ldr	r0, [r3, #0]
 80214cc:	f000 f950 	bl	8021770 <_ZN11QueueSender7ReceiveEh>
 80214d0:	4603      	mov	r3, r0
 80214d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 80214d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80214da:	2b02      	cmp	r3, #2
 80214dc:	d11e      	bne.n	802151c <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a4>
				uint32_t delayMS = 5;
 80214de:	2305      	movs	r3, #5
 80214e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 80214e4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80214e8:	f009 fbc0 	bl	802ac6c <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80214ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214fa:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80214fe:	f107 010f 	add.w	r1, r7, #15
 8021502:	2300      	movs	r3, #0
 8021504:	2201      	movs	r2, #1
 8021506:	f013 fd1f 	bl	8034f48 <HAL_UART_Receive>
 802150a:	4603      	mov	r3, r0
 802150c:	2b00      	cmp	r3, #0
 802150e:	bf0c      	ite	eq
 8021510:	2301      	moveq	r3, #1
 8021512:	2300      	movne	r3, #0
 8021514:	b2db      	uxtb	r3, r3
 8021516:	2b00      	cmp	r3, #0
 8021518:	d000      	beq.n	802151c <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a4>
 802151a:	e7e7      	b.n	80214ec <_ZN11QueueSender22ProcessPriorityRequestEv+0x174>
					;
			}

			Responces.Push(
 802151c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	4c20      	ldr	r4, [pc, #128]	; (80215a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 8021528:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 802152a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802152e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	4a1d      	ldr	r2, [pc, #116]	; (80215ac <_ZN11QueueSender22ProcessPriorityRequestEv+0x234>)
 8021536:	441a      	add	r2, r3
							MessageMode::Sync, error));
 8021538:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802153c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8021540:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021544:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 8021548:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802154c:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8021550:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8021554:	9301      	str	r3, [sp, #4]
 8021556:	2300      	movs	r3, #0
 8021558:	9300      	str	r3, [sp, #0]
 802155a:	462b      	mov	r3, r5
 802155c:	6809      	ldr	r1, [r1, #0]
 802155e:	f000 f9b3 	bl	80218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 8021562:	f107 0310 	add.w	r3, r7, #16
 8021566:	4619      	mov	r1, r3
 8021568:	4620      	mov	r0, r4
 802156a:	f001 ffe7 	bl	802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 802156e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021572:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802157c:	2200      	movs	r2, #0
 802157e:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021582:	e001      	b.n	8021588 <_ZN11QueueSender22ProcessPriorityRequestEv+0x210>
  __ASM volatile ("cpsie i" : : : "memory");
 8021584:	b662      	cpsie	i
}
 8021586:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 8021588:	bf00      	nop
 802158a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802158e:	46bd      	mov	sp, r7
 8021590:	bdb0      	pop	{r4, r5, r7, pc}
 8021592:	bf00      	nop
 8021594:	000215d8 	.word	0x000215d8
 8021598:	0803d07c 	.word	0x0803d07c
 802159c:	0803d0bc 	.word	0x0803d0bc
 80215a0:	0803cf9c 	.word	0x0803cf9c
 80215a4:	0803d0e8 	.word	0x0803d0e8
 80215a8:	00020b7c 	.word	0x00020b7c
 80215ac:	000216e6 	.word	0x000216e6

080215b0 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80215b0:	b580      	push	{r7, lr}
 80215b2:	b08a      	sub	sp, #40	; 0x28
 80215b4:	af00      	add	r7, sp, #0
 80215b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80215b8:	b672      	cpsid	i
}
 80215ba:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215c2:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
				&& TransmitComplete) {
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d01c      	beq.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	4618      	mov	r0, r3
 80215ce:	f002 f866 	bl	802369e <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 80215d2:	4603      	mov	r3, r0
 80215d4:	f083 0301 	eor.w	r3, r3, #1
 80215d8:	b2db      	uxtb	r3, r3
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d012      	beq.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215e4:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80215e8:	f083 0301 	eor.w	r3, r3, #1
 80215ec:	b2db      	uxtb	r3, r3
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d008      	beq.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215f8:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d001      	beq.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 8021600:	2301      	movs	r3, #1
 8021602:	e000      	b.n	8021606 <_ZN11QueueSender15ProcessRequestsEv+0x56>
 8021604:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 8021606:	2b00      	cmp	r3, #0
 8021608:	f000 80a5 	beq.w	8021756 <_ZN11QueueSender15ProcessRequestsEv+0x1a6>

			auto &request = Requests.Front();
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	4618      	mov	r0, r3
 8021610:	f002 f856 	bl	80236c0 <_ZN10FixedQueueI7RequestLj500EE5FrontEv>
 8021614:	6238      	str	r0, [r7, #32]
			auto data = request.Data.data() + 1;
 8021616:	6a3b      	ldr	r3, [r7, #32]
 8021618:	4618      	mov	r0, r3
 802161a:	f002 f833 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 802161e:	4603      	mov	r3, r0
 8021620:	3301      	adds	r3, #1
 8021622:	61fb      	str	r3, [r7, #28]

			auto &nPause = request.Data[0];
 8021624:	6a3b      	ldr	r3, [r7, #32]
 8021626:	2100      	movs	r1, #0
 8021628:	4618      	mov	r0, r3
 802162a:	f002 f86b 	bl	8023704 <_ZNSt5arrayIhLj256EEixEj>
 802162e:	61b8      	str	r0, [r7, #24]

			if (nPause != 0) {
 8021630:	69bb      	ldr	r3, [r7, #24]
 8021632:	781b      	ldrb	r3, [r3, #0]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d008      	beq.n	802164a <_ZN11QueueSender15ProcessRequestsEv+0x9a>
				nPause--;
 8021638:	69bb      	ldr	r3, [r7, #24]
 802163a:	781b      	ldrb	r3, [r3, #0]
 802163c:	3b01      	subs	r3, #1
 802163e:	b2da      	uxtb	r2, r3
 8021640:	69bb      	ldr	r3, [r7, #24]
 8021642:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8021644:	b662      	cpsie	i
}
 8021646:	bf00      	nop
				__enable_irq();
				return;
 8021648:	e087      	b.n	802175a <_ZN11QueueSender15ProcessRequestsEv+0x1aa>
			}

			WaitResponce = true;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021650:	2201      	movs	r2, #1
 8021652:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 8021656:	b662      	cpsie	i
}
 8021658:	bf00      	nop
			__enable_irq();

			assert(
 802165a:	6a3b      	ldr	r3, [r7, #32]
 802165c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021660:	4618      	mov	r0, r3
 8021662:	f7ff fc52 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021666:	4603      	mov	r3, r0
 8021668:	2b01      	cmp	r3, #1
 802166a:	d006      	beq.n	802167a <_ZN11QueueSender15ProcessRequestsEv+0xca>
 802166c:	4b3c      	ldr	r3, [pc, #240]	; (8021760 <_ZN11QueueSender15ProcessRequestsEv+0x1b0>)
 802166e:	4a3d      	ldr	r2, [pc, #244]	; (8021764 <_ZN11QueueSender15ProcessRequestsEv+0x1b4>)
 8021670:	f44f 7199 	mov.w	r1, #306	; 0x132
 8021674:	483c      	ldr	r0, [pc, #240]	; (8021768 <_ZN11QueueSender15ProcessRequestsEv+0x1b8>)
 8021676:	f01a fb67 	bl	803bd48 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 802167a:	2305      	movs	r3, #5
 802167c:	617b      	str	r3, [r7, #20]
			const uint32_t delayMS = 5;
 802167e:	2305      	movs	r3, #5
 8021680:	613b      	str	r3, [r7, #16]
			size_t i = 0;
 8021682:	2300      	movs	r3, #0
 8021684:	627b      	str	r3, [r7, #36]	; 0x24

			while (i++ < nAttempts) {
 8021686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021688:	1c5a      	adds	r2, r3, #1
 802168a:	627a      	str	r2, [r7, #36]	; 0x24
 802168c:	2b04      	cmp	r3, #4
 802168e:	bf94      	ite	ls
 8021690:	2301      	movls	r3, #1
 8021692:	2300      	movhi	r3, #0
 8021694:	b2db      	uxtb	r3, r3
 8021696:	2b00      	cmp	r3, #0
 8021698:	d04c      	beq.n	8021734 <_ZN11QueueSender15ProcessRequestsEv+0x184>

				TransmitComplete = false;
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216a0:	2200      	movs	r2, #0
 80216a2:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

				assert(
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ac:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80216b0:	6a3b      	ldr	r3, [r7, #32]
 80216b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80216b6:	b29b      	uxth	r3, r3
 80216b8:	461a      	mov	r2, r3
 80216ba:	69f9      	ldr	r1, [r7, #28]
 80216bc:	f013 fd18 	bl	80350f0 <HAL_UART_Transmit_IT>
 80216c0:	4603      	mov	r3, r0
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	d006      	beq.n	80216d4 <_ZN11QueueSender15ProcessRequestsEv+0x124>
 80216c6:	4b29      	ldr	r3, [pc, #164]	; (802176c <_ZN11QueueSender15ProcessRequestsEv+0x1bc>)
 80216c8:	4a26      	ldr	r2, [pc, #152]	; (8021764 <_ZN11QueueSender15ProcessRequestsEv+0x1b4>)
 80216ca:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80216ce:	4826      	ldr	r0, [pc, #152]	; (8021768 <_ZN11QueueSender15ProcessRequestsEv+0x1b8>)
 80216d0:	f01a fb3a 	bl	803bd48 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data,
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216da:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d100      	bne.n	80216e4 <_ZN11QueueSender15ProcessRequestsEv+0x134>
 80216e2:	e7f7      	b.n	80216d4 <_ZN11QueueSender15ProcessRequestsEv+0x124>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 80216e4:	6a3b      	ldr	r3, [r7, #32]
 80216e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80216ea:	b2db      	uxtb	r3, r3
 80216ec:	4619      	mov	r1, r3
 80216ee:	6878      	ldr	r0, [r7, #4]
 80216f0:	f000 f83e 	bl	8021770 <_ZN11QueueSender7ReceiveEh>
 80216f4:	4603      	mov	r3, r0
 80216f6:	73fb      	strb	r3, [r7, #15]
				if (error == ErrorCode::Success)
 80216f8:	7bfb      	ldrb	r3, [r7, #15]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d019      	beq.n	8021732 <_ZN11QueueSender15ProcessRequestsEv+0x182>
					break;
				HAL_Delay(delayMS);
 80216fe:	2005      	movs	r0, #5
 8021700:	f009 fab4 	bl	802ac6c <HAL_Delay>
				if (error == ErrorCode::NACK) {
 8021704:	7bfb      	ldrb	r3, [r7, #15]
 8021706:	2b02      	cmp	r3, #2
 8021708:	d1bd      	bne.n	8021686 <_ZN11QueueSender15ProcessRequestsEv+0xd6>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021710:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 8021714:	f107 010e 	add.w	r1, r7, #14
 8021718:	2300      	movs	r3, #0
 802171a:	2201      	movs	r2, #1
 802171c:	f013 fc14 	bl	8034f48 <HAL_UART_Receive>
 8021720:	4603      	mov	r3, r0
 8021722:	2b00      	cmp	r3, #0
 8021724:	bf0c      	ite	eq
 8021726:	2301      	moveq	r3, #1
 8021728:	2300      	movne	r3, #0
 802172a:	b2db      	uxtb	r3, r3
 802172c:	2b00      	cmp	r3, #0
 802172e:	d0aa      	beq.n	8021686 <_ZN11QueueSender15ProcessRequestsEv+0xd6>
 8021730:	e7eb      	b.n	802170a <_ZN11QueueSender15ProcessRequestsEv+0x15a>
					break;
 8021732:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	4618      	mov	r0, r3
 8021738:	f001 fff4 	bl	8023724 <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021742:	2200      	movs	r2, #0
 8021744:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802174e:	2200      	movs	r2, #0
 8021750:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8021754:	e001      	b.n	802175a <_ZN11QueueSender15ProcessRequestsEv+0x1aa>
  __ASM volatile ("cpsie i" : : : "memory");
 8021756:	b662      	cpsie	i
}
 8021758:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802175a:	3728      	adds	r7, #40	; 0x28
 802175c:	46bd      	mov	sp, r7
 802175e:	bd80      	pop	{r7, pc}
 8021760:	0803d138 	.word	0x0803d138
 8021764:	0803d17c 	.word	0x0803d17c
 8021768:	0803cf9c 	.word	0x0803cf9c
 802176c:	0803d1a0 	.word	0x0803d1a0

08021770 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 8021770:	b590      	push	{r4, r7, lr}
 8021772:	b085      	sub	sp, #20
 8021774:	af00      	add	r7, sp, #0
 8021776:	6078      	str	r0, [r7, #4]
 8021778:	460b      	mov	r3, r1
 802177a:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 802177c:	78fb      	ldrb	r3, [r7, #3]
 802177e:	2b03      	cmp	r3, #3
 8021780:	d806      	bhi.n	8021790 <_ZN11QueueSender7ReceiveEh+0x20>
 8021782:	4b33      	ldr	r3, [pc, #204]	; (8021850 <_ZN11QueueSender7ReceiveEh+0xe0>)
 8021784:	4a33      	ldr	r2, [pc, #204]	; (8021854 <_ZN11QueueSender7ReceiveEh+0xe4>)
 8021786:	f240 1159 	movw	r1, #345	; 0x159
 802178a:	4833      	ldr	r0, [pc, #204]	; (8021858 <_ZN11QueueSender7ReceiveEh+0xe8>)
 802178c:	f01a fadc 	bl	803bd48 <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021796:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802179a:	687a      	ldr	r2, [r7, #4]
 802179c:	4b2f      	ldr	r3, [pc, #188]	; (802185c <_ZN11QueueSender7ReceiveEh+0xec>)
 802179e:	4413      	add	r3, r2
 80217a0:	4618      	mov	r0, r3
 80217a2:	f001 ff6f 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 80217a6:	4601      	mov	r1, r0
				TimeoutS);
 80217a8:	687b      	ldr	r3, [r7, #4]
 80217aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217ae:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80217b2:	2204      	movs	r2, #4
 80217b4:	4620      	mov	r0, r4
 80217b6:	f013 fbc7 	bl	8034f48 <HAL_UART_Receive>
 80217ba:	4603      	mov	r3, r0
 80217bc:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80217be:	7bfb      	ldrb	r3, [r7, #15]
 80217c0:	2b03      	cmp	r3, #3
 80217c2:	d101      	bne.n	80217c8 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 80217c4:	2301      	movs	r3, #1
 80217c6:	e03f      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 80217c8:	687a      	ldr	r2, [r7, #4]
 80217ca:	4b24      	ldr	r3, [pc, #144]	; (802185c <_ZN11QueueSender7ReceiveEh+0xec>)
 80217cc:	4413      	add	r3, r2
 80217ce:	4618      	mov	r0, r3
 80217d0:	f001 ff58 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 80217d4:	4603      	mov	r3, r0
 80217d6:	4619      	mov	r1, r3
 80217d8:	6878      	ldr	r0, [r7, #4]
 80217da:	f000 f841 	bl	8021860 <_ZN11QueueSender6IsNackEPKh>
 80217de:	4603      	mov	r3, r0
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d001      	beq.n	80217e8 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 80217e4:	2302      	movs	r3, #2
 80217e6:	e02f      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 80217e8:	7bfb      	ldrb	r3, [r7, #15]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d001      	beq.n	80217f2 <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 80217ee:	2303      	movs	r3, #3
 80217f0:	e02a      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 80217f2:	78fb      	ldrb	r3, [r7, #3]
 80217f4:	2b04      	cmp	r3, #4
 80217f6:	d101      	bne.n	80217fc <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 80217f8:	2300      	movs	r3, #0
 80217fa:	e025      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021802:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021806:	687a      	ldr	r2, [r7, #4]
 8021808:	4b14      	ldr	r3, [pc, #80]	; (802185c <_ZN11QueueSender7ReceiveEh+0xec>)
 802180a:	4413      	add	r3, r2
 802180c:	4618      	mov	r0, r3
 802180e:	f001 ff39 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8021812:	4603      	mov	r3, r0
 8021814:	1d19      	adds	r1, r3, #4
 8021816:	78fb      	ldrb	r3, [r7, #3]
 8021818:	b29b      	uxth	r3, r3
 802181a:	3b04      	subs	r3, #4
 802181c:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021824:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021828:	4620      	mov	r0, r4
 802182a:	f013 fb8d 	bl	8034f48 <HAL_UART_Receive>
 802182e:	4603      	mov	r3, r0
 8021830:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021832:	7bfb      	ldrb	r3, [r7, #15]
 8021834:	2b03      	cmp	r3, #3
 8021836:	d101      	bne.n	802183c <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 8021838:	2301      	movs	r3, #1
 802183a:	e005      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 802183c:	7bfb      	ldrb	r3, [r7, #15]
 802183e:	2b00      	cmp	r3, #0
 8021840:	d001      	beq.n	8021846 <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 8021842:	2303      	movs	r3, #3
 8021844:	e000      	b.n	8021848 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 8021846:	2300      	movs	r3, #0
	}
 8021848:	4618      	mov	r0, r3
 802184a:	3714      	adds	r7, #20
 802184c:	46bd      	mov	sp, r7
 802184e:	bd90      	pop	{r4, r7, pc}
 8021850:	0803d1e8 	.word	0x0803d1e8
 8021854:	0803d1f4 	.word	0x0803d1f4
 8021858:	0803cf9c 	.word	0x0803cf9c
 802185c:	000216e6 	.word	0x000216e6

08021860 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021860:	b580      	push	{r7, lr}
 8021862:	b084      	sub	sp, #16
 8021864:	af00      	add	r7, sp, #0
 8021866:	6078      	str	r0, [r7, #4]
 8021868:	6039      	str	r1, [r7, #0]
		assert(data);
 802186a:	683b      	ldr	r3, [r7, #0]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d106      	bne.n	802187e <_ZN11QueueSender6IsNackEPKh+0x1e>
 8021870:	4b11      	ldr	r3, [pc, #68]	; (80218b8 <_ZN11QueueSender6IsNackEPKh+0x58>)
 8021872:	4a12      	ldr	r2, [pc, #72]	; (80218bc <_ZN11QueueSender6IsNackEPKh+0x5c>)
 8021874:	f240 1177 	movw	r1, #375	; 0x177
 8021878:	4811      	ldr	r0, [pc, #68]	; (80218c0 <_ZN11QueueSender6IsNackEPKh+0x60>)
 802187a:	f01a fa65 	bl	803bd48 <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 802187e:	4b11      	ldr	r3, [pc, #68]	; (80218c4 <_ZN11QueueSender6IsNackEPKh+0x64>)
 8021880:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 8021882:	2300      	movs	r3, #0
 8021884:	60fb      	str	r3, [r7, #12]
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	2b03      	cmp	r3, #3
 802188a:	dc10      	bgt.n	80218ae <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 802188c:	68fb      	ldr	r3, [r7, #12]
 802188e:	683a      	ldr	r2, [r7, #0]
 8021890:	4413      	add	r3, r2
 8021892:	781a      	ldrb	r2, [r3, #0]
 8021894:	f107 0108 	add.w	r1, r7, #8
 8021898:	68fb      	ldr	r3, [r7, #12]
 802189a:	440b      	add	r3, r1
 802189c:	781b      	ldrb	r3, [r3, #0]
 802189e:	429a      	cmp	r2, r3
 80218a0:	d001      	beq.n	80218a6 <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 80218a2:	2300      	movs	r3, #0
 80218a4:	e004      	b.n	80218b0 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 80218a6:	68fb      	ldr	r3, [r7, #12]
 80218a8:	3301      	adds	r3, #1
 80218aa:	60fb      	str	r3, [r7, #12]
 80218ac:	e7eb      	b.n	8021886 <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 80218ae:	2301      	movs	r3, #1
	}
 80218b0:	4618      	mov	r0, r3
 80218b2:	3710      	adds	r7, #16
 80218b4:	46bd      	mov	sp, r7
 80218b6:	bd80      	pop	{r7, pc}
 80218b8:	0803d230 	.word	0x0803d230
 80218bc:	0803d238 	.word	0x0803d238
 80218c0:	0803cf9c 	.word	0x0803cf9c
 80218c4:	1715fe04 	.word	0x1715fe04

080218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT &data, size_t ResponceSize,
 80218c8:	b580      	push	{r7, lr}
 80218ca:	b084      	sub	sp, #16
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	60f8      	str	r0, [r7, #12]
 80218d0:	60b9      	str	r1, [r7, #8]
 80218d2:	607a      	str	r2, [r7, #4]
 80218d4:	603b      	str	r3, [r7, #0]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 80218d6:	68fa      	ldr	r2, [r7, #12]
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	4610      	mov	r0, r2
 80218dc:	4619      	mov	r1, r3
 80218de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80218e2:	461a      	mov	r2, r3
 80218e4:	f01a fa9a 	bl	803be1c <memcpy>
		responce.ResponceSize = ResponceSize;
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	683a      	ldr	r2, [r7, #0]
 80218ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.PeripheryID = Periphery::Body;
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	2200      	movs	r2, #0
 80218f4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.Error = ErrorCode::Serialize(error);
 80218f8:	7f3b      	ldrb	r3, [r7, #28]
 80218fa:	4618      	mov	r0, r3
 80218fc:	f7ff fb11 	bl	8020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>
 8021900:	4603      	mov	r3, r0
 8021902:	461a      	mov	r2, r3
 8021904:	68fb      	ldr	r3, [r7, #12]
 8021906:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 802190a:	7e3b      	ldrb	r3, [r7, #24]
 802190c:	4618      	mov	r0, r3
 802190e:	f7ff faf0 	bl	8020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>
 8021912:	4603      	mov	r3, r0
 8021914:	461a      	mov	r2, r3
 8021916:	68fb      	ldr	r3, [r7, #12]
 8021918:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		return responce;
 802191c:	bf00      	nop
	}
 802191e:	68f8      	ldr	r0, [r7, #12]
 8021920:	3710      	adds	r7, #16
 8021922:	46bd      	mov	sp, r7
 8021924:	bd80      	pop	{r7, pc}

08021926 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8021926:	b580      	push	{r7, lr}
 8021928:	b0c6      	sub	sp, #280	; 0x118
 802192a:	af02      	add	r7, sp, #8
 802192c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021934:	6018      	str	r0, [r3, #0]
 8021936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802193a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 802193e:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 8021940:	f107 030c 	add.w	r3, r7, #12
 8021944:	4618      	mov	r0, r3
 8021946:	f001 fe9d 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 802194a:	4602      	mov	r2, r0
 802194c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021954:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 8021956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802195a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 802195e:	6818      	ldr	r0, [r3, #0]
 8021960:	f000 f962 	bl	8021c28 <_ZNK11QueueSender7GetInfoEv>
 8021964:	4603      	mov	r3, r0
 8021966:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802196a:	f107 0208 	add.w	r2, r7, #8
 802196e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8021972:	4611      	mov	r1, r2
 8021974:	4618      	mov	r0, r3
 8021976:	f7ff fae1 	bl	8020f3c <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info,
				ErrorCode::Success);
 802197a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802197e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021982:	6818      	ldr	r0, [r3, #0]
 8021984:	f107 020c 	add.w	r2, r7, #12
 8021988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802198c:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021990:	2300      	movs	r3, #0
 8021992:	9301      	str	r3, [sp, #4]
 8021994:	2302      	movs	r3, #2
 8021996:	9300      	str	r3, [sp, #0]
 8021998:	2304      	movs	r3, #4
 802199a:	6809      	ldr	r1, [r1, #0]
 802199c:	f7ff ff94 	bl	80218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 80219a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80219a8:	6818      	ldr	r0, [r3, #0]
 80219aa:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80219ae:	46bd      	mov	sp, r7
 80219b0:	bd80      	pop	{r7, pc}

080219b2 <_ZN11QueueSender10ResetQueueEv>:

	Responce ResetQueue() {
 80219b2:	b580      	push	{r7, lr}
 80219b4:	b0c4      	sub	sp, #272	; 0x110
 80219b6:	af02      	add	r7, sp, #8
 80219b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80219c0:	6018      	str	r0, [r3, #0]
 80219c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219ca:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		Requests.Clear();
 80219cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	4618      	mov	r0, r3
 80219d8:	f001 fed2 	bl	8023780 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>

		return CreateResponce(data, 1, MessageMode::ResetQueue,
				ErrorCode::Success);
 80219dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80219e4:	6818      	ldr	r0, [r3, #0]
 80219e6:	f107 0208 	add.w	r2, r7, #8
 80219ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219ee:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80219f2:	2300      	movs	r3, #0
 80219f4:	9301      	str	r3, [sp, #4]
 80219f6:	2304      	movs	r3, #4
 80219f8:	9300      	str	r3, [sp, #0]
 80219fa:	2301      	movs	r3, #1
 80219fc:	6809      	ldr	r1, [r1, #0]
 80219fe:	f7ff ff63 	bl	80218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021a0a:	6818      	ldr	r0, [r3, #0]
 8021a0c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8021a10:	46bd      	mov	sp, r7
 8021a12:	bd80      	pop	{r7, pc}

08021a14 <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 8021a14:	b580      	push	{r7, lr}
 8021a16:	b082      	sub	sp, #8
 8021a18:	af00      	add	r7, sp, #0
 8021a1a:	6078      	str	r0, [r7, #4]
 8021a1c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	6839      	ldr	r1, [r7, #0]
 8021a22:	4618      	mov	r0, r3
 8021a24:	f001 fec6 	bl	80237b4 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	3708      	adds	r7, #8
 8021a2e:	46bd      	mov	sp, r7
 8021a30:	bd80      	pop	{r7, pc}
	...

08021a34 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 8021a34:	b580      	push	{r7, lr}
 8021a36:	b0c8      	sub	sp, #288	; 0x120
 8021a38:	af02      	add	r7, sp, #8
 8021a3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a42:	6018      	str	r0, [r3, #0]
 8021a44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a4c:	6019      	str	r1, [r3, #0]
 8021a4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a56:	601a      	str	r2, [r3, #0]
		assert(
 8021a58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021a66:	4618      	mov	r0, r3
 8021a68:	f7ff fa4f 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021a6c:	4603      	mov	r3, r0
 8021a6e:	2b03      	cmp	r3, #3
 8021a70:	d006      	beq.n	8021a80 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 8021a72:	4b23      	ldr	r3, [pc, #140]	; (8021b00 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 8021a74:	4a23      	ldr	r2, [pc, #140]	; (8021b04 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 8021a76:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8021a7a:	4823      	ldr	r0, [pc, #140]	; (8021b08 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 8021a7c:	f01a f964 	bl	803bd48 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 8021a80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	2100      	movs	r1, #0
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	f7ff ffc1 	bl	8021a14 <_ZNKSt5arrayIhLj256EEixEj>
 8021a92:	4603      	mov	r3, r0
 8021a94:	781b      	ldrb	r3, [r3, #0]
 8021a96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 8021a9a:	2300      	movs	r3, #0
 8021a9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 8021aa0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d103      	bne.n	8021ab0 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 8021aa8:	2304      	movs	r3, #4
 8021aaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021aae:	e009      	b.n	8021ac4 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 8021ab0:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8021ab4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ab8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021abc:	4611      	mov	r1, r2
 8021abe:	6818      	ldr	r0, [r3, #0]
 8021ac0:	f7ff fc06 	bl	80212d0 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 8021ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ac8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021acc:	6818      	ldr	r0, [r3, #0]
 8021ace:	f107 0214 	add.w	r2, r7, #20
 8021ad2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ad6:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021ada:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021ade:	9301      	str	r3, [sp, #4]
 8021ae0:	2303      	movs	r3, #3
 8021ae2:	9300      	str	r3, [sp, #0]
 8021ae4:	2301      	movs	r3, #1
 8021ae6:	6809      	ldr	r1, [r1, #0]
 8021ae8:	f7ff feee 	bl	80218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021af0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021af4:	6818      	ldr	r0, [r3, #0]
 8021af6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}
 8021afe:	bf00      	nop
 8021b00:	0803d264 	.word	0x0803d264
 8021b04:	0803d2ac 	.word	0x0803d2ac
 8021b08:	0803cf9c 	.word	0x0803cf9c

08021b0c <_ZN11QueueSender19CreateAsyncResponceERK7Request>:

	Responce CreateAsyncResponce(const Request &request) {
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	b0c8      	sub	sp, #288	; 0x120
 8021b10:	af02      	add	r7, sp, #8
 8021b12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b1a:	6018      	str	r0, [r3, #0]
 8021b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b24:	6019      	str	r1, [r3, #0]
 8021b26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b2e:	601a      	str	r2, [r3, #0]
		assert(
 8021b30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021b3e:	4618      	mov	r0, r3
 8021b40:	f7ff f9e3 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021b44:	4603      	mov	r3, r0
 8021b46:	2b01      	cmp	r3, #1
 8021b48:	d006      	beq.n	8021b58 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x4c>
 8021b4a:	4b27      	ldr	r3, [pc, #156]	; (8021be8 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xdc>)
 8021b4c:	4a27      	ldr	r2, [pc, #156]	; (8021bec <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe0>)
 8021b4e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8021b52:	4827      	ldr	r0, [pc, #156]	; (8021bf0 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe4>)
 8021b54:	f01a f8f8 	bl	803bd48 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::Async);
		ErrorCode::Type error = ErrorCode::Success;
 8021b58:	2300      	movs	r3, #0
 8021b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (Requests.Full())
 8021b5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	4618      	mov	r0, r3
 8021b6a:	f001 fe31 	bl	80237d0 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>
 8021b6e:	4603      	mov	r3, r0
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d003      	beq.n	8021b7c <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x70>
			error = ErrorCode::QueueFull;
 8021b74:	2305      	movs	r3, #5
 8021b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021b7a:	e00c      	b.n	8021b96 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x8a>
		else
			Requests.Push(request);
 8021b7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b84:	681a      	ldr	r2, [r3, #0]
 8021b86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b8e:	6819      	ldr	r1, [r3, #0]
 8021b90:	4610      	mov	r0, r2
 8021b92:	f001 fe2f 	bl	80237f4 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>

		return CreateResponce( { 0 }, 1, MessageMode::Async, error);
 8021b96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021b9e:	4618      	mov	r0, r3
 8021ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021ba4:	461a      	mov	r2, r3
 8021ba6:	2100      	movs	r1, #0
 8021ba8:	f01a f960 	bl	803be6c <memset>
 8021bac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021bb4:	6818      	ldr	r0, [r3, #0]
 8021bb6:	f107 0214 	add.w	r2, r7, #20
 8021bba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bbe:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021bc6:	9301      	str	r3, [sp, #4]
 8021bc8:	2301      	movs	r3, #1
 8021bca:	9300      	str	r3, [sp, #0]
 8021bcc:	2301      	movs	r3, #1
 8021bce:	6809      	ldr	r1, [r1, #0]
 8021bd0:	f7ff fe7a 	bl	80218c8 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021bd4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021bdc:	6818      	ldr	r0, [r3, #0]
 8021bde:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021be2:	46bd      	mov	sp, r7
 8021be4:	bd80      	pop	{r7, pc}
 8021be6:	bf00      	nop
 8021be8:	0803d138 	.word	0x0803d138
 8021bec:	0803d2ec 	.word	0x0803d2ec
 8021bf0:	0803cf9c 	.word	0x0803cf9c

08021bf4 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021bf4:	b480      	push	{r7}
 8021bf6:	b083      	sub	sp, #12
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021bfc:	bf00      	nop
 8021bfe:	370c      	adds	r7, #12
 8021c00:	46bd      	mov	sp, r7
 8021c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c06:	4770      	bx	lr

08021c08 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021c08:	b480      	push	{r7}
 8021c0a:	b083      	sub	sp, #12
 8021c0c:	af00      	add	r7, sp, #0
 8021c0e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021c16:	2201      	movs	r2, #1
 8021c18:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
	}
 8021c1c:	bf00      	nop
 8021c1e:	370c      	adds	r7, #12
 8021c20:	46bd      	mov	sp, r7
 8021c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c26:	4770      	bx	lr

08021c28 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021c28:	b580      	push	{r7, lr}
 8021c2a:	b084      	sub	sp, #16
 8021c2c:	af00      	add	r7, sp, #0
 8021c2e:	6078      	str	r0, [r7, #4]
		return {Requests.GetSize(), Responces.GetSize()};
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	4618      	mov	r0, r3
 8021c34:	f001 fe20 	bl	8023878 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021c38:	4603      	mov	r3, r0
 8021c3a:	b29b      	uxth	r3, r3
 8021c3c:	81bb      	strh	r3, [r7, #12]
 8021c3e:	687a      	ldr	r2, [r7, #4]
 8021c40:	4b09      	ldr	r3, [pc, #36]	; (8021c68 <_ZNK11QueueSender7GetInfoEv+0x40>)
 8021c42:	4413      	add	r3, r2
 8021c44:	4618      	mov	r0, r3
 8021c46:	f001 fe23 	bl	8023890 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	b29b      	uxth	r3, r3
 8021c4e:	81fb      	strh	r3, [r7, #14]
 8021c50:	2300      	movs	r3, #0
 8021c52:	89ba      	ldrh	r2, [r7, #12]
 8021c54:	f362 030f 	bfi	r3, r2, #0, #16
 8021c58:	89fa      	ldrh	r2, [r7, #14]
 8021c5a:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021c5e:	4618      	mov	r0, r3
 8021c60:	3710      	adds	r7, #16
 8021c62:	46bd      	mov	sp, r7
 8021c64:	bd80      	pop	{r7, pc}
 8021c66:	bf00      	nop
 8021c68:	00020b7c 	.word	0x00020b7c

08021c6c <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021c6c:	b480      	push	{r7}
 8021c6e:	b083      	sub	sp, #12
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	6078      	str	r0, [r7, #4]
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	2200      	movs	r2, #0
 8021c78:	601a      	str	r2, [r3, #0]
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	605a      	str	r2, [r3, #4]
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	2200      	movs	r2, #0
 8021c84:	609a      	str	r2, [r3, #8]
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	4618      	mov	r0, r3
 8021c8a:	370c      	adds	r7, #12
 8021c8c:	46bd      	mov	sp, r7
 8021c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c92:	4770      	bx	lr

08021c94 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021c94:	b580      	push	{r7, lr}
 8021c96:	b084      	sub	sp, #16
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	60f8      	str	r0, [r7, #12]
 8021c9c:	60b9      	str	r1, [r7, #8]
 8021c9e:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	4618      	mov	r0, r3
 8021ca4:	f7ff ffe2 	bl	8021c6c <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	68ba      	ldr	r2, [r7, #8]
 8021cac:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	687a      	ldr	r2, [r7, #4]
 8021cb4:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	2201      	movs	r2, #1
 8021cbc:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d106      	bne.n	8021cd4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021cc6:	4b06      	ldr	r3, [pc, #24]	; (8021ce0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021cc8:	4a06      	ldr	r2, [pc, #24]	; (8021ce4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021cca:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8021cce:	4806      	ldr	r0, [pc, #24]	; (8021ce8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021cd0:	f01a f83a 	bl	803bd48 <__assert_func>
	}
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	4618      	mov	r0, r3
 8021cd8:	3710      	adds	r7, #16
 8021cda:	46bd      	mov	sp, r7
 8021cdc:	bd80      	pop	{r7, pc}
 8021cde:	bf00      	nop
 8021ce0:	0803cfc0 	.word	0x0803cfc0
 8021ce4:	0803d328 	.word	0x0803d328
 8021ce8:	0803cf9c 	.word	0x0803cf9c

08021cec <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021cec:	b580      	push	{r7, lr}
 8021cee:	b082      	sub	sp, #8
 8021cf0:	af00      	add	r7, sp, #0
 8021cf2:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	2200      	movs	r2, #0
 8021cf8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021d08:	2201      	movs	r2, #1
 8021d0a:	4619      	mov	r1, r3
 8021d0c:	f013 fa98 	bl	8035240 <HAL_UART_Receive_IT>
 8021d10:	4603      	mov	r3, r0
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d006      	beq.n	8021d24 <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021d16:	4b05      	ldr	r3, [pc, #20]	; (8021d2c <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021d18:	4a05      	ldr	r2, [pc, #20]	; (8021d30 <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021d1a:	f240 11e9 	movw	r1, #489	; 0x1e9
 8021d1e:	4805      	ldr	r0, [pc, #20]	; (8021d34 <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021d20:	f01a f812 	bl	803bd48 <__assert_func>
	}
 8021d24:	bf00      	nop
 8021d26:	3708      	adds	r7, #8
 8021d28:	46bd      	mov	sp, r7
 8021d2a:	bd80      	pop	{r7, pc}
 8021d2c:	0803d364 	.word	0x0803d364
 8021d30:	0803d3a0 	.word	0x0803d3a0
 8021d34:	0803cf9c 	.word	0x0803cf9c

08021d38 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021d38:	b580      	push	{r7, lr}
 8021d3a:	b082      	sub	sp, #8
 8021d3c:	af00      	add	r7, sp, #0
 8021d3e:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	4618      	mov	r0, r3
 8021d44:	f001 fdb0 	bl	80238a8 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021d48:	4603      	mov	r3, r0
 8021d4a:	f083 0301 	eor.w	r3, r3, #1
 8021d4e:	b2db      	uxtb	r3, r3
	}
 8021d50:	4618      	mov	r0, r3
 8021d52:	3708      	adds	r7, #8
 8021d54:	46bd      	mov	sp, r7
 8021d56:	bd80      	pop	{r7, pc}

08021d58 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021d58:	b590      	push	{r4, r7, lr}
 8021d5a:	b095      	sub	sp, #84	; 0x54
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	6078      	str	r0, [r7, #4]
 8021d60:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d100      	bne.n	8021d6e <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021d6c:	e7f9      	b.n	8021d62 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021d74:	4618      	mov	r0, r3
 8021d76:	f001 fc85 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8021d7a:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d7e:	1c5a      	adds	r2, r3, #1
 8021d80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d82:	22ff      	movs	r2, #255	; 0xff
 8021d84:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d88:	1c5a      	adds	r2, r3, #1
 8021d8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d8c:	22aa      	movs	r2, #170	; 0xaa
 8021d8e:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d92:	1c5a      	adds	r2, r3, #1
 8021d94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d96:	683a      	ldr	r2, [r7, #0]
 8021d98:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021d9c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021da0:	1c5a      	adds	r2, r3, #1
 8021da2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021da4:	683a      	ldr	r2, [r7, #0]
 8021da6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8021daa:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dae:	1c5a      	adds	r2, r3, #1
 8021db0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021db2:	683a      	ldr	r2, [r7, #0]
 8021db4:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8021db8:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021dba:	683b      	ldr	r3, [r7, #0]
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	f001 fd84 	bl	80238ca <_ZNKSt5arrayIhLj256EE4dataEv>
 8021dc2:	4601      	mov	r1, r0
 8021dc4:	683b      	ldr	r3, [r7, #0]
 8021dc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021dca:	461a      	mov	r2, r3
 8021dcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021dce:	f01a f825 	bl	803be1c <memcpy>

		ptr += responce.ResponceSize;
 8021dd2:	683b      	ldr	r3, [r7, #0]
 8021dd4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021dda:	4413      	add	r3, r2
 8021ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021de0:	22af      	movs	r2, #175	; 0xaf
 8021de2:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	2200      	movs	r2, #0
 8021de8:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 3;
 8021dec:	683b      	ldr	r3, [r7, #0]
 8021dee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021df2:	3306      	adds	r3, #6
 8021df4:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021dfc:	4618      	mov	r0, r3
 8021dfe:	f001 fc41 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8021e02:	4601      	mov	r1, r0
 8021e04:	f107 0308 	add.w	r3, r7, #8
 8021e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021e0a:	4618      	mov	r0, r3
 8021e0c:	f01a f806 	bl	803be1c <memcpy>

		assert(
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021e1c:	4618      	mov	r0, r3
 8021e1e:	f001 fc31 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8021e22:	4601      	mov	r1, r0
 8021e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021e26:	b29b      	uxth	r3, r3
 8021e28:	461a      	mov	r2, r3
 8021e2a:	4620      	mov	r0, r4
 8021e2c:	f013 f960 	bl	80350f0 <HAL_UART_Transmit_IT>
 8021e30:	4603      	mov	r3, r0
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d006      	beq.n	8021e44 <_ZN13HeadInterface4SendERK8Responce+0xec>
 8021e36:	4b05      	ldr	r3, [pc, #20]	; (8021e4c <_ZN13HeadInterface4SendERK8Responce+0xf4>)
 8021e38:	4a05      	ldr	r2, [pc, #20]	; (8021e50 <_ZN13HeadInterface4SendERK8Responce+0xf8>)
 8021e3a:	f240 210a 	movw	r1, #522	; 0x20a
 8021e3e:	4805      	ldr	r0, [pc, #20]	; (8021e54 <_ZN13HeadInterface4SendERK8Responce+0xfc>)
 8021e40:	f019 ff82 	bl	803bd48 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021e44:	bf00      	nop
 8021e46:	3754      	adds	r7, #84	; 0x54
 8021e48:	46bd      	mov	sp, r7
 8021e4a:	bd90      	pop	{r4, r7, pc}
 8021e4c:	0803d3c8 	.word	0x0803d3c8
 8021e50:	0803d418 	.word	0x0803d418
 8021e54:	0803cf9c 	.word	0x0803cf9c

08021e58 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021e58:	b580      	push	{r7, lr}
 8021e5a:	b082      	sub	sp, #8
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
 8021e60:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021e62:	6838      	ldr	r0, [r7, #0]
 8021e64:	f7ff ff68 	bl	8021d38 <_ZNK13HeadInterface10HasRequestEv>
 8021e68:	4603      	mov	r3, r0
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d106      	bne.n	8021e7c <_ZN13HeadInterface10GetRequestEv+0x24>
 8021e6e:	4b0e      	ldr	r3, [pc, #56]	; (8021ea8 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021e70:	4a0e      	ldr	r2, [pc, #56]	; (8021eac <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021e72:	f44f 7104 	mov.w	r1, #528	; 0x210
 8021e76:	480e      	ldr	r0, [pc, #56]	; (8021eb0 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021e78:	f019 ff66 	bl	803bd48 <__assert_func>
		Request request = Requests.Front();
 8021e7c:	683b      	ldr	r3, [r7, #0]
 8021e7e:	4618      	mov	r0, r3
 8021e80:	f001 fd30 	bl	80238e4 <_ZN10FixedQueueI7RequestLj10EE5FrontEv>
 8021e84:	4602      	mov	r2, r0
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	4618      	mov	r0, r3
 8021e8a:	4611      	mov	r1, r2
 8021e8c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021e90:	461a      	mov	r2, r3
 8021e92:	f019 ffc3 	bl	803be1c <memcpy>
		Requests.Pop();
 8021e96:	683b      	ldr	r3, [r7, #0]
 8021e98:	4618      	mov	r0, r3
 8021e9a:	f001 fd45 	bl	8023928 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021e9e:	bf00      	nop
	}
 8021ea0:	6878      	ldr	r0, [r7, #4]
 8021ea2:	3708      	adds	r7, #8
 8021ea4:	46bd      	mov	sp, r7
 8021ea6:	bd80      	pop	{r7, pc}
 8021ea8:	0803d444 	.word	0x0803d444
 8021eac:	0803d454 	.word	0x0803d454
 8021eb0:	0803cf9c 	.word	0x0803cf9c

08021eb4 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021eb4:	b480      	push	{r7}
 8021eb6:	b083      	sub	sp, #12
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	2201      	movs	r2, #1
 8021ec0:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021ec4:	bf00      	nop
 8021ec6:	370c      	adds	r7, #12
 8021ec8:	46bd      	mov	sp, r7
 8021eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ece:	4770      	bx	lr

08021ed0 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021ed0:	b590      	push	{r4, r7, lr}
 8021ed2:	b085      	sub	sp, #20
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021ede:	2b07      	cmp	r3, #7
 8021ee0:	f200 80cc 	bhi.w	802207c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1ac>
 8021ee4:	a201      	add	r2, pc, #4	; (adr r2, 8021eec <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021eea:	bf00      	nop
 8021eec:	08021f0d 	.word	0x08021f0d
 8021ef0:	08021f3d 	.word	0x08021f3d
 8021ef4:	08021f6d 	.word	0x08021f6d
 8021ef8:	08021f97 	.word	0x08021f97
 8021efc:	08021fc3 	.word	0x08021fc3
 8021f00:	08021fef 	.word	0x08021fef
 8021f04:	08022029 	.word	0x08022029
 8021f08:	08022047 	.word	0x08022047
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f12:	2bff      	cmp	r3, #255	; 0xff
 8021f14:	d10e      	bne.n	8021f34 <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	2201      	movs	r2, #1
 8021f1a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f2a:	2201      	movs	r2, #1
 8021f2c:	4619      	mov	r1, r3
 8021f2e:	f013 f987 	bl	8035240 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f32:	e0a7      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021f34:	6878      	ldr	r0, [r7, #4]
 8021f36:	f7ff fed9 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f3a:	e0a3      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f42:	2baa      	cmp	r3, #170	; 0xaa
 8021f44:	d10e      	bne.n	8021f64 <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	2202      	movs	r2, #2
 8021f4a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f4e:	687b      	ldr	r3, [r7, #4]
 8021f50:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f5a:	2201      	movs	r2, #1
 8021f5c:	4619      	mov	r1, r3
 8021f5e:	f013 f96f 	bl	8035240 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f62:	e08f      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021f64:	6878      	ldr	r0, [r7, #4]
 8021f66:	f7ff fec1 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f6a:	e08b      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	2203      	movs	r2, #3
 8021f7c:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f8c:	2201      	movs	r2, #1
 8021f8e:	4619      	mov	r1, r3
 8021f90:	f013 f956 	bl	8035240 <HAL_UART_Receive_IT>
			break;
 8021f94:	e076      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f9c:	461a      	mov	r2, r3
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	2204      	movs	r2, #4
 8021fa8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fb8:	2201      	movs	r2, #1
 8021fba:	4619      	mov	r1, r3
 8021fbc:	f013 f940 	bl	8035240 <HAL_UART_Receive_IT>
			break;
 8021fc0:	e060      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021fc8:	461a      	mov	r2, r3
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	2205      	movs	r2, #5
 8021fd4:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fe4:	2201      	movs	r2, #1
 8021fe6:	4619      	mov	r1, r3
 8021fe8:	f013 f92a 	bl	8035240 <HAL_UART_Receive_IT>
			break;
 8021fec:	e04a      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	2206      	movs	r2, #6
 8021ffe:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 802200e:	4618      	mov	r0, r3
 8022010:	f001 fb38 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8022014:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 802201c:	b29b      	uxth	r3, r3
 802201e:	461a      	mov	r2, r3
 8022020:	4620      	mov	r0, r4
 8022022:	f013 f90d 	bl	8035240 <HAL_UART_Receive_IT>
			break;
 8022026:	e02d      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	2207      	movs	r2, #7
 802202c:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 802203c:	2201      	movs	r2, #1
 802203e:	4619      	mov	r1, r3
 8022040:	f013 f8fe 	bl	8035240 <HAL_UART_Receive_IT>
			break;
 8022044:	e01e      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 802204c:	2baf      	cmp	r3, #175	; 0xaf
 802204e:	d111      	bne.n	8022074 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a4>
				size_t sz = Requests.GetSize();
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	4618      	mov	r0, r3
 8022054:	f001 fc96 	bl	8023984 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>
 8022058:	60f8      	str	r0, [r7, #12]
				Requests.Push(CurrentRequest);
 802205a:	687a      	ldr	r2, [r7, #4]
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8022062:	4619      	mov	r1, r3
 8022064:	4610      	mov	r0, r2
 8022066:	f001 fc99 	bl	802399c <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 802206a:	4b08      	ldr	r3, [pc, #32]	; (802208c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	3301      	adds	r3, #1
 8022070:	4a06      	ldr	r2, [pc, #24]	; (802208c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8022072:	6013      	str	r3, [r2, #0]
				//CurrentRequest = { };
			}
			ResetReadState();
 8022074:	6878      	ldr	r0, [r7, #4]
 8022076:	f7ff fe39 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
			break;
 802207a:	e003      	b.n	8022084 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		default:
			ResetReadState();
 802207c:	6878      	ldr	r0, [r7, #4]
 802207e:	f7ff fe35 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8022082:	bf00      	nop
 8022084:	bf00      	nop
 8022086:	3714      	adds	r7, #20
 8022088:	46bd      	mov	sp, r7
 802208a:	bd90      	pop	{r4, r7, pc}
 802208c:	240001cc 	.word	0x240001cc

08022090 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8022090:	b580      	push	{r7, lr}
 8022092:	b082      	sub	sp, #8
 8022094:	af00      	add	r7, sp, #0
 8022096:	6078      	str	r0, [r7, #4]
 8022098:	6039      	str	r1, [r7, #0]
			assert(ptr);
 802209a:	683b      	ldr	r3, [r7, #0]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d106      	bne.n	80220ae <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 80220a0:	4b19      	ldr	r3, [pc, #100]	; (8022108 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 80220a2:	4a1a      	ldr	r2, [pc, #104]	; (802210c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 80220a4:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80220a8:	4819      	ldr	r0, [pc, #100]	; (8022110 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 80220aa:	f019 fe4d 	bl	803bd48 <__assert_func>
			assert(*ptr);
 80220ae:	683b      	ldr	r3, [r7, #0]
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d106      	bne.n	80220c4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 80220b6:	4b17      	ldr	r3, [pc, #92]	; (8022114 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 80220b8:	4a14      	ldr	r2, [pc, #80]	; (802210c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 80220ba:	f240 216d 	movw	r1, #621	; 0x26d
 80220be:	4814      	ldr	r0, [pc, #80]	; (8022110 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 80220c0:	f019 fe42 	bl	803bd48 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 80220c4:	683b      	ldr	r3, [r7, #0]
 80220c6:	681b      	ldr	r3, [r3, #0]
 80220c8:	687a      	ldr	r2, [r7, #4]
 80220ca:	8812      	ldrh	r2, [r2, #0]
 80220cc:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220ce:	683b      	ldr	r3, [r7, #0]
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	1c9a      	adds	r2, r3, #2
 80220d4:	683b      	ldr	r3, [r7, #0]
 80220d6:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 80220d8:	683b      	ldr	r3, [r7, #0]
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	687a      	ldr	r2, [r7, #4]
 80220de:	8852      	ldrh	r2, [r2, #2]
 80220e0:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220e2:	683b      	ldr	r3, [r7, #0]
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	1c9a      	adds	r2, r3, #2
 80220e8:	683b      	ldr	r3, [r7, #0]
 80220ea:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 80220ec:	683b      	ldr	r3, [r7, #0]
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	687a      	ldr	r2, [r7, #4]
 80220f2:	8892      	ldrh	r2, [r2, #4]
 80220f4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220f6:	683b      	ldr	r3, [r7, #0]
 80220f8:	681b      	ldr	r3, [r3, #0]
 80220fa:	1c9a      	adds	r2, r3, #2
 80220fc:	683b      	ldr	r3, [r7, #0]
 80220fe:	601a      	str	r2, [r3, #0]
		}
 8022100:	bf00      	nop
 8022102:	3708      	adds	r7, #8
 8022104:	46bd      	mov	sp, r7
 8022106:	bd80      	pop	{r7, pc}
 8022108:	0803cf68 	.word	0x0803cf68
 802210c:	0803d478 	.word	0x0803d478
 8022110:	0803cf9c 	.word	0x0803cf9c
 8022114:	0803cfb8 	.word	0x0803cfb8

08022118 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8022118:	b580      	push	{r7, lr}
 802211a:	b084      	sub	sp, #16
 802211c:	af00      	add	r7, sp, #0
 802211e:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8022120:	6878      	ldr	r0, [r7, #4]
 8022122:	2300      	movs	r3, #0
 8022124:	60bb      	str	r3, [r7, #8]
 8022126:	2300      	movs	r3, #0
 8022128:	60fb      	str	r3, [r7, #12]
 802212a:	f107 0308 	add.w	r3, r7, #8
 802212e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8022132:	f001 fc75 	bl	8023a20 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	2200      	movs	r2, #0
 802213a:	629a      	str	r2, [r3, #40]	; 0x28
	}
 802213c:	bf00      	nop
 802213e:	3710      	adds	r7, #16
 8022140:	46bd      	mov	sp, r7
 8022142:	bd80      	pop	{r7, pc}

08022144 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8022144:	b580      	push	{r7, lr}
 8022146:	b082      	sub	sp, #8
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
 802214c:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	6839      	ldr	r1, [r7, #0]
 8022152:	4618      	mov	r0, r3
 8022154:	f001 fc7f 	bl	8023a56 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	4618      	mov	r0, r3
 802215c:	f001 fc9d 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022160:	4602      	mov	r2, r0
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022166:	429a      	cmp	r2, r3
 8022168:	bf8c      	ite	hi
 802216a:	2301      	movhi	r3, #1
 802216c:	2300      	movls	r3, #0
 802216e:	b2db      	uxtb	r3, r3
 8022170:	2b00      	cmp	r3, #0
 8022172:	d002      	beq.n	802217a <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8022174:	6878      	ldr	r0, [r7, #4]
 8022176:	f000 f804 	bl	8022182 <_ZN17IMUFrameContainer6RemoveEv>
	}
 802217a:	bf00      	nop
 802217c:	3708      	adds	r7, #8
 802217e:	46bd      	mov	sp, r7
 8022180:	bd80      	pop	{r7, pc}

08022182 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8022182:	b580      	push	{r7, lr}
 8022184:	b082      	sub	sp, #8
 8022186:	af00      	add	r7, sp, #0
 8022188:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	4618      	mov	r0, r3
 802218e:	f001 fc96 	bl	8023abe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022196:	1c5a      	adds	r2, r3, #1
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	629a      	str	r2, [r3, #40]	; 0x28
	}
 802219c:	bf00      	nop
 802219e:	3708      	adds	r7, #8
 80221a0:	46bd      	mov	sp, r7
 80221a2:	bd80      	pop	{r7, pc}

080221a4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 80221a4:	b5b0      	push	{r4, r5, r7, lr}
 80221a6:	b08a      	sub	sp, #40	; 0x28
 80221a8:	af00      	add	r7, sp, #0
 80221aa:	60f8      	str	r0, [r7, #12]
 80221ac:	60b9      	str	r1, [r7, #8]
 80221ae:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 80221b0:	68fb      	ldr	r3, [r7, #12]
 80221b2:	4618      	mov	r0, r3
 80221b4:	f001 fca6 	bl	8023b04 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 80221b8:	4603      	mov	r3, r0
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d001      	beq.n	80221c2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 80221be:	2300      	movs	r3, #0
 80221c0:	e038      	b.n	8022234 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221c6:	68ba      	ldr	r2, [r7, #8]
 80221c8:	429a      	cmp	r2, r3
 80221ca:	d30b      	bcc.n	80221e4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 80221cc:	68fb      	ldr	r3, [r7, #12]
 80221ce:	4618      	mov	r0, r3
 80221d0:	f001 fc63 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80221d4:	4602      	mov	r2, r0
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221da:	4413      	add	r3, r2
 80221dc:	3b01      	subs	r3, #1
 80221de:	68ba      	ldr	r2, [r7, #8]
 80221e0:	429a      	cmp	r2, r3
 80221e2:	d901      	bls.n	80221e8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 80221e4:	2301      	movs	r3, #1
 80221e6:	e000      	b.n	80221ea <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 80221e8:	2300      	movs	r3, #0
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d001      	beq.n	80221f2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 80221ee:	2300      	movs	r3, #0
 80221f0:	e020      	b.n	8022234 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 80221f2:	68fc      	ldr	r4, [r7, #12]
 80221f4:	68fb      	ldr	r3, [r7, #12]
 80221f6:	4618      	mov	r0, r3
 80221f8:	f001 fc4f 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80221fc:	4601      	mov	r1, r0
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022202:	68bb      	ldr	r3, [r7, #8]
 8022204:	1ad3      	subs	r3, r2, r3
 8022206:	440b      	add	r3, r1
 8022208:	3b01      	subs	r3, #1
 802220a:	4619      	mov	r1, r3
 802220c:	4620      	mov	r0, r4
 802220e:	f001 fc8b 	bl	8023b28 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022212:	4603      	mov	r3, r0
 8022214:	f107 0414 	add.w	r4, r7, #20
 8022218:	461d      	mov	r5, r3
 802221a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802221c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802221e:	682b      	ldr	r3, [r5, #0]
 8022220:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	461d      	mov	r5, r3
 8022226:	f107 0414 	add.w	r4, r7, #20
 802222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802222e:	6823      	ldr	r3, [r4, #0]
 8022230:	602b      	str	r3, [r5, #0]
		return true;
 8022232:	2301      	movs	r3, #1
	}
 8022234:	4618      	mov	r0, r3
 8022236:	3728      	adds	r7, #40	; 0x28
 8022238:	46bd      	mov	sp, r7
 802223a:	bdb0      	pop	{r4, r5, r7, pc}

0802223c <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 802223c:	b580      	push	{r7, lr}
 802223e:	b082      	sub	sp, #8
 8022240:	af00      	add	r7, sp, #0
 8022242:	6078      	str	r0, [r7, #4]
 8022244:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8022246:	683b      	ldr	r3, [r7, #0]
 8022248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802224a:	b29a      	uxth	r2, r3
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	801a      	strh	r2, [r3, #0]
 8022250:	683b      	ldr	r3, [r7, #0]
 8022252:	4618      	mov	r0, r3
 8022254:	f001 fc21 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022258:	4603      	mov	r3, r0
 802225a:	b29a      	uxth	r2, r3
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	805a      	strh	r2, [r3, #2]
 8022260:	683b      	ldr	r3, [r7, #0]
 8022262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022264:	b29a      	uxth	r2, r3
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	809a      	strh	r2, [r3, #4]
	}
 802226a:	6878      	ldr	r0, [r7, #4]
 802226c:	3708      	adds	r7, #8
 802226e:	46bd      	mov	sp, r7
 8022270:	bd80      	pop	{r7, pc}

08022272 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 8022272:	b580      	push	{r7, lr}
 8022274:	b086      	sub	sp, #24
 8022276:	af00      	add	r7, sp, #0
 8022278:	6078      	str	r0, [r7, #4]
 802227a:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 802227c:	f008 fcea 	bl	802ac54 <HAL_GetTick>
 8022280:	6178      	str	r0, [r7, #20]

		switch (State) {
 8022282:	687b      	ldr	r3, [r7, #4]
 8022284:	689b      	ldr	r3, [r3, #8]
 8022286:	2b00      	cmp	r3, #0
 8022288:	d04e      	beq.n	8022328 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 802228a:	2b01      	cmp	r3, #1
 802228c:	d154      	bne.n	8022338 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	2200      	movs	r2, #0
 8022292:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	685b      	ldr	r3, [r3, #4]
 8022298:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	697a      	ldr	r2, [r7, #20]
 802229e:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	681b      	ldr	r3, [r3, #0]
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d046      	beq.n	8022336 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	685b      	ldr	r3, [r3, #4]
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d042      	beq.n	8022336 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80222b0:	697a      	ldr	r2, [r7, #20]
 80222b2:	693b      	ldr	r3, [r7, #16]
 80222b4:	1ad3      	subs	r3, r2, r3
 80222b6:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	ee07 3a90 	vmov	s15, r3
 80222c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80222c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	ed93 7a05 	vldr	s14, [r3, #20]
 80222d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80222dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	691b      	ldr	r3, [r3, #16]
 80222ea:	68fa      	ldr	r2, [r7, #12]
 80222ec:	1ad3      	subs	r3, r2, r3
 80222ee:	4618      	mov	r0, r3
 80222f0:	f7fe fdd0 	bl	8020e94 <_ZSt3absl>
 80222f4:	4602      	mov	r2, r0
					< long(DurationThreshold))
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	68db      	ldr	r3, [r3, #12]
 80222fa:	429a      	cmp	r2, r3
 80222fc:	bfb4      	ite	lt
 80222fe:	2301      	movlt	r3, #1
 8022300:	2300      	movge	r3, #0
 8022302:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 8022304:	2b00      	cmp	r3, #0
 8022306:	d008      	beq.n	802231a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	f103 0218 	add.w	r2, r3, #24
 802230e:	687b      	ldr	r3, [r7, #4]
 8022310:	3340      	adds	r3, #64	; 0x40
 8022312:	4619      	mov	r1, r3
 8022314:	4610      	mov	r0, r2
 8022316:	f001 fc18 	bl	8023b4a <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 802231a:	6838      	ldr	r0, [r7, #0]
 802231c:	f7fe fc7a 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8022320:	4602      	mov	r2, r0
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8022326:	e007      	b.n	8022338 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	2201      	movs	r2, #1
 802232c:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	697a      	ldr	r2, [r7, #20]
 8022332:	601a      	str	r2, [r3, #0]
			break;
 8022334:	e000      	b.n	8022338 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8022336:	bf00      	nop
		}
	}
 8022338:	3718      	adds	r7, #24
 802233a:	46bd      	mov	sp, r7
 802233c:	bd80      	pop	{r7, pc}

0802233e <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 802233e:	b480      	push	{r7}
 8022340:	b083      	sub	sp, #12
 8022342:	af00      	add	r7, sp, #0
 8022344:	6078      	str	r0, [r7, #4]
 8022346:	460b      	mov	r3, r1
 8022348:	70fb      	strb	r3, [r7, #3]
 802234a:	4613      	mov	r3, r2
 802234c:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 802234e:	78fa      	ldrb	r2, [r7, #3]
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 8022354:	78ba      	ldrb	r2, [r7, #2]
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	60da      	str	r2, [r3, #12]
	}
 802235a:	bf00      	nop
 802235c:	370c      	adds	r7, #12
 802235e:	46bd      	mov	sp, r7
 8022360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022364:	4770      	bx	lr

08022366 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 8022366:	b480      	push	{r7}
 8022368:	b083      	sub	sp, #12
 802236a:	af00      	add	r7, sp, #0
 802236c:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	695b      	ldr	r3, [r3, #20]
 8022372:	ee07 3a90 	vmov	s15, r3
	}
 8022376:	eeb0 0a67 	vmov.f32	s0, s15
 802237a:	370c      	adds	r7, #12
 802237c:	46bd      	mov	sp, r7
 802237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022382:	4770      	bx	lr

08022384 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 8022384:	b480      	push	{r7}
 8022386:	b083      	sub	sp, #12
 8022388:	af00      	add	r7, sp, #0
 802238a:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022392:	615a      	str	r2, [r3, #20]
	}
 8022394:	bf00      	nop
 8022396:	370c      	adds	r7, #12
 8022398:	46bd      	mov	sp, r7
 802239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239e:	4770      	bx	lr

080223a0 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 80223a0:	b580      	push	{r7, lr}
 80223a2:	b082      	sub	sp, #8
 80223a4:	af00      	add	r7, sp, #0
 80223a6:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80223a8:	6878      	ldr	r0, [r7, #4]
 80223aa:	f000 f81b 	bl	80223e4 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80223ae:	4603      	mov	r3, r0
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d106      	bne.n	80223c2 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 80223b4:	4b08      	ldr	r3, [pc, #32]	; (80223d8 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 80223b6:	4a09      	ldr	r2, [pc, #36]	; (80223dc <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 80223b8:	f240 21e5 	movw	r1, #741	; 0x2e5
 80223bc:	4808      	ldr	r0, [pc, #32]	; (80223e0 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 80223be:	f019 fcc3 	bl	803bd48 <__assert_func>
		return StrobeQueue.front();
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	3318      	adds	r3, #24
 80223c6:	4618      	mov	r0, r3
 80223c8:	f001 fbcd 	bl	8023b66 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80223cc:	4603      	mov	r3, r0
 80223ce:	681b      	ldr	r3, [r3, #0]
	}
 80223d0:	4618      	mov	r0, r3
 80223d2:	3708      	adds	r7, #8
 80223d4:	46bd      	mov	sp, r7
 80223d6:	bd80      	pop	{r7, pc}
 80223d8:	0803d4b0 	.word	0x0803d4b0
 80223dc:	0803d4bc 	.word	0x0803d4bc
 80223e0:	0803cf9c 	.word	0x0803cf9c

080223e4 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 80223e4:	b580      	push	{r7, lr}
 80223e6:	b082      	sub	sp, #8
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	3318      	adds	r3, #24
 80223f0:	4618      	mov	r0, r3
 80223f2:	f001 fbc5 	bl	8023b80 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 80223f6:	4603      	mov	r3, r0
 80223f8:	f083 0301 	eor.w	r3, r3, #1
 80223fc:	b2db      	uxtb	r3, r3
	}
 80223fe:	4618      	mov	r0, r3
 8022400:	3708      	adds	r7, #8
 8022402:	46bd      	mov	sp, r7
 8022404:	bd80      	pop	{r7, pc}

08022406 <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 8022406:	b580      	push	{r7, lr}
 8022408:	b082      	sub	sp, #8
 802240a:	af00      	add	r7, sp, #0
 802240c:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	3318      	adds	r3, #24
 8022412:	4618      	mov	r0, r3
 8022414:	f001 fbc1 	bl	8023b9a <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 8022418:	bf00      	nop
 802241a:	3708      	adds	r7, #8
 802241c:	46bd      	mov	sp, r7
 802241e:	bd80      	pop	{r7, pc}

08022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 8022420:	b480      	push	{r7}
 8022422:	b083      	sub	sp, #12
 8022424:	af00      	add	r7, sp, #0
 8022426:	4603      	mov	r3, r0
 8022428:	71fb      	strb	r3, [r7, #7]
			return mode;
 802242a:	79fb      	ldrb	r3, [r7, #7]
		}
 802242c:	4618      	mov	r0, r3
 802242e:	370c      	adds	r7, #12
 8022430:	46bd      	mov	sp, r7
 8022432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022436:	4770      	bx	lr

08022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8022438:	b480      	push	{r7}
 802243a:	b083      	sub	sp, #12
 802243c:	af00      	add	r7, sp, #0
 802243e:	4603      	mov	r3, r0
 8022440:	71fb      	strb	r3, [r7, #7]
			return meta;
 8022442:	79fb      	ldrb	r3, [r7, #7]
		}
 8022444:	4618      	mov	r0, r3
 8022446:	370c      	adds	r7, #12
 8022448:	46bd      	mov	sp, r7
 802244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244e:	4770      	bx	lr

08022450 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8022450:	b580      	push	{r7, lr}
 8022452:	b08c      	sub	sp, #48	; 0x30
 8022454:	af00      	add	r7, sp, #0
 8022456:	60f8      	str	r0, [r7, #12]
 8022458:	60b9      	str	r1, [r7, #8]
 802245a:	607a      	str	r2, [r7, #4]
 802245c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022464:	4618      	mov	r0, r3
 8022466:	f7ff ffe7 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802246a:	4603      	mov	r3, r0
 802246c:	2b00      	cmp	r3, #0
 802246e:	d006      	beq.n	802247e <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2e>
 8022470:	4b28      	ldr	r3, [pc, #160]	; (8022514 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc4>)
 8022472:	4a29      	ldr	r2, [pc, #164]	; (8022518 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>)
 8022474:	f240 3112 	movw	r1, #786	; 0x312
 8022478:	4828      	ldr	r0, [pc, #160]	; (802251c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xcc>)
 802247a:	f019 fc65 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802247e:	68fb      	ldr	r3, [r7, #12]
 8022480:	2201      	movs	r2, #1
 8022482:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8022486:	2000      	movs	r0, #0
 8022488:	f7ff ffca 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802248c:	4603      	mov	r3, r0
 802248e:	461a      	mov	r2, r3
 8022490:	68fb      	ldr	r3, [r7, #12]
 8022492:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 8022496:	68fb      	ldr	r3, [r7, #12]
 8022498:	2211      	movs	r2, #17
 802249a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80224a4:	2b02      	cmp	r3, #2
 80224a6:	d004      	beq.n	80224b2 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80224a8:	68fb      	ldr	r3, [r7, #12]
 80224aa:	2203      	movs	r2, #3
 80224ac:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224b0:	e02c      	b.n	802250c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	4618      	mov	r0, r3
 80224b6:	f001 fa08 	bl	80238ca <_ZNKSt5arrayIhLj256EE4dataEv>
 80224ba:	4603      	mov	r3, r0
 80224bc:	881b      	ldrh	r3, [r3, #0]
 80224be:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 80224c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80224c2:	f107 0218 	add.w	r2, r7, #24
 80224c6:	4619      	mov	r1, r3
 80224c8:	6838      	ldr	r0, [r7, #0]
 80224ca:	f7ff fe6b 	bl	80221a4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 80224ce:	4603      	mov	r3, r0
 80224d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 80224d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80224d8:	f083 0301 	eor.w	r3, r3, #1
 80224dc:	b2db      	uxtb	r3, r3
 80224de:	2b00      	cmp	r3, #0
 80224e0:	d004      	beq.n	80224ec <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x9c>
			responce.Error = ErrorCodes::FrameUnavailable;
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	2201      	movs	r2, #1
 80224e6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224ea:	e00f      	b.n	802250c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80224ec:	68f8      	ldr	r0, [r7, #12]
 80224ee:	f001 f8c9 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 80224f2:	4601      	mov	r1, r0
 80224f4:	f107 0217 	add.w	r2, r7, #23
 80224f8:	f107 0318 	add.w	r3, r7, #24
 80224fc:	4618      	mov	r0, r3
 80224fe:	f7fe fb2b 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8022502:	68fb      	ldr	r3, [r7, #12]
 8022504:	2200      	movs	r2, #0
 8022506:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 802250a:	bf00      	nop
	}
 802250c:	68f8      	ldr	r0, [r7, #12]
 802250e:	3730      	adds	r7, #48	; 0x30
 8022510:	46bd      	mov	sp, r7
 8022512:	bd80      	pop	{r7, pc}
 8022514:	0803d4ec 	.word	0x0803d4ec
 8022518:	0803d534 	.word	0x0803d534
 802251c:	0803cf9c 	.word	0x0803cf9c

08022520 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8022520:	b580      	push	{r7, lr}
 8022522:	b088      	sub	sp, #32
 8022524:	af00      	add	r7, sp, #0
 8022526:	60f8      	str	r0, [r7, #12]
 8022528:	60b9      	str	r1, [r7, #8]
 802252a:	607a      	str	r2, [r7, #4]
 802252c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022534:	4618      	mov	r0, r3
 8022536:	f7ff ff7f 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802253a:	4603      	mov	r3, r0
 802253c:	2b01      	cmp	r3, #1
 802253e:	d006      	beq.n	802254e <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2e>
 8022540:	4b1e      	ldr	r3, [pc, #120]	; (80225bc <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x9c>)
 8022542:	4a1f      	ldr	r2, [pc, #124]	; (80225c0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>)
 8022544:	f44f 714d 	mov.w	r1, #820	; 0x334
 8022548:	481e      	ldr	r0, [pc, #120]	; (80225c4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa4>)
 802254a:	f019 fbfd 	bl	803bd48 <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	2201      	movs	r2, #1
 8022552:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8022556:	2001      	movs	r0, #1
 8022558:	f7ff ff62 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802255c:	4603      	mov	r3, r0
 802255e:	461a      	mov	r2, r3
 8022560:	68fb      	ldr	r3, [r7, #12]
 8022562:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = IMUFrameContainer::Info::Size;
 8022566:	68fb      	ldr	r3, [r7, #12]
 8022568:	2206      	movs	r2, #6
 802256a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 802256e:	687b      	ldr	r3, [r7, #4]
 8022570:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022574:	2b01      	cmp	r3, #1
 8022576:	d004      	beq.n	8022582 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022578:	68fb      	ldr	r3, [r7, #12]
 802257a:	2203      	movs	r2, #3
 802257c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022580:	e017      	b.n	80225b2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x92>
		}

		uint8_t *ptr = responce.Data.data();
 8022582:	68f8      	ldr	r0, [r7, #12]
 8022584:	f001 f87e 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8022588:	4603      	mov	r3, r0
 802258a:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 802258c:	f107 0314 	add.w	r3, r7, #20
 8022590:	6839      	ldr	r1, [r7, #0]
 8022592:	4618      	mov	r0, r3
 8022594:	f7ff fe52 	bl	802223c <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8022598:	f107 021c 	add.w	r2, r7, #28
 802259c:	f107 0314 	add.w	r3, r7, #20
 80225a0:	4611      	mov	r1, r2
 80225a2:	4618      	mov	r0, r3
 80225a4:	f7ff fd74 	bl	8022090 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	2200      	movs	r2, #0
 80225ac:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80225b0:	bf00      	nop
	}
 80225b2:	68f8      	ldr	r0, [r7, #12]
 80225b4:	3720      	adds	r7, #32
 80225b6:	46bd      	mov	sp, r7
 80225b8:	bd80      	pop	{r7, pc}
 80225ba:	bf00      	nop
 80225bc:	0803d588 	.word	0x0803d588
 80225c0:	0803d5c8 	.word	0x0803d5c8
 80225c4:	0803cf9c 	.word	0x0803cf9c

080225c8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 80225c8:	b580      	push	{r7, lr}
 80225ca:	b08a      	sub	sp, #40	; 0x28
 80225cc:	af00      	add	r7, sp, #0
 80225ce:	60f8      	str	r0, [r7, #12]
 80225d0:	60b9      	str	r1, [r7, #8]
 80225d2:	607a      	str	r2, [r7, #4]
 80225d4:	603b      	str	r3, [r7, #0]
		assert(
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80225dc:	4618      	mov	r0, r3
 80225de:	f7ff ff2b 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225e2:	4603      	mov	r3, r0
 80225e4:	2b02      	cmp	r3, #2
 80225e6:	d006      	beq.n	80225f6 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2e>
 80225e8:	4b1d      	ldr	r3, [pc, #116]	; (8022660 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x98>)
 80225ea:	4a1e      	ldr	r2, [pc, #120]	; (8022664 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>)
 80225ec:	f240 314b 	movw	r1, #843	; 0x34b
 80225f0:	481d      	ldr	r0, [pc, #116]	; (8022668 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa0>)
 80225f2:	f019 fba9 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	2201      	movs	r2, #1
 80225fa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 80225fe:	2002      	movs	r0, #2
 8022600:	f7ff ff0e 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022604:	4603      	mov	r3, r0
 8022606:	461a      	mov	r2, r3
 8022608:	68fb      	ldr	r3, [r7, #12]
 802260a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 802260e:	68fb      	ldr	r3, [r7, #12]
 8022610:	2211      	movs	r2, #17
 8022612:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802261c:	2b01      	cmp	r3, #1
 802261e:	d004      	beq.n	802262a <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	2203      	movs	r2, #3
 8022624:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022628:	e015      	b.n	8022656 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x8e>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 802262a:	f107 0314 	add.w	r3, r7, #20
 802262e:	6839      	ldr	r1, [r7, #0]
 8022630:	4618      	mov	r0, r3
 8022632:	f7fe f9e7 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022636:	68f8      	ldr	r0, [r7, #12]
 8022638:	f001 f824 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 802263c:	4601      	mov	r1, r0
 802263e:	f107 0213 	add.w	r2, r7, #19
 8022642:	f107 0314 	add.w	r3, r7, #20
 8022646:	4618      	mov	r0, r3
 8022648:	f7fe fa86 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 802264c:	68fb      	ldr	r3, [r7, #12]
 802264e:	2200      	movs	r2, #0
 8022650:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022654:	bf00      	nop
	}
 8022656:	68f8      	ldr	r0, [r7, #12]
 8022658:	3728      	adds	r7, #40	; 0x28
 802265a:	46bd      	mov	sp, r7
 802265c:	bd80      	pop	{r7, pc}
 802265e:	bf00      	nop
 8022660:	0803d618 	.word	0x0803d618
 8022664:	0803d660 	.word	0x0803d660
 8022668:	0803cf9c 	.word	0x0803cf9c

0802266c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 802266c:	b580      	push	{r7, lr}
 802266e:	b084      	sub	sp, #16
 8022670:	af00      	add	r7, sp, #0
 8022672:	60f8      	str	r0, [r7, #12]
 8022674:	60b9      	str	r1, [r7, #8]
 8022676:	607a      	str	r2, [r7, #4]
 8022678:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022680:	4618      	mov	r0, r3
 8022682:	f7ff fed9 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022686:	4603      	mov	r3, r0
 8022688:	2b03      	cmp	r3, #3
 802268a:	d006      	beq.n	802269a <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2e>
 802268c:	4b17      	ldr	r3, [pc, #92]	; (80226ec <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x80>)
 802268e:	4a18      	ldr	r2, [pc, #96]	; (80226f0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>)
 8022690:	f240 3165 	movw	r1, #869	; 0x365
 8022694:	4817      	ldr	r0, [pc, #92]	; (80226f4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x88>)
 8022696:	f019 fb57 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802269a:	68fb      	ldr	r3, [r7, #12]
 802269c:	2201      	movs	r2, #1
 802269e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 80226a2:	2003      	movs	r0, #3
 80226a4:	f7ff febc 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80226a8:	4603      	mov	r3, r0
 80226aa:	461a      	mov	r2, r3
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80226b2:	68fb      	ldr	r3, [r7, #12]
 80226b4:	2201      	movs	r2, #1
 80226b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80226c0:	2b01      	cmp	r3, #1
 80226c2:	d004      	beq.n	80226ce <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80226c4:	68fb      	ldr	r3, [r7, #12]
 80226c6:	2203      	movs	r2, #3
 80226c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80226cc:	e00a      	b.n	80226e4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x78>
		}

		container.Reset();
 80226ce:	6838      	ldr	r0, [r7, #0]
 80226d0:	f7ff fd22 	bl	8022118 <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 80226d4:	69b8      	ldr	r0, [r7, #24]
 80226d6:	f7ff fe55 	bl	8022384 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 80226da:	68fb      	ldr	r3, [r7, #12]
 80226dc:	2200      	movs	r2, #0
 80226de:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80226e2:	bf00      	nop
	}
 80226e4:	68f8      	ldr	r0, [r7, #12]
 80226e6:	3710      	adds	r7, #16
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}
 80226ec:	0803d6b0 	.word	0x0803d6b0
 80226f0:	0803d6f4 	.word	0x0803d6f4
 80226f4:	0803cf9c 	.word	0x0803cf9c

080226f8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 80226f8:	b580      	push	{r7, lr}
 80226fa:	b086      	sub	sp, #24
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	60f8      	str	r0, [r7, #12]
 8022700:	60b9      	str	r1, [r7, #8]
 8022702:	607a      	str	r2, [r7, #4]
 8022704:	603b      	str	r3, [r7, #0]
		assert(
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802270c:	4618      	mov	r0, r3
 802270e:	f7ff fe93 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022712:	4603      	mov	r3, r0
 8022714:	2b04      	cmp	r3, #4
 8022716:	d006      	beq.n	8022726 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2e>
 8022718:	4b1a      	ldr	r3, [pc, #104]	; (8022784 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8c>)
 802271a:	4a1b      	ldr	r2, [pc, #108]	; (8022788 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x90>)
 802271c:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8022720:	481a      	ldr	r0, [pc, #104]	; (802278c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x94>)
 8022722:	f019 fb11 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022726:	68fb      	ldr	r3, [r7, #12]
 8022728:	2201      	movs	r2, #1
 802272a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 802272e:	2004      	movs	r0, #4
 8022730:	f7ff fe76 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022734:	4603      	mov	r3, r0
 8022736:	461a      	mov	r2, r3
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802273e:	68fb      	ldr	r3, [r7, #12]
 8022740:	2201      	movs	r2, #1
 8022742:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802274c:	2b01      	cmp	r3, #1
 802274e:	d004      	beq.n	802275a <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	2203      	movs	r2, #3
 8022754:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022758:	e00f      	b.n	802277a <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x82>
		}

		uint8_t newOffset = request.Data[0];
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	2100      	movs	r1, #0
 802275e:	4618      	mov	r0, r3
 8022760:	f7ff f958 	bl	8021a14 <_ZNKSt5arrayIhLj256EEixEj>
 8022764:	4603      	mov	r3, r0
 8022766:	781b      	ldrb	r3, [r3, #0]
 8022768:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 802276a:	7dfa      	ldrb	r2, [r7, #23]
 802276c:	683b      	ldr	r3, [r7, #0]
 802276e:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	2200      	movs	r2, #0
 8022774:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022778:	bf00      	nop
	}
 802277a:	68f8      	ldr	r0, [r7, #12]
 802277c:	3718      	adds	r7, #24
 802277e:	46bd      	mov	sp, r7
 8022780:	bd80      	pop	{r7, pc}
 8022782:	bf00      	nop
 8022784:	0803d754 	.word	0x0803d754
 8022788:	0803d79c 	.word	0x0803d79c
 802278c:	0803cf9c 	.word	0x0803cf9c

08022790 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 8022790:	b580      	push	{r7, lr}
 8022792:	b086      	sub	sp, #24
 8022794:	af00      	add	r7, sp, #0
 8022796:	60f8      	str	r0, [r7, #12]
 8022798:	60b9      	str	r1, [r7, #8]
 802279a:	607a      	str	r2, [r7, #4]
 802279c:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80227a4:	4618      	mov	r0, r3
 80227a6:	f7ff fe47 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80227aa:	4603      	mov	r3, r0
 80227ac:	2b06      	cmp	r3, #6
 80227ae:	d006      	beq.n	80227be <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2e>
 80227b0:	4b1f      	ldr	r3, [pc, #124]	; (8022830 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa0>)
 80227b2:	4a20      	ldr	r2, [pc, #128]	; (8022834 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>)
 80227b4:	f44f 7165 	mov.w	r1, #916	; 0x394
 80227b8:	481f      	ldr	r0, [pc, #124]	; (8022838 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa8>)
 80227ba:	f019 fac5 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	2201      	movs	r2, #1
 80227c2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
 80227c6:	2006      	movs	r0, #6
 80227c8:	f7ff fe2a 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80227cc:	4603      	mov	r3, r0
 80227ce:	461a      	mov	r2, r3
 80227d0:	68fb      	ldr	r3, [r7, #12]
 80227d2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
				RequestMode::ConfigureFilter);
		responce.ResponceSize = 1;
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	2201      	movs	r2, #1
 80227da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80227e4:	2b02      	cmp	r3, #2
 80227e6:	d004      	beq.n	80227f2 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80227e8:	68fb      	ldr	r3, [r7, #12]
 80227ea:	2203      	movs	r2, #3
 80227ec:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80227f0:	e01a      	b.n	8022828 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x98>
		}

		uint8_t targetDuration = request.Data[0];
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	2100      	movs	r1, #0
 80227f6:	4618      	mov	r0, r3
 80227f8:	f7ff f90c 	bl	8021a14 <_ZNKSt5arrayIhLj256EEixEj>
 80227fc:	4603      	mov	r3, r0
 80227fe:	781b      	ldrb	r3, [r3, #0]
 8022800:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	2101      	movs	r1, #1
 8022806:	4618      	mov	r0, r3
 8022808:	f7ff f904 	bl	8021a14 <_ZNKSt5arrayIhLj256EEixEj>
 802280c:	4603      	mov	r3, r0
 802280e:	781b      	ldrb	r3, [r3, #0]
 8022810:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 8022812:	7dba      	ldrb	r2, [r7, #22]
 8022814:	7dfb      	ldrb	r3, [r7, #23]
 8022816:	4619      	mov	r1, r3
 8022818:	6838      	ldr	r0, [r7, #0]
 802281a:	f7ff fd90 	bl	802233e <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 802281e:	68fb      	ldr	r3, [r7, #12]
 8022820:	2200      	movs	r2, #0
 8022822:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022826:	bf00      	nop
	}
 8022828:	68f8      	ldr	r0, [r7, #12]
 802282a:	3718      	adds	r7, #24
 802282c:	46bd      	mov	sp, r7
 802282e:	bd80      	pop	{r7, pc}
 8022830:	0803d7dc 	.word	0x0803d7dc
 8022834:	0803d828 	.word	0x0803d828
 8022838:	0803cf9c 	.word	0x0803cf9c

0802283c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 802283c:	b580      	push	{r7, lr}
 802283e:	b088      	sub	sp, #32
 8022840:	af00      	add	r7, sp, #0
 8022842:	6178      	str	r0, [r7, #20]
 8022844:	6139      	str	r1, [r7, #16]
 8022846:	60fa      	str	r2, [r7, #12]
 8022848:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 802284a:	68fb      	ldr	r3, [r7, #12]
 802284c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022850:	4618      	mov	r0, r3
 8022852:	f7ff fdf1 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022856:	4603      	mov	r3, r0
 8022858:	2b05      	cmp	r3, #5
 802285a:	d006      	beq.n	802286a <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2e>
 802285c:	4b28      	ldr	r3, [pc, #160]	; (8022900 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc4>)
 802285e:	4a29      	ldr	r2, [pc, #164]	; (8022904 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc8>)
 8022860:	f240 31ae 	movw	r1, #942	; 0x3ae
 8022864:	4828      	ldr	r0, [pc, #160]	; (8022908 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xcc>)
 8022866:	f019 fa6f 	bl	803bd48 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802286a:	697b      	ldr	r3, [r7, #20]
 802286c:	2201      	movs	r2, #1
 802286e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 8022872:	2005      	movs	r0, #5
 8022874:	f7ff fdd4 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022878:	4603      	mov	r3, r0
 802287a:	461a      	mov	r2, r3
 802287c:	697b      	ldr	r3, [r7, #20]
 802287e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 8022882:	697b      	ldr	r3, [r7, #20]
 8022884:	2201      	movs	r2, #1
 8022886:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 802288a:	68fb      	ldr	r3, [r7, #12]
 802288c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022890:	2b01      	cmp	r3, #1
 8022892:	d004      	beq.n	802289e <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022894:	697b      	ldr	r3, [r7, #20]
 8022896:	2203      	movs	r2, #3
 8022898:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 802289c:	e02c      	b.n	80228f8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xbc>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 802289e:	68b8      	ldr	r0, [r7, #8]
 80228a0:	f7ff fd61 	bl	8022366 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80228a4:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80228a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80228ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80228b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228b4:	d502      	bpl.n	80228bc <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x80>
			strobeWidth = 0;
 80228b6:	f04f 0300 	mov.w	r3, #0
 80228ba:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 80228bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80228c0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 802290c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd0>
 80228c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228cc:	dd01      	ble.n	80228d2 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x96>
			strobeWidth = 255;
 80228ce:	4b10      	ldr	r3, [pc, #64]	; (8022910 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 80228d0:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 80228d2:	2100      	movs	r1, #0
 80228d4:	6978      	ldr	r0, [r7, #20]
 80228d6:	f000 ff15 	bl	8023704 <_ZNSt5arrayIhLj256EEixEj>
 80228da:	4603      	mov	r3, r0
 80228dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80228e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80228e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80228e8:	793a      	ldrb	r2, [r7, #4]
 80228ea:	b2d2      	uxtb	r2, r2
 80228ec:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80228ee:	697b      	ldr	r3, [r7, #20]
 80228f0:	2200      	movs	r2, #0
 80228f2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80228f6:	bf00      	nop
	}
 80228f8:	6978      	ldr	r0, [r7, #20]
 80228fa:	3720      	adds	r7, #32
 80228fc:	46bd      	mov	sp, r7
 80228fe:	bd80      	pop	{r7, pc}
 8022900:	0803d87c 	.word	0x0803d87c
 8022904:	0803d8c4 	.word	0x0803d8c4
 8022908:	0803cf9c 	.word	0x0803cf9c
 802290c:	437f0000 	.word	0x437f0000
 8022910:	437f0000 	.word	0x437f0000

08022914 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022914:	b580      	push	{r7, lr}
 8022916:	b084      	sub	sp, #16
 8022918:	af00      	add	r7, sp, #0
 802291a:	60f8      	str	r0, [r7, #12]
 802291c:	60b9      	str	r1, [r7, #8]
 802291e:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	2201      	movs	r2, #1
 8022924:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
		responce.MetaInfo = RequestMode::Serialize(
 802292e:	4618      	mov	r0, r3
 8022930:	f7ff fd82 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022934:	4603      	mov	r3, r0
 8022936:	4618      	mov	r0, r3
 8022938:	f7ff fd72 	bl	8022420 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802293c:	4603      	mov	r3, r0
 802293e:	461a      	mov	r2, r3
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = request.ResponceSize;
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 802294c:	68fb      	ldr	r3, [r7, #12]
 802294e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 8022952:	68fb      	ldr	r3, [r7, #12]
 8022954:	2202      	movs	r2, #2
 8022956:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		return responce;
 802295a:	bf00      	nop
	}
 802295c:	68f8      	ldr	r0, [r7, #12]
 802295e:	3710      	adds	r7, #16
 8022960:	46bd      	mov	sp, r7
 8022962:	bd80      	pop	{r7, pc}

08022964 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8022964:	b580      	push	{r7, lr}
 8022966:	b086      	sub	sp, #24
 8022968:	af02      	add	r7, sp, #8
 802296a:	60f8      	str	r0, [r7, #12]
 802296c:	60b9      	str	r1, [r7, #8]
 802296e:	607a      	str	r2, [r7, #4]
 8022970:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022978:	2b01      	cmp	r3, #1
 802297a:	d006      	beq.n	802298a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x26>
 802297c:	4b2f      	ldr	r3, [pc, #188]	; (8022a3c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 802297e:	4a30      	ldr	r2, [pc, #192]	; (8022a40 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 8022980:	f240 31d7 	movw	r1, #983	; 0x3d7
 8022984:	482f      	ldr	r0, [pc, #188]	; (8022a44 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xe0>)
 8022986:	f019 f9df 	bl	803bd48 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022990:	4618      	mov	r0, r3
 8022992:	f7ff fd51 	bl	8022438 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022996:	4603      	mov	r3, r0
 8022998:	2b06      	cmp	r3, #6
 802299a:	d844      	bhi.n	8022a26 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xc2>
 802299c:	a201      	add	r2, pc, #4	; (adr r2, 80229a4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x40>)
 802299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80229a2:	bf00      	nop
 80229a4:	080229c1 	.word	0x080229c1
 80229a8:	080229cf 	.word	0x080229cf
 80229ac:	080229dd 	.word	0x080229dd
 80229b0:	080229eb 	.word	0x080229eb
 80229b4:	080229fd 	.word	0x080229fd
 80229b8:	08022a0b 	.word	0x08022a0b
 80229bc:	08022a19 	.word	0x08022a19
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 80229c0:	68f8      	ldr	r0, [r7, #12]
 80229c2:	683b      	ldr	r3, [r7, #0]
 80229c4:	687a      	ldr	r2, [r7, #4]
 80229c6:	68b9      	ldr	r1, [r7, #8]
 80229c8:	f7ff fd42 	bl	8022450 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 80229cc:	e031      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Info:
			return GetInfo(request, container);
 80229ce:	68f8      	ldr	r0, [r7, #12]
 80229d0:	683b      	ldr	r3, [r7, #0]
 80229d2:	687a      	ldr	r2, [r7, #4]
 80229d4:	68b9      	ldr	r1, [r7, #8]
 80229d6:	f7ff fda3 	bl	8022520 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 80229da:	e02a      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 80229dc:	68f8      	ldr	r0, [r7, #12]
 80229de:	69bb      	ldr	r3, [r7, #24]
 80229e0:	687a      	ldr	r2, [r7, #4]
 80229e2:	68b9      	ldr	r1, [r7, #8]
 80229e4:	f7ff fdf0 	bl	80225c8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 80229e8:	e023      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 80229ea:	68f8      	ldr	r0, [r7, #12]
 80229ec:	6a3b      	ldr	r3, [r7, #32]
 80229ee:	9300      	str	r3, [sp, #0]
 80229f0:	683b      	ldr	r3, [r7, #0]
 80229f2:	687a      	ldr	r2, [r7, #4]
 80229f4:	68b9      	ldr	r1, [r7, #8]
 80229f6:	f7ff fe39 	bl	802266c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 80229fa:	e01a      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 80229fc:	68f8      	ldr	r0, [r7, #12]
 80229fe:	69fb      	ldr	r3, [r7, #28]
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	68b9      	ldr	r1, [r7, #8]
 8022a04:	f7ff fe78 	bl	80226f8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 8022a08:	e013      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 8022a0a:	68f8      	ldr	r0, [r7, #12]
 8022a0c:	6a3b      	ldr	r3, [r7, #32]
 8022a0e:	687a      	ldr	r2, [r7, #4]
 8022a10:	68b9      	ldr	r1, [r7, #8]
 8022a12:	f7ff ff13 	bl	802283c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 8022a16:	e00c      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 8022a18:	68f8      	ldr	r0, [r7, #12]
 8022a1a:	6a3b      	ldr	r3, [r7, #32]
 8022a1c:	687a      	ldr	r2, [r7, #4]
 8022a1e:	68b9      	ldr	r1, [r7, #8]
 8022a20:	f7ff feb6 	bl	8022790 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 8022a24:	e005      	b.n	8022a32 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		default:
			return UnknownModeResponce(request);
 8022a26:	68fb      	ldr	r3, [r7, #12]
 8022a28:	687a      	ldr	r2, [r7, #4]
 8022a2a:	68b9      	ldr	r1, [r7, #8]
 8022a2c:	4618      	mov	r0, r3
 8022a2e:	f7ff ff71 	bl	8022914 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 8022a32:	68f8      	ldr	r0, [r7, #12]
 8022a34:	3710      	adds	r7, #16
 8022a36:	46bd      	mov	sp, r7
 8022a38:	bd80      	pop	{r7, pc}
 8022a3a:	bf00      	nop
 8022a3c:	0803d91c 	.word	0x0803d91c
 8022a40:	0803d944 	.word	0x0803d944
 8022a44:	0803cf9c 	.word	0x0803cf9c

08022a48 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022a48:	b580      	push	{r7, lr}
 8022a4a:	b084      	sub	sp, #16
 8022a4c:	af00      	add	r7, sp, #0
 8022a4e:	60f8      	str	r0, [r7, #12]
 8022a50:	60b9      	str	r1, [r7, #8]
 8022a52:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022a54:	68fb      	ldr	r3, [r7, #12]
 8022a56:	4618      	mov	r0, r3
 8022a58:	f001 f854 	bl	8023b04 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d002      	beq.n	8022a68 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	687a      	ldr	r2, [r7, #4]
 8022a66:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 8022a68:	68fb      	ldr	r3, [r7, #12]
 8022a6a:	68b9      	ldr	r1, [r7, #8]
 8022a6c:	4618      	mov	r0, r3
 8022a6e:	f000 fff2 	bl	8023a56 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 8022a72:	68fb      	ldr	r3, [r7, #12]
 8022a74:	4618      	mov	r0, r3
 8022a76:	f001 f810 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022a7a:	4602      	mov	r2, r0
 8022a7c:	68fb      	ldr	r3, [r7, #12]
 8022a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a80:	429a      	cmp	r2, r3
 8022a82:	bf8c      	ite	hi
 8022a84:	2301      	movhi	r3, #1
 8022a86:	2300      	movls	r3, #0
 8022a88:	b2db      	uxtb	r3, r3
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d008      	beq.n	8022aa0 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 8022a8e:	68fb      	ldr	r3, [r7, #12]
 8022a90:	4618      	mov	r0, r3
 8022a92:	f001 f814 	bl	8023abe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 8022a96:	68fb      	ldr	r3, [r7, #12]
 8022a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a9a:	1c5a      	adds	r2, r3, #1
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 8022aa0:	bf00      	nop
 8022aa2:	3710      	adds	r7, #16
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	bd80      	pop	{r7, pc}

08022aa8 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 8022aa8:	b590      	push	{r4, r7, lr}
 8022aaa:	b083      	sub	sp, #12
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	6078      	str	r0, [r7, #4]
 8022ab0:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	4618      	mov	r0, r3
 8022ab6:	f001 f825 	bl	8023b04 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022aba:	4603      	mov	r3, r0
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d001      	beq.n	8022ac4 <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	e012      	b.n	8022aea <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	4618      	mov	r0, r3
 8022acc:	f000 ffe5 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022ad0:	4603      	mov	r3, r0
 8022ad2:	4423      	add	r3, r4
 8022ad4:	683a      	ldr	r2, [r7, #0]
 8022ad6:	429a      	cmp	r2, r3
 8022ad8:	bf34      	ite	cc
 8022ada:	2301      	movcc	r3, #1
 8022adc:	2300      	movcs	r3, #0
 8022ade:	b2db      	uxtb	r3, r3
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d001      	beq.n	8022ae8 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022ae4:	2301      	movs	r3, #1
 8022ae6:	e000      	b.n	8022aea <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022ae8:	2300      	movs	r3, #0
	}
 8022aea:	4618      	mov	r0, r3
 8022aec:	370c      	adds	r7, #12
 8022aee:	46bd      	mov	sp, r7
 8022af0:	bd90      	pop	{r4, r7, pc}
	...

08022af4 <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 8022af4:	b5b0      	push	{r4, r5, r7, lr}
 8022af6:	b084      	sub	sp, #16
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	60f8      	str	r0, [r7, #12]
 8022afc:	60b9      	str	r1, [r7, #8]
 8022afe:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022b00:	6879      	ldr	r1, [r7, #4]
 8022b02:	68b8      	ldr	r0, [r7, #8]
 8022b04:	f7ff ffd0 	bl	8022aa8 <_ZNK12IMUFrameMemo3HasEj>
 8022b08:	4603      	mov	r3, r0
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d106      	bne.n	8022b1c <_ZNK12IMUFrameMemo3GetEj+0x28>
 8022b0e:	4b1a      	ldr	r3, [pc, #104]	; (8022b78 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022b10:	4a1a      	ldr	r2, [pc, #104]	; (8022b7c <_ZNK12IMUFrameMemo3GetEj+0x88>)
 8022b12:	f240 410c 	movw	r1, #1036	; 0x40c
 8022b16:	481a      	ldr	r0, [pc, #104]	; (8022b80 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022b18:	f019 f916 	bl	803bd48 <__assert_func>

		if (seq < FirstSeq) {
 8022b1c:	68bb      	ldr	r3, [r7, #8]
 8022b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b20:	687a      	ldr	r2, [r7, #4]
 8022b22:	429a      	cmp	r2, r3
 8022b24:	d20c      	bcs.n	8022b40 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 8022b26:	68bb      	ldr	r3, [r7, #8]
 8022b28:	4618      	mov	r0, r3
 8022b2a:	f001 f842 	bl	8023bb2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 8022b2e:	4602      	mov	r2, r0
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	461c      	mov	r4, r3
 8022b34:	4615      	mov	r5, r2
 8022b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022b3a:	682b      	ldr	r3, [r5, #0]
 8022b3c:	6023      	str	r3, [r4, #0]
 8022b3e:	e017      	b.n	8022b70 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022b40:	68bc      	ldr	r4, [r7, #8]
 8022b42:	68bb      	ldr	r3, [r7, #8]
 8022b44:	4618      	mov	r0, r3
 8022b46:	f000 ffa8 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022b4a:	4601      	mov	r1, r0
 8022b4c:	68bb      	ldr	r3, [r7, #8]
 8022b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	1ad3      	subs	r3, r2, r3
 8022b54:	440b      	add	r3, r1
 8022b56:	3b01      	subs	r3, #1
 8022b58:	4619      	mov	r1, r3
 8022b5a:	4620      	mov	r0, r4
 8022b5c:	f000 ffe4 	bl	8023b28 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022b60:	4602      	mov	r2, r0
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	461c      	mov	r4, r3
 8022b66:	4615      	mov	r5, r2
 8022b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022b6c:	682b      	ldr	r3, [r5, #0]
 8022b6e:	6023      	str	r3, [r4, #0]
	}
 8022b70:	68f8      	ldr	r0, [r7, #12]
 8022b72:	3710      	adds	r7, #16
 8022b74:	46bd      	mov	sp, r7
 8022b76:	bdb0      	pop	{r4, r5, r7, pc}
 8022b78:	0803d9c0 	.word	0x0803d9c0
 8022b7c:	0803d9cc 	.word	0x0803d9cc
 8022b80:	0803cf9c 	.word	0x0803cf9c

08022b84 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022b84:	b580      	push	{r7, lr}
 8022b86:	b082      	sub	sp, #8
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
 8022b8c:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022b8e:	683b      	ldr	r3, [r7, #0]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d106      	bne.n	8022ba2 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8022b94:	4b14      	ldr	r3, [pc, #80]	; (8022be8 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 8022b96:	4a15      	ldr	r2, [pc, #84]	; (8022bec <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022b98:	f240 411d 	movw	r1, #1053	; 0x41d
 8022b9c:	4814      	ldr	r0, [pc, #80]	; (8022bf0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022b9e:	f019 f8d3 	bl	803bd48 <__assert_func>
			assert(*ptr);
 8022ba2:	683b      	ldr	r3, [r7, #0]
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	d106      	bne.n	8022bb8 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 8022baa:	4b12      	ldr	r3, [pc, #72]	; (8022bf4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022bac:	4a0f      	ldr	r2, [pc, #60]	; (8022bec <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022bae:	f240 411e 	movw	r1, #1054	; 0x41e
 8022bb2:	480f      	ldr	r0, [pc, #60]	; (8022bf0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022bb4:	f019 f8c8 	bl	803bd48 <__assert_func>

			**ptr = Major;
 8022bb8:	683b      	ldr	r3, [r7, #0]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	687a      	ldr	r2, [r7, #4]
 8022bbe:	7812      	ldrb	r2, [r2, #0]
 8022bc0:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022bc2:	683b      	ldr	r3, [r7, #0]
 8022bc4:	681b      	ldr	r3, [r3, #0]
 8022bc6:	1c5a      	adds	r2, r3, #1
 8022bc8:	683b      	ldr	r3, [r7, #0]
 8022bca:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022bcc:	683b      	ldr	r3, [r7, #0]
 8022bce:	681b      	ldr	r3, [r3, #0]
 8022bd0:	687a      	ldr	r2, [r7, #4]
 8022bd2:	7852      	ldrb	r2, [r2, #1]
 8022bd4:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022bd6:	683b      	ldr	r3, [r7, #0]
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	1c5a      	adds	r2, r3, #1
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	601a      	str	r2, [r3, #0]
		}
 8022be0:	bf00      	nop
 8022be2:	3708      	adds	r7, #8
 8022be4:	46bd      	mov	sp, r7
 8022be6:	bd80      	pop	{r7, pc}
 8022be8:	0803cf68 	.word	0x0803cf68
 8022bec:	0803da04 	.word	0x0803da04
 8022bf0:	0803cf9c 	.word	0x0803cf9c
 8022bf4:	0803cfb8 	.word	0x0803cfb8

08022bf8 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022bf8:	b480      	push	{r7}
 8022bfa:	b083      	sub	sp, #12
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
 8022c00:	460b      	mov	r3, r1
 8022c02:	70fb      	strb	r3, [r7, #3]
 8022c04:	4613      	mov	r3, r2
 8022c06:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	78fa      	ldrb	r2, [r7, #3]
 8022c0c:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	78ba      	ldrb	r2, [r7, #2]
 8022c12:	705a      	strb	r2, [r3, #1]
	}
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	4618      	mov	r0, r3
 8022c18:	370c      	adds	r7, #12
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c20:	4770      	bx	lr
	...

08022c24 <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022c24:	b580      	push	{r7, lr}
 8022c26:	b086      	sub	sp, #24
 8022c28:	af00      	add	r7, sp, #0
 8022c2a:	60f8      	str	r0, [r7, #12]
 8022c2c:	60b9      	str	r1, [r7, #8]
 8022c2e:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022c36:	2b02      	cmp	r3, #2
 8022c38:	d006      	beq.n	8022c48 <_ZN18AcknowledgeHandler6HandleERK7Request+0x24>
 8022c3a:	4b14      	ldr	r3, [pc, #80]	; (8022c8c <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022c3c:	4a14      	ldr	r2, [pc, #80]	; (8022c90 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022c3e:	f240 4131 	movw	r1, #1073	; 0x431
 8022c42:	4814      	ldr	r0, [pc, #80]	; (8022c94 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022c44:	f019 f880 	bl	803bd48 <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Ack;
 8022c48:	68fb      	ldr	r3, [r7, #12]
 8022c4a:	2202      	movs	r2, #2
 8022c4c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = 0;
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	2200      	movs	r2, #0
 8022c54:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.Error = 0;
 8022c58:	68fb      	ldr	r3, [r7, #12]
 8022c5a:	2200      	movs	r2, #0
 8022c5c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.ResponceSize = 2;
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	2202      	movs	r2, #2
 8022c64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		uint8_t *ptr = responce.Data.data();
 8022c68:	68f8      	ldr	r0, [r7, #12]
 8022c6a:	f000 fd0b 	bl	8023684 <_ZNSt5arrayIhLj256EE4dataEv>
 8022c6e:	4603      	mov	r3, r0
 8022c70:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022c72:	68bb      	ldr	r3, [r7, #8]
 8022c74:	f107 0214 	add.w	r2, r7, #20
 8022c78:	4611      	mov	r1, r2
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	f7ff ff82 	bl	8022b84 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022c80:	bf00      	nop
	}
 8022c82:	68f8      	ldr	r0, [r7, #12]
 8022c84:	3718      	adds	r7, #24
 8022c86:	46bd      	mov	sp, r7
 8022c88:	bd80      	pop	{r7, pc}
 8022c8a:	bf00      	nop
 8022c8c:	0803da40 	.word	0x0803da40
 8022c90:	0803da68 	.word	0x0803da68
 8022c94:	0803cf9c 	.word	0x0803cf9c

08022c98 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b082      	sub	sp, #8
 8022c9c:	af00      	add	r7, sp, #0
 8022c9e:	6078      	str	r0, [r7, #4]
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	4618      	mov	r0, r3
 8022ca4:	f000 ffa5 	bl	8023bf2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	4618      	mov	r0, r3
 8022cac:	3708      	adds	r7, #8
 8022cae:	46bd      	mov	sp, r7
 8022cb0:	bd80      	pop	{r7, pc}

08022cb2 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022cb2:	b580      	push	{r7, lr}
 8022cb4:	b082      	sub	sp, #8
 8022cb6:	af00      	add	r7, sp, #0
 8022cb8:	6078      	str	r0, [r7, #4]
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f7ff ffeb 	bl	8022c98 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	2200      	movs	r2, #0
 8022cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022cce:	62da      	str	r2, [r3, #44]	; 0x2c
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	4618      	mov	r0, r3
 8022cd4:	3708      	adds	r7, #8
 8022cd6:	46bd      	mov	sp, r7
 8022cd8:	bd80      	pop	{r7, pc}

08022cda <_ZN17IMUFrameContainerD1Ev>:
 8022cda:	b580      	push	{r7, lr}
 8022cdc:	b082      	sub	sp, #8
 8022cde:	af00      	add	r7, sp, #0
 8022ce0:	6078      	str	r0, [r7, #4]
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	4618      	mov	r0, r3
 8022ce6:	f000 ffb7 	bl	8023c58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022cea:	687b      	ldr	r3, [r7, #4]
 8022cec:	4618      	mov	r0, r3
 8022cee:	3708      	adds	r7, #8
 8022cf0:	46bd      	mov	sp, r7
 8022cf2:	bd80      	pop	{r7, pc}

08022cf4 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022cf4:	b580      	push	{r7, lr}
 8022cf6:	b082      	sub	sp, #8
 8022cf8:	af00      	add	r7, sp, #0
 8022cfa:	6078      	str	r0, [r7, #4]
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	4618      	mov	r0, r3
 8022d00:	f7ff ffca 	bl	8022c98 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	22a0      	movs	r2, #160	; 0xa0
 8022d08:	629a      	str	r2, [r3, #40]	; 0x28
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	4618      	mov	r0, r3
 8022d14:	3708      	adds	r7, #8
 8022d16:	46bd      	mov	sp, r7
 8022d18:	bd80      	pop	{r7, pc}

08022d1a <_ZN12IMUFrameMemoD1Ev>:
 8022d1a:	b580      	push	{r7, lr}
 8022d1c:	b082      	sub	sp, #8
 8022d1e:	af00      	add	r7, sp, #0
 8022d20:	6078      	str	r0, [r7, #4]
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	4618      	mov	r0, r3
 8022d26:	f000 ff97 	bl	8023c58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	4618      	mov	r0, r3
 8022d2e:	3708      	adds	r7, #8
 8022d30:	46bd      	mov	sp, r7
 8022d32:	bd80      	pop	{r7, pc}

08022d34 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8022d34:	b580      	push	{r7, lr}
 8022d36:	b082      	sub	sp, #8
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	6078      	str	r0, [r7, #4]
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	4618      	mov	r0, r3
 8022d40:	f000 ffd0 	bl	8023ce4 <_ZNSt5dequeIjSaIjEED1Ev>
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	4618      	mov	r0, r3
 8022d48:	3708      	adds	r7, #8
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	bd80      	pop	{r7, pc}

08022d4e <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022d4e:	b580      	push	{r7, lr}
 8022d50:	b082      	sub	sp, #8
 8022d52:	af00      	add	r7, sp, #0
 8022d54:	6078      	str	r0, [r7, #4]
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	2200      	movs	r2, #0
 8022d5a:	601a      	str	r2, [r3, #0]
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	2200      	movs	r2, #0
 8022d60:	605a      	str	r2, [r3, #4]
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	2201      	movs	r2, #1
 8022d66:	609a      	str	r2, [r3, #8]
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	2200      	movs	r2, #0
 8022d6c:	60da      	str	r2, [r3, #12]
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	2200      	movs	r2, #0
 8022d72:	611a      	str	r2, [r3, #16]
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022d7a:	615a      	str	r2, [r3, #20]
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	3318      	adds	r3, #24
 8022d80:	4618      	mov	r0, r3
 8022d82:	f000 ff9b 	bl	8023cbc <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	2200      	movs	r2, #0
 8022d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	4618      	mov	r0, r3
 8022d90:	3708      	adds	r7, #8
 8022d92:	46bd      	mov	sp, r7
 8022d94:	bd80      	pop	{r7, pc}

08022d96 <_ZN20StrobeDurationFilterD1Ev>:
 8022d96:	b580      	push	{r7, lr}
 8022d98:	b082      	sub	sp, #8
 8022d9a:	af00      	add	r7, sp, #0
 8022d9c:	6078      	str	r0, [r7, #4]
 8022d9e:	687b      	ldr	r3, [r7, #4]
 8022da0:	3318      	adds	r3, #24
 8022da2:	4618      	mov	r0, r3
 8022da4:	f7ff ffc6 	bl	8022d34 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	4618      	mov	r0, r3
 8022dac:	3708      	adds	r7, #8
 8022dae:	46bd      	mov	sp, r7
 8022db0:	bd80      	pop	{r7, pc}
	...

08022db4 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022db4:	b084      	sub	sp, #16
 8022db6:	b580      	push	{r7, lr}
 8022db8:	b082      	sub	sp, #8
 8022dba:	af00      	add	r7, sp, #0
 8022dbc:	6078      	str	r0, [r7, #4]
 8022dbe:	f107 0014 	add.w	r0, r7, #20
 8022dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022dc6:	687b      	ldr	r3, [r7, #4]
 8022dc8:	6979      	ldr	r1, [r7, #20]
 8022dca:	69fa      	ldr	r2, [r7, #28]
 8022dcc:	4618      	mov	r0, r3
 8022dce:	f7fe ff61 	bl	8021c94 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022dd8:	69b9      	ldr	r1, [r7, #24]
 8022dda:	69fa      	ldr	r2, [r7, #28]
 8022ddc:	4618      	mov	r0, r3
 8022dde:	f7fe ff59 	bl	8021c94 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022de2:	687a      	ldr	r2, [r7, #4]
 8022de4:	f641 1348 	movw	r3, #6472	; 0x1948
 8022de8:	4413      	add	r3, r2
 8022dea:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022dee:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022df2:	4618      	mov	r0, r3
 8022df4:	f7ff ff00 	bl	8022bf8 <_ZN18AcknowledgeHandlerC1Ehh>
 8022df8:	687b      	ldr	r3, [r7, #4]
 8022dfa:	f641 104c 	movw	r0, #6476	; 0x194c
 8022dfe:	4418      	add	r0, r3
 8022e00:	6a39      	ldr	r1, [r7, #32]
 8022e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022e08:	f7fe f8f8 	bl	8020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022e12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022e16:	2230      	movs	r2, #48	; 0x30
 8022e18:	2100      	movs	r1, #0
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	f019 f826 	bl	803be6c <memset>
 8022e20:	687a      	ldr	r2, [r7, #4]
 8022e22:	4b16      	ldr	r3, [pc, #88]	; (8022e7c <_ZN18MotherboardContextC1E17MotherboardConfig+0xc8>)
 8022e24:	4413      	add	r3, r2
 8022e26:	4618      	mov	r0, r3
 8022e28:	f7ff ff43 	bl	8022cb2 <_ZN17IMUFrameContainerC1Ev>
 8022e2c:	687a      	ldr	r2, [r7, #4]
 8022e2e:	4b14      	ldr	r3, [pc, #80]	; (8022e80 <_ZN18MotherboardContextC1E17MotherboardConfig+0xcc>)
 8022e30:	4413      	add	r3, r2
 8022e32:	4618      	mov	r0, r3
 8022e34:	f7ff ff5e 	bl	8022cf4 <_ZN12IMUFrameMemoC1Ev>
 8022e38:	687a      	ldr	r2, [r7, #4]
 8022e3a:	4b12      	ldr	r3, [pc, #72]	; (8022e84 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd0>)
 8022e3c:	4413      	add	r3, r2
 8022e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022e40:	4611      	mov	r1, r2
 8022e42:	4618      	mov	r0, r3
 8022e44:	f7fd fc1e 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022e48:	687a      	ldr	r2, [r7, #4]
 8022e4a:	4b0f      	ldr	r3, [pc, #60]	; (8022e88 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd4>)
 8022e4c:	4413      	add	r3, r2
 8022e4e:	4618      	mov	r0, r3
 8022e50:	f7ff ff7d 	bl	8022d4e <_ZN20StrobeDurationFilterC1Ev>
 8022e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e56:	687a      	ldr	r2, [r7, #4]
 8022e58:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8022e5c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022e66:	2200      	movs	r2, #0
 8022e68:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	4618      	mov	r0, r3
 8022e70:	3708      	adds	r7, #8
 8022e72:	46bd      	mov	sp, r7
 8022e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022e78:	b004      	add	sp, #16
 8022e7a:	4770      	bx	lr
 8022e7c:	00023140 	.word	0x00023140
 8022e80:	00023170 	.word	0x00023170
 8022e84:	000231a0 	.word	0x000231a0
 8022e88:	000242fc 	.word	0x000242fc

08022e8c <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022e8c:	b580      	push	{r7, lr}
 8022e8e:	b082      	sub	sp, #8
 8022e90:	af00      	add	r7, sp, #0
 8022e92:	6078      	str	r0, [r7, #4]
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	4618      	mov	r0, r3
 8022e98:	f7fe fee8 	bl	8021c6c <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	2201      	movs	r2, #1
 8022ea0:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	4618      	mov	r0, r3
 8022ea8:	3708      	adds	r7, #8
 8022eaa:	46bd      	mov	sp, r7
 8022eac:	bd80      	pop	{r7, pc}
	...

08022eb0 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022eb0:	b580      	push	{r7, lr}
 8022eb2:	b082      	sub	sp, #8
 8022eb4:	af00      	add	r7, sp, #0
 8022eb6:	6078      	str	r0, [r7, #4]
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	4618      	mov	r0, r3
 8022ebc:	f7fe f876 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022ec0:	687a      	ldr	r2, [r7, #4]
 8022ec2:	4b17      	ldr	r3, [pc, #92]	; (8022f20 <_ZN11QueueSenderC1Ev+0x70>)
 8022ec4:	4413      	add	r3, r2
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	f7fe f884 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ede:	2200      	movs	r2, #0
 8022ee0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022eea:	2201      	movs	r2, #1
 8022eec:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ef6:	2200      	movs	r2, #0
 8022ef8:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f02:	2201      	movs	r2, #1
 8022f04:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022f0e:	2200      	movs	r2, #0
 8022f10:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	4618      	mov	r0, r3
 8022f18:	3708      	adds	r7, #8
 8022f1a:	46bd      	mov	sp, r7
 8022f1c:	bd80      	pop	{r7, pc}
 8022f1e:	bf00      	nop
 8022f20:	00020b7c 	.word	0x00020b7c

08022f24 <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022f24:	b480      	push	{r7}
 8022f26:	b083      	sub	sp, #12
 8022f28:	af00      	add	r7, sp, #0
 8022f2a:	6078      	str	r0, [r7, #4]
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f32:	461a      	mov	r2, r3
 8022f34:	2300      	movs	r3, #0
 8022f36:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	4618      	mov	r0, r3
 8022f3e:	370c      	adds	r7, #12
 8022f40:	46bd      	mov	sp, r7
 8022f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f46:	4770      	bx	lr

08022f48 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022f48:	b580      	push	{r7, lr}
 8022f4a:	b082      	sub	sp, #8
 8022f4c:	af00      	add	r7, sp, #0
 8022f4e:	6078      	str	r0, [r7, #4]
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	4618      	mov	r0, r3
 8022f54:	f7ff ff9a 	bl	8022e8c <_ZN13HeadInterfaceC1Ev>
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022f5e:	4618      	mov	r0, r3
 8022f60:	f7ff ff94 	bl	8022e8c <_ZN13HeadInterfaceC1Ev>
 8022f64:	687a      	ldr	r2, [r7, #4]
 8022f66:	f641 1348 	movw	r3, #6472	; 0x1948
 8022f6a:	4413      	add	r3, r2
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	2100      	movs	r1, #0
 8022f70:	4618      	mov	r0, r3
 8022f72:	f7ff fe41 	bl	8022bf8 <_ZN18AcknowledgeHandlerC1Ehh>
 8022f76:	687a      	ldr	r2, [r7, #4]
 8022f78:	f641 134c 	movw	r3, #6476	; 0x194c
 8022f7c:	4413      	add	r3, r2
 8022f7e:	4618      	mov	r0, r3
 8022f80:	f7ff ff96 	bl	8022eb0 <_ZN11QueueSenderC1Ev>
 8022f84:	687a      	ldr	r2, [r7, #4]
 8022f86:	4b11      	ldr	r3, [pc, #68]	; (8022fcc <_ZN18MotherboardContextC1Ev+0x84>)
 8022f88:	4413      	add	r3, r2
 8022f8a:	4618      	mov	r0, r3
 8022f8c:	f7ff fe91 	bl	8022cb2 <_ZN17IMUFrameContainerC1Ev>
 8022f90:	687a      	ldr	r2, [r7, #4]
 8022f92:	4b0f      	ldr	r3, [pc, #60]	; (8022fd0 <_ZN18MotherboardContextC1Ev+0x88>)
 8022f94:	4413      	add	r3, r2
 8022f96:	4618      	mov	r0, r3
 8022f98:	f7ff feac 	bl	8022cf4 <_ZN12IMUFrameMemoC1Ev>
 8022f9c:	687a      	ldr	r2, [r7, #4]
 8022f9e:	4b0d      	ldr	r3, [pc, #52]	; (8022fd4 <_ZN18MotherboardContextC1Ev+0x8c>)
 8022fa0:	4413      	add	r3, r2
 8022fa2:	4618      	mov	r0, r3
 8022fa4:	f7ff ffbe 	bl	8022f24 <_ZN10BHYWrapperC1Ev>
 8022fa8:	687a      	ldr	r2, [r7, #4]
 8022faa:	4b0b      	ldr	r3, [pc, #44]	; (8022fd8 <_ZN18MotherboardContextC1Ev+0x90>)
 8022fac:	4413      	add	r3, r2
 8022fae:	4618      	mov	r0, r3
 8022fb0:	f7ff fecd 	bl	8022d4e <_ZN20StrobeDurationFilterC1Ev>
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022fba:	2200      	movs	r2, #0
 8022fbc:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	3708      	adds	r7, #8
 8022fc6:	46bd      	mov	sp, r7
 8022fc8:	bd80      	pop	{r7, pc}
 8022fca:	bf00      	nop
 8022fcc:	00023140 	.word	0x00023140
 8022fd0:	00023170 	.word	0x00023170
 8022fd4:	000231a0 	.word	0x000231a0
 8022fd8:	000242fc 	.word	0x000242fc

08022fdc <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022fdc:	b580      	push	{r7, lr}
 8022fde:	b082      	sub	sp, #8
 8022fe0:	af00      	add	r7, sp, #0
 8022fe2:	6078      	str	r0, [r7, #4]
 8022fe4:	687a      	ldr	r2, [r7, #4]
 8022fe6:	4b0b      	ldr	r3, [pc, #44]	; (8023014 <_ZN18MotherboardContextD1Ev+0x38>)
 8022fe8:	4413      	add	r3, r2
 8022fea:	4618      	mov	r0, r3
 8022fec:	f7ff fed3 	bl	8022d96 <_ZN20StrobeDurationFilterD1Ev>
 8022ff0:	687a      	ldr	r2, [r7, #4]
 8022ff2:	4b09      	ldr	r3, [pc, #36]	; (8023018 <_ZN18MotherboardContextD1Ev+0x3c>)
 8022ff4:	4413      	add	r3, r2
 8022ff6:	4618      	mov	r0, r3
 8022ff8:	f7ff fe8f 	bl	8022d1a <_ZN12IMUFrameMemoD1Ev>
 8022ffc:	687a      	ldr	r2, [r7, #4]
 8022ffe:	4b07      	ldr	r3, [pc, #28]	; (802301c <_ZN18MotherboardContextD1Ev+0x40>)
 8023000:	4413      	add	r3, r2
 8023002:	4618      	mov	r0, r3
 8023004:	f7ff fe69 	bl	8022cda <_ZN17IMUFrameContainerD1Ev>
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	4618      	mov	r0, r3
 802300c:	3708      	adds	r7, #8
 802300e:	46bd      	mov	sp, r7
 8023010:	bd80      	pop	{r7, pc}
 8023012:	bf00      	nop
 8023014:	000242fc 	.word	0x000242fc
 8023018:	00023170 	.word	0x00023170
 802301c:	00023140 	.word	0x00023140

08023020 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8023020:	b580      	push	{r7, lr}
 8023022:	b082      	sub	sp, #8
 8023024:	af00      	add	r7, sp, #0
 8023026:	6078      	str	r0, [r7, #4]
 8023028:	6039      	str	r1, [r7, #0]
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	683a      	ldr	r2, [r7, #0]
 802302e:	4611      	mov	r1, r2
 8023030:	4618      	mov	r0, r3
 8023032:	f000 fe7c 	bl	8023d2e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8023036:	683b      	ldr	r3, [r7, #0]
 8023038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	629a      	str	r2, [r3, #40]	; 0x28
 802303e:	683b      	ldr	r3, [r7, #0]
 8023040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	62da      	str	r2, [r3, #44]	; 0x2c
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	4618      	mov	r0, r3
 802304a:	3708      	adds	r7, #8
 802304c:	46bd      	mov	sp, r7
 802304e:	bd80      	pop	{r7, pc}

08023050 <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8023050:	b580      	push	{r7, lr}
 8023052:	b082      	sub	sp, #8
 8023054:	af00      	add	r7, sp, #0
 8023056:	6078      	str	r0, [r7, #4]
 8023058:	6039      	str	r1, [r7, #0]
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	683a      	ldr	r2, [r7, #0]
 802305e:	4611      	mov	r1, r2
 8023060:	4618      	mov	r0, r3
 8023062:	f000 fe64 	bl	8023d2e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8023066:	683b      	ldr	r3, [r7, #0]
 8023068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	629a      	str	r2, [r3, #40]	; 0x28
 802306e:	683b      	ldr	r3, [r7, #0]
 8023070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	62da      	str	r2, [r3, #44]	; 0x2c
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	4618      	mov	r0, r3
 802307a:	3708      	adds	r7, #8
 802307c:	46bd      	mov	sp, r7
 802307e:	bd80      	pop	{r7, pc}

08023080 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8023080:	b580      	push	{r7, lr}
 8023082:	b082      	sub	sp, #8
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
 8023088:	6039      	str	r1, [r7, #0]
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	683a      	ldr	r2, [r7, #0]
 802308e:	4611      	mov	r1, r2
 8023090:	4618      	mov	r0, r3
 8023092:	f000 fe5f 	bl	8023d54 <_ZNSt5dequeIjSaIjEEaSEOS1_>
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	4618      	mov	r0, r3
 802309a:	3708      	adds	r7, #8
 802309c:	46bd      	mov	sp, r7
 802309e:	bd80      	pop	{r7, pc}

080230a0 <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 80230a0:	b580      	push	{r7, lr}
 80230a2:	b082      	sub	sp, #8
 80230a4:	af00      	add	r7, sp, #0
 80230a6:	6078      	str	r0, [r7, #4]
 80230a8:	6039      	str	r1, [r7, #0]
 80230aa:	683b      	ldr	r3, [r7, #0]
 80230ac:	681a      	ldr	r2, [r3, #0]
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	601a      	str	r2, [r3, #0]
 80230b2:	683b      	ldr	r3, [r7, #0]
 80230b4:	685a      	ldr	r2, [r3, #4]
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	605a      	str	r2, [r3, #4]
 80230ba:	683b      	ldr	r3, [r7, #0]
 80230bc:	689a      	ldr	r2, [r3, #8]
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	609a      	str	r2, [r3, #8]
 80230c2:	683b      	ldr	r3, [r7, #0]
 80230c4:	68da      	ldr	r2, [r3, #12]
 80230c6:	687b      	ldr	r3, [r7, #4]
 80230c8:	60da      	str	r2, [r3, #12]
 80230ca:	683b      	ldr	r3, [r7, #0]
 80230cc:	691a      	ldr	r2, [r3, #16]
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	611a      	str	r2, [r3, #16]
 80230d2:	683b      	ldr	r3, [r7, #0]
 80230d4:	695a      	ldr	r2, [r3, #20]
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	615a      	str	r2, [r3, #20]
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	f103 0218 	add.w	r2, r3, #24
 80230e0:	683b      	ldr	r3, [r7, #0]
 80230e2:	3318      	adds	r3, #24
 80230e4:	4619      	mov	r1, r3
 80230e6:	4610      	mov	r0, r2
 80230e8:	f7ff ffca 	bl	8023080 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 80230ec:	683b      	ldr	r3, [r7, #0]
 80230ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	641a      	str	r2, [r3, #64]	; 0x40
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	4618      	mov	r0, r3
 80230f8:	3708      	adds	r7, #8
 80230fa:	46bd      	mov	sp, r7
 80230fc:	bd80      	pop	{r7, pc}
	...

08023100 <_ZN18MotherboardContextaSEOS_>:
 8023100:	b580      	push	{r7, lr}
 8023102:	b082      	sub	sp, #8
 8023104:	af00      	add	r7, sp, #0
 8023106:	6078      	str	r0, [r7, #4]
 8023108:	6039      	str	r1, [r7, #0]
 802310a:	687a      	ldr	r2, [r7, #4]
 802310c:	683b      	ldr	r3, [r7, #0]
 802310e:	4610      	mov	r0, r2
 8023110:	4619      	mov	r1, r3
 8023112:	f640 43a1 	movw	r3, #3233	; 0xca1
 8023116:	461a      	mov	r2, r3
 8023118:	f018 fe80 	bl	803be1c <memcpy>
 802311c:	687a      	ldr	r2, [r7, #4]
 802311e:	683b      	ldr	r3, [r7, #0]
 8023120:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 8023124:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8023128:	f640 42a1 	movw	r2, #3233	; 0xca1
 802312c:	4619      	mov	r1, r3
 802312e:	f018 fe75 	bl	803be1c <memcpy>
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023138:	461a      	mov	r2, r3
 802313a:	683b      	ldr	r3, [r7, #0]
 802313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023140:	f8b3 3948 	ldrh.w	r3, [r3, #2376]	; 0x948
 8023144:	f8a2 3948 	strh.w	r3, [r2, #2376]	; 0x948
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802314e:	4619      	mov	r1, r3
 8023150:	683b      	ldr	r3, [r7, #0]
 8023152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023156:	461a      	mov	r2, r3
 8023158:	f601 134c 	addw	r3, r1, #2380	; 0x94c
 802315c:	f602 114c 	addw	r1, r2, #2380	; 0x94c
 8023160:	4a25      	ldr	r2, [pc, #148]	; (80231f8 <_ZN18MotherboardContextaSEOS_+0xf8>)
 8023162:	4618      	mov	r0, r3
 8023164:	f018 fe5a 	bl	803be1c <memcpy>
 8023168:	687a      	ldr	r2, [r7, #4]
 802316a:	4b24      	ldr	r3, [pc, #144]	; (80231fc <_ZN18MotherboardContextaSEOS_+0xfc>)
 802316c:	4413      	add	r3, r2
 802316e:	6839      	ldr	r1, [r7, #0]
 8023170:	4a22      	ldr	r2, [pc, #136]	; (80231fc <_ZN18MotherboardContextaSEOS_+0xfc>)
 8023172:	440a      	add	r2, r1
 8023174:	4611      	mov	r1, r2
 8023176:	4618      	mov	r0, r3
 8023178:	f7ff ff52 	bl	8023020 <_ZN17IMUFrameContaineraSEOS_>
 802317c:	687a      	ldr	r2, [r7, #4]
 802317e:	4b20      	ldr	r3, [pc, #128]	; (8023200 <_ZN18MotherboardContextaSEOS_+0x100>)
 8023180:	4413      	add	r3, r2
 8023182:	6839      	ldr	r1, [r7, #0]
 8023184:	4a1e      	ldr	r2, [pc, #120]	; (8023200 <_ZN18MotherboardContextaSEOS_+0x100>)
 8023186:	440a      	add	r2, r1
 8023188:	4611      	mov	r1, r2
 802318a:	4618      	mov	r0, r3
 802318c:	f7ff ff60 	bl	8023050 <_ZN12IMUFrameMemoaSEOS_>
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023196:	4619      	mov	r1, r3
 8023198:	683b      	ldr	r3, [r7, #0]
 802319a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802319e:	461a      	mov	r2, r3
 80231a0:	f501 73d0 	add.w	r3, r1, #416	; 0x1a0
 80231a4:	f502 71d0 	add.w	r1, r2, #416	; 0x1a0
 80231a8:	f241 1254 	movw	r2, #4436	; 0x1154
 80231ac:	4618      	mov	r0, r3
 80231ae:	f018 fe35 	bl	803be1c <memcpy>
 80231b2:	687a      	ldr	r2, [r7, #4]
 80231b4:	4b13      	ldr	r3, [pc, #76]	; (8023204 <_ZN18MotherboardContextaSEOS_+0x104>)
 80231b6:	4413      	add	r3, r2
 80231b8:	6839      	ldr	r1, [r7, #0]
 80231ba:	4a12      	ldr	r2, [pc, #72]	; (8023204 <_ZN18MotherboardContextaSEOS_+0x104>)
 80231bc:	440a      	add	r2, r1
 80231be:	4611      	mov	r1, r2
 80231c0:	4618      	mov	r0, r3
 80231c2:	f7ff ff6d 	bl	80230a0 <_ZN20StrobeDurationFilteraSEOS_>
 80231c6:	683b      	ldr	r3, [r7, #0]
 80231c8:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80231d0:	687a      	ldr	r2, [r7, #4]
 80231d2:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 80231d6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 80231da:	683b      	ldr	r3, [r7, #0]
 80231dc:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231e0:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231ea:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	4618      	mov	r0, r3
 80231f2:	3708      	adds	r7, #8
 80231f4:	46bd      	mov	sp, r7
 80231f6:	bd80      	pop	{r7, pc}
 80231f8:	000217f4 	.word	0x000217f4
 80231fc:	00023140 	.word	0x00023140
 8023200:	00023170 	.word	0x00023170
 8023204:	000242fc 	.word	0x000242fc

08023208 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8023208:	b084      	sub	sp, #16
 802320a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802320c:	f5ad 3d10 	sub.w	sp, sp, #147456	; 0x24000
 8023210:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 8023214:	af06      	add	r7, sp, #24
 8023216:	4c20      	ldr	r4, [pc, #128]	; (8023298 <MotherboardInit+0x90>)
 8023218:	443c      	add	r4, r7
 802321a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 802321e:	4e1f      	ldr	r6, [pc, #124]	; (802329c <MotherboardInit+0x94>)
 8023220:	4b1f      	ldr	r3, [pc, #124]	; (80232a0 <MotherboardInit+0x98>)
 8023222:	4433      	add	r3, r6
 8023224:	19de      	adds	r6, r3, r7
 8023226:	466d      	mov	r5, sp
 8023228:	4c1e      	ldr	r4, [pc, #120]	; (80232a4 <MotherboardInit+0x9c>)
 802322a:	443c      	add	r4, r7
 802322c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023234:	e885 0003 	stmia.w	r5, {r0, r1}
 8023238:	4b17      	ldr	r3, [pc, #92]	; (8023298 <MotherboardInit+0x90>)
 802323a:	443b      	add	r3, r7
 802323c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802323e:	4630      	mov	r0, r6
 8023240:	f7ff fdb8 	bl	8022db4 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8023244:	4b15      	ldr	r3, [pc, #84]	; (802329c <MotherboardInit+0x94>)
 8023246:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802324a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 802324e:	443b      	add	r3, r7
 8023250:	4619      	mov	r1, r3
 8023252:	4815      	ldr	r0, [pc, #84]	; (80232a8 <MotherboardInit+0xa0>)
 8023254:	f7ff ff54 	bl	8023100 <_ZN18MotherboardContextaSEOS_>
 8023258:	4b10      	ldr	r3, [pc, #64]	; (802329c <MotherboardInit+0x94>)
 802325a:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802325e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8023262:	443b      	add	r3, r7
 8023264:	4618      	mov	r0, r3
 8023266:	f7ff feb9 	bl	8022fdc <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 802326a:	480f      	ldr	r0, [pc, #60]	; (80232a8 <MotherboardInit+0xa0>)
 802326c:	f7fe fd3e 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 8023270:	480e      	ldr	r0, [pc, #56]	; (80232ac <MotherboardInit+0xa4>)
 8023272:	f7fe fd3b 	bl	8021cec <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8023276:	2100      	movs	r1, #0
 8023278:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80232b0 <MotherboardInit+0xa8>
 802327c:	480d      	ldr	r0, [pc, #52]	; (80232b4 <MotherboardInit+0xac>)
 802327e:	f7fd fa25 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 8023282:	4603      	mov	r3, r0
}
 8023284:	4618      	mov	r0, r3
 8023286:	f507 3710 	add.w	r7, r7, #147456	; 0x24000
 802328a:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 802328e:	46bd      	mov	sp, r7
 8023290:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023294:	b004      	add	sp, #16
 8023296:	4770      	bx	lr
 8023298:	00024360 	.word	0x00024360
 802329c:	fffdbcb8 	.word	0xfffdbcb8
 80232a0:	00024348 	.word	0x00024348
 80232a4:	0002436c 	.word	0x0002436c
 80232a8:	240001d0 	.word	0x240001d0
 80232ac:	24000e74 	.word	0x24000e74
 80232b0:	44480000 	.word	0x44480000
 80232b4:	24023370 	.word	0x24023370

080232b8 <MotherboardTick>:

int MotherboardTick() {
 80232b8:	b580      	push	{r7, lr}
 80232ba:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80232be:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 80232c0:	485f      	ldr	r0, [pc, #380]	; (8023440 <MotherboardTick+0x188>)
 80232c2:	f7ff f88f 	bl	80223e4 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80232c6:	4603      	mov	r3, r0
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d026      	beq.n	802331a <MotherboardTick+0x62>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 80232cc:	485c      	ldr	r0, [pc, #368]	; (8023440 <MotherboardTick+0x188>)
 80232ce:	f7ff f867 	bl	80223a0 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 80232d2:	4602      	mov	r2, r0
 80232d4:	4b5b      	ldr	r3, [pc, #364]	; (8023444 <MotherboardTick+0x18c>)
 80232d6:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80232de:	4413      	add	r3, r2
 80232e0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 80232e4:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 80232e8:	4857      	ldr	r0, [pc, #348]	; (8023448 <MotherboardTick+0x190>)
 80232ea:	f7ff fbdd 	bl	8022aa8 <_ZNK12IMUFrameMemo3HasEj>
 80232ee:	4603      	mov	r3, r0
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	d012      	beq.n	802331a <MotherboardTick+0x62>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 80232f4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80232f8:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80232fc:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8023300:	4951      	ldr	r1, [pc, #324]	; (8023448 <MotherboardTick+0x190>)
 8023302:	4618      	mov	r0, r3
 8023304:	f7ff fbf6 	bl	8022af4 <_ZNK12IMUFrameMemo3GetEj>
 8023308:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 802330c:	4619      	mov	r1, r3
 802330e:	484f      	ldr	r0, [pc, #316]	; (802344c <MotherboardTick+0x194>)
 8023310:	f7fe ff18 	bl	8022144 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 8023314:	484a      	ldr	r0, [pc, #296]	; (8023440 <MotherboardTick+0x188>)
 8023316:	f7ff f876 	bl	8022406 <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 802331a:	4b4a      	ldr	r3, [pc, #296]	; (8023444 <MotherboardTick+0x18c>)
 802331c:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023320:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8023324:	2b00      	cmp	r3, #0
 8023326:	d007      	beq.n	8023338 <MotherboardTick+0x80>
 8023328:	4849      	ldr	r0, [pc, #292]	; (8023450 <MotherboardTick+0x198>)
 802332a:	f7fd fb27 	bl	802097c <_ZN10BHYWrapper4PollEv>
 802332e:	4603      	mov	r3, r0
 8023330:	2b00      	cmp	r3, #0
 8023332:	d001      	beq.n	8023338 <MotherboardTick+0x80>
 8023334:	2301      	movs	r3, #1
 8023336:	e000      	b.n	802333a <MotherboardTick+0x82>
 8023338:	2300      	movs	r3, #0
 802333a:	2b00      	cmp	r3, #0
 802333c:	d017      	beq.n	802336e <MotherboardTick+0xb6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 802333e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023342:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8023346:	4942      	ldr	r1, [pc, #264]	; (8023450 <MotherboardTick+0x198>)
 8023348:	4618      	mov	r0, r3
 802334a:	f7fd fb5b 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 802334e:	4840      	ldr	r0, [pc, #256]	; (8023450 <MotherboardTick+0x198>)
 8023350:	f7fd fc60 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8023354:	4602      	mov	r2, r0
 8023356:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802335a:	4619      	mov	r1, r3
 802335c:	483a      	ldr	r0, [pc, #232]	; (8023448 <MotherboardTick+0x190>)
 802335e:	f7ff fb73 	bl	8022a48 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 8023362:	4b38      	ldr	r3, [pc, #224]	; (8023444 <MotherboardTick+0x18c>)
 8023364:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023368:	2200      	movs	r2, #0
 802336a:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}

	if (mbctx.HeadService.HasRequest()) {
 802336e:	4835      	ldr	r0, [pc, #212]	; (8023444 <MotherboardTick+0x18c>)
 8023370:	f7fe fce2 	bl	8021d38 <_ZNK13HeadInterface10HasRequestEv>
 8023374:	4603      	mov	r3, r0
 8023376:	2b00      	cmp	r3, #0
 8023378:	d042      	beq.n	8023400 <MotherboardTick+0x148>
		Request request = mbctx.HeadService.GetRequest();
 802337a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802337e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8023382:	4930      	ldr	r1, [pc, #192]	; (8023444 <MotherboardTick+0x18c>)
 8023384:	4618      	mov	r0, r3
 8023386:	f7fe fd67 	bl	8021e58 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 802338a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802338e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8023392:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8023396:	2b02      	cmp	r3, #2
 8023398:	d006      	beq.n	80233a8 <MotherboardTick+0xf0>
 802339a:	2b02      	cmp	r3, #2
 802339c:	dc30      	bgt.n	8023400 <MotherboardTick+0x148>
 802339e:	2b00      	cmp	r3, #0
 80233a0:	d012      	beq.n	80233c8 <MotherboardTick+0x110>
 80233a2:	2b01      	cmp	r3, #1
 80233a4:	d016      	beq.n	80233d4 <MotherboardTick+0x11c>
 80233a6:	e02b      	b.n	8023400 <MotherboardTick+0x148>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 80233a8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233ac:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80233b0:	463a      	mov	r2, r7
 80233b2:	4928      	ldr	r1, [pc, #160]	; (8023454 <MotherboardTick+0x19c>)
 80233b4:	4618      	mov	r0, r3
 80233b6:	f7ff fc35 	bl	8022c24 <_ZN18AcknowledgeHandler6HandleERK7Request>
 80233ba:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80233be:	4619      	mov	r1, r3
 80233c0:	4820      	ldr	r0, [pc, #128]	; (8023444 <MotherboardTick+0x18c>)
 80233c2:	f7fe fcc9 	bl	8021d58 <_ZN13HeadInterface4SendERK8Responce>
			break;
 80233c6:	e01b      	b.n	8023400 <MotherboardTick+0x148>

		case Periphery::Body:
			mbctx.Body.AddRequest(request);
 80233c8:	463b      	mov	r3, r7
 80233ca:	4619      	mov	r1, r3
 80233cc:	4822      	ldr	r0, [pc, #136]	; (8023458 <MotherboardTick+0x1a0>)
 80233ce:	f7fd fe6f 	bl	80210b0 <_ZN11QueueSender10AddRequestERK7Request>
			break;
 80233d2:	e015      	b.n	8023400 <MotherboardTick+0x148>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
 80233d4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233d8:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 80233dc:	463a      	mov	r2, r7
 80233de:	4b18      	ldr	r3, [pc, #96]	; (8023440 <MotherboardTick+0x188>)
 80233e0:	9302      	str	r3, [sp, #8]
 80233e2:	4b1e      	ldr	r3, [pc, #120]	; (802345c <MotherboardTick+0x1a4>)
 80233e4:	9301      	str	r3, [sp, #4]
 80233e6:	4b1a      	ldr	r3, [pc, #104]	; (8023450 <MotherboardTick+0x198>)
 80233e8:	9300      	str	r3, [sp, #0]
 80233ea:	4b18      	ldr	r3, [pc, #96]	; (802344c <MotherboardTick+0x194>)
 80233ec:	491c      	ldr	r1, [pc, #112]	; (8023460 <MotherboardTick+0x1a8>)
 80233ee:	f7ff fab9 	bl	8022964 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 80233f2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80233f6:	4619      	mov	r1, r3
 80233f8:	4812      	ldr	r0, [pc, #72]	; (8023444 <MotherboardTick+0x18c>)
 80233fa:	f7fe fcad 	bl	8021d58 <_ZN13HeadInterface4SendERK8Responce>
			break;
 80233fe:	bf00      	nop
		}
	}

	if (mbctx.Body.HasResponce()) {
 8023400:	4815      	ldr	r0, [pc, #84]	; (8023458 <MotherboardTick+0x1a0>)
 8023402:	f7fd ff23 	bl	802124c <_ZNK11QueueSender11HasResponceEv>
 8023406:	4603      	mov	r3, r0
 8023408:	2b00      	cmp	r3, #0
 802340a:	d00d      	beq.n	8023428 <MotherboardTick+0x170>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 802340c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023410:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023414:	4910      	ldr	r1, [pc, #64]	; (8023458 <MotherboardTick+0x1a0>)
 8023416:	4618      	mov	r0, r3
 8023418:	f7fd ff7a 	bl	8021310 <_ZN11QueueSender11GetResponceEv>
 802341c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8023420:	4619      	mov	r1, r3
 8023422:	4808      	ldr	r0, [pc, #32]	; (8023444 <MotherboardTick+0x18c>)
 8023424:	f7fe fc98 	bl	8021d58 <_ZN13HeadInterface4SendERK8Responce>
	}

	mbctx.Body.ProcessPriorityRequest();
 8023428:	480b      	ldr	r0, [pc, #44]	; (8023458 <MotherboardTick+0x1a0>)
 802342a:	f7fd ffa5 	bl	8021378 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 802342e:	480a      	ldr	r0, [pc, #40]	; (8023458 <MotherboardTick+0x1a0>)
 8023430:	f7fe f8be 	bl	80215b0 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 8023434:	2300      	movs	r3, #0
}
 8023436:	4618      	mov	r0, r3
 8023438:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 802343c:	46bd      	mov	sp, r7
 802343e:	bd80      	pop	{r7, pc}
 8023440:	240244cc 	.word	0x240244cc
 8023444:	240001d0 	.word	0x240001d0
 8023448:	24023340 	.word	0x24023340
 802344c:	24023310 	.word	0x24023310
 8023450:	24023370 	.word	0x24023370
 8023454:	24001b18 	.word	0x24001b18
 8023458:	24001b1c 	.word	0x24001b1c
 802345c:	24024510 	.word	0x24024510
 8023460:	240244c8 	.word	0x240244c8

08023464 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8023464:	b580      	push	{r7, lr}
 8023466:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 8023468:	4b06      	ldr	r3, [pc, #24]	; (8023484 <MotherboardOnStrobe+0x20>)
 802346a:	781b      	ldrb	r3, [r3, #0]
 802346c:	2b00      	cmp	r3, #0
 802346e:	d003      	beq.n	8023478 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 8023470:	4b04      	ldr	r3, [pc, #16]	; (8023484 <MotherboardOnStrobe+0x20>)
 8023472:	2200      	movs	r2, #0
 8023474:	701a      	strb	r2, [r3, #0]
		return;
 8023476:	e003      	b.n	8023480 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 8023478:	4903      	ldr	r1, [pc, #12]	; (8023488 <MotherboardOnStrobe+0x24>)
 802347a:	4804      	ldr	r0, [pc, #16]	; (802348c <MotherboardOnStrobe+0x28>)
 802347c:	f7fe fef9 	bl	8022272 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 8023480:	bd80      	pop	{r7, pc}
 8023482:	bf00      	nop
 8023484:	24000000 	.word	0x24000000
 8023488:	24023370 	.word	0x24023370
 802348c:	240244cc 	.word	0x240244cc

08023490 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8023490:	b580      	push	{r7, lr}
 8023492:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 8023494:	4802      	ldr	r0, [pc, #8]	; (80234a0 <MotherboardOnBodyRecieveComplete+0x10>)
 8023496:	f7fe fbad 	bl	8021bf4 <_ZN11QueueSender16ProcessResponcesEv>
}
 802349a:	bf00      	nop
 802349c:	bd80      	pop	{r7, pc}
 802349e:	bf00      	nop
 80234a0:	24001b1c 	.word	0x24001b1c

080234a4 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80234a4:	b580      	push	{r7, lr}
 80234a6:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 80234a8:	4802      	ldr	r0, [pc, #8]	; (80234b4 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 80234aa:	f7fe fd11 	bl	8021ed0 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80234ae:	bf00      	nop
 80234b0:	bd80      	pop	{r7, pc}
 80234b2:	bf00      	nop
 80234b4:	240001d0 	.word	0x240001d0

080234b8 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80234b8:	b580      	push	{r7, lr}
 80234ba:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80234bc:	4802      	ldr	r0, [pc, #8]	; (80234c8 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80234be:	f7fe fd07 	bl	8021ed0 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80234c2:	bf00      	nop
 80234c4:	bd80      	pop	{r7, pc}
 80234c6:	bf00      	nop
 80234c8:	24000e74 	.word	0x24000e74

080234cc <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80234cc:	b580      	push	{r7, lr}
 80234ce:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 80234d0:	4802      	ldr	r0, [pc, #8]	; (80234dc <MotherboardOnHeadServiceTransmitComplete+0x10>)
 80234d2:	f7fe fcef 	bl	8021eb4 <_ZN13HeadInterface14FinishTransmitEv>
}
 80234d6:	bf00      	nop
 80234d8:	bd80      	pop	{r7, pc}
 80234da:	bf00      	nop
 80234dc:	240001d0 	.word	0x240001d0

080234e0 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 80234e0:	b580      	push	{r7, lr}
 80234e2:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 80234e4:	4802      	ldr	r0, [pc, #8]	; (80234f0 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 80234e6:	f7fe fce5 	bl	8021eb4 <_ZN13HeadInterface14FinishTransmitEv>
}
 80234ea:	bf00      	nop
 80234ec:	bd80      	pop	{r7, pc}
 80234ee:	bf00      	nop
 80234f0:	24000e74 	.word	0x24000e74

080234f4 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80234f4:	b580      	push	{r7, lr}
 80234f6:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 80234f8:	4802      	ldr	r0, [pc, #8]	; (8023504 <MotherboardOnBodyTransmitComplete+0x10>)
 80234fa:	f7fe fb85 	bl	8021c08 <_ZN11QueueSender14FinishTransmitEv>
}
 80234fe:	bf00      	nop
 8023500:	bd80      	pop	{r7, pc}
 8023502:	bf00      	nop
 8023504:	24001b1c 	.word	0x24001b1c

08023508 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 8023508:	b580      	push	{r7, lr}
 802350a:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 802350c:	4802      	ldr	r0, [pc, #8]	; (8023518 <MotherboardOnBodyTimerTick+0x10>)
 802350e:	f7fd feb1 	bl	8021274 <_ZN11QueueSender9TickTimerEv>
}
 8023512:	bf00      	nop
 8023514:	bd80      	pop	{r7, pc}
 8023516:	bf00      	nop
 8023518:	24001b1c 	.word	0x24001b1c

0802351c <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 802351c:	b480      	push	{r7}
 802351e:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8023520:	4b05      	ldr	r3, [pc, #20]	; (8023538 <MotherboardOnImuTimerTick+0x1c>)
 8023522:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023526:	2201      	movs	r2, #1
 8023528:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
}
 802352c:	bf00      	nop
 802352e:	46bd      	mov	sp, r7
 8023530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023534:	4770      	bx	lr
 8023536:	bf00      	nop
 8023538:	240001d0 	.word	0x240001d0

0802353c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 802353c:	b580      	push	{r7, lr}
 802353e:	b082      	sub	sp, #8
 8023540:	af00      	add	r7, sp, #0
 8023542:	6078      	str	r0, [r7, #4]
 8023544:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	681b      	ldr	r3, [r3, #0]
 802354a:	2b0a      	cmp	r3, #10
 802354c:	d105      	bne.n	802355a <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 802354e:	4b18      	ldr	r3, [pc, #96]	; (80235b0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 8023550:	4a18      	ldr	r2, [pc, #96]	; (80235b4 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 8023552:	2142      	movs	r1, #66	; 0x42
 8023554:	4818      	ldr	r0, [pc, #96]	; (80235b8 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 8023556:	f018 fbf7 	bl	803bd48 <__assert_func>
		Buffer[Head] = rhs;
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	f103 020c 	add.w	r2, r3, #12
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	685b      	ldr	r3, [r3, #4]
 8023564:	4619      	mov	r1, r3
 8023566:	4610      	mov	r0, r2
 8023568:	f000 fc07 	bl	8023d7a <_ZNSt5arrayI8ResponceLj10EEixEj>
 802356c:	4602      	mov	r2, r0
 802356e:	683b      	ldr	r3, [r7, #0]
 8023570:	4610      	mov	r0, r2
 8023572:	4619      	mov	r1, r3
 8023574:	f44f 7384 	mov.w	r3, #264	; 0x108
 8023578:	461a      	mov	r2, r3
 802357a:	f018 fc4f 	bl	803be1c <memcpy>
		Head = (Head + 1) % Capacity;
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	685b      	ldr	r3, [r3, #4]
 8023582:	1c59      	adds	r1, r3, #1
 8023584:	4b0d      	ldr	r3, [pc, #52]	; (80235bc <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 8023586:	fba3 2301 	umull	r2, r3, r3, r1
 802358a:	08da      	lsrs	r2, r3, #3
 802358c:	4613      	mov	r3, r2
 802358e:	009b      	lsls	r3, r3, #2
 8023590:	4413      	add	r3, r2
 8023592:	005b      	lsls	r3, r3, #1
 8023594:	1aca      	subs	r2, r1, r3
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	605a      	str	r2, [r3, #4]
		Size++;
 802359a:	687b      	ldr	r3, [r7, #4]
 802359c:	681b      	ldr	r3, [r3, #0]
 802359e:	1c5a      	adds	r2, r3, #1
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	601a      	str	r2, [r3, #0]
		return true;
 80235a4:	2301      	movs	r3, #1
	}
 80235a6:	4618      	mov	r0, r3
 80235a8:	3708      	adds	r7, #8
 80235aa:	46bd      	mov	sp, r7
 80235ac:	bd80      	pop	{r7, pc}
 80235ae:	bf00      	nop
 80235b0:	0803da9c 	.word	0x0803da9c
 80235b4:	0803dab0 	.word	0x0803dab0
 80235b8:	0803cf9c 	.word	0x0803cf9c
 80235bc:	cccccccd 	.word	0xcccccccd

080235c0 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 80235c0:	b480      	push	{r7}
 80235c2:	b083      	sub	sp, #12
 80235c4:	af00      	add	r7, sp, #0
 80235c6:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	bf0c      	ite	eq
 80235d0:	2301      	moveq	r3, #1
 80235d2:	2300      	movne	r3, #0
 80235d4:	b2db      	uxtb	r3, r3
	}
 80235d6:	4618      	mov	r0, r3
 80235d8:	370c      	adds	r7, #12
 80235da:	46bd      	mov	sp, r7
 80235dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e0:	4770      	bx	lr
	...

080235e4 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv>:
	T& Front() {
 80235e4:	b580      	push	{r7, lr}
 80235e6:	b082      	sub	sp, #8
 80235e8:	af00      	add	r7, sp, #0
 80235ea:	6078      	str	r0, [r7, #4]
		assert(Size);
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d105      	bne.n	8023600 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 80235f4:	4b09      	ldr	r3, [pc, #36]	; (802361c <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 80235f6:	4a0a      	ldr	r2, [pc, #40]	; (8023620 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 80235f8:	2157      	movs	r1, #87	; 0x57
 80235fa:	480a      	ldr	r0, [pc, #40]	; (8023624 <_ZN10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 80235fc:	f018 fba4 	bl	803bd48 <__assert_func>
		return Buffer[Tail];
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	f103 020c 	add.w	r2, r3, #12
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	689b      	ldr	r3, [r3, #8]
 802360a:	4619      	mov	r1, r3
 802360c:	4610      	mov	r0, r2
 802360e:	f000 fbb4 	bl	8023d7a <_ZNSt5arrayI8ResponceLj10EEixEj>
 8023612:	4603      	mov	r3, r0
	}
 8023614:	4618      	mov	r0, r3
 8023616:	3708      	adds	r7, #8
 8023618:	46bd      	mov	sp, r7
 802361a:	bd80      	pop	{r7, pc}
 802361c:	0803db10 	.word	0x0803db10
 8023620:	0803db18 	.word	0x0803db18
 8023624:	0803cf9c 	.word	0x0803cf9c

08023628 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 8023628:	b580      	push	{r7, lr}
 802362a:	b082      	sub	sp, #8
 802362c:	af00      	add	r7, sp, #0
 802362e:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023630:	687b      	ldr	r3, [r7, #4]
 8023632:	681b      	ldr	r3, [r3, #0]
 8023634:	2b00      	cmp	r3, #0
 8023636:	d105      	bne.n	8023644 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 8023638:	4b0e      	ldr	r3, [pc, #56]	; (8023674 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 802363a:	4a0f      	ldr	r2, [pc, #60]	; (8023678 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 802363c:	214c      	movs	r1, #76	; 0x4c
 802363e:	480f      	ldr	r0, [pc, #60]	; (802367c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 8023640:	f018 fb82 	bl	803bd48 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	689b      	ldr	r3, [r3, #8]
 8023648:	1c59      	adds	r1, r3, #1
 802364a:	4b0d      	ldr	r3, [pc, #52]	; (8023680 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 802364c:	fba3 2301 	umull	r2, r3, r3, r1
 8023650:	08da      	lsrs	r2, r3, #3
 8023652:	4613      	mov	r3, r2
 8023654:	009b      	lsls	r3, r3, #2
 8023656:	4413      	add	r3, r2
 8023658:	005b      	lsls	r3, r3, #1
 802365a:	1aca      	subs	r2, r1, r3
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	609a      	str	r2, [r3, #8]
		Size--;
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	681b      	ldr	r3, [r3, #0]
 8023664:	1e5a      	subs	r2, r3, #1
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	601a      	str	r2, [r3, #0]
	}
 802366a:	bf00      	nop
 802366c:	4618      	mov	r0, r3
 802366e:	3708      	adds	r7, #8
 8023670:	46bd      	mov	sp, r7
 8023672:	bd80      	pop	{r7, pc}
 8023674:	0803db6c 	.word	0x0803db6c
 8023678:	0803db78 	.word	0x0803db78
 802367c:	0803cf9c 	.word	0x0803cf9c
 8023680:	cccccccd 	.word	0xcccccccd

08023684 <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 8023684:	b580      	push	{r7, lr}
 8023686:	b082      	sub	sp, #8
 8023688:	af00      	add	r7, sp, #0
 802368a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	4618      	mov	r0, r3
 8023690:	f000 fb82 	bl	8023d98 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 8023694:	4603      	mov	r3, r0
 8023696:	4618      	mov	r0, r3
 8023698:	3708      	adds	r7, #8
 802369a:	46bd      	mov	sp, r7
 802369c:	bd80      	pop	{r7, pc}

0802369e <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 802369e:	b480      	push	{r7}
 80236a0:	b083      	sub	sp, #12
 80236a2:	af00      	add	r7, sp, #0
 80236a4:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	bf0c      	ite	eq
 80236ae:	2301      	moveq	r3, #1
 80236b0:	2300      	movne	r3, #0
 80236b2:	b2db      	uxtb	r3, r3
	}
 80236b4:	4618      	mov	r0, r3
 80236b6:	370c      	adds	r7, #12
 80236b8:	46bd      	mov	sp, r7
 80236ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236be:	4770      	bx	lr

080236c0 <_ZN10FixedQueueI7RequestLj500EE5FrontEv>:
	T& Front() {
 80236c0:	b580      	push	{r7, lr}
 80236c2:	b082      	sub	sp, #8
 80236c4:	af00      	add	r7, sp, #0
 80236c6:	6078      	str	r0, [r7, #4]
		assert(Size);
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d105      	bne.n	80236dc <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 80236d0:	4b09      	ldr	r3, [pc, #36]	; (80236f8 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 80236d2:	4a0a      	ldr	r2, [pc, #40]	; (80236fc <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 80236d4:	2157      	movs	r1, #87	; 0x57
 80236d6:	480a      	ldr	r0, [pc, #40]	; (8023700 <_ZN10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 80236d8:	f018 fb36 	bl	803bd48 <__assert_func>
		return Buffer[Tail];
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	f103 020c 	add.w	r2, r3, #12
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	689b      	ldr	r3, [r3, #8]
 80236e6:	4619      	mov	r1, r3
 80236e8:	4610      	mov	r0, r2
 80236ea:	f000 fb60 	bl	8023dae <_ZNSt5arrayI7RequestLj500EEixEj>
 80236ee:	4603      	mov	r3, r0
	}
 80236f0:	4618      	mov	r0, r3
 80236f2:	3708      	adds	r7, #8
 80236f4:	46bd      	mov	sp, r7
 80236f6:	bd80      	pop	{r7, pc}
 80236f8:	0803db10 	.word	0x0803db10
 80236fc:	0803dbcc 	.word	0x0803dbcc
 8023700:	0803cf9c 	.word	0x0803cf9c

08023704 <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 8023704:	b580      	push	{r7, lr}
 8023706:	b082      	sub	sp, #8
 8023708:	af00      	add	r7, sp, #0
 802370a:	6078      	str	r0, [r7, #4]
 802370c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 802370e:	687b      	ldr	r3, [r7, #4]
 8023710:	6839      	ldr	r1, [r7, #0]
 8023712:	4618      	mov	r0, r3
 8023714:	f000 f84e 	bl	80237b4 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023718:	4603      	mov	r3, r0
 802371a:	4618      	mov	r0, r3
 802371c:	3708      	adds	r7, #8
 802371e:	46bd      	mov	sp, r7
 8023720:	bd80      	pop	{r7, pc}
	...

08023724 <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 8023724:	b580      	push	{r7, lr}
 8023726:	b082      	sub	sp, #8
 8023728:	af00      	add	r7, sp, #0
 802372a:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	2b00      	cmp	r3, #0
 8023732:	d105      	bne.n	8023740 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 8023734:	4b0e      	ldr	r3, [pc, #56]	; (8023770 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 8023736:	4a0f      	ldr	r2, [pc, #60]	; (8023774 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 8023738:	214c      	movs	r1, #76	; 0x4c
 802373a:	480f      	ldr	r0, [pc, #60]	; (8023778 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 802373c:	f018 fb04 	bl	803bd48 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	689b      	ldr	r3, [r3, #8]
 8023744:	1c5a      	adds	r2, r3, #1
 8023746:	4b0d      	ldr	r3, [pc, #52]	; (802377c <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 8023748:	fba3 1302 	umull	r1, r3, r3, r2
 802374c:	095b      	lsrs	r3, r3, #5
 802374e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8023752:	fb01 f303 	mul.w	r3, r1, r3
 8023756:	1ad3      	subs	r3, r2, r3
 8023758:	687a      	ldr	r2, [r7, #4]
 802375a:	6093      	str	r3, [r2, #8]
		Size--;
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	1e5a      	subs	r2, r3, #1
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	601a      	str	r2, [r3, #0]
	}
 8023766:	bf00      	nop
 8023768:	4618      	mov	r0, r3
 802376a:	3708      	adds	r7, #8
 802376c:	46bd      	mov	sp, r7
 802376e:	bd80      	pop	{r7, pc}
 8023770:	0803db6c 	.word	0x0803db6c
 8023774:	0803dc20 	.word	0x0803dc20
 8023778:	0803cf9c 	.word	0x0803cf9c
 802377c:	10624dd3 	.word	0x10624dd3

08023780 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>:
	void Clear() {
 8023780:	b580      	push	{r7, lr}
 8023782:	b082      	sub	sp, #8
 8023784:	af00      	add	r7, sp, #0
 8023786:	6078      	str	r0, [r7, #4]
		Buffer = std::array<T, Capacity> { };
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	330c      	adds	r3, #12
 802378c:	4a08      	ldr	r2, [pc, #32]	; (80237b0 <_ZN10FixedQueueI7RequestLj500EE5ClearEv+0x30>)
 802378e:	2100      	movs	r1, #0
 8023790:	4618      	mov	r0, r3
 8023792:	f018 fb6b 	bl	803be6c <memset>
		Size = 0;
 8023796:	687b      	ldr	r3, [r7, #4]
 8023798:	2200      	movs	r2, #0
 802379a:	601a      	str	r2, [r3, #0]
		Head = 0;
 802379c:	687b      	ldr	r3, [r7, #4]
 802379e:	2200      	movs	r2, #0
 80237a0:	605a      	str	r2, [r3, #4]
		Tail = 0;
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	2200      	movs	r2, #0
 80237a6:	609a      	str	r2, [r3, #8]
	}
 80237a8:	bf00      	nop
 80237aa:	3708      	adds	r7, #8
 80237ac:	46bd      	mov	sp, r7
 80237ae:	bd80      	pop	{r7, pc}
 80237b0:	00020b70 	.word	0x00020b70

080237b4 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80237b4:	b480      	push	{r7}
 80237b6:	b083      	sub	sp, #12
 80237b8:	af00      	add	r7, sp, #0
 80237ba:	6078      	str	r0, [r7, #4]
 80237bc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80237be:	687a      	ldr	r2, [r7, #4]
 80237c0:	683b      	ldr	r3, [r7, #0]
 80237c2:	4413      	add	r3, r2
 80237c4:	4618      	mov	r0, r3
 80237c6:	370c      	adds	r7, #12
 80237c8:	46bd      	mov	sp, r7
 80237ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ce:	4770      	bx	lr

080237d0 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>:
	bool Full() const {
 80237d0:	b480      	push	{r7}
 80237d2:	b083      	sub	sp, #12
 80237d4:	af00      	add	r7, sp, #0
 80237d6:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	681b      	ldr	r3, [r3, #0]
 80237dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80237e0:	bf0c      	ite	eq
 80237e2:	2301      	moveq	r3, #1
 80237e4:	2300      	movne	r3, #0
 80237e6:	b2db      	uxtb	r3, r3
	}
 80237e8:	4618      	mov	r0, r3
 80237ea:	370c      	adds	r7, #12
 80237ec:	46bd      	mov	sp, r7
 80237ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237f2:	4770      	bx	lr

080237f4 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T &rhs) {
 80237f4:	b580      	push	{r7, lr}
 80237f6:	b082      	sub	sp, #8
 80237f8:	af00      	add	r7, sp, #0
 80237fa:	6078      	str	r0, [r7, #4]
 80237fc:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	681b      	ldr	r3, [r3, #0]
 8023802:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023806:	d105      	bne.n	8023814 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 8023808:	4b17      	ldr	r3, [pc, #92]	; (8023868 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 802380a:	4a18      	ldr	r2, [pc, #96]	; (802386c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 802380c:	2142      	movs	r1, #66	; 0x42
 802380e:	4818      	ldr	r0, [pc, #96]	; (8023870 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 8023810:	f018 fa9a 	bl	803bd48 <__assert_func>
		Buffer[Head] = rhs;
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	f103 020c 	add.w	r2, r3, #12
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	685b      	ldr	r3, [r3, #4]
 802381e:	4619      	mov	r1, r3
 8023820:	4610      	mov	r0, r2
 8023822:	f000 fac4 	bl	8023dae <_ZNSt5arrayI7RequestLj500EEixEj>
 8023826:	4602      	mov	r2, r0
 8023828:	683b      	ldr	r3, [r7, #0]
 802382a:	4610      	mov	r0, r2
 802382c:	4619      	mov	r1, r3
 802382e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023832:	461a      	mov	r2, r3
 8023834:	f018 faf2 	bl	803be1c <memcpy>
		Head = (Head + 1) % Capacity;
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	685b      	ldr	r3, [r3, #4]
 802383c:	1c5a      	adds	r2, r3, #1
 802383e:	4b0d      	ldr	r3, [pc, #52]	; (8023874 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 8023840:	fba3 1302 	umull	r1, r3, r3, r2
 8023844:	095b      	lsrs	r3, r3, #5
 8023846:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802384a:	fb01 f303 	mul.w	r3, r1, r3
 802384e:	1ad3      	subs	r3, r2, r3
 8023850:	687a      	ldr	r2, [r7, #4]
 8023852:	6053      	str	r3, [r2, #4]
		Size++;
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	1c5a      	adds	r2, r3, #1
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	601a      	str	r2, [r3, #0]
		return true;
 802385e:	2301      	movs	r3, #1
	}
 8023860:	4618      	mov	r0, r3
 8023862:	3708      	adds	r7, #8
 8023864:	46bd      	mov	sp, r7
 8023866:	bd80      	pop	{r7, pc}
 8023868:	0803da9c 	.word	0x0803da9c
 802386c:	0803dc74 	.word	0x0803dc74
 8023870:	0803cf9c 	.word	0x0803cf9c
 8023874:	10624dd3 	.word	0x10624dd3

08023878 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 8023878:	b480      	push	{r7}
 802387a:	b083      	sub	sp, #12
 802387c:	af00      	add	r7, sp, #0
 802387e:	6078      	str	r0, [r7, #4]
		return Size;
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	681b      	ldr	r3, [r3, #0]
	}
 8023884:	4618      	mov	r0, r3
 8023886:	370c      	adds	r7, #12
 8023888:	46bd      	mov	sp, r7
 802388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802388e:	4770      	bx	lr

08023890 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023890:	b480      	push	{r7}
 8023892:	b083      	sub	sp, #12
 8023894:	af00      	add	r7, sp, #0
 8023896:	6078      	str	r0, [r7, #4]
		return Size;
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	681b      	ldr	r3, [r3, #0]
	}
 802389c:	4618      	mov	r0, r3
 802389e:	370c      	adds	r7, #12
 80238a0:	46bd      	mov	sp, r7
 80238a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a6:	4770      	bx	lr

080238a8 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 80238a8:	b480      	push	{r7}
 80238aa:	b083      	sub	sp, #12
 80238ac:	af00      	add	r7, sp, #0
 80238ae:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	681b      	ldr	r3, [r3, #0]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	bf0c      	ite	eq
 80238b8:	2301      	moveq	r3, #1
 80238ba:	2300      	movne	r3, #0
 80238bc:	b2db      	uxtb	r3, r3
	}
 80238be:	4618      	mov	r0, r3
 80238c0:	370c      	adds	r7, #12
 80238c2:	46bd      	mov	sp, r7
 80238c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238c8:	4770      	bx	lr

080238ca <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80238ca:	b580      	push	{r7, lr}
 80238cc:	b082      	sub	sp, #8
 80238ce:	af00      	add	r7, sp, #0
 80238d0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80238d2:	687b      	ldr	r3, [r7, #4]
 80238d4:	4618      	mov	r0, r3
 80238d6:	f000 fa5f 	bl	8023d98 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80238da:	4603      	mov	r3, r0
 80238dc:	4618      	mov	r0, r3
 80238de:	3708      	adds	r7, #8
 80238e0:	46bd      	mov	sp, r7
 80238e2:	bd80      	pop	{r7, pc}

080238e4 <_ZN10FixedQueueI7RequestLj10EE5FrontEv>:
	T& Front() {
 80238e4:	b580      	push	{r7, lr}
 80238e6:	b082      	sub	sp, #8
 80238e8:	af00      	add	r7, sp, #0
 80238ea:	6078      	str	r0, [r7, #4]
		assert(Size);
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d105      	bne.n	8023900 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 80238f4:	4b09      	ldr	r3, [pc, #36]	; (802391c <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 80238f6:	4a0a      	ldr	r2, [pc, #40]	; (8023920 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 80238f8:	2157      	movs	r1, #87	; 0x57
 80238fa:	480a      	ldr	r0, [pc, #40]	; (8023924 <_ZN10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 80238fc:	f018 fa24 	bl	803bd48 <__assert_func>
		return Buffer[Tail];
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	f103 020c 	add.w	r2, r3, #12
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	689b      	ldr	r3, [r3, #8]
 802390a:	4619      	mov	r1, r3
 802390c:	4610      	mov	r0, r2
 802390e:	f000 fa5d 	bl	8023dcc <_ZNSt5arrayI7RequestLj10EEixEj>
 8023912:	4603      	mov	r3, r0
	}
 8023914:	4618      	mov	r0, r3
 8023916:	3708      	adds	r7, #8
 8023918:	46bd      	mov	sp, r7
 802391a:	bd80      	pop	{r7, pc}
 802391c:	0803db10 	.word	0x0803db10
 8023920:	0803dcd4 	.word	0x0803dcd4
 8023924:	0803cf9c 	.word	0x0803cf9c

08023928 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 8023928:	b580      	push	{r7, lr}
 802392a:	b082      	sub	sp, #8
 802392c:	af00      	add	r7, sp, #0
 802392e:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	681b      	ldr	r3, [r3, #0]
 8023934:	2b00      	cmp	r3, #0
 8023936:	d105      	bne.n	8023944 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 8023938:	4b0e      	ldr	r3, [pc, #56]	; (8023974 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 802393a:	4a0f      	ldr	r2, [pc, #60]	; (8023978 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 802393c:	214c      	movs	r1, #76	; 0x4c
 802393e:	480f      	ldr	r0, [pc, #60]	; (802397c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 8023940:	f018 fa02 	bl	803bd48 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	689b      	ldr	r3, [r3, #8]
 8023948:	1c59      	adds	r1, r3, #1
 802394a:	4b0d      	ldr	r3, [pc, #52]	; (8023980 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 802394c:	fba3 2301 	umull	r2, r3, r3, r1
 8023950:	08da      	lsrs	r2, r3, #3
 8023952:	4613      	mov	r3, r2
 8023954:	009b      	lsls	r3, r3, #2
 8023956:	4413      	add	r3, r2
 8023958:	005b      	lsls	r3, r3, #1
 802395a:	1aca      	subs	r2, r1, r3
 802395c:	687b      	ldr	r3, [r7, #4]
 802395e:	609a      	str	r2, [r3, #8]
		Size--;
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	681b      	ldr	r3, [r3, #0]
 8023964:	1e5a      	subs	r2, r3, #1
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	601a      	str	r2, [r3, #0]
	}
 802396a:	bf00      	nop
 802396c:	4618      	mov	r0, r3
 802396e:	3708      	adds	r7, #8
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}
 8023974:	0803db6c 	.word	0x0803db6c
 8023978:	0803dd28 	.word	0x0803dd28
 802397c:	0803cf9c 	.word	0x0803cf9c
 8023980:	cccccccd 	.word	0xcccccccd

08023984 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023984:	b480      	push	{r7}
 8023986:	b083      	sub	sp, #12
 8023988:	af00      	add	r7, sp, #0
 802398a:	6078      	str	r0, [r7, #4]
		return Size;
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	681b      	ldr	r3, [r3, #0]
	}
 8023990:	4618      	mov	r0, r3
 8023992:	370c      	adds	r7, #12
 8023994:	46bd      	mov	sp, r7
 8023996:	f85d 7b04 	ldr.w	r7, [sp], #4
 802399a:	4770      	bx	lr

0802399c <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 802399c:	b580      	push	{r7, lr}
 802399e:	b082      	sub	sp, #8
 80239a0:	af00      	add	r7, sp, #0
 80239a2:	6078      	str	r0, [r7, #4]
 80239a4:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	2b0a      	cmp	r3, #10
 80239ac:	d105      	bne.n	80239ba <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 80239ae:	4b18      	ldr	r3, [pc, #96]	; (8023a10 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 80239b0:	4a18      	ldr	r2, [pc, #96]	; (8023a14 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 80239b2:	2142      	movs	r1, #66	; 0x42
 80239b4:	4818      	ldr	r0, [pc, #96]	; (8023a18 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 80239b6:	f018 f9c7 	bl	803bd48 <__assert_func>
		Buffer[Head] = rhs;
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	f103 020c 	add.w	r2, r3, #12
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	685b      	ldr	r3, [r3, #4]
 80239c4:	4619      	mov	r1, r3
 80239c6:	4610      	mov	r0, r2
 80239c8:	f000 fa00 	bl	8023dcc <_ZNSt5arrayI7RequestLj10EEixEj>
 80239cc:	4602      	mov	r2, r0
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	4610      	mov	r0, r2
 80239d2:	4619      	mov	r1, r3
 80239d4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80239d8:	461a      	mov	r2, r3
 80239da:	f018 fa1f 	bl	803be1c <memcpy>
		Head = (Head + 1) % Capacity;
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	685b      	ldr	r3, [r3, #4]
 80239e2:	1c59      	adds	r1, r3, #1
 80239e4:	4b0d      	ldr	r3, [pc, #52]	; (8023a1c <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 80239e6:	fba3 2301 	umull	r2, r3, r3, r1
 80239ea:	08da      	lsrs	r2, r3, #3
 80239ec:	4613      	mov	r3, r2
 80239ee:	009b      	lsls	r3, r3, #2
 80239f0:	4413      	add	r3, r2
 80239f2:	005b      	lsls	r3, r3, #1
 80239f4:	1aca      	subs	r2, r1, r3
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	605a      	str	r2, [r3, #4]
		Size++;
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	681b      	ldr	r3, [r3, #0]
 80239fe:	1c5a      	adds	r2, r3, #1
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	601a      	str	r2, [r3, #0]
		return true;
 8023a04:	2301      	movs	r3, #1
	}
 8023a06:	4618      	mov	r0, r3
 8023a08:	3708      	adds	r7, #8
 8023a0a:	46bd      	mov	sp, r7
 8023a0c:	bd80      	pop	{r7, pc}
 8023a0e:	bf00      	nop
 8023a10:	0803da9c 	.word	0x0803da9c
 8023a14:	0803dd7c 	.word	0x0803dd7c
 8023a18:	0803cf9c 	.word	0x0803cf9c
 8023a1c:	cccccccd 	.word	0xcccccccd

08023a20 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */
      deque&
      operator=(initializer_list<value_type> __l)
 8023a20:	b5b0      	push	{r4, r5, r7, lr}
 8023a22:	b086      	sub	sp, #24
 8023a24:	af00      	add	r7, sp, #0
 8023a26:	60f8      	str	r0, [r7, #12]
 8023a28:	1d3b      	adds	r3, r7, #4
 8023a2a:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_assign_aux(__l.begin(), __l.end(),
 8023a2e:	1d3b      	adds	r3, r7, #4
 8023a30:	4618      	mov	r0, r3
 8023a32:	f000 f9da 	bl	8023dea <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023a36:	4604      	mov	r4, r0
 8023a38:	1d3b      	adds	r3, r7, #4
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	f000 f9e1 	bl	8023e02 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8023a40:	4602      	mov	r2, r0
 8023a42:	462b      	mov	r3, r5
 8023a44:	4621      	mov	r1, r4
 8023a46:	68f8      	ldr	r0, [r7, #12]
 8023a48:	f000 f9f0 	bl	8023e2c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
		      random_access_iterator_tag());
	return *this;
 8023a4c:	68fb      	ldr	r3, [r7, #12]
      }
 8023a4e:	4618      	mov	r0, r3
 8023a50:	3718      	adds	r7, #24
 8023a52:	46bd      	mov	sp, r7
 8023a54:	bdb0      	pop	{r4, r5, r7, pc}

08023a56 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023a56:	b580      	push	{r7, lr}
 8023a58:	b082      	sub	sp, #8
 8023a5a:	af00      	add	r7, sp, #0
 8023a5c:	6078      	str	r0, [r7, #4]
 8023a5e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8023a60:	687b      	ldr	r3, [r7, #4]
 8023a62:	689a      	ldr	r2, [r3, #8]
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	68db      	ldr	r3, [r3, #12]
 8023a68:	429a      	cmp	r2, r3
 8023a6a:	d00e      	beq.n	8023a8a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023a6c:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023a72:	3b14      	subs	r3, #20
 8023a74:	683a      	ldr	r2, [r7, #0]
 8023a76:	4619      	mov	r1, r3
 8023a78:	f000 fa3d 	bl	8023ef6 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	689b      	ldr	r3, [r3, #8]
 8023a80:	f1a3 0214 	sub.w	r2, r3, #20
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023a88:	e003      	b.n	8023a92 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023a8a:	6839      	ldr	r1, [r7, #0]
 8023a8c:	6878      	ldr	r0, [r7, #4]
 8023a8e:	f000 fa45 	bl	8023f1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023a92:	bf00      	nop
 8023a94:	3708      	adds	r7, #8
 8023a96:	46bd      	mov	sp, r7
 8023a98:	bd80      	pop	{r7, pc}

08023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023a9a:	b580      	push	{r7, lr}
 8023a9c:	b082      	sub	sp, #8
 8023a9e:	af00      	add	r7, sp, #0
 8023aa0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	f103 0218 	add.w	r2, r3, #24
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	3308      	adds	r3, #8
 8023aac:	4619      	mov	r1, r3
 8023aae:	4610      	mov	r0, r2
 8023ab0:	f000 fa7a 	bl	8023fa8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023ab4:	4603      	mov	r3, r0
 8023ab6:	4618      	mov	r0, r3
 8023ab8:	3708      	adds	r7, #8
 8023aba:	46bd      	mov	sp, r7
 8023abc:	bd80      	pop	{r7, pc}

08023abe <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023abe:	b580      	push	{r7, lr}
 8023ac0:	b082      	sub	sp, #8
 8023ac2:	af00      	add	r7, sp, #0
 8023ac4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023ace:	429a      	cmp	r2, r3
 8023ad0:	d011      	beq.n	8023af6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023ad2:	687b      	ldr	r3, [r7, #4]
 8023ad4:	699b      	ldr	r3, [r3, #24]
 8023ad6:	f1a3 0214 	sub.w	r2, r3, #20
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	4618      	mov	r0, r3
 8023ae2:	f000 fa8d 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023ae6:	4602      	mov	r2, r0
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	699b      	ldr	r3, [r3, #24]
 8023aec:	4619      	mov	r1, r3
 8023aee:	4610      	mov	r0, r2
 8023af0:	f000 fa91 	bl	8024016 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023af4:	e002      	b.n	8023afc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023af6:	6878      	ldr	r0, [r7, #4]
 8023af8:	f000 fa9a 	bl	8024030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8023afc:	bf00      	nop
 8023afe:	3708      	adds	r7, #8
 8023b00:	46bd      	mov	sp, r7
 8023b02:	bd80      	pop	{r7, pc}

08023b04 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023b04:	b580      	push	{r7, lr}
 8023b06:	b082      	sub	sp, #8
 8023b08:	af00      	add	r7, sp, #0
 8023b0a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023b0c:	687b      	ldr	r3, [r7, #4]
 8023b0e:	f103 0218 	add.w	r2, r3, #24
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	3308      	adds	r3, #8
 8023b16:	4619      	mov	r1, r3
 8023b18:	4610      	mov	r0, r2
 8023b1a:	f000 fab3 	bl	8024084 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023b1e:	4603      	mov	r3, r0
 8023b20:	4618      	mov	r0, r3
 8023b22:	3708      	adds	r7, #8
 8023b24:	46bd      	mov	sp, r7
 8023b26:	bd80      	pop	{r7, pc}

08023b28 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023b28:	b580      	push	{r7, lr}
 8023b2a:	b082      	sub	sp, #8
 8023b2c:	af00      	add	r7, sp, #0
 8023b2e:	6078      	str	r0, [r7, #4]
 8023b30:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	3308      	adds	r3, #8
 8023b36:	683a      	ldr	r2, [r7, #0]
 8023b38:	4611      	mov	r1, r2
 8023b3a:	4618      	mov	r0, r3
 8023b3c:	f000 fab6 	bl	80240ac <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023b40:	4603      	mov	r3, r0
      }
 8023b42:	4618      	mov	r0, r3
 8023b44:	3708      	adds	r7, #8
 8023b46:	46bd      	mov	sp, r7
 8023b48:	bd80      	pop	{r7, pc}

08023b4a <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8023b4a:	b580      	push	{r7, lr}
 8023b4c:	b082      	sub	sp, #8
 8023b4e:	af00      	add	r7, sp, #0
 8023b50:	6078      	str	r0, [r7, #4]
 8023b52:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	6839      	ldr	r1, [r7, #0]
 8023b58:	4618      	mov	r0, r3
 8023b5a:	f000 fabd 	bl	80240d8 <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023b5e:	bf00      	nop
 8023b60:	3708      	adds	r7, #8
 8023b62:	46bd      	mov	sp, r7
 8023b64:	bd80      	pop	{r7, pc}

08023b66 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023b66:	b580      	push	{r7, lr}
 8023b68:	b082      	sub	sp, #8
 8023b6a:	af00      	add	r7, sp, #0
 8023b6c:	6078      	str	r0, [r7, #4]
	return c.front();
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	4618      	mov	r0, r3
 8023b72:	f000 fad2 	bl	802411a <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023b76:	4603      	mov	r3, r0
      }
 8023b78:	4618      	mov	r0, r3
 8023b7a:	3708      	adds	r7, #8
 8023b7c:	46bd      	mov	sp, r7
 8023b7e:	bd80      	pop	{r7, pc}

08023b80 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023b80:	b580      	push	{r7, lr}
 8023b82:	b082      	sub	sp, #8
 8023b84:	af00      	add	r7, sp, #0
 8023b86:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023b88:	687b      	ldr	r3, [r7, #4]
 8023b8a:	4618      	mov	r0, r3
 8023b8c:	f000 fad9 	bl	8024142 <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023b90:	4603      	mov	r3, r0
 8023b92:	4618      	mov	r0, r3
 8023b94:	3708      	adds	r7, #8
 8023b96:	46bd      	mov	sp, r7
 8023b98:	bd80      	pop	{r7, pc}

08023b9a <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8023b9a:	b580      	push	{r7, lr}
 8023b9c:	b082      	sub	sp, #8
 8023b9e:	af00      	add	r7, sp, #0
 8023ba0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	4618      	mov	r0, r3
 8023ba6:	f000 fade 	bl	8024166 <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023baa:	bf00      	nop
 8023bac:	3708      	adds	r7, #8
 8023bae:	46bd      	mov	sp, r7
 8023bb0:	bd80      	pop	{r7, pc}

08023bb2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023bb2:	b580      	push	{r7, lr}
 8023bb4:	b086      	sub	sp, #24
 8023bb6:	af00      	add	r7, sp, #0
 8023bb8:	6078      	str	r0, [r7, #4]
	return *begin();
 8023bba:	f107 0308 	add.w	r3, r7, #8
 8023bbe:	6879      	ldr	r1, [r7, #4]
 8023bc0:	4618      	mov	r0, r3
 8023bc2:	f000 faf3 	bl	80241ac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023bc6:	f107 0308 	add.w	r3, r7, #8
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f000 fafd 	bl	80241ca <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023bd0:	4603      	mov	r3, r0
      }
 8023bd2:	4618      	mov	r0, r3
 8023bd4:	3718      	adds	r7, #24
 8023bd6:	46bd      	mov	sp, r7
 8023bd8:	bd80      	pop	{r7, pc}

08023bda <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023bda:	b580      	push	{r7, lr}
 8023bdc:	b082      	sub	sp, #8
 8023bde:	af00      	add	r7, sp, #0
 8023be0:	6078      	str	r0, [r7, #4]
 8023be2:	6878      	ldr	r0, [r7, #4]
 8023be4:	f000 fb0d 	bl	8024202 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	4618      	mov	r0, r3
 8023bec:	3708      	adds	r7, #8
 8023bee:	46bd      	mov	sp, r7
 8023bf0:	bd80      	pop	{r7, pc}

08023bf2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023bf2:	b580      	push	{r7, lr}
 8023bf4:	b082      	sub	sp, #8
 8023bf6:	af00      	add	r7, sp, #0
 8023bf8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	f000 faf0 	bl	80241e2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023c02:	2100      	movs	r1, #0
 8023c04:	6878      	ldr	r0, [r7, #4]
 8023c06:	f000 fb08 	bl	802421a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	4618      	mov	r0, r3
 8023c0e:	3708      	adds	r7, #8
 8023c10:	46bd      	mov	sp, r7
 8023c12:	bd80      	pop	{r7, pc}

08023c14 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023c14:	b580      	push	{r7, lr}
 8023c16:	b082      	sub	sp, #8
 8023c18:	af00      	add	r7, sp, #0
 8023c1a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023c1c:	687b      	ldr	r3, [r7, #4]
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	d010      	beq.n	8023c46 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023c2c:	3304      	adds	r3, #4
 8023c2e:	461a      	mov	r2, r3
 8023c30:	6878      	ldr	r0, [r7, #4]
 8023c32:	f000 fb58 	bl	80242e6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	6819      	ldr	r1, [r3, #0]
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	685b      	ldr	r3, [r3, #4]
 8023c3e:	461a      	mov	r2, r3
 8023c40:	6878      	ldr	r0, [r7, #4]
 8023c42:	f000 fb6a 	bl	802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	4618      	mov	r0, r3
 8023c4a:	f7ff ffc6 	bl	8023bda <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023c4e:	687b      	ldr	r3, [r7, #4]
 8023c50:	4618      	mov	r0, r3
 8023c52:	3708      	adds	r7, #8
 8023c54:	46bd      	mov	sp, r7
 8023c56:	bd80      	pop	{r7, pc}

08023c58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023c58:	b580      	push	{r7, lr}
 8023c5a:	b08a      	sub	sp, #40	; 0x28
 8023c5c:	af00      	add	r7, sp, #0
 8023c5e:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023c60:	f107 0308 	add.w	r3, r7, #8
 8023c64:	6879      	ldr	r1, [r7, #4]
 8023c66:	4618      	mov	r0, r3
 8023c68:	f000 fb73 	bl	8024352 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023c6c:	f107 0318 	add.w	r3, r7, #24
 8023c70:	6879      	ldr	r1, [r7, #4]
 8023c72:	4618      	mov	r0, r3
 8023c74:	f000 fb7c 	bl	8024370 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	4618      	mov	r0, r3
 8023c7c:	f000 f9c0 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023c80:	4603      	mov	r3, r0
 8023c82:	f107 0218 	add.w	r2, r7, #24
 8023c86:	f107 0108 	add.w	r1, r7, #8
 8023c8a:	6878      	ldr	r0, [r7, #4]
 8023c8c:	f000 fb9b 	bl	80243c6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023c90:	687b      	ldr	r3, [r7, #4]
 8023c92:	4618      	mov	r0, r3
 8023c94:	f7ff ffbe 	bl	8023c14 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	3728      	adds	r7, #40	; 0x28
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	bd80      	pop	{r7, pc}

08023ca2 <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023ca2:	b580      	push	{r7, lr}
 8023ca4:	b082      	sub	sp, #8
 8023ca6:	af00      	add	r7, sp, #0
 8023ca8:	6078      	str	r0, [r7, #4]
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	4618      	mov	r0, r3
 8023cae:	f000 fba3 	bl	80243f8 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	4618      	mov	r0, r3
 8023cb6:	3708      	adds	r7, #8
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	bd80      	pop	{r7, pc}

08023cbc <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023cbc:	b580      	push	{r7, lr}
 8023cbe:	b082      	sub	sp, #8
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	6078      	str	r0, [r7, #4]
	: c() { }
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	4618      	mov	r0, r3
 8023cc8:	2328      	movs	r3, #40	; 0x28
 8023cca:	461a      	mov	r2, r3
 8023ccc:	2100      	movs	r1, #0
 8023cce:	f018 f8cd 	bl	803be6c <memset>
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	4618      	mov	r0, r3
 8023cd6:	f7ff ffe4 	bl	8023ca2 <_ZNSt5dequeIjSaIjEEC1Ev>
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	4618      	mov	r0, r3
 8023cde:	3708      	adds	r7, #8
 8023ce0:	46bd      	mov	sp, r7
 8023ce2:	bd80      	pop	{r7, pc}

08023ce4 <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023ce4:	b580      	push	{r7, lr}
 8023ce6:	b08a      	sub	sp, #40	; 0x28
 8023ce8:	af00      	add	r7, sp, #0
 8023cea:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023cec:	f107 0308 	add.w	r3, r7, #8
 8023cf0:	6879      	ldr	r1, [r7, #4]
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	f000 fbb3 	bl	802445e <_ZNSt5dequeIjSaIjEE5beginEv>
 8023cf8:	f107 0318 	add.w	r3, r7, #24
 8023cfc:	6879      	ldr	r1, [r7, #4]
 8023cfe:	4618      	mov	r0, r3
 8023d00:	f000 fbbc 	bl	802447c <_ZNSt5dequeIjSaIjEE3endEv>
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	4618      	mov	r0, r3
 8023d08:	f000 fbc7 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023d0c:	4603      	mov	r3, r0
 8023d0e:	f107 0218 	add.w	r2, r7, #24
 8023d12:	f107 0108 	add.w	r1, r7, #8
 8023d16:	6878      	ldr	r0, [r7, #4]
 8023d18:	f000 fbe6 	bl	80244e8 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023d1c:	687b      	ldr	r3, [r7, #4]
 8023d1e:	4618      	mov	r0, r3
 8023d20:	f000 fb7b 	bl	802441a <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	4618      	mov	r0, r3
 8023d28:	3728      	adds	r7, #40	; 0x28
 8023d2a:	46bd      	mov	sp, r7
 8023d2c:	bd80      	pop	{r7, pc}

08023d2e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023d2e:	b590      	push	{r4, r7, lr}
 8023d30:	b083      	sub	sp, #12
 8023d32:	af00      	add	r7, sp, #0
 8023d34:	6078      	str	r0, [r7, #4]
 8023d36:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023d38:	6838      	ldr	r0, [r7, #0]
 8023d3a:	f000 fbe2 	bl	8024502 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023d3e:	4603      	mov	r3, r0
 8023d40:	4622      	mov	r2, r4
 8023d42:	4619      	mov	r1, r3
 8023d44:	6878      	ldr	r0, [r7, #4]
 8023d46:	f000 fbe7 	bl	8024518 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023d4a:	687b      	ldr	r3, [r7, #4]
      }
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	370c      	adds	r7, #12
 8023d50:	46bd      	mov	sp, r7
 8023d52:	bd90      	pop	{r4, r7, pc}

08023d54 <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023d54:	b590      	push	{r4, r7, lr}
 8023d56:	b083      	sub	sp, #12
 8023d58:	af00      	add	r7, sp, #0
 8023d5a:	6078      	str	r0, [r7, #4]
 8023d5c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023d5e:	6838      	ldr	r0, [r7, #0]
 8023d60:	f000 fbfb 	bl	802455a <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023d64:	4603      	mov	r3, r0
 8023d66:	4622      	mov	r2, r4
 8023d68:	4619      	mov	r1, r3
 8023d6a:	6878      	ldr	r0, [r7, #4]
 8023d6c:	f000 fc00 	bl	8024570 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023d70:	687b      	ldr	r3, [r7, #4]
      }
 8023d72:	4618      	mov	r0, r3
 8023d74:	370c      	adds	r7, #12
 8023d76:	46bd      	mov	sp, r7
 8023d78:	bd90      	pop	{r4, r7, pc}

08023d7a <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023d7a:	b580      	push	{r7, lr}
 8023d7c:	b082      	sub	sp, #8
 8023d7e:	af00      	add	r7, sp, #0
 8023d80:	6078      	str	r0, [r7, #4]
 8023d82:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	6839      	ldr	r1, [r7, #0]
 8023d88:	4618      	mov	r0, r3
 8023d8a:	f000 fc12 	bl	80245b2 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023d8e:	4603      	mov	r3, r0
 8023d90:	4618      	mov	r0, r3
 8023d92:	3708      	adds	r7, #8
 8023d94:	46bd      	mov	sp, r7
 8023d96:	bd80      	pop	{r7, pc}

08023d98 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8023d98:	b480      	push	{r7}
 8023d9a:	b083      	sub	sp, #12
 8023d9c:	af00      	add	r7, sp, #0
 8023d9e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	4618      	mov	r0, r3
 8023da4:	370c      	adds	r7, #12
 8023da6:	46bd      	mov	sp, r7
 8023da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dac:	4770      	bx	lr

08023dae <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 8023dae:	b580      	push	{r7, lr}
 8023db0:	b082      	sub	sp, #8
 8023db2:	af00      	add	r7, sp, #0
 8023db4:	6078      	str	r0, [r7, #4]
 8023db6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023db8:	687b      	ldr	r3, [r7, #4]
 8023dba:	6839      	ldr	r1, [r7, #0]
 8023dbc:	4618      	mov	r0, r3
 8023dbe:	f000 fc0a 	bl	80245d6 <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023dc2:	4603      	mov	r3, r0
 8023dc4:	4618      	mov	r0, r3
 8023dc6:	3708      	adds	r7, #8
 8023dc8:	46bd      	mov	sp, r7
 8023dca:	bd80      	pop	{r7, pc}

08023dcc <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023dcc:	b580      	push	{r7, lr}
 8023dce:	b082      	sub	sp, #8
 8023dd0:	af00      	add	r7, sp, #0
 8023dd2:	6078      	str	r0, [r7, #4]
 8023dd4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	6839      	ldr	r1, [r7, #0]
 8023dda:	4618      	mov	r0, r3
 8023ddc:	f000 fc0d 	bl	80245fa <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023de0:	4603      	mov	r3, r0
 8023de2:	4618      	mov	r0, r3
 8023de4:	3708      	adds	r7, #8
 8023de6:	46bd      	mov	sp, r7
 8023de8:	bd80      	pop	{r7, pc}

08023dea <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023dea:	b480      	push	{r7}
 8023dec:	b083      	sub	sp, #12
 8023dee:	af00      	add	r7, sp, #0
 8023df0:	6078      	str	r0, [r7, #4]
 8023df2:	687b      	ldr	r3, [r7, #4]
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	4618      	mov	r0, r3
 8023df8:	370c      	adds	r7, #12
 8023dfa:	46bd      	mov	sp, r7
 8023dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e00:	4770      	bx	lr

08023e02 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023e02:	b590      	push	{r4, r7, lr}
 8023e04:	b083      	sub	sp, #12
 8023e06:	af00      	add	r7, sp, #0
 8023e08:	6078      	str	r0, [r7, #4]
 8023e0a:	6878      	ldr	r0, [r7, #4]
 8023e0c:	f7ff ffed 	bl	8023dea <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023e10:	4604      	mov	r4, r0
 8023e12:	6878      	ldr	r0, [r7, #4]
 8023e14:	f000 fc03 	bl	802461e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023e18:	4602      	mov	r2, r0
 8023e1a:	4613      	mov	r3, r2
 8023e1c:	009b      	lsls	r3, r3, #2
 8023e1e:	4413      	add	r3, r2
 8023e20:	009b      	lsls	r3, r3, #2
 8023e22:	4423      	add	r3, r4
 8023e24:	4618      	mov	r0, r3
 8023e26:	370c      	adds	r7, #12
 8023e28:	46bd      	mov	sp, r7
 8023e2a:	bd90      	pop	{r4, r7, pc}

08023e2c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
		      std::input_iterator_tag);

      // called by the second assign_dispatch above
      template<typename _ForwardIterator>
	void
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e2e:	b09f      	sub	sp, #124	; 0x7c
 8023e30:	af02      	add	r7, sp, #8
 8023e32:	60f8      	str	r0, [r7, #12]
 8023e34:	60b9      	str	r1, [r7, #8]
 8023e36:	607a      	str	r2, [r7, #4]
 8023e38:	703b      	strb	r3, [r7, #0]
		      std::forward_iterator_tag)
	{
	  const size_type __len = std::distance(__first, __last);
 8023e3a:	68bb      	ldr	r3, [r7, #8]
 8023e3c:	6879      	ldr	r1, [r7, #4]
 8023e3e:	4618      	mov	r0, r3
 8023e40:	f000 fbf9 	bl	8024636 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023e44:	4603      	mov	r3, r0
 8023e46:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023e48:	68f8      	ldr	r0, [r7, #12]
 8023e4a:	f7ff fe26 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e4e:	4602      	mov	r2, r0
 8023e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023e52:	4293      	cmp	r3, r2
 8023e54:	bf8c      	ite	hi
 8023e56:	2301      	movhi	r3, #1
 8023e58:	2300      	movls	r3, #0
 8023e5a:	b2db      	uxtb	r3, r3
 8023e5c:	2b00      	cmp	r3, #0
 8023e5e:	d031      	beq.n	8023ec4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	    {
	      _ForwardIterator __mid = __first;
 8023e60:	68bb      	ldr	r3, [r7, #8]
 8023e62:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023e64:	68f8      	ldr	r0, [r7, #12]
 8023e66:	f7ff fe18 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e6a:	4602      	mov	r2, r0
 8023e6c:	f107 0314 	add.w	r3, r7, #20
 8023e70:	4611      	mov	r1, r2
 8023e72:	4618      	mov	r0, r3
 8023e74:	f000 fbf3 	bl	802465e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023e78:	68bc      	ldr	r4, [r7, #8]
 8023e7a:	697d      	ldr	r5, [r7, #20]
 8023e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023e80:	68f9      	ldr	r1, [r7, #12]
 8023e82:	4618      	mov	r0, r3
 8023e84:	f000 fa65 	bl	8024352 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023e88:	f107 0018 	add.w	r0, r7, #24
 8023e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023e90:	462a      	mov	r2, r5
 8023e92:	4621      	mov	r1, r4
 8023e94:	f000 fbf6 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023e9c:	68f9      	ldr	r1, [r7, #12]
 8023e9e:	4618      	mov	r0, r3
 8023ea0:	f000 fa66 	bl	8024370 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023ea4:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023ea6:	f107 0308 	add.w	r3, r7, #8
 8023eaa:	4618      	mov	r0, r3
 8023eac:	f000 fc0a 	bl	80246c4 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023eb0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023eb4:	f88d 6000 	strb.w	r6, [sp]
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	4622      	mov	r2, r4
 8023ebc:	68f8      	ldr	r0, [r7, #12]
 8023ebe:	f000 fc0c 	bl	80246da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	    }
	  else
	    _M_erase_at_end(std::copy(__first, __last, begin()));
	}
 8023ec2:	e014      	b.n	8023eee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023ec4:	68bc      	ldr	r4, [r7, #8]
 8023ec6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023eca:	68f9      	ldr	r1, [r7, #12]
 8023ecc:	4618      	mov	r0, r3
 8023ece:	f000 fa40 	bl	8024352 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ed2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023eda:	687a      	ldr	r2, [r7, #4]
 8023edc:	4621      	mov	r1, r4
 8023ede:	f000 fbd1 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023ee2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023ee6:	4619      	mov	r1, r3
 8023ee8:	68f8      	ldr	r0, [r7, #12]
 8023eea:	f000 fc73 	bl	80247d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023eee:	bf00      	nop
 8023ef0:	3774      	adds	r7, #116	; 0x74
 8023ef2:	46bd      	mov	sp, r7
 8023ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023ef6 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023ef6:	b580      	push	{r7, lr}
 8023ef8:	b084      	sub	sp, #16
 8023efa:	af00      	add	r7, sp, #0
 8023efc:	60f8      	str	r0, [r7, #12]
 8023efe:	60b9      	str	r1, [r7, #8]
 8023f00:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023f02:	6878      	ldr	r0, [r7, #4]
 8023f04:	f000 fc99 	bl	802483a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023f08:	4603      	mov	r3, r0
 8023f0a:	461a      	mov	r2, r3
 8023f0c:	68b9      	ldr	r1, [r7, #8]
 8023f0e:	68f8      	ldr	r0, [r7, #12]
 8023f10:	f000 fc9e 	bl	8024850 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8023f14:	bf00      	nop
 8023f16:	3710      	adds	r7, #16
 8023f18:	46bd      	mov	sp, r7
 8023f1a:	bd80      	pop	{r7, pc}

08023f1c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023f1c:	b5b0      	push	{r4, r5, r7, lr}
 8023f1e:	b082      	sub	sp, #8
 8023f20:	af00      	add	r7, sp, #0
 8023f22:	6078      	str	r0, [r7, #4]
 8023f24:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8023f26:	6878      	ldr	r0, [r7, #4]
 8023f28:	f7ff fdb7 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023f2c:	4604      	mov	r4, r0
 8023f2e:	6878      	ldr	r0, [r7, #4]
 8023f30:	f000 fca7 	bl	8024882 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023f34:	4603      	mov	r3, r0
 8023f36:	429c      	cmp	r4, r3
 8023f38:	bf0c      	ite	eq
 8023f3a:	2301      	moveq	r3, #1
 8023f3c:	2300      	movne	r3, #0
 8023f3e:	b2db      	uxtb	r3, r3
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	d002      	beq.n	8023f4a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023f44:	4817      	ldr	r0, [pc, #92]	; (8023fa4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023f46:	f017 fee9 	bl	803bd1c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8023f4a:	2101      	movs	r1, #1
 8023f4c:	6878      	ldr	r0, [r7, #4]
 8023f4e:	f000 fca9 	bl	80248a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023f52:	687a      	ldr	r2, [r7, #4]
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	695b      	ldr	r3, [r3, #20]
 8023f58:	1f1c      	subs	r4, r3, #4
 8023f5a:	4610      	mov	r0, r2
 8023f5c:	f000 fcba 	bl	80248d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023f60:	4603      	mov	r3, r0
 8023f62:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	f103 0208 	add.w	r2, r3, #8
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	695b      	ldr	r3, [r3, #20]
 8023f6e:	3b04      	subs	r3, #4
 8023f70:	4619      	mov	r1, r3
 8023f72:	4610      	mov	r0, r2
 8023f74:	f000 fcc0 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	691b      	ldr	r3, [r3, #16]
 8023f7c:	f1a3 0214 	sub.w	r2, r3, #20
 8023f80:	687b      	ldr	r3, [r7, #4]
 8023f82:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023f84:	687c      	ldr	r4, [r7, #4]
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	689d      	ldr	r5, [r3, #8]
 8023f8a:	6838      	ldr	r0, [r7, #0]
 8023f8c:	f000 fc55 	bl	802483a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023f90:	4603      	mov	r3, r0
 8023f92:	461a      	mov	r2, r3
 8023f94:	4629      	mov	r1, r5
 8023f96:	4620      	mov	r0, r4
 8023f98:	f7ff ffad 	bl	8023ef6 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8023f9c:	bf00      	nop
 8023f9e:	3708      	adds	r7, #8
 8023fa0:	46bd      	mov	sp, r7
 8023fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8023fa4:	0803ddd8 	.word	0x0803ddd8

08023fa8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023fa8:	b580      	push	{r7, lr}
 8023faa:	b082      	sub	sp, #8
 8023fac:	af00      	add	r7, sp, #0
 8023fae:	6078      	str	r0, [r7, #4]
 8023fb0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023fb2:	f000 fcd0 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8023fb6:	4603      	mov	r3, r0
 8023fb8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	68da      	ldr	r2, [r3, #12]
 8023fbe:	683b      	ldr	r3, [r7, #0]
 8023fc0:	68db      	ldr	r3, [r3, #12]
 8023fc2:	1ad3      	subs	r3, r2, r3
 8023fc4:	109b      	asrs	r3, r3, #2
 8023fc6:	3b01      	subs	r3, #1
 8023fc8:	fb01 f303 	mul.w	r3, r1, r3
 8023fcc:	687a      	ldr	r2, [r7, #4]
 8023fce:	6811      	ldr	r1, [r2, #0]
 8023fd0:	687a      	ldr	r2, [r7, #4]
 8023fd2:	6852      	ldr	r2, [r2, #4]
 8023fd4:	1a8a      	subs	r2, r1, r2
 8023fd6:	1092      	asrs	r2, r2, #2
 8023fd8:	4908      	ldr	r1, [pc, #32]	; (8023ffc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023fda:	fb01 f202 	mul.w	r2, r1, r2
 8023fde:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023fe0:	683a      	ldr	r2, [r7, #0]
 8023fe2:	6891      	ldr	r1, [r2, #8]
 8023fe4:	683a      	ldr	r2, [r7, #0]
 8023fe6:	6812      	ldr	r2, [r2, #0]
 8023fe8:	1a8a      	subs	r2, r1, r2
 8023fea:	1092      	asrs	r2, r2, #2
 8023fec:	4903      	ldr	r1, [pc, #12]	; (8023ffc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023fee:	fb01 f202 	mul.w	r2, r1, r2
 8023ff2:	4413      	add	r3, r2
      }
 8023ff4:	4618      	mov	r0, r3
 8023ff6:	3708      	adds	r7, #8
 8023ff8:	46bd      	mov	sp, r7
 8023ffa:	bd80      	pop	{r7, pc}
 8023ffc:	cccccccd 	.word	0xcccccccd

08024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024000:	b480      	push	{r7}
 8024002:	b083      	sub	sp, #12
 8024004:	af00      	add	r7, sp, #0
 8024006:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	4618      	mov	r0, r3
 802400c:	370c      	adds	r7, #12
 802400e:	46bd      	mov	sp, r7
 8024010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024014:	4770      	bx	lr

08024016 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024016:	b580      	push	{r7, lr}
 8024018:	b082      	sub	sp, #8
 802401a:	af00      	add	r7, sp, #0
 802401c:	6078      	str	r0, [r7, #4]
 802401e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8024020:	6839      	ldr	r1, [r7, #0]
 8024022:	6878      	ldr	r0, [r7, #4]
 8024024:	f000 fc9f 	bl	8024966 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8024028:	bf00      	nop
 802402a:	3708      	adds	r7, #8
 802402c:	46bd      	mov	sp, r7
 802402e:	bd80      	pop	{r7, pc}

08024030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8024030:	b580      	push	{r7, lr}
 8024032:	b082      	sub	sp, #8
 8024034:	af00      	add	r7, sp, #0
 8024036:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8024038:	687a      	ldr	r2, [r7, #4]
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	69db      	ldr	r3, [r3, #28]
 802403e:	4619      	mov	r1, r3
 8024040:	4610      	mov	r0, r2
 8024042:	f000 fc75 	bl	8024930 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	f103 0218 	add.w	r2, r3, #24
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024050:	3b04      	subs	r3, #4
 8024052:	4619      	mov	r1, r3
 8024054:	4610      	mov	r0, r2
 8024056:	f000 fc4f 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	6a1b      	ldr	r3, [r3, #32]
 802405e:	f1a3 0214 	sub.w	r2, r3, #20
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	4618      	mov	r0, r3
 802406a:	f7ff ffc9 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802406e:	4602      	mov	r2, r0
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	699b      	ldr	r3, [r3, #24]
 8024074:	4619      	mov	r1, r3
 8024076:	4610      	mov	r0, r2
 8024078:	f7ff ffcd 	bl	8024016 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 802407c:	bf00      	nop
 802407e:	3708      	adds	r7, #8
 8024080:	46bd      	mov	sp, r7
 8024082:	bd80      	pop	{r7, pc}

08024084 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024084:	b480      	push	{r7}
 8024086:	b083      	sub	sp, #12
 8024088:	af00      	add	r7, sp, #0
 802408a:	6078      	str	r0, [r7, #4]
 802408c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681a      	ldr	r2, [r3, #0]
 8024092:	683b      	ldr	r3, [r7, #0]
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	429a      	cmp	r2, r3
 8024098:	bf0c      	ite	eq
 802409a:	2301      	moveq	r3, #1
 802409c:	2300      	movne	r3, #0
 802409e:	b2db      	uxtb	r3, r3
 80240a0:	4618      	mov	r0, r3
 80240a2:	370c      	adds	r7, #12
 80240a4:	46bd      	mov	sp, r7
 80240a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240aa:	4770      	bx	lr

080240ac <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b086      	sub	sp, #24
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
 80240b4:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80240b6:	f107 0308 	add.w	r3, r7, #8
 80240ba:	683a      	ldr	r2, [r7, #0]
 80240bc:	6879      	ldr	r1, [r7, #4]
 80240be:	4618      	mov	r0, r3
 80240c0:	f000 fc5c 	bl	802497c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80240c4:	f107 0308 	add.w	r3, r7, #8
 80240c8:	4618      	mov	r0, r3
 80240ca:	f000 fc6a 	bl	80249a2 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 80240ce:	4603      	mov	r3, r0
 80240d0:	4618      	mov	r0, r3
 80240d2:	3718      	adds	r7, #24
 80240d4:	46bd      	mov	sp, r7
 80240d6:	bd80      	pop	{r7, pc}

080240d8 <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 80240d8:	b580      	push	{r7, lr}
 80240da:	b082      	sub	sp, #8
 80240dc:	af00      	add	r7, sp, #0
 80240de:	6078      	str	r0, [r7, #4]
 80240e0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	6a1b      	ldr	r3, [r3, #32]
 80240ea:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80240ec:	429a      	cmp	r2, r3
 80240ee:	d00c      	beq.n	802410a <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80240f0:	6878      	ldr	r0, [r7, #4]
 80240f2:	687b      	ldr	r3, [r7, #4]
 80240f4:	699b      	ldr	r3, [r3, #24]
 80240f6:	683a      	ldr	r2, [r7, #0]
 80240f8:	4619      	mov	r1, r3
 80240fa:	f000 fc5e 	bl	80249ba <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80240fe:	687b      	ldr	r3, [r7, #4]
 8024100:	699b      	ldr	r3, [r3, #24]
 8024102:	1d1a      	adds	r2, r3, #4
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	619a      	str	r2, [r3, #24]
      }
 8024108:	e003      	b.n	8024112 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 802410a:	6839      	ldr	r1, [r7, #0]
 802410c:	6878      	ldr	r0, [r7, #4]
 802410e:	f000 fc67 	bl	80249e0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8024112:	bf00      	nop
 8024114:	3708      	adds	r7, #8
 8024116:	46bd      	mov	sp, r7
 8024118:	bd80      	pop	{r7, pc}

0802411a <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 802411a:	b580      	push	{r7, lr}
 802411c:	b086      	sub	sp, #24
 802411e:	af00      	add	r7, sp, #0
 8024120:	6078      	str	r0, [r7, #4]
	return *begin();
 8024122:	f107 0308 	add.w	r3, r7, #8
 8024126:	6879      	ldr	r1, [r7, #4]
 8024128:	4618      	mov	r0, r3
 802412a:	f000 fc9d 	bl	8024a68 <_ZNKSt5dequeIjSaIjEE5beginEv>
 802412e:	f107 0308 	add.w	r3, r7, #8
 8024132:	4618      	mov	r0, r3
 8024134:	f000 fca7 	bl	8024a86 <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 8024138:	4603      	mov	r3, r0
      }
 802413a:	4618      	mov	r0, r3
 802413c:	3718      	adds	r7, #24
 802413e:	46bd      	mov	sp, r7
 8024140:	bd80      	pop	{r7, pc}

08024142 <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8024142:	b580      	push	{r7, lr}
 8024144:	b082      	sub	sp, #8
 8024146:	af00      	add	r7, sp, #0
 8024148:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	f103 0218 	add.w	r2, r3, #24
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	3308      	adds	r3, #8
 8024154:	4619      	mov	r1, r3
 8024156:	4610      	mov	r0, r2
 8024158:	f000 fca1 	bl	8024a9e <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 802415c:	4603      	mov	r3, r0
 802415e:	4618      	mov	r0, r3
 8024160:	3708      	adds	r7, #8
 8024162:	46bd      	mov	sp, r7
 8024164:	bd80      	pop	{r7, pc}

08024166 <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8024166:	b580      	push	{r7, lr}
 8024168:	b082      	sub	sp, #8
 802416a:	af00      	add	r7, sp, #0
 802416c:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	691b      	ldr	r3, [r3, #16]
 8024176:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8024178:	429a      	cmp	r2, r3
 802417a:	d010      	beq.n	802419e <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802417c:	687b      	ldr	r3, [r7, #4]
 802417e:	4618      	mov	r0, r3
 8024180:	f000 f98b 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024184:	4602      	mov	r2, r0
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	689b      	ldr	r3, [r3, #8]
 802418a:	4619      	mov	r1, r3
 802418c:	4610      	mov	r0, r2
 802418e:	f000 fc9a 	bl	8024ac6 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	689b      	ldr	r3, [r3, #8]
 8024196:	1d1a      	adds	r2, r3, #4
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	609a      	str	r2, [r3, #8]
      }
 802419c:	e002      	b.n	80241a4 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 802419e:	6878      	ldr	r0, [r7, #4]
 80241a0:	f000 fc9e 	bl	8024ae0 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 80241a4:	bf00      	nop
 80241a6:	3708      	adds	r7, #8
 80241a8:	46bd      	mov	sp, r7
 80241aa:	bd80      	pop	{r7, pc}

080241ac <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80241ac:	b580      	push	{r7, lr}
 80241ae:	b082      	sub	sp, #8
 80241b0:	af00      	add	r7, sp, #0
 80241b2:	6078      	str	r0, [r7, #4]
 80241b4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80241b6:	683b      	ldr	r3, [r7, #0]
 80241b8:	3308      	adds	r3, #8
 80241ba:	4619      	mov	r1, r3
 80241bc:	6878      	ldr	r0, [r7, #4]
 80241be:	f000 fcb7 	bl	8024b30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 80241c2:	6878      	ldr	r0, [r7, #4]
 80241c4:	3708      	adds	r7, #8
 80241c6:	46bd      	mov	sp, r7
 80241c8:	bd80      	pop	{r7, pc}

080241ca <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80241ca:	b480      	push	{r7}
 80241cc:	b083      	sub	sp, #12
 80241ce:	af00      	add	r7, sp, #0
 80241d0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	4618      	mov	r0, r3
 80241d8:	370c      	adds	r7, #12
 80241da:	46bd      	mov	sp, r7
 80241dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241e0:	4770      	bx	lr

080241e2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80241e2:	b580      	push	{r7, lr}
 80241e4:	b082      	sub	sp, #8
 80241e6:	af00      	add	r7, sp, #0
 80241e8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80241ea:	6878      	ldr	r0, [r7, #4]
 80241ec:	f000 fcbc 	bl	8024b68 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	4618      	mov	r0, r3
 80241f4:	f000 fcc4 	bl	8024b80 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	4618      	mov	r0, r3
 80241fc:	3708      	adds	r7, #8
 80241fe:	46bd      	mov	sp, r7
 8024200:	bd80      	pop	{r7, pc}

08024202 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8024202:	b580      	push	{r7, lr}
 8024204:	b082      	sub	sp, #8
 8024206:	af00      	add	r7, sp, #0
 8024208:	6078      	str	r0, [r7, #4]
 802420a:	6878      	ldr	r0, [r7, #4]
 802420c:	f000 fcd1 	bl	8024bb2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024210:	687b      	ldr	r3, [r7, #4]
 8024212:	4618      	mov	r0, r3
 8024214:	3708      	adds	r7, #8
 8024216:	46bd      	mov	sp, r7
 8024218:	bd80      	pop	{r7, pc}

0802421a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802421a:	b590      	push	{r4, r7, lr}
 802421c:	b089      	sub	sp, #36	; 0x24
 802421e:	af00      	add	r7, sp, #0
 8024220:	6078      	str	r0, [r7, #4]
 8024222:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024224:	2014      	movs	r0, #20
 8024226:	f7fc fe4f 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802422a:	4602      	mov	r2, r0
 802422c:	683b      	ldr	r3, [r7, #0]
 802422e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024232:	3301      	adds	r3, #1
 8024234:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024236:	2308      	movs	r3, #8
 8024238:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802423a:	69fb      	ldr	r3, [r7, #28]
 802423c:	3302      	adds	r3, #2
 802423e:	613b      	str	r3, [r7, #16]
 8024240:	f107 0210 	add.w	r2, r7, #16
 8024244:	f107 030c 	add.w	r3, r7, #12
 8024248:	4611      	mov	r1, r2
 802424a:	4618      	mov	r0, r3
 802424c:	f000 fcbc 	bl	8024bc8 <_ZSt3maxIjERKT_S2_S2_>
 8024250:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024252:	681a      	ldr	r2, [r3, #0]
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024258:	687b      	ldr	r3, [r7, #4]
 802425a:	685b      	ldr	r3, [r3, #4]
 802425c:	4619      	mov	r1, r3
 802425e:	6878      	ldr	r0, [r7, #4]
 8024260:	f000 fcc6 	bl	8024bf0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8024264:	4602      	mov	r2, r0
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	6859      	ldr	r1, [r3, #4]
 8024272:	69fb      	ldr	r3, [r7, #28]
 8024274:	1acb      	subs	r3, r1, r3
 8024276:	085b      	lsrs	r3, r3, #1
 8024278:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802427a:	4413      	add	r3, r2
 802427c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 802427e:	69fb      	ldr	r3, [r7, #28]
 8024280:	009b      	lsls	r3, r3, #2
 8024282:	69ba      	ldr	r2, [r7, #24]
 8024284:	4413      	add	r3, r2
 8024286:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024288:	697a      	ldr	r2, [r7, #20]
 802428a:	69b9      	ldr	r1, [r7, #24]
 802428c:	6878      	ldr	r0, [r7, #4]
 802428e:	f000 fccc 	bl	8024c2a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024292:	687b      	ldr	r3, [r7, #4]
 8024294:	3308      	adds	r3, #8
 8024296:	69b9      	ldr	r1, [r7, #24]
 8024298:	4618      	mov	r0, r3
 802429a:	f000 fb2d 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	f103 0218 	add.w	r2, r3, #24
 80242a4:	697b      	ldr	r3, [r7, #20]
 80242a6:	3b04      	subs	r3, #4
 80242a8:	4619      	mov	r1, r3
 80242aa:	4610      	mov	r0, r2
 80242ac:	f000 fb24 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	68da      	ldr	r2, [r3, #12]
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80242bc:	2014      	movs	r0, #20
 80242be:	f7fc fe03 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80242c2:	4602      	mov	r2, r0
 80242c4:	683b      	ldr	r3, [r7, #0]
 80242c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80242ca:	fb01 f202 	mul.w	r2, r1, r2
 80242ce:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80242d0:	4613      	mov	r3, r2
 80242d2:	009b      	lsls	r3, r3, #2
 80242d4:	4413      	add	r3, r2
 80242d6:	009b      	lsls	r3, r3, #2
 80242d8:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	619a      	str	r2, [r3, #24]
    }
 80242de:	bf00      	nop
 80242e0:	3724      	adds	r7, #36	; 0x24
 80242e2:	46bd      	mov	sp, r7
 80242e4:	bd90      	pop	{r4, r7, pc}

080242e6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80242e6:	b580      	push	{r7, lr}
 80242e8:	b086      	sub	sp, #24
 80242ea:	af00      	add	r7, sp, #0
 80242ec:	60f8      	str	r0, [r7, #12]
 80242ee:	60b9      	str	r1, [r7, #8]
 80242f0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80242f2:	68bb      	ldr	r3, [r7, #8]
 80242f4:	617b      	str	r3, [r7, #20]
 80242f6:	697a      	ldr	r2, [r7, #20]
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	429a      	cmp	r2, r3
 80242fc:	d209      	bcs.n	8024312 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80242fe:	697b      	ldr	r3, [r7, #20]
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	4619      	mov	r1, r3
 8024304:	68f8      	ldr	r0, [r7, #12]
 8024306:	f000 fb13 	bl	8024930 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802430a:	697b      	ldr	r3, [r7, #20]
 802430c:	3304      	adds	r3, #4
 802430e:	617b      	str	r3, [r7, #20]
 8024310:	e7f1      	b.n	80242f6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024312:	bf00      	nop
 8024314:	3718      	adds	r7, #24
 8024316:	46bd      	mov	sp, r7
 8024318:	bd80      	pop	{r7, pc}

0802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802431a:	b580      	push	{r7, lr}
 802431c:	b086      	sub	sp, #24
 802431e:	af00      	add	r7, sp, #0
 8024320:	60f8      	str	r0, [r7, #12]
 8024322:	60b9      	str	r1, [r7, #8]
 8024324:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024326:	f107 0314 	add.w	r3, r7, #20
 802432a:	68f9      	ldr	r1, [r7, #12]
 802432c:	4618      	mov	r0, r3
 802432e:	f000 fc96 	bl	8024c5e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024332:	f107 0314 	add.w	r3, r7, #20
 8024336:	687a      	ldr	r2, [r7, #4]
 8024338:	68b9      	ldr	r1, [r7, #8]
 802433a:	4618      	mov	r0, r3
 802433c:	f000 fcac 	bl	8024c98 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024340:	f107 0314 	add.w	r3, r7, #20
 8024344:	4618      	mov	r0, r3
 8024346:	f000 fc9b 	bl	8024c80 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 802434a:	bf00      	nop
 802434c:	3718      	adds	r7, #24
 802434e:	46bd      	mov	sp, r7
 8024350:	bd80      	pop	{r7, pc}

08024352 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024352:	b580      	push	{r7, lr}
 8024354:	b082      	sub	sp, #8
 8024356:	af00      	add	r7, sp, #0
 8024358:	6078      	str	r0, [r7, #4]
 802435a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802435c:	683b      	ldr	r3, [r7, #0]
 802435e:	3308      	adds	r3, #8
 8024360:	4619      	mov	r1, r3
 8024362:	6878      	ldr	r0, [r7, #4]
 8024364:	f000 f813 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024368:	6878      	ldr	r0, [r7, #4]
 802436a:	3708      	adds	r7, #8
 802436c:	46bd      	mov	sp, r7
 802436e:	bd80      	pop	{r7, pc}

08024370 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024370:	b580      	push	{r7, lr}
 8024372:	b082      	sub	sp, #8
 8024374:	af00      	add	r7, sp, #0
 8024376:	6078      	str	r0, [r7, #4]
 8024378:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802437a:	683b      	ldr	r3, [r7, #0]
 802437c:	3318      	adds	r3, #24
 802437e:	4619      	mov	r1, r3
 8024380:	6878      	ldr	r0, [r7, #4]
 8024382:	f000 f804 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024386:	6878      	ldr	r0, [r7, #4]
 8024388:	3708      	adds	r7, #8
 802438a:	46bd      	mov	sp, r7
 802438c:	bd80      	pop	{r7, pc}

0802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 802438e:	b480      	push	{r7}
 8024390:	b083      	sub	sp, #12
 8024392:	af00      	add	r7, sp, #0
 8024394:	6078      	str	r0, [r7, #4]
 8024396:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024398:	683b      	ldr	r3, [r7, #0]
 802439a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243a0:	683b      	ldr	r3, [r7, #0]
 80243a2:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243a4:	687b      	ldr	r3, [r7, #4]
 80243a6:	605a      	str	r2, [r3, #4]
 80243a8:	683b      	ldr	r3, [r7, #0]
 80243aa:	689a      	ldr	r2, [r3, #8]
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	609a      	str	r2, [r3, #8]
 80243b0:	683b      	ldr	r3, [r7, #0]
 80243b2:	68da      	ldr	r2, [r3, #12]
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	60da      	str	r2, [r3, #12]
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	4618      	mov	r0, r3
 80243bc:	370c      	adds	r7, #12
 80243be:	46bd      	mov	sp, r7
 80243c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243c4:	4770      	bx	lr

080243c6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80243c6:	b480      	push	{r7}
 80243c8:	b08d      	sub	sp, #52	; 0x34
 80243ca:	af00      	add	r7, sp, #0
 80243cc:	60f8      	str	r0, [r7, #12]
 80243ce:	60b9      	str	r1, [r7, #8]
 80243d0:	607a      	str	r2, [r7, #4]
 80243d2:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80243d4:	bf00      	nop
 80243d6:	3734      	adds	r7, #52	; 0x34
 80243d8:	46bd      	mov	sp, r7
 80243da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243de:	4770      	bx	lr

080243e0 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 80243e0:	b580      	push	{r7, lr}
 80243e2:	b082      	sub	sp, #8
 80243e4:	af00      	add	r7, sp, #0
 80243e6:	6078      	str	r0, [r7, #4]
 80243e8:	6878      	ldr	r0, [r7, #4]
 80243ea:	f000 fc74 	bl	8024cd6 <_ZNSaIjED1Ev>
 80243ee:	687b      	ldr	r3, [r7, #4]
 80243f0:	4618      	mov	r0, r3
 80243f2:	3708      	adds	r7, #8
 80243f4:	46bd      	mov	sp, r7
 80243f6:	bd80      	pop	{r7, pc}

080243f8 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 80243f8:	b580      	push	{r7, lr}
 80243fa:	b082      	sub	sp, #8
 80243fc:	af00      	add	r7, sp, #0
 80243fe:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	4618      	mov	r0, r3
 8024404:	f000 fc57 	bl	8024cb6 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8024408:	2100      	movs	r1, #0
 802440a:	6878      	ldr	r0, [r7, #4]
 802440c:	f000 fc6f 	bl	8024cee <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	4618      	mov	r0, r3
 8024414:	3708      	adds	r7, #8
 8024416:	46bd      	mov	sp, r7
 8024418:	bd80      	pop	{r7, pc}

0802441a <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802441a:	b580      	push	{r7, lr}
 802441c:	b082      	sub	sp, #8
 802441e:	af00      	add	r7, sp, #0
 8024420:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	681b      	ldr	r3, [r3, #0]
 8024426:	2b00      	cmp	r3, #0
 8024428:	d010      	beq.n	802444c <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024432:	3304      	adds	r3, #4
 8024434:	461a      	mov	r2, r3
 8024436:	6878      	ldr	r0, [r7, #4]
 8024438:	f000 fcbc 	bl	8024db4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	6819      	ldr	r1, [r3, #0]
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	685b      	ldr	r3, [r3, #4]
 8024444:	461a      	mov	r2, r3
 8024446:	6878      	ldr	r0, [r7, #4]
 8024448:	f000 fcce 	bl	8024de8 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	4618      	mov	r0, r3
 8024450:	f7ff ffc6 	bl	80243e0 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	4618      	mov	r0, r3
 8024458:	3708      	adds	r7, #8
 802445a:	46bd      	mov	sp, r7
 802445c:	bd80      	pop	{r7, pc}

0802445e <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802445e:	b580      	push	{r7, lr}
 8024460:	b082      	sub	sp, #8
 8024462:	af00      	add	r7, sp, #0
 8024464:	6078      	str	r0, [r7, #4]
 8024466:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024468:	683b      	ldr	r3, [r7, #0]
 802446a:	3308      	adds	r3, #8
 802446c:	4619      	mov	r1, r3
 802446e:	6878      	ldr	r0, [r7, #4]
 8024470:	f000 f81e 	bl	80244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8024474:	6878      	ldr	r0, [r7, #4]
 8024476:	3708      	adds	r7, #8
 8024478:	46bd      	mov	sp, r7
 802447a:	bd80      	pop	{r7, pc}

0802447c <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802447c:	b580      	push	{r7, lr}
 802447e:	b082      	sub	sp, #8
 8024480:	af00      	add	r7, sp, #0
 8024482:	6078      	str	r0, [r7, #4]
 8024484:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8024486:	683b      	ldr	r3, [r7, #0]
 8024488:	3318      	adds	r3, #24
 802448a:	4619      	mov	r1, r3
 802448c:	6878      	ldr	r0, [r7, #4]
 802448e:	f000 f80f 	bl	80244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8024492:	6878      	ldr	r0, [r7, #4]
 8024494:	3708      	adds	r7, #8
 8024496:	46bd      	mov	sp, r7
 8024498:	bd80      	pop	{r7, pc}

0802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 802449a:	b480      	push	{r7}
 802449c:	b083      	sub	sp, #12
 802449e:	af00      	add	r7, sp, #0
 80244a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	4618      	mov	r0, r3
 80244a6:	370c      	adds	r7, #12
 80244a8:	46bd      	mov	sp, r7
 80244aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ae:	4770      	bx	lr

080244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80244b0:	b480      	push	{r7}
 80244b2:	b083      	sub	sp, #12
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
 80244b8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244ba:	683b      	ldr	r3, [r7, #0]
 80244bc:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244c2:	683b      	ldr	r3, [r7, #0]
 80244c4:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	605a      	str	r2, [r3, #4]
 80244ca:	683b      	ldr	r3, [r7, #0]
 80244cc:	689a      	ldr	r2, [r3, #8]
 80244ce:	687b      	ldr	r3, [r7, #4]
 80244d0:	609a      	str	r2, [r3, #8]
 80244d2:	683b      	ldr	r3, [r7, #0]
 80244d4:	68da      	ldr	r2, [r3, #12]
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	60da      	str	r2, [r3, #12]
 80244da:	687b      	ldr	r3, [r7, #4]
 80244dc:	4618      	mov	r0, r3
 80244de:	370c      	adds	r7, #12
 80244e0:	46bd      	mov	sp, r7
 80244e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244e6:	4770      	bx	lr

080244e8 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 80244e8:	b480      	push	{r7}
 80244ea:	b08d      	sub	sp, #52	; 0x34
 80244ec:	af00      	add	r7, sp, #0
 80244ee:	60f8      	str	r0, [r7, #12]
 80244f0:	60b9      	str	r1, [r7, #8]
 80244f2:	607a      	str	r2, [r7, #4]
 80244f4:	603b      	str	r3, [r7, #0]
      }
 80244f6:	bf00      	nop
 80244f8:	3734      	adds	r7, #52	; 0x34
 80244fa:	46bd      	mov	sp, r7
 80244fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024500:	4770      	bx	lr

08024502 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8024502:	b480      	push	{r7}
 8024504:	b083      	sub	sp, #12
 8024506:	af00      	add	r7, sp, #0
 8024508:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802450a:	687b      	ldr	r3, [r7, #4]
 802450c:	4618      	mov	r0, r3
 802450e:	370c      	adds	r7, #12
 8024510:	46bd      	mov	sp, r7
 8024512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024516:	4770      	bx	lr

08024518 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024518:	b590      	push	{r4, r7, lr}
 802451a:	b085      	sub	sp, #20
 802451c:	af00      	add	r7, sp, #0
 802451e:	60f8      	str	r0, [r7, #12]
 8024520:	60b9      	str	r1, [r7, #8]
 8024522:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8024524:	68fb      	ldr	r3, [r7, #12]
 8024526:	68ba      	ldr	r2, [r7, #8]
 8024528:	4611      	mov	r1, r2
 802452a:	4618      	mov	r0, r3
 802452c:	f000 fc78 	bl	8024e20 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024530:	68b8      	ldr	r0, [r7, #8]
 8024532:	f000 fc82 	bl	8024e3a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024536:	68fb      	ldr	r3, [r7, #12]
 8024538:	4618      	mov	r0, r3
 802453a:	f7ff fd61 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802453e:	4604      	mov	r4, r0
 8024540:	68bb      	ldr	r3, [r7, #8]
 8024542:	4618      	mov	r0, r3
 8024544:	f7ff fd5c 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024548:	4603      	mov	r3, r0
 802454a:	4619      	mov	r1, r3
 802454c:	4620      	mov	r0, r4
 802454e:	f000 fc88 	bl	8024e62 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 8024552:	bf00      	nop
 8024554:	3714      	adds	r7, #20
 8024556:	46bd      	mov	sp, r7
 8024558:	bd90      	pop	{r4, r7, pc}

0802455a <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 802455a:	b480      	push	{r7}
 802455c:	b083      	sub	sp, #12
 802455e:	af00      	add	r7, sp, #0
 8024560:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	4618      	mov	r0, r3
 8024566:	370c      	adds	r7, #12
 8024568:	46bd      	mov	sp, r7
 802456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802456e:	4770      	bx	lr

08024570 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024570:	b590      	push	{r4, r7, lr}
 8024572:	b085      	sub	sp, #20
 8024574:	af00      	add	r7, sp, #0
 8024576:	60f8      	str	r0, [r7, #12]
 8024578:	60b9      	str	r1, [r7, #8]
 802457a:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 802457c:	68fb      	ldr	r3, [r7, #12]
 802457e:	68ba      	ldr	r2, [r7, #8]
 8024580:	4611      	mov	r1, r2
 8024582:	4618      	mov	r0, r3
 8024584:	f000 fc7b 	bl	8024e7e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 8024588:	68b8      	ldr	r0, [r7, #8]
 802458a:	f000 fc85 	bl	8024e98 <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802458e:	68fb      	ldr	r3, [r7, #12]
 8024590:	4618      	mov	r0, r3
 8024592:	f7ff ff82 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024596:	4604      	mov	r4, r0
 8024598:	68bb      	ldr	r3, [r7, #8]
 802459a:	4618      	mov	r0, r3
 802459c:	f7ff ff7d 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80245a0:	4603      	mov	r3, r0
 80245a2:	4619      	mov	r1, r3
 80245a4:	4620      	mov	r0, r4
 80245a6:	f000 fc8b 	bl	8024ec0 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 80245aa:	bf00      	nop
 80245ac:	3714      	adds	r7, #20
 80245ae:	46bd      	mov	sp, r7
 80245b0:	bd90      	pop	{r4, r7, pc}

080245b2 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80245b2:	b480      	push	{r7}
 80245b4:	b083      	sub	sp, #12
 80245b6:	af00      	add	r7, sp, #0
 80245b8:	6078      	str	r0, [r7, #4]
 80245ba:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80245bc:	683a      	ldr	r2, [r7, #0]
 80245be:	4613      	mov	r3, r2
 80245c0:	015b      	lsls	r3, r3, #5
 80245c2:	4413      	add	r3, r2
 80245c4:	00db      	lsls	r3, r3, #3
 80245c6:	687a      	ldr	r2, [r7, #4]
 80245c8:	4413      	add	r3, r2
 80245ca:	4618      	mov	r0, r3
 80245cc:	370c      	adds	r7, #12
 80245ce:	46bd      	mov	sp, r7
 80245d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245d4:	4770      	bx	lr

080245d6 <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80245d6:	b480      	push	{r7}
 80245d8:	b083      	sub	sp, #12
 80245da:	af00      	add	r7, sp, #0
 80245dc:	6078      	str	r0, [r7, #4]
 80245de:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80245e0:	683b      	ldr	r3, [r7, #0]
 80245e2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80245e6:	fb02 f303 	mul.w	r3, r2, r3
 80245ea:	687a      	ldr	r2, [r7, #4]
 80245ec:	4413      	add	r3, r2
 80245ee:	4618      	mov	r0, r3
 80245f0:	370c      	adds	r7, #12
 80245f2:	46bd      	mov	sp, r7
 80245f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245f8:	4770      	bx	lr

080245fa <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80245fa:	b480      	push	{r7}
 80245fc:	b083      	sub	sp, #12
 80245fe:	af00      	add	r7, sp, #0
 8024600:	6078      	str	r0, [r7, #4]
 8024602:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024604:	683b      	ldr	r3, [r7, #0]
 8024606:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802460a:	fb02 f303 	mul.w	r3, r2, r3
 802460e:	687a      	ldr	r2, [r7, #4]
 8024610:	4413      	add	r3, r2
 8024612:	4618      	mov	r0, r3
 8024614:	370c      	adds	r7, #12
 8024616:	46bd      	mov	sp, r7
 8024618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802461c:	4770      	bx	lr

0802461e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 802461e:	b480      	push	{r7}
 8024620:	b083      	sub	sp, #12
 8024622:	af00      	add	r7, sp, #0
 8024624:	6078      	str	r0, [r7, #4]
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	685b      	ldr	r3, [r3, #4]
 802462a:	4618      	mov	r0, r3
 802462c:	370c      	adds	r7, #12
 802462e:	46bd      	mov	sp, r7
 8024630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024634:	4770      	bx	lr

08024636 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8024636:	b5b0      	push	{r4, r5, r7, lr}
 8024638:	b082      	sub	sp, #8
 802463a:	af00      	add	r7, sp, #0
 802463c:	6078      	str	r0, [r7, #4]
 802463e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8024640:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8024642:	1d3b      	adds	r3, r7, #4
 8024644:	4618      	mov	r0, r3
 8024646:	f000 f83d 	bl	80246c4 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 802464a:	462a      	mov	r2, r5
 802464c:	6839      	ldr	r1, [r7, #0]
 802464e:	4620      	mov	r0, r4
 8024650:	f000 fc44 	bl	8024edc <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8024654:	4603      	mov	r3, r0
    }
 8024656:	4618      	mov	r0, r3
 8024658:	3708      	adds	r7, #8
 802465a:	46bd      	mov	sp, r7
 802465c:	bdb0      	pop	{r4, r5, r7, pc}

0802465e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 802465e:	b590      	push	{r4, r7, lr}
 8024660:	b085      	sub	sp, #20
 8024662:	af00      	add	r7, sp, #0
 8024664:	6078      	str	r0, [r7, #4]
 8024666:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8024668:	683b      	ldr	r3, [r7, #0]
 802466a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 802466c:	6878      	ldr	r0, [r7, #4]
 802466e:	f000 f829 	bl	80246c4 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8024672:	4622      	mov	r2, r4
 8024674:	68f9      	ldr	r1, [r7, #12]
 8024676:	6878      	ldr	r0, [r7, #4]
 8024678:	f000 fc46 	bl	8024f08 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 802467c:	bf00      	nop
 802467e:	3714      	adds	r7, #20
 8024680:	46bd      	mov	sp, r7
 8024682:	bd90      	pop	{r4, r7, pc}

08024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8024684:	b5b0      	push	{r4, r5, r7, lr}
 8024686:	b088      	sub	sp, #32
 8024688:	af00      	add	r7, sp, #0
 802468a:	60f8      	str	r0, [r7, #12]
 802468c:	60b9      	str	r1, [r7, #8]
 802468e:	607a      	str	r2, [r7, #4]
 8024690:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024692:	68b8      	ldr	r0, [r7, #8]
 8024694:	f000 fc4e 	bl	8024f34 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024698:	4604      	mov	r4, r0
 802469a:	6878      	ldr	r0, [r7, #4]
 802469c:	f000 fc4a 	bl	8024f34 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80246a0:	4605      	mov	r5, r0
 80246a2:	f107 0310 	add.w	r3, r7, #16
 80246a6:	6839      	ldr	r1, [r7, #0]
 80246a8:	4618      	mov	r0, r3
 80246aa:	f7ff fe70 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80246ae:	68f8      	ldr	r0, [r7, #12]
 80246b0:	f107 0310 	add.w	r3, r7, #16
 80246b4:	462a      	mov	r2, r5
 80246b6:	4621      	mov	r1, r4
 80246b8:	f000 fc47 	bl	8024f4a <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 80246bc:	68f8      	ldr	r0, [r7, #12]
 80246be:	3720      	adds	r7, #32
 80246c0:	46bd      	mov	sp, r7
 80246c2:	bdb0      	pop	{r4, r5, r7, pc}

080246c4 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80246c4:	b480      	push	{r7}
 80246c6:	b083      	sub	sp, #12
 80246c8:	af00      	add	r7, sp, #0
 80246ca:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80246cc:	bf00      	nop
 80246ce:	4618      	mov	r0, r3
 80246d0:	370c      	adds	r7, #12
 80246d2:	46bd      	mov	sp, r7
 80246d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246d8:	4770      	bx	lr

080246da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 80246da:	b590      	push	{r4, r7, lr}
 80246dc:	b0a5      	sub	sp, #148	; 0x94
 80246de:	af02      	add	r7, sp, #8
 80246e0:	60f8      	str	r0, [r7, #12]
 80246e2:	60b9      	str	r1, [r7, #8]
 80246e4:	607a      	str	r2, [r7, #4]
 80246e6:	603b      	str	r3, [r7, #0]
      _M_range_insert_aux(iterator __pos,
			  _ForwardIterator __first, _ForwardIterator __last,
			  std::forward_iterator_tag)
      {
	const size_type __n = std::distance(__first, __last);
 80246e8:	6839      	ldr	r1, [r7, #0]
 80246ea:	6878      	ldr	r0, [r7, #4]
 80246ec:	f7ff ffa3 	bl	8024636 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 80246f0:	4603      	mov	r3, r0
 80246f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 80246f6:	68bb      	ldr	r3, [r7, #8]
 80246f8:	681a      	ldr	r2, [r3, #0]
 80246fa:	68fb      	ldr	r3, [r7, #12]
 80246fc:	689b      	ldr	r3, [r3, #8]
 80246fe:	429a      	cmp	r2, r3
 8024700:	d126      	bne.n	8024750 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024706:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802470a:	68f9      	ldr	r1, [r7, #12]
 802470c:	4618      	mov	r0, r3
 802470e:	f000 fc4d 	bl	8024fac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    __try
	      {
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024712:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8024716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802471a:	4611      	mov	r1, r2
 802471c:	4618      	mov	r0, r3
 802471e:	f7ff fe36 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024722:	68fb      	ldr	r3, [r7, #12]
 8024724:	4618      	mov	r0, r3
 8024726:	f7ff fc6b 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802472a:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 802472c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024734:	9200      	str	r2, [sp, #0]
 8024736:	683a      	ldr	r2, [r7, #0]
 8024738:	6879      	ldr	r1, [r7, #4]
 802473a:	f000 fc61 	bl	8025000 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 802473e:	68fb      	ldr	r3, [r7, #12]
 8024740:	f103 0408 	add.w	r4, r3, #8
 8024744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8024748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802474a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		__throw_exception_again;
	      }
	  }
	else
	  _M_insert_aux(__pos, __first, __last, __n);
      }
 802474e:	e03d      	b.n	80247cc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8024750:	68bb      	ldr	r3, [r7, #8]
 8024752:	681a      	ldr	r2, [r3, #0]
 8024754:	68fb      	ldr	r3, [r7, #12]
 8024756:	699b      	ldr	r3, [r3, #24]
 8024758:	429a      	cmp	r2, r3
 802475a:	d127      	bne.n	80247ac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 802475c:	f107 0314 	add.w	r3, r7, #20
 8024760:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024764:	68f9      	ldr	r1, [r7, #12]
 8024766:	4618      	mov	r0, r3
 8024768:	f000 fc62 	bl	8025030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 802476c:	68fb      	ldr	r3, [r7, #12]
 802476e:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8024772:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024776:	4611      	mov	r1, r2
 8024778:	4618      	mov	r0, r3
 802477a:	f7ff fe08 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	4618      	mov	r0, r3
 8024782:	f7ff fc3d 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024786:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8024788:	f107 0054 	add.w	r0, r7, #84	; 0x54
 802478c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8024790:	9200      	str	r2, [sp, #0]
 8024792:	683a      	ldr	r2, [r7, #0]
 8024794:	6879      	ldr	r1, [r7, #4]
 8024796:	f000 fc33 	bl	8025000 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 802479a:	68fb      	ldr	r3, [r7, #12]
 802479c:	f103 0418 	add.w	r4, r3, #24
 80247a0:	f107 0314 	add.w	r3, r7, #20
 80247a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80247aa:	e00f      	b.n	80247cc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 80247ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80247b0:	68b9      	ldr	r1, [r7, #8]
 80247b2:	4618      	mov	r0, r3
 80247b4:	f7ff fdeb 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80247b8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80247bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80247c0:	9300      	str	r3, [sp, #0]
 80247c2:	683b      	ldr	r3, [r7, #0]
 80247c4:	687a      	ldr	r2, [r7, #4]
 80247c6:	68f8      	ldr	r0, [r7, #12]
 80247c8:	f000 fc5c 	bl	8025084 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 80247cc:	bf00      	nop
 80247ce:	378c      	adds	r7, #140	; 0x8c
 80247d0:	46bd      	mov	sp, r7
 80247d2:	bd90      	pop	{r4, r7, pc}

080247d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 80247d4:	b590      	push	{r4, r7, lr}
 80247d6:	b08b      	sub	sp, #44	; 0x2c
 80247d8:	af00      	add	r7, sp, #0
 80247da:	6078      	str	r0, [r7, #4]
 80247dc:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80247de:	f107 0308 	add.w	r3, r7, #8
 80247e2:	6839      	ldr	r1, [r7, #0]
 80247e4:	4618      	mov	r0, r3
 80247e6:	f7ff fdd2 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80247ea:	f107 0318 	add.w	r3, r7, #24
 80247ee:	6879      	ldr	r1, [r7, #4]
 80247f0:	4618      	mov	r0, r3
 80247f2:	f7ff fdbd 	bl	8024370 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	4618      	mov	r0, r3
 80247fa:	f7ff fc01 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80247fe:	4603      	mov	r3, r0
 8024800:	f107 0218 	add.w	r2, r7, #24
 8024804:	f107 0108 	add.w	r1, r7, #8
 8024808:	6878      	ldr	r0, [r7, #4]
 802480a:	f7ff fddc 	bl	80243c6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 802480e:	6878      	ldr	r0, [r7, #4]
 8024810:	683b      	ldr	r3, [r7, #0]
 8024812:	68db      	ldr	r3, [r3, #12]
 8024814:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8024816:	687b      	ldr	r3, [r7, #4]
 8024818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 802481a:	3304      	adds	r3, #4
 802481c:	461a      	mov	r2, r3
 802481e:	f7ff fd62 	bl	80242e6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	683a      	ldr	r2, [r7, #0]
 8024826:	f103 0418 	add.w	r4, r3, #24
 802482a:	4613      	mov	r3, r2
 802482c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802482e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024832:	bf00      	nop
 8024834:	372c      	adds	r7, #44	; 0x2c
 8024836:	46bd      	mov	sp, r7
 8024838:	bd90      	pop	{r4, r7, pc}

0802483a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802483a:	b480      	push	{r7}
 802483c:	b083      	sub	sp, #12
 802483e:	af00      	add	r7, sp, #0
 8024840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	4618      	mov	r0, r3
 8024846:	370c      	adds	r7, #12
 8024848:	46bd      	mov	sp, r7
 802484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802484e:	4770      	bx	lr

08024850 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8024850:	b5b0      	push	{r4, r5, r7, lr}
 8024852:	b084      	sub	sp, #16
 8024854:	af00      	add	r7, sp, #0
 8024856:	60f8      	str	r0, [r7, #12]
 8024858:	60b9      	str	r1, [r7, #8]
 802485a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802485c:	6878      	ldr	r0, [r7, #4]
 802485e:	f7ff ffec 	bl	802483a <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024862:	4605      	mov	r5, r0
 8024864:	68bb      	ldr	r3, [r7, #8]
 8024866:	4619      	mov	r1, r3
 8024868:	2014      	movs	r0, #20
 802486a:	f7fc fb21 	bl	8020eb0 <_ZnwjPv>
 802486e:	4603      	mov	r3, r0
 8024870:	461c      	mov	r4, r3
 8024872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024876:	682b      	ldr	r3, [r5, #0]
 8024878:	6023      	str	r3, [r4, #0]
 802487a:	bf00      	nop
 802487c:	3710      	adds	r7, #16
 802487e:	46bd      	mov	sp, r7
 8024880:	bdb0      	pop	{r4, r5, r7, pc}

08024882 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8024882:	b580      	push	{r7, lr}
 8024884:	b082      	sub	sp, #8
 8024886:	af00      	add	r7, sp, #0
 8024888:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	4618      	mov	r0, r3
 802488e:	f000 ff06 	bl	802569e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024892:	4603      	mov	r3, r0
 8024894:	4618      	mov	r0, r3
 8024896:	f000 fee8 	bl	802566a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 802489a:	4603      	mov	r3, r0
 802489c:	4618      	mov	r0, r3
 802489e:	3708      	adds	r7, #8
 80248a0:	46bd      	mov	sp, r7
 80248a2:	bd80      	pop	{r7, pc}

080248a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80248a4:	b580      	push	{r7, lr}
 80248a6:	b082      	sub	sp, #8
 80248a8:	af00      	add	r7, sp, #0
 80248aa:	6078      	str	r0, [r7, #4]
 80248ac:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	1ad3      	subs	r3, r2, r3
 80248b8:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80248ba:	461a      	mov	r2, r3
 80248bc:	683b      	ldr	r3, [r7, #0]
 80248be:	4293      	cmp	r3, r2
 80248c0:	d904      	bls.n	80248cc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80248c2:	2201      	movs	r2, #1
 80248c4:	6839      	ldr	r1, [r7, #0]
 80248c6:	6878      	ldr	r0, [r7, #4]
 80248c8:	f000 fef4 	bl	80256b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 80248cc:	bf00      	nop
 80248ce:	3708      	adds	r7, #8
 80248d0:	46bd      	mov	sp, r7
 80248d2:	bd80      	pop	{r7, pc}

080248d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80248d4:	b590      	push	{r4, r7, lr}
 80248d6:	b083      	sub	sp, #12
 80248d8:	af00      	add	r7, sp, #0
 80248da:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80248dc:	687c      	ldr	r4, [r7, #4]
 80248de:	2014      	movs	r0, #20
 80248e0:	f7fc faf2 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80248e4:	4603      	mov	r3, r0
 80248e6:	4619      	mov	r1, r3
 80248e8:	4620      	mov	r0, r4
 80248ea:	f000 ff7d 	bl	80257e8 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 80248ee:	4603      	mov	r3, r0
      }
 80248f0:	4618      	mov	r0, r3
 80248f2:	370c      	adds	r7, #12
 80248f4:	46bd      	mov	sp, r7
 80248f6:	bd90      	pop	{r4, r7, pc}

080248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80248f8:	b590      	push	{r4, r7, lr}
 80248fa:	b083      	sub	sp, #12
 80248fc:	af00      	add	r7, sp, #0
 80248fe:	6078      	str	r0, [r7, #4]
 8024900:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	683a      	ldr	r2, [r7, #0]
 8024906:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8024908:	683b      	ldr	r3, [r7, #0]
 802490a:	681a      	ldr	r2, [r3, #0]
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	685c      	ldr	r4, [r3, #4]
 8024914:	f000 f81f 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8024918:	4602      	mov	r2, r0
 802491a:	4613      	mov	r3, r2
 802491c:	009b      	lsls	r3, r3, #2
 802491e:	4413      	add	r3, r2
 8024920:	009b      	lsls	r3, r3, #2
 8024922:	18e2      	adds	r2, r4, r3
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	609a      	str	r2, [r3, #8]
      }
 8024928:	bf00      	nop
 802492a:	370c      	adds	r7, #12
 802492c:	46bd      	mov	sp, r7
 802492e:	bd90      	pop	{r4, r7, pc}

08024930 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024930:	b590      	push	{r4, r7, lr}
 8024932:	b083      	sub	sp, #12
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
 8024938:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802493a:	687c      	ldr	r4, [r7, #4]
 802493c:	2014      	movs	r0, #20
 802493e:	f7fc fac3 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024942:	4603      	mov	r3, r0
 8024944:	461a      	mov	r2, r3
 8024946:	6839      	ldr	r1, [r7, #0]
 8024948:	4620      	mov	r0, r4
 802494a:	f000 ff5c 	bl	8025806 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 802494e:	bf00      	nop
 8024950:	370c      	adds	r7, #12
 8024952:	46bd      	mov	sp, r7
 8024954:	bd90      	pop	{r4, r7, pc}

08024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8024956:	b580      	push	{r7, lr}
 8024958:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802495a:	2014      	movs	r0, #20
 802495c:	f7fc fab4 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024960:	4603      	mov	r3, r0
 8024962:	4618      	mov	r0, r3
 8024964:	bd80      	pop	{r7, pc}

08024966 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8024966:	b480      	push	{r7}
 8024968:	b083      	sub	sp, #12
 802496a:	af00      	add	r7, sp, #0
 802496c:	6078      	str	r0, [r7, #4]
 802496e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8024970:	bf00      	nop
 8024972:	370c      	adds	r7, #12
 8024974:	46bd      	mov	sp, r7
 8024976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802497a:	4770      	bx	lr

0802497c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 802497c:	b580      	push	{r7, lr}
 802497e:	b084      	sub	sp, #16
 8024980:	af00      	add	r7, sp, #0
 8024982:	60f8      	str	r0, [r7, #12]
 8024984:	60b9      	str	r1, [r7, #8]
 8024986:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8024988:	68b9      	ldr	r1, [r7, #8]
 802498a:	68f8      	ldr	r0, [r7, #12]
 802498c:	f7ff fcff 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 8024990:	6879      	ldr	r1, [r7, #4]
 8024992:	68f8      	ldr	r0, [r7, #12]
 8024994:	f000 ff46 	bl	8025824 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8024998:	bf00      	nop
      }
 802499a:	68f8      	ldr	r0, [r7, #12]
 802499c:	3710      	adds	r7, #16
 802499e:	46bd      	mov	sp, r7
 80249a0:	bd80      	pop	{r7, pc}

080249a2 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80249a2:	b480      	push	{r7}
 80249a4:	b083      	sub	sp, #12
 80249a6:	af00      	add	r7, sp, #0
 80249a8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	681b      	ldr	r3, [r3, #0]
 80249ae:	4618      	mov	r0, r3
 80249b0:	370c      	adds	r7, #12
 80249b2:	46bd      	mov	sp, r7
 80249b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249b8:	4770      	bx	lr

080249ba <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80249ba:	b580      	push	{r7, lr}
 80249bc:	b084      	sub	sp, #16
 80249be:	af00      	add	r7, sp, #0
 80249c0:	60f8      	str	r0, [r7, #12]
 80249c2:	60b9      	str	r1, [r7, #8]
 80249c4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80249c6:	6878      	ldr	r0, [r7, #4]
 80249c8:	f000 ff90 	bl	80258ec <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80249cc:	4603      	mov	r3, r0
 80249ce:	461a      	mov	r2, r3
 80249d0:	68b9      	ldr	r1, [r7, #8]
 80249d2:	68f8      	ldr	r0, [r7, #12]
 80249d4:	f000 ff95 	bl	8025902 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 80249d8:	bf00      	nop
 80249da:	3710      	adds	r7, #16
 80249dc:	46bd      	mov	sp, r7
 80249de:	bd80      	pop	{r7, pc}

080249e0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80249e0:	b5b0      	push	{r4, r5, r7, lr}
 80249e2:	b082      	sub	sp, #8
 80249e4:	af00      	add	r7, sp, #0
 80249e6:	6078      	str	r0, [r7, #4]
 80249e8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80249ea:	6878      	ldr	r0, [r7, #4]
 80249ec:	f000 ff9f 	bl	802592e <_ZNKSt5dequeIjSaIjEE4sizeEv>
 80249f0:	4604      	mov	r4, r0
 80249f2:	6878      	ldr	r0, [r7, #4]
 80249f4:	f000 ffad 	bl	8025952 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 80249f8:	4603      	mov	r3, r0
 80249fa:	429c      	cmp	r4, r3
 80249fc:	bf0c      	ite	eq
 80249fe:	2301      	moveq	r3, #1
 8024a00:	2300      	movne	r3, #0
 8024a02:	b2db      	uxtb	r3, r3
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	d002      	beq.n	8024a0e <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8024a08:	4816      	ldr	r0, [pc, #88]	; (8024a64 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8024a0a:	f017 f987 	bl	803bd1c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024a0e:	2101      	movs	r1, #1
 8024a10:	6878      	ldr	r0, [r7, #4]
 8024a12:	f000 ffaf 	bl	8025974 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8024a16:	687a      	ldr	r2, [r7, #4]
 8024a18:	687b      	ldr	r3, [r7, #4]
 8024a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a1c:	1d1c      	adds	r4, r3, #4
 8024a1e:	4610      	mov	r0, r2
 8024a20:	f000 ffc3 	bl	80259aa <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8024a24:	4603      	mov	r3, r0
 8024a26:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8024a28:	687c      	ldr	r4, [r7, #4]
 8024a2a:	687b      	ldr	r3, [r7, #4]
 8024a2c:	699d      	ldr	r5, [r3, #24]
 8024a2e:	6838      	ldr	r0, [r7, #0]
 8024a30:	f000 ff5c 	bl	80258ec <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024a34:	4603      	mov	r3, r0
 8024a36:	461a      	mov	r2, r3
 8024a38:	4629      	mov	r1, r5
 8024a3a:	4620      	mov	r0, r4
 8024a3c:	f7ff ffbd 	bl	80249ba <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	f103 0218 	add.w	r2, r3, #24
 8024a46:	687b      	ldr	r3, [r7, #4]
 8024a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a4a:	3304      	adds	r3, #4
 8024a4c:	4619      	mov	r1, r3
 8024a4e:	4610      	mov	r0, r2
 8024a50:	f000 ffbd 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024a54:	687b      	ldr	r3, [r7, #4]
 8024a56:	69da      	ldr	r2, [r3, #28]
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	619a      	str	r2, [r3, #24]
      }
 8024a5c:	bf00      	nop
 8024a5e:	3708      	adds	r7, #8
 8024a60:	46bd      	mov	sp, r7
 8024a62:	bdb0      	pop	{r4, r5, r7, pc}
 8024a64:	0803ddd8 	.word	0x0803ddd8

08024a68 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024a68:	b580      	push	{r7, lr}
 8024a6a:	b082      	sub	sp, #8
 8024a6c:	af00      	add	r7, sp, #0
 8024a6e:	6078      	str	r0, [r7, #4]
 8024a70:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024a72:	683b      	ldr	r3, [r7, #0]
 8024a74:	3308      	adds	r3, #8
 8024a76:	4619      	mov	r1, r3
 8024a78:	6878      	ldr	r0, [r7, #4]
 8024a7a:	f000 ffd4 	bl	8025a26 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 8024a7e:	6878      	ldr	r0, [r7, #4]
 8024a80:	3708      	adds	r7, #8
 8024a82:	46bd      	mov	sp, r7
 8024a84:	bd80      	pop	{r7, pc}

08024a86 <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024a86:	b480      	push	{r7}
 8024a88:	b083      	sub	sp, #12
 8024a8a:	af00      	add	r7, sp, #0
 8024a8c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	681b      	ldr	r3, [r3, #0]
 8024a92:	4618      	mov	r0, r3
 8024a94:	370c      	adds	r7, #12
 8024a96:	46bd      	mov	sp, r7
 8024a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a9c:	4770      	bx	lr

08024a9e <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024a9e:	b480      	push	{r7}
 8024aa0:	b083      	sub	sp, #12
 8024aa2:	af00      	add	r7, sp, #0
 8024aa4:	6078      	str	r0, [r7, #4]
 8024aa6:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	681a      	ldr	r2, [r3, #0]
 8024aac:	683b      	ldr	r3, [r7, #0]
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	429a      	cmp	r2, r3
 8024ab2:	bf0c      	ite	eq
 8024ab4:	2301      	moveq	r3, #1
 8024ab6:	2300      	movne	r3, #0
 8024ab8:	b2db      	uxtb	r3, r3
 8024aba:	4618      	mov	r0, r3
 8024abc:	370c      	adds	r7, #12
 8024abe:	46bd      	mov	sp, r7
 8024ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ac4:	4770      	bx	lr

08024ac6 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024ac6:	b580      	push	{r7, lr}
 8024ac8:	b082      	sub	sp, #8
 8024aca:	af00      	add	r7, sp, #0
 8024acc:	6078      	str	r0, [r7, #4]
 8024ace:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024ad0:	6839      	ldr	r1, [r7, #0]
 8024ad2:	6878      	ldr	r0, [r7, #4]
 8024ad4:	f000 ffc3 	bl	8025a5e <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8024ad8:	bf00      	nop
 8024ada:	3708      	adds	r7, #8
 8024adc:	46bd      	mov	sp, r7
 8024ade:	bd80      	pop	{r7, pc}

08024ae0 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024ae0:	b580      	push	{r7, lr}
 8024ae2:	b082      	sub	sp, #8
 8024ae4:	af00      	add	r7, sp, #0
 8024ae6:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	4618      	mov	r0, r3
 8024aec:	f7ff fcd5 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024af0:	4602      	mov	r2, r0
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	689b      	ldr	r3, [r3, #8]
 8024af6:	4619      	mov	r1, r3
 8024af8:	4610      	mov	r0, r2
 8024afa:	f7ff ffe4 	bl	8024ac6 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024afe:	687a      	ldr	r2, [r7, #4]
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	68db      	ldr	r3, [r3, #12]
 8024b04:	4619      	mov	r1, r3
 8024b06:	4610      	mov	r0, r2
 8024b08:	f000 ff7a 	bl	8025a00 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	f103 0208 	add.w	r2, r3, #8
 8024b12:	687b      	ldr	r3, [r7, #4]
 8024b14:	695b      	ldr	r3, [r3, #20]
 8024b16:	3304      	adds	r3, #4
 8024b18:	4619      	mov	r1, r3
 8024b1a:	4610      	mov	r0, r2
 8024b1c:	f000 ff57 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	68da      	ldr	r2, [r3, #12]
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	609a      	str	r2, [r3, #8]
    }
 8024b28:	bf00      	nop
 8024b2a:	3708      	adds	r7, #8
 8024b2c:	46bd      	mov	sp, r7
 8024b2e:	bd80      	pop	{r7, pc}

08024b30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8024b30:	b480      	push	{r7}
 8024b32:	b083      	sub	sp, #12
 8024b34:	af00      	add	r7, sp, #0
 8024b36:	6078      	str	r0, [r7, #4]
 8024b38:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b3a:	683b      	ldr	r3, [r7, #0]
 8024b3c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b42:	683b      	ldr	r3, [r7, #0]
 8024b44:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	605a      	str	r2, [r3, #4]
 8024b4a:	683b      	ldr	r3, [r7, #0]
 8024b4c:	689a      	ldr	r2, [r3, #8]
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	609a      	str	r2, [r3, #8]
 8024b52:	683b      	ldr	r3, [r7, #0]
 8024b54:	68da      	ldr	r2, [r3, #12]
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	60da      	str	r2, [r3, #12]
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	370c      	adds	r7, #12
 8024b60:	46bd      	mov	sp, r7
 8024b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b66:	4770      	bx	lr

08024b68 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8024b68:	b580      	push	{r7, lr}
 8024b6a:	b082      	sub	sp, #8
 8024b6c:	af00      	add	r7, sp, #0
 8024b6e:	6078      	str	r0, [r7, #4]
 8024b70:	6878      	ldr	r0, [r7, #4]
 8024b72:	f000 ff7f 	bl	8025a74 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	4618      	mov	r0, r3
 8024b7a:	3708      	adds	r7, #8
 8024b7c:	46bd      	mov	sp, r7
 8024b7e:	bd80      	pop	{r7, pc}

08024b80 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8024b80:	b580      	push	{r7, lr}
 8024b82:	b082      	sub	sp, #8
 8024b84:	af00      	add	r7, sp, #0
 8024b86:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8024b88:	687b      	ldr	r3, [r7, #4]
 8024b8a:	2200      	movs	r2, #0
 8024b8c:	601a      	str	r2, [r3, #0]
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	2200      	movs	r2, #0
 8024b92:	605a      	str	r2, [r3, #4]
 8024b94:	687b      	ldr	r3, [r7, #4]
 8024b96:	3308      	adds	r3, #8
 8024b98:	4618      	mov	r0, r3
 8024b9a:	f000 ff76 	bl	8025a8a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	3318      	adds	r3, #24
 8024ba2:	4618      	mov	r0, r3
 8024ba4:	f000 ff71 	bl	8025a8a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8024ba8:	687b      	ldr	r3, [r7, #4]
 8024baa:	4618      	mov	r0, r3
 8024bac:	3708      	adds	r7, #8
 8024bae:	46bd      	mov	sp, r7
 8024bb0:	bd80      	pop	{r7, pc}

08024bb2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024bb2:	b480      	push	{r7}
 8024bb4:	b083      	sub	sp, #12
 8024bb6:	af00      	add	r7, sp, #0
 8024bb8:	6078      	str	r0, [r7, #4]
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	4618      	mov	r0, r3
 8024bbe:	370c      	adds	r7, #12
 8024bc0:	46bd      	mov	sp, r7
 8024bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bc6:	4770      	bx	lr

08024bc8 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024bc8:	b480      	push	{r7}
 8024bca:	b083      	sub	sp, #12
 8024bcc:	af00      	add	r7, sp, #0
 8024bce:	6078      	str	r0, [r7, #4]
 8024bd0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	681a      	ldr	r2, [r3, #0]
 8024bd6:	683b      	ldr	r3, [r7, #0]
 8024bd8:	681b      	ldr	r3, [r3, #0]
 8024bda:	429a      	cmp	r2, r3
 8024bdc:	d201      	bcs.n	8024be2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024bde:	683b      	ldr	r3, [r7, #0]
 8024be0:	e000      	b.n	8024be4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8024be2:	687b      	ldr	r3, [r7, #4]
    }
 8024be4:	4618      	mov	r0, r3
 8024be6:	370c      	adds	r7, #12
 8024be8:	46bd      	mov	sp, r7
 8024bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bee:	4770      	bx	lr

08024bf0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8024bf0:	b590      	push	{r4, r7, lr}
 8024bf2:	b085      	sub	sp, #20
 8024bf4:	af00      	add	r7, sp, #0
 8024bf6:	6078      	str	r0, [r7, #4]
 8024bf8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024bfa:	f107 030c 	add.w	r3, r7, #12
 8024bfe:	6879      	ldr	r1, [r7, #4]
 8024c00:	4618      	mov	r0, r3
 8024c02:	f000 f82c 	bl	8024c5e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c06:	f107 030c 	add.w	r3, r7, #12
 8024c0a:	6839      	ldr	r1, [r7, #0]
 8024c0c:	4618      	mov	r0, r3
 8024c0e:	f000 ff53 	bl	8025ab8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8024c12:	4604      	mov	r4, r0
 8024c14:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c16:	f107 030c 	add.w	r3, r7, #12
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	f000 f830 	bl	8024c80 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c20:	4623      	mov	r3, r4
      }
 8024c22:	4618      	mov	r0, r3
 8024c24:	3714      	adds	r7, #20
 8024c26:	46bd      	mov	sp, r7
 8024c28:	bd90      	pop	{r4, r7, pc}

08024c2a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024c2a:	b580      	push	{r7, lr}
 8024c2c:	b086      	sub	sp, #24
 8024c2e:	af00      	add	r7, sp, #0
 8024c30:	60f8      	str	r0, [r7, #12]
 8024c32:	60b9      	str	r1, [r7, #8]
 8024c34:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024c36:	68bb      	ldr	r3, [r7, #8]
 8024c38:	617b      	str	r3, [r7, #20]
 8024c3a:	697a      	ldr	r2, [r7, #20]
 8024c3c:	687b      	ldr	r3, [r7, #4]
 8024c3e:	429a      	cmp	r2, r3
 8024c40:	d209      	bcs.n	8024c56 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8024c42:	68f8      	ldr	r0, [r7, #12]
 8024c44:	f7ff fe46 	bl	80248d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024c48:	4602      	mov	r2, r0
 8024c4a:	697b      	ldr	r3, [r7, #20]
 8024c4c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024c4e:	697b      	ldr	r3, [r7, #20]
 8024c50:	3304      	adds	r3, #4
 8024c52:	617b      	str	r3, [r7, #20]
 8024c54:	e7f1      	b.n	8024c3a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8024c56:	bf00      	nop
 8024c58:	3718      	adds	r7, #24
 8024c5a:	46bd      	mov	sp, r7
 8024c5c:	bd80      	pop	{r7, pc}

08024c5e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024c5e:	b580      	push	{r7, lr}
 8024c60:	b082      	sub	sp, #8
 8024c62:	af00      	add	r7, sp, #0
 8024c64:	6078      	str	r0, [r7, #4]
 8024c66:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024c68:	6838      	ldr	r0, [r7, #0]
 8024c6a:	f000 fd18 	bl	802569e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024c6e:	4603      	mov	r3, r0
 8024c70:	4619      	mov	r1, r3
 8024c72:	6878      	ldr	r0, [r7, #4]
 8024c74:	f000 ff2f 	bl	8025ad6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8024c78:	6878      	ldr	r0, [r7, #4]
 8024c7a:	3708      	adds	r7, #8
 8024c7c:	46bd      	mov	sp, r7
 8024c7e:	bd80      	pop	{r7, pc}

08024c80 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024c80:	b580      	push	{r7, lr}
 8024c82:	b082      	sub	sp, #8
 8024c84:	af00      	add	r7, sp, #0
 8024c86:	6078      	str	r0, [r7, #4]
 8024c88:	6878      	ldr	r0, [r7, #4]
 8024c8a:	f000 ff31 	bl	8025af0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8024c8e:	687b      	ldr	r3, [r7, #4]
 8024c90:	4618      	mov	r0, r3
 8024c92:	3708      	adds	r7, #8
 8024c94:	46bd      	mov	sp, r7
 8024c96:	bd80      	pop	{r7, pc}

08024c98 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024c98:	b580      	push	{r7, lr}
 8024c9a:	b084      	sub	sp, #16
 8024c9c:	af00      	add	r7, sp, #0
 8024c9e:	60f8      	str	r0, [r7, #12]
 8024ca0:	60b9      	str	r1, [r7, #8]
 8024ca2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024ca4:	687a      	ldr	r2, [r7, #4]
 8024ca6:	68b9      	ldr	r1, [r7, #8]
 8024ca8:	68f8      	ldr	r0, [r7, #12]
 8024caa:	f000 ff2c 	bl	8025b06 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8024cae:	bf00      	nop
 8024cb0:	3710      	adds	r7, #16
 8024cb2:	46bd      	mov	sp, r7
 8024cb4:	bd80      	pop	{r7, pc}

08024cb6 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024cb6:	b580      	push	{r7, lr}
 8024cb8:	b082      	sub	sp, #8
 8024cba:	af00      	add	r7, sp, #0
 8024cbc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024cbe:	6878      	ldr	r0, [r7, #4]
 8024cc0:	f000 ff39 	bl	8025b36 <_ZNSaIjEC1Ev>
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	4618      	mov	r0, r3
 8024cc8:	f000 ff41 	bl	8025b4e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	4618      	mov	r0, r3
 8024cd0:	3708      	adds	r7, #8
 8024cd2:	46bd      	mov	sp, r7
 8024cd4:	bd80      	pop	{r7, pc}

08024cd6 <_ZNSaIjED1Ev>:
 8024cd6:	b580      	push	{r7, lr}
 8024cd8:	b082      	sub	sp, #8
 8024cda:	af00      	add	r7, sp, #0
 8024cdc:	6078      	str	r0, [r7, #4]
 8024cde:	6878      	ldr	r0, [r7, #4]
 8024ce0:	f000 ff4e 	bl	8025b80 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	4618      	mov	r0, r3
 8024ce8:	3708      	adds	r7, #8
 8024cea:	46bd      	mov	sp, r7
 8024cec:	bd80      	pop	{r7, pc}

08024cee <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024cee:	b590      	push	{r4, r7, lr}
 8024cf0:	b089      	sub	sp, #36	; 0x24
 8024cf2:	af00      	add	r7, sp, #0
 8024cf4:	6078      	str	r0, [r7, #4]
 8024cf6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024cf8:	2004      	movs	r0, #4
 8024cfa:	f7fc f8e5 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024cfe:	4602      	mov	r2, r0
 8024d00:	683b      	ldr	r3, [r7, #0]
 8024d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8024d06:	3301      	adds	r3, #1
 8024d08:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d0a:	2308      	movs	r3, #8
 8024d0c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024d0e:	69fb      	ldr	r3, [r7, #28]
 8024d10:	3302      	adds	r3, #2
 8024d12:	613b      	str	r3, [r7, #16]
 8024d14:	f107 0210 	add.w	r2, r7, #16
 8024d18:	f107 030c 	add.w	r3, r7, #12
 8024d1c:	4611      	mov	r1, r2
 8024d1e:	4618      	mov	r0, r3
 8024d20:	f7ff ff52 	bl	8024bc8 <_ZSt3maxIjERKT_S2_S2_>
 8024d24:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d26:	681a      	ldr	r2, [r3, #0]
 8024d28:	687b      	ldr	r3, [r7, #4]
 8024d2a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	685b      	ldr	r3, [r3, #4]
 8024d30:	4619      	mov	r1, r3
 8024d32:	6878      	ldr	r0, [r7, #4]
 8024d34:	f000 ff2f 	bl	8025b96 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8024d38:	4602      	mov	r2, r0
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	6859      	ldr	r1, [r3, #4]
 8024d46:	69fb      	ldr	r3, [r7, #28]
 8024d48:	1acb      	subs	r3, r1, r3
 8024d4a:	085b      	lsrs	r3, r3, #1
 8024d4c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024d4e:	4413      	add	r3, r2
 8024d50:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024d52:	69fb      	ldr	r3, [r7, #28]
 8024d54:	009b      	lsls	r3, r3, #2
 8024d56:	69ba      	ldr	r2, [r7, #24]
 8024d58:	4413      	add	r3, r2
 8024d5a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024d5c:	697a      	ldr	r2, [r7, #20]
 8024d5e:	69b9      	ldr	r1, [r7, #24]
 8024d60:	6878      	ldr	r0, [r7, #4]
 8024d62:	f000 ff35 	bl	8025bd0 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	3308      	adds	r3, #8
 8024d6a:	69b9      	ldr	r1, [r7, #24]
 8024d6c:	4618      	mov	r0, r3
 8024d6e:	f000 fe2e 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	f103 0218 	add.w	r2, r3, #24
 8024d78:	697b      	ldr	r3, [r7, #20]
 8024d7a:	3b04      	subs	r3, #4
 8024d7c:	4619      	mov	r1, r3
 8024d7e:	4610      	mov	r0, r2
 8024d80:	f000 fe25 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	68da      	ldr	r2, [r3, #12]
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024d90:	2004      	movs	r0, #4
 8024d92:	f7fc f899 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024d96:	4602      	mov	r2, r0
 8024d98:	683b      	ldr	r3, [r7, #0]
 8024d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8024d9e:	fb01 f202 	mul.w	r2, r1, r2
 8024da2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024da4:	009b      	lsls	r3, r3, #2
 8024da6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	619a      	str	r2, [r3, #24]
    }
 8024dac:	bf00      	nop
 8024dae:	3724      	adds	r7, #36	; 0x24
 8024db0:	46bd      	mov	sp, r7
 8024db2:	bd90      	pop	{r4, r7, pc}

08024db4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8024db4:	b580      	push	{r7, lr}
 8024db6:	b086      	sub	sp, #24
 8024db8:	af00      	add	r7, sp, #0
 8024dba:	60f8      	str	r0, [r7, #12]
 8024dbc:	60b9      	str	r1, [r7, #8]
 8024dbe:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024dc0:	68bb      	ldr	r3, [r7, #8]
 8024dc2:	617b      	str	r3, [r7, #20]
 8024dc4:	697a      	ldr	r2, [r7, #20]
 8024dc6:	687b      	ldr	r3, [r7, #4]
 8024dc8:	429a      	cmp	r2, r3
 8024dca:	d209      	bcs.n	8024de0 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8024dcc:	697b      	ldr	r3, [r7, #20]
 8024dce:	681b      	ldr	r3, [r3, #0]
 8024dd0:	4619      	mov	r1, r3
 8024dd2:	68f8      	ldr	r0, [r7, #12]
 8024dd4:	f000 fe14 	bl	8025a00 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024dd8:	697b      	ldr	r3, [r7, #20]
 8024dda:	3304      	adds	r3, #4
 8024ddc:	617b      	str	r3, [r7, #20]
 8024dde:	e7f1      	b.n	8024dc4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8024de0:	bf00      	nop
 8024de2:	3718      	adds	r7, #24
 8024de4:	46bd      	mov	sp, r7
 8024de6:	bd80      	pop	{r7, pc}

08024de8 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024de8:	b580      	push	{r7, lr}
 8024dea:	b086      	sub	sp, #24
 8024dec:	af00      	add	r7, sp, #0
 8024dee:	60f8      	str	r0, [r7, #12]
 8024df0:	60b9      	str	r1, [r7, #8]
 8024df2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024df4:	f107 0314 	add.w	r3, r7, #20
 8024df8:	68f9      	ldr	r1, [r7, #12]
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	f000 ff02 	bl	8025c04 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024e00:	f107 0314 	add.w	r3, r7, #20
 8024e04:	687a      	ldr	r2, [r7, #4]
 8024e06:	68b9      	ldr	r1, [r7, #8]
 8024e08:	4618      	mov	r0, r3
 8024e0a:	f000 ff18 	bl	8025c3e <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024e0e:	f107 0314 	add.w	r3, r7, #20
 8024e12:	4618      	mov	r0, r3
 8024e14:	f000 ff07 	bl	8025c26 <_ZNSaIPjED1Ev>
      }
 8024e18:	bf00      	nop
 8024e1a:	3718      	adds	r7, #24
 8024e1c:	46bd      	mov	sp, r7
 8024e1e:	bd80      	pop	{r7, pc}

08024e20 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024e20:	b580      	push	{r7, lr}
 8024e22:	b082      	sub	sp, #8
 8024e24:	af00      	add	r7, sp, #0
 8024e26:	6078      	str	r0, [r7, #4]
 8024e28:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024e2a:	6839      	ldr	r1, [r7, #0]
 8024e2c:	6878      	ldr	r0, [r7, #4]
 8024e2e:	f000 ff15 	bl	8025c5c <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8024e32:	bf00      	nop
 8024e34:	3708      	adds	r7, #8
 8024e36:	46bd      	mov	sp, r7
 8024e38:	bd80      	pop	{r7, pc}

08024e3a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024e3a:	b580      	push	{r7, lr}
 8024e3c:	b086      	sub	sp, #24
 8024e3e:	af00      	add	r7, sp, #0
 8024e40:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024e42:	f107 0308 	add.w	r3, r7, #8
 8024e46:	6879      	ldr	r1, [r7, #4]
 8024e48:	4618      	mov	r0, r3
 8024e4a:	f7ff fa82 	bl	8024352 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024e4e:	f107 0308 	add.w	r3, r7, #8
 8024e52:	4619      	mov	r1, r3
 8024e54:	6878      	ldr	r0, [r7, #4]
 8024e56:	f7ff fcbd 	bl	80247d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8024e5a:	bf00      	nop
 8024e5c:	3718      	adds	r7, #24
 8024e5e:	46bd      	mov	sp, r7
 8024e60:	bd80      	pop	{r7, pc}

08024e62 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024e62:	b580      	push	{r7, lr}
 8024e64:	b082      	sub	sp, #8
 8024e66:	af00      	add	r7, sp, #0
 8024e68:	6078      	str	r0, [r7, #4]
 8024e6a:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8024e6c:	461a      	mov	r2, r3
 8024e6e:	6839      	ldr	r1, [r7, #0]
 8024e70:	6878      	ldr	r0, [r7, #4]
 8024e72:	f000 ff26 	bl	8025cc2 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
#endif
    }
 8024e76:	bf00      	nop
 8024e78:	3708      	adds	r7, #8
 8024e7a:	46bd      	mov	sp, r7
 8024e7c:	bd80      	pop	{r7, pc}

08024e7e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024e7e:	b580      	push	{r7, lr}
 8024e80:	b082      	sub	sp, #8
 8024e82:	af00      	add	r7, sp, #0
 8024e84:	6078      	str	r0, [r7, #4]
 8024e86:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024e88:	6839      	ldr	r1, [r7, #0]
 8024e8a:	6878      	ldr	r0, [r7, #4]
 8024e8c:	f000 ff26 	bl	8025cdc <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8024e90:	bf00      	nop
 8024e92:	3708      	adds	r7, #8
 8024e94:	46bd      	mov	sp, r7
 8024e96:	bd80      	pop	{r7, pc}

08024e98 <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024e98:	b580      	push	{r7, lr}
 8024e9a:	b086      	sub	sp, #24
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024ea0:	f107 0308 	add.w	r3, r7, #8
 8024ea4:	6879      	ldr	r1, [r7, #4]
 8024ea6:	4618      	mov	r0, r3
 8024ea8:	f7ff fad9 	bl	802445e <_ZNSt5dequeIjSaIjEE5beginEv>
 8024eac:	f107 0308 	add.w	r3, r7, #8
 8024eb0:	4619      	mov	r1, r3
 8024eb2:	6878      	ldr	r0, [r7, #4]
 8024eb4:	f000 ff45 	bl	8025d42 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8024eb8:	bf00      	nop
 8024eba:	3718      	adds	r7, #24
 8024ebc:	46bd      	mov	sp, r7
 8024ebe:	bd80      	pop	{r7, pc}

08024ec0 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b082      	sub	sp, #8
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	6078      	str	r0, [r7, #4]
 8024ec8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024eca:	461a      	mov	r2, r3
 8024ecc:	6839      	ldr	r1, [r7, #0]
 8024ece:	6878      	ldr	r0, [r7, #4]
 8024ed0:	f000 ff6a 	bl	8025da8 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024ed4:	bf00      	nop
 8024ed6:	3708      	adds	r7, #8
 8024ed8:	46bd      	mov	sp, r7
 8024eda:	bd80      	pop	{r7, pc}

08024edc <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8024edc:	b480      	push	{r7}
 8024ede:	b085      	sub	sp, #20
 8024ee0:	af00      	add	r7, sp, #0
 8024ee2:	60f8      	str	r0, [r7, #12]
 8024ee4:	60b9      	str	r1, [r7, #8]
 8024ee6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8024ee8:	68ba      	ldr	r2, [r7, #8]
 8024eea:	68fb      	ldr	r3, [r7, #12]
 8024eec:	1ad3      	subs	r3, r2, r3
 8024eee:	109b      	asrs	r3, r3, #2
 8024ef0:	4a04      	ldr	r2, [pc, #16]	; (8024f04 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8024ef2:	fb02 f303 	mul.w	r3, r2, r3
    }
 8024ef6:	4618      	mov	r0, r3
 8024ef8:	3714      	adds	r7, #20
 8024efa:	46bd      	mov	sp, r7
 8024efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f00:	4770      	bx	lr
 8024f02:	bf00      	nop
 8024f04:	cccccccd 	.word	0xcccccccd

08024f08 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8024f08:	b480      	push	{r7}
 8024f0a:	b085      	sub	sp, #20
 8024f0c:	af00      	add	r7, sp, #0
 8024f0e:	60f8      	str	r0, [r7, #12]
 8024f10:	60b9      	str	r1, [r7, #8]
 8024f12:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8024f14:	68fb      	ldr	r3, [r7, #12]
 8024f16:	6819      	ldr	r1, [r3, #0]
 8024f18:	68ba      	ldr	r2, [r7, #8]
 8024f1a:	4613      	mov	r3, r2
 8024f1c:	009b      	lsls	r3, r3, #2
 8024f1e:	4413      	add	r3, r2
 8024f20:	009b      	lsls	r3, r3, #2
 8024f22:	18ca      	adds	r2, r1, r3
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	601a      	str	r2, [r3, #0]
    }
 8024f28:	bf00      	nop
 8024f2a:	3714      	adds	r7, #20
 8024f2c:	46bd      	mov	sp, r7
 8024f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f32:	4770      	bx	lr

08024f34 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024f34:	b480      	push	{r7}
 8024f36:	b083      	sub	sp, #12
 8024f38:	af00      	add	r7, sp, #0
 8024f3a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024f3c:	687b      	ldr	r3, [r7, #4]
 8024f3e:	4618      	mov	r0, r3
 8024f40:	370c      	adds	r7, #12
 8024f42:	46bd      	mov	sp, r7
 8024f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f48:	4770      	bx	lr

08024f4a <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024f4a:	b5b0      	push	{r4, r5, r7, lr}
 8024f4c:	b090      	sub	sp, #64	; 0x40
 8024f4e:	af00      	add	r7, sp, #0
 8024f50:	60f8      	str	r0, [r7, #12]
 8024f52:	60b9      	str	r1, [r7, #8]
 8024f54:	607a      	str	r2, [r7, #4]
 8024f56:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8024f58:	68b8      	ldr	r0, [r7, #8]
 8024f5a:	f000 ff32 	bl	8025dc2 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024f5e:	4604      	mov	r4, r0
 8024f60:	6878      	ldr	r0, [r7, #4]
 8024f62:	f000 ff2e 	bl	8025dc2 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024f66:	4605      	mov	r5, r0
 8024f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024f6c:	6839      	ldr	r1, [r7, #0]
 8024f6e:	4618      	mov	r0, r3
 8024f70:	f7ff fa0d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024f74:	f107 0320 	add.w	r3, r7, #32
 8024f78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8024f7c:	4611      	mov	r1, r2
 8024f7e:	4618      	mov	r0, r3
 8024f80:	f000 ff2a 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8024f84:	f107 0010 	add.w	r0, r7, #16
 8024f88:	f107 0320 	add.w	r3, r7, #32
 8024f8c:	462a      	mov	r2, r5
 8024f8e:	4621      	mov	r1, r4
 8024f90:	f000 ff44 	bl	8025e1c <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8024f94:	68fb      	ldr	r3, [r7, #12]
 8024f96:	f107 0210 	add.w	r2, r7, #16
 8024f9a:	6839      	ldr	r1, [r7, #0]
 8024f9c:	4618      	mov	r0, r3
 8024f9e:	f000 ff8f 	bl	8025ec0 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8024fa2:	68f8      	ldr	r0, [r7, #12]
 8024fa4:	3740      	adds	r7, #64	; 0x40
 8024fa6:	46bd      	mov	sp, r7
 8024fa8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08024fac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8024fac:	b580      	push	{r7, lr}
 8024fae:	b086      	sub	sp, #24
 8024fb0:	af00      	add	r7, sp, #0
 8024fb2:	60f8      	str	r0, [r7, #12]
 8024fb4:	60b9      	str	r1, [r7, #8]
 8024fb6:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024fb8:	68bb      	ldr	r3, [r7, #8]
 8024fba:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8024fbc:	68bb      	ldr	r3, [r7, #8]
 8024fbe:	68db      	ldr	r3, [r3, #12]
 8024fc0:	1ad3      	subs	r3, r2, r3
 8024fc2:	109b      	asrs	r3, r3, #2
 8024fc4:	4a0d      	ldr	r2, [pc, #52]	; (8024ffc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8024fc6:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024fca:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8024fcc:	687a      	ldr	r2, [r7, #4]
 8024fce:	697b      	ldr	r3, [r7, #20]
 8024fd0:	429a      	cmp	r2, r3
 8024fd2:	d906      	bls.n	8024fe2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8024fd4:	687a      	ldr	r2, [r7, #4]
 8024fd6:	697b      	ldr	r3, [r7, #20]
 8024fd8:	1ad3      	subs	r3, r2, r3
 8024fda:	4619      	mov	r1, r3
 8024fdc:	68b8      	ldr	r0, [r7, #8]
 8024fde:	f000 ff7d 	bl	8025edc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8024fe2:	68bb      	ldr	r3, [r7, #8]
 8024fe4:	f103 0108 	add.w	r1, r3, #8
 8024fe8:	687a      	ldr	r2, [r7, #4]
 8024fea:	68fb      	ldr	r3, [r7, #12]
 8024fec:	4618      	mov	r0, r3
 8024fee:	f000 ffbb 	bl	8025f68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8024ff2:	68f8      	ldr	r0, [r7, #12]
 8024ff4:	3718      	adds	r7, #24
 8024ff6:	46bd      	mov	sp, r7
 8024ff8:	bd80      	pop	{r7, pc}
 8024ffa:	bf00      	nop
 8024ffc:	cccccccd 	.word	0xcccccccd

08025000 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025000:	b580      	push	{r7, lr}
 8025002:	b088      	sub	sp, #32
 8025004:	af00      	add	r7, sp, #0
 8025006:	60f8      	str	r0, [r7, #12]
 8025008:	60b9      	str	r1, [r7, #8]
 802500a:	607a      	str	r2, [r7, #4]
 802500c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 802500e:	f107 0310 	add.w	r3, r7, #16
 8025012:	6839      	ldr	r1, [r7, #0]
 8025014:	4618      	mov	r0, r3
 8025016:	f7ff f9ba 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802501a:	68f8      	ldr	r0, [r7, #12]
 802501c:	f107 0310 	add.w	r3, r7, #16
 8025020:	687a      	ldr	r2, [r7, #4]
 8025022:	68b9      	ldr	r1, [r7, #8]
 8025024:	f000 ffb3 	bl	8025f8e <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8025028:	68f8      	ldr	r0, [r7, #12]
 802502a:	3720      	adds	r7, #32
 802502c:	46bd      	mov	sp, r7
 802502e:	bd80      	pop	{r7, pc}

08025030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8025030:	b580      	push	{r7, lr}
 8025032:	b086      	sub	sp, #24
 8025034:	af00      	add	r7, sp, #0
 8025036:	60f8      	str	r0, [r7, #12]
 8025038:	60b9      	str	r1, [r7, #8]
 802503a:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 802503c:	68bb      	ldr	r3, [r7, #8]
 802503e:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8025040:	68bb      	ldr	r3, [r7, #8]
 8025042:	699b      	ldr	r3, [r3, #24]
 8025044:	1ad3      	subs	r3, r2, r3
 8025046:	109b      	asrs	r3, r3, #2
 8025048:	4a0d      	ldr	r2, [pc, #52]	; (8025080 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 802504a:	fb02 f303 	mul.w	r3, r2, r3
 802504e:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025050:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025052:	687a      	ldr	r2, [r7, #4]
 8025054:	697b      	ldr	r3, [r7, #20]
 8025056:	429a      	cmp	r2, r3
 8025058:	d906      	bls.n	8025068 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 802505a:	687a      	ldr	r2, [r7, #4]
 802505c:	697b      	ldr	r3, [r7, #20]
 802505e:	1ad3      	subs	r3, r2, r3
 8025060:	4619      	mov	r1, r3
 8025062:	68b8      	ldr	r0, [r7, #8]
 8025064:	f000 ffae 	bl	8025fc4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8025068:	68bb      	ldr	r3, [r7, #8]
 802506a:	f103 0118 	add.w	r1, r3, #24
 802506e:	687a      	ldr	r2, [r7, #4]
 8025070:	68fb      	ldr	r3, [r7, #12]
 8025072:	4618      	mov	r0, r3
 8025074:	f7ff fc82 	bl	802497c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025078:	68f8      	ldr	r0, [r7, #12]
 802507a:	3718      	adds	r7, #24
 802507c:	46bd      	mov	sp, r7
 802507e:	bd80      	pop	{r7, pc}
 8025080:	cccccccd 	.word	0xcccccccd

08025084 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 8025084:	b5b0      	push	{r4, r5, r7, lr}
 8025086:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 802508a:	af04      	add	r7, sp, #16
 802508c:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8025090:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8025094:	6020      	str	r0, [r4, #0]
 8025096:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 802509a:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 802509e:	6001      	str	r1, [r0, #0]
 80250a0:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80250a4:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80250a8:	600a      	str	r2, [r1, #0]
 80250aa:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80250ae:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80250b2:	6013      	str	r3, [r2, #0]
      _M_insert_aux(iterator __pos,
		    _ForwardIterator __first, _ForwardIterator __last,
		    size_type __n)
      {
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 80250b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250b8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	f103 0208 	add.w	r2, r3, #8
 80250c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250c6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80250ca:	4611      	mov	r1, r2
 80250cc:	6818      	ldr	r0, [r3, #0]
 80250ce:	f7fe ff6b 	bl	8023fa8 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 80250d2:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 80250d6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250da:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80250de:	6818      	ldr	r0, [r3, #0]
 80250e0:	f7fe fcdb 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80250e4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 80250e8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80250ec:	085a      	lsrs	r2, r3, #1
 80250ee:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80250f2:	429a      	cmp	r2, r3
 80250f4:	f240 8158 	bls.w	80253a8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 80250f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250fc:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8025100:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025104:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025108:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802510c:	6819      	ldr	r1, [r3, #0]
 802510e:	f7ff ff4d 	bl	8024fac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8025112:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025116:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802511a:	681b      	ldr	r3, [r3, #0]
 802511c:	f103 0208 	add.w	r2, r3, #8
 8025120:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025124:	4611      	mov	r1, r2
 8025126:	4618      	mov	r0, r3
 8025128:	f7ff f931 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 802512c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025130:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	f103 0108 	add.w	r1, r3, #8
 802513a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802513e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8025142:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8025146:	4618      	mov	r0, r3
 8025148:	f7ff fc18 	bl	802497c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802514c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025150:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025154:	681a      	ldr	r2, [r3, #0]
 8025156:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802515a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802515e:	4614      	mov	r4, r2
 8025160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    __try
	      {
		if (__elemsbefore >= difference_type(__n))
 8025166:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 802516a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802516e:	429a      	cmp	r2, r3
 8025170:	f2c0 8098 	blt.w	80252a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		  {
		    iterator __start_n = (this->_M_impl._M_start
 8025174:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025178:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802517c:	681b      	ldr	r3, [r3, #0]
 802517e:	f103 0108 	add.w	r1, r3, #8
 8025182:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025186:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802518a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 802518e:	4618      	mov	r0, r3
 8025190:	f7ff fbf4 	bl	802497c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
					  + difference_type(__n));
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025194:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025198:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	f103 0208 	add.w	r2, r3, #8
 80251a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80251a6:	4611      	mov	r1, r2
 80251a8:	4618      	mov	r0, r3
 80251aa:	f7ff f8f0 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80251b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80251b6:	4611      	mov	r1, r2
 80251b8:	4618      	mov	r0, r3
 80251ba:	f7ff f8e8 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80251c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80251c6:	4611      	mov	r1, r2
 80251c8:	4618      	mov	r0, r3
 80251ca:	f7ff f8e0 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						__start_n, __new_start,
						_M_get_Tp_allocator());
 80251ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	4618      	mov	r0, r3
 80251da:	f7fe ff11 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80251de:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80251e0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251e4:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 80251e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80251ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80251f0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80251f4:	9400      	str	r4, [sp, #0]
 80251f6:	f000 ff29 	bl	802604c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 80251fa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251fe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025202:	681b      	ldr	r3, [r3, #0]
 8025204:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025208:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 802520c:	f103 0408 	add.w	r4, r3, #8
 8025210:	4613      	mov	r3, r2
 8025212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8025218:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802521c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025220:	4611      	mov	r1, r2
 8025222:	4618      	mov	r0, r3
 8025224:	f7ff f8b3 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025228:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802522c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025230:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025234:	6819      	ldr	r1, [r3, #0]
 8025236:	4610      	mov	r0, r2
 8025238:	f7ff f8a9 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802523c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025240:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025244:	4611      	mov	r1, r2
 8025246:	4618      	mov	r0, r3
 8025248:	f7ff f8a1 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802524c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025250:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8025254:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025258:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 802525c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8025260:	f000 ff2d 	bl	80260be <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8025264:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025268:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802526c:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8025270:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025274:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025278:	6819      	ldr	r1, [r3, #0]
 802527a:	f000 fe75 	bl	8025f68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802527e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025282:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8025286:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 802528a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802528e:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025292:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025296:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 802529a:	6812      	ldr	r2, [r2, #0]
 802529c:	6809      	ldr	r1, [r1, #0]
 802529e:	f7ff f9f1 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
			       __new_finish._M_node + 1);
	      __throw_exception_again;
	    }
	}
      }
 80252a2:	e1dd      	b.n	8025660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80252a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80252ac:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252b0:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80252b4:	6812      	ldr	r2, [r2, #0]
 80252b6:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 80252b8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80252bc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80252c0:	1ad2      	subs	r2, r2, r3
 80252c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80252c6:	4611      	mov	r1, r2
 80252c8:	4618      	mov	r0, r3
 80252ca:	f000 ff2e 	bl	802612a <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80252ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	f103 0208 	add.w	r2, r3, #8
 80252dc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80252e0:	4611      	mov	r1, r2
 80252e2:	4618      	mov	r0, r3
 80252e4:	f7ff f853 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80252e8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252ec:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80252f0:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80252f4:	6819      	ldr	r1, [r3, #0]
 80252f6:	4610      	mov	r0, r2
 80252f8:	f7ff f849 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80252fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025300:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025304:	681c      	ldr	r4, [r3, #0]
 8025306:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802530a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 802530e:	4611      	mov	r1, r2
 8025310:	4618      	mov	r0, r3
 8025312:	f7ff f83c 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 8025316:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802531a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802531e:	681b      	ldr	r3, [r3, #0]
 8025320:	4618      	mov	r0, r3
 8025322:	f7fe fe6d 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025326:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025328:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802532c:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8025330:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025334:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8025338:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 802533c:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8025340:	9202      	str	r2, [sp, #8]
 8025342:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8025346:	9201      	str	r2, [sp, #4]
 8025348:	9400      	str	r4, [sp, #0]
 802534a:	681b      	ldr	r3, [r3, #0]
 802534c:	462a      	mov	r2, r5
 802534e:	f000 feff 	bl	8026150 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 8025352:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025356:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025360:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025364:	f103 0408 	add.w	r4, r3, #8
 8025368:	4613      	mov	r3, r2
 802536a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802536c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8025370:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025374:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025378:	681c      	ldr	r4, [r3, #0]
 802537a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802537e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8025382:	4611      	mov	r1, r2
 8025384:	4618      	mov	r0, r3
 8025386:	f7ff f802 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802538a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802538e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8025392:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8025396:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802539a:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802539e:	6812      	ldr	r2, [r2, #0]
 80253a0:	4621      	mov	r1, r4
 80253a2:	f7ff f96f 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80253a6:	e15b      	b.n	8025660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 80253a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253ac:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 80253b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253b8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80253bc:	6819      	ldr	r1, [r3, #0]
 80253be:	f7ff fe37 	bl	8025030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 80253c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	f103 0218 	add.w	r2, r3, #24
 80253d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80253d4:	4611      	mov	r1, r2
 80253d6:	4618      	mov	r0, r3
 80253d8:	f7fe ffd9 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 80253dc:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 80253e0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80253e4:	1ad3      	subs	r3, r2, r3
 80253e6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 80253ea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	f103 0118 	add.w	r1, r3, #24
 80253f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025400:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025404:	4618      	mov	r0, r3
 8025406:	f000 fdaf 	bl	8025f68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802540a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802540e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025412:	681a      	ldr	r2, [r3, #0]
 8025414:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025418:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 802541c:	4614      	mov	r4, r2
 802541e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8025424:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8025428:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 802542c:	429a      	cmp	r2, r3
 802542e:	f340 8096 	ble.w	802555e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8025432:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025436:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	f103 0118 	add.w	r1, r3, #24
 8025440:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025444:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025448:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802544c:	4618      	mov	r0, r3
 802544e:	f000 fd8b 	bl	8025f68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8025452:	f107 0218 	add.w	r2, r7, #24
 8025456:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 802545a:	4611      	mov	r1, r2
 802545c:	4618      	mov	r0, r3
 802545e:	f7fe ff96 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8025462:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025466:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802546a:	681b      	ldr	r3, [r3, #0]
 802546c:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8025470:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8025474:	4611      	mov	r1, r2
 8025476:	4618      	mov	r0, r3
 8025478:	f7fe ff89 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 802547c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025480:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 802548a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802548e:	4611      	mov	r1, r2
 8025490:	4618      	mov	r0, r3
 8025492:	f7fe ff7c 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 8025496:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802549a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	4618      	mov	r0, r3
 80254a2:	f7fe fdad 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80254a6:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80254a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254ac:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80254b0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80254b4:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80254b8:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80254bc:	9400      	str	r4, [sp, #0]
 80254be:	f000 fdc5 	bl	802604c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80254c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254ca:	681b      	ldr	r3, [r3, #0]
 80254cc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80254d0:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80254d4:	f103 0418 	add.w	r4, r3, #24
 80254d8:	4613      	mov	r3, r2
 80254da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80254dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 80254e0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254e4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80254e8:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80254ec:	6819      	ldr	r1, [r3, #0]
 80254ee:	4610      	mov	r0, r2
 80254f0:	f7fe ff4d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80254f4:	f107 0218 	add.w	r2, r7, #24
 80254f8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80254fc:	4611      	mov	r1, r2
 80254fe:	4618      	mov	r0, r3
 8025500:	f7fe ff45 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8025508:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802550c:	4611      	mov	r1, r2
 802550e:	4618      	mov	r0, r3
 8025510:	f7fe ff3d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025514:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8025518:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802551c:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8025520:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8025524:	f000 fe54 	bl	80261d0 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8025528:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802552c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025530:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8025534:	6819      	ldr	r1, [r3, #0]
 8025536:	4610      	mov	r0, r2
 8025538:	f7fe ff29 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802553c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8025540:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025544:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025548:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802554c:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025550:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025554:	6812      	ldr	r2, [r2, #0]
 8025556:	6809      	ldr	r1, [r1, #0]
 8025558:	f7ff f894 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 802555c:	e080      	b.n	8025660 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 802555e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025562:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025566:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802556a:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802556e:	6812      	ldr	r2, [r2, #0]
 8025570:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8025572:	f107 0314 	add.w	r3, r7, #20
 8025576:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 802557a:	4618      	mov	r0, r3
 802557c:	f000 fdd5 	bl	802612a <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025580:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025584:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025588:	681c      	ldr	r4, [r3, #0]
 802558a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802558e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025592:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8025596:	6819      	ldr	r1, [r3, #0]
 8025598:	4610      	mov	r0, r2
 802559a:	f7fe fef8 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 802559e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255ac:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80255b0:	4611      	mov	r1, r2
 80255b2:	4618      	mov	r0, r3
 80255b4:	f7fe feeb 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80255b8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255bc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255c6:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80255ca:	4611      	mov	r1, r2
 80255cc:	4618      	mov	r0, r3
 80255ce:	f7fe fede 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 80255d2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255da:	681b      	ldr	r3, [r3, #0]
 80255dc:	4618      	mov	r0, r3
 80255de:	f7fe fd0f 	bl	8024000 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80255e2:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255e4:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80255e8:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80255ec:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80255f0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80255f4:	9302      	str	r3, [sp, #8]
 80255f6:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80255fa:	9301      	str	r3, [sp, #4]
 80255fc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025600:	9300      	str	r3, [sp, #0]
 8025602:	460b      	mov	r3, r1
 8025604:	6812      	ldr	r2, [r2, #0]
 8025606:	4621      	mov	r1, r4
 8025608:	f000 fe18 	bl	802623c <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 802560c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025610:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025614:	681b      	ldr	r3, [r3, #0]
 8025616:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802561a:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 802561e:	f103 0418 	add.w	r4, r3, #24
 8025622:	4613      	mov	r3, r2
 8025624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 802562a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802562e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025632:	681c      	ldr	r4, [r3, #0]
 8025634:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025638:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802563c:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8025640:	6819      	ldr	r1, [r3, #0]
 8025642:	4610      	mov	r0, r2
 8025644:	f7fe fea3 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025648:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 802564c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8025650:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025654:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8025658:	4622      	mov	r2, r4
 802565a:	6809      	ldr	r1, [r1, #0]
 802565c:	f7ff f812 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025660:	bf00      	nop
 8025662:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8025666:	46bd      	mov	sp, r7
 8025668:	bdb0      	pop	{r4, r5, r7, pc}

0802566a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802566a:	b580      	push	{r7, lr}
 802566c:	b084      	sub	sp, #16
 802566e:	af00      	add	r7, sp, #0
 8025670:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8025672:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025676:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8025678:	6878      	ldr	r0, [r7, #4]
 802567a:	f000 fe1f 	bl	80262bc <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 802567e:	4603      	mov	r3, r0
 8025680:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8025682:	f107 0208 	add.w	r2, r7, #8
 8025686:	f107 030c 	add.w	r3, r7, #12
 802568a:	4611      	mov	r1, r2
 802568c:	4618      	mov	r0, r3
 802568e:	f000 fe21 	bl	80262d4 <_ZSt3minIjERKT_S2_S2_>
 8025692:	4603      	mov	r3, r0
 8025694:	681b      	ldr	r3, [r3, #0]
      }
 8025696:	4618      	mov	r0, r3
 8025698:	3710      	adds	r7, #16
 802569a:	46bd      	mov	sp, r7
 802569c:	bd80      	pop	{r7, pc}

0802569e <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 802569e:	b480      	push	{r7}
 80256a0:	b083      	sub	sp, #12
 80256a2:	af00      	add	r7, sp, #0
 80256a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80256a6:	687b      	ldr	r3, [r7, #4]
 80256a8:	4618      	mov	r0, r3
 80256aa:	370c      	adds	r7, #12
 80256ac:	46bd      	mov	sp, r7
 80256ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256b2:	4770      	bx	lr

080256b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80256b4:	b590      	push	{r4, r7, lr}
 80256b6:	b08b      	sub	sp, #44	; 0x2c
 80256b8:	af00      	add	r7, sp, #0
 80256ba:	60f8      	str	r0, [r7, #12]
 80256bc:	60b9      	str	r1, [r7, #8]
 80256be:	4613      	mov	r3, r2
 80256c0:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80256c6:	68fb      	ldr	r3, [r7, #12]
 80256c8:	695b      	ldr	r3, [r3, #20]
 80256ca:	1ad3      	subs	r3, r2, r3
 80256cc:	109b      	asrs	r3, r3, #2
 80256ce:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80256d0:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80256d2:	68bb      	ldr	r3, [r7, #8]
 80256d4:	6a3a      	ldr	r2, [r7, #32]
 80256d6:	4413      	add	r3, r2
 80256d8:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80256da:	68fb      	ldr	r3, [r7, #12]
 80256dc:	685a      	ldr	r2, [r3, #4]
 80256de:	69fb      	ldr	r3, [r7, #28]
 80256e0:	005b      	lsls	r3, r3, #1
 80256e2:	429a      	cmp	r2, r3
 80256e4:	d92d      	bls.n	8025742 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80256e6:	68fb      	ldr	r3, [r7, #12]
 80256e8:	681a      	ldr	r2, [r3, #0]
 80256ea:	68fb      	ldr	r3, [r7, #12]
 80256ec:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80256ee:	69fb      	ldr	r3, [r7, #28]
 80256f0:	1acb      	subs	r3, r1, r3
 80256f2:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80256f4:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80256f6:	79fb      	ldrb	r3, [r7, #7]
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	d002      	beq.n	8025702 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80256fc:	68bb      	ldr	r3, [r7, #8]
 80256fe:	009b      	lsls	r3, r3, #2
 8025700:	e000      	b.n	8025704 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8025702:	2300      	movs	r3, #0
 8025704:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8025706:	4413      	add	r3, r2
 8025708:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802570a:	68fb      	ldr	r3, [r7, #12]
 802570c:	695b      	ldr	r3, [r3, #20]
 802570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025710:	429a      	cmp	r2, r3
 8025712:	d209      	bcs.n	8025728 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8025714:	68fb      	ldr	r3, [r7, #12]
 8025716:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8025718:	68fb      	ldr	r3, [r7, #12]
 802571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 802571c:	3304      	adds	r3, #4
 802571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025720:	4619      	mov	r1, r3
 8025722:	f000 fdeb 	bl	80262fc <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8025726:	e048      	b.n	80257ba <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025728:	68fb      	ldr	r3, [r7, #12]
 802572a:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 802572c:	68fb      	ldr	r3, [r7, #12]
 802572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025730:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8025732:	6a3b      	ldr	r3, [r7, #32]
 8025734:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025738:	4413      	add	r3, r2
 802573a:	461a      	mov	r2, r3
 802573c:	f000 fdf6 	bl	802632c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8025740:	e03b      	b.n	80257ba <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025742:	68fb      	ldr	r3, [r7, #12]
 8025744:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8025746:	68fb      	ldr	r3, [r7, #12]
 8025748:	3304      	adds	r3, #4
 802574a:	f107 0208 	add.w	r2, r7, #8
 802574e:	4611      	mov	r1, r2
 8025750:	4618      	mov	r0, r3
 8025752:	f7ff fa39 	bl	8024bc8 <_ZSt3maxIjERKT_S2_S2_>
 8025756:	4603      	mov	r3, r0
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 802575c:	3302      	adds	r3, #2
 802575e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8025760:	68fb      	ldr	r3, [r7, #12]
 8025762:	69b9      	ldr	r1, [r7, #24]
 8025764:	4618      	mov	r0, r3
 8025766:	f7ff fa43 	bl	8024bf0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802576a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802576c:	69ba      	ldr	r2, [r7, #24]
 802576e:	69fb      	ldr	r3, [r7, #28]
 8025770:	1ad3      	subs	r3, r2, r3
 8025772:	085b      	lsrs	r3, r3, #1
 8025774:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8025776:	79fb      	ldrb	r3, [r7, #7]
 8025778:	2b00      	cmp	r3, #0
 802577a:	d002      	beq.n	8025782 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 802577c:	68bb      	ldr	r3, [r7, #8]
 802577e:	009b      	lsls	r3, r3, #2
 8025780:	e000      	b.n	8025784 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8025782:	2300      	movs	r3, #0
 8025784:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8025786:	697a      	ldr	r2, [r7, #20]
 8025788:	4413      	add	r3, r2
 802578a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802578c:	68fb      	ldr	r3, [r7, #12]
 802578e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8025790:	68fb      	ldr	r3, [r7, #12]
 8025792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8025794:	3304      	adds	r3, #4
 8025796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025798:	4619      	mov	r1, r3
 802579a:	f000 fdaf 	bl	80262fc <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802579e:	68f8      	ldr	r0, [r7, #12]
 80257a0:	68fb      	ldr	r3, [r7, #12]
 80257a2:	6819      	ldr	r1, [r3, #0]
 80257a4:	68fb      	ldr	r3, [r7, #12]
 80257a6:	685b      	ldr	r3, [r3, #4]
 80257a8:	461a      	mov	r2, r3
 80257aa:	f7fe fdb6 	bl	802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 80257ae:	68fb      	ldr	r3, [r7, #12]
 80257b0:	697a      	ldr	r2, [r7, #20]
 80257b2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80257b4:	68fb      	ldr	r3, [r7, #12]
 80257b6:	69ba      	ldr	r2, [r7, #24]
 80257b8:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80257ba:	68fb      	ldr	r3, [r7, #12]
 80257bc:	3308      	adds	r3, #8
 80257be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80257c0:	4618      	mov	r0, r3
 80257c2:	f7ff f899 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80257c6:	68fb      	ldr	r3, [r7, #12]
 80257c8:	f103 0018 	add.w	r0, r3, #24
 80257cc:	6a3a      	ldr	r2, [r7, #32]
 80257ce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80257d2:	4413      	add	r3, r2
 80257d4:	009b      	lsls	r3, r3, #2
 80257d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257d8:	4413      	add	r3, r2
 80257da:	4619      	mov	r1, r3
 80257dc:	f7ff f88c 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80257e0:	bf00      	nop
 80257e2:	372c      	adds	r7, #44	; 0x2c
 80257e4:	46bd      	mov	sp, r7
 80257e6:	bd90      	pop	{r4, r7, pc}

080257e8 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80257e8:	b580      	push	{r7, lr}
 80257ea:	b082      	sub	sp, #8
 80257ec:	af00      	add	r7, sp, #0
 80257ee:	6078      	str	r0, [r7, #4]
 80257f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80257f2:	2200      	movs	r2, #0
 80257f4:	6839      	ldr	r1, [r7, #0]
 80257f6:	6878      	ldr	r0, [r7, #4]
 80257f8:	f000 fdb0 	bl	802635c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 80257fc:	4603      	mov	r3, r0
 80257fe:	4618      	mov	r0, r3
 8025800:	3708      	adds	r7, #8
 8025802:	46bd      	mov	sp, r7
 8025804:	bd80      	pop	{r7, pc}

08025806 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025806:	b580      	push	{r7, lr}
 8025808:	b084      	sub	sp, #16
 802580a:	af00      	add	r7, sp, #0
 802580c:	60f8      	str	r0, [r7, #12]
 802580e:	60b9      	str	r1, [r7, #8]
 8025810:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025812:	687a      	ldr	r2, [r7, #4]
 8025814:	68b9      	ldr	r1, [r7, #8]
 8025816:	68f8      	ldr	r0, [r7, #12]
 8025818:	f000 fdc1 	bl	802639e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 802581c:	bf00      	nop
 802581e:	3710      	adds	r7, #16
 8025820:	46bd      	mov	sp, r7
 8025822:	bd80      	pop	{r7, pc}

08025824 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8025824:	b590      	push	{r4, r7, lr}
 8025826:	b085      	sub	sp, #20
 8025828:	af00      	add	r7, sp, #0
 802582a:	6078      	str	r0, [r7, #4]
 802582c:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 802582e:	687b      	ldr	r3, [r7, #4]
 8025830:	681a      	ldr	r2, [r3, #0]
 8025832:	687b      	ldr	r3, [r7, #4]
 8025834:	685b      	ldr	r3, [r3, #4]
 8025836:	1ad3      	subs	r3, r2, r3
 8025838:	109b      	asrs	r3, r3, #2
 802583a:	4a2b      	ldr	r2, [pc, #172]	; (80258e8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 802583c:	fb02 f303 	mul.w	r3, r2, r3
 8025840:	461a      	mov	r2, r3
 8025842:	683b      	ldr	r3, [r7, #0]
 8025844:	4413      	add	r3, r2
 8025846:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8025848:	68fb      	ldr	r3, [r7, #12]
 802584a:	2b00      	cmp	r3, #0
 802584c:	db08      	blt.n	8025860 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 802584e:	f7ff f882 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025852:	4603      	mov	r3, r0
 8025854:	461a      	mov	r2, r3
 8025856:	68fb      	ldr	r3, [r7, #12]
 8025858:	4293      	cmp	r3, r2
 802585a:	da01      	bge.n	8025860 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 802585c:	2301      	movs	r3, #1
 802585e:	e000      	b.n	8025862 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8025860:	2300      	movs	r3, #0
 8025862:	2b00      	cmp	r3, #0
 8025864:	d00a      	beq.n	802587c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	6819      	ldr	r1, [r3, #0]
 802586a:	683a      	ldr	r2, [r7, #0]
 802586c:	4613      	mov	r3, r2
 802586e:	009b      	lsls	r3, r3, #2
 8025870:	4413      	add	r3, r2
 8025872:	009b      	lsls	r3, r3, #2
 8025874:	18ca      	adds	r2, r1, r3
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	601a      	str	r2, [r3, #0]
 802587a:	e02f      	b.n	80258dc <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	2b00      	cmp	r3, #0
 8025880:	dd07      	ble.n	8025892 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 8025882:	f7ff f868 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025886:	4603      	mov	r3, r0
 8025888:	461a      	mov	r2, r3
 802588a:	68fb      	ldr	r3, [r7, #12]
 802588c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025890:	e007      	b.n	80258a2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8025896:	f7ff f85e 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802589a:	4603      	mov	r3, r0
 802589c:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80258a0:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80258a2:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80258a4:	687b      	ldr	r3, [r7, #4]
 80258a6:	68da      	ldr	r2, [r3, #12]
 80258a8:	68bb      	ldr	r3, [r7, #8]
 80258aa:	009b      	lsls	r3, r3, #2
 80258ac:	4413      	add	r3, r2
 80258ae:	4619      	mov	r1, r3
 80258b0:	6878      	ldr	r0, [r7, #4]
 80258b2:	f7ff f821 	bl	80248f8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80258ba:	f7ff f84c 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258be:	4603      	mov	r3, r0
 80258c0:	461a      	mov	r2, r3
 80258c2:	68bb      	ldr	r3, [r7, #8]
 80258c4:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 80258c8:	68fa      	ldr	r2, [r7, #12]
 80258ca:	1ad3      	subs	r3, r2, r3
 80258cc:	461a      	mov	r2, r3
 80258ce:	4613      	mov	r3, r2
 80258d0:	009b      	lsls	r3, r3, #2
 80258d2:	4413      	add	r3, r2
 80258d4:	009b      	lsls	r3, r3, #2
 80258d6:	18e2      	adds	r2, r4, r3
 80258d8:	687b      	ldr	r3, [r7, #4]
 80258da:	601a      	str	r2, [r3, #0]
	return *this;
 80258dc:	687b      	ldr	r3, [r7, #4]
      }
 80258de:	4618      	mov	r0, r3
 80258e0:	3714      	adds	r7, #20
 80258e2:	46bd      	mov	sp, r7
 80258e4:	bd90      	pop	{r4, r7, pc}
 80258e6:	bf00      	nop
 80258e8:	cccccccd 	.word	0xcccccccd

080258ec <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80258ec:	b480      	push	{r7}
 80258ee:	b083      	sub	sp, #12
 80258f0:	af00      	add	r7, sp, #0
 80258f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80258f4:	687b      	ldr	r3, [r7, #4]
 80258f6:	4618      	mov	r0, r3
 80258f8:	370c      	adds	r7, #12
 80258fa:	46bd      	mov	sp, r7
 80258fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025900:	4770      	bx	lr

08025902 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025902:	b590      	push	{r4, r7, lr}
 8025904:	b085      	sub	sp, #20
 8025906:	af00      	add	r7, sp, #0
 8025908:	60f8      	str	r0, [r7, #12]
 802590a:	60b9      	str	r1, [r7, #8]
 802590c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802590e:	6878      	ldr	r0, [r7, #4]
 8025910:	f7ff ffec 	bl	80258ec <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8025914:	4603      	mov	r3, r0
 8025916:	681c      	ldr	r4, [r3, #0]
 8025918:	68bb      	ldr	r3, [r7, #8]
 802591a:	4619      	mov	r1, r3
 802591c:	2004      	movs	r0, #4
 802591e:	f7fb fac7 	bl	8020eb0 <_ZnwjPv>
 8025922:	4603      	mov	r3, r0
 8025924:	601c      	str	r4, [r3, #0]
 8025926:	bf00      	nop
 8025928:	3714      	adds	r7, #20
 802592a:	46bd      	mov	sp, r7
 802592c:	bd90      	pop	{r4, r7, pc}

0802592e <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802592e:	b580      	push	{r7, lr}
 8025930:	b082      	sub	sp, #8
 8025932:	af00      	add	r7, sp, #0
 8025934:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8025936:	687b      	ldr	r3, [r7, #4]
 8025938:	f103 0218 	add.w	r2, r3, #24
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	3308      	adds	r3, #8
 8025940:	4619      	mov	r1, r3
 8025942:	4610      	mov	r0, r2
 8025944:	f000 fd3e 	bl	80263c4 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 8025948:	4603      	mov	r3, r0
 802594a:	4618      	mov	r0, r3
 802594c:	3708      	adds	r7, #8
 802594e:	46bd      	mov	sp, r7
 8025950:	bd80      	pop	{r7, pc}

08025952 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025952:	b580      	push	{r7, lr}
 8025954:	b082      	sub	sp, #8
 8025956:	af00      	add	r7, sp, #0
 8025958:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 802595a:	687b      	ldr	r3, [r7, #4]
 802595c:	4618      	mov	r0, r3
 802595e:	f000 fd6f 	bl	8026440 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025962:	4603      	mov	r3, r0
 8025964:	4618      	mov	r0, r3
 8025966:	f000 fd51 	bl	802640c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 802596a:	4603      	mov	r3, r0
 802596c:	4618      	mov	r0, r3
 802596e:	3708      	adds	r7, #8
 8025970:	46bd      	mov	sp, r7
 8025972:	bd80      	pop	{r7, pc}

08025974 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8025974:	b580      	push	{r7, lr}
 8025976:	b082      	sub	sp, #8
 8025978:	af00      	add	r7, sp, #0
 802597a:	6078      	str	r0, [r7, #4]
 802597c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802597e:	683b      	ldr	r3, [r7, #0]
 8025980:	1c5a      	adds	r2, r3, #1
 8025982:	687b      	ldr	r3, [r7, #4]
 8025984:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8025986:	6879      	ldr	r1, [r7, #4]
 8025988:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802598a:	6879      	ldr	r1, [r7, #4]
 802598c:	6809      	ldr	r1, [r1, #0]
 802598e:	1a41      	subs	r1, r0, r1
 8025990:	1089      	asrs	r1, r1, #2
 8025992:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025994:	429a      	cmp	r2, r3
 8025996:	d904      	bls.n	80259a2 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8025998:	2200      	movs	r2, #0
 802599a:	6839      	ldr	r1, [r7, #0]
 802599c:	6878      	ldr	r0, [r7, #4]
 802599e:	f000 fd5a 	bl	8026456 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 80259a2:	bf00      	nop
 80259a4:	3708      	adds	r7, #8
 80259a6:	46bd      	mov	sp, r7
 80259a8:	bd80      	pop	{r7, pc}

080259aa <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80259aa:	b590      	push	{r4, r7, lr}
 80259ac:	b083      	sub	sp, #12
 80259ae:	af00      	add	r7, sp, #0
 80259b0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80259b2:	687c      	ldr	r4, [r7, #4]
 80259b4:	2004      	movs	r0, #4
 80259b6:	f7fb fa87 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80259ba:	4603      	mov	r3, r0
 80259bc:	4619      	mov	r1, r3
 80259be:	4620      	mov	r0, r4
 80259c0:	f000 fde3 	bl	802658a <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 80259c4:	4603      	mov	r3, r0
      }
 80259c6:	4618      	mov	r0, r3
 80259c8:	370c      	adds	r7, #12
 80259ca:	46bd      	mov	sp, r7
 80259cc:	bd90      	pop	{r4, r7, pc}

080259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80259ce:	b590      	push	{r4, r7, lr}
 80259d0:	b083      	sub	sp, #12
 80259d2:	af00      	add	r7, sp, #0
 80259d4:	6078      	str	r0, [r7, #4]
 80259d6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	683a      	ldr	r2, [r7, #0]
 80259dc:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80259de:	683b      	ldr	r3, [r7, #0]
 80259e0:	681a      	ldr	r2, [r3, #0]
 80259e2:	687b      	ldr	r3, [r7, #4]
 80259e4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	685c      	ldr	r4, [r3, #4]
 80259ea:	f000 fddd 	bl	80265a8 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 80259ee:	4603      	mov	r3, r0
 80259f0:	009b      	lsls	r3, r3, #2
 80259f2:	18e2      	adds	r2, r4, r3
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	609a      	str	r2, [r3, #8]
      }
 80259f8:	bf00      	nop
 80259fa:	370c      	adds	r7, #12
 80259fc:	46bd      	mov	sp, r7
 80259fe:	bd90      	pop	{r4, r7, pc}

08025a00 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025a00:	b590      	push	{r4, r7, lr}
 8025a02:	b083      	sub	sp, #12
 8025a04:	af00      	add	r7, sp, #0
 8025a06:	6078      	str	r0, [r7, #4]
 8025a08:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025a0a:	687c      	ldr	r4, [r7, #4]
 8025a0c:	2004      	movs	r0, #4
 8025a0e:	f7fb fa5b 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025a12:	4603      	mov	r3, r0
 8025a14:	461a      	mov	r2, r3
 8025a16:	6839      	ldr	r1, [r7, #0]
 8025a18:	4620      	mov	r0, r4
 8025a1a:	f000 fdcd 	bl	80265b8 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8025a1e:	bf00      	nop
 8025a20:	370c      	adds	r7, #12
 8025a22:	46bd      	mov	sp, r7
 8025a24:	bd90      	pop	{r4, r7, pc}

08025a26 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8025a26:	b480      	push	{r7}
 8025a28:	b083      	sub	sp, #12
 8025a2a:	af00      	add	r7, sp, #0
 8025a2c:	6078      	str	r0, [r7, #4]
 8025a2e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a30:	683b      	ldr	r3, [r7, #0]
 8025a32:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a38:	683b      	ldr	r3, [r7, #0]
 8025a3a:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a3c:	687b      	ldr	r3, [r7, #4]
 8025a3e:	605a      	str	r2, [r3, #4]
 8025a40:	683b      	ldr	r3, [r7, #0]
 8025a42:	689a      	ldr	r2, [r3, #8]
 8025a44:	687b      	ldr	r3, [r7, #4]
 8025a46:	609a      	str	r2, [r3, #8]
 8025a48:	683b      	ldr	r3, [r7, #0]
 8025a4a:	68da      	ldr	r2, [r3, #12]
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	60da      	str	r2, [r3, #12]
 8025a50:	687b      	ldr	r3, [r7, #4]
 8025a52:	4618      	mov	r0, r3
 8025a54:	370c      	adds	r7, #12
 8025a56:	46bd      	mov	sp, r7
 8025a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a5c:	4770      	bx	lr

08025a5e <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8025a5e:	b480      	push	{r7}
 8025a60:	b083      	sub	sp, #12
 8025a62:	af00      	add	r7, sp, #0
 8025a64:	6078      	str	r0, [r7, #4]
 8025a66:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8025a68:	bf00      	nop
 8025a6a:	370c      	adds	r7, #12
 8025a6c:	46bd      	mov	sp, r7
 8025a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a72:	4770      	bx	lr

08025a74 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025a74:	b480      	push	{r7}
 8025a76:	b083      	sub	sp, #12
 8025a78:	af00      	add	r7, sp, #0
 8025a7a:	6078      	str	r0, [r7, #4]
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	4618      	mov	r0, r3
 8025a80:	370c      	adds	r7, #12
 8025a82:	46bd      	mov	sp, r7
 8025a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a88:	4770      	bx	lr

08025a8a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8025a8a:	b480      	push	{r7}
 8025a8c:	b083      	sub	sp, #12
 8025a8e:	af00      	add	r7, sp, #0
 8025a90:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8025a92:	687b      	ldr	r3, [r7, #4]
 8025a94:	2200      	movs	r2, #0
 8025a96:	601a      	str	r2, [r3, #0]
 8025a98:	687b      	ldr	r3, [r7, #4]
 8025a9a:	2200      	movs	r2, #0
 8025a9c:	605a      	str	r2, [r3, #4]
 8025a9e:	687b      	ldr	r3, [r7, #4]
 8025aa0:	2200      	movs	r2, #0
 8025aa2:	609a      	str	r2, [r3, #8]
 8025aa4:	687b      	ldr	r3, [r7, #4]
 8025aa6:	2200      	movs	r2, #0
 8025aa8:	60da      	str	r2, [r3, #12]
 8025aaa:	687b      	ldr	r3, [r7, #4]
 8025aac:	4618      	mov	r0, r3
 8025aae:	370c      	adds	r7, #12
 8025ab0:	46bd      	mov	sp, r7
 8025ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ab6:	4770      	bx	lr

08025ab8 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8025ab8:	b580      	push	{r7, lr}
 8025aba:	b082      	sub	sp, #8
 8025abc:	af00      	add	r7, sp, #0
 8025abe:	6078      	str	r0, [r7, #4]
 8025ac0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	6839      	ldr	r1, [r7, #0]
 8025ac6:	6878      	ldr	r0, [r7, #4]
 8025ac8:	f000 fd85 	bl	80265d6 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025acc:	4603      	mov	r3, r0
 8025ace:	4618      	mov	r0, r3
 8025ad0:	3708      	adds	r7, #8
 8025ad2:	46bd      	mov	sp, r7
 8025ad4:	bd80      	pop	{r7, pc}

08025ad6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8025ad6:	b580      	push	{r7, lr}
 8025ad8:	b082      	sub	sp, #8
 8025ada:	af00      	add	r7, sp, #0
 8025adc:	6078      	str	r0, [r7, #4]
 8025ade:	6039      	str	r1, [r7, #0]
 8025ae0:	6878      	ldr	r0, [r7, #4]
 8025ae2:	f000 fd96 	bl	8026612 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	4618      	mov	r0, r3
 8025aea:	3708      	adds	r7, #8
 8025aec:	46bd      	mov	sp, r7
 8025aee:	bd80      	pop	{r7, pc}

08025af0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025af0:	b480      	push	{r7}
 8025af2:	b083      	sub	sp, #12
 8025af4:	af00      	add	r7, sp, #0
 8025af6:	6078      	str	r0, [r7, #4]
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	4618      	mov	r0, r3
 8025afc:	370c      	adds	r7, #12
 8025afe:	46bd      	mov	sp, r7
 8025b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b04:	4770      	bx	lr

08025b06 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8025b06:	b580      	push	{r7, lr}
 8025b08:	b084      	sub	sp, #16
 8025b0a:	af00      	add	r7, sp, #0
 8025b0c:	60f8      	str	r0, [r7, #12]
 8025b0e:	60b9      	str	r1, [r7, #8]
 8025b10:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025b12:	687b      	ldr	r3, [r7, #4]
 8025b14:	009b      	lsls	r3, r3, #2
 8025b16:	4619      	mov	r1, r3
 8025b18:	68b8      	ldr	r0, [r7, #8]
 8025b1a:	f016 f8e9 	bl	803bcf0 <_ZdlPvj>
      }
 8025b1e:	bf00      	nop
 8025b20:	3710      	adds	r7, #16
 8025b22:	46bd      	mov	sp, r7
 8025b24:	bd80      	pop	{r7, pc}

08025b26 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025b26:	b580      	push	{r7, lr}
 8025b28:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025b2a:	2014      	movs	r0, #20
 8025b2c:	f7fb f9cc 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025b30:	4603      	mov	r3, r0
 8025b32:	4618      	mov	r0, r3
 8025b34:	bd80      	pop	{r7, pc}

08025b36 <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025b36:	b580      	push	{r7, lr}
 8025b38:	b082      	sub	sp, #8
 8025b3a:	af00      	add	r7, sp, #0
 8025b3c:	6078      	str	r0, [r7, #4]
 8025b3e:	6878      	ldr	r0, [r7, #4]
 8025b40:	f000 fd72 	bl	8026628 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	4618      	mov	r0, r3
 8025b48:	3708      	adds	r7, #8
 8025b4a:	46bd      	mov	sp, r7
 8025b4c:	bd80      	pop	{r7, pc}

08025b4e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025b4e:	b580      	push	{r7, lr}
 8025b50:	b082      	sub	sp, #8
 8025b52:	af00      	add	r7, sp, #0
 8025b54:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	2200      	movs	r2, #0
 8025b5a:	601a      	str	r2, [r3, #0]
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	2200      	movs	r2, #0
 8025b60:	605a      	str	r2, [r3, #4]
 8025b62:	687b      	ldr	r3, [r7, #4]
 8025b64:	3308      	adds	r3, #8
 8025b66:	4618      	mov	r0, r3
 8025b68:	f000 fd69 	bl	802663e <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	3318      	adds	r3, #24
 8025b70:	4618      	mov	r0, r3
 8025b72:	f000 fd64 	bl	802663e <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	4618      	mov	r0, r3
 8025b7a:	3708      	adds	r7, #8
 8025b7c:	46bd      	mov	sp, r7
 8025b7e:	bd80      	pop	{r7, pc}

08025b80 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025b80:	b480      	push	{r7}
 8025b82:	b083      	sub	sp, #12
 8025b84:	af00      	add	r7, sp, #0
 8025b86:	6078      	str	r0, [r7, #4]
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	370c      	adds	r7, #12
 8025b8e:	46bd      	mov	sp, r7
 8025b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b94:	4770      	bx	lr

08025b96 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025b96:	b590      	push	{r4, r7, lr}
 8025b98:	b085      	sub	sp, #20
 8025b9a:	af00      	add	r7, sp, #0
 8025b9c:	6078      	str	r0, [r7, #4]
 8025b9e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025ba0:	f107 030c 	add.w	r3, r7, #12
 8025ba4:	6879      	ldr	r1, [r7, #4]
 8025ba6:	4618      	mov	r0, r3
 8025ba8:	f000 f82c 	bl	8025c04 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025bac:	f107 030c 	add.w	r3, r7, #12
 8025bb0:	6839      	ldr	r1, [r7, #0]
 8025bb2:	4618      	mov	r0, r3
 8025bb4:	f000 fd5a 	bl	802666c <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8025bb8:	4604      	mov	r4, r0
 8025bba:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025bbc:	f107 030c 	add.w	r3, r7, #12
 8025bc0:	4618      	mov	r0, r3
 8025bc2:	f000 f830 	bl	8025c26 <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025bc6:	4623      	mov	r3, r4
      }
 8025bc8:	4618      	mov	r0, r3
 8025bca:	3714      	adds	r7, #20
 8025bcc:	46bd      	mov	sp, r7
 8025bce:	bd90      	pop	{r4, r7, pc}

08025bd0 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025bd0:	b580      	push	{r7, lr}
 8025bd2:	b086      	sub	sp, #24
 8025bd4:	af00      	add	r7, sp, #0
 8025bd6:	60f8      	str	r0, [r7, #12]
 8025bd8:	60b9      	str	r1, [r7, #8]
 8025bda:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025bdc:	68bb      	ldr	r3, [r7, #8]
 8025bde:	617b      	str	r3, [r7, #20]
 8025be0:	697a      	ldr	r2, [r7, #20]
 8025be2:	687b      	ldr	r3, [r7, #4]
 8025be4:	429a      	cmp	r2, r3
 8025be6:	d209      	bcs.n	8025bfc <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025be8:	68f8      	ldr	r0, [r7, #12]
 8025bea:	f7ff fede 	bl	80259aa <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8025bee:	4602      	mov	r2, r0
 8025bf0:	697b      	ldr	r3, [r7, #20]
 8025bf2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025bf4:	697b      	ldr	r3, [r7, #20]
 8025bf6:	3304      	adds	r3, #4
 8025bf8:	617b      	str	r3, [r7, #20]
 8025bfa:	e7f1      	b.n	8025be0 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8025bfc:	bf00      	nop
 8025bfe:	3718      	adds	r7, #24
 8025c00:	46bd      	mov	sp, r7
 8025c02:	bd80      	pop	{r7, pc}

08025c04 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025c04:	b580      	push	{r7, lr}
 8025c06:	b082      	sub	sp, #8
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	6078      	str	r0, [r7, #4]
 8025c0c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025c0e:	6838      	ldr	r0, [r7, #0]
 8025c10:	f000 fc16 	bl	8026440 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025c14:	4603      	mov	r3, r0
 8025c16:	4619      	mov	r1, r3
 8025c18:	6878      	ldr	r0, [r7, #4]
 8025c1a:	f000 fd36 	bl	802668a <_ZNSaIPjEC1IjEERKSaIT_E>
 8025c1e:	6878      	ldr	r0, [r7, #4]
 8025c20:	3708      	adds	r7, #8
 8025c22:	46bd      	mov	sp, r7
 8025c24:	bd80      	pop	{r7, pc}

08025c26 <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025c26:	b580      	push	{r7, lr}
 8025c28:	b082      	sub	sp, #8
 8025c2a:	af00      	add	r7, sp, #0
 8025c2c:	6078      	str	r0, [r7, #4]
 8025c2e:	6878      	ldr	r0, [r7, #4]
 8025c30:	f000 fd38 	bl	80266a4 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8025c34:	687b      	ldr	r3, [r7, #4]
 8025c36:	4618      	mov	r0, r3
 8025c38:	3708      	adds	r7, #8
 8025c3a:	46bd      	mov	sp, r7
 8025c3c:	bd80      	pop	{r7, pc}

08025c3e <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025c3e:	b580      	push	{r7, lr}
 8025c40:	b084      	sub	sp, #16
 8025c42:	af00      	add	r7, sp, #0
 8025c44:	60f8      	str	r0, [r7, #12]
 8025c46:	60b9      	str	r1, [r7, #8]
 8025c48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025c4a:	687a      	ldr	r2, [r7, #4]
 8025c4c:	68b9      	ldr	r1, [r7, #8]
 8025c4e:	68f8      	ldr	r0, [r7, #12]
 8025c50:	f000 fd33 	bl	80266ba <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8025c54:	bf00      	nop
 8025c56:	3710      	adds	r7, #16
 8025c58:	46bd      	mov	sp, r7
 8025c5a:	bd80      	pop	{r7, pc}

08025c5c <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8025c5c:	b5b0      	push	{r4, r5, r7, lr}
 8025c5e:	b08c      	sub	sp, #48	; 0x30
 8025c60:	af00      	add	r7, sp, #0
 8025c62:	6078      	str	r0, [r7, #4]
 8025c64:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025c66:	6878      	ldr	r0, [r7, #4]
 8025c68:	f000 fd37 	bl	80266da <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025c6c:	4602      	mov	r2, r0
 8025c6e:	f107 0308 	add.w	r3, r7, #8
 8025c72:	4611      	mov	r1, r2
 8025c74:	4618      	mov	r0, r3
 8025c76:	f000 fd5f 	bl	8026738 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8025c7a:	6838      	ldr	r0, [r7, #0]
 8025c7c:	f000 fd2d 	bl	80266da <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025c80:	4602      	mov	r2, r0
 8025c82:	687b      	ldr	r3, [r7, #4]
 8025c84:	461c      	mov	r4, r3
 8025c86:	4615      	mov	r5, r2
 8025c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025c90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025c94:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025c98:	f107 0308 	add.w	r3, r7, #8
 8025c9c:	4618      	mov	r0, r3
 8025c9e:	f000 fd1c 	bl	80266da <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025ca2:	4602      	mov	r2, r0
 8025ca4:	683b      	ldr	r3, [r7, #0]
 8025ca6:	461c      	mov	r4, r3
 8025ca8:	4615      	mov	r5, r2
 8025caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025cb6:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025cba:	bf00      	nop
 8025cbc:	3730      	adds	r7, #48	; 0x30
 8025cbe:	46bd      	mov	sp, r7
 8025cc0:	bdb0      	pop	{r4, r5, r7, pc}

08025cc2 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025cc2:	b580      	push	{r7, lr}
 8025cc4:	b084      	sub	sp, #16
 8025cc6:	af00      	add	r7, sp, #0
 8025cc8:	60f8      	str	r0, [r7, #12]
 8025cca:	60b9      	str	r1, [r7, #8]
 8025ccc:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025cce:	68b8      	ldr	r0, [r7, #8]
 8025cd0:	f000 fd51 	bl	8026776 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8025cd4:	bf00      	nop
 8025cd6:	3710      	adds	r7, #16
 8025cd8:	46bd      	mov	sp, r7
 8025cda:	bd80      	pop	{r7, pc}

08025cdc <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8025cdc:	b5b0      	push	{r4, r5, r7, lr}
 8025cde:	b08c      	sub	sp, #48	; 0x30
 8025ce0:	af00      	add	r7, sp, #0
 8025ce2:	6078      	str	r0, [r7, #4]
 8025ce4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025ce6:	6878      	ldr	r0, [r7, #4]
 8025ce8:	f000 fd50 	bl	802678c <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025cec:	4602      	mov	r2, r0
 8025cee:	f107 0308 	add.w	r3, r7, #8
 8025cf2:	4611      	mov	r1, r2
 8025cf4:	4618      	mov	r0, r3
 8025cf6:	f000 fd78 	bl	80267ea <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8025cfa:	6838      	ldr	r0, [r7, #0]
 8025cfc:	f000 fd46 	bl	802678c <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d00:	4602      	mov	r2, r0
 8025d02:	687b      	ldr	r3, [r7, #4]
 8025d04:	461c      	mov	r4, r3
 8025d06:	4615      	mov	r5, r2
 8025d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d14:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025d18:	f107 0308 	add.w	r3, r7, #8
 8025d1c:	4618      	mov	r0, r3
 8025d1e:	f000 fd35 	bl	802678c <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d22:	4602      	mov	r2, r0
 8025d24:	683b      	ldr	r3, [r7, #0]
 8025d26:	461c      	mov	r4, r3
 8025d28:	4615      	mov	r5, r2
 8025d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d36:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025d3a:	bf00      	nop
 8025d3c:	3730      	adds	r7, #48	; 0x30
 8025d3e:	46bd      	mov	sp, r7
 8025d40:	bdb0      	pop	{r4, r5, r7, pc}

08025d42 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8025d42:	b590      	push	{r4, r7, lr}
 8025d44:	b08b      	sub	sp, #44	; 0x2c
 8025d46:	af00      	add	r7, sp, #0
 8025d48:	6078      	str	r0, [r7, #4]
 8025d4a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025d4c:	f107 0308 	add.w	r3, r7, #8
 8025d50:	6839      	ldr	r1, [r7, #0]
 8025d52:	4618      	mov	r0, r3
 8025d54:	f7fe fbac 	bl	80244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025d58:	f107 0318 	add.w	r3, r7, #24
 8025d5c:	6879      	ldr	r1, [r7, #4]
 8025d5e:	4618      	mov	r0, r3
 8025d60:	f7fe fb8c 	bl	802447c <_ZNSt5dequeIjSaIjEE3endEv>
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	4618      	mov	r0, r3
 8025d68:	f7fe fb97 	bl	802449a <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025d6c:	4603      	mov	r3, r0
 8025d6e:	f107 0218 	add.w	r2, r7, #24
 8025d72:	f107 0108 	add.w	r1, r7, #8
 8025d76:	6878      	ldr	r0, [r7, #4]
 8025d78:	f7fe fbb6 	bl	80244e8 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025d7c:	6878      	ldr	r0, [r7, #4]
 8025d7e:	683b      	ldr	r3, [r7, #0]
 8025d80:	68db      	ldr	r3, [r3, #12]
 8025d82:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025d88:	3304      	adds	r3, #4
 8025d8a:	461a      	mov	r2, r3
 8025d8c:	f7ff f812 	bl	8024db4 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8025d90:	687b      	ldr	r3, [r7, #4]
 8025d92:	683a      	ldr	r2, [r7, #0]
 8025d94:	f103 0418 	add.w	r4, r3, #24
 8025d98:	4613      	mov	r3, r2
 8025d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025da0:	bf00      	nop
 8025da2:	372c      	adds	r7, #44	; 0x2c
 8025da4:	46bd      	mov	sp, r7
 8025da6:	bd90      	pop	{r4, r7, pc}

08025da8 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025da8:	b580      	push	{r7, lr}
 8025daa:	b084      	sub	sp, #16
 8025dac:	af00      	add	r7, sp, #0
 8025dae:	60f8      	str	r0, [r7, #12]
 8025db0:	60b9      	str	r1, [r7, #8]
 8025db2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025db4:	68b8      	ldr	r0, [r7, #8]
 8025db6:	f000 fd37 	bl	8026828 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8025dba:	bf00      	nop
 8025dbc:	3710      	adds	r7, #16
 8025dbe:	46bd      	mov	sp, r7
 8025dc0:	bd80      	pop	{r7, pc}

08025dc2 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8025dc2:	b480      	push	{r7}
 8025dc4:	b083      	sub	sp, #12
 8025dc6:	af00      	add	r7, sp, #0
 8025dc8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025dca:	687b      	ldr	r3, [r7, #4]
 8025dcc:	4618      	mov	r0, r3
 8025dce:	370c      	adds	r7, #12
 8025dd0:	46bd      	mov	sp, r7
 8025dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd6:	4770      	bx	lr

08025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8025dd8:	b580      	push	{r7, lr}
 8025dda:	b082      	sub	sp, #8
 8025ddc:	af00      	add	r7, sp, #0
 8025dde:	6078      	str	r0, [r7, #4]
 8025de0:	6039      	str	r1, [r7, #0]
    { return __it; }
 8025de2:	6839      	ldr	r1, [r7, #0]
 8025de4:	6878      	ldr	r0, [r7, #4]
 8025de6:	f7fe fad2 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025dea:	6878      	ldr	r0, [r7, #4]
 8025dec:	3708      	adds	r7, #8
 8025dee:	46bd      	mov	sp, r7
 8025df0:	bd80      	pop	{r7, pc}

08025df2 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025df2:	b480      	push	{r7}
 8025df4:	b083      	sub	sp, #12
 8025df6:	af00      	add	r7, sp, #0
 8025df8:	6078      	str	r0, [r7, #4]
 8025dfa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025dfc:	683b      	ldr	r3, [r7, #0]
 8025dfe:	681a      	ldr	r2, [r3, #0]
 8025e00:	687b      	ldr	r3, [r7, #4]
 8025e02:	681b      	ldr	r3, [r3, #0]
 8025e04:	429a      	cmp	r2, r3
 8025e06:	da01      	bge.n	8025e0c <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8025e08:	683b      	ldr	r3, [r7, #0]
 8025e0a:	e000      	b.n	8025e0e <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8025e0c:	687b      	ldr	r3, [r7, #4]
    }
 8025e0e:	4618      	mov	r0, r3
 8025e10:	370c      	adds	r7, #12
 8025e12:	46bd      	mov	sp, r7
 8025e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e18:	4770      	bx	lr
	...

08025e1c <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8025e1c:	b580      	push	{r7, lr}
 8025e1e:	b088      	sub	sp, #32
 8025e20:	af00      	add	r7, sp, #0
 8025e22:	60f8      	str	r0, [r7, #12]
 8025e24:	60b9      	str	r1, [r7, #8]
 8025e26:	607a      	str	r2, [r7, #4]
 8025e28:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8025e2a:	687a      	ldr	r2, [r7, #4]
 8025e2c:	68bb      	ldr	r3, [r7, #8]
 8025e2e:	1ad3      	subs	r3, r2, r3
 8025e30:	109b      	asrs	r3, r3, #2
 8025e32:	4a22      	ldr	r2, [pc, #136]	; (8025ebc <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025e34:	fb02 f303 	mul.w	r3, r2, r3
 8025e38:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025e3a:	697b      	ldr	r3, [r7, #20]
 8025e3c:	2b00      	cmp	r3, #0
 8025e3e:	dd34      	ble.n	8025eaa <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8025e40:	683b      	ldr	r3, [r7, #0]
 8025e42:	689a      	ldr	r2, [r3, #8]
 8025e44:	683b      	ldr	r3, [r7, #0]
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	1ad3      	subs	r3, r2, r3
 8025e4a:	109b      	asrs	r3, r3, #2
 8025e4c:	4a1b      	ldr	r2, [pc, #108]	; (8025ebc <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025e4e:	fb02 f303 	mul.w	r3, r2, r3
 8025e52:	61bb      	str	r3, [r7, #24]
 8025e54:	f107 0218 	add.w	r2, r7, #24
 8025e58:	f107 0314 	add.w	r3, r7, #20
 8025e5c:	4611      	mov	r1, r2
 8025e5e:	4618      	mov	r0, r3
 8025e60:	f7ff ffc7 	bl	8025df2 <_ZSt3minIiERKT_S2_S2_>
 8025e64:	4603      	mov	r3, r0
	  const difference_type __clen
 8025e66:	681b      	ldr	r3, [r3, #0]
 8025e68:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8025e6a:	69fa      	ldr	r2, [r7, #28]
 8025e6c:	4613      	mov	r3, r2
 8025e6e:	009b      	lsls	r3, r3, #2
 8025e70:	4413      	add	r3, r2
 8025e72:	009b      	lsls	r3, r3, #2
 8025e74:	461a      	mov	r2, r3
 8025e76:	68bb      	ldr	r3, [r7, #8]
 8025e78:	1899      	adds	r1, r3, r2
 8025e7a:	683b      	ldr	r3, [r7, #0]
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	461a      	mov	r2, r3
 8025e80:	68b8      	ldr	r0, [r7, #8]
 8025e82:	f000 fcdc 	bl	802683e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8025e86:	69fa      	ldr	r2, [r7, #28]
 8025e88:	4613      	mov	r3, r2
 8025e8a:	009b      	lsls	r3, r3, #2
 8025e8c:	4413      	add	r3, r2
 8025e8e:	009b      	lsls	r3, r3, #2
 8025e90:	461a      	mov	r2, r3
 8025e92:	68bb      	ldr	r3, [r7, #8]
 8025e94:	4413      	add	r3, r2
 8025e96:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8025e98:	69f9      	ldr	r1, [r7, #28]
 8025e9a:	6838      	ldr	r0, [r7, #0]
 8025e9c:	f7ff fcc2 	bl	8025824 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8025ea0:	697a      	ldr	r2, [r7, #20]
 8025ea2:	69fb      	ldr	r3, [r7, #28]
 8025ea4:	1ad3      	subs	r3, r2, r3
 8025ea6:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025ea8:	e7c7      	b.n	8025e3a <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8025eaa:	6839      	ldr	r1, [r7, #0]
 8025eac:	68f8      	ldr	r0, [r7, #12]
 8025eae:	f7fe fa6e 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8025eb2:	68f8      	ldr	r0, [r7, #12]
 8025eb4:	3720      	adds	r7, #32
 8025eb6:	46bd      	mov	sp, r7
 8025eb8:	bd80      	pop	{r7, pc}
 8025eba:	bf00      	nop
 8025ebc:	cccccccd 	.word	0xcccccccd

08025ec0 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025ec0:	b580      	push	{r7, lr}
 8025ec2:	b084      	sub	sp, #16
 8025ec4:	af00      	add	r7, sp, #0
 8025ec6:	60f8      	str	r0, [r7, #12]
 8025ec8:	60b9      	str	r1, [r7, #8]
 8025eca:	607a      	str	r2, [r7, #4]
    { return __res; }
 8025ecc:	6879      	ldr	r1, [r7, #4]
 8025ece:	68f8      	ldr	r0, [r7, #12]
 8025ed0:	f7fe fa5d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025ed4:	68f8      	ldr	r0, [r7, #12]
 8025ed6:	3710      	adds	r7, #16
 8025ed8:	46bd      	mov	sp, r7
 8025eda:	bd80      	pop	{r7, pc}

08025edc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8025edc:	b590      	push	{r4, r7, lr}
 8025ede:	b085      	sub	sp, #20
 8025ee0:	af00      	add	r7, sp, #0
 8025ee2:	6078      	str	r0, [r7, #4]
 8025ee4:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025ee6:	6878      	ldr	r0, [r7, #4]
 8025ee8:	f7fe fccb 	bl	8024882 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025eec:	4604      	mov	r4, r0
 8025eee:	6878      	ldr	r0, [r7, #4]
 8025ef0:	f7fd fdd3 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025ef4:	4603      	mov	r3, r0
 8025ef6:	1ae3      	subs	r3, r4, r3
 8025ef8:	683a      	ldr	r2, [r7, #0]
 8025efa:	429a      	cmp	r2, r3
 8025efc:	bf8c      	ite	hi
 8025efe:	2301      	movhi	r3, #1
 8025f00:	2300      	movls	r3, #0
 8025f02:	b2db      	uxtb	r3, r3
 8025f04:	2b00      	cmp	r3, #0
 8025f06:	d002      	beq.n	8025f0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8025f08:	4816      	ldr	r0, [pc, #88]	; (8025f64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8025f0a:	f015 ff07 	bl	803bd1c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f0e:	f7ff fe0a 	bl	8025b26 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f12:	4602      	mov	r2, r0
 8025f14:	683b      	ldr	r3, [r7, #0]
 8025f16:	4413      	add	r3, r2
 8025f18:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025f1a:	f7ff fe04 	bl	8025b26 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f1e:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f20:	fbb4 f3f3 	udiv	r3, r4, r3
 8025f24:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8025f26:	68b9      	ldr	r1, [r7, #8]
 8025f28:	6878      	ldr	r0, [r7, #4]
 8025f2a:	f7fe fcbb 	bl	80248a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f2e:	2301      	movs	r3, #1
 8025f30:	60fb      	str	r3, [r7, #12]
 8025f32:	68fa      	ldr	r2, [r7, #12]
 8025f34:	68bb      	ldr	r3, [r7, #8]
 8025f36:	429a      	cmp	r2, r3
 8025f38:	d80f      	bhi.n	8025f5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8025f3a:	6879      	ldr	r1, [r7, #4]
 8025f3c:	687b      	ldr	r3, [r7, #4]
 8025f3e:	695a      	ldr	r2, [r3, #20]
 8025f40:	68fb      	ldr	r3, [r7, #12]
 8025f42:	009b      	lsls	r3, r3, #2
 8025f44:	425b      	negs	r3, r3
 8025f46:	18d4      	adds	r4, r2, r3
 8025f48:	4608      	mov	r0, r1
 8025f4a:	f7fe fcc3 	bl	80248d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025f4e:	4603      	mov	r3, r0
 8025f50:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f52:	68fb      	ldr	r3, [r7, #12]
 8025f54:	3301      	adds	r3, #1
 8025f56:	60fb      	str	r3, [r7, #12]
 8025f58:	e7eb      	b.n	8025f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8025f5a:	bf00      	nop
 8025f5c:	3714      	adds	r7, #20
 8025f5e:	46bd      	mov	sp, r7
 8025f60:	bd90      	pop	{r4, r7, pc}
 8025f62:	bf00      	nop
 8025f64:	0803de08 	.word	0x0803de08

08025f68 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025f68:	b580      	push	{r7, lr}
 8025f6a:	b084      	sub	sp, #16
 8025f6c:	af00      	add	r7, sp, #0
 8025f6e:	60f8      	str	r0, [r7, #12]
 8025f70:	60b9      	str	r1, [r7, #8]
 8025f72:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025f74:	68b9      	ldr	r1, [r7, #8]
 8025f76:	68f8      	ldr	r0, [r7, #12]
 8025f78:	f7fe fa09 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8025f7c:	6879      	ldr	r1, [r7, #4]
 8025f7e:	68f8      	ldr	r0, [r7, #12]
 8025f80:	f000 fc6d 	bl	802685e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8025f84:	bf00      	nop
      }
 8025f86:	68f8      	ldr	r0, [r7, #12]
 8025f88:	3710      	adds	r7, #16
 8025f8a:	46bd      	mov	sp, r7
 8025f8c:	bd80      	pop	{r7, pc}

08025f8e <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025f8e:	b580      	push	{r7, lr}
 8025f90:	b08a      	sub	sp, #40	; 0x28
 8025f92:	af00      	add	r7, sp, #0
 8025f94:	60f8      	str	r0, [r7, #12]
 8025f96:	60b9      	str	r1, [r7, #8]
 8025f98:	607a      	str	r2, [r7, #4]
 8025f9a:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025f9c:	2301      	movs	r3, #1
 8025f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8025fa2:	f107 0314 	add.w	r3, r7, #20
 8025fa6:	6839      	ldr	r1, [r7, #0]
 8025fa8:	4618      	mov	r0, r3
 8025faa:	f7fe f9f0 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fae:	68f8      	ldr	r0, [r7, #12]
 8025fb0:	f107 0314 	add.w	r3, r7, #20
 8025fb4:	687a      	ldr	r2, [r7, #4]
 8025fb6:	68b9      	ldr	r1, [r7, #8]
 8025fb8:	f000 fc61 	bl	802687e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8025fbc:	68f8      	ldr	r0, [r7, #12]
 8025fbe:	3728      	adds	r7, #40	; 0x28
 8025fc0:	46bd      	mov	sp, r7
 8025fc2:	bd80      	pop	{r7, pc}

08025fc4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8025fc4:	b590      	push	{r4, r7, lr}
 8025fc6:	b085      	sub	sp, #20
 8025fc8:	af00      	add	r7, sp, #0
 8025fca:	6078      	str	r0, [r7, #4]
 8025fcc:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025fce:	6878      	ldr	r0, [r7, #4]
 8025fd0:	f7fe fc57 	bl	8024882 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025fd4:	4604      	mov	r4, r0
 8025fd6:	6878      	ldr	r0, [r7, #4]
 8025fd8:	f7fd fd5f 	bl	8023a9a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025fdc:	4603      	mov	r3, r0
 8025fde:	1ae3      	subs	r3, r4, r3
 8025fe0:	683a      	ldr	r2, [r7, #0]
 8025fe2:	429a      	cmp	r2, r3
 8025fe4:	bf8c      	ite	hi
 8025fe6:	2301      	movhi	r3, #1
 8025fe8:	2300      	movls	r3, #0
 8025fea:	b2db      	uxtb	r3, r3
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	d002      	beq.n	8025ff6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8025ff0:	4815      	ldr	r0, [pc, #84]	; (8026048 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8025ff2:	f015 fe93 	bl	803bd1c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025ff6:	f7ff fd96 	bl	8025b26 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025ffa:	4602      	mov	r2, r0
 8025ffc:	683b      	ldr	r3, [r7, #0]
 8025ffe:	4413      	add	r3, r2
 8026000:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8026002:	f7ff fd90 	bl	8025b26 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8026006:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8026008:	fbb4 f3f3 	udiv	r3, r4, r3
 802600c:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 802600e:	68b9      	ldr	r1, [r7, #8]
 8026010:	6878      	ldr	r0, [r7, #4]
 8026012:	f000 fc4c 	bl	80268ae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8026016:	2301      	movs	r3, #1
 8026018:	60fb      	str	r3, [r7, #12]
 802601a:	68fa      	ldr	r2, [r7, #12]
 802601c:	68bb      	ldr	r3, [r7, #8]
 802601e:	429a      	cmp	r2, r3
 8026020:	d80e      	bhi.n	8026040 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8026022:	6879      	ldr	r1, [r7, #4]
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026028:	68fb      	ldr	r3, [r7, #12]
 802602a:	009b      	lsls	r3, r3, #2
 802602c:	18d4      	adds	r4, r2, r3
 802602e:	4608      	mov	r0, r1
 8026030:	f7fe fc50 	bl	80248d4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8026034:	4603      	mov	r3, r0
 8026036:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8026038:	68fb      	ldr	r3, [r7, #12]
 802603a:	3301      	adds	r3, #1
 802603c:	60fb      	str	r3, [r7, #12]
 802603e:	e7ec      	b.n	802601a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8026040:	bf00      	nop
 8026042:	3714      	adds	r7, #20
 8026044:	46bd      	mov	sp, r7
 8026046:	bd90      	pop	{r4, r7, pc}
 8026048:	0803de28 	.word	0x0803de28

0802604c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 802604c:	b590      	push	{r4, r7, lr}
 802604e:	b09b      	sub	sp, #108	; 0x6c
 8026050:	af02      	add	r7, sp, #8
 8026052:	60f8      	str	r0, [r7, #12]
 8026054:	60b9      	str	r1, [r7, #8]
 8026056:	607a      	str	r2, [r7, #4]
 8026058:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 802605a:	f107 0320 	add.w	r3, r7, #32
 802605e:	68b9      	ldr	r1, [r7, #8]
 8026060:	4618      	mov	r0, r3
 8026062:	f7fe f994 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026066:	f107 0310 	add.w	r3, r7, #16
 802606a:	f107 0220 	add.w	r2, r7, #32
 802606e:	4611      	mov	r1, r2
 8026070:	4618      	mov	r0, r3
 8026072:	f000 fc37 	bl	80268e4 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8026076:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802607a:	6879      	ldr	r1, [r7, #4]
 802607c:	4618      	mov	r0, r3
 802607e:	f7fe f986 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026086:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802608a:	4611      	mov	r1, r2
 802608c:	4618      	mov	r0, r3
 802608e:	f000 fc29 	bl	80268e4 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8026092:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026096:	6839      	ldr	r1, [r7, #0]
 8026098:	4618      	mov	r0, r3
 802609a:	f7fe f978 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802609e:	68f8      	ldr	r0, [r7, #12]
 80260a0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80260a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80260a8:	f107 0110 	add.w	r1, r7, #16
 80260ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80260ae:	9300      	str	r3, [sp, #0]
 80260b0:	4623      	mov	r3, r4
 80260b2:	f000 fc40 	bl	8026936 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 80260b6:	68f8      	ldr	r0, [r7, #12]
 80260b8:	3764      	adds	r7, #100	; 0x64
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd90      	pop	{r4, r7, pc}

080260be <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80260be:	b580      	push	{r7, lr}
 80260c0:	b098      	sub	sp, #96	; 0x60
 80260c2:	af00      	add	r7, sp, #0
 80260c4:	60f8      	str	r0, [r7, #12]
 80260c6:	60b9      	str	r1, [r7, #8]
 80260c8:	607a      	str	r2, [r7, #4]
 80260ca:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
				      std::__miter_base(__last), __result);
 80260cc:	f107 0320 	add.w	r3, r7, #32
 80260d0:	68b9      	ldr	r1, [r7, #8]
 80260d2:	4618      	mov	r0, r3
 80260d4:	f7fe f95b 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260d8:	f107 0310 	add.w	r3, r7, #16
 80260dc:	f107 0220 	add.w	r2, r7, #32
 80260e0:	4611      	mov	r1, r2
 80260e2:	4618      	mov	r0, r3
 80260e4:	f000 fc4d 	bl	8026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80260e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80260ec:	6879      	ldr	r1, [r7, #4]
 80260ee:	4618      	mov	r0, r3
 80260f0:	f7fe f94d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80260f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80260fc:	4611      	mov	r1, r2
 80260fe:	4618      	mov	r0, r3
 8026100:	f000 fc3f 	bl	8026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026108:	6839      	ldr	r1, [r7, #0]
 802610a:	4618      	mov	r0, r3
 802610c:	f7fe f93f 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026110:	68f8      	ldr	r0, [r7, #12]
 8026112:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026116:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802611a:	f107 0110 	add.w	r1, r7, #16
 802611e:	f000 fc3d 	bl	802699c <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026122:	68f8      	ldr	r0, [r7, #12]
 8026124:	3760      	adds	r7, #96	; 0x60
 8026126:	46bd      	mov	sp, r7
 8026128:	bd80      	pop	{r7, pc}

0802612a <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 802612a:	b590      	push	{r4, r7, lr}
 802612c:	b085      	sub	sp, #20
 802612e:	af00      	add	r7, sp, #0
 8026130:	6078      	str	r0, [r7, #4]
 8026132:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8026134:	683b      	ldr	r3, [r7, #0]
 8026136:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8026138:	6878      	ldr	r0, [r7, #4]
 802613a:	f7fe fac3 	bl	80246c4 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 802613e:	4622      	mov	r2, r4
 8026140:	68f9      	ldr	r1, [r7, #12]
 8026142:	6878      	ldr	r0, [r7, #4]
 8026144:	f7fe fee0 	bl	8024f08 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8026148:	bf00      	nop
 802614a:	3714      	adds	r7, #20
 802614c:	46bd      	mov	sp, r7
 802614e:	bd90      	pop	{r4, r7, pc}

08026150 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 8026150:	b590      	push	{r4, r7, lr}
 8026152:	b0a3      	sub	sp, #140	; 0x8c
 8026154:	af02      	add	r7, sp, #8
 8026156:	60f8      	str	r0, [r7, #12]
 8026158:	60b9      	str	r1, [r7, #8]
 802615a:	607a      	str	r2, [r7, #4]
 802615c:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 802615e:	f107 0320 	add.w	r3, r7, #32
 8026162:	68b9      	ldr	r1, [r7, #8]
 8026164:	4618      	mov	r0, r3
 8026166:	f7fe f912 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802616a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802616e:	6879      	ldr	r1, [r7, #4]
 8026170:	4618      	mov	r0, r3
 8026172:	f7fe f90c 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802617a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802617e:	4618      	mov	r0, r3
 8026180:	f7fe f905 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026184:	f107 0010 	add.w	r0, r7, #16
 8026188:	f107 0440 	add.w	r4, r7, #64	; 0x40
 802618c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026190:	f107 0120 	add.w	r1, r7, #32
 8026194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026198:	9300      	str	r3, [sp, #0]
 802619a:	4623      	mov	r3, r4
 802619c:	f7ff ff56 	bl	802604c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 80261a0:	f107 0210 	add.w	r2, r7, #16
 80261a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80261a8:	4611      	mov	r1, r2
 80261aa:	4618      	mov	r0, r3
 80261ac:	f7fe f8ef 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261b0:	68f8      	ldr	r0, [r7, #12]
 80261b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80261b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80261ba:	9300      	str	r3, [sp, #0]
 80261bc:	4613      	mov	r3, r2
 80261be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80261c2:	6839      	ldr	r1, [r7, #0]
 80261c4:	f7fe ff1c 	bl	8025000 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 80261c8:	68f8      	ldr	r0, [r7, #12]
 80261ca:	3784      	adds	r7, #132	; 0x84
 80261cc:	46bd      	mov	sp, r7
 80261ce:	bd90      	pop	{r4, r7, pc}

080261d0 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80261d0:	b580      	push	{r7, lr}
 80261d2:	b098      	sub	sp, #96	; 0x60
 80261d4:	af00      	add	r7, sp, #0
 80261d6:	60f8      	str	r0, [r7, #12]
 80261d8:	60b9      	str	r1, [r7, #8]
 80261da:	607a      	str	r2, [r7, #4]
 80261dc:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 80261de:	f107 0320 	add.w	r3, r7, #32
 80261e2:	68b9      	ldr	r1, [r7, #8]
 80261e4:	4618      	mov	r0, r3
 80261e6:	f7fe f8d2 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261ea:	f107 0310 	add.w	r3, r7, #16
 80261ee:	f107 0220 	add.w	r2, r7, #32
 80261f2:	4611      	mov	r1, r2
 80261f4:	4618      	mov	r0, r3
 80261f6:	f000 fbc4 	bl	8026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80261fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80261fe:	6879      	ldr	r1, [r7, #4]
 8026200:	4618      	mov	r0, r3
 8026202:	f7fe f8c4 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802620a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802620e:	4611      	mov	r1, r2
 8026210:	4618      	mov	r0, r3
 8026212:	f000 fbb6 	bl	8026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802621a:	6839      	ldr	r1, [r7, #0]
 802621c:	4618      	mov	r0, r3
 802621e:	f7fe f8b6 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026222:	68f8      	ldr	r0, [r7, #12]
 8026224:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026228:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802622c:	f107 0110 	add.w	r1, r7, #16
 8026230:	f000 fbfa 	bl	8026a28 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026234:	68f8      	ldr	r0, [r7, #12]
 8026236:	3760      	adds	r7, #96	; 0x60
 8026238:	46bd      	mov	sp, r7
 802623a:	bd80      	pop	{r7, pc}

0802623c <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 802623c:	b590      	push	{r4, r7, lr}
 802623e:	b0a3      	sub	sp, #140	; 0x8c
 8026240:	af02      	add	r7, sp, #8
 8026242:	60f8      	str	r0, [r7, #12]
 8026244:	60b9      	str	r1, [r7, #8]
 8026246:	607a      	str	r2, [r7, #4]
 8026248:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 802624a:	f107 0320 	add.w	r3, r7, #32
 802624e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8026252:	4618      	mov	r0, r3
 8026254:	f7fe f89b 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026258:	f107 0010 	add.w	r0, r7, #16
 802625c:	f107 0220 	add.w	r2, r7, #32
 8026260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026264:	9300      	str	r3, [sp, #0]
 8026266:	4613      	mov	r3, r2
 8026268:	687a      	ldr	r2, [r7, #4]
 802626a:	68b9      	ldr	r1, [r7, #8]
 802626c:	f7fe fec8 	bl	8025000 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8026270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026274:	6839      	ldr	r1, [r7, #0]
 8026276:	4618      	mov	r0, r3
 8026278:	f7fe f889 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802627c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026280:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8026284:	4618      	mov	r0, r3
 8026286:	f7fe f882 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802628a:	f107 0210 	add.w	r2, r7, #16
 802628e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026292:	4611      	mov	r1, r2
 8026294:	4618      	mov	r0, r3
 8026296:	f7fe f87a 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802629a:	68f8      	ldr	r0, [r7, #12]
 802629c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80262a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80262a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80262a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80262ac:	9300      	str	r3, [sp, #0]
 80262ae:	4623      	mov	r3, r4
 80262b0:	f7ff fecc 	bl	802604c <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 80262b4:	68f8      	ldr	r0, [r7, #12]
 80262b6:	3784      	adds	r7, #132	; 0x84
 80262b8:	46bd      	mov	sp, r7
 80262ba:	bd90      	pop	{r4, r7, pc}

080262bc <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80262bc:	b580      	push	{r7, lr}
 80262be:	b082      	sub	sp, #8
 80262c0:	af00      	add	r7, sp, #0
 80262c2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80262c4:	6878      	ldr	r0, [r7, #4]
 80262c6:	f000 fbf5 	bl	8026ab4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 80262ca:	4603      	mov	r3, r0
      }
 80262cc:	4618      	mov	r0, r3
 80262ce:	3708      	adds	r7, #8
 80262d0:	46bd      	mov	sp, r7
 80262d2:	bd80      	pop	{r7, pc}

080262d4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80262d4:	b480      	push	{r7}
 80262d6:	b083      	sub	sp, #12
 80262d8:	af00      	add	r7, sp, #0
 80262da:	6078      	str	r0, [r7, #4]
 80262dc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80262de:	683b      	ldr	r3, [r7, #0]
 80262e0:	681a      	ldr	r2, [r3, #0]
 80262e2:	687b      	ldr	r3, [r7, #4]
 80262e4:	681b      	ldr	r3, [r3, #0]
 80262e6:	429a      	cmp	r2, r3
 80262e8:	d201      	bcs.n	80262ee <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80262ea:	683b      	ldr	r3, [r7, #0]
 80262ec:	e000      	b.n	80262f0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80262ee:	687b      	ldr	r3, [r7, #4]
    }
 80262f0:	4618      	mov	r0, r3
 80262f2:	370c      	adds	r7, #12
 80262f4:	46bd      	mov	sp, r7
 80262f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262fa:	4770      	bx	lr

080262fc <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 80262fc:	b590      	push	{r4, r7, lr}
 80262fe:	b085      	sub	sp, #20
 8026300:	af00      	add	r7, sp, #0
 8026302:	60f8      	str	r0, [r7, #12]
 8026304:	60b9      	str	r1, [r7, #8]
 8026306:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026308:	68f8      	ldr	r0, [r7, #12]
 802630a:	f000 fbdf 	bl	8026acc <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802630e:	4604      	mov	r4, r0
 8026310:	68b8      	ldr	r0, [r7, #8]
 8026312:	f000 fbdb 	bl	8026acc <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026316:	4603      	mov	r3, r0
 8026318:	687a      	ldr	r2, [r7, #4]
 802631a:	4619      	mov	r1, r3
 802631c:	4620      	mov	r0, r4
 802631e:	f000 fbe0 	bl	8026ae2 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026322:	4603      	mov	r3, r0
    }
 8026324:	4618      	mov	r0, r3
 8026326:	3714      	adds	r7, #20
 8026328:	46bd      	mov	sp, r7
 802632a:	bd90      	pop	{r4, r7, pc}

0802632c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 802632c:	b590      	push	{r4, r7, lr}
 802632e:	b085      	sub	sp, #20
 8026330:	af00      	add	r7, sp, #0
 8026332:	60f8      	str	r0, [r7, #12]
 8026334:	60b9      	str	r1, [r7, #8]
 8026336:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026338:	68f8      	ldr	r0, [r7, #12]
 802633a:	f000 fbc7 	bl	8026acc <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802633e:	4604      	mov	r4, r0
 8026340:	68b8      	ldr	r0, [r7, #8]
 8026342:	f000 fbc3 	bl	8026acc <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026346:	4603      	mov	r3, r0
 8026348:	687a      	ldr	r2, [r7, #4]
 802634a:	4619      	mov	r1, r3
 802634c:	4620      	mov	r0, r4
 802634e:	f000 fbeb 	bl	8026b28 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026352:	4603      	mov	r3, r0
    }
 8026354:	4618      	mov	r0, r3
 8026356:	3714      	adds	r7, #20
 8026358:	46bd      	mov	sp, r7
 802635a:	bd90      	pop	{r4, r7, pc}

0802635c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802635c:	b580      	push	{r7, lr}
 802635e:	b084      	sub	sp, #16
 8026360:	af00      	add	r7, sp, #0
 8026362:	60f8      	str	r0, [r7, #12]
 8026364:	60b9      	str	r1, [r7, #8]
 8026366:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026368:	68f8      	ldr	r0, [r7, #12]
 802636a:	f000 fc01 	bl	8026b70 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802636e:	4602      	mov	r2, r0
 8026370:	68bb      	ldr	r3, [r7, #8]
 8026372:	4293      	cmp	r3, r2
 8026374:	bf8c      	ite	hi
 8026376:	2301      	movhi	r3, #1
 8026378:	2300      	movls	r3, #0
 802637a:	b2db      	uxtb	r3, r3
 802637c:	2b00      	cmp	r3, #0
 802637e:	d001      	beq.n	8026384 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026380:	f015 fcc9 	bl	803bd16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026384:	68ba      	ldr	r2, [r7, #8]
 8026386:	4613      	mov	r3, r2
 8026388:	009b      	lsls	r3, r3, #2
 802638a:	4413      	add	r3, r2
 802638c:	009b      	lsls	r3, r3, #2
 802638e:	4618      	mov	r0, r3
 8026390:	f015 fcb0 	bl	803bcf4 <_Znwj>
 8026394:	4603      	mov	r3, r0
      }
 8026396:	4618      	mov	r0, r3
 8026398:	3710      	adds	r7, #16
 802639a:	46bd      	mov	sp, r7
 802639c:	bd80      	pop	{r7, pc}

0802639e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 802639e:	b580      	push	{r7, lr}
 80263a0:	b084      	sub	sp, #16
 80263a2:	af00      	add	r7, sp, #0
 80263a4:	60f8      	str	r0, [r7, #12]
 80263a6:	60b9      	str	r1, [r7, #8]
 80263a8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80263aa:	687a      	ldr	r2, [r7, #4]
 80263ac:	4613      	mov	r3, r2
 80263ae:	009b      	lsls	r3, r3, #2
 80263b0:	4413      	add	r3, r2
 80263b2:	009b      	lsls	r3, r3, #2
 80263b4:	4619      	mov	r1, r3
 80263b6:	68b8      	ldr	r0, [r7, #8]
 80263b8:	f015 fc9a 	bl	803bcf0 <_ZdlPvj>
      }
 80263bc:	bf00      	nop
 80263be:	3710      	adds	r7, #16
 80263c0:	46bd      	mov	sp, r7
 80263c2:	bd80      	pop	{r7, pc}

080263c4 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80263c4:	b580      	push	{r7, lr}
 80263c6:	b082      	sub	sp, #8
 80263c8:	af00      	add	r7, sp, #0
 80263ca:	6078      	str	r0, [r7, #4]
 80263cc:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80263ce:	f000 f8eb 	bl	80265a8 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 80263d2:	4603      	mov	r3, r0
 80263d4:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	68da      	ldr	r2, [r3, #12]
 80263da:	683b      	ldr	r3, [r7, #0]
 80263dc:	68db      	ldr	r3, [r3, #12]
 80263de:	1ad3      	subs	r3, r2, r3
 80263e0:	109b      	asrs	r3, r3, #2
 80263e2:	3b01      	subs	r3, #1
 80263e4:	fb01 f303 	mul.w	r3, r1, r3
 80263e8:	687a      	ldr	r2, [r7, #4]
 80263ea:	6811      	ldr	r1, [r2, #0]
 80263ec:	687a      	ldr	r2, [r7, #4]
 80263ee:	6852      	ldr	r2, [r2, #4]
 80263f0:	1a8a      	subs	r2, r1, r2
 80263f2:	1092      	asrs	r2, r2, #2
 80263f4:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80263f6:	683a      	ldr	r2, [r7, #0]
 80263f8:	6891      	ldr	r1, [r2, #8]
 80263fa:	683a      	ldr	r2, [r7, #0]
 80263fc:	6812      	ldr	r2, [r2, #0]
 80263fe:	1a8a      	subs	r2, r1, r2
 8026400:	1092      	asrs	r2, r2, #2
 8026402:	4413      	add	r3, r2
      }
 8026404:	4618      	mov	r0, r3
 8026406:	3708      	adds	r7, #8
 8026408:	46bd      	mov	sp, r7
 802640a:	bd80      	pop	{r7, pc}

0802640c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802640c:	b580      	push	{r7, lr}
 802640e:	b084      	sub	sp, #16
 8026410:	af00      	add	r7, sp, #0
 8026412:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026414:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026418:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802641a:	6878      	ldr	r0, [r7, #4]
 802641c:	f000 fbb6 	bl	8026b8c <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8026420:	4603      	mov	r3, r0
 8026422:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026424:	f107 0208 	add.w	r2, r7, #8
 8026428:	f107 030c 	add.w	r3, r7, #12
 802642c:	4611      	mov	r1, r2
 802642e:	4618      	mov	r0, r3
 8026430:	f7ff ff50 	bl	80262d4 <_ZSt3minIjERKT_S2_S2_>
 8026434:	4603      	mov	r3, r0
 8026436:	681b      	ldr	r3, [r3, #0]
      }
 8026438:	4618      	mov	r0, r3
 802643a:	3710      	adds	r7, #16
 802643c:	46bd      	mov	sp, r7
 802643e:	bd80      	pop	{r7, pc}

08026440 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026440:	b480      	push	{r7}
 8026442:	b083      	sub	sp, #12
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8026448:	687b      	ldr	r3, [r7, #4]
 802644a:	4618      	mov	r0, r3
 802644c:	370c      	adds	r7, #12
 802644e:	46bd      	mov	sp, r7
 8026450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026454:	4770      	bx	lr

08026456 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8026456:	b590      	push	{r4, r7, lr}
 8026458:	b08b      	sub	sp, #44	; 0x2c
 802645a:	af00      	add	r7, sp, #0
 802645c:	60f8      	str	r0, [r7, #12]
 802645e:	60b9      	str	r1, [r7, #8]
 8026460:	4613      	mov	r3, r2
 8026462:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026464:	68fb      	ldr	r3, [r7, #12]
 8026466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026468:	68fb      	ldr	r3, [r7, #12]
 802646a:	695b      	ldr	r3, [r3, #20]
 802646c:	1ad3      	subs	r3, r2, r3
 802646e:	109b      	asrs	r3, r3, #2
 8026470:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026472:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026474:	68bb      	ldr	r3, [r7, #8]
 8026476:	6a3a      	ldr	r2, [r7, #32]
 8026478:	4413      	add	r3, r2
 802647a:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802647c:	68fb      	ldr	r3, [r7, #12]
 802647e:	685a      	ldr	r2, [r3, #4]
 8026480:	69fb      	ldr	r3, [r7, #28]
 8026482:	005b      	lsls	r3, r3, #1
 8026484:	429a      	cmp	r2, r3
 8026486:	d92d      	bls.n	80264e4 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026488:	68fb      	ldr	r3, [r7, #12]
 802648a:	681a      	ldr	r2, [r3, #0]
 802648c:	68fb      	ldr	r3, [r7, #12]
 802648e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026490:	69fb      	ldr	r3, [r7, #28]
 8026492:	1acb      	subs	r3, r1, r3
 8026494:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026496:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026498:	79fb      	ldrb	r3, [r7, #7]
 802649a:	2b00      	cmp	r3, #0
 802649c:	d002      	beq.n	80264a4 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 802649e:	68bb      	ldr	r3, [r7, #8]
 80264a0:	009b      	lsls	r3, r3, #2
 80264a2:	e000      	b.n	80264a6 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 80264a4:	2300      	movs	r3, #0
 80264a6:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264a8:	4413      	add	r3, r2
 80264aa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	695b      	ldr	r3, [r3, #20]
 80264b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264b2:	429a      	cmp	r2, r3
 80264b4:	d209      	bcs.n	80264ca <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80264b6:	68fb      	ldr	r3, [r7, #12]
 80264b8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80264ba:	68fb      	ldr	r3, [r7, #12]
 80264bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80264be:	3304      	adds	r3, #4
 80264c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264c2:	4619      	mov	r1, r3
 80264c4:	f000 fb6e 	bl	8026ba4 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 80264c8:	e048      	b.n	802655c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80264ca:	68fb      	ldr	r3, [r7, #12]
 80264cc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80264ce:	68fb      	ldr	r3, [r7, #12]
 80264d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80264d2:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80264d4:	6a3b      	ldr	r3, [r7, #32]
 80264d6:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80264d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264da:	4413      	add	r3, r2
 80264dc:	461a      	mov	r2, r3
 80264de:	f000 fb79 	bl	8026bd4 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 80264e2:	e03b      	b.n	802655c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80264e4:	68fb      	ldr	r3, [r7, #12]
 80264e6:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80264e8:	68fb      	ldr	r3, [r7, #12]
 80264ea:	3304      	adds	r3, #4
 80264ec:	f107 0208 	add.w	r2, r7, #8
 80264f0:	4611      	mov	r1, r2
 80264f2:	4618      	mov	r0, r3
 80264f4:	f7fe fb68 	bl	8024bc8 <_ZSt3maxIjERKT_S2_S2_>
 80264f8:	4603      	mov	r3, r0
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80264fe:	3302      	adds	r3, #2
 8026500:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	69b9      	ldr	r1, [r7, #24]
 8026506:	4618      	mov	r0, r3
 8026508:	f7ff fb45 	bl	8025b96 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 802650c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802650e:	69ba      	ldr	r2, [r7, #24]
 8026510:	69fb      	ldr	r3, [r7, #28]
 8026512:	1ad3      	subs	r3, r2, r3
 8026514:	085b      	lsrs	r3, r3, #1
 8026516:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026518:	79fb      	ldrb	r3, [r7, #7]
 802651a:	2b00      	cmp	r3, #0
 802651c:	d002      	beq.n	8026524 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 802651e:	68bb      	ldr	r3, [r7, #8]
 8026520:	009b      	lsls	r3, r3, #2
 8026522:	e000      	b.n	8026526 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8026524:	2300      	movs	r3, #0
 8026526:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026528:	697a      	ldr	r2, [r7, #20]
 802652a:	4413      	add	r3, r2
 802652c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802652e:	68fb      	ldr	r3, [r7, #12]
 8026530:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026536:	3304      	adds	r3, #4
 8026538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802653a:	4619      	mov	r1, r3
 802653c:	f000 fb32 	bl	8026ba4 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026540:	68f8      	ldr	r0, [r7, #12]
 8026542:	68fb      	ldr	r3, [r7, #12]
 8026544:	6819      	ldr	r1, [r3, #0]
 8026546:	68fb      	ldr	r3, [r7, #12]
 8026548:	685b      	ldr	r3, [r3, #4]
 802654a:	461a      	mov	r2, r3
 802654c:	f7fe fc4c 	bl	8024de8 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 8026550:	68fb      	ldr	r3, [r7, #12]
 8026552:	697a      	ldr	r2, [r7, #20]
 8026554:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026556:	68fb      	ldr	r3, [r7, #12]
 8026558:	69ba      	ldr	r2, [r7, #24]
 802655a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	3308      	adds	r3, #8
 8026560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026562:	4618      	mov	r0, r3
 8026564:	f7ff fa33 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8026568:	68fb      	ldr	r3, [r7, #12]
 802656a:	f103 0018 	add.w	r0, r3, #24
 802656e:	6a3a      	ldr	r2, [r7, #32]
 8026570:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026574:	4413      	add	r3, r2
 8026576:	009b      	lsls	r3, r3, #2
 8026578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802657a:	4413      	add	r3, r2
 802657c:	4619      	mov	r1, r3
 802657e:	f7ff fa26 	bl	80259ce <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 8026582:	bf00      	nop
 8026584:	372c      	adds	r7, #44	; 0x2c
 8026586:	46bd      	mov	sp, r7
 8026588:	bd90      	pop	{r4, r7, pc}

0802658a <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 802658a:	b580      	push	{r7, lr}
 802658c:	b082      	sub	sp, #8
 802658e:	af00      	add	r7, sp, #0
 8026590:	6078      	str	r0, [r7, #4]
 8026592:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026594:	2200      	movs	r2, #0
 8026596:	6839      	ldr	r1, [r7, #0]
 8026598:	6878      	ldr	r0, [r7, #4]
 802659a:	f000 fb33 	bl	8026c04 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 802659e:	4603      	mov	r3, r0
 80265a0:	4618      	mov	r0, r3
 80265a2:	3708      	adds	r7, #8
 80265a4:	46bd      	mov	sp, r7
 80265a6:	bd80      	pop	{r7, pc}

080265a8 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80265a8:	b580      	push	{r7, lr}
 80265aa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80265ac:	2004      	movs	r0, #4
 80265ae:	f7fa fc8b 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80265b2:	4603      	mov	r3, r0
 80265b4:	4618      	mov	r0, r3
 80265b6:	bd80      	pop	{r7, pc}

080265b8 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80265b8:	b580      	push	{r7, lr}
 80265ba:	b084      	sub	sp, #16
 80265bc:	af00      	add	r7, sp, #0
 80265be:	60f8      	str	r0, [r7, #12]
 80265c0:	60b9      	str	r1, [r7, #8]
 80265c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80265c4:	687a      	ldr	r2, [r7, #4]
 80265c6:	68b9      	ldr	r1, [r7, #8]
 80265c8:	68f8      	ldr	r0, [r7, #12]
 80265ca:	f000 fb39 	bl	8026c40 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 80265ce:	bf00      	nop
 80265d0:	3710      	adds	r7, #16
 80265d2:	46bd      	mov	sp, r7
 80265d4:	bd80      	pop	{r7, pc}

080265d6 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80265d6:	b580      	push	{r7, lr}
 80265d8:	b084      	sub	sp, #16
 80265da:	af00      	add	r7, sp, #0
 80265dc:	60f8      	str	r0, [r7, #12]
 80265de:	60b9      	str	r1, [r7, #8]
 80265e0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80265e2:	68f8      	ldr	r0, [r7, #12]
 80265e4:	f000 fb3c 	bl	8026c60 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80265e8:	4602      	mov	r2, r0
 80265ea:	68bb      	ldr	r3, [r7, #8]
 80265ec:	4293      	cmp	r3, r2
 80265ee:	bf8c      	ite	hi
 80265f0:	2301      	movhi	r3, #1
 80265f2:	2300      	movls	r3, #0
 80265f4:	b2db      	uxtb	r3, r3
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d001      	beq.n	80265fe <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80265fa:	f015 fb8c 	bl	803bd16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80265fe:	68bb      	ldr	r3, [r7, #8]
 8026600:	009b      	lsls	r3, r3, #2
 8026602:	4618      	mov	r0, r3
 8026604:	f015 fb76 	bl	803bcf4 <_Znwj>
 8026608:	4603      	mov	r3, r0
      }
 802660a:	4618      	mov	r0, r3
 802660c:	3710      	adds	r7, #16
 802660e:	46bd      	mov	sp, r7
 8026610:	bd80      	pop	{r7, pc}

08026612 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026612:	b480      	push	{r7}
 8026614:	b083      	sub	sp, #12
 8026616:	af00      	add	r7, sp, #0
 8026618:	6078      	str	r0, [r7, #4]
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	4618      	mov	r0, r3
 802661e:	370c      	adds	r7, #12
 8026620:	46bd      	mov	sp, r7
 8026622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026626:	4770      	bx	lr

08026628 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8026628:	b480      	push	{r7}
 802662a:	b083      	sub	sp, #12
 802662c:	af00      	add	r7, sp, #0
 802662e:	6078      	str	r0, [r7, #4]
 8026630:	687b      	ldr	r3, [r7, #4]
 8026632:	4618      	mov	r0, r3
 8026634:	370c      	adds	r7, #12
 8026636:	46bd      	mov	sp, r7
 8026638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802663c:	4770      	bx	lr

0802663e <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802663e:	b480      	push	{r7}
 8026640:	b083      	sub	sp, #12
 8026642:	af00      	add	r7, sp, #0
 8026644:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	2200      	movs	r2, #0
 802664a:	601a      	str	r2, [r3, #0]
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	2200      	movs	r2, #0
 8026650:	605a      	str	r2, [r3, #4]
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	2200      	movs	r2, #0
 8026656:	609a      	str	r2, [r3, #8]
 8026658:	687b      	ldr	r3, [r7, #4]
 802665a:	2200      	movs	r2, #0
 802665c:	60da      	str	r2, [r3, #12]
 802665e:	687b      	ldr	r3, [r7, #4]
 8026660:	4618      	mov	r0, r3
 8026662:	370c      	adds	r7, #12
 8026664:	46bd      	mov	sp, r7
 8026666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802666a:	4770      	bx	lr

0802666c <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 802666c:	b580      	push	{r7, lr}
 802666e:	b082      	sub	sp, #8
 8026670:	af00      	add	r7, sp, #0
 8026672:	6078      	str	r0, [r7, #4]
 8026674:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026676:	2200      	movs	r2, #0
 8026678:	6839      	ldr	r1, [r7, #0]
 802667a:	6878      	ldr	r0, [r7, #4]
 802667c:	f000 fafc 	bl	8026c78 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 8026680:	4603      	mov	r3, r0
 8026682:	4618      	mov	r0, r3
 8026684:	3708      	adds	r7, #8
 8026686:	46bd      	mov	sp, r7
 8026688:	bd80      	pop	{r7, pc}

0802668a <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802668a:	b580      	push	{r7, lr}
 802668c:	b082      	sub	sp, #8
 802668e:	af00      	add	r7, sp, #0
 8026690:	6078      	str	r0, [r7, #4]
 8026692:	6039      	str	r1, [r7, #0]
 8026694:	6878      	ldr	r0, [r7, #4]
 8026696:	f000 fb0d 	bl	8026cb4 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	4618      	mov	r0, r3
 802669e:	3708      	adds	r7, #8
 80266a0:	46bd      	mov	sp, r7
 80266a2:	bd80      	pop	{r7, pc}

080266a4 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80266a4:	b480      	push	{r7}
 80266a6:	b083      	sub	sp, #12
 80266a8:	af00      	add	r7, sp, #0
 80266aa:	6078      	str	r0, [r7, #4]
 80266ac:	687b      	ldr	r3, [r7, #4]
 80266ae:	4618      	mov	r0, r3
 80266b0:	370c      	adds	r7, #12
 80266b2:	46bd      	mov	sp, r7
 80266b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266b8:	4770      	bx	lr

080266ba <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80266ba:	b580      	push	{r7, lr}
 80266bc:	b084      	sub	sp, #16
 80266be:	af00      	add	r7, sp, #0
 80266c0:	60f8      	str	r0, [r7, #12]
 80266c2:	60b9      	str	r1, [r7, #8]
 80266c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	009b      	lsls	r3, r3, #2
 80266ca:	4619      	mov	r1, r3
 80266cc:	68b8      	ldr	r0, [r7, #8]
 80266ce:	f015 fb0f 	bl	803bcf0 <_ZdlPvj>
      }
 80266d2:	bf00      	nop
 80266d4:	3710      	adds	r7, #16
 80266d6:	46bd      	mov	sp, r7
 80266d8:	bd80      	pop	{r7, pc}

080266da <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80266da:	b480      	push	{r7}
 80266dc:	b083      	sub	sp, #12
 80266de:	af00      	add	r7, sp, #0
 80266e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	4618      	mov	r0, r3
 80266e6:	370c      	adds	r7, #12
 80266e8:	46bd      	mov	sp, r7
 80266ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ee:	4770      	bx	lr

080266f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80266f0:	b580      	push	{r7, lr}
 80266f2:	b082      	sub	sp, #8
 80266f4:	af00      	add	r7, sp, #0
 80266f6:	6078      	str	r0, [r7, #4]
 80266f8:	6039      	str	r1, [r7, #0]
 80266fa:	683b      	ldr	r3, [r7, #0]
 80266fc:	681a      	ldr	r2, [r3, #0]
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	601a      	str	r2, [r3, #0]
 8026702:	683b      	ldr	r3, [r7, #0]
 8026704:	685a      	ldr	r2, [r3, #4]
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	605a      	str	r2, [r3, #4]
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	f103 0208 	add.w	r2, r3, #8
 8026710:	683b      	ldr	r3, [r7, #0]
 8026712:	3308      	adds	r3, #8
 8026714:	4619      	mov	r1, r3
 8026716:	4610      	mov	r0, r2
 8026718:	f7fd fe39 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	f103 0218 	add.w	r2, r3, #24
 8026722:	683b      	ldr	r3, [r7, #0]
 8026724:	3318      	adds	r3, #24
 8026726:	4619      	mov	r1, r3
 8026728:	4610      	mov	r0, r2
 802672a:	f7fd fe30 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802672e:	687b      	ldr	r3, [r7, #4]
 8026730:	4618      	mov	r0, r3
 8026732:	3708      	adds	r7, #8
 8026734:	46bd      	mov	sp, r7
 8026736:	bd80      	pop	{r7, pc}

08026738 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8026738:	b5b0      	push	{r4, r5, r7, lr}
 802673a:	b08c      	sub	sp, #48	; 0x30
 802673c:	af00      	add	r7, sp, #0
 802673e:	6078      	str	r0, [r7, #4]
 8026740:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026742:	6839      	ldr	r1, [r7, #0]
 8026744:	6878      	ldr	r0, [r7, #4]
 8026746:	f7ff ffd3 	bl	80266f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 802674a:	f107 0308 	add.w	r3, r7, #8
 802674e:	4618      	mov	r0, r3
 8026750:	f7fe fa16 	bl	8024b80 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8026754:	683b      	ldr	r3, [r7, #0]
 8026756:	461d      	mov	r5, r3
 8026758:	f107 0408 	add.w	r4, r7, #8
 802675c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802675e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026764:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026768:	e885 0003 	stmia.w	r5, {r0, r1}
 802676c:	687b      	ldr	r3, [r7, #4]
 802676e:	4618      	mov	r0, r3
 8026770:	3730      	adds	r7, #48	; 0x30
 8026772:	46bd      	mov	sp, r7
 8026774:	bdb0      	pop	{r4, r5, r7, pc}

08026776 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8026776:	b480      	push	{r7}
 8026778:	b083      	sub	sp, #12
 802677a:	af00      	add	r7, sp, #0
 802677c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	4618      	mov	r0, r3
 8026782:	370c      	adds	r7, #12
 8026784:	46bd      	mov	sp, r7
 8026786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678a:	4770      	bx	lr

0802678c <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 802678c:	b480      	push	{r7}
 802678e:	b083      	sub	sp, #12
 8026790:	af00      	add	r7, sp, #0
 8026792:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	4618      	mov	r0, r3
 8026798:	370c      	adds	r7, #12
 802679a:	46bd      	mov	sp, r7
 802679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a0:	4770      	bx	lr

080267a2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80267a2:	b580      	push	{r7, lr}
 80267a4:	b082      	sub	sp, #8
 80267a6:	af00      	add	r7, sp, #0
 80267a8:	6078      	str	r0, [r7, #4]
 80267aa:	6039      	str	r1, [r7, #0]
 80267ac:	683b      	ldr	r3, [r7, #0]
 80267ae:	681a      	ldr	r2, [r3, #0]
 80267b0:	687b      	ldr	r3, [r7, #4]
 80267b2:	601a      	str	r2, [r3, #0]
 80267b4:	683b      	ldr	r3, [r7, #0]
 80267b6:	685a      	ldr	r2, [r3, #4]
 80267b8:	687b      	ldr	r3, [r7, #4]
 80267ba:	605a      	str	r2, [r3, #4]
 80267bc:	687b      	ldr	r3, [r7, #4]
 80267be:	f103 0208 	add.w	r2, r3, #8
 80267c2:	683b      	ldr	r3, [r7, #0]
 80267c4:	3308      	adds	r3, #8
 80267c6:	4619      	mov	r1, r3
 80267c8:	4610      	mov	r0, r2
 80267ca:	f7fd fe71 	bl	80244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80267ce:	687b      	ldr	r3, [r7, #4]
 80267d0:	f103 0218 	add.w	r2, r3, #24
 80267d4:	683b      	ldr	r3, [r7, #0]
 80267d6:	3318      	adds	r3, #24
 80267d8:	4619      	mov	r1, r3
 80267da:	4610      	mov	r0, r2
 80267dc:	f7fd fe68 	bl	80244b0 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80267e0:	687b      	ldr	r3, [r7, #4]
 80267e2:	4618      	mov	r0, r3
 80267e4:	3708      	adds	r7, #8
 80267e6:	46bd      	mov	sp, r7
 80267e8:	bd80      	pop	{r7, pc}

080267ea <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80267ea:	b5b0      	push	{r4, r5, r7, lr}
 80267ec:	b08c      	sub	sp, #48	; 0x30
 80267ee:	af00      	add	r7, sp, #0
 80267f0:	6078      	str	r0, [r7, #4]
 80267f2:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80267f4:	6839      	ldr	r1, [r7, #0]
 80267f6:	6878      	ldr	r0, [r7, #4]
 80267f8:	f7ff ffd3 	bl	80267a2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 80267fc:	f107 0308 	add.w	r3, r7, #8
 8026800:	4618      	mov	r0, r3
 8026802:	f7ff f9a4 	bl	8025b4e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 8026806:	683b      	ldr	r3, [r7, #0]
 8026808:	461d      	mov	r5, r3
 802680a:	f107 0408 	add.w	r4, r7, #8
 802680e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026816:	e894 0003 	ldmia.w	r4, {r0, r1}
 802681a:	e885 0003 	stmia.w	r5, {r0, r1}
 802681e:	687b      	ldr	r3, [r7, #4]
 8026820:	4618      	mov	r0, r3
 8026822:	3730      	adds	r7, #48	; 0x30
 8026824:	46bd      	mov	sp, r7
 8026826:	bdb0      	pop	{r4, r5, r7, pc}

08026828 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8026828:	b480      	push	{r7}
 802682a:	b083      	sub	sp, #12
 802682c:	af00      	add	r7, sp, #0
 802682e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	4618      	mov	r0, r3
 8026834:	370c      	adds	r7, #12
 8026836:	46bd      	mov	sp, r7
 8026838:	f85d 7b04 	ldr.w	r7, [sp], #4
 802683c:	4770      	bx	lr

0802683e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802683e:	b580      	push	{r7, lr}
 8026840:	b084      	sub	sp, #16
 8026842:	af00      	add	r7, sp, #0
 8026844:	60f8      	str	r0, [r7, #12]
 8026846:	60b9      	str	r1, [r7, #8]
 8026848:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802684a:	687a      	ldr	r2, [r7, #4]
 802684c:	68b9      	ldr	r1, [r7, #8]
 802684e:	68f8      	ldr	r0, [r7, #12]
 8026850:	f000 fa3b 	bl	8026cca <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8026854:	4603      	mov	r3, r0
 8026856:	4618      	mov	r0, r3
 8026858:	3710      	adds	r7, #16
 802685a:	46bd      	mov	sp, r7
 802685c:	bd80      	pop	{r7, pc}

0802685e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 802685e:	b580      	push	{r7, lr}
 8026860:	b082      	sub	sp, #8
 8026862:	af00      	add	r7, sp, #0
 8026864:	6078      	str	r0, [r7, #4]
 8026866:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8026868:	683b      	ldr	r3, [r7, #0]
 802686a:	425b      	negs	r3, r3
 802686c:	4619      	mov	r1, r3
 802686e:	6878      	ldr	r0, [r7, #4]
 8026870:	f7fe ffd8 	bl	8025824 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 8026874:	4603      	mov	r3, r0
 8026876:	4618      	mov	r0, r3
 8026878:	3708      	adds	r7, #8
 802687a:	46bd      	mov	sp, r7
 802687c:	bd80      	pop	{r7, pc}

0802687e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802687e:	b580      	push	{r7, lr}
 8026880:	b088      	sub	sp, #32
 8026882:	af00      	add	r7, sp, #0
 8026884:	60f8      	str	r0, [r7, #12]
 8026886:	60b9      	str	r1, [r7, #8]
 8026888:	607a      	str	r2, [r7, #4]
 802688a:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 802688c:	f107 0310 	add.w	r3, r7, #16
 8026890:	6839      	ldr	r1, [r7, #0]
 8026892:	4618      	mov	r0, r3
 8026894:	f7fd fd7b 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026898:	68f8      	ldr	r0, [r7, #12]
 802689a:	f107 0310 	add.w	r3, r7, #16
 802689e:	687a      	ldr	r2, [r7, #4]
 80268a0:	68b9      	ldr	r1, [r7, #8]
 80268a2:	f7fd feef 	bl	8024684 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80268a6:	68f8      	ldr	r0, [r7, #12]
 80268a8:	3720      	adds	r7, #32
 80268aa:	46bd      	mov	sp, r7
 80268ac:	bd80      	pop	{r7, pc}

080268ae <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80268ae:	b580      	push	{r7, lr}
 80268b0:	b082      	sub	sp, #8
 80268b2:	af00      	add	r7, sp, #0
 80268b4:	6078      	str	r0, [r7, #4]
 80268b6:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80268b8:	683b      	ldr	r3, [r7, #0]
 80268ba:	1c5a      	adds	r2, r3, #1
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80268c0:	6879      	ldr	r1, [r7, #4]
 80268c2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80268c4:	6879      	ldr	r1, [r7, #4]
 80268c6:	6809      	ldr	r1, [r1, #0]
 80268c8:	1a41      	subs	r1, r0, r1
 80268ca:	1089      	asrs	r1, r1, #2
 80268cc:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80268ce:	429a      	cmp	r2, r3
 80268d0:	d904      	bls.n	80268dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80268d2:	2200      	movs	r2, #0
 80268d4:	6839      	ldr	r1, [r7, #0]
 80268d6:	6878      	ldr	r0, [r7, #4]
 80268d8:	f7fe feec 	bl	80256b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 80268dc:	bf00      	nop
 80268de:	3708      	adds	r7, #8
 80268e0:	46bd      	mov	sp, r7
 80268e2:	bd80      	pop	{r7, pc}

080268e4 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 80268e4:	b580      	push	{r7, lr}
 80268e6:	b086      	sub	sp, #24
 80268e8:	af00      	add	r7, sp, #0
 80268ea:	6078      	str	r0, [r7, #4]
 80268ec:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 80268ee:	6838      	ldr	r0, [r7, #0]
 80268f0:	f000 f9fb 	bl	8026cea <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 80268f4:	4602      	mov	r2, r0
 80268f6:	f107 0308 	add.w	r3, r7, #8
 80268fa:	4611      	mov	r1, r2
 80268fc:	4618      	mov	r0, r3
 80268fe:	f7fd fd46 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026902:	f107 0308 	add.w	r3, r7, #8
 8026906:	4619      	mov	r1, r3
 8026908:	6878      	ldr	r0, [r7, #4]
 802690a:	f000 f9f9 	bl	8026d00 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 802690e:	6878      	ldr	r0, [r7, #4]
 8026910:	3718      	adds	r7, #24
 8026912:	46bd      	mov	sp, r7
 8026914:	bd80      	pop	{r7, pc}

08026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 8026916:	b580      	push	{r7, lr}
 8026918:	b082      	sub	sp, #8
 802691a:	af00      	add	r7, sp, #0
 802691c:	6078      	str	r0, [r7, #4]
 802691e:	6039      	str	r1, [r7, #0]
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	683a      	ldr	r2, [r7, #0]
 8026924:	4611      	mov	r1, r2
 8026926:	4618      	mov	r0, r3
 8026928:	f7fd fd31 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802692c:	687b      	ldr	r3, [r7, #4]
 802692e:	4618      	mov	r0, r3
 8026930:	3708      	adds	r7, #8
 8026932:	46bd      	mov	sp, r7
 8026934:	bd80      	pop	{r7, pc}

08026936 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8026936:	b580      	push	{r7, lr}
 8026938:	b090      	sub	sp, #64	; 0x40
 802693a:	af00      	add	r7, sp, #0
 802693c:	60f8      	str	r0, [r7, #12]
 802693e:	60b9      	str	r1, [r7, #8]
 8026940:	607a      	str	r2, [r7, #4]
 8026942:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026944:	f107 0310 	add.w	r3, r7, #16
 8026948:	68b9      	ldr	r1, [r7, #8]
 802694a:	4618      	mov	r0, r3
 802694c:	f7ff ffe3 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026950:	f107 0320 	add.w	r3, r7, #32
 8026954:	6879      	ldr	r1, [r7, #4]
 8026956:	4618      	mov	r0, r3
 8026958:	f7ff ffdd 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802695c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026960:	6839      	ldr	r1, [r7, #0]
 8026962:	4618      	mov	r0, r3
 8026964:	f7fd fd13 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026968:	68f8      	ldr	r0, [r7, #12]
 802696a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802696e:	f107 0220 	add.w	r2, r7, #32
 8026972:	f107 0110 	add.w	r1, r7, #16
 8026976:	f000 f9d6 	bl	8026d26 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 802697a:	68f8      	ldr	r0, [r7, #12]
 802697c:	3740      	adds	r7, #64	; 0x40
 802697e:	46bd      	mov	sp, r7
 8026980:	bd80      	pop	{r7, pc}

08026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 8026982:	b580      	push	{r7, lr}
 8026984:	b082      	sub	sp, #8
 8026986:	af00      	add	r7, sp, #0
 8026988:	6078      	str	r0, [r7, #4]
 802698a:	6039      	str	r1, [r7, #0]
    { return __it; }
 802698c:	6839      	ldr	r1, [r7, #0]
 802698e:	6878      	ldr	r0, [r7, #4]
 8026990:	f7fd fcfd 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026994:	6878      	ldr	r0, [r7, #4]
 8026996:	3708      	adds	r7, #8
 8026998:	46bd      	mov	sp, r7
 802699a:	bd80      	pop	{r7, pc}

0802699c <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802699c:	b580      	push	{r7, lr}
 802699e:	b0a0      	sub	sp, #128	; 0x80
 80269a0:	af00      	add	r7, sp, #0
 80269a2:	60f8      	str	r0, [r7, #12]
 80269a4:	60b9      	str	r1, [r7, #8]
 80269a6:	607a      	str	r2, [r7, #4]
 80269a8:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80269aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80269ae:	68b9      	ldr	r1, [r7, #8]
 80269b0:	4618      	mov	r0, r3
 80269b2:	f7fd fcec 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269b6:	f107 0320 	add.w	r3, r7, #32
 80269ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80269be:	4611      	mov	r1, r2
 80269c0:	4618      	mov	r0, r3
 80269c2:	f7ff fa09 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80269ca:	6879      	ldr	r1, [r7, #4]
 80269cc:	4618      	mov	r0, r3
 80269ce:	f7fd fcde 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80269d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80269da:	4611      	mov	r1, r2
 80269dc:	4618      	mov	r0, r3
 80269de:	f7ff f9fb 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80269e6:	6839      	ldr	r1, [r7, #0]
 80269e8:	4618      	mov	r0, r3
 80269ea:	f7fd fcd0 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80269f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80269f6:	4611      	mov	r1, r2
 80269f8:	4618      	mov	r0, r3
 80269fa:	f7ff f9ed 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269fe:	f107 0010 	add.w	r0, r7, #16
 8026a02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a06:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026a0a:	f107 0120 	add.w	r1, r7, #32
 8026a0e:	f000 f9b3 	bl	8026d78 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026a12:	68fb      	ldr	r3, [r7, #12]
 8026a14:	f107 0210 	add.w	r2, r7, #16
 8026a18:	6839      	ldr	r1, [r7, #0]
 8026a1a:	4618      	mov	r0, r3
 8026a1c:	f7ff fa50 	bl	8025ec0 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026a20:	68f8      	ldr	r0, [r7, #12]
 8026a22:	3780      	adds	r7, #128	; 0x80
 8026a24:	46bd      	mov	sp, r7
 8026a26:	bd80      	pop	{r7, pc}

08026a28 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026a28:	b580      	push	{r7, lr}
 8026a2a:	b0a0      	sub	sp, #128	; 0x80
 8026a2c:	af00      	add	r7, sp, #0
 8026a2e:	60f8      	str	r0, [r7, #12]
 8026a30:	60b9      	str	r1, [r7, #8]
 8026a32:	607a      	str	r2, [r7, #4]
 8026a34:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8026a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026a3a:	68b9      	ldr	r1, [r7, #8]
 8026a3c:	4618      	mov	r0, r3
 8026a3e:	f7fd fca6 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a42:	f107 0320 	add.w	r3, r7, #32
 8026a46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026a4a:	4611      	mov	r1, r2
 8026a4c:	4618      	mov	r0, r3
 8026a4e:	f7ff f9c3 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026a56:	6879      	ldr	r1, [r7, #4]
 8026a58:	4618      	mov	r0, r3
 8026a5a:	f7fd fc98 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026a62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8026a66:	4611      	mov	r1, r2
 8026a68:	4618      	mov	r0, r3
 8026a6a:	f7ff f9b5 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8026a72:	6839      	ldr	r1, [r7, #0]
 8026a74:	4618      	mov	r0, r3
 8026a76:	f7fd fc8a 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a7e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8026a82:	4611      	mov	r1, r2
 8026a84:	4618      	mov	r0, r3
 8026a86:	f7ff f9a7 	bl	8025dd8 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a8a:	f107 0010 	add.w	r0, r7, #16
 8026a8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026a96:	f107 0120 	add.w	r1, r7, #32
 8026a9a:	f000 f993 	bl	8026dc4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026a9e:	68fb      	ldr	r3, [r7, #12]
 8026aa0:	f107 0210 	add.w	r2, r7, #16
 8026aa4:	6839      	ldr	r1, [r7, #0]
 8026aa6:	4618      	mov	r0, r3
 8026aa8:	f7ff fa0a 	bl	8025ec0 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026aac:	68f8      	ldr	r0, [r7, #12]
 8026aae:	3780      	adds	r7, #128	; 0x80
 8026ab0:	46bd      	mov	sp, r7
 8026ab2:	bd80      	pop	{r7, pc}

08026ab4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026ab4:	b580      	push	{r7, lr}
 8026ab6:	b082      	sub	sp, #8
 8026ab8:	af00      	add	r7, sp, #0
 8026aba:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026abc:	6878      	ldr	r0, [r7, #4]
 8026abe:	f000 f857 	bl	8026b70 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8026ac2:	4603      	mov	r3, r0
 8026ac4:	4618      	mov	r0, r3
 8026ac6:	3708      	adds	r7, #8
 8026ac8:	46bd      	mov	sp, r7
 8026aca:	bd80      	pop	{r7, pc}

08026acc <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026acc:	b480      	push	{r7}
 8026ace:	b083      	sub	sp, #12
 8026ad0:	af00      	add	r7, sp, #0
 8026ad2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	4618      	mov	r0, r3
 8026ad8:	370c      	adds	r7, #12
 8026ada:	46bd      	mov	sp, r7
 8026adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ae0:	4770      	bx	lr

08026ae2 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026ae2:	b5b0      	push	{r4, r5, r7, lr}
 8026ae4:	b084      	sub	sp, #16
 8026ae6:	af00      	add	r7, sp, #0
 8026ae8:	60f8      	str	r0, [r7, #12]
 8026aea:	60b9      	str	r1, [r7, #8]
 8026aec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026aee:	68f8      	ldr	r0, [r7, #12]
 8026af0:	f000 f98e 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026af4:	4604      	mov	r4, r0
 8026af6:	68b8      	ldr	r0, [r7, #8]
 8026af8:	f000 f98a 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026afc:	4605      	mov	r5, r0
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	4618      	mov	r0, r3
 8026b02:	f000 f985 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b06:	4603      	mov	r3, r0
 8026b08:	461a      	mov	r2, r3
 8026b0a:	4629      	mov	r1, r5
 8026b0c:	4620      	mov	r0, r4
 8026b0e:	f000 f98a 	bl	8026e26 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026b12:	4602      	mov	r2, r0
 8026b14:	1d3b      	adds	r3, r7, #4
 8026b16:	4611      	mov	r1, r2
 8026b18:	4618      	mov	r0, r3
 8026b1a:	f000 f994 	bl	8026e46 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026b1e:	4603      	mov	r3, r0
    }
 8026b20:	4618      	mov	r0, r3
 8026b22:	3710      	adds	r7, #16
 8026b24:	46bd      	mov	sp, r7
 8026b26:	bdb0      	pop	{r4, r5, r7, pc}

08026b28 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026b28:	b5b0      	push	{r4, r5, r7, lr}
 8026b2a:	b084      	sub	sp, #16
 8026b2c:	af00      	add	r7, sp, #0
 8026b2e:	60f8      	str	r0, [r7, #12]
 8026b30:	60b9      	str	r1, [r7, #8]
 8026b32:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026b34:	68f8      	ldr	r0, [r7, #12]
 8026b36:	f000 f96b 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b3a:	4604      	mov	r4, r0
 8026b3c:	68b8      	ldr	r0, [r7, #8]
 8026b3e:	f000 f967 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b42:	4605      	mov	r5, r0
 8026b44:	687b      	ldr	r3, [r7, #4]
 8026b46:	4618      	mov	r0, r3
 8026b48:	f000 f962 	bl	8026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b4c:	4603      	mov	r3, r0
 8026b4e:	461a      	mov	r2, r3
 8026b50:	4629      	mov	r1, r5
 8026b52:	4620      	mov	r0, r4
 8026b54:	f000 f983 	bl	8026e5e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026b58:	4602      	mov	r2, r0
 8026b5a:	1d3b      	adds	r3, r7, #4
 8026b5c:	4611      	mov	r1, r2
 8026b5e:	4618      	mov	r0, r3
 8026b60:	f000 f971 	bl	8026e46 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026b64:	4603      	mov	r3, r0
    }
 8026b66:	4618      	mov	r0, r3
 8026b68:	3710      	adds	r7, #16
 8026b6a:	46bd      	mov	sp, r7
 8026b6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026b70 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026b70:	b480      	push	{r7}
 8026b72:	b083      	sub	sp, #12
 8026b74:	af00      	add	r7, sp, #0
 8026b76:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026b78:	4b03      	ldr	r3, [pc, #12]	; (8026b88 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8026b7a:	4618      	mov	r0, r3
 8026b7c:	370c      	adds	r7, #12
 8026b7e:	46bd      	mov	sp, r7
 8026b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b84:	4770      	bx	lr
 8026b86:	bf00      	nop
 8026b88:	06666666 	.word	0x06666666

08026b8c <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026b8c:	b580      	push	{r7, lr}
 8026b8e:	b082      	sub	sp, #8
 8026b90:	af00      	add	r7, sp, #0
 8026b92:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026b94:	6878      	ldr	r0, [r7, #4]
 8026b96:	f000 f972 	bl	8026e7e <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 8026b9a:	4603      	mov	r3, r0
      }
 8026b9c:	4618      	mov	r0, r3
 8026b9e:	3708      	adds	r7, #8
 8026ba0:	46bd      	mov	sp, r7
 8026ba2:	bd80      	pop	{r7, pc}

08026ba4 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8026ba4:	b590      	push	{r4, r7, lr}
 8026ba6:	b085      	sub	sp, #20
 8026ba8:	af00      	add	r7, sp, #0
 8026baa:	60f8      	str	r0, [r7, #12]
 8026bac:	60b9      	str	r1, [r7, #8]
 8026bae:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026bb0:	68f8      	ldr	r0, [r7, #12]
 8026bb2:	f000 f970 	bl	8026e96 <_ZSt12__miter_baseIPPjET_S2_>
 8026bb6:	4604      	mov	r4, r0
 8026bb8:	68b8      	ldr	r0, [r7, #8]
 8026bba:	f000 f96c 	bl	8026e96 <_ZSt12__miter_baseIPPjET_S2_>
 8026bbe:	4603      	mov	r3, r0
 8026bc0:	687a      	ldr	r2, [r7, #4]
 8026bc2:	4619      	mov	r1, r3
 8026bc4:	4620      	mov	r0, r4
 8026bc6:	f000 f971 	bl	8026eac <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026bca:	4603      	mov	r3, r0
    }
 8026bcc:	4618      	mov	r0, r3
 8026bce:	3714      	adds	r7, #20
 8026bd0:	46bd      	mov	sp, r7
 8026bd2:	bd90      	pop	{r4, r7, pc}

08026bd4 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026bd4:	b590      	push	{r4, r7, lr}
 8026bd6:	b085      	sub	sp, #20
 8026bd8:	af00      	add	r7, sp, #0
 8026bda:	60f8      	str	r0, [r7, #12]
 8026bdc:	60b9      	str	r1, [r7, #8]
 8026bde:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026be0:	68f8      	ldr	r0, [r7, #12]
 8026be2:	f000 f958 	bl	8026e96 <_ZSt12__miter_baseIPPjET_S2_>
 8026be6:	4604      	mov	r4, r0
 8026be8:	68b8      	ldr	r0, [r7, #8]
 8026bea:	f000 f954 	bl	8026e96 <_ZSt12__miter_baseIPPjET_S2_>
 8026bee:	4603      	mov	r3, r0
 8026bf0:	687a      	ldr	r2, [r7, #4]
 8026bf2:	4619      	mov	r1, r3
 8026bf4:	4620      	mov	r0, r4
 8026bf6:	f000 f97c 	bl	8026ef2 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026bfa:	4603      	mov	r3, r0
    }
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	3714      	adds	r7, #20
 8026c00:	46bd      	mov	sp, r7
 8026c02:	bd90      	pop	{r4, r7, pc}

08026c04 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b084      	sub	sp, #16
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	60f8      	str	r0, [r7, #12]
 8026c0c:	60b9      	str	r1, [r7, #8]
 8026c0e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026c10:	68f8      	ldr	r0, [r7, #12]
 8026c12:	f000 f991 	bl	8026f38 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026c16:	4602      	mov	r2, r0
 8026c18:	68bb      	ldr	r3, [r7, #8]
 8026c1a:	4293      	cmp	r3, r2
 8026c1c:	bf8c      	ite	hi
 8026c1e:	2301      	movhi	r3, #1
 8026c20:	2300      	movls	r3, #0
 8026c22:	b2db      	uxtb	r3, r3
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	d001      	beq.n	8026c2c <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026c28:	f015 f875 	bl	803bd16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026c2c:	68bb      	ldr	r3, [r7, #8]
 8026c2e:	009b      	lsls	r3, r3, #2
 8026c30:	4618      	mov	r0, r3
 8026c32:	f015 f85f 	bl	803bcf4 <_Znwj>
 8026c36:	4603      	mov	r3, r0
      }
 8026c38:	4618      	mov	r0, r3
 8026c3a:	3710      	adds	r7, #16
 8026c3c:	46bd      	mov	sp, r7
 8026c3e:	bd80      	pop	{r7, pc}

08026c40 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8026c40:	b580      	push	{r7, lr}
 8026c42:	b084      	sub	sp, #16
 8026c44:	af00      	add	r7, sp, #0
 8026c46:	60f8      	str	r0, [r7, #12]
 8026c48:	60b9      	str	r1, [r7, #8]
 8026c4a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	009b      	lsls	r3, r3, #2
 8026c50:	4619      	mov	r1, r3
 8026c52:	68b8      	ldr	r0, [r7, #8]
 8026c54:	f015 f84c 	bl	803bcf0 <_ZdlPvj>
      }
 8026c58:	bf00      	nop
 8026c5a:	3710      	adds	r7, #16
 8026c5c:	46bd      	mov	sp, r7
 8026c5e:	bd80      	pop	{r7, pc}

08026c60 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026c60:	b480      	push	{r7}
 8026c62:	b083      	sub	sp, #12
 8026c64:	af00      	add	r7, sp, #0
 8026c66:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026c68:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026c6c:	4618      	mov	r0, r3
 8026c6e:	370c      	adds	r7, #12
 8026c70:	46bd      	mov	sp, r7
 8026c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c76:	4770      	bx	lr

08026c78 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026c78:	b580      	push	{r7, lr}
 8026c7a:	b084      	sub	sp, #16
 8026c7c:	af00      	add	r7, sp, #0
 8026c7e:	60f8      	str	r0, [r7, #12]
 8026c80:	60b9      	str	r1, [r7, #8]
 8026c82:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026c84:	68f8      	ldr	r0, [r7, #12]
 8026c86:	f000 f963 	bl	8026f50 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8026c8a:	4602      	mov	r2, r0
 8026c8c:	68bb      	ldr	r3, [r7, #8]
 8026c8e:	4293      	cmp	r3, r2
 8026c90:	bf8c      	ite	hi
 8026c92:	2301      	movhi	r3, #1
 8026c94:	2300      	movls	r3, #0
 8026c96:	b2db      	uxtb	r3, r3
 8026c98:	2b00      	cmp	r3, #0
 8026c9a:	d001      	beq.n	8026ca0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026c9c:	f015 f83b 	bl	803bd16 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026ca0:	68bb      	ldr	r3, [r7, #8]
 8026ca2:	009b      	lsls	r3, r3, #2
 8026ca4:	4618      	mov	r0, r3
 8026ca6:	f015 f825 	bl	803bcf4 <_Znwj>
 8026caa:	4603      	mov	r3, r0
      }
 8026cac:	4618      	mov	r0, r3
 8026cae:	3710      	adds	r7, #16
 8026cb0:	46bd      	mov	sp, r7
 8026cb2:	bd80      	pop	{r7, pc}

08026cb4 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026cb4:	b480      	push	{r7}
 8026cb6:	b083      	sub	sp, #12
 8026cb8:	af00      	add	r7, sp, #0
 8026cba:	6078      	str	r0, [r7, #4]
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	4618      	mov	r0, r3
 8026cc0:	370c      	adds	r7, #12
 8026cc2:	46bd      	mov	sp, r7
 8026cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cc8:	4770      	bx	lr

08026cca <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026cca:	b580      	push	{r7, lr}
 8026ccc:	b084      	sub	sp, #16
 8026cce:	af00      	add	r7, sp, #0
 8026cd0:	60f8      	str	r0, [r7, #12]
 8026cd2:	60b9      	str	r1, [r7, #8]
 8026cd4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026cd6:	687a      	ldr	r2, [r7, #4]
 8026cd8:	68b9      	ldr	r1, [r7, #8]
 8026cda:	68f8      	ldr	r0, [r7, #12]
 8026cdc:	f000 f944 	bl	8026f68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8026ce0:	4603      	mov	r3, r0
    }
 8026ce2:	4618      	mov	r0, r3
 8026ce4:	3710      	adds	r7, #16
 8026ce6:	46bd      	mov	sp, r7
 8026ce8:	bd80      	pop	{r7, pc}

08026cea <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026cea:	b480      	push	{r7}
 8026cec:	b083      	sub	sp, #12
 8026cee:	af00      	add	r7, sp, #0
 8026cf0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026cf2:	687b      	ldr	r3, [r7, #4]
 8026cf4:	4618      	mov	r0, r3
 8026cf6:	370c      	adds	r7, #12
 8026cf8:	46bd      	mov	sp, r7
 8026cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cfe:	4770      	bx	lr

08026d00 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8026d00:	b590      	push	{r4, r7, lr}
 8026d02:	b083      	sub	sp, #12
 8026d04:	af00      	add	r7, sp, #0
 8026d06:	6078      	str	r0, [r7, #4]
 8026d08:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026d0a:	687c      	ldr	r4, [r7, #4]
 8026d0c:	6838      	ldr	r0, [r7, #0]
 8026d0e:	f7ff ffec 	bl	8026cea <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026d12:	4603      	mov	r3, r0
 8026d14:	4619      	mov	r1, r3
 8026d16:	4620      	mov	r0, r4
 8026d18:	f7fd fb39 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d1c:	687b      	ldr	r3, [r7, #4]
 8026d1e:	4618      	mov	r0, r3
 8026d20:	370c      	adds	r7, #12
 8026d22:	46bd      	mov	sp, r7
 8026d24:	bd90      	pop	{r4, r7, pc}

08026d26 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026d26:	b580      	push	{r7, lr}
 8026d28:	b092      	sub	sp, #72	; 0x48
 8026d2a:	af00      	add	r7, sp, #0
 8026d2c:	60f8      	str	r0, [r7, #12]
 8026d2e:	60b9      	str	r1, [r7, #8]
 8026d30:	607a      	str	r2, [r7, #4]
 8026d32:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026d34:	2301      	movs	r3, #1
 8026d36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8026d3a:	f107 0314 	add.w	r3, r7, #20
 8026d3e:	68b9      	ldr	r1, [r7, #8]
 8026d40:	4618      	mov	r0, r3
 8026d42:	f7ff fde8 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026d4a:	6879      	ldr	r1, [r7, #4]
 8026d4c:	4618      	mov	r0, r3
 8026d4e:	f7ff fde2 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026d56:	6839      	ldr	r1, [r7, #0]
 8026d58:	4618      	mov	r0, r3
 8026d5a:	f7fd fb18 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d5e:	68f8      	ldr	r0, [r7, #12]
 8026d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026d64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026d68:	f107 0114 	add.w	r1, r7, #20
 8026d6c:	f000 f926 	bl	8026fbc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8026d70:	68f8      	ldr	r0, [r7, #12]
 8026d72:	3748      	adds	r7, #72	; 0x48
 8026d74:	46bd      	mov	sp, r7
 8026d76:	bd80      	pop	{r7, pc}

08026d78 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8026d78:	b580      	push	{r7, lr}
 8026d7a:	b090      	sub	sp, #64	; 0x40
 8026d7c:	af00      	add	r7, sp, #0
 8026d7e:	60f8      	str	r0, [r7, #12]
 8026d80:	60b9      	str	r1, [r7, #8]
 8026d82:	607a      	str	r2, [r7, #4]
 8026d84:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8026d86:	f107 0310 	add.w	r3, r7, #16
 8026d8a:	68b9      	ldr	r1, [r7, #8]
 8026d8c:	4618      	mov	r0, r3
 8026d8e:	f7fd fafe 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d92:	f107 0320 	add.w	r3, r7, #32
 8026d96:	6879      	ldr	r1, [r7, #4]
 8026d98:	4618      	mov	r0, r3
 8026d9a:	f7fd faf8 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026da2:	6839      	ldr	r1, [r7, #0]
 8026da4:	4618      	mov	r0, r3
 8026da6:	f7fd faf2 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026daa:	68f8      	ldr	r0, [r7, #12]
 8026dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026db0:	f107 0220 	add.w	r2, r7, #32
 8026db4:	f107 0110 	add.w	r1, r7, #16
 8026db8:	f000 f926 	bl	8027008 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026dbc:	68f8      	ldr	r0, [r7, #12]
 8026dbe:	3740      	adds	r7, #64	; 0x40
 8026dc0:	46bd      	mov	sp, r7
 8026dc2:	bd80      	pop	{r7, pc}

08026dc4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8026dc4:	b580      	push	{r7, lr}
 8026dc6:	b090      	sub	sp, #64	; 0x40
 8026dc8:	af00      	add	r7, sp, #0
 8026dca:	60f8      	str	r0, [r7, #12]
 8026dcc:	60b9      	str	r1, [r7, #8]
 8026dce:	607a      	str	r2, [r7, #4]
 8026dd0:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8026dd2:	f107 0310 	add.w	r3, r7, #16
 8026dd6:	68b9      	ldr	r1, [r7, #8]
 8026dd8:	4618      	mov	r0, r3
 8026dda:	f7fd fad8 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dde:	f107 0320 	add.w	r3, r7, #32
 8026de2:	6879      	ldr	r1, [r7, #4]
 8026de4:	4618      	mov	r0, r3
 8026de6:	f7fd fad2 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026dee:	6839      	ldr	r1, [r7, #0]
 8026df0:	4618      	mov	r0, r3
 8026df2:	f7fd facc 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026df6:	68f8      	ldr	r0, [r7, #12]
 8026df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026dfc:	f107 0220 	add.w	r2, r7, #32
 8026e00:	f107 0110 	add.w	r1, r7, #16
 8026e04:	f000 f97b 	bl	80270fe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026e08:	68f8      	ldr	r0, [r7, #12]
 8026e0a:	3740      	adds	r7, #64	; 0x40
 8026e0c:	46bd      	mov	sp, r7
 8026e0e:	bd80      	pop	{r7, pc}

08026e10 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026e10:	b480      	push	{r7}
 8026e12:	b083      	sub	sp, #12
 8026e14:	af00      	add	r7, sp, #0
 8026e16:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	4618      	mov	r0, r3
 8026e1c:	370c      	adds	r7, #12
 8026e1e:	46bd      	mov	sp, r7
 8026e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e24:	4770      	bx	lr

08026e26 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026e26:	b580      	push	{r7, lr}
 8026e28:	b084      	sub	sp, #16
 8026e2a:	af00      	add	r7, sp, #0
 8026e2c:	60f8      	str	r0, [r7, #12]
 8026e2e:	60b9      	str	r1, [r7, #8]
 8026e30:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026e32:	687a      	ldr	r2, [r7, #4]
 8026e34:	68b9      	ldr	r1, [r7, #8]
 8026e36:	68f8      	ldr	r0, [r7, #12]
 8026e38:	f000 f9dc 	bl	80271f4 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026e3c:	4603      	mov	r3, r0
 8026e3e:	4618      	mov	r0, r3
 8026e40:	3710      	adds	r7, #16
 8026e42:	46bd      	mov	sp, r7
 8026e44:	bd80      	pop	{r7, pc}

08026e46 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026e46:	b480      	push	{r7}
 8026e48:	b083      	sub	sp, #12
 8026e4a:	af00      	add	r7, sp, #0
 8026e4c:	6078      	str	r0, [r7, #4]
 8026e4e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026e50:	683b      	ldr	r3, [r7, #0]
 8026e52:	4618      	mov	r0, r3
 8026e54:	370c      	adds	r7, #12
 8026e56:	46bd      	mov	sp, r7
 8026e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e5c:	4770      	bx	lr

08026e5e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8026e5e:	b580      	push	{r7, lr}
 8026e60:	b084      	sub	sp, #16
 8026e62:	af00      	add	r7, sp, #0
 8026e64:	60f8      	str	r0, [r7, #12]
 8026e66:	60b9      	str	r1, [r7, #8]
 8026e68:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8026e6a:	687a      	ldr	r2, [r7, #4]
 8026e6c:	68b9      	ldr	r1, [r7, #8]
 8026e6e:	68f8      	ldr	r0, [r7, #12]
 8026e70:	f000 f9d0 	bl	8027214 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026e74:	4603      	mov	r3, r0
 8026e76:	4618      	mov	r0, r3
 8026e78:	3710      	adds	r7, #16
 8026e7a:	46bd      	mov	sp, r7
 8026e7c:	bd80      	pop	{r7, pc}

08026e7e <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026e7e:	b580      	push	{r7, lr}
 8026e80:	b082      	sub	sp, #8
 8026e82:	af00      	add	r7, sp, #0
 8026e84:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026e86:	6878      	ldr	r0, [r7, #4]
 8026e88:	f000 f856 	bl	8026f38 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026e8c:	4603      	mov	r3, r0
 8026e8e:	4618      	mov	r0, r3
 8026e90:	3708      	adds	r7, #8
 8026e92:	46bd      	mov	sp, r7
 8026e94:	bd80      	pop	{r7, pc}

08026e96 <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8026e96:	b480      	push	{r7}
 8026e98:	b083      	sub	sp, #12
 8026e9a:	af00      	add	r7, sp, #0
 8026e9c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e9e:	687b      	ldr	r3, [r7, #4]
 8026ea0:	4618      	mov	r0, r3
 8026ea2:	370c      	adds	r7, #12
 8026ea4:	46bd      	mov	sp, r7
 8026ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eaa:	4770      	bx	lr

08026eac <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026eac:	b5b0      	push	{r4, r5, r7, lr}
 8026eae:	b084      	sub	sp, #16
 8026eb0:	af00      	add	r7, sp, #0
 8026eb2:	60f8      	str	r0, [r7, #12]
 8026eb4:	60b9      	str	r1, [r7, #8]
 8026eb6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026eb8:	68f8      	ldr	r0, [r7, #12]
 8026eba:	f000 f9bb 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026ebe:	4604      	mov	r4, r0
 8026ec0:	68b8      	ldr	r0, [r7, #8]
 8026ec2:	f000 f9b7 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026ec6:	4605      	mov	r5, r0
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	4618      	mov	r0, r3
 8026ecc:	f000 f9b2 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026ed0:	4603      	mov	r3, r0
 8026ed2:	461a      	mov	r2, r3
 8026ed4:	4629      	mov	r1, r5
 8026ed6:	4620      	mov	r0, r4
 8026ed8:	f000 f9b7 	bl	802724a <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026edc:	4602      	mov	r2, r0
 8026ede:	1d3b      	adds	r3, r7, #4
 8026ee0:	4611      	mov	r1, r2
 8026ee2:	4618      	mov	r0, r3
 8026ee4:	f000 f9c1 	bl	802726a <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026ee8:	4603      	mov	r3, r0
    }
 8026eea:	4618      	mov	r0, r3
 8026eec:	3710      	adds	r7, #16
 8026eee:	46bd      	mov	sp, r7
 8026ef0:	bdb0      	pop	{r4, r5, r7, pc}

08026ef2 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026ef2:	b5b0      	push	{r4, r5, r7, lr}
 8026ef4:	b084      	sub	sp, #16
 8026ef6:	af00      	add	r7, sp, #0
 8026ef8:	60f8      	str	r0, [r7, #12]
 8026efa:	60b9      	str	r1, [r7, #8]
 8026efc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026efe:	68f8      	ldr	r0, [r7, #12]
 8026f00:	f000 f998 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026f04:	4604      	mov	r4, r0
 8026f06:	68b8      	ldr	r0, [r7, #8]
 8026f08:	f000 f994 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026f0c:	4605      	mov	r5, r0
 8026f0e:	687b      	ldr	r3, [r7, #4]
 8026f10:	4618      	mov	r0, r3
 8026f12:	f000 f98f 	bl	8027234 <_ZSt12__niter_baseIPPjET_S2_>
 8026f16:	4603      	mov	r3, r0
 8026f18:	461a      	mov	r2, r3
 8026f1a:	4629      	mov	r1, r5
 8026f1c:	4620      	mov	r0, r4
 8026f1e:	f000 f9b0 	bl	8027282 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026f22:	4602      	mov	r2, r0
 8026f24:	1d3b      	adds	r3, r7, #4
 8026f26:	4611      	mov	r1, r2
 8026f28:	4618      	mov	r0, r3
 8026f2a:	f000 f99e 	bl	802726a <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026f2e:	4603      	mov	r3, r0
    }
 8026f30:	4618      	mov	r0, r3
 8026f32:	3710      	adds	r7, #16
 8026f34:	46bd      	mov	sp, r7
 8026f36:	bdb0      	pop	{r4, r5, r7, pc}

08026f38 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026f38:	b480      	push	{r7}
 8026f3a:	b083      	sub	sp, #12
 8026f3c:	af00      	add	r7, sp, #0
 8026f3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026f40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026f44:	4618      	mov	r0, r3
 8026f46:	370c      	adds	r7, #12
 8026f48:	46bd      	mov	sp, r7
 8026f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f4e:	4770      	bx	lr

08026f50 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026f50:	b480      	push	{r7}
 8026f52:	b083      	sub	sp, #12
 8026f54:	af00      	add	r7, sp, #0
 8026f56:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026f58:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026f5c:	4618      	mov	r0, r3
 8026f5e:	370c      	adds	r7, #12
 8026f60:	46bd      	mov	sp, r7
 8026f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f66:	4770      	bx	lr

08026f68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8026f68:	b580      	push	{r7, lr}
 8026f6a:	b086      	sub	sp, #24
 8026f6c:	af00      	add	r7, sp, #0
 8026f6e:	60f8      	str	r0, [r7, #12]
 8026f70:	60b9      	str	r1, [r7, #8]
 8026f72:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8026f74:	68ba      	ldr	r2, [r7, #8]
 8026f76:	68fb      	ldr	r3, [r7, #12]
 8026f78:	1ad3      	subs	r3, r2, r3
 8026f7a:	109b      	asrs	r3, r3, #2
 8026f7c:	4a0e      	ldr	r2, [pc, #56]	; (8026fb8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8026f7e:	fb02 f303 	mul.w	r3, r2, r3
 8026f82:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8026f84:	697b      	ldr	r3, [r7, #20]
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	d009      	beq.n	8026f9e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8026f8a:	697a      	ldr	r2, [r7, #20]
 8026f8c:	4613      	mov	r3, r2
 8026f8e:	009b      	lsls	r3, r3, #2
 8026f90:	4413      	add	r3, r2
 8026f92:	009b      	lsls	r3, r3, #2
 8026f94:	461a      	mov	r2, r3
 8026f96:	68f9      	ldr	r1, [r7, #12]
 8026f98:	6878      	ldr	r0, [r7, #4]
 8026f9a:	f014 ff4d 	bl	803be38 <memmove>
	  return __result + _Num;
 8026f9e:	697a      	ldr	r2, [r7, #20]
 8026fa0:	4613      	mov	r3, r2
 8026fa2:	009b      	lsls	r3, r3, #2
 8026fa4:	4413      	add	r3, r2
 8026fa6:	009b      	lsls	r3, r3, #2
 8026fa8:	461a      	mov	r2, r3
 8026faa:	687b      	ldr	r3, [r7, #4]
 8026fac:	4413      	add	r3, r2
	}
 8026fae:	4618      	mov	r0, r3
 8026fb0:	3718      	adds	r7, #24
 8026fb2:	46bd      	mov	sp, r7
 8026fb4:	bd80      	pop	{r7, pc}
 8026fb6:	bf00      	nop
 8026fb8:	cccccccd 	.word	0xcccccccd

08026fbc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026fbc:	b580      	push	{r7, lr}
 8026fbe:	b090      	sub	sp, #64	; 0x40
 8026fc0:	af00      	add	r7, sp, #0
 8026fc2:	60f8      	str	r0, [r7, #12]
 8026fc4:	60b9      	str	r1, [r7, #8]
 8026fc6:	607a      	str	r2, [r7, #4]
 8026fc8:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8026fca:	f107 0310 	add.w	r3, r7, #16
 8026fce:	68b9      	ldr	r1, [r7, #8]
 8026fd0:	4618      	mov	r0, r3
 8026fd2:	f7ff fca0 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026fd6:	f107 0320 	add.w	r3, r7, #32
 8026fda:	6879      	ldr	r1, [r7, #4]
 8026fdc:	4618      	mov	r0, r3
 8026fde:	f7ff fc9a 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026fe6:	6839      	ldr	r1, [r7, #0]
 8026fe8:	4618      	mov	r0, r3
 8026fea:	f7fd f9d0 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026fee:	68f8      	ldr	r0, [r7, #12]
 8026ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026ff4:	f107 0220 	add.w	r2, r7, #32
 8026ff8:	f107 0110 	add.w	r1, r7, #16
 8026ffc:	f000 f951 	bl	80272a2 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8027000:	68f8      	ldr	r0, [r7, #12]
 8027002:	3740      	adds	r7, #64	; 0x40
 8027004:	46bd      	mov	sp, r7
 8027006:	bd80      	pop	{r7, pc}

08027008 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8027008:	b5b0      	push	{r4, r5, r7, lr}
 802700a:	b09e      	sub	sp, #120	; 0x78
 802700c:	af00      	add	r7, sp, #0
 802700e:	60f8      	str	r0, [r7, #12]
 8027010:	60b9      	str	r1, [r7, #8]
 8027012:	607a      	str	r2, [r7, #4]
 8027014:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8027016:	68bb      	ldr	r3, [r7, #8]
 8027018:	68da      	ldr	r2, [r3, #12]
 802701a:	687b      	ldr	r3, [r7, #4]
 802701c:	68db      	ldr	r3, [r3, #12]
 802701e:	429a      	cmp	r2, r3
 8027020:	d058      	beq.n	80270d4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 8027022:	68bb      	ldr	r3, [r7, #8]
 8027024:	681c      	ldr	r4, [r3, #0]
 8027026:	68bb      	ldr	r3, [r7, #8]
 8027028:	689d      	ldr	r5, [r3, #8]
 802702a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802702e:	6839      	ldr	r1, [r7, #0]
 8027030:	4618      	mov	r0, r3
 8027032:	f7fd f9ac 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027036:	f107 0014 	add.w	r0, r7, #20
 802703a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802703e:	462a      	mov	r2, r5
 8027040:	4621      	mov	r1, r4
 8027042:	f000 f965 	bl	8027310 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8027046:	683b      	ldr	r3, [r7, #0]
 8027048:	461c      	mov	r4, r3
 802704a:	f107 0314 	add.w	r3, r7, #20
 802704e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8027054:	68bb      	ldr	r3, [r7, #8]
 8027056:	68db      	ldr	r3, [r3, #12]
 8027058:	3304      	adds	r3, #4
 802705a:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 802705c:	687b      	ldr	r3, [r7, #4]
 802705e:	68db      	ldr	r3, [r3, #12]
 8027060:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8027062:	429a      	cmp	r2, r3
 8027064:	d024      	beq.n	80270b0 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 8027066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027068:	681d      	ldr	r5, [r3, #0]
 802706a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802706c:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802706e:	f7fd fc72 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027072:	4602      	mov	r2, r0
 8027074:	4613      	mov	r3, r2
 8027076:	009b      	lsls	r3, r3, #2
 8027078:	4413      	add	r3, r2
 802707a:	009b      	lsls	r3, r3, #2
	    __result
 802707c:	441c      	add	r4, r3
 802707e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027082:	6839      	ldr	r1, [r7, #0]
 8027084:	4618      	mov	r0, r3
 8027086:	f7fd f982 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802708a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802708e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027092:	4622      	mov	r2, r4
 8027094:	4629      	mov	r1, r5
 8027096:	f000 f93b 	bl	8027310 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802709a:	683b      	ldr	r3, [r7, #0]
 802709c:	461c      	mov	r4, r3
 802709e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80270a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80270a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270aa:	3304      	adds	r3, #4
 80270ac:	677b      	str	r3, [r7, #116]	; 0x74
 80270ae:	e7d5      	b.n	802705c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	685c      	ldr	r4, [r3, #4]
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	681d      	ldr	r5, [r3, #0]
 80270b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80270bc:	6839      	ldr	r1, [r7, #0]
 80270be:	4618      	mov	r0, r3
 80270c0:	f7fd f965 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270c4:	68f8      	ldr	r0, [r7, #12]
 80270c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80270ca:	462a      	mov	r2, r5
 80270cc:	4621      	mov	r1, r4
 80270ce:	f000 f91f 	bl	8027310 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80270d2:	e010      	b.n	80270f6 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 80270d4:	68bb      	ldr	r3, [r7, #8]
 80270d6:	681c      	ldr	r4, [r3, #0]
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	681d      	ldr	r5, [r3, #0]
 80270dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80270e0:	6839      	ldr	r1, [r7, #0]
 80270e2:	4618      	mov	r0, r3
 80270e4:	f7fd f953 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270e8:	68f8      	ldr	r0, [r7, #12]
 80270ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80270ee:	462a      	mov	r2, r5
 80270f0:	4621      	mov	r1, r4
 80270f2:	f000 f90d 	bl	8027310 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80270f6:	68f8      	ldr	r0, [r7, #12]
 80270f8:	3778      	adds	r7, #120	; 0x78
 80270fa:	46bd      	mov	sp, r7
 80270fc:	bdb0      	pop	{r4, r5, r7, pc}

080270fe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 80270fe:	b5b0      	push	{r4, r5, r7, lr}
 8027100:	b09e      	sub	sp, #120	; 0x78
 8027102:	af00      	add	r7, sp, #0
 8027104:	60f8      	str	r0, [r7, #12]
 8027106:	60b9      	str	r1, [r7, #8]
 8027108:	607a      	str	r2, [r7, #4]
 802710a:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802710c:	68bb      	ldr	r3, [r7, #8]
 802710e:	68da      	ldr	r2, [r3, #12]
 8027110:	687b      	ldr	r3, [r7, #4]
 8027112:	68db      	ldr	r3, [r3, #12]
 8027114:	429a      	cmp	r2, r3
 8027116:	d058      	beq.n	80271ca <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	685c      	ldr	r4, [r3, #4]
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	681d      	ldr	r5, [r3, #0]
 8027120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027124:	6839      	ldr	r1, [r7, #0]
 8027126:	4618      	mov	r0, r3
 8027128:	f7fd f931 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802712c:	f107 0014 	add.w	r0, r7, #20
 8027130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027134:	462a      	mov	r2, r5
 8027136:	4621      	mov	r1, r4
 8027138:	f000 f93c 	bl	80273b4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802713c:	683b      	ldr	r3, [r7, #0]
 802713e:	461c      	mov	r4, r3
 8027140:	f107 0314 	add.w	r3, r7, #20
 8027144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	68db      	ldr	r3, [r3, #12]
 802714e:	3b04      	subs	r3, #4
 8027150:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 8027152:	68bb      	ldr	r3, [r7, #8]
 8027154:	68db      	ldr	r3, [r3, #12]
 8027156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8027158:	429a      	cmp	r2, r3
 802715a:	d024      	beq.n	80271a6 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802715c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802715e:	681d      	ldr	r5, [r3, #0]
 8027160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027162:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8027164:	f7fd fbf7 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027168:	4602      	mov	r2, r0
 802716a:	4613      	mov	r3, r2
 802716c:	009b      	lsls	r3, r3, #2
 802716e:	4413      	add	r3, r2
 8027170:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8027172:	441c      	add	r4, r3
 8027174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027178:	6839      	ldr	r1, [r7, #0]
 802717a:	4618      	mov	r0, r3
 802717c:	f7fd f907 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027180:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8027184:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027188:	4622      	mov	r2, r4
 802718a:	4629      	mov	r1, r5
 802718c:	f000 f912 	bl	80273b4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8027190:	683b      	ldr	r3, [r7, #0]
 8027192:	461c      	mov	r4, r3
 8027194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8027198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802719a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802719e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80271a0:	3b04      	subs	r3, #4
 80271a2:	677b      	str	r3, [r7, #116]	; 0x74
 80271a4:	e7d5      	b.n	8027152 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 80271a6:	68bb      	ldr	r3, [r7, #8]
 80271a8:	681c      	ldr	r4, [r3, #0]
 80271aa:	68bb      	ldr	r3, [r7, #8]
 80271ac:	689d      	ldr	r5, [r3, #8]
 80271ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80271b2:	6839      	ldr	r1, [r7, #0]
 80271b4:	4618      	mov	r0, r3
 80271b6:	f7fd f8ea 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271ba:	68f8      	ldr	r0, [r7, #12]
 80271bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80271c0:	462a      	mov	r2, r5
 80271c2:	4621      	mov	r1, r4
 80271c4:	f000 f8f6 	bl	80273b4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80271c8:	e010      	b.n	80271ec <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 80271ca:	68bb      	ldr	r3, [r7, #8]
 80271cc:	681c      	ldr	r4, [r3, #0]
 80271ce:	687b      	ldr	r3, [r7, #4]
 80271d0:	681d      	ldr	r5, [r3, #0]
 80271d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80271d6:	6839      	ldr	r1, [r7, #0]
 80271d8:	4618      	mov	r0, r3
 80271da:	f7fd f8d8 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271de:	68f8      	ldr	r0, [r7, #12]
 80271e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80271e4:	462a      	mov	r2, r5
 80271e6:	4621      	mov	r1, r4
 80271e8:	f000 f8e4 	bl	80273b4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80271ec:	68f8      	ldr	r0, [r7, #12]
 80271ee:	3778      	adds	r7, #120	; 0x78
 80271f0:	46bd      	mov	sp, r7
 80271f2:	bdb0      	pop	{r4, r5, r7, pc}

080271f4 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80271f4:	b580      	push	{r7, lr}
 80271f6:	b084      	sub	sp, #16
 80271f8:	af00      	add	r7, sp, #0
 80271fa:	60f8      	str	r0, [r7, #12]
 80271fc:	60b9      	str	r1, [r7, #8]
 80271fe:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027200:	687a      	ldr	r2, [r7, #4]
 8027202:	68b9      	ldr	r1, [r7, #8]
 8027204:	68f8      	ldr	r0, [r7, #12]
 8027206:	f000 f93b 	bl	8027480 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802720a:	4603      	mov	r3, r0
    }
 802720c:	4618      	mov	r0, r3
 802720e:	3710      	adds	r7, #16
 8027210:	46bd      	mov	sp, r7
 8027212:	bd80      	pop	{r7, pc}

08027214 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027214:	b580      	push	{r7, lr}
 8027216:	b084      	sub	sp, #16
 8027218:	af00      	add	r7, sp, #0
 802721a:	60f8      	str	r0, [r7, #12]
 802721c:	60b9      	str	r1, [r7, #8]
 802721e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027220:	687a      	ldr	r2, [r7, #4]
 8027222:	68b9      	ldr	r1, [r7, #8]
 8027224:	68f8      	ldr	r0, [r7, #12]
 8027226:	f000 f948 	bl	80274ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802722a:	4603      	mov	r3, r0
    }
 802722c:	4618      	mov	r0, r3
 802722e:	3710      	adds	r7, #16
 8027230:	46bd      	mov	sp, r7
 8027232:	bd80      	pop	{r7, pc}

08027234 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 8027234:	b480      	push	{r7}
 8027236:	b083      	sub	sp, #12
 8027238:	af00      	add	r7, sp, #0
 802723a:	6078      	str	r0, [r7, #4]
    { return __it; }
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	4618      	mov	r0, r3
 8027240:	370c      	adds	r7, #12
 8027242:	46bd      	mov	sp, r7
 8027244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027248:	4770      	bx	lr

0802724a <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802724a:	b580      	push	{r7, lr}
 802724c:	b084      	sub	sp, #16
 802724e:	af00      	add	r7, sp, #0
 8027250:	60f8      	str	r0, [r7, #12]
 8027252:	60b9      	str	r1, [r7, #8]
 8027254:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027256:	687a      	ldr	r2, [r7, #4]
 8027258:	68b9      	ldr	r1, [r7, #8]
 802725a:	68f8      	ldr	r0, [r7, #12]
 802725c:	f000 f94f 	bl	80274fe <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 8027260:	4603      	mov	r3, r0
 8027262:	4618      	mov	r0, r3
 8027264:	3710      	adds	r7, #16
 8027266:	46bd      	mov	sp, r7
 8027268:	bd80      	pop	{r7, pc}

0802726a <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802726a:	b480      	push	{r7}
 802726c:	b083      	sub	sp, #12
 802726e:	af00      	add	r7, sp, #0
 8027270:	6078      	str	r0, [r7, #4]
 8027272:	6039      	str	r1, [r7, #0]
    { return __res; }
 8027274:	683b      	ldr	r3, [r7, #0]
 8027276:	4618      	mov	r0, r3
 8027278:	370c      	adds	r7, #12
 802727a:	46bd      	mov	sp, r7
 802727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027280:	4770      	bx	lr

08027282 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8027282:	b580      	push	{r7, lr}
 8027284:	b084      	sub	sp, #16
 8027286:	af00      	add	r7, sp, #0
 8027288:	60f8      	str	r0, [r7, #12]
 802728a:	60b9      	str	r1, [r7, #8]
 802728c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802728e:	687a      	ldr	r2, [r7, #4]
 8027290:	68b9      	ldr	r1, [r7, #8]
 8027292:	68f8      	ldr	r0, [r7, #12]
 8027294:	f000 f943 	bl	802751e <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 8027298:	4603      	mov	r3, r0
 802729a:	4618      	mov	r0, r3
 802729c:	3710      	adds	r7, #16
 802729e:	46bd      	mov	sp, r7
 80272a0:	bd80      	pop	{r7, pc}

080272a2 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 80272a2:	b580      	push	{r7, lr}
 80272a4:	b098      	sub	sp, #96	; 0x60
 80272a6:	af00      	add	r7, sp, #0
 80272a8:	60f8      	str	r0, [r7, #12]
 80272aa:	60b9      	str	r1, [r7, #8]
 80272ac:	607a      	str	r2, [r7, #4]
 80272ae:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80272b0:	f107 0320 	add.w	r3, r7, #32
 80272b4:	68b9      	ldr	r1, [r7, #8]
 80272b6:	4618      	mov	r0, r3
 80272b8:	f7ff fb2d 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80272bc:	f107 0310 	add.w	r3, r7, #16
 80272c0:	f107 0220 	add.w	r2, r7, #32
 80272c4:	4611      	mov	r1, r2
 80272c6:	4618      	mov	r0, r3
 80272c8:	f000 f939 	bl	802753e <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80272cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80272d0:	6879      	ldr	r1, [r7, #4]
 80272d2:	4618      	mov	r0, r3
 80272d4:	f7ff fb1f 	bl	8026916 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80272d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80272dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80272e0:	4611      	mov	r1, r2
 80272e2:	4618      	mov	r0, r3
 80272e4:	f000 f92b 	bl	802753e <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80272e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80272ec:	6839      	ldr	r1, [r7, #0]
 80272ee:	4618      	mov	r0, r3
 80272f0:	f7fd f84d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80272f4:	68f8      	ldr	r0, [r7, #12]
 80272f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80272fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80272fe:	f107 0110 	add.w	r1, r7, #16
 8027302:	f7ff fb4b 	bl	802699c <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8027306:	68f8      	ldr	r0, [r7, #12]
 8027308:	3760      	adds	r7, #96	; 0x60
 802730a:	46bd      	mov	sp, r7
 802730c:	bd80      	pop	{r7, pc}
	...

08027310 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8027310:	b580      	push	{r7, lr}
 8027312:	b088      	sub	sp, #32
 8027314:	af00      	add	r7, sp, #0
 8027316:	60f8      	str	r0, [r7, #12]
 8027318:	60b9      	str	r1, [r7, #8]
 802731a:	607a      	str	r2, [r7, #4]
 802731c:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802731e:	687a      	ldr	r2, [r7, #4]
 8027320:	68bb      	ldr	r3, [r7, #8]
 8027322:	1ad3      	subs	r3, r2, r3
 8027324:	109b      	asrs	r3, r3, #2
 8027326:	4a22      	ldr	r2, [pc, #136]	; (80273b0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8027328:	fb02 f303 	mul.w	r3, r2, r3
 802732c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802732e:	697b      	ldr	r3, [r7, #20]
 8027330:	2b00      	cmp	r3, #0
 8027332:	dd34      	ble.n	802739e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8027334:	683b      	ldr	r3, [r7, #0]
 8027336:	689a      	ldr	r2, [r3, #8]
 8027338:	683b      	ldr	r3, [r7, #0]
 802733a:	681b      	ldr	r3, [r3, #0]
 802733c:	1ad3      	subs	r3, r2, r3
 802733e:	109b      	asrs	r3, r3, #2
 8027340:	4a1b      	ldr	r2, [pc, #108]	; (80273b0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8027342:	fb02 f303 	mul.w	r3, r2, r3
 8027346:	61bb      	str	r3, [r7, #24]
 8027348:	f107 0218 	add.w	r2, r7, #24
 802734c:	f107 0314 	add.w	r3, r7, #20
 8027350:	4611      	mov	r1, r2
 8027352:	4618      	mov	r0, r3
 8027354:	f7fe fd4d 	bl	8025df2 <_ZSt3minIiERKT_S2_S2_>
 8027358:	4603      	mov	r3, r0
	  const difference_type __clen
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 802735e:	69fa      	ldr	r2, [r7, #28]
 8027360:	4613      	mov	r3, r2
 8027362:	009b      	lsls	r3, r3, #2
 8027364:	4413      	add	r3, r2
 8027366:	009b      	lsls	r3, r3, #2
 8027368:	461a      	mov	r2, r3
 802736a:	68bb      	ldr	r3, [r7, #8]
 802736c:	1899      	adds	r1, r3, r2
 802736e:	683b      	ldr	r3, [r7, #0]
 8027370:	681b      	ldr	r3, [r3, #0]
 8027372:	461a      	mov	r2, r3
 8027374:	68b8      	ldr	r0, [r7, #8]
 8027376:	f000 f8f8 	bl	802756a <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 802737a:	69fa      	ldr	r2, [r7, #28]
 802737c:	4613      	mov	r3, r2
 802737e:	009b      	lsls	r3, r3, #2
 8027380:	4413      	add	r3, r2
 8027382:	009b      	lsls	r3, r3, #2
 8027384:	461a      	mov	r2, r3
 8027386:	68bb      	ldr	r3, [r7, #8]
 8027388:	4413      	add	r3, r2
 802738a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802738c:	69f9      	ldr	r1, [r7, #28]
 802738e:	6838      	ldr	r0, [r7, #0]
 8027390:	f7fe fa48 	bl	8025824 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8027394:	697a      	ldr	r2, [r7, #20]
 8027396:	69fb      	ldr	r3, [r7, #28]
 8027398:	1ad3      	subs	r3, r2, r3
 802739a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802739c:	e7c7      	b.n	802732e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 802739e:	6839      	ldr	r1, [r7, #0]
 80273a0:	68f8      	ldr	r0, [r7, #12]
 80273a2:	f7fc fff4 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80273a6:	68f8      	ldr	r0, [r7, #12]
 80273a8:	3720      	adds	r7, #32
 80273aa:	46bd      	mov	sp, r7
 80273ac:	bd80      	pop	{r7, pc}
 80273ae:	bf00      	nop
 80273b0:	cccccccd 	.word	0xcccccccd

080273b4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 80273b4:	b580      	push	{r7, lr}
 80273b6:	b088      	sub	sp, #32
 80273b8:	af00      	add	r7, sp, #0
 80273ba:	60f8      	str	r0, [r7, #12]
 80273bc:	60b9      	str	r1, [r7, #8]
 80273be:	607a      	str	r2, [r7, #4]
 80273c0:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80273c2:	687a      	ldr	r2, [r7, #4]
 80273c4:	68bb      	ldr	r3, [r7, #8]
 80273c6:	1ad3      	subs	r3, r2, r3
 80273c8:	109b      	asrs	r3, r3, #2
 80273ca:	4a2c      	ldr	r2, [pc, #176]	; (802747c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 80273cc:	fb02 f303 	mul.w	r3, r2, r3
 80273d0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80273d2:	697b      	ldr	r3, [r7, #20]
 80273d4:	2b00      	cmp	r3, #0
 80273d6:	dd49      	ble.n	802746c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 80273d8:	683b      	ldr	r3, [r7, #0]
 80273da:	681a      	ldr	r2, [r3, #0]
 80273dc:	683b      	ldr	r3, [r7, #0]
 80273de:	685b      	ldr	r3, [r3, #4]
 80273e0:	1ad3      	subs	r3, r2, r3
 80273e2:	109b      	asrs	r3, r3, #2
 80273e4:	4a25      	ldr	r2, [pc, #148]	; (802747c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 80273e6:	fb02 f303 	mul.w	r3, r2, r3
 80273ea:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 80273ec:	683b      	ldr	r3, [r7, #0]
 80273ee:	681b      	ldr	r3, [r3, #0]
 80273f0:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 80273f2:	693b      	ldr	r3, [r7, #16]
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	d10f      	bne.n	8027418 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 80273f8:	f7fd faad 	bl	8024956 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80273fc:	4603      	mov	r3, r0
 80273fe:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8027400:	683b      	ldr	r3, [r7, #0]
 8027402:	68db      	ldr	r3, [r3, #12]
 8027404:	3b04      	subs	r3, #4
 8027406:	681a      	ldr	r2, [r3, #0]
 8027408:	693b      	ldr	r3, [r7, #16]
 802740a:	4619      	mov	r1, r3
 802740c:	460b      	mov	r3, r1
 802740e:	009b      	lsls	r3, r3, #2
 8027410:	440b      	add	r3, r1
 8027412:	009b      	lsls	r3, r3, #2
 8027414:	4413      	add	r3, r2
 8027416:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8027418:	f107 0210 	add.w	r2, r7, #16
 802741c:	f107 0314 	add.w	r3, r7, #20
 8027420:	4611      	mov	r1, r2
 8027422:	4618      	mov	r0, r3
 8027424:	f7fe fce5 	bl	8025df2 <_ZSt3minIiERKT_S2_S2_>
 8027428:	4603      	mov	r3, r0
 802742a:	681b      	ldr	r3, [r3, #0]
 802742c:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 802742e:	69ba      	ldr	r2, [r7, #24]
 8027430:	4613      	mov	r3, r2
 8027432:	009b      	lsls	r3, r3, #2
 8027434:	4413      	add	r3, r2
 8027436:	009b      	lsls	r3, r3, #2
 8027438:	425b      	negs	r3, r3
 802743a:	687a      	ldr	r2, [r7, #4]
 802743c:	4413      	add	r3, r2
 802743e:	69fa      	ldr	r2, [r7, #28]
 8027440:	6879      	ldr	r1, [r7, #4]
 8027442:	4618      	mov	r0, r3
 8027444:	f000 f8a1 	bl	802758a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 8027448:	69ba      	ldr	r2, [r7, #24]
 802744a:	4613      	mov	r3, r2
 802744c:	009b      	lsls	r3, r3, #2
 802744e:	4413      	add	r3, r2
 8027450:	009b      	lsls	r3, r3, #2
 8027452:	425b      	negs	r3, r3
 8027454:	687a      	ldr	r2, [r7, #4]
 8027456:	4413      	add	r3, r2
 8027458:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802745a:	69b9      	ldr	r1, [r7, #24]
 802745c:	6838      	ldr	r0, [r7, #0]
 802745e:	f7ff f9fe 	bl	802685e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 8027462:	697a      	ldr	r2, [r7, #20]
 8027464:	69bb      	ldr	r3, [r7, #24]
 8027466:	1ad3      	subs	r3, r2, r3
 8027468:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802746a:	e7b2      	b.n	80273d2 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 802746c:	6839      	ldr	r1, [r7, #0]
 802746e:	68f8      	ldr	r0, [r7, #12]
 8027470:	f7fc ff8d 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8027474:	68f8      	ldr	r0, [r7, #12]
 8027476:	3720      	adds	r7, #32
 8027478:	46bd      	mov	sp, r7
 802747a:	bd80      	pop	{r7, pc}
 802747c:	cccccccd 	.word	0xcccccccd

08027480 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027480:	b580      	push	{r7, lr}
 8027482:	b086      	sub	sp, #24
 8027484:	af00      	add	r7, sp, #0
 8027486:	60f8      	str	r0, [r7, #12]
 8027488:	60b9      	str	r1, [r7, #8]
 802748a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802748c:	68ba      	ldr	r2, [r7, #8]
 802748e:	68fb      	ldr	r3, [r7, #12]
 8027490:	1ad3      	subs	r3, r2, r3
 8027492:	109b      	asrs	r3, r3, #2
 8027494:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027496:	697b      	ldr	r3, [r7, #20]
 8027498:	2b00      	cmp	r3, #0
 802749a:	d006      	beq.n	80274aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802749c:	697b      	ldr	r3, [r7, #20]
 802749e:	009b      	lsls	r3, r3, #2
 80274a0:	461a      	mov	r2, r3
 80274a2:	68f9      	ldr	r1, [r7, #12]
 80274a4:	6878      	ldr	r0, [r7, #4]
 80274a6:	f014 fcc7 	bl	803be38 <memmove>
	  return __result + _Num;
 80274aa:	697b      	ldr	r3, [r7, #20]
 80274ac:	009b      	lsls	r3, r3, #2
 80274ae:	687a      	ldr	r2, [r7, #4]
 80274b0:	4413      	add	r3, r2
	}
 80274b2:	4618      	mov	r0, r3
 80274b4:	3718      	adds	r7, #24
 80274b6:	46bd      	mov	sp, r7
 80274b8:	bd80      	pop	{r7, pc}

080274ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80274ba:	b580      	push	{r7, lr}
 80274bc:	b086      	sub	sp, #24
 80274be:	af00      	add	r7, sp, #0
 80274c0:	60f8      	str	r0, [r7, #12]
 80274c2:	60b9      	str	r1, [r7, #8]
 80274c4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80274c6:	68ba      	ldr	r2, [r7, #8]
 80274c8:	68fb      	ldr	r3, [r7, #12]
 80274ca:	1ad3      	subs	r3, r2, r3
 80274cc:	109b      	asrs	r3, r3, #2
 80274ce:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80274d0:	697b      	ldr	r3, [r7, #20]
 80274d2:	2b00      	cmp	r3, #0
 80274d4:	d00a      	beq.n	80274ec <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80274d6:	697b      	ldr	r3, [r7, #20]
 80274d8:	009b      	lsls	r3, r3, #2
 80274da:	425b      	negs	r3, r3
 80274dc:	687a      	ldr	r2, [r7, #4]
 80274de:	18d0      	adds	r0, r2, r3
 80274e0:	697b      	ldr	r3, [r7, #20]
 80274e2:	009b      	lsls	r3, r3, #2
 80274e4:	461a      	mov	r2, r3
 80274e6:	68f9      	ldr	r1, [r7, #12]
 80274e8:	f014 fca6 	bl	803be38 <memmove>
	  return __result - _Num;
 80274ec:	697b      	ldr	r3, [r7, #20]
 80274ee:	009b      	lsls	r3, r3, #2
 80274f0:	425b      	negs	r3, r3
 80274f2:	687a      	ldr	r2, [r7, #4]
 80274f4:	4413      	add	r3, r2
	}
 80274f6:	4618      	mov	r0, r3
 80274f8:	3718      	adds	r7, #24
 80274fa:	46bd      	mov	sp, r7
 80274fc:	bd80      	pop	{r7, pc}

080274fe <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80274fe:	b580      	push	{r7, lr}
 8027500:	b084      	sub	sp, #16
 8027502:	af00      	add	r7, sp, #0
 8027504:	60f8      	str	r0, [r7, #12]
 8027506:	60b9      	str	r1, [r7, #8]
 8027508:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802750a:	687a      	ldr	r2, [r7, #4]
 802750c:	68b9      	ldr	r1, [r7, #8]
 802750e:	68f8      	ldr	r0, [r7, #12]
 8027510:	f000 f84b 	bl	80275aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 8027514:	4603      	mov	r3, r0
    }
 8027516:	4618      	mov	r0, r3
 8027518:	3710      	adds	r7, #16
 802751a:	46bd      	mov	sp, r7
 802751c:	bd80      	pop	{r7, pc}

0802751e <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802751e:	b580      	push	{r7, lr}
 8027520:	b084      	sub	sp, #16
 8027522:	af00      	add	r7, sp, #0
 8027524:	60f8      	str	r0, [r7, #12]
 8027526:	60b9      	str	r1, [r7, #8]
 8027528:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802752a:	687a      	ldr	r2, [r7, #4]
 802752c:	68b9      	ldr	r1, [r7, #8]
 802752e:	68f8      	ldr	r0, [r7, #12]
 8027530:	f000 f858 	bl	80275e4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 8027534:	4603      	mov	r3, r0
    }
 8027536:	4618      	mov	r0, r3
 8027538:	3710      	adds	r7, #16
 802753a:	46bd      	mov	sp, r7
 802753c:	bd80      	pop	{r7, pc}

0802753e <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 802753e:	b580      	push	{r7, lr}
 8027540:	b086      	sub	sp, #24
 8027542:	af00      	add	r7, sp, #0
 8027544:	6078      	str	r0, [r7, #4]
 8027546:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8027548:	f107 0308 	add.w	r3, r7, #8
 802754c:	6839      	ldr	r1, [r7, #0]
 802754e:	4618      	mov	r0, r3
 8027550:	f000 f86a 	bl	8027628 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8027554:	687b      	ldr	r3, [r7, #4]
 8027556:	f107 0208 	add.w	r2, r7, #8
 802755a:	4611      	mov	r1, r2
 802755c:	4618      	mov	r0, r3
 802755e:	f7ff fa10 	bl	8026982 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027562:	6878      	ldr	r0, [r7, #4]
 8027564:	3718      	adds	r7, #24
 8027566:	46bd      	mov	sp, r7
 8027568:	bd80      	pop	{r7, pc}

0802756a <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802756a:	b580      	push	{r7, lr}
 802756c:	b084      	sub	sp, #16
 802756e:	af00      	add	r7, sp, #0
 8027570:	60f8      	str	r0, [r7, #12]
 8027572:	60b9      	str	r1, [r7, #8]
 8027574:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027576:	687a      	ldr	r2, [r7, #4]
 8027578:	68b9      	ldr	r1, [r7, #8]
 802757a:	68f8      	ldr	r0, [r7, #12]
 802757c:	f000 f862 	bl	8027644 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8027580:	4603      	mov	r3, r0
 8027582:	4618      	mov	r0, r3
 8027584:	3710      	adds	r7, #16
 8027586:	46bd      	mov	sp, r7
 8027588:	bd80      	pop	{r7, pc}

0802758a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802758a:	b580      	push	{r7, lr}
 802758c:	b084      	sub	sp, #16
 802758e:	af00      	add	r7, sp, #0
 8027590:	60f8      	str	r0, [r7, #12]
 8027592:	60b9      	str	r1, [r7, #8]
 8027594:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8027596:	687a      	ldr	r2, [r7, #4]
 8027598:	68b9      	ldr	r1, [r7, #8]
 802759a:	68f8      	ldr	r0, [r7, #12]
 802759c:	f000 f862 	bl	8027664 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80275a0:	4603      	mov	r3, r0
 80275a2:	4618      	mov	r0, r3
 80275a4:	3710      	adds	r7, #16
 80275a6:	46bd      	mov	sp, r7
 80275a8:	bd80      	pop	{r7, pc}

080275aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80275aa:	b580      	push	{r7, lr}
 80275ac:	b086      	sub	sp, #24
 80275ae:	af00      	add	r7, sp, #0
 80275b0:	60f8      	str	r0, [r7, #12]
 80275b2:	60b9      	str	r1, [r7, #8]
 80275b4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80275b6:	68ba      	ldr	r2, [r7, #8]
 80275b8:	68fb      	ldr	r3, [r7, #12]
 80275ba:	1ad3      	subs	r3, r2, r3
 80275bc:	109b      	asrs	r3, r3, #2
 80275be:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80275c0:	697b      	ldr	r3, [r7, #20]
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	d006      	beq.n	80275d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80275c6:	697b      	ldr	r3, [r7, #20]
 80275c8:	009b      	lsls	r3, r3, #2
 80275ca:	461a      	mov	r2, r3
 80275cc:	68f9      	ldr	r1, [r7, #12]
 80275ce:	6878      	ldr	r0, [r7, #4]
 80275d0:	f014 fc32 	bl	803be38 <memmove>
	  return __result + _Num;
 80275d4:	697b      	ldr	r3, [r7, #20]
 80275d6:	009b      	lsls	r3, r3, #2
 80275d8:	687a      	ldr	r2, [r7, #4]
 80275da:	4413      	add	r3, r2
	}
 80275dc:	4618      	mov	r0, r3
 80275de:	3718      	adds	r7, #24
 80275e0:	46bd      	mov	sp, r7
 80275e2:	bd80      	pop	{r7, pc}

080275e4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80275e4:	b580      	push	{r7, lr}
 80275e6:	b086      	sub	sp, #24
 80275e8:	af00      	add	r7, sp, #0
 80275ea:	60f8      	str	r0, [r7, #12]
 80275ec:	60b9      	str	r1, [r7, #8]
 80275ee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80275f0:	68ba      	ldr	r2, [r7, #8]
 80275f2:	68fb      	ldr	r3, [r7, #12]
 80275f4:	1ad3      	subs	r3, r2, r3
 80275f6:	109b      	asrs	r3, r3, #2
 80275f8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80275fa:	697b      	ldr	r3, [r7, #20]
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	d00a      	beq.n	8027616 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027600:	697b      	ldr	r3, [r7, #20]
 8027602:	009b      	lsls	r3, r3, #2
 8027604:	425b      	negs	r3, r3
 8027606:	687a      	ldr	r2, [r7, #4]
 8027608:	18d0      	adds	r0, r2, r3
 802760a:	697b      	ldr	r3, [r7, #20]
 802760c:	009b      	lsls	r3, r3, #2
 802760e:	461a      	mov	r2, r3
 8027610:	68f9      	ldr	r1, [r7, #12]
 8027612:	f014 fc11 	bl	803be38 <memmove>
	  return __result - _Num;
 8027616:	697b      	ldr	r3, [r7, #20]
 8027618:	009b      	lsls	r3, r3, #2
 802761a:	425b      	negs	r3, r3
 802761c:	687a      	ldr	r2, [r7, #4]
 802761e:	4413      	add	r3, r2
	}
 8027620:	4618      	mov	r0, r3
 8027622:	3718      	adds	r7, #24
 8027624:	46bd      	mov	sp, r7
 8027626:	bd80      	pop	{r7, pc}

08027628 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 8027628:	b580      	push	{r7, lr}
 802762a:	b082      	sub	sp, #8
 802762c:	af00      	add	r7, sp, #0
 802762e:	6078      	str	r0, [r7, #4]
 8027630:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8027632:	683b      	ldr	r3, [r7, #0]
 8027634:	4619      	mov	r1, r3
 8027636:	6878      	ldr	r0, [r7, #4]
 8027638:	f7fc fea9 	bl	802438e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802763c:	6878      	ldr	r0, [r7, #4]
 802763e:	3708      	adds	r7, #8
 8027640:	46bd      	mov	sp, r7
 8027642:	bd80      	pop	{r7, pc}

08027644 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027644:	b580      	push	{r7, lr}
 8027646:	b084      	sub	sp, #16
 8027648:	af00      	add	r7, sp, #0
 802764a:	60f8      	str	r0, [r7, #12]
 802764c:	60b9      	str	r1, [r7, #8]
 802764e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027650:	687a      	ldr	r2, [r7, #4]
 8027652:	68b9      	ldr	r1, [r7, #8]
 8027654:	68f8      	ldr	r0, [r7, #12]
 8027656:	f000 f815 	bl	8027684 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802765a:	4603      	mov	r3, r0
    }
 802765c:	4618      	mov	r0, r3
 802765e:	3710      	adds	r7, #16
 8027660:	46bd      	mov	sp, r7
 8027662:	bd80      	pop	{r7, pc}

08027664 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027664:	b580      	push	{r7, lr}
 8027666:	b084      	sub	sp, #16
 8027668:	af00      	add	r7, sp, #0
 802766a:	60f8      	str	r0, [r7, #12]
 802766c:	60b9      	str	r1, [r7, #8]
 802766e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027670:	687a      	ldr	r2, [r7, #4]
 8027672:	68b9      	ldr	r1, [r7, #8]
 8027674:	68f8      	ldr	r0, [r7, #12]
 8027676:	f000 f82f 	bl	80276d8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802767a:	4603      	mov	r3, r0
    }
 802767c:	4618      	mov	r0, r3
 802767e:	3710      	adds	r7, #16
 8027680:	46bd      	mov	sp, r7
 8027682:	bd80      	pop	{r7, pc}

08027684 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027684:	b580      	push	{r7, lr}
 8027686:	b086      	sub	sp, #24
 8027688:	af00      	add	r7, sp, #0
 802768a:	60f8      	str	r0, [r7, #12]
 802768c:	60b9      	str	r1, [r7, #8]
 802768e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027690:	68ba      	ldr	r2, [r7, #8]
 8027692:	68fb      	ldr	r3, [r7, #12]
 8027694:	1ad3      	subs	r3, r2, r3
 8027696:	109b      	asrs	r3, r3, #2
 8027698:	4a0e      	ldr	r2, [pc, #56]	; (80276d4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 802769a:	fb02 f303 	mul.w	r3, r2, r3
 802769e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80276a0:	697b      	ldr	r3, [r7, #20]
 80276a2:	2b00      	cmp	r3, #0
 80276a4:	d009      	beq.n	80276ba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80276a6:	697a      	ldr	r2, [r7, #20]
 80276a8:	4613      	mov	r3, r2
 80276aa:	009b      	lsls	r3, r3, #2
 80276ac:	4413      	add	r3, r2
 80276ae:	009b      	lsls	r3, r3, #2
 80276b0:	461a      	mov	r2, r3
 80276b2:	68f9      	ldr	r1, [r7, #12]
 80276b4:	6878      	ldr	r0, [r7, #4]
 80276b6:	f014 fbbf 	bl	803be38 <memmove>
	  return __result + _Num;
 80276ba:	697a      	ldr	r2, [r7, #20]
 80276bc:	4613      	mov	r3, r2
 80276be:	009b      	lsls	r3, r3, #2
 80276c0:	4413      	add	r3, r2
 80276c2:	009b      	lsls	r3, r3, #2
 80276c4:	461a      	mov	r2, r3
 80276c6:	687b      	ldr	r3, [r7, #4]
 80276c8:	4413      	add	r3, r2
	}
 80276ca:	4618      	mov	r0, r3
 80276cc:	3718      	adds	r7, #24
 80276ce:	46bd      	mov	sp, r7
 80276d0:	bd80      	pop	{r7, pc}
 80276d2:	bf00      	nop
 80276d4:	cccccccd 	.word	0xcccccccd

080276d8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80276d8:	b580      	push	{r7, lr}
 80276da:	b086      	sub	sp, #24
 80276dc:	af00      	add	r7, sp, #0
 80276de:	60f8      	str	r0, [r7, #12]
 80276e0:	60b9      	str	r1, [r7, #8]
 80276e2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80276e4:	68ba      	ldr	r2, [r7, #8]
 80276e6:	68fb      	ldr	r3, [r7, #12]
 80276e8:	1ad3      	subs	r3, r2, r3
 80276ea:	109b      	asrs	r3, r3, #2
 80276ec:	4a11      	ldr	r2, [pc, #68]	; (8027734 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 80276ee:	fb02 f303 	mul.w	r3, r2, r3
 80276f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80276f4:	697b      	ldr	r3, [r7, #20]
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d010      	beq.n	802771c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80276fa:	697a      	ldr	r2, [r7, #20]
 80276fc:	4613      	mov	r3, r2
 80276fe:	009b      	lsls	r3, r3, #2
 8027700:	4413      	add	r3, r2
 8027702:	009b      	lsls	r3, r3, #2
 8027704:	425b      	negs	r3, r3
 8027706:	687a      	ldr	r2, [r7, #4]
 8027708:	18d0      	adds	r0, r2, r3
 802770a:	697a      	ldr	r2, [r7, #20]
 802770c:	4613      	mov	r3, r2
 802770e:	009b      	lsls	r3, r3, #2
 8027710:	4413      	add	r3, r2
 8027712:	009b      	lsls	r3, r3, #2
 8027714:	461a      	mov	r2, r3
 8027716:	68f9      	ldr	r1, [r7, #12]
 8027718:	f014 fb8e 	bl	803be38 <memmove>
	  return __result - _Num;
 802771c:	697a      	ldr	r2, [r7, #20]
 802771e:	4613      	mov	r3, r2
 8027720:	009b      	lsls	r3, r3, #2
 8027722:	4413      	add	r3, r2
 8027724:	009b      	lsls	r3, r3, #2
 8027726:	425b      	negs	r3, r3
 8027728:	687a      	ldr	r2, [r7, #4]
 802772a:	4413      	add	r3, r2
	}
 802772c:	4618      	mov	r0, r3
 802772e:	3718      	adds	r7, #24
 8027730:	46bd      	mov	sp, r7
 8027732:	bd80      	pop	{r7, pc}
 8027734:	cccccccd 	.word	0xcccccccd

08027738 <_Z41__static_initialization_and_destruction_0ii>:
 8027738:	b580      	push	{r7, lr}
 802773a:	b082      	sub	sp, #8
 802773c:	af00      	add	r7, sp, #0
 802773e:	6078      	str	r0, [r7, #4]
 8027740:	6039      	str	r1, [r7, #0]
 8027742:	687b      	ldr	r3, [r7, #4]
 8027744:	2b01      	cmp	r3, #1
 8027746:	d107      	bne.n	8027758 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8027748:	683b      	ldr	r3, [r7, #0]
 802774a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802774e:	4293      	cmp	r3, r2
 8027750:	d102      	bne.n	8027758 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8027752:	4809      	ldr	r0, [pc, #36]	; (8027778 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8027754:	f7fb fbf8 	bl	8022f48 <_ZN18MotherboardContextC1Ev>
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	2b00      	cmp	r3, #0
 802775c:	d107      	bne.n	802776e <_Z41__static_initialization_and_destruction_0ii+0x36>
 802775e:	683b      	ldr	r3, [r7, #0]
 8027760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027764:	4293      	cmp	r3, r2
 8027766:	d102      	bne.n	802776e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8027768:	4803      	ldr	r0, [pc, #12]	; (8027778 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802776a:	f7fb fc37 	bl	8022fdc <_ZN18MotherboardContextD1Ev>
}
 802776e:	bf00      	nop
 8027770:	3708      	adds	r7, #8
 8027772:	46bd      	mov	sp, r7
 8027774:	bd80      	pop	{r7, pc}
 8027776:	bf00      	nop
 8027778:	240001d0 	.word	0x240001d0

0802777c <_GLOBAL__sub_I_MotherboardInit>:
 802777c:	b580      	push	{r7, lr}
 802777e:	af00      	add	r7, sp, #0
 8027780:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027784:	2001      	movs	r0, #1
 8027786:	f7ff ffd7 	bl	8027738 <_Z41__static_initialization_and_destruction_0ii>
 802778a:	bd80      	pop	{r7, pc}

0802778c <_GLOBAL__sub_D_MotherboardInit>:
 802778c:	b580      	push	{r7, lr}
 802778e:	af00      	add	r7, sp, #0
 8027790:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027794:	2000      	movs	r0, #0
 8027796:	f7ff ffcf 	bl	8027738 <_Z41__static_initialization_and_destruction_0ii>
 802779a:	bd80      	pop	{r7, pc}

0802779c <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 802779c:	b580      	push	{r7, lr}
 802779e:	b086      	sub	sp, #24
 80277a0:	af00      	add	r7, sp, #0
 80277a2:	60b9      	str	r1, [r7, #8]
 80277a4:	607b      	str	r3, [r7, #4]
 80277a6:	4603      	mov	r3, r0
 80277a8:	73fb      	strb	r3, [r7, #15]
 80277aa:	4613      	mov	r3, r2
 80277ac:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 80277ae:	2300      	movs	r3, #0
 80277b0:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 80277b2:	687b      	ldr	r3, [r7, #4]
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d008      	beq.n	80277ca <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 80277b8:	89ba      	ldrh	r2, [r7, #12]
 80277ba:	687b      	ldr	r3, [r7, #4]
 80277bc:	7bf8      	ldrb	r0, [r7, #15]
 80277be:	68b9      	ldr	r1, [r7, #8]
 80277c0:	f001 f925 	bl	8028a0e <bhy2_hif_get_regs>
 80277c4:	4603      	mov	r3, r0
 80277c6:	75fb      	strb	r3, [r7, #23]
 80277c8:	e001      	b.n	80277ce <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80277ca:	23ff      	movs	r3, #255	; 0xff
 80277cc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80277ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80277d2:	4618      	mov	r0, r3
 80277d4:	3718      	adds	r7, #24
 80277d6:	46bd      	mov	sp, r7
 80277d8:	bd80      	pop	{r7, pc}

080277da <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 80277da:	b590      	push	{r4, r7, lr}
 80277dc:	b08f      	sub	sp, #60	; 0x3c
 80277de:	af02      	add	r7, sp, #8
 80277e0:	60f8      	str	r0, [r7, #12]
 80277e2:	60b9      	str	r1, [r7, #8]
 80277e4:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 80277e6:	2300      	movs	r3, #0
 80277e8:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 80277ea:	687b      	ldr	r3, [r7, #4]
 80277ec:	2b00      	cmp	r3, #0
 80277ee:	d002      	beq.n	80277f6 <bhy2_get_and_process_fifo+0x1c>
 80277f0:	68fb      	ldr	r3, [r7, #12]
 80277f2:	2b00      	cmp	r3, #0
 80277f4:	d102      	bne.n	80277fc <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 80277f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80277fa:	e11b      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 80277fc:	68bb      	ldr	r3, [r7, #8]
 80277fe:	2b00      	cmp	r3, #0
 8027800:	d102      	bne.n	8027808 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8027802:	f06f 0305 	mvn.w	r3, #5
 8027806:	e115      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8027808:	68ba      	ldr	r2, [r7, #8]
 802780a:	2100      	movs	r1, #0
 802780c:	68f8      	ldr	r0, [r7, #12]
 802780e:	f014 fb2d 	bl	803be6c <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8027812:	f107 0314 	add.w	r3, r7, #20
 8027816:	2214      	movs	r2, #20
 8027818:	2100      	movs	r1, #0
 802781a:	4618      	mov	r0, r3
 802781c:	f014 fb26 	bl	803be6c <memset>

    fifos.buffer = work_buffer;
 8027820:	68fb      	ldr	r3, [r7, #12]
 8027822:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8027824:	68bb      	ldr	r3, [r7, #8]
 8027826:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8027828:	687a      	ldr	r2, [r7, #4]
 802782a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 802782e:	4611      	mov	r1, r2
 8027830:	4618      	mov	r0, r3
 8027832:	f001 fa5f 	bl	8028cf4 <bhy2_hif_get_interrupt_status>
 8027836:	4603      	mov	r3, r0
 8027838:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 802783c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027840:	2b00      	cmp	r3, #0
 8027842:	d002      	beq.n	802784a <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8027844:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027848:	e0f4      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802784a:	2300      	movs	r3, #0
 802784c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802784e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027856:	e042      	b.n	80278de <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8027858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802785c:	f003 0306 	and.w	r3, r3, #6
 8027860:	2b02      	cmp	r3, #2
 8027862:	d00e      	beq.n	8027882 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8027864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027868:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802786c:	2b04      	cmp	r3, #4
 802786e:	d008      	beq.n	8027882 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8027870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027874:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8027878:	2b06      	cmp	r3, #6
 802787a:	d002      	beq.n	8027882 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802787c:	69fb      	ldr	r3, [r7, #28]
 802787e:	2b00      	cmp	r3, #0
 8027880:	d020      	beq.n	80278c4 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8027882:	2300      	movs	r3, #0
 8027884:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8027886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027888:	69bb      	ldr	r3, [r7, #24]
 802788a:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 802788c:	6a3a      	ldr	r2, [r7, #32]
 802788e:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8027890:	1ad1      	subs	r1, r2, r3
 8027892:	687b      	ldr	r3, [r7, #4]
 8027894:	f107 0214 	add.w	r2, r7, #20
 8027898:	f102 0408 	add.w	r4, r2, #8
 802789c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80278a0:	9300      	str	r3, [sp, #0]
 80278a2:	4623      	mov	r3, r4
 80278a4:	f001 fad7 	bl	8028e56 <bhy2_hif_get_wakeup_fifo>
 80278a8:	4603      	mov	r3, r0
 80278aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 80278ae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278b2:	2b00      	cmp	r3, #0
 80278b4:	d002      	beq.n	80278bc <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 80278b6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278ba:	e0bb      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80278bc:	69ba      	ldr	r2, [r7, #24]
 80278be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80278c0:	4413      	add	r3, r2
 80278c2:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 80278c4:	f107 0314 	add.w	r3, r7, #20
 80278c8:	687a      	ldr	r2, [r7, #4]
 80278ca:	4619      	mov	r1, r3
 80278cc:	2000      	movs	r0, #0
 80278ce:	f000 fbad 	bl	802802c <parse_fifo>
 80278d2:	4603      	mov	r3, r0
 80278d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80278d8:	2300      	movs	r3, #0
 80278da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80278de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278e2:	2b00      	cmp	r3, #0
 80278e4:	d102      	bne.n	80278ec <bhy2_get_and_process_fifo+0x112>
 80278e6:	69fb      	ldr	r3, [r7, #28]
 80278e8:	2b00      	cmp	r3, #0
 80278ea:	d003      	beq.n	80278f4 <bhy2_get_and_process_fifo+0x11a>
 80278ec:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278f0:	2b00      	cmp	r3, #0
 80278f2:	d0b1      	beq.n	8027858 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 80278f4:	2300      	movs	r3, #0
 80278f6:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80278f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80278fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027900:	e042      	b.n	8027988 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8027902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027906:	f003 0318 	and.w	r3, r3, #24
 802790a:	2b08      	cmp	r3, #8
 802790c:	d00e      	beq.n	802792c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802790e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027912:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8027916:	2b10      	cmp	r3, #16
 8027918:	d008      	beq.n	802792c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802791a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802791e:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027922:	2b18      	cmp	r3, #24
 8027924:	d002      	beq.n	802792c <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8027926:	69fb      	ldr	r3, [r7, #28]
 8027928:	2b00      	cmp	r3, #0
 802792a:	d020      	beq.n	802796e <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802792c:	2300      	movs	r3, #0
 802792e:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027932:	69bb      	ldr	r3, [r7, #24]
 8027934:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8027936:	6a3a      	ldr	r2, [r7, #32]
 8027938:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802793a:	1ad1      	subs	r1, r2, r3
 802793c:	687b      	ldr	r3, [r7, #4]
 802793e:	f107 0214 	add.w	r2, r7, #20
 8027942:	f102 0408 	add.w	r4, r2, #8
 8027946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802794a:	9300      	str	r3, [sp, #0]
 802794c:	4623      	mov	r3, r4
 802794e:	f001 fa98 	bl	8028e82 <bhy2_hif_get_nonwakeup_fifo>
 8027952:	4603      	mov	r3, r0
 8027954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8027958:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802795c:	2b00      	cmp	r3, #0
 802795e:	d002      	beq.n	8027966 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8027960:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027964:	e066      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8027966:	69ba      	ldr	r2, [r7, #24]
 8027968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802796a:	4413      	add	r3, r2
 802796c:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 802796e:	f107 0314 	add.w	r3, r7, #20
 8027972:	687a      	ldr	r2, [r7, #4]
 8027974:	4619      	mov	r1, r3
 8027976:	2001      	movs	r0, #1
 8027978:	f000 fb58 	bl	802802c <parse_fifo>
 802797c:	4603      	mov	r3, r0
 802797e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027982:	2300      	movs	r3, #0
 8027984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802798c:	2b00      	cmp	r3, #0
 802798e:	d102      	bne.n	8027996 <bhy2_get_and_process_fifo+0x1bc>
 8027990:	69fb      	ldr	r3, [r7, #28]
 8027992:	2b00      	cmp	r3, #0
 8027994:	d003      	beq.n	802799e <bhy2_get_and_process_fifo+0x1c4>
 8027996:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802799a:	2b00      	cmp	r3, #0
 802799c:	d0b1      	beq.n	8027902 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 802799e:	2300      	movs	r3, #0
 80279a0:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80279a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80279a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80279aa:	e036      	b.n	8027a1a <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 80279ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80279b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d102      	bne.n	80279be <bhy2_get_and_process_fifo+0x1e4>
 80279b8:	69fb      	ldr	r3, [r7, #28]
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	d020      	beq.n	8027a00 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 80279be:	2300      	movs	r3, #0
 80279c0:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 80279c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80279c4:	69bb      	ldr	r3, [r7, #24]
 80279c6:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80279c8:	6a3a      	ldr	r2, [r7, #32]
 80279ca:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 80279cc:	1ad1      	subs	r1, r2, r3
 80279ce:	687b      	ldr	r3, [r7, #4]
 80279d0:	f107 0214 	add.w	r2, r7, #20
 80279d4:	f102 0408 	add.w	r4, r2, #8
 80279d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80279dc:	9300      	str	r3, [sp, #0]
 80279de:	4623      	mov	r3, r4
 80279e0:	f001 fab0 	bl	8028f44 <bhy2_hif_get_status_fifo_async>
 80279e4:	4603      	mov	r3, r0
 80279e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 80279ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279ee:	2b00      	cmp	r3, #0
 80279f0:	d002      	beq.n	80279f8 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 80279f2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279f6:	e01d      	b.n	8027a34 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80279f8:	69ba      	ldr	r2, [r7, #24]
 80279fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279fc:	4413      	add	r3, r2
 80279fe:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8027a00:	f107 0314 	add.w	r3, r7, #20
 8027a04:	687a      	ldr	r2, [r7, #4]
 8027a06:	4619      	mov	r1, r3
 8027a08:	2002      	movs	r0, #2
 8027a0a:	f000 fb0f 	bl	802802c <parse_fifo>
 8027a0e:	4603      	mov	r3, r0
 8027a10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027a14:	2300      	movs	r3, #0
 8027a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	d102      	bne.n	8027a28 <bhy2_get_and_process_fifo+0x24e>
 8027a22:	69fb      	ldr	r3, [r7, #28]
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	d003      	beq.n	8027a30 <bhy2_get_and_process_fifo+0x256>
 8027a28:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a2c:	2b00      	cmp	r3, #0
 8027a2e:	d0bd      	beq.n	80279ac <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8027a30:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8027a34:	4618      	mov	r0, r3
 8027a36:	3734      	adds	r7, #52	; 0x34
 8027a38:	46bd      	mov	sp, r7
 8027a3a:	bd90      	pop	{r4, r7, pc}

08027a3c <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8027a3c:	b580      	push	{r7, lr}
 8027a3e:	b086      	sub	sp, #24
 8027a40:	af00      	add	r7, sp, #0
 8027a42:	4603      	mov	r3, r0
 8027a44:	ed87 0a02 	vstr	s0, [r7, #8]
 8027a48:	6079      	str	r1, [r7, #4]
 8027a4a:	603a      	str	r2, [r7, #0]
 8027a4c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027a4e:	2300      	movs	r3, #0
 8027a50:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027a52:	683b      	ldr	r3, [r7, #0]
 8027a54:	2b00      	cmp	r3, #0
 8027a56:	d00a      	beq.n	8027a6e <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8027a58:	683a      	ldr	r2, [r7, #0]
 8027a5a:	7bfb      	ldrb	r3, [r7, #15]
 8027a5c:	6879      	ldr	r1, [r7, #4]
 8027a5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8027a62:	4618      	mov	r0, r3
 8027a64:	f001 fa84 	bl	8028f70 <bhy2_hif_exec_sensor_conf_cmd>
 8027a68:	4603      	mov	r3, r0
 8027a6a:	75fb      	strb	r3, [r7, #23]
 8027a6c:	e001      	b.n	8027a72 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027a6e:	23ff      	movs	r3, #255	; 0xff
 8027a70:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027a76:	4618      	mov	r0, r3
 8027a78:	3718      	adds	r7, #24
 8027a7a:	46bd      	mov	sp, r7
 8027a7c:	bd80      	pop	{r7, pc}

08027a7e <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8027a7e:	b580      	push	{r7, lr}
 8027a80:	b084      	sub	sp, #16
 8027a82:	af00      	add	r7, sp, #0
 8027a84:	6078      	str	r0, [r7, #4]
 8027a86:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027a88:	2300      	movs	r3, #0
 8027a8a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027a8c:	683b      	ldr	r3, [r7, #0]
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	d007      	beq.n	8027aa2 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8027a92:	683b      	ldr	r3, [r7, #0]
 8027a94:	4619      	mov	r1, r3
 8027a96:	6878      	ldr	r0, [r7, #4]
 8027a98:	f001 f8e8 	bl	8028c6c <bhy2_hif_get_product_id>
 8027a9c:	4603      	mov	r3, r0
 8027a9e:	73fb      	strb	r3, [r7, #15]
 8027aa0:	e001      	b.n	8027aa6 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027aa2:	23ff      	movs	r3, #255	; 0xff
 8027aa4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027aaa:	4618      	mov	r0, r3
 8027aac:	3710      	adds	r7, #16
 8027aae:	46bd      	mov	sp, r7
 8027ab0:	bd80      	pop	{r7, pc}

08027ab2 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8027ab2:	b580      	push	{r7, lr}
 8027ab4:	b084      	sub	sp, #16
 8027ab6:	af00      	add	r7, sp, #0
 8027ab8:	6078      	str	r0, [r7, #4]
 8027aba:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027abc:	2300      	movs	r3, #0
 8027abe:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027ac0:	683b      	ldr	r3, [r7, #0]
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	d007      	beq.n	8027ad6 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8027ac6:	683b      	ldr	r3, [r7, #0]
 8027ac8:	4619      	mov	r1, r3
 8027aca:	6878      	ldr	r0, [r7, #4]
 8027acc:	f001 f8de 	bl	8028c8c <bhy2_hif_get_kernel_version>
 8027ad0:	4603      	mov	r3, r0
 8027ad2:	73fb      	strb	r3, [r7, #15]
 8027ad4:	e001      	b.n	8027ada <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027ad6:	23ff      	movs	r3, #255	; 0xff
 8027ad8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027ade:	4618      	mov	r0, r3
 8027ae0:	3710      	adds	r7, #16
 8027ae2:	46bd      	mov	sp, r7
 8027ae4:	bd80      	pop	{r7, pc}

08027ae6 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8027ae6:	b580      	push	{r7, lr}
 8027ae8:	b084      	sub	sp, #16
 8027aea:	af00      	add	r7, sp, #0
 8027aec:	6078      	str	r0, [r7, #4]
 8027aee:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027af0:	2300      	movs	r3, #0
 8027af2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027af4:	683b      	ldr	r3, [r7, #0]
 8027af6:	2b00      	cmp	r3, #0
 8027af8:	d007      	beq.n	8027b0a <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8027afa:	683b      	ldr	r3, [r7, #0]
 8027afc:	4619      	mov	r1, r3
 8027afe:	6878      	ldr	r0, [r7, #4]
 8027b00:	f001 f8e8 	bl	8028cd4 <bhy2_hif_get_boot_status>
 8027b04:	4603      	mov	r3, r0
 8027b06:	73fb      	strb	r3, [r7, #15]
 8027b08:	e001      	b.n	8027b0e <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b0a:	23ff      	movs	r3, #255	; 0xff
 8027b0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b12:	4618      	mov	r0, r3
 8027b14:	3710      	adds	r7, #16
 8027b16:	46bd      	mov	sp, r7
 8027b18:	bd80      	pop	{r7, pc}

08027b1a <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8027b1a:	b580      	push	{r7, lr}
 8027b1c:	b086      	sub	sp, #24
 8027b1e:	af02      	add	r7, sp, #8
 8027b20:	6078      	str	r0, [r7, #4]
 8027b22:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8027b24:	2300      	movs	r3, #0
 8027b26:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8027b28:	2300      	movs	r3, #0
 8027b2a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b2c:	683b      	ldr	r3, [r7, #0]
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	d00d      	beq.n	8027b4e <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8027b32:	683b      	ldr	r3, [r7, #0]
 8027b34:	f107 0208 	add.w	r2, r7, #8
 8027b38:	9300      	str	r3, [sp, #0]
 8027b3a:	4613      	mov	r3, r2
 8027b3c:	2220      	movs	r2, #32
 8027b3e:	6879      	ldr	r1, [r7, #4]
 8027b40:	f240 101f 	movw	r0, #287	; 0x11f
 8027b44:	f001 f80a 	bl	8028b5c <bhy2_hif_get_parameter>
 8027b48:	4603      	mov	r3, r0
 8027b4a:	73fb      	strb	r3, [r7, #15]
 8027b4c:	e001      	b.n	8027b52 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b4e:	23ff      	movs	r3, #255	; 0xff
 8027b50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b56:	4618      	mov	r0, r3
 8027b58:	3710      	adds	r7, #16
 8027b5a:	46bd      	mov	sp, r7
 8027b5c:	bd80      	pop	{r7, pc}

08027b5e <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8027b5e:	b580      	push	{r7, lr}
 8027b60:	b086      	sub	sp, #24
 8027b62:	af00      	add	r7, sp, #0
 8027b64:	60f8      	str	r0, [r7, #12]
 8027b66:	60b9      	str	r1, [r7, #8]
 8027b68:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027b6a:	2300      	movs	r3, #0
 8027b6c:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8027b6e:	687b      	ldr	r3, [r7, #4]
 8027b70:	2b00      	cmp	r3, #0
 8027b72:	d002      	beq.n	8027b7a <bhy2_upload_firmware_to_ram+0x1c>
 8027b74:	68fb      	ldr	r3, [r7, #12]
 8027b76:	2b00      	cmp	r3, #0
 8027b78:	d102      	bne.n	8027b80 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8027b7a:	23ff      	movs	r3, #255	; 0xff
 8027b7c:	75fb      	strb	r3, [r7, #23]
 8027b7e:	e007      	b.n	8027b90 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8027b80:	687b      	ldr	r3, [r7, #4]
 8027b82:	461a      	mov	r2, r3
 8027b84:	68b9      	ldr	r1, [r7, #8]
 8027b86:	68f8      	ldr	r0, [r7, #12]
 8027b88:	f001 f90d 	bl	8028da6 <bhy2_hif_upload_firmware_to_ram>
 8027b8c:	4603      	mov	r3, r0
 8027b8e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027b94:	4618      	mov	r0, r3
 8027b96:	3718      	adds	r7, #24
 8027b98:	46bd      	mov	sp, r7
 8027b9a:	bd80      	pop	{r7, pc}

08027b9c <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8027b9c:	b580      	push	{r7, lr}
 8027b9e:	b084      	sub	sp, #16
 8027ba0:	af00      	add	r7, sp, #0
 8027ba2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027ba4:	2300      	movs	r3, #0
 8027ba6:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027ba8:	687b      	ldr	r3, [r7, #4]
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d102      	bne.n	8027bb4 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027bae:	23ff      	movs	r3, #255	; 0xff
 8027bb0:	73fb      	strb	r3, [r7, #15]
 8027bb2:	e005      	b.n	8027bc0 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8027bb4:	687b      	ldr	r3, [r7, #4]
 8027bb6:	4618      	mov	r0, r3
 8027bb8:	f001 f932 	bl	8028e20 <bhy2_hif_boot_program_ram>
 8027bbc:	4603      	mov	r3, r0
 8027bbe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027bc4:	4618      	mov	r0, r3
 8027bc6:	3710      	adds	r7, #16
 8027bc8:	46bd      	mov	sp, r7
 8027bca:	bd80      	pop	{r7, pc}

08027bcc <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8027bcc:	b580      	push	{r7, lr}
 8027bce:	b084      	sub	sp, #16
 8027bd0:	af00      	add	r7, sp, #0
 8027bd2:	4603      	mov	r3, r0
 8027bd4:	6039      	str	r1, [r7, #0]
 8027bd6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027bd8:	2300      	movs	r3, #0
 8027bda:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027bdc:	683b      	ldr	r3, [r7, #0]
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d102      	bne.n	8027be8 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027be2:	23ff      	movs	r3, #255	; 0xff
 8027be4:	73fb      	strb	r3, [r7, #15]
 8027be6:	e007      	b.n	8027bf8 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8027be8:	683b      	ldr	r3, [r7, #0]
 8027bea:	1df9      	adds	r1, r7, #7
 8027bec:	2201      	movs	r2, #1
 8027bee:	2007      	movs	r0, #7
 8027bf0:	f000 ff45 	bl	8028a7e <bhy2_hif_set_regs>
 8027bf4:	4603      	mov	r3, r0
 8027bf6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027bfc:	4618      	mov	r0, r3
 8027bfe:	3710      	adds	r7, #16
 8027c00:	46bd      	mov	sp, r7
 8027c02:	bd80      	pop	{r7, pc}

08027c04 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8027c04:	b580      	push	{r7, lr}
 8027c06:	b084      	sub	sp, #16
 8027c08:	af00      	add	r7, sp, #0
 8027c0a:	6078      	str	r0, [r7, #4]
 8027c0c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c0e:	2300      	movs	r3, #0
 8027c10:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c12:	683b      	ldr	r3, [r7, #0]
 8027c14:	2b00      	cmp	r3, #0
 8027c16:	d102      	bne.n	8027c1e <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c18:	23ff      	movs	r3, #255	; 0xff
 8027c1a:	73fb      	strb	r3, [r7, #15]
 8027c1c:	e007      	b.n	8027c2e <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8027c1e:	683b      	ldr	r3, [r7, #0]
 8027c20:	2201      	movs	r2, #1
 8027c22:	6879      	ldr	r1, [r7, #4]
 8027c24:	2007      	movs	r0, #7
 8027c26:	f000 fef2 	bl	8028a0e <bhy2_hif_get_regs>
 8027c2a:	4603      	mov	r3, r0
 8027c2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c32:	4618      	mov	r0, r3
 8027c34:	3710      	adds	r7, #16
 8027c36:	46bd      	mov	sp, r7
 8027c38:	bd80      	pop	{r7, pc}

08027c3a <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8027c3a:	b580      	push	{r7, lr}
 8027c3c:	b084      	sub	sp, #16
 8027c3e:	af00      	add	r7, sp, #0
 8027c40:	6078      	str	r0, [r7, #4]
 8027c42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c44:	2300      	movs	r3, #0
 8027c46:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c48:	683b      	ldr	r3, [r7, #0]
 8027c4a:	2b00      	cmp	r3, #0
 8027c4c:	d102      	bne.n	8027c54 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c4e:	23ff      	movs	r3, #255	; 0xff
 8027c50:	73fb      	strb	r3, [r7, #15]
 8027c52:	e006      	b.n	8027c62 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8027c54:	683b      	ldr	r3, [r7, #0]
 8027c56:	4619      	mov	r1, r3
 8027c58:	6878      	ldr	r0, [r7, #4]
 8027c5a:	f001 f84b 	bl	8028cf4 <bhy2_hif_get_interrupt_status>
 8027c5e:	4603      	mov	r3, r0
 8027c60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c66:	4618      	mov	r0, r3
 8027c68:	3710      	adds	r7, #16
 8027c6a:	46bd      	mov	sp, r7
 8027c6c:	bd80      	pop	{r7, pc}

08027c6e <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8027c6e:	b580      	push	{r7, lr}
 8027c70:	b084      	sub	sp, #16
 8027c72:	af00      	add	r7, sp, #0
 8027c74:	4603      	mov	r3, r0
 8027c76:	6039      	str	r1, [r7, #0]
 8027c78:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027c7a:	2300      	movs	r3, #0
 8027c7c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c7e:	683b      	ldr	r3, [r7, #0]
 8027c80:	2b00      	cmp	r3, #0
 8027c82:	d102      	bne.n	8027c8a <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c84:	23ff      	movs	r3, #255	; 0xff
 8027c86:	73fb      	strb	r3, [r7, #15]
 8027c88:	e007      	b.n	8027c9a <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8027c8a:	683b      	ldr	r3, [r7, #0]
 8027c8c:	1df9      	adds	r1, r7, #7
 8027c8e:	2201      	movs	r2, #1
 8027c90:	2006      	movs	r0, #6
 8027c92:	f000 fef4 	bl	8028a7e <bhy2_hif_set_regs>
 8027c96:	4603      	mov	r3, r0
 8027c98:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c9e:	4618      	mov	r0, r3
 8027ca0:	3710      	adds	r7, #16
 8027ca2:	46bd      	mov	sp, r7
 8027ca4:	bd80      	pop	{r7, pc}

08027ca6 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8027ca6:	b580      	push	{r7, lr}
 8027ca8:	b084      	sub	sp, #16
 8027caa:	af00      	add	r7, sp, #0
 8027cac:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027cae:	2300      	movs	r3, #0
 8027cb0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027cb2:	687b      	ldr	r3, [r7, #4]
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d102      	bne.n	8027cbe <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cb8:	23ff      	movs	r3, #255	; 0xff
 8027cba:	73fb      	strb	r3, [r7, #15]
 8027cbc:	e005      	b.n	8027cca <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8027cbe:	687b      	ldr	r3, [r7, #4]
 8027cc0:	4618      	mov	r0, r3
 8027cc2:	f001 f827 	bl	8028d14 <bhy2_hif_reset>
 8027cc6:	4603      	mov	r3, r0
 8027cc8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027cce:	4618      	mov	r0, r3
 8027cd0:	3710      	adds	r7, #16
 8027cd2:	46bd      	mov	sp, r7
 8027cd4:	bd80      	pop	{r7, pc}

08027cd6 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8027cd6:	b580      	push	{r7, lr}
 8027cd8:	b08a      	sub	sp, #40	; 0x28
 8027cda:	af04      	add	r7, sp, #16
 8027cdc:	60b9      	str	r1, [r7, #8]
 8027cde:	607a      	str	r2, [r7, #4]
 8027ce0:	603b      	str	r3, [r7, #0]
 8027ce2:	4603      	mov	r3, r0
 8027ce4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027ce6:	2300      	movs	r3, #0
 8027ce8:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d014      	beq.n	8027d1a <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8027cf0:	f640 1238 	movw	r2, #2360	; 0x938
 8027cf4:	2100      	movs	r1, #0
 8027cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027cf8:	f014 f8b8 	bl	803be6c <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8027cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027cfe:	7bf8      	ldrb	r0, [r7, #15]
 8027d00:	9302      	str	r3, [sp, #8]
 8027d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d04:	9301      	str	r3, [sp, #4]
 8027d06:	6a3b      	ldr	r3, [r7, #32]
 8027d08:	9300      	str	r3, [sp, #0]
 8027d0a:	683b      	ldr	r3, [r7, #0]
 8027d0c:	687a      	ldr	r2, [r7, #4]
 8027d0e:	68b9      	ldr	r1, [r7, #8]
 8027d10:	f000 fe3e 	bl	8028990 <bhy2_hif_init>
 8027d14:	4603      	mov	r3, r0
 8027d16:	75fb      	strb	r3, [r7, #23]
 8027d18:	e001      	b.n	8027d1e <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027d1a:	23ff      	movs	r3, #255	; 0xff
 8027d1c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027d22:	4618      	mov	r0, r3
 8027d24:	3718      	adds	r7, #24
 8027d26:	46bd      	mov	sp, r7
 8027d28:	bd80      	pop	{r7, pc}

08027d2a <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8027d2a:	b480      	push	{r7}
 8027d2c:	b087      	sub	sp, #28
 8027d2e:	af00      	add	r7, sp, #0
 8027d30:	60b9      	str	r1, [r7, #8]
 8027d32:	607a      	str	r2, [r7, #4]
 8027d34:	603b      	str	r3, [r7, #0]
 8027d36:	4603      	mov	r3, r0
 8027d38:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027d3a:	2300      	movs	r3, #0
 8027d3c:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8027d3e:	683b      	ldr	r3, [r7, #0]
 8027d40:	2b00      	cmp	r3, #0
 8027d42:	d002      	beq.n	8027d4a <bhy2_register_fifo_parse_callback+0x20>
 8027d44:	68bb      	ldr	r3, [r7, #8]
 8027d46:	2b00      	cmp	r3, #0
 8027d48:	d102      	bne.n	8027d50 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8027d4a:	23ff      	movs	r3, #255	; 0xff
 8027d4c:	75fb      	strb	r3, [r7, #23]
 8027d4e:	e013      	b.n	8027d78 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8027d50:	7bfa      	ldrb	r2, [r7, #15]
 8027d52:	6839      	ldr	r1, [r7, #0]
 8027d54:	4613      	mov	r3, r2
 8027d56:	00db      	lsls	r3, r3, #3
 8027d58:	4413      	add	r3, r2
 8027d5a:	440b      	add	r3, r1
 8027d5c:	3318      	adds	r3, #24
 8027d5e:	68ba      	ldr	r2, [r7, #8]
 8027d60:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8027d64:	7bfa      	ldrb	r2, [r7, #15]
 8027d66:	6839      	ldr	r1, [r7, #0]
 8027d68:	4613      	mov	r3, r2
 8027d6a:	00db      	lsls	r3, r3, #3
 8027d6c:	4413      	add	r3, r2
 8027d6e:	440b      	add	r3, r1
 8027d70:	3318      	adds	r3, #24
 8027d72:	687a      	ldr	r2, [r7, #4]
 8027d74:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8027d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027d7c:	4618      	mov	r0, r3
 8027d7e:	371c      	adds	r7, #28
 8027d80:	46bd      	mov	sp, r7
 8027d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d86:	4770      	bx	lr

08027d88 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8027d88:	b580      	push	{r7, lr}
 8027d8a:	b092      	sub	sp, #72	; 0x48
 8027d8c:	af00      	add	r7, sp, #0
 8027d8e:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8027d90:	687b      	ldr	r3, [r7, #4]
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d103      	bne.n	8027d9e <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8027d96:	23ff      	movs	r3, #255	; 0xff
 8027d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8027d9c:	e079      	b.n	8027e92 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8027d9e:	f107 0308 	add.w	r3, r7, #8
 8027da2:	6879      	ldr	r1, [r7, #4]
 8027da4:	4618      	mov	r0, r3
 8027da6:	f7ff feb8 	bl	8027b1a <bhy2_get_virt_sensor_list>
 8027daa:	4603      	mov	r3, r0
 8027dac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8027db0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027db4:	2b00      	cmp	r3, #0
 8027db6:	d16c      	bne.n	8027e92 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8027db8:	687b      	ldr	r3, [r7, #4]
 8027dba:	2201      	movs	r2, #1
 8027dbc:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027dbe:	2301      	movs	r3, #1
 8027dc0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027dc4:	e041      	b.n	8027e4a <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8027dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027dca:	08db      	lsrs	r3, r3, #3
 8027dcc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8027dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027dd4:	f003 0307 	and.w	r3, r3, #7
 8027dd8:	2201      	movs	r2, #1
 8027dda:	fa02 f303 	lsl.w	r3, r2, r3
 8027dde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8027de2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8027de6:	3348      	adds	r3, #72	; 0x48
 8027de8:	443b      	add	r3, r7
 8027dea:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8027dee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027df2:	4013      	ands	r3, r2
 8027df4:	b2db      	uxtb	r3, r3
 8027df6:	2b00      	cmp	r3, #0
 8027df8:	d022      	beq.n	8027e40 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8027dfa:	687a      	ldr	r2, [r7, #4]
 8027dfc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8027e00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e04:	4618      	mov	r0, r3
 8027e06:	f001 f8e6 	bl	8028fd6 <bhy2_hif_get_sensor_info>
 8027e0a:	4603      	mov	r3, r0
 8027e0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8027e10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e14:	2b00      	cmp	r3, #0
 8027e16:	d113      	bne.n	8027e40 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8027e18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8027e1c:	2b00      	cmp	r3, #0
 8027e1e:	d103      	bne.n	8027e28 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8027e20:	23f8      	movs	r3, #248	; 0xf8
 8027e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8027e26:	e018      	b.n	8027e5a <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8027e28:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027e2c:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8027e30:	6879      	ldr	r1, [r7, #4]
 8027e32:	4613      	mov	r3, r2
 8027e34:	00db      	lsls	r3, r3, #3
 8027e36:	4413      	add	r3, r2
 8027e38:	440b      	add	r3, r1
 8027e3a:	331c      	adds	r3, #28
 8027e3c:	4602      	mov	r2, r0
 8027e3e:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027e40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e44:	3301      	adds	r3, #1
 8027e46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e4e:	2bf4      	cmp	r3, #244	; 0xf4
 8027e50:	d803      	bhi.n	8027e5a <bhy2_update_virtual_sensor_list+0xd2>
 8027e52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e56:	2b00      	cmp	r3, #0
 8027e58:	d0b5      	beq.n	8027dc6 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027e5a:	23ff      	movs	r3, #255	; 0xff
 8027e5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e60:	e013      	b.n	8027e8a <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027e62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e66:	3bf5      	subs	r3, #245	; 0xf5
 8027e68:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027e6c:	490c      	ldr	r1, [pc, #48]	; (8027ea0 <bhy2_update_virtual_sensor_list+0x118>)
 8027e6e:	5cc8      	ldrb	r0, [r1, r3]
 8027e70:	6879      	ldr	r1, [r7, #4]
 8027e72:	4613      	mov	r3, r2
 8027e74:	00db      	lsls	r3, r3, #3
 8027e76:	4413      	add	r3, r2
 8027e78:	440b      	add	r3, r1
 8027e7a:	331c      	adds	r3, #28
 8027e7c:	4602      	mov	r2, r0
 8027e7e:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027e80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e84:	3b01      	subs	r3, #1
 8027e86:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e8e:	2bf4      	cmp	r3, #244	; 0xf4
 8027e90:	d8e7      	bhi.n	8027e62 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8027e92:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8027e96:	4618      	mov	r0, r3
 8027e98:	3748      	adds	r7, #72	; 0x48
 8027e9a:	46bd      	mov	sp, r7
 8027e9c:	bd80      	pop	{r7, pc}
 8027e9e:	bf00      	nop
 8027ea0:	080584fc 	.word	0x080584fc

08027ea4 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8027ea4:	b580      	push	{r7, lr}
 8027ea6:	b084      	sub	sp, #16
 8027ea8:	af00      	add	r7, sp, #0
 8027eaa:	6078      	str	r0, [r7, #4]
 8027eac:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027eae:	2300      	movs	r3, #0
 8027eb0:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8027eb2:	683b      	ldr	r3, [r7, #0]
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d002      	beq.n	8027ebe <bhy2_get_error_value+0x1a>
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	2b00      	cmp	r3, #0
 8027ebc:	d102      	bne.n	8027ec4 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8027ebe:	23ff      	movs	r3, #255	; 0xff
 8027ec0:	73fb      	strb	r3, [r7, #15]
 8027ec2:	e007      	b.n	8027ed4 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8027ec4:	683b      	ldr	r3, [r7, #0]
 8027ec6:	2201      	movs	r2, #1
 8027ec8:	6879      	ldr	r1, [r7, #4]
 8027eca:	202e      	movs	r0, #46	; 0x2e
 8027ecc:	f7ff fc66 	bl	802779c <bhy2_get_regs>
 8027ed0:	4603      	mov	r3, r0
 8027ed2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027ed8:	4618      	mov	r0, r3
 8027eda:	3710      	adds	r7, #16
 8027edc:	46bd      	mov	sp, r7
 8027ede:	bd80      	pop	{r7, pc}

08027ee0 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8027ee0:	b480      	push	{r7}
 8027ee2:	b087      	sub	sp, #28
 8027ee4:	af00      	add	r7, sp, #0
 8027ee6:	4603      	mov	r3, r0
 8027ee8:	60b9      	str	r1, [r7, #8]
 8027eea:	607a      	str	r2, [r7, #4]
 8027eec:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8027eee:	2300      	movs	r3, #0
 8027ef0:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	2b00      	cmp	r3, #0
 8027ef6:	d04e      	beq.n	8027f96 <get_callback_info+0xb6>
 8027ef8:	68bb      	ldr	r3, [r7, #8]
 8027efa:	2b00      	cmp	r3, #0
 8027efc:	d04b      	beq.n	8027f96 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8027efe:	7bfa      	ldrb	r2, [r7, #15]
 8027f00:	68b8      	ldr	r0, [r7, #8]
 8027f02:	6879      	ldr	r1, [r7, #4]
 8027f04:	4613      	mov	r3, r2
 8027f06:	00db      	lsls	r3, r3, #3
 8027f08:	4413      	add	r3, r2
 8027f0a:	440b      	add	r3, r1
 8027f0c:	3318      	adds	r3, #24
 8027f0e:	4602      	mov	r2, r0
 8027f10:	3304      	adds	r3, #4
 8027f12:	6818      	ldr	r0, [r3, #0]
 8027f14:	6859      	ldr	r1, [r3, #4]
 8027f16:	6010      	str	r0, [r2, #0]
 8027f18:	6051      	str	r1, [r2, #4]
 8027f1a:	7a1b      	ldrb	r3, [r3, #8]
 8027f1c:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8027f1e:	7bfb      	ldrb	r3, [r7, #15]
 8027f20:	2bf4      	cmp	r3, #244	; 0xf4
 8027f22:	d91b      	bls.n	8027f5c <get_callback_info+0x7c>
 8027f24:	68bb      	ldr	r3, [r7, #8]
 8027f26:	781b      	ldrb	r3, [r3, #0]
 8027f28:	2b00      	cmp	r3, #0
 8027f2a:	d117      	bne.n	8027f5c <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8027f2c:	68bb      	ldr	r3, [r7, #8]
 8027f2e:	2200      	movs	r2, #0
 8027f30:	705a      	strb	r2, [r3, #1]
 8027f32:	2200      	movs	r2, #0
 8027f34:	709a      	strb	r2, [r3, #2]
 8027f36:	2200      	movs	r2, #0
 8027f38:	70da      	strb	r2, [r3, #3]
 8027f3a:	2200      	movs	r2, #0
 8027f3c:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027f3e:	68bb      	ldr	r3, [r7, #8]
 8027f40:	2200      	movs	r2, #0
 8027f42:	715a      	strb	r2, [r3, #5]
 8027f44:	2200      	movs	r2, #0
 8027f46:	719a      	strb	r2, [r3, #6]
 8027f48:	2200      	movs	r2, #0
 8027f4a:	71da      	strb	r2, [r3, #7]
 8027f4c:	2200      	movs	r2, #0
 8027f4e:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027f50:	7bfb      	ldrb	r3, [r7, #15]
 8027f52:	3bf5      	subs	r3, #245	; 0xf5
 8027f54:	4a16      	ldr	r2, [pc, #88]	; (8027fb0 <get_callback_info+0xd0>)
 8027f56:	5cd2      	ldrb	r2, [r2, r3]
 8027f58:	68bb      	ldr	r3, [r7, #8]
 8027f5a:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8027f5c:	7bfb      	ldrb	r3, [r7, #15]
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d11c      	bne.n	8027f9c <get_callback_info+0xbc>
 8027f62:	68bb      	ldr	r3, [r7, #8]
 8027f64:	781b      	ldrb	r3, [r3, #0]
 8027f66:	2b00      	cmp	r3, #0
 8027f68:	d118      	bne.n	8027f9c <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8027f6a:	68bb      	ldr	r3, [r7, #8]
 8027f6c:	2200      	movs	r2, #0
 8027f6e:	705a      	strb	r2, [r3, #1]
 8027f70:	2200      	movs	r2, #0
 8027f72:	709a      	strb	r2, [r3, #2]
 8027f74:	2200      	movs	r2, #0
 8027f76:	70da      	strb	r2, [r3, #3]
 8027f78:	2200      	movs	r2, #0
 8027f7a:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027f7c:	68bb      	ldr	r3, [r7, #8]
 8027f7e:	2200      	movs	r2, #0
 8027f80:	715a      	strb	r2, [r3, #5]
 8027f82:	2200      	movs	r2, #0
 8027f84:	719a      	strb	r2, [r3, #6]
 8027f86:	2200      	movs	r2, #0
 8027f88:	71da      	strb	r2, [r3, #7]
 8027f8a:	2200      	movs	r2, #0
 8027f8c:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8027f8e:	68bb      	ldr	r3, [r7, #8]
 8027f90:	2201      	movs	r2, #1
 8027f92:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8027f94:	e002      	b.n	8027f9c <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027f96:	23ff      	movs	r3, #255	; 0xff
 8027f98:	75fb      	strb	r3, [r7, #23]
 8027f9a:	e000      	b.n	8027f9e <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8027f9c:	bf00      	nop
    }

    return rslt;
 8027f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027fa2:	4618      	mov	r0, r3
 8027fa4:	371c      	adds	r7, #28
 8027fa6:	46bd      	mov	sp, r7
 8027fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fac:	4770      	bx	lr
 8027fae:	bf00      	nop
 8027fb0:	080584fc 	.word	0x080584fc

08027fb4 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8027fb4:	b480      	push	{r7}
 8027fb6:	b085      	sub	sp, #20
 8027fb8:	af00      	add	r7, sp, #0
 8027fba:	60f8      	str	r0, [r7, #12]
 8027fbc:	460b      	mov	r3, r1
 8027fbe:	607a      	str	r2, [r7, #4]
 8027fc0:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8027fc2:	68fb      	ldr	r3, [r7, #12]
 8027fc4:	681a      	ldr	r2, [r3, #0]
 8027fc6:	7afb      	ldrb	r3, [r7, #11]
 8027fc8:	441a      	add	r2, r3
 8027fca:	68fb      	ldr	r3, [r7, #12]
 8027fcc:	685b      	ldr	r3, [r3, #4]
 8027fce:	429a      	cmp	r2, r3
 8027fd0:	d803      	bhi.n	8027fda <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	2200      	movs	r2, #0
 8027fd6:	701a      	strb	r2, [r3, #0]
 8027fd8:	e002      	b.n	8027fe0 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8027fda:	687b      	ldr	r3, [r7, #4]
 8027fdc:	2201      	movs	r2, #1
 8027fde:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8027fe0:	2300      	movs	r3, #0
}
 8027fe2:	4618      	mov	r0, r3
 8027fe4:	3714      	adds	r7, #20
 8027fe6:	46bd      	mov	sp, r7
 8027fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fec:	4770      	bx	lr

08027fee <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8027fee:	b480      	push	{r7}
 8027ff0:	b087      	sub	sp, #28
 8027ff2:	af00      	add	r7, sp, #0
 8027ff4:	4603      	mov	r3, r0
 8027ff6:	60b9      	str	r1, [r7, #8]
 8027ff8:	607a      	str	r2, [r7, #4]
 8027ffa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027ffc:	2300      	movs	r3, #0
 8027ffe:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8028000:	7bfb      	ldrb	r3, [r7, #15]
 8028002:	2b02      	cmp	r3, #2
 8028004:	d808      	bhi.n	8028018 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8028006:	7bfb      	ldrb	r3, [r7, #15]
 8028008:	f503 7392 	add.w	r3, r3, #292	; 0x124
 802800c:	00db      	lsls	r3, r3, #3
 802800e:	687a      	ldr	r2, [r7, #4]
 8028010:	441a      	add	r2, r3
 8028012:	68bb      	ldr	r3, [r7, #8]
 8028014:	601a      	str	r2, [r3, #0]
 8028016:	e001      	b.n	802801c <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8028018:	23f9      	movs	r3, #249	; 0xf9
 802801a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802801c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028020:	4618      	mov	r0, r3
 8028022:	371c      	adds	r7, #28
 8028024:	46bd      	mov	sp, r7
 8028026:	f85d 7b04 	ldr.w	r7, [sp], #4
 802802a:	4770      	bx	lr

0802802c <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 802802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028030:	b099      	sub	sp, #100	; 0x64
 8028032:	af00      	add	r7, sp, #0
 8028034:	4603      	mov	r3, r0
 8028036:	62b9      	str	r1, [r7, #40]	; 0x28
 8028038:	627a      	str	r2, [r7, #36]	; 0x24
 802803a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802803e:	2300      	movs	r3, #0
 8028040:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8028044:	2300      	movs	r3, #0
 8028046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 802804a:	2300      	movs	r3, #0
 802804c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8028050:	2300      	movs	r3, #0
 8028052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8028056:	e16a      	b.n	802832e <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8028058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802805a:	681b      	ldr	r3, [r3, #0]
 802805c:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 802805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028060:	691a      	ldr	r2, [r3, #16]
 8028062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028064:	4413      	add	r3, r2
 8028066:	781b      	ldrb	r3, [r3, #0]
 8028068:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 802806c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8028070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028076:	4618      	mov	r0, r3
 8028078:	f7ff ffb9 	bl	8027fee <get_time_stamp>
 802807c:	4603      	mov	r3, r0
 802807e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 8028082:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028086:	2b00      	cmp	r3, #0
 8028088:	d002      	beq.n	8028090 <parse_fifo+0x64>
        {
            return rslt;
 802808a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802808e:	e191      	b.n	80283b4 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8028090:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028094:	2b00      	cmp	r3, #0
 8028096:	d025      	beq.n	80280e4 <parse_fifo+0xb8>
 8028098:	2b00      	cmp	r3, #0
 802809a:	f2c0 80f6 	blt.w	802828a <parse_fifo+0x25e>
 802809e:	2bff      	cmp	r3, #255	; 0xff
 80280a0:	f300 80f3 	bgt.w	802828a <parse_fifo+0x25e>
 80280a4:	2bf5      	cmp	r3, #245	; 0xf5
 80280a6:	f2c0 80f0 	blt.w	802828a <parse_fifo+0x25e>
 80280aa:	3bf5      	subs	r3, #245	; 0xf5
 80280ac:	2b0a      	cmp	r3, #10
 80280ae:	f200 80ec 	bhi.w	802828a <parse_fifo+0x25e>
 80280b2:	a201      	add	r2, pc, #4	; (adr r2, 80280b8 <parse_fifo+0x8c>)
 80280b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80280b8:	080280f1 	.word	0x080280f1
 80280bc:	08028159 	.word	0x08028159
 80280c0:	080281d7 	.word	0x080281d7
 80280c4:	0802828b 	.word	0x0802828b
 80280c8:	0802828b 	.word	0x0802828b
 80280cc:	0802828b 	.word	0x0802828b
 80280d0:	080280f1 	.word	0x080280f1
 80280d4:	08028159 	.word	0x08028159
 80280d8:	080281d7 	.word	0x080281d7
 80280dc:	0802828b 	.word	0x0802828b
 80280e0:	080280e5 	.word	0x080280e5
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80280e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280e6:	681b      	ldr	r3, [r3, #0]
 80280e8:	1c5a      	adds	r2, r3, #1
 80280ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280ec:	601a      	str	r2, [r3, #0]
                break;
 80280ee:	e11e      	b.n	802832e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80280f0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80280f4:	461a      	mov	r2, r3
 80280f6:	2102      	movs	r1, #2
 80280f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80280fa:	f7ff ff5b 	bl	8027fb4 <get_buffer_status>
 80280fe:	4603      	mov	r3, r0
 8028100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8028104:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028108:	2b00      	cmp	r3, #0
 802810a:	d002      	beq.n	8028112 <parse_fifo+0xe6>
                {
                    return rslt;
 802810c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028110:	e150      	b.n	80283b4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028116:	2b00      	cmp	r3, #0
 8028118:	d000      	beq.n	802811c <parse_fifo+0xf0>
                {
                    break;
 802811a:	e108      	b.n	802832e <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 802811c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802811e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028124:	691a      	ldr	r2, [r3, #16]
 8028126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028128:	3301      	adds	r3, #1
 802812a:	4413      	add	r3, r2
 802812c:	781b      	ldrb	r3, [r3, #0]
 802812e:	b2db      	uxtb	r3, r3
 8028130:	2200      	movs	r2, #0
 8028132:	469a      	mov	sl, r3
 8028134:	4693      	mov	fp, r2
 8028136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028138:	eb10 020a 	adds.w	r2, r0, sl
 802813c:	61ba      	str	r2, [r7, #24]
 802813e:	eb41 020b 	adc.w	r2, r1, fp
 8028142:	61fa      	str	r2, [r7, #28]
 8028144:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8028148:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 802814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	1c9a      	adds	r2, r3, #2
 8028152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028154:	601a      	str	r2, [r3, #0]
                break;
 8028156:	e0ea      	b.n	802832e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8028158:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802815c:	461a      	mov	r2, r3
 802815e:	2103      	movs	r1, #3
 8028160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028162:	f7ff ff27 	bl	8027fb4 <get_buffer_status>
 8028166:	4603      	mov	r3, r0
 8028168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802816c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028170:	2b00      	cmp	r3, #0
 8028172:	d002      	beq.n	802817a <parse_fifo+0x14e>
                {
                    return rslt;
 8028174:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028178:	e11c      	b.n	80283b4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802817a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802817e:	2b00      	cmp	r3, #0
 8028180:	d000      	beq.n	8028184 <parse_fifo+0x158>
                {
                    break;
 8028182:	e0d4      	b.n	802832e <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8028184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028186:	e9d3 0100 	ldrd	r0, r1, [r3]
 802818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802818c:	691a      	ldr	r2, [r3, #16]
 802818e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028190:	3301      	adds	r3, #1
 8028192:	4413      	add	r3, r2
 8028194:	781b      	ldrb	r3, [r3, #0]
 8028196:	b21c      	sxth	r4, r3
 8028198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802819a:	691a      	ldr	r2, [r3, #16]
 802819c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802819e:	3302      	adds	r3, #2
 80281a0:	4413      	add	r3, r2
 80281a2:	781b      	ldrb	r3, [r3, #0]
 80281a4:	021b      	lsls	r3, r3, #8
 80281a6:	b21b      	sxth	r3, r3
 80281a8:	4323      	orrs	r3, r4
 80281aa:	b21b      	sxth	r3, r3
 80281ac:	b29b      	uxth	r3, r3
 80281ae:	b29b      	uxth	r3, r3
 80281b0:	2200      	movs	r2, #0
 80281b2:	461d      	mov	r5, r3
 80281b4:	4616      	mov	r6, r2
 80281b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281b8:	1942      	adds	r2, r0, r5
 80281ba:	613a      	str	r2, [r7, #16]
 80281bc:	eb41 0206 	adc.w	r2, r1, r6
 80281c0:	617a      	str	r2, [r7, #20]
 80281c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80281c6:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 80281ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281cc:	681b      	ldr	r3, [r3, #0]
 80281ce:	1cda      	adds	r2, r3, #3
 80281d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281d2:	601a      	str	r2, [r3, #0]
                break;
 80281d4:	e0ab      	b.n	802832e <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 80281d6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80281da:	461a      	mov	r2, r3
 80281dc:	2106      	movs	r1, #6
 80281de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80281e0:	f7ff fee8 	bl	8027fb4 <get_buffer_status>
 80281e4:	4603      	mov	r3, r0
 80281e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80281ea:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	d002      	beq.n	80281f8 <parse_fifo+0x1cc>
                {
                    return rslt;
 80281f2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281f6:	e0dd      	b.n	80283b4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80281f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80281fc:	2b00      	cmp	r3, #0
 80281fe:	d000      	beq.n	8028202 <parse_fifo+0x1d6>
                {
                    break;
 8028200:	e095      	b.n	802832e <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8028202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028204:	691a      	ldr	r2, [r3, #16]
 8028206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028208:	3301      	adds	r3, #1
 802820a:	4413      	add	r3, r2
 802820c:	781b      	ldrb	r3, [r3, #0]
 802820e:	4619      	mov	r1, r3
 8028210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028212:	691a      	ldr	r2, [r3, #16]
 8028214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028216:	3302      	adds	r3, #2
 8028218:	4413      	add	r3, r2
 802821a:	781b      	ldrb	r3, [r3, #0]
 802821c:	021b      	lsls	r3, r3, #8
 802821e:	4319      	orrs	r1, r3
 8028220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028222:	691a      	ldr	r2, [r3, #16]
 8028224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028226:	3303      	adds	r3, #3
 8028228:	4413      	add	r3, r2
 802822a:	781b      	ldrb	r3, [r3, #0]
 802822c:	041b      	lsls	r3, r3, #16
 802822e:	4319      	orrs	r1, r3
 8028230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028232:	691a      	ldr	r2, [r3, #16]
 8028234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028236:	3304      	adds	r3, #4
 8028238:	4413      	add	r3, r2
 802823a:	781b      	ldrb	r3, [r3, #0]
 802823c:	061b      	lsls	r3, r3, #24
 802823e:	430b      	orrs	r3, r1
 8028240:	2200      	movs	r2, #0
 8028242:	4698      	mov	r8, r3
 8028244:	4691      	mov	r9, r2
 8028246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028248:	691a      	ldr	r2, [r3, #16]
 802824a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802824c:	3305      	adds	r3, #5
 802824e:	4413      	add	r3, r2
 8028250:	781b      	ldrb	r3, [r3, #0]
 8028252:	b2db      	uxtb	r3, r3
 8028254:	2200      	movs	r2, #0
 8028256:	60bb      	str	r3, [r7, #8]
 8028258:	60fa      	str	r2, [r7, #12]
 802825a:	f04f 0200 	mov.w	r2, #0
 802825e:	f04f 0300 	mov.w	r3, #0
 8028262:	68b9      	ldr	r1, [r7, #8]
 8028264:	000b      	movs	r3, r1
 8028266:	2200      	movs	r2, #0
 8028268:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802826a:	ea48 0002 	orr.w	r0, r8, r2
 802826e:	6038      	str	r0, [r7, #0]
 8028270:	ea49 0303 	orr.w	r3, r9, r3
 8028274:	607b      	str	r3, [r7, #4]
 8028276:	e9d7 3400 	ldrd	r3, r4, [r7]
 802827a:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 802827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028280:	681b      	ldr	r3, [r3, #0]
 8028282:	1d9a      	adds	r2, r3, #6
 8028284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028286:	601a      	str	r2, [r3, #0]
                break;
 8028288:	e051      	b.n	802832e <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 802828a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 802828e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028294:	4618      	mov	r0, r3
 8028296:	f7ff fe23 	bl	8027ee0 <get_callback_info>
 802829a:	4603      	mov	r3, r0
 802829c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80282a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282a4:	2b00      	cmp	r3, #0
 80282a6:	d002      	beq.n	80282ae <parse_fifo+0x282>
                {
                    return rslt;
 80282a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282ac:	e082      	b.n	80283b4 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80282ae:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80282b2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80282b6:	461a      	mov	r2, r3
 80282b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80282ba:	f7ff fe7b 	bl	8027fb4 <get_buffer_status>
 80282be:	4603      	mov	r3, r0
 80282c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80282c4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	d002      	beq.n	80282d2 <parse_fifo+0x2a6>
                {
                    return rslt;
 80282cc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282d0:	e070      	b.n	80283b4 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80282d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80282d6:	2b00      	cmp	r3, #0
 80282d8:	d000      	beq.n	80282dc <parse_fifo+0x2b0>
                {
                    break;
 80282da:	e028      	b.n	802832e <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 80282dc:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d01c      	beq.n	802831e <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80282e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282e6:	691a      	ldr	r2, [r3, #16]
 80282e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80282ea:	3301      	adds	r3, #1
 80282ec:	4413      	add	r3, r2
 80282ee:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80282f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80282f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80282f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80282fa:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80282fc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028300:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8028304:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8028308:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 802830c:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8028310:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8028314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8028318:	4611      	mov	r1, r2
 802831a:	4618      	mov	r0, r3
 802831c:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 802831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028320:	681a      	ldr	r2, [r3, #0]
 8028322:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8028326:	441a      	add	r2, r3
 8028328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802832a:	601a      	str	r2, [r3, #0]
                break;
 802832c:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028330:	681a      	ldr	r2, [r3, #0]
 8028332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028334:	685b      	ldr	r3, [r3, #4]
 8028336:	429a      	cmp	r2, r3
 8028338:	d204      	bcs.n	8028344 <parse_fifo+0x318>
 802833a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802833e:	2b00      	cmp	r3, #0
 8028340:	f43f ae8a 	beq.w	8028058 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8028344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028346:	685b      	ldr	r3, [r3, #4]
 8028348:	2b00      	cmp	r3, #0
 802834a:	d031      	beq.n	80283b0 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 802834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802834e:	685a      	ldr	r2, [r3, #4]
 8028350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028352:	681b      	ldr	r3, [r3, #0]
 8028354:	429a      	cmp	r2, r3
 8028356:	d202      	bcs.n	802835e <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8028358:	f06f 0301 	mvn.w	r3, #1
 802835c:	e02a      	b.n	80283b4 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 802835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028360:	685a      	ldr	r2, [r3, #4]
 8028362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028364:	681b      	ldr	r3, [r3, #0]
 8028366:	1ad2      	subs	r2, r2, r3
 8028368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802836a:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 802836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802836e:	685b      	ldr	r3, [r3, #4]
 8028370:	2b00      	cmp	r3, #0
 8028372:	d01d      	beq.n	80283b0 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8028374:	2300      	movs	r3, #0
 8028376:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802837a:	e013      	b.n	80283a4 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 802837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802837e:	691a      	ldr	r2, [r3, #16]
 8028380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028382:	6819      	ldr	r1, [r3, #0]
 8028384:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8028388:	440b      	add	r3, r1
 802838a:	441a      	add	r2, r3
 802838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802838e:	6919      	ldr	r1, [r3, #16]
 8028390:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8028394:	440b      	add	r3, r1
 8028396:	7812      	ldrb	r2, [r2, #0]
 8028398:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 802839a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802839e:	3301      	adds	r3, #1
 80283a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80283a4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80283a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283aa:	685b      	ldr	r3, [r3, #4]
 80283ac:	429a      	cmp	r2, r3
 80283ae:	d3e5      	bcc.n	802837c <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 80283b0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80283b4:	4618      	mov	r0, r3
 80283b6:	3764      	adds	r7, #100	; 0x64
 80283b8:	46bd      	mov	sp, r7
 80283ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283be:	bf00      	nop

080283c0 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 80283c0:	b590      	push	{r4, r7, lr}
 80283c2:	b0cf      	sub	sp, #316	; 0x13c
 80283c4:	af00      	add	r7, sp, #0
 80283c6:	4604      	mov	r4, r0
 80283c8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80283cc:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80283d0:	6001      	str	r1, [r0, #0]
 80283d2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80283d6:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80283da:	600a      	str	r2, [r1, #0]
 80283dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80283e0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80283e4:	6013      	str	r3, [r2, #0]
 80283e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80283ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80283ee:	4622      	mov	r2, r4
 80283f0:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80283f2:	2300      	movs	r3, #0
 80283f4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80283f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80283fc:	2b00      	cmp	r3, #0
 80283fe:	f000 81af 	beq.w	8028760 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028402:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028406:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802840a:	681b      	ldr	r3, [r3, #0]
 802840c:	2b00      	cmp	r3, #0
 802840e:	d007      	beq.n	8028420 <bhy2_hif_exec_cmd_generic+0x60>
 8028410:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8028418:	681b      	ldr	r3, [r3, #0]
 802841a:	2b00      	cmp	r3, #0
 802841c:	f000 81a0 	beq.w	8028760 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028420:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8028424:	2b00      	cmp	r3, #0
 8028426:	d007      	beq.n	8028438 <bhy2_hif_exec_cmd_generic+0x78>
 8028428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802842c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8028430:	681b      	ldr	r3, [r3, #0]
 8028432:	2b00      	cmp	r3, #0
 8028434:	f000 8194 	beq.w	8028760 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8028438:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802843c:	699b      	ldr	r3, [r3, #24]
 802843e:	2b00      	cmp	r3, #0
 8028440:	f000 8188 	beq.w	8028754 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8028444:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028448:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802844c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028450:	681b      	ldr	r3, [r3, #0]
 8028452:	4413      	add	r3, r2
 8028454:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8028458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802845c:	2b00      	cmp	r3, #0
 802845e:	d007      	beq.n	8028470 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8028460:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8028468:	4413      	add	r3, r2
 802846a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802846e:	e003      	b.n	8028478 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 8028470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8028474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8028478:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802847c:	f003 0303 	and.w	r3, r3, #3
 8028480:	2b00      	cmp	r3, #0
 8028482:	d006      	beq.n	8028492 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8028484:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028488:	089b      	lsrs	r3, r3, #2
 802848a:	3301      	adds	r3, #1
 802848c:	009b      	lsls	r3, r3, #2
 802848e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 8028492:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028496:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802849a:	881b      	ldrh	r3, [r3, #0]
 802849c:	b2da      	uxtb	r2, r3
 802849e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284a6:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80284a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284ac:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284b0:	881b      	ldrh	r3, [r3, #0]
 80284b2:	0a1b      	lsrs	r3, r3, #8
 80284b4:	b29b      	uxth	r3, r3
 80284b6:	b2da      	uxtb	r2, r3
 80284b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284c0:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 80284c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284ca:	881b      	ldrh	r3, [r3, #0]
 80284cc:	2b02      	cmp	r3, #2
 80284ce:	d113      	bne.n	80284f8 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 80284d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284d4:	089b      	lsrs	r3, r3, #2
 80284d6:	b2da      	uxtb	r2, r3
 80284d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284e0:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 80284e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284e6:	089b      	lsrs	r3, r3, #2
 80284e8:	0a1b      	lsrs	r3, r3, #8
 80284ea:	b2da      	uxtb	r2, r3
 80284ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284f4:	70da      	strb	r2, [r3, #3]
 80284f6:	e010      	b.n	802851a <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80284f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284fc:	b2da      	uxtb	r2, r3
 80284fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028502:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028506:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8028508:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802850c:	0a1b      	lsrs	r3, r3, #8
 802850e:	b2da      	uxtb	r2, r3
 8028510:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028518:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802851a:	2304      	movs	r3, #4
 802851c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8028520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8028524:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8028528:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802852c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028530:	4413      	add	r3, r2
 8028532:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 8028536:	f44f 7380 	mov.w	r3, #256	; 0x100
 802853a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 802853e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028542:	699b      	ldr	r3, [r3, #24]
 8028544:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8028548:	429a      	cmp	r2, r3
 802854a:	f240 80f9 	bls.w	8028740 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 802854e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028552:	699b      	ldr	r3, [r3, #24]
 8028554:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8028558:	e0f2      	b.n	8028740 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802855a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802855e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028562:	4413      	add	r3, r2
 8028564:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8028568:	429a      	cmp	r2, r3
 802856a:	d20b      	bcs.n	8028584 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 802856c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8028570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8028574:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8028578:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802857c:	1ad3      	subs	r3, r2, r3
 802857e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8028582:	e020      	b.n	80285c6 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8028584:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028588:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802858c:	4413      	add	r3, r2
 802858e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 8028592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028596:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 802859a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802859e:	f003 0303 	and.w	r3, r3, #3
 80285a2:	2b00      	cmp	r3, #0
 80285a4:	d006      	beq.n	80285b4 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80285a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285aa:	089b      	lsrs	r3, r3, #2
 80285ac:	3301      	adds	r3, #1
 80285ae:	009b      	lsls	r3, r3, #2
 80285b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 80285b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80285bc:	d903      	bls.n	80285c6 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 80285be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80285c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 80285c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80285ca:	2b00      	cmp	r3, #0
 80285cc:	d07e      	beq.n	80286cc <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 80285ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80285d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80285d6:	681a      	ldr	r2, [r3, #0]
 80285d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80285dc:	4413      	add	r3, r2
 80285de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80285e2:	429a      	cmp	r2, r3
 80285e4:	d315      	bcc.n	8028612 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 80285e6:	f107 0214 	add.w	r2, r7, #20
 80285ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285ee:	18d0      	adds	r0, r2, r3
 80285f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80285f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80285f8:	1ad3      	subs	r3, r2, r3
 80285fa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80285fe:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028602:	6812      	ldr	r2, [r2, #0]
 8028604:	4413      	add	r3, r2
 8028606:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802860a:	4619      	mov	r1, r3
 802860c:	f013 fc06 	bl	803be1c <memcpy>
 8028610:	e05c      	b.n	80286cc <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8028612:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028616:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802861a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802861e:	681b      	ldr	r3, [r3, #0]
 8028620:	429a      	cmp	r2, r3
 8028622:	d93b      	bls.n	802869c <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8028624:	f107 0214 	add.w	r2, r7, #20
 8028628:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802862c:	18d0      	adds	r0, r2, r3
 802862e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028632:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028636:	1ad3      	subs	r3, r2, r3
 8028638:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802863c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028640:	6812      	ldr	r2, [r2, #0]
 8028642:	18d1      	adds	r1, r2, r3
 8028644:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028648:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802864c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028650:	681b      	ldr	r3, [r3, #0]
 8028652:	1ad3      	subs	r3, r2, r3
 8028654:	461a      	mov	r2, r3
 8028656:	f013 fbe1 	bl	803be1c <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802865a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802865e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028662:	441a      	add	r2, r3
 8028664:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028668:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	1ad3      	subs	r3, r2, r3
 8028670:	f107 0214 	add.w	r2, r7, #20
 8028674:	18d0      	adds	r0, r2, r3
 8028676:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802867a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802867e:	681a      	ldr	r2, [r3, #0]
 8028680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028684:	1ad2      	subs	r2, r2, r3
 8028686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802868a:	441a      	add	r2, r3
 802868c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8028694:	6819      	ldr	r1, [r3, #0]
 8028696:	f013 fbc1 	bl	803be1c <memcpy>
 802869a:	e017      	b.n	80286cc <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 802869c:	f107 0214 	add.w	r2, r7, #20
 80286a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80286a4:	18d0      	adds	r0, r2, r3
 80286a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286ae:	681a      	ldr	r2, [r3, #0]
 80286b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286b4:	1ad3      	subs	r3, r2, r3
 80286b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80286ba:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80286be:	6812      	ldr	r2, [r2, #0]
 80286c0:	4413      	add	r3, r2
 80286c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80286c6:	4619      	mov	r1, r3
 80286c8:	f013 fba8 	bl	803be1c <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 80286cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80286d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80286d4:	4413      	add	r3, r2
 80286d6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80286da:	429a      	cmp	r2, r3
 80286dc:	d012      	beq.n	8028704 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 80286de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80286e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80286e6:	4413      	add	r3, r2
 80286e8:	f107 0214 	add.w	r2, r7, #20
 80286ec:	18d0      	adds	r0, r2, r3
 80286ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80286f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80286f6:	4413      	add	r3, r2
 80286f8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80286fc:	461a      	mov	r2, r3
 80286fe:	2100      	movs	r1, #0
 8028700:	f013 fbb4 	bl	803be6c <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8028704:	f107 0114 	add.w	r1, r7, #20
 8028708:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802870c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028710:	2000      	movs	r0, #0
 8028712:	f000 f9b4 	bl	8028a7e <bhy2_hif_set_regs>
 8028716:	4603      	mov	r3, r0
 8028718:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 802871c:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028720:	2b00      	cmp	r3, #0
 8028722:	d11b      	bne.n	802875c <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8028724:	2300      	movs	r3, #0
 8028726:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802872a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802872e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028732:	1ad3      	subs	r3, r2, r3
 8028734:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8028738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802873c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8028740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8028744:	2b00      	cmp	r3, #0
 8028746:	d00f      	beq.n	8028768 <bhy2_hif_exec_cmd_generic+0x3a8>
 8028748:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802874c:	2b00      	cmp	r3, #0
 802874e:	f43f af04 	beq.w	802855a <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8028752:	e009      	b.n	8028768 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028754:	23fe      	movs	r3, #254	; 0xfe
 8028756:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802875a:	e005      	b.n	8028768 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 802875c:	bf00      	nop
        if (hif->read_write_len != 0)
 802875e:	e003      	b.n	8028768 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028760:	23ff      	movs	r3, #255	; 0xff
 8028762:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8028766:	e000      	b.n	802876a <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8028768:	bf00      	nop
    }

    return rslt;
 802876a:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 802876e:	4618      	mov	r0, r3
 8028770:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8028774:	46bd      	mov	sp, r7
 8028776:	bd90      	pop	{r4, r7, pc}

08028778 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8028778:	b580      	push	{r7, lr}
 802877a:	b084      	sub	sp, #16
 802877c:	af00      	add	r7, sp, #0
 802877e:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8028780:	2300      	movs	r3, #0
 8028782:	81fb      	strh	r3, [r7, #14]
 8028784:	e027      	b.n	80287d6 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8028786:	f107 030c 	add.w	r3, r7, #12
 802878a:	6879      	ldr	r1, [r7, #4]
 802878c:	4618      	mov	r0, r3
 802878e:	f000 fab1 	bl	8028cf4 <bhy2_hif_get_interrupt_status>
 8028792:	4603      	mov	r3, r0
 8028794:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8028796:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802879a:	2b00      	cmp	r3, #0
 802879c:	d115      	bne.n	80287ca <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 802879e:	7b3b      	ldrb	r3, [r7, #12]
 80287a0:	f003 0320 	and.w	r3, r3, #32
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	d002      	beq.n	80287ae <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 80287a8:	2300      	movs	r3, #0
 80287aa:	737b      	strb	r3, [r7, #13]
                break;
 80287ac:	e017      	b.n	80287de <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 80287ae:	6879      	ldr	r1, [r7, #4]
 80287b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80287b4:	f000 f99b 	bl	8028aee <bhy2_hif_delay_us>
 80287b8:	4603      	mov	r3, r0
 80287ba:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 80287bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	d005      	beq.n	80287d0 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 80287c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287c8:	e00b      	b.n	80287e2 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 80287ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287ce:	e008      	b.n	80287e2 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80287d0:	89fb      	ldrh	r3, [r7, #14]
 80287d2:	3301      	adds	r3, #1
 80287d4:	81fb      	strh	r3, [r7, #14]
 80287d6:	89fb      	ldrh	r3, [r7, #14]
 80287d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80287dc:	d3d3      	bcc.n	8028786 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 80287de:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80287e2:	4618      	mov	r0, r3
 80287e4:	3710      	adds	r7, #16
 80287e6:	46bd      	mov	sp, r7
 80287e8:	bd80      	pop	{r7, pc}

080287ea <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 80287ea:	b580      	push	{r7, lr}
 80287ec:	b084      	sub	sp, #16
 80287ee:	af00      	add	r7, sp, #0
 80287f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80287f2:	2300      	movs	r3, #0
 80287f4:	81fb      	strh	r3, [r7, #14]
 80287f6:	e02f      	b.n	8028858 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 80287f8:	6879      	ldr	r1, [r7, #4]
 80287fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80287fe:	f000 f976 	bl	8028aee <bhy2_hif_delay_us>
 8028802:	4603      	mov	r3, r0
 8028804:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8028806:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802880a:	2b00      	cmp	r3, #0
 802880c:	da02      	bge.n	8028814 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 802880e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028812:	e02d      	b.n	8028870 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8028814:	f107 010c 	add.w	r1, r7, #12
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	2201      	movs	r2, #1
 802881c:	2025      	movs	r0, #37	; 0x25
 802881e:	f000 f8f6 	bl	8028a0e <bhy2_hif_get_regs>
 8028822:	4603      	mov	r3, r0
 8028824:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8028826:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802882a:	2b00      	cmp	r3, #0
 802882c:	da02      	bge.n	8028834 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 802882e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028832:	e01d      	b.n	8028870 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028834:	7b3b      	ldrb	r3, [r7, #12]
 8028836:	f003 0310 	and.w	r3, r3, #16
 802883a:	2b00      	cmp	r3, #0
 802883c:	d009      	beq.n	8028852 <bhy2_hif_check_boot_status_ram+0x68>
 802883e:	7b3b      	ldrb	r3, [r7, #12]
 8028840:	f003 0320 	and.w	r3, r3, #32
 8028844:	2b00      	cmp	r3, #0
 8028846:	d004      	beq.n	8028852 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8028848:	7b3b      	ldrb	r3, [r7, #12]
 802884a:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802884e:	2b00      	cmp	r3, #0
 8028850:	d006      	beq.n	8028860 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028852:	89fb      	ldrh	r3, [r7, #14]
 8028854:	3301      	adds	r3, #1
 8028856:	81fb      	strh	r3, [r7, #14]
 8028858:	89fb      	ldrh	r3, [r7, #14]
 802885a:	2b63      	cmp	r3, #99	; 0x63
 802885c:	d9cc      	bls.n	80287f8 <bhy2_hif_check_boot_status_ram+0xe>
 802885e:	e000      	b.n	8028862 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8028860:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8028862:	89fb      	ldrh	r3, [r7, #14]
 8028864:	2b64      	cmp	r3, #100	; 0x64
 8028866:	d102      	bne.n	802886e <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8028868:	f06f 0304 	mvn.w	r3, #4
 802886c:	e000      	b.n	8028870 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 802886e:	2300      	movs	r3, #0
}
 8028870:	4618      	mov	r0, r3
 8028872:	3710      	adds	r7, #16
 8028874:	46bd      	mov	sp, r7
 8028876:	bd80      	pop	{r7, pc}

08028878 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028878:	b580      	push	{r7, lr}
 802887a:	b08a      	sub	sp, #40	; 0x28
 802887c:	af00      	add	r7, sp, #0
 802887e:	60b9      	str	r1, [r7, #8]
 8028880:	607a      	str	r2, [r7, #4]
 8028882:	603b      	str	r3, [r7, #0]
 8028884:	4603      	mov	r3, r0
 8028886:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028888:	2300      	movs	r3, #0
 802888a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 802888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028890:	2b00      	cmp	r3, #0
 8028892:	d072      	beq.n	802897a <bhy2_hif_get_fifo+0x102>
 8028894:	68bb      	ldr	r3, [r7, #8]
 8028896:	2b00      	cmp	r3, #0
 8028898:	d06f      	beq.n	802897a <bhy2_hif_get_fifo+0x102>
 802889a:	683b      	ldr	r3, [r7, #0]
 802889c:	2b00      	cmp	r3, #0
 802889e:	d06c      	beq.n	802897a <bhy2_hif_get_fifo+0x102>
 80288a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288a2:	2b00      	cmp	r3, #0
 80288a4:	d069      	beq.n	802897a <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 80288a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288a8:	699b      	ldr	r3, [r3, #24]
 80288aa:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 80288ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288ae:	681b      	ldr	r3, [r3, #0]
 80288b0:	2b00      	cmp	r3, #0
 80288b2:	d114      	bne.n	80288de <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 80288b4:	f107 0114 	add.w	r1, r7, #20
 80288b8:	7bf8      	ldrb	r0, [r7, #15]
 80288ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288bc:	2202      	movs	r2, #2
 80288be:	f000 f8a6 	bl	8028a0e <bhy2_hif_get_regs>
 80288c2:	4603      	mov	r3, r0
 80288c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 80288c8:	7d3b      	ldrb	r3, [r7, #20]
 80288ca:	b21a      	sxth	r2, r3
 80288cc:	7d7b      	ldrb	r3, [r7, #21]
 80288ce:	021b      	lsls	r3, r3, #8
 80288d0:	b21b      	sxth	r3, r3
 80288d2:	4313      	orrs	r3, r2
 80288d4:	b21b      	sxth	r3, r3
 80288d6:	b29b      	uxth	r3, r3
 80288d8:	461a      	mov	r2, r3
 80288da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288dc:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80288de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288e0:	681b      	ldr	r3, [r3, #0]
 80288e2:	2b00      	cmp	r3, #0
 80288e4:	d04d      	beq.n	8028982 <bhy2_hif_get_fifo+0x10a>
 80288e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80288ea:	2b00      	cmp	r3, #0
 80288ec:	d149      	bne.n	8028982 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 80288ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288f0:	681b      	ldr	r3, [r3, #0]
 80288f2:	687a      	ldr	r2, [r7, #4]
 80288f4:	429a      	cmp	r2, r3
 80288f6:	d203      	bcs.n	8028900 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 80288f8:	683b      	ldr	r3, [r7, #0]
 80288fa:	687a      	ldr	r2, [r7, #4]
 80288fc:	601a      	str	r2, [r3, #0]
 80288fe:	e003      	b.n	8028908 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8028900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028902:	681a      	ldr	r2, [r3, #0]
 8028904:	683b      	ldr	r3, [r7, #0]
 8028906:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8028908:	683b      	ldr	r3, [r7, #0]
 802890a:	681b      	ldr	r3, [r3, #0]
 802890c:	623b      	str	r3, [r7, #32]
            offset = 0;
 802890e:	2300      	movs	r3, #0
 8028910:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028912:	e016      	b.n	8028942 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8028914:	68ba      	ldr	r2, [r7, #8]
 8028916:	69fb      	ldr	r3, [r7, #28]
 8028918:	18d1      	adds	r1, r2, r3
 802891a:	7bf8      	ldrb	r0, [r7, #15]
 802891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802891e:	69ba      	ldr	r2, [r7, #24]
 8028920:	f000 f875 	bl	8028a0e <bhy2_hif_get_regs>
 8028924:	4603      	mov	r3, r0
 8028926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802892a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802892e:	2b00      	cmp	r3, #0
 8028930:	d10c      	bne.n	802894c <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8028932:	6a3a      	ldr	r2, [r7, #32]
 8028934:	69bb      	ldr	r3, [r7, #24]
 8028936:	1ad3      	subs	r3, r2, r3
 8028938:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802893a:	69fa      	ldr	r2, [r7, #28]
 802893c:	69bb      	ldr	r3, [r7, #24]
 802893e:	4413      	add	r3, r2
 8028940:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028942:	6a3a      	ldr	r2, [r7, #32]
 8028944:	69bb      	ldr	r3, [r7, #24]
 8028946:	429a      	cmp	r2, r3
 8028948:	d8e4      	bhi.n	8028914 <bhy2_hif_get_fifo+0x9c>
 802894a:	e000      	b.n	802894e <bhy2_hif_get_fifo+0xd6>
                    break;
 802894c:	bf00      	nop
            }

            if (read_len != 0)
 802894e:	6a3b      	ldr	r3, [r7, #32]
 8028950:	2b00      	cmp	r3, #0
 8028952:	d00a      	beq.n	802896a <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8028954:	68ba      	ldr	r2, [r7, #8]
 8028956:	69fb      	ldr	r3, [r7, #28]
 8028958:	18d1      	adds	r1, r2, r3
 802895a:	7bf8      	ldrb	r0, [r7, #15]
 802895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802895e:	6a3a      	ldr	r2, [r7, #32]
 8028960:	f000 f855 	bl	8028a0e <bhy2_hif_get_regs>
 8028964:	4603      	mov	r3, r0
 8028966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802896c:	681a      	ldr	r2, [r3, #0]
 802896e:	683b      	ldr	r3, [r7, #0]
 8028970:	681b      	ldr	r3, [r3, #0]
 8028972:	1ad2      	subs	r2, r2, r3
 8028974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028976:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028978:	e003      	b.n	8028982 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802897a:	23ff      	movs	r3, #255	; 0xff
 802897c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8028980:	e000      	b.n	8028984 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028982:	bf00      	nop
    }

    return rslt;
 8028984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8028988:	4618      	mov	r0, r3
 802898a:	3728      	adds	r7, #40	; 0x28
 802898c:	46bd      	mov	sp, r7
 802898e:	bd80      	pop	{r7, pc}

08028990 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8028990:	b480      	push	{r7}
 8028992:	b087      	sub	sp, #28
 8028994:	af00      	add	r7, sp, #0
 8028996:	60b9      	str	r1, [r7, #8]
 8028998:	607a      	str	r2, [r7, #4]
 802899a:	603b      	str	r3, [r7, #0]
 802899c:	4603      	mov	r3, r0
 802899e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80289a0:	2300      	movs	r3, #0
 80289a2:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 80289a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289a6:	2b00      	cmp	r3, #0
 80289a8:	d027      	beq.n	80289fa <bhy2_hif_init+0x6a>
 80289aa:	68bb      	ldr	r3, [r7, #8]
 80289ac:	2b00      	cmp	r3, #0
 80289ae:	d024      	beq.n	80289fa <bhy2_hif_init+0x6a>
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	2b00      	cmp	r3, #0
 80289b4:	d021      	beq.n	80289fa <bhy2_hif_init+0x6a>
 80289b6:	683b      	ldr	r3, [r7, #0]
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	d01e      	beq.n	80289fa <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 80289bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289be:	68ba      	ldr	r2, [r7, #8]
 80289c0:	601a      	str	r2, [r3, #0]
        hif->write = write;
 80289c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289c4:	687a      	ldr	r2, [r7, #4]
 80289c6:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 80289c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289ca:	683a      	ldr	r2, [r7, #0]
 80289cc:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 80289ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80289d2:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 80289d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289d6:	7bfa      	ldrb	r2, [r7, #15]
 80289d8:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 80289da:	6a3b      	ldr	r3, [r7, #32]
 80289dc:	f003 0303 	and.w	r3, r3, #3
 80289e0:	2b00      	cmp	r3, #0
 80289e2:	d006      	beq.n	80289f2 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 80289e4:	6a3b      	ldr	r3, [r7, #32]
 80289e6:	089b      	lsrs	r3, r3, #2
 80289e8:	3301      	adds	r3, #1
 80289ea:	009a      	lsls	r2, r3, #2
 80289ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289ee:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 80289f0:	e005      	b.n	80289fe <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 80289f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289f4:	6a3a      	ldr	r2, [r7, #32]
 80289f6:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 80289f8:	e001      	b.n	80289fe <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80289fa:	23ff      	movs	r3, #255	; 0xff
 80289fc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80289fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a02:	4618      	mov	r0, r3
 8028a04:	371c      	adds	r7, #28
 8028a06:	46bd      	mov	sp, r7
 8028a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a0c:	4770      	bx	lr

08028a0e <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028a0e:	b590      	push	{r4, r7, lr}
 8028a10:	b087      	sub	sp, #28
 8028a12:	af00      	add	r7, sp, #0
 8028a14:	60b9      	str	r1, [r7, #8]
 8028a16:	607a      	str	r2, [r7, #4]
 8028a18:	603b      	str	r3, [r7, #0]
 8028a1a:	4603      	mov	r3, r0
 8028a1c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028a1e:	2300      	movs	r3, #0
 8028a20:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028a22:	683b      	ldr	r3, [r7, #0]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d022      	beq.n	8028a6e <bhy2_hif_get_regs+0x60>
 8028a28:	683b      	ldr	r3, [r7, #0]
 8028a2a:	681b      	ldr	r3, [r3, #0]
 8028a2c:	2b00      	cmp	r3, #0
 8028a2e:	d01e      	beq.n	8028a6e <bhy2_hif_get_regs+0x60>
 8028a30:	68bb      	ldr	r3, [r7, #8]
 8028a32:	2b00      	cmp	r3, #0
 8028a34:	d01b      	beq.n	8028a6e <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028a36:	683b      	ldr	r3, [r7, #0]
 8028a38:	7b1b      	ldrb	r3, [r3, #12]
 8028a3a:	2b01      	cmp	r3, #1
 8028a3c:	d103      	bne.n	8028a46 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8028a3e:	7bfb      	ldrb	r3, [r7, #15]
 8028a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028a44:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8028a46:	683b      	ldr	r3, [r7, #0]
 8028a48:	681c      	ldr	r4, [r3, #0]
 8028a4a:	683b      	ldr	r3, [r7, #0]
 8028a4c:	691b      	ldr	r3, [r3, #16]
 8028a4e:	7bf8      	ldrb	r0, [r7, #15]
 8028a50:	687a      	ldr	r2, [r7, #4]
 8028a52:	68b9      	ldr	r1, [r7, #8]
 8028a54:	47a0      	blx	r4
 8028a56:	4603      	mov	r3, r0
 8028a58:	461a      	mov	r2, r3
 8028a5a:	683b      	ldr	r3, [r7, #0]
 8028a5c:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028a5e:	683b      	ldr	r3, [r7, #0]
 8028a60:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028a64:	2b00      	cmp	r3, #0
 8028a66:	d004      	beq.n	8028a72 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028a68:	23fd      	movs	r3, #253	; 0xfd
 8028a6a:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028a6c:	e001      	b.n	8028a72 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a6e:	23ff      	movs	r3, #255	; 0xff
 8028a70:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a76:	4618      	mov	r0, r3
 8028a78:	371c      	adds	r7, #28
 8028a7a:	46bd      	mov	sp, r7
 8028a7c:	bd90      	pop	{r4, r7, pc}

08028a7e <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028a7e:	b590      	push	{r4, r7, lr}
 8028a80:	b087      	sub	sp, #28
 8028a82:	af00      	add	r7, sp, #0
 8028a84:	60b9      	str	r1, [r7, #8]
 8028a86:	607a      	str	r2, [r7, #4]
 8028a88:	603b      	str	r3, [r7, #0]
 8028a8a:	4603      	mov	r3, r0
 8028a8c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028a8e:	2300      	movs	r3, #0
 8028a90:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028a92:	683b      	ldr	r3, [r7, #0]
 8028a94:	2b00      	cmp	r3, #0
 8028a96:	d022      	beq.n	8028ade <bhy2_hif_set_regs+0x60>
 8028a98:	683b      	ldr	r3, [r7, #0]
 8028a9a:	681b      	ldr	r3, [r3, #0]
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d01e      	beq.n	8028ade <bhy2_hif_set_regs+0x60>
 8028aa0:	68bb      	ldr	r3, [r7, #8]
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	d01b      	beq.n	8028ade <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028aa6:	683b      	ldr	r3, [r7, #0]
 8028aa8:	7b1b      	ldrb	r3, [r3, #12]
 8028aaa:	2b01      	cmp	r3, #1
 8028aac:	d103      	bne.n	8028ab6 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8028aae:	7bfb      	ldrb	r3, [r7, #15]
 8028ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028ab4:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	685c      	ldr	r4, [r3, #4]
 8028aba:	683b      	ldr	r3, [r7, #0]
 8028abc:	691b      	ldr	r3, [r3, #16]
 8028abe:	7bf8      	ldrb	r0, [r7, #15]
 8028ac0:	687a      	ldr	r2, [r7, #4]
 8028ac2:	68b9      	ldr	r1, [r7, #8]
 8028ac4:	47a0      	blx	r4
 8028ac6:	4603      	mov	r3, r0
 8028ac8:	461a      	mov	r2, r3
 8028aca:	683b      	ldr	r3, [r7, #0]
 8028acc:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028ace:	683b      	ldr	r3, [r7, #0]
 8028ad0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	d004      	beq.n	8028ae2 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028ad8:	23fd      	movs	r3, #253	; 0xfd
 8028ada:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028adc:	e001      	b.n	8028ae2 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028ade:	23ff      	movs	r3, #255	; 0xff
 8028ae0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028ae6:	4618      	mov	r0, r3
 8028ae8:	371c      	adds	r7, #28
 8028aea:	46bd      	mov	sp, r7
 8028aec:	bd90      	pop	{r4, r7, pc}

08028aee <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8028aee:	b580      	push	{r7, lr}
 8028af0:	b084      	sub	sp, #16
 8028af2:	af00      	add	r7, sp, #0
 8028af4:	6078      	str	r0, [r7, #4]
 8028af6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028af8:	2300      	movs	r3, #0
 8028afa:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8028afc:	683b      	ldr	r3, [r7, #0]
 8028afe:	2b00      	cmp	r3, #0
 8028b00:	d00b      	beq.n	8028b1a <bhy2_hif_delay_us+0x2c>
 8028b02:	683b      	ldr	r3, [r7, #0]
 8028b04:	689b      	ldr	r3, [r3, #8]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	d007      	beq.n	8028b1a <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8028b0a:	683b      	ldr	r3, [r7, #0]
 8028b0c:	689b      	ldr	r3, [r3, #8]
 8028b0e:	683a      	ldr	r2, [r7, #0]
 8028b10:	6912      	ldr	r2, [r2, #16]
 8028b12:	4611      	mov	r1, r2
 8028b14:	6878      	ldr	r0, [r7, #4]
 8028b16:	4798      	blx	r3
 8028b18:	e001      	b.n	8028b1e <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028b1a:	23ff      	movs	r3, #255	; 0xff
 8028b1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028b22:	4618      	mov	r0, r3
 8028b24:	3710      	adds	r7, #16
 8028b26:	46bd      	mov	sp, r7
 8028b28:	bd80      	pop	{r7, pc}

08028b2a <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028b2a:	b580      	push	{r7, lr}
 8028b2c:	b088      	sub	sp, #32
 8028b2e:	af04      	add	r7, sp, #16
 8028b30:	60b9      	str	r1, [r7, #8]
 8028b32:	607a      	str	r2, [r7, #4]
 8028b34:	603b      	str	r3, [r7, #0]
 8028b36:	4603      	mov	r3, r0
 8028b38:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8028b3a:	89f8      	ldrh	r0, [r7, #14]
 8028b3c:	683b      	ldr	r3, [r7, #0]
 8028b3e:	9302      	str	r3, [sp, #8]
 8028b40:	2300      	movs	r3, #0
 8028b42:	9301      	str	r3, [sp, #4]
 8028b44:	2300      	movs	r3, #0
 8028b46:	9300      	str	r3, [sp, #0]
 8028b48:	2300      	movs	r3, #0
 8028b4a:	687a      	ldr	r2, [r7, #4]
 8028b4c:	68b9      	ldr	r1, [r7, #8]
 8028b4e:	f7ff fc37 	bl	80283c0 <bhy2_hif_exec_cmd_generic>
 8028b52:	4603      	mov	r3, r0
}
 8028b54:	4618      	mov	r0, r3
 8028b56:	3710      	adds	r7, #16
 8028b58:	46bd      	mov	sp, r7
 8028b5a:	bd80      	pop	{r7, pc}

08028b5c <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8028b5c:	b580      	push	{r7, lr}
 8028b5e:	b088      	sub	sp, #32
 8028b60:	af02      	add	r7, sp, #8
 8028b62:	60b9      	str	r1, [r7, #8]
 8028b64:	607a      	str	r2, [r7, #4]
 8028b66:	603b      	str	r3, [r7, #0]
 8028b68:	4603      	mov	r3, r0
 8028b6a:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8028b70:	2300      	movs	r3, #0
 8028b72:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8028b74:	6a3b      	ldr	r3, [r7, #32]
 8028b76:	2b00      	cmp	r3, #0
 8028b78:	d06e      	beq.n	8028c58 <bhy2_hif_get_parameter+0xfc>
 8028b7a:	68bb      	ldr	r3, [r7, #8]
 8028b7c:	2b00      	cmp	r3, #0
 8028b7e:	d06b      	beq.n	8028c58 <bhy2_hif_get_parameter+0xfc>
 8028b80:	683b      	ldr	r3, [r7, #0]
 8028b82:	2b00      	cmp	r3, #0
 8028b84:	d068      	beq.n	8028c58 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8028b86:	683b      	ldr	r3, [r7, #0]
 8028b88:	2200      	movs	r2, #0
 8028b8a:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028b8c:	f107 0113 	add.w	r1, r7, #19
 8028b90:	6a3b      	ldr	r3, [r7, #32]
 8028b92:	2201      	movs	r2, #1
 8028b94:	2006      	movs	r0, #6
 8028b96:	f7ff ff3a 	bl	8028a0e <bhy2_hif_get_regs>
 8028b9a:	4603      	mov	r3, r0
 8028b9c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	d15b      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8028ba6:	7cfb      	ldrb	r3, [r7, #19]
 8028ba8:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8028baa:	7cfb      	ldrb	r3, [r7, #19]
 8028bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028bb0:	b2db      	uxtb	r3, r3
 8028bb2:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8028bb4:	7cfb      	ldrb	r3, [r7, #19]
 8028bb6:	7dba      	ldrb	r2, [r7, #22]
 8028bb8:	429a      	cmp	r2, r3
 8028bba:	d008      	beq.n	8028bce <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028bbc:	f107 0113 	add.w	r1, r7, #19
 8028bc0:	6a3b      	ldr	r3, [r7, #32]
 8028bc2:	2201      	movs	r2, #1
 8028bc4:	2006      	movs	r0, #6
 8028bc6:	f7ff ff5a 	bl	8028a7e <bhy2_hif_set_regs>
 8028bca:	4603      	mov	r3, r0
 8028bcc:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8028bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028bd2:	2b00      	cmp	r3, #0
 8028bd4:	d143      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8028bd6:	89fb      	ldrh	r3, [r7, #14]
 8028bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028bdc:	b298      	uxth	r0, r3
 8028bde:	6a3b      	ldr	r3, [r7, #32]
 8028be0:	2200      	movs	r2, #0
 8028be2:	2100      	movs	r1, #0
 8028be4:	f7ff ffa1 	bl	8028b2a <bhy2_hif_exec_cmd>
 8028be8:	4603      	mov	r3, r0
 8028bea:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8028bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028bf0:	2b00      	cmp	r3, #0
 8028bf2:	d134      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8028bf4:	6a38      	ldr	r0, [r7, #32]
 8028bf6:	f7ff fdbf 	bl	8028778 <bhy2_wait_status_ready>
 8028bfa:	4603      	mov	r3, r0
 8028bfc:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8028bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c02:	2b00      	cmp	r3, #0
 8028c04:	d12b      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8028c06:	f107 0014 	add.w	r0, r7, #20
 8028c0a:	6a3b      	ldr	r3, [r7, #32]
 8028c0c:	9300      	str	r3, [sp, #0]
 8028c0e:	683b      	ldr	r3, [r7, #0]
 8028c10:	687a      	ldr	r2, [r7, #4]
 8028c12:	68b9      	ldr	r1, [r7, #8]
 8028c14:	f000 f94b 	bl	8028eae <bhy2_hif_get_status_fifo>
 8028c18:	4603      	mov	r3, r0
 8028c1a:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8028c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c20:	2b00      	cmp	r3, #0
 8028c22:	d11c      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8028c24:	7cfb      	ldrb	r3, [r7, #19]
 8028c26:	7dba      	ldrb	r2, [r7, #22]
 8028c28:	429a      	cmp	r2, r3
 8028c2a:	d00a      	beq.n	8028c42 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8028c2c:	7dbb      	ldrb	r3, [r7, #22]
 8028c2e:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028c30:	f107 0113 	add.w	r1, r7, #19
 8028c34:	6a3b      	ldr	r3, [r7, #32]
 8028c36:	2201      	movs	r2, #1
 8028c38:	2006      	movs	r0, #6
 8028c3a:	f7ff ff20 	bl	8028a7e <bhy2_hif_set_regs>
 8028c3e:	4603      	mov	r3, r0
 8028c40:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8028c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c46:	2b00      	cmp	r3, #0
 8028c48:	d109      	bne.n	8028c5e <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8028c4a:	8abb      	ldrh	r3, [r7, #20]
 8028c4c:	89fa      	ldrh	r2, [r7, #14]
 8028c4e:	429a      	cmp	r2, r3
 8028c50:	d005      	beq.n	8028c5e <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8028c52:	23fb      	movs	r3, #251	; 0xfb
 8028c54:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028c56:	e002      	b.n	8028c5e <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028c58:	23ff      	movs	r3, #255	; 0xff
 8028c5a:	75fb      	strb	r3, [r7, #23]
 8028c5c:	e000      	b.n	8028c60 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8028c5e:	bf00      	nop
    }

    return rslt;
 8028c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028c64:	4618      	mov	r0, r3
 8028c66:	3718      	adds	r7, #24
 8028c68:	46bd      	mov	sp, r7
 8028c6a:	bd80      	pop	{r7, pc}

08028c6c <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8028c6c:	b580      	push	{r7, lr}
 8028c6e:	b082      	sub	sp, #8
 8028c70:	af00      	add	r7, sp, #0
 8028c72:	6078      	str	r0, [r7, #4]
 8028c74:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8028c76:	683b      	ldr	r3, [r7, #0]
 8028c78:	2201      	movs	r2, #1
 8028c7a:	6879      	ldr	r1, [r7, #4]
 8028c7c:	201c      	movs	r0, #28
 8028c7e:	f7ff fec6 	bl	8028a0e <bhy2_hif_get_regs>
 8028c82:	4603      	mov	r3, r0
}
 8028c84:	4618      	mov	r0, r3
 8028c86:	3708      	adds	r7, #8
 8028c88:	46bd      	mov	sp, r7
 8028c8a:	bd80      	pop	{r7, pc}

08028c8c <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8028c8c:	b580      	push	{r7, lr}
 8028c8e:	b084      	sub	sp, #16
 8028c90:	af00      	add	r7, sp, #0
 8028c92:	6078      	str	r0, [r7, #4]
 8028c94:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8028c96:	687b      	ldr	r3, [r7, #4]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d013      	beq.n	8028cc4 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8028c9c:	f107 010c 	add.w	r1, r7, #12
 8028ca0:	683b      	ldr	r3, [r7, #0]
 8028ca2:	2202      	movs	r2, #2
 8028ca4:	2020      	movs	r0, #32
 8028ca6:	f7ff feb2 	bl	8028a0e <bhy2_hif_get_regs>
 8028caa:	4603      	mov	r3, r0
 8028cac:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8028cae:	7b3b      	ldrb	r3, [r7, #12]
 8028cb0:	b21a      	sxth	r2, r3
 8028cb2:	7b7b      	ldrb	r3, [r7, #13]
 8028cb4:	021b      	lsls	r3, r3, #8
 8028cb6:	b21b      	sxth	r3, r3
 8028cb8:	4313      	orrs	r3, r2
 8028cba:	b21b      	sxth	r3, r3
 8028cbc:	b29a      	uxth	r2, r3
 8028cbe:	687b      	ldr	r3, [r7, #4]
 8028cc0:	801a      	strh	r2, [r3, #0]
 8028cc2:	e001      	b.n	8028cc8 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028cc4:	23ff      	movs	r3, #255	; 0xff
 8028cc6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028ccc:	4618      	mov	r0, r3
 8028cce:	3710      	adds	r7, #16
 8028cd0:	46bd      	mov	sp, r7
 8028cd2:	bd80      	pop	{r7, pc}

08028cd4 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8028cd4:	b580      	push	{r7, lr}
 8028cd6:	b082      	sub	sp, #8
 8028cd8:	af00      	add	r7, sp, #0
 8028cda:	6078      	str	r0, [r7, #4]
 8028cdc:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8028cde:	683b      	ldr	r3, [r7, #0]
 8028ce0:	2201      	movs	r2, #1
 8028ce2:	6879      	ldr	r1, [r7, #4]
 8028ce4:	2025      	movs	r0, #37	; 0x25
 8028ce6:	f7ff fe92 	bl	8028a0e <bhy2_hif_get_regs>
 8028cea:	4603      	mov	r3, r0
}
 8028cec:	4618      	mov	r0, r3
 8028cee:	3708      	adds	r7, #8
 8028cf0:	46bd      	mov	sp, r7
 8028cf2:	bd80      	pop	{r7, pc}

08028cf4 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8028cf4:	b580      	push	{r7, lr}
 8028cf6:	b082      	sub	sp, #8
 8028cf8:	af00      	add	r7, sp, #0
 8028cfa:	6078      	str	r0, [r7, #4]
 8028cfc:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8028cfe:	683b      	ldr	r3, [r7, #0]
 8028d00:	2201      	movs	r2, #1
 8028d02:	6879      	ldr	r1, [r7, #4]
 8028d04:	202d      	movs	r0, #45	; 0x2d
 8028d06:	f7ff fe82 	bl	8028a0e <bhy2_hif_get_regs>
 8028d0a:	4603      	mov	r3, r0
}
 8028d0c:	4618      	mov	r0, r3
 8028d0e:	3708      	adds	r7, #8
 8028d10:	46bd      	mov	sp, r7
 8028d12:	bd80      	pop	{r7, pc}

08028d14 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8028d14:	b580      	push	{r7, lr}
 8028d16:	b084      	sub	sp, #16
 8028d18:	af00      	add	r7, sp, #0
 8028d1a:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8028d1c:	2301      	movs	r3, #1
 8028d1e:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8028d20:	2300      	movs	r3, #0
 8028d22:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8028d24:	230f      	movs	r3, #15
 8028d26:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8028d28:	f107 010b 	add.w	r1, r7, #11
 8028d2c:	687b      	ldr	r3, [r7, #4]
 8028d2e:	2201      	movs	r2, #1
 8028d30:	2014      	movs	r0, #20
 8028d32:	f7ff fea4 	bl	8028a7e <bhy2_hif_set_regs>
 8028d36:	4603      	mov	r3, r0
 8028d38:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d3e:	2b00      	cmp	r3, #0
 8028d40:	d12b      	bne.n	8028d9a <bhy2_hif_reset+0x86>
    {
        while (count--)
 8028d42:	e01c      	b.n	8028d7e <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8028d44:	6879      	ldr	r1, [r7, #4]
 8028d46:	f242 7010 	movw	r0, #10000	; 0x2710
 8028d4a:	f7ff fed0 	bl	8028aee <bhy2_hif_delay_us>
 8028d4e:	4603      	mov	r3, r0
 8028d50:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8028d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d56:	2b00      	cmp	r3, #0
 8028d58:	d111      	bne.n	8028d7e <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8028d5a:	f107 010a 	add.w	r1, r7, #10
 8028d5e:	687b      	ldr	r3, [r7, #4]
 8028d60:	2201      	movs	r2, #1
 8028d62:	2025      	movs	r0, #37	; 0x25
 8028d64:	f7ff fe53 	bl	8028a0e <bhy2_hif_get_regs>
 8028d68:	4603      	mov	r3, r0
 8028d6a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8028d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d70:	2b00      	cmp	r3, #0
 8028d72:	d104      	bne.n	8028d7e <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8028d74:	7abb      	ldrb	r3, [r7, #10]
 8028d76:	f003 0310 	and.w	r3, r3, #16
 8028d7a:	2b00      	cmp	r3, #0
 8028d7c:	d105      	bne.n	8028d8a <bhy2_hif_reset+0x76>
        while (count--)
 8028d7e:	89bb      	ldrh	r3, [r7, #12]
 8028d80:	1e5a      	subs	r2, r3, #1
 8028d82:	81ba      	strh	r2, [r7, #12]
 8028d84:	2b00      	cmp	r3, #0
 8028d86:	d1dd      	bne.n	8028d44 <bhy2_hif_reset+0x30>
 8028d88:	e000      	b.n	8028d8c <bhy2_hif_reset+0x78>
                    {
                        break;
 8028d8a:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8028d8c:	7abb      	ldrb	r3, [r7, #10]
 8028d8e:	f003 0310 	and.w	r3, r3, #16
 8028d92:	2b00      	cmp	r3, #0
 8028d94:	d101      	bne.n	8028d9a <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8028d96:	23fb      	movs	r3, #251	; 0xfb
 8028d98:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8028d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028d9e:	4618      	mov	r0, r3
 8028da0:	3710      	adds	r7, #16
 8028da2:	46bd      	mov	sp, r7
 8028da4:	bd80      	pop	{r7, pc}

08028da6 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028da6:	b580      	push	{r7, lr}
 8028da8:	b086      	sub	sp, #24
 8028daa:	af00      	add	r7, sp, #0
 8028dac:	60f8      	str	r0, [r7, #12]
 8028dae:	60b9      	str	r1, [r7, #8]
 8028db0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8028db2:	2300      	movs	r3, #0
 8028db4:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d027      	beq.n	8028e0c <bhy2_hif_upload_firmware_to_ram+0x66>
 8028dbc:	68fb      	ldr	r3, [r7, #12]
 8028dbe:	2b00      	cmp	r3, #0
 8028dc0:	d024      	beq.n	8028e0c <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8028dc2:	68fb      	ldr	r3, [r7, #12]
 8028dc4:	781b      	ldrb	r3, [r3, #0]
 8028dc6:	b21a      	sxth	r2, r3
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	3301      	adds	r3, #1
 8028dcc:	781b      	ldrb	r3, [r3, #0]
 8028dce:	021b      	lsls	r3, r3, #8
 8028dd0:	b21b      	sxth	r3, r3
 8028dd2:	4313      	orrs	r3, r2
 8028dd4:	b21b      	sxth	r3, r3
 8028dd6:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8028dd8:	8abb      	ldrh	r3, [r7, #20]
 8028dda:	f246 622b 	movw	r2, #26155	; 0x662b
 8028dde:	4293      	cmp	r3, r2
 8028de0:	d002      	beq.n	8028de8 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8028de2:	23fc      	movs	r3, #252	; 0xfc
 8028de4:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028de6:	e014      	b.n	8028e12 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8028de8:	687b      	ldr	r3, [r7, #4]
 8028dea:	68ba      	ldr	r2, [r7, #8]
 8028dec:	68f9      	ldr	r1, [r7, #12]
 8028dee:	2002      	movs	r0, #2
 8028df0:	f7ff fe9b 	bl	8028b2a <bhy2_hif_exec_cmd>
 8028df4:	4603      	mov	r3, r0
 8028df6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8028df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	d108      	bne.n	8028e12 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e00:	6878      	ldr	r0, [r7, #4]
 8028e02:	f7ff fcf2 	bl	80287ea <bhy2_hif_check_boot_status_ram>
 8028e06:	4603      	mov	r3, r0
 8028e08:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028e0a:	e002      	b.n	8028e12 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028e0c:	23ff      	movs	r3, #255	; 0xff
 8028e0e:	75fb      	strb	r3, [r7, #23]
 8028e10:	e000      	b.n	8028e14 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8028e12:	bf00      	nop
    }

    return rslt;
 8028e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028e18:	4618      	mov	r0, r3
 8028e1a:	3718      	adds	r7, #24
 8028e1c:	46bd      	mov	sp, r7
 8028e1e:	bd80      	pop	{r7, pc}

08028e20 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8028e20:	b580      	push	{r7, lr}
 8028e22:	b084      	sub	sp, #16
 8028e24:	af00      	add	r7, sp, #0
 8028e26:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8028e28:	687b      	ldr	r3, [r7, #4]
 8028e2a:	2200      	movs	r2, #0
 8028e2c:	2100      	movs	r1, #0
 8028e2e:	2003      	movs	r0, #3
 8028e30:	f7ff fe7b 	bl	8028b2a <bhy2_hif_exec_cmd>
 8028e34:	4603      	mov	r3, r0
 8028e36:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028e3c:	2b00      	cmp	r3, #0
 8028e3e:	d104      	bne.n	8028e4a <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e40:	6878      	ldr	r0, [r7, #4]
 8028e42:	f7ff fcd2 	bl	80287ea <bhy2_hif_check_boot_status_ram>
 8028e46:	4603      	mov	r3, r0
 8028e48:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028e4e:	4618      	mov	r0, r3
 8028e50:	3710      	adds	r7, #16
 8028e52:	46bd      	mov	sp, r7
 8028e54:	bd80      	pop	{r7, pc}

08028e56 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028e56:	b580      	push	{r7, lr}
 8028e58:	b086      	sub	sp, #24
 8028e5a:	af02      	add	r7, sp, #8
 8028e5c:	60f8      	str	r0, [r7, #12]
 8028e5e:	60b9      	str	r1, [r7, #8]
 8028e60:	607a      	str	r2, [r7, #4]
 8028e62:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028e64:	69bb      	ldr	r3, [r7, #24]
 8028e66:	9301      	str	r3, [sp, #4]
 8028e68:	683b      	ldr	r3, [r7, #0]
 8028e6a:	9300      	str	r3, [sp, #0]
 8028e6c:	687b      	ldr	r3, [r7, #4]
 8028e6e:	68ba      	ldr	r2, [r7, #8]
 8028e70:	68f9      	ldr	r1, [r7, #12]
 8028e72:	2001      	movs	r0, #1
 8028e74:	f7ff fd00 	bl	8028878 <bhy2_hif_get_fifo>
 8028e78:	4603      	mov	r3, r0
}
 8028e7a:	4618      	mov	r0, r3
 8028e7c:	3710      	adds	r7, #16
 8028e7e:	46bd      	mov	sp, r7
 8028e80:	bd80      	pop	{r7, pc}

08028e82 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8028e82:	b580      	push	{r7, lr}
 8028e84:	b086      	sub	sp, #24
 8028e86:	af02      	add	r7, sp, #8
 8028e88:	60f8      	str	r0, [r7, #12]
 8028e8a:	60b9      	str	r1, [r7, #8]
 8028e8c:	607a      	str	r2, [r7, #4]
 8028e8e:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028e90:	69bb      	ldr	r3, [r7, #24]
 8028e92:	9301      	str	r3, [sp, #4]
 8028e94:	683b      	ldr	r3, [r7, #0]
 8028e96:	9300      	str	r3, [sp, #0]
 8028e98:	687b      	ldr	r3, [r7, #4]
 8028e9a:	68ba      	ldr	r2, [r7, #8]
 8028e9c:	68f9      	ldr	r1, [r7, #12]
 8028e9e:	2002      	movs	r0, #2
 8028ea0:	f7ff fcea 	bl	8028878 <bhy2_hif_get_fifo>
 8028ea4:	4603      	mov	r3, r0
}
 8028ea6:	4618      	mov	r0, r3
 8028ea8:	3710      	adds	r7, #16
 8028eaa:	46bd      	mov	sp, r7
 8028eac:	bd80      	pop	{r7, pc}

08028eae <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028eae:	b580      	push	{r7, lr}
 8028eb0:	b086      	sub	sp, #24
 8028eb2:	af00      	add	r7, sp, #0
 8028eb4:	60f8      	str	r0, [r7, #12]
 8028eb6:	60b9      	str	r1, [r7, #8]
 8028eb8:	607a      	str	r2, [r7, #4]
 8028eba:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8028ebc:	f107 0110 	add.w	r1, r7, #16
 8028ec0:	6a3b      	ldr	r3, [r7, #32]
 8028ec2:	2204      	movs	r2, #4
 8028ec4:	2003      	movs	r0, #3
 8028ec6:	f7ff fda2 	bl	8028a0e <bhy2_hif_get_regs>
 8028eca:	4603      	mov	r3, r0
 8028ecc:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8028ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d130      	bne.n	8028f38 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8028ed6:	7c3b      	ldrb	r3, [r7, #16]
 8028ed8:	b21a      	sxth	r2, r3
 8028eda:	f107 0310 	add.w	r3, r7, #16
 8028ede:	3301      	adds	r3, #1
 8028ee0:	781b      	ldrb	r3, [r3, #0]
 8028ee2:	021b      	lsls	r3, r3, #8
 8028ee4:	b21b      	sxth	r3, r3
 8028ee6:	4313      	orrs	r3, r2
 8028ee8:	b21b      	sxth	r3, r3
 8028eea:	b29a      	uxth	r2, r3
 8028eec:	68fb      	ldr	r3, [r7, #12]
 8028eee:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8028ef0:	7cbb      	ldrb	r3, [r7, #18]
 8028ef2:	b21a      	sxth	r2, r3
 8028ef4:	f107 0310 	add.w	r3, r7, #16
 8028ef8:	3302      	adds	r3, #2
 8028efa:	3301      	adds	r3, #1
 8028efc:	781b      	ldrb	r3, [r3, #0]
 8028efe:	021b      	lsls	r3, r3, #8
 8028f00:	b21b      	sxth	r3, r3
 8028f02:	4313      	orrs	r3, r2
 8028f04:	b21b      	sxth	r3, r3
 8028f06:	b29b      	uxth	r3, r3
 8028f08:	461a      	mov	r2, r3
 8028f0a:	683b      	ldr	r3, [r7, #0]
 8028f0c:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8028f0e:	683b      	ldr	r3, [r7, #0]
 8028f10:	681b      	ldr	r3, [r3, #0]
 8028f12:	2b00      	cmp	r3, #0
 8028f14:	d010      	beq.n	8028f38 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8028f16:	683b      	ldr	r3, [r7, #0]
 8028f18:	681b      	ldr	r3, [r3, #0]
 8028f1a:	687a      	ldr	r2, [r7, #4]
 8028f1c:	429a      	cmp	r2, r3
 8028f1e:	d202      	bcs.n	8028f26 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8028f20:	23fa      	movs	r3, #250	; 0xfa
 8028f22:	75fb      	strb	r3, [r7, #23]
 8028f24:	e008      	b.n	8028f38 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8028f26:	683b      	ldr	r3, [r7, #0]
 8028f28:	681a      	ldr	r2, [r3, #0]
 8028f2a:	6a3b      	ldr	r3, [r7, #32]
 8028f2c:	68b9      	ldr	r1, [r7, #8]
 8028f2e:	2003      	movs	r0, #3
 8028f30:	f7ff fd6d 	bl	8028a0e <bhy2_hif_get_regs>
 8028f34:	4603      	mov	r3, r0
 8028f36:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8028f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028f3c:	4618      	mov	r0, r3
 8028f3e:	3718      	adds	r7, #24
 8028f40:	46bd      	mov	sp, r7
 8028f42:	bd80      	pop	{r7, pc}

08028f44 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8028f44:	b580      	push	{r7, lr}
 8028f46:	b086      	sub	sp, #24
 8028f48:	af02      	add	r7, sp, #8
 8028f4a:	60f8      	str	r0, [r7, #12]
 8028f4c:	60b9      	str	r1, [r7, #8]
 8028f4e:	607a      	str	r2, [r7, #4]
 8028f50:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028f52:	69bb      	ldr	r3, [r7, #24]
 8028f54:	9301      	str	r3, [sp, #4]
 8028f56:	683b      	ldr	r3, [r7, #0]
 8028f58:	9300      	str	r3, [sp, #0]
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	68ba      	ldr	r2, [r7, #8]
 8028f5e:	68f9      	ldr	r1, [r7, #12]
 8028f60:	2003      	movs	r0, #3
 8028f62:	f7ff fc89 	bl	8028878 <bhy2_hif_get_fifo>
 8028f66:	4603      	mov	r3, r0
}
 8028f68:	4618      	mov	r0, r3
 8028f6a:	3710      	adds	r7, #16
 8028f6c:	46bd      	mov	sp, r7
 8028f6e:	bd80      	pop	{r7, pc}

08028f70 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8028f70:	b580      	push	{r7, lr}
 8028f72:	b088      	sub	sp, #32
 8028f74:	af00      	add	r7, sp, #0
 8028f76:	4603      	mov	r3, r0
 8028f78:	ed87 0a02 	vstr	s0, [r7, #8]
 8028f7c:	6079      	str	r1, [r7, #4]
 8028f7e:	603a      	str	r2, [r7, #0]
 8028f80:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 8028f82:	68bb      	ldr	r3, [r7, #8]
 8028f84:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8028f86:	7bfb      	ldrb	r3, [r7, #15]
 8028f88:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8028f8a:	697b      	ldr	r3, [r7, #20]
 8028f8c:	b2db      	uxtb	r3, r3
 8028f8e:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8028f90:	697b      	ldr	r3, [r7, #20]
 8028f92:	0a1b      	lsrs	r3, r3, #8
 8028f94:	b2db      	uxtb	r3, r3
 8028f96:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8028f98:	697b      	ldr	r3, [r7, #20]
 8028f9a:	0c1b      	lsrs	r3, r3, #16
 8028f9c:	b2db      	uxtb	r3, r3
 8028f9e:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8028fa0:	697b      	ldr	r3, [r7, #20]
 8028fa2:	0e1b      	lsrs	r3, r3, #24
 8028fa4:	b2db      	uxtb	r3, r3
 8028fa6:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8028fa8:	687b      	ldr	r3, [r7, #4]
 8028faa:	b2db      	uxtb	r3, r3
 8028fac:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	0a1b      	lsrs	r3, r3, #8
 8028fb2:	b2db      	uxtb	r3, r3
 8028fb4:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	0c1b      	lsrs	r3, r3, #16
 8028fba:	b2db      	uxtb	r3, r3
 8028fbc:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8028fbe:	f107 0118 	add.w	r1, r7, #24
 8028fc2:	683b      	ldr	r3, [r7, #0]
 8028fc4:	2208      	movs	r2, #8
 8028fc6:	200d      	movs	r0, #13
 8028fc8:	f7ff fdaf 	bl	8028b2a <bhy2_hif_exec_cmd>
 8028fcc:	4603      	mov	r3, r0
}
 8028fce:	4618      	mov	r0, r3
 8028fd0:	3720      	adds	r7, #32
 8028fd2:	46bd      	mov	sp, r7
 8028fd4:	bd80      	pop	{r7, pc}

08028fd6 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8028fd6:	b580      	push	{r7, lr}
 8028fd8:	b090      	sub	sp, #64	; 0x40
 8028fda:	af02      	add	r7, sp, #8
 8028fdc:	4603      	mov	r3, r0
 8028fde:	60b9      	str	r1, [r7, #8]
 8028fe0:	607a      	str	r2, [r7, #4]
 8028fe2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 8028fe4:	68bb      	ldr	r3, [r7, #8]
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	f000 80da 	beq.w	80291a0 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 8028fec:	7bfb      	ldrb	r3, [r7, #15]
 8028fee:	2bf5      	cmp	r3, #245	; 0xf5
 8028ff0:	d903      	bls.n	8028ffa <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028ff2:	23fe      	movs	r3, #254	; 0xfe
 8028ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8028ff8:	e0d5      	b.n	80291a6 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 8028ffa:	7bfb      	ldrb	r3, [r7, #15]
 8028ffc:	b29b      	uxth	r3, r3
 8028ffe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8029002:	b298      	uxth	r0, r3
 8029004:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029008:	f107 0114 	add.w	r1, r7, #20
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	9300      	str	r3, [sp, #0]
 8029010:	4613      	mov	r3, r2
 8029012:	221c      	movs	r2, #28
 8029014:	f7ff fda2 	bl	8028b5c <bhy2_hif_get_parameter>
 8029018:	4603      	mov	r3, r0
 802901a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802901e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8029022:	2b00      	cmp	r3, #0
 8029024:	f040 80bf 	bne.w	80291a6 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8029028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802902a:	2b1c      	cmp	r3, #28
 802902c:	d003      	beq.n	8029036 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802902e:	23fe      	movs	r3, #254	; 0xfe
 8029030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8029034:	e0b7      	b.n	80291a6 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 8029036:	7d3a      	ldrb	r2, [r7, #20]
 8029038:	68bb      	ldr	r3, [r7, #8]
 802903a:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802903c:	7d7a      	ldrb	r2, [r7, #21]
 802903e:	68bb      	ldr	r3, [r7, #8]
 8029040:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 8029042:	7dba      	ldrb	r2, [r7, #22]
 8029044:	68bb      	ldr	r3, [r7, #8]
 8029046:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8029048:	7dfa      	ldrb	r2, [r7, #23]
 802904a:	68bb      	ldr	r3, [r7, #8]
 802904c:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802904e:	7e3a      	ldrb	r2, [r7, #24]
 8029050:	68bb      	ldr	r3, [r7, #8]
 8029052:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8029054:	7e7a      	ldrb	r2, [r7, #25]
 8029056:	68bb      	ldr	r3, [r7, #8]
 8029058:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802905a:	7eba      	ldrb	r2, [r7, #26]
 802905c:	68bb      	ldr	r3, [r7, #8]
 802905e:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 8029060:	7efa      	ldrb	r2, [r7, #27]
 8029062:	68bb      	ldr	r3, [r7, #8]
 8029064:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8029066:	7f3a      	ldrb	r2, [r7, #28]
 8029068:	68bb      	ldr	r3, [r7, #8]
 802906a:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802906c:	7f7a      	ldrb	r2, [r7, #29]
 802906e:	68bb      	ldr	r3, [r7, #8]
 8029070:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 8029072:	7fba      	ldrb	r2, [r7, #30]
 8029074:	68bb      	ldr	r3, [r7, #8]
 8029076:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8029078:	7ffa      	ldrb	r2, [r7, #31]
 802907a:	68bb      	ldr	r3, [r7, #8]
 802907c:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802907e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8029082:	68bb      	ldr	r3, [r7, #8]
 8029084:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8029086:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802908a:	68bb      	ldr	r3, [r7, #8]
 802908c:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802908e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8029092:	68bb      	ldr	r3, [r7, #8]
 8029094:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8029096:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802909a:	68bb      	ldr	r3, [r7, #8]
 802909c:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802909e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80290a2:	68bb      	ldr	r3, [r7, #8]
 80290a4:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 80290a6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80290aa:	68bb      	ldr	r3, [r7, #8]
 80290ac:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 80290ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80290b2:	68bb      	ldr	r3, [r7, #8]
 80290b4:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 80290b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80290ba:	68bb      	ldr	r3, [r7, #8]
 80290bc:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 80290be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80290c2:	68bb      	ldr	r3, [r7, #8]
 80290c4:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 80290c6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80290ca:	68bb      	ldr	r3, [r7, #8]
 80290cc:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 80290ce:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80290d2:	68bb      	ldr	r3, [r7, #8]
 80290d4:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 80290d6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80290da:	68bb      	ldr	r3, [r7, #8]
 80290dc:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 80290de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80290e2:	68bb      	ldr	r3, [r7, #8]
 80290e4:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 80290e6:	68bb      	ldr	r3, [r7, #8]
 80290e8:	791b      	ldrb	r3, [r3, #4]
 80290ea:	b21a      	sxth	r2, r3
 80290ec:	68bb      	ldr	r3, [r7, #8]
 80290ee:	795b      	ldrb	r3, [r3, #5]
 80290f0:	021b      	lsls	r3, r3, #8
 80290f2:	b21b      	sxth	r3, r3
 80290f4:	4313      	orrs	r3, r2
 80290f6:	b21b      	sxth	r3, r3
 80290f8:	b29a      	uxth	r2, r3
 80290fa:	68bb      	ldr	r3, [r7, #8]
 80290fc:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 80290fe:	68bb      	ldr	r3, [r7, #8]
 8029100:	799b      	ldrb	r3, [r3, #6]
 8029102:	b21a      	sxth	r2, r3
 8029104:	68bb      	ldr	r3, [r7, #8]
 8029106:	79db      	ldrb	r3, [r3, #7]
 8029108:	021b      	lsls	r3, r3, #8
 802910a:	b21b      	sxth	r3, r3
 802910c:	4313      	orrs	r3, r2
 802910e:	b21b      	sxth	r3, r3
 8029110:	b29a      	uxth	r2, r3
 8029112:	68bb      	ldr	r3, [r7, #8]
 8029114:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 8029116:	68bb      	ldr	r3, [r7, #8]
 8029118:	7a1b      	ldrb	r3, [r3, #8]
 802911a:	461a      	mov	r2, r3
 802911c:	68bb      	ldr	r3, [r7, #8]
 802911e:	7a5b      	ldrb	r3, [r3, #9]
 8029120:	021b      	lsls	r3, r3, #8
 8029122:	431a      	orrs	r2, r3
 8029124:	68bb      	ldr	r3, [r7, #8]
 8029126:	7a9b      	ldrb	r3, [r3, #10]
 8029128:	041b      	lsls	r3, r3, #16
 802912a:	431a      	orrs	r2, r3
 802912c:	68bb      	ldr	r3, [r7, #8]
 802912e:	7adb      	ldrb	r3, [r3, #11]
 8029130:	061b      	lsls	r3, r3, #24
 8029132:	431a      	orrs	r2, r3
 8029134:	68bb      	ldr	r3, [r7, #8]
 8029136:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 8029138:	68bb      	ldr	r3, [r7, #8]
 802913a:	7b1b      	ldrb	r3, [r3, #12]
 802913c:	461a      	mov	r2, r3
 802913e:	68bb      	ldr	r3, [r7, #8]
 8029140:	7b5b      	ldrb	r3, [r3, #13]
 8029142:	021b      	lsls	r3, r3, #8
 8029144:	431a      	orrs	r2, r3
 8029146:	68bb      	ldr	r3, [r7, #8]
 8029148:	7b9b      	ldrb	r3, [r3, #14]
 802914a:	041b      	lsls	r3, r3, #16
 802914c:	431a      	orrs	r2, r3
 802914e:	68bb      	ldr	r3, [r7, #8]
 8029150:	7bdb      	ldrb	r3, [r3, #15]
 8029152:	061b      	lsls	r3, r3, #24
 8029154:	431a      	orrs	r2, r3
 8029156:	68bb      	ldr	r3, [r7, #8]
 8029158:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802915a:	68bb      	ldr	r3, [r7, #8]
 802915c:	7c1b      	ldrb	r3, [r3, #16]
 802915e:	461a      	mov	r2, r3
 8029160:	68bb      	ldr	r3, [r7, #8]
 8029162:	7c5b      	ldrb	r3, [r3, #17]
 8029164:	021b      	lsls	r3, r3, #8
 8029166:	431a      	orrs	r2, r3
 8029168:	68bb      	ldr	r3, [r7, #8]
 802916a:	7c9b      	ldrb	r3, [r3, #18]
 802916c:	041b      	lsls	r3, r3, #16
 802916e:	431a      	orrs	r2, r3
 8029170:	68bb      	ldr	r3, [r7, #8]
 8029172:	7cdb      	ldrb	r3, [r3, #19]
 8029174:	061b      	lsls	r3, r3, #24
 8029176:	431a      	orrs	r2, r3
 8029178:	68bb      	ldr	r3, [r7, #8]
 802917a:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802917c:	68bb      	ldr	r3, [r7, #8]
 802917e:	7e1b      	ldrb	r3, [r3, #24]
 8029180:	461a      	mov	r2, r3
 8029182:	68bb      	ldr	r3, [r7, #8]
 8029184:	7e5b      	ldrb	r3, [r3, #25]
 8029186:	021b      	lsls	r3, r3, #8
 8029188:	431a      	orrs	r2, r3
 802918a:	68bb      	ldr	r3, [r7, #8]
 802918c:	7e9b      	ldrb	r3, [r3, #26]
 802918e:	041b      	lsls	r3, r3, #16
 8029190:	431a      	orrs	r2, r3
 8029192:	68bb      	ldr	r3, [r7, #8]
 8029194:	7edb      	ldrb	r3, [r3, #27]
 8029196:	061b      	lsls	r3, r3, #24
 8029198:	431a      	orrs	r2, r3
 802919a:	68bb      	ldr	r3, [r7, #8]
 802919c:	619a      	str	r2, [r3, #24]
 802919e:	e002      	b.n	80291a6 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80291a0:	23ff      	movs	r3, #255	; 0xff
 80291a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 80291a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80291aa:	4618      	mov	r0, r3
 80291ac:	3738      	adds	r7, #56	; 0x38
 80291ae:	46bd      	mov	sp, r7
 80291b0:	bd80      	pop	{r7, pc}

080291b2 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 80291b2:	b480      	push	{r7}
 80291b4:	b083      	sub	sp, #12
 80291b6:	af00      	add	r7, sp, #0
 80291b8:	6078      	str	r0, [r7, #4]
 80291ba:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	781b      	ldrb	r3, [r3, #0]
 80291c0:	b21a      	sxth	r2, r3
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	3301      	adds	r3, #1
 80291c6:	781b      	ldrb	r3, [r3, #0]
 80291c8:	021b      	lsls	r3, r3, #8
 80291ca:	b21b      	sxth	r3, r3
 80291cc:	4313      	orrs	r3, r2
 80291ce:	b21a      	sxth	r2, r3
 80291d0:	683b      	ldr	r3, [r7, #0]
 80291d2:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 80291d4:	687b      	ldr	r3, [r7, #4]
 80291d6:	3302      	adds	r3, #2
 80291d8:	781b      	ldrb	r3, [r3, #0]
 80291da:	b21a      	sxth	r2, r3
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	3303      	adds	r3, #3
 80291e0:	781b      	ldrb	r3, [r3, #0]
 80291e2:	021b      	lsls	r3, r3, #8
 80291e4:	b21b      	sxth	r3, r3
 80291e6:	4313      	orrs	r3, r2
 80291e8:	b21a      	sxth	r2, r3
 80291ea:	683b      	ldr	r3, [r7, #0]
 80291ec:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	3304      	adds	r3, #4
 80291f2:	781b      	ldrb	r3, [r3, #0]
 80291f4:	b21a      	sxth	r2, r3
 80291f6:	687b      	ldr	r3, [r7, #4]
 80291f8:	3305      	adds	r3, #5
 80291fa:	781b      	ldrb	r3, [r3, #0]
 80291fc:	021b      	lsls	r3, r3, #8
 80291fe:	b21b      	sxth	r3, r3
 8029200:	4313      	orrs	r3, r2
 8029202:	b21a      	sxth	r2, r3
 8029204:	683b      	ldr	r3, [r7, #0]
 8029206:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	3306      	adds	r3, #6
 802920c:	781b      	ldrb	r3, [r3, #0]
 802920e:	b21a      	sxth	r2, r3
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	3307      	adds	r3, #7
 8029214:	781b      	ldrb	r3, [r3, #0]
 8029216:	021b      	lsls	r3, r3, #8
 8029218:	b21b      	sxth	r3, r3
 802921a:	4313      	orrs	r3, r2
 802921c:	b21a      	sxth	r2, r3
 802921e:	683b      	ldr	r3, [r7, #0]
 8029220:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 8029222:	687b      	ldr	r3, [r7, #4]
 8029224:	3308      	adds	r3, #8
 8029226:	781b      	ldrb	r3, [r3, #0]
 8029228:	b21a      	sxth	r2, r3
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	3309      	adds	r3, #9
 802922e:	781b      	ldrb	r3, [r3, #0]
 8029230:	021b      	lsls	r3, r3, #8
 8029232:	b21b      	sxth	r3, r3
 8029234:	4313      	orrs	r3, r2
 8029236:	b21b      	sxth	r3, r3
 8029238:	b29a      	uxth	r2, r3
 802923a:	683b      	ldr	r3, [r7, #0]
 802923c:	811a      	strh	r2, [r3, #8]
}
 802923e:	bf00      	nop
 8029240:	370c      	adds	r7, #12
 8029242:	46bd      	mov	sp, r7
 8029244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029248:	4770      	bx	lr
	...

0802924c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802924c:	b580      	push	{r7, lr}
 802924e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8029250:	4b12      	ldr	r3, [pc, #72]	; (802929c <MX_COMP2_Init+0x50>)
 8029252:	4a13      	ldr	r2, [pc, #76]	; (80292a0 <MX_COMP2_Init+0x54>)
 8029254:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8029256:	4b11      	ldr	r3, [pc, #68]	; (802929c <MX_COMP2_Init+0x50>)
 8029258:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802925c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802925e:	4b0f      	ldr	r3, [pc, #60]	; (802929c <MX_COMP2_Init+0x50>)
 8029260:	2200      	movs	r2, #0
 8029262:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8029264:	4b0d      	ldr	r3, [pc, #52]	; (802929c <MX_COMP2_Init+0x50>)
 8029266:	2200      	movs	r2, #0
 8029268:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802926a:	4b0c      	ldr	r3, [pc, #48]	; (802929c <MX_COMP2_Init+0x50>)
 802926c:	2200      	movs	r2, #0
 802926e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8029270:	4b0a      	ldr	r3, [pc, #40]	; (802929c <MX_COMP2_Init+0x50>)
 8029272:	2200      	movs	r2, #0
 8029274:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8029276:	4b09      	ldr	r3, [pc, #36]	; (802929c <MX_COMP2_Init+0x50>)
 8029278:	2200      	movs	r2, #0
 802927a:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802927c:	4b07      	ldr	r3, [pc, #28]	; (802929c <MX_COMP2_Init+0x50>)
 802927e:	2200      	movs	r2, #0
 8029280:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8029282:	4b06      	ldr	r3, [pc, #24]	; (802929c <MX_COMP2_Init+0x50>)
 8029284:	2231      	movs	r2, #49	; 0x31
 8029286:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8029288:	4804      	ldr	r0, [pc, #16]	; (802929c <MX_COMP2_Init+0x50>)
 802928a:	f001 fd1f 	bl	802accc <HAL_COMP_Init>
 802928e:	4603      	mov	r3, r0
 8029290:	2b00      	cmp	r3, #0
 8029292:	d001      	beq.n	8029298 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8029294:	f000 fc28 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8029298:	bf00      	nop
 802929a:	bd80      	pop	{r7, pc}
 802929c:	24024518 	.word	0x24024518
 80292a0:	58003810 	.word	0x58003810

080292a4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80292a4:	b580      	push	{r7, lr}
 80292a6:	b08a      	sub	sp, #40	; 0x28
 80292a8:	af00      	add	r7, sp, #0
 80292aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80292ac:	f107 0314 	add.w	r3, r7, #20
 80292b0:	2200      	movs	r2, #0
 80292b2:	601a      	str	r2, [r3, #0]
 80292b4:	605a      	str	r2, [r3, #4]
 80292b6:	609a      	str	r2, [r3, #8]
 80292b8:	60da      	str	r2, [r3, #12]
 80292ba:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 80292bc:	687b      	ldr	r3, [r7, #4]
 80292be:	681b      	ldr	r3, [r3, #0]
 80292c0:	4a1c      	ldr	r2, [pc, #112]	; (8029334 <HAL_COMP_MspInit+0x90>)
 80292c2:	4293      	cmp	r3, r2
 80292c4:	d132      	bne.n	802932c <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80292c6:	4b1c      	ldr	r3, [pc, #112]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80292cc:	4a1a      	ldr	r2, [pc, #104]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80292d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80292d6:	4b18      	ldr	r3, [pc, #96]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80292dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80292e0:	613b      	str	r3, [r7, #16]
 80292e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80292e4:	4b14      	ldr	r3, [pc, #80]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292ea:	4a13      	ldr	r2, [pc, #76]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292ec:	f043 0310 	orr.w	r3, r3, #16
 80292f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80292f4:	4b10      	ldr	r3, [pc, #64]	; (8029338 <HAL_COMP_MspInit+0x94>)
 80292f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292fa:	f003 0310 	and.w	r3, r3, #16
 80292fe:	60fb      	str	r3, [r7, #12]
 8029300:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8029302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8029306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8029308:	2303      	movs	r3, #3
 802930a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802930c:	2300      	movs	r3, #0
 802930e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029310:	f107 0314 	add.w	r3, r7, #20
 8029314:	4619      	mov	r1, r3
 8029316:	4809      	ldr	r0, [pc, #36]	; (802933c <HAL_COMP_MspInit+0x98>)
 8029318:	f004 ffee 	bl	802e2f8 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 802931c:	2200      	movs	r2, #0
 802931e:	2104      	movs	r1, #4
 8029320:	2089      	movs	r0, #137	; 0x89
 8029322:	f001 ff96 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8029326:	2089      	movs	r0, #137	; 0x89
 8029328:	f001 ffad 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802932c:	bf00      	nop
 802932e:	3728      	adds	r7, #40	; 0x28
 8029330:	46bd      	mov	sp, r7
 8029332:	bd80      	pop	{r7, pc}
 8029334:	58003810 	.word	0x58003810
 8029338:	58024400 	.word	0x58024400
 802933c:	58021000 	.word	0x58021000

08029340 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8029340:	b580      	push	{r7, lr}
 8029342:	b08a      	sub	sp, #40	; 0x28
 8029344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8029346:	1d3b      	adds	r3, r7, #4
 8029348:	2224      	movs	r2, #36	; 0x24
 802934a:	2100      	movs	r1, #0
 802934c:	4618      	mov	r0, r3
 802934e:	f012 fd8d 	bl	803be6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8029352:	4b12      	ldr	r3, [pc, #72]	; (802939c <MX_DAC1_Init+0x5c>)
 8029354:	4a12      	ldr	r2, [pc, #72]	; (80293a0 <MX_DAC1_Init+0x60>)
 8029356:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8029358:	4810      	ldr	r0, [pc, #64]	; (802939c <MX_DAC1_Init+0x5c>)
 802935a:	f001 ffae 	bl	802b2ba <HAL_DAC_Init>
 802935e:	4603      	mov	r3, r0
 8029360:	2b00      	cmp	r3, #0
 8029362:	d001      	beq.n	8029368 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8029364:	f000 fbc0 	bl	8029ae8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8029368:	2300      	movs	r3, #0
 802936a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802936c:	2300      	movs	r3, #0
 802936e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8029370:	2302      	movs	r3, #2
 8029372:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8029374:	2302      	movs	r3, #2
 8029376:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8029378:	2300      	movs	r3, #0
 802937a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802937c:	1d3b      	adds	r3, r7, #4
 802937e:	2200      	movs	r2, #0
 8029380:	4619      	mov	r1, r3
 8029382:	4806      	ldr	r0, [pc, #24]	; (802939c <MX_DAC1_Init+0x5c>)
 8029384:	f002 f832 	bl	802b3ec <HAL_DAC_ConfigChannel>
 8029388:	4603      	mov	r3, r0
 802938a:	2b00      	cmp	r3, #0
 802938c:	d001      	beq.n	8029392 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802938e:	f000 fbab 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8029392:	bf00      	nop
 8029394:	3728      	adds	r7, #40	; 0x28
 8029396:	46bd      	mov	sp, r7
 8029398:	bd80      	pop	{r7, pc}
 802939a:	bf00      	nop
 802939c:	24024544 	.word	0x24024544
 80293a0:	40007400 	.word	0x40007400

080293a4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80293a4:	b480      	push	{r7}
 80293a6:	b085      	sub	sp, #20
 80293a8:	af00      	add	r7, sp, #0
 80293aa:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	681b      	ldr	r3, [r3, #0]
 80293b0:	4a0b      	ldr	r2, [pc, #44]	; (80293e0 <HAL_DAC_MspInit+0x3c>)
 80293b2:	4293      	cmp	r3, r2
 80293b4:	d10e      	bne.n	80293d4 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80293b6:	4b0b      	ldr	r3, [pc, #44]	; (80293e4 <HAL_DAC_MspInit+0x40>)
 80293b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80293bc:	4a09      	ldr	r2, [pc, #36]	; (80293e4 <HAL_DAC_MspInit+0x40>)
 80293be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80293c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80293c6:	4b07      	ldr	r3, [pc, #28]	; (80293e4 <HAL_DAC_MspInit+0x40>)
 80293c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80293cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80293d0:	60fb      	str	r3, [r7, #12]
 80293d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80293d4:	bf00      	nop
 80293d6:	3714      	adds	r7, #20
 80293d8:	46bd      	mov	sp, r7
 80293da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293de:	4770      	bx	lr
 80293e0:	40007400 	.word	0x40007400
 80293e4:	58024400 	.word	0x58024400

080293e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80293e8:	b580      	push	{r7, lr}
 80293ea:	b082      	sub	sp, #8
 80293ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80293ee:	4b19      	ldr	r3, [pc, #100]	; (8029454 <MX_DMA_Init+0x6c>)
 80293f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80293f4:	4a17      	ldr	r2, [pc, #92]	; (8029454 <MX_DMA_Init+0x6c>)
 80293f6:	f043 0301 	orr.w	r3, r3, #1
 80293fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80293fe:	4b15      	ldr	r3, [pc, #84]	; (8029454 <MX_DMA_Init+0x6c>)
 8029400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029404:	f003 0301 	and.w	r3, r3, #1
 8029408:	607b      	str	r3, [r7, #4]
 802940a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802940c:	2200      	movs	r2, #0
 802940e:	2100      	movs	r1, #0
 8029410:	200b      	movs	r0, #11
 8029412:	f001 ff1e 	bl	802b252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8029416:	200b      	movs	r0, #11
 8029418:	f001 ff35 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802941c:	2200      	movs	r2, #0
 802941e:	2100      	movs	r1, #0
 8029420:	200c      	movs	r0, #12
 8029422:	f001 ff16 	bl	802b252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8029426:	200c      	movs	r0, #12
 8029428:	f001 ff2d 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802942c:	2200      	movs	r2, #0
 802942e:	2100      	movs	r1, #0
 8029430:	200f      	movs	r0, #15
 8029432:	f001 ff0e 	bl	802b252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8029436:	200f      	movs	r0, #15
 8029438:	f001 ff25 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802943c:	2200      	movs	r2, #0
 802943e:	2100      	movs	r1, #0
 8029440:	2010      	movs	r0, #16
 8029442:	f001 ff06 	bl	802b252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8029446:	2010      	movs	r0, #16
 8029448:	f001 ff1d 	bl	802b286 <HAL_NVIC_EnableIRQ>

}
 802944c:	bf00      	nop
 802944e:	3708      	adds	r7, #8
 8029450:	46bd      	mov	sp, r7
 8029452:	bd80      	pop	{r7, pc}
 8029454:	58024400 	.word	0x58024400

08029458 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8029458:	b580      	push	{r7, lr}
 802945a:	b08a      	sub	sp, #40	; 0x28
 802945c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802945e:	f107 0314 	add.w	r3, r7, #20
 8029462:	2200      	movs	r2, #0
 8029464:	601a      	str	r2, [r3, #0]
 8029466:	605a      	str	r2, [r3, #4]
 8029468:	609a      	str	r2, [r3, #8]
 802946a:	60da      	str	r2, [r3, #12]
 802946c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802946e:	4b3b      	ldr	r3, [pc, #236]	; (802955c <MX_GPIO_Init+0x104>)
 8029470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029474:	4a39      	ldr	r2, [pc, #228]	; (802955c <MX_GPIO_Init+0x104>)
 8029476:	f043 0304 	orr.w	r3, r3, #4
 802947a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802947e:	4b37      	ldr	r3, [pc, #220]	; (802955c <MX_GPIO_Init+0x104>)
 8029480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029484:	f003 0304 	and.w	r3, r3, #4
 8029488:	613b      	str	r3, [r7, #16]
 802948a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802948c:	4b33      	ldr	r3, [pc, #204]	; (802955c <MX_GPIO_Init+0x104>)
 802948e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029492:	4a32      	ldr	r2, [pc, #200]	; (802955c <MX_GPIO_Init+0x104>)
 8029494:	f043 0301 	orr.w	r3, r3, #1
 8029498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802949c:	4b2f      	ldr	r3, [pc, #188]	; (802955c <MX_GPIO_Init+0x104>)
 802949e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294a2:	f003 0301 	and.w	r3, r3, #1
 80294a6:	60fb      	str	r3, [r7, #12]
 80294a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80294aa:	4b2c      	ldr	r3, [pc, #176]	; (802955c <MX_GPIO_Init+0x104>)
 80294ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294b0:	4a2a      	ldr	r2, [pc, #168]	; (802955c <MX_GPIO_Init+0x104>)
 80294b2:	f043 0310 	orr.w	r3, r3, #16
 80294b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294ba:	4b28      	ldr	r3, [pc, #160]	; (802955c <MX_GPIO_Init+0x104>)
 80294bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294c0:	f003 0310 	and.w	r3, r3, #16
 80294c4:	60bb      	str	r3, [r7, #8]
 80294c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80294c8:	4b24      	ldr	r3, [pc, #144]	; (802955c <MX_GPIO_Init+0x104>)
 80294ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294ce:	4a23      	ldr	r2, [pc, #140]	; (802955c <MX_GPIO_Init+0x104>)
 80294d0:	f043 0302 	orr.w	r3, r3, #2
 80294d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294d8:	4b20      	ldr	r3, [pc, #128]	; (802955c <MX_GPIO_Init+0x104>)
 80294da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294de:	f003 0302 	and.w	r3, r3, #2
 80294e2:	607b      	str	r3, [r7, #4]
 80294e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80294e6:	4b1d      	ldr	r3, [pc, #116]	; (802955c <MX_GPIO_Init+0x104>)
 80294e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294ec:	4a1b      	ldr	r2, [pc, #108]	; (802955c <MX_GPIO_Init+0x104>)
 80294ee:	f043 0308 	orr.w	r3, r3, #8
 80294f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294f6:	4b19      	ldr	r3, [pc, #100]	; (802955c <MX_GPIO_Init+0x104>)
 80294f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294fc:	f003 0308 	and.w	r3, r3, #8
 8029500:	603b      	str	r3, [r7, #0]
 8029502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8029504:	2200      	movs	r2, #0
 8029506:	2101      	movs	r1, #1
 8029508:	4815      	ldr	r0, [pc, #84]	; (8029560 <MX_GPIO_Init+0x108>)
 802950a:	f005 f8a5 	bl	802e658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802950e:	2200      	movs	r2, #0
 8029510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8029514:	4813      	ldr	r0, [pc, #76]	; (8029564 <MX_GPIO_Init+0x10c>)
 8029516:	f005 f89f 	bl	802e658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802951a:	2301      	movs	r3, #1
 802951c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802951e:	2301      	movs	r3, #1
 8029520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029522:	2302      	movs	r3, #2
 8029524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029526:	2303      	movs	r3, #3
 8029528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802952a:	f107 0314 	add.w	r3, r7, #20
 802952e:	4619      	mov	r1, r3
 8029530:	480b      	ldr	r0, [pc, #44]	; (8029560 <MX_GPIO_Init+0x108>)
 8029532:	f004 fee1 	bl	802e2f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8029536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802953a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802953c:	2301      	movs	r3, #1
 802953e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029540:	2302      	movs	r3, #2
 8029542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029544:	2303      	movs	r3, #3
 8029546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8029548:	f107 0314 	add.w	r3, r7, #20
 802954c:	4619      	mov	r1, r3
 802954e:	4805      	ldr	r0, [pc, #20]	; (8029564 <MX_GPIO_Init+0x10c>)
 8029550:	f004 fed2 	bl	802e2f8 <HAL_GPIO_Init>

}
 8029554:	bf00      	nop
 8029556:	3728      	adds	r7, #40	; 0x28
 8029558:	46bd      	mov	sp, r7
 802955a:	bd80      	pop	{r7, pc}
 802955c:	58024400 	.word	0x58024400
 8029560:	58020800 	.word	0x58020800
 8029564:	58021000 	.word	0x58021000

08029568 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8029568:	b580      	push	{r7, lr}
 802956a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802956c:	4b1b      	ldr	r3, [pc, #108]	; (80295dc <MX_I2C2_Init+0x74>)
 802956e:	4a1c      	ldr	r2, [pc, #112]	; (80295e0 <MX_I2C2_Init+0x78>)
 8029570:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8029572:	4b1a      	ldr	r3, [pc, #104]	; (80295dc <MX_I2C2_Init+0x74>)
 8029574:	4a1b      	ldr	r2, [pc, #108]	; (80295e4 <MX_I2C2_Init+0x7c>)
 8029576:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8029578:	4b18      	ldr	r3, [pc, #96]	; (80295dc <MX_I2C2_Init+0x74>)
 802957a:	2200      	movs	r2, #0
 802957c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802957e:	4b17      	ldr	r3, [pc, #92]	; (80295dc <MX_I2C2_Init+0x74>)
 8029580:	2201      	movs	r2, #1
 8029582:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8029584:	4b15      	ldr	r3, [pc, #84]	; (80295dc <MX_I2C2_Init+0x74>)
 8029586:	2200      	movs	r2, #0
 8029588:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802958a:	4b14      	ldr	r3, [pc, #80]	; (80295dc <MX_I2C2_Init+0x74>)
 802958c:	2200      	movs	r2, #0
 802958e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8029590:	4b12      	ldr	r3, [pc, #72]	; (80295dc <MX_I2C2_Init+0x74>)
 8029592:	2200      	movs	r2, #0
 8029594:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8029596:	4b11      	ldr	r3, [pc, #68]	; (80295dc <MX_I2C2_Init+0x74>)
 8029598:	2200      	movs	r2, #0
 802959a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802959c:	4b0f      	ldr	r3, [pc, #60]	; (80295dc <MX_I2C2_Init+0x74>)
 802959e:	2200      	movs	r2, #0
 80295a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80295a2:	480e      	ldr	r0, [pc, #56]	; (80295dc <MX_I2C2_Init+0x74>)
 80295a4:	f005 f872 	bl	802e68c <HAL_I2C_Init>
 80295a8:	4603      	mov	r3, r0
 80295aa:	2b00      	cmp	r3, #0
 80295ac:	d001      	beq.n	80295b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80295ae:	f000 fa9b 	bl	8029ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80295b2:	2100      	movs	r1, #0
 80295b4:	4809      	ldr	r0, [pc, #36]	; (80295dc <MX_I2C2_Init+0x74>)
 80295b6:	f005 ff7e 	bl	802f4b6 <HAL_I2CEx_ConfigAnalogFilter>
 80295ba:	4603      	mov	r3, r0
 80295bc:	2b00      	cmp	r3, #0
 80295be:	d001      	beq.n	80295c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80295c0:	f000 fa92 	bl	8029ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80295c4:	2100      	movs	r1, #0
 80295c6:	4805      	ldr	r0, [pc, #20]	; (80295dc <MX_I2C2_Init+0x74>)
 80295c8:	f005 ffc0 	bl	802f54c <HAL_I2CEx_ConfigDigitalFilter>
 80295cc:	4603      	mov	r3, r0
 80295ce:	2b00      	cmp	r3, #0
 80295d0:	d001      	beq.n	80295d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80295d2:	f000 fa89 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80295d6:	bf00      	nop
 80295d8:	bd80      	pop	{r7, pc}
 80295da:	bf00      	nop
 80295dc:	24024558 	.word	0x24024558
 80295e0:	40005800 	.word	0x40005800
 80295e4:	00b03fdb 	.word	0x00b03fdb

080295e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80295e8:	b580      	push	{r7, lr}
 80295ea:	b0b8      	sub	sp, #224	; 0xe0
 80295ec:	af00      	add	r7, sp, #0
 80295ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80295f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80295f4:	2200      	movs	r2, #0
 80295f6:	601a      	str	r2, [r3, #0]
 80295f8:	605a      	str	r2, [r3, #4]
 80295fa:	609a      	str	r2, [r3, #8]
 80295fc:	60da      	str	r2, [r3, #12]
 80295fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029600:	f107 0310 	add.w	r3, r7, #16
 8029604:	22bc      	movs	r2, #188	; 0xbc
 8029606:	2100      	movs	r1, #0
 8029608:	4618      	mov	r0, r3
 802960a:	f012 fc2f 	bl	803be6c <memset>
  if(i2cHandle->Instance==I2C2)
 802960e:	687b      	ldr	r3, [r7, #4]
 8029610:	681b      	ldr	r3, [r3, #0]
 8029612:	4a5a      	ldr	r2, [pc, #360]	; (802977c <HAL_I2C_MspInit+0x194>)
 8029614:	4293      	cmp	r3, r2
 8029616:	f040 80ad 	bne.w	8029774 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802961a:	2308      	movs	r3, #8
 802961c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802961e:	2300      	movs	r3, #0
 8029620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029624:	f107 0310 	add.w	r3, r7, #16
 8029628:	4618      	mov	r0, r3
 802962a:	f008 fab5 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802962e:	4603      	mov	r3, r0
 8029630:	2b00      	cmp	r3, #0
 8029632:	d001      	beq.n	8029638 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8029634:	f000 fa58 	bl	8029ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029638:	4b51      	ldr	r3, [pc, #324]	; (8029780 <HAL_I2C_MspInit+0x198>)
 802963a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802963e:	4a50      	ldr	r2, [pc, #320]	; (8029780 <HAL_I2C_MspInit+0x198>)
 8029640:	f043 0302 	orr.w	r3, r3, #2
 8029644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029648:	4b4d      	ldr	r3, [pc, #308]	; (8029780 <HAL_I2C_MspInit+0x198>)
 802964a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802964e:	f003 0302 	and.w	r3, r3, #2
 8029652:	60fb      	str	r3, [r7, #12]
 8029654:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8029656:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802965a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802965e:	2312      	movs	r3, #18
 8029660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029664:	2300      	movs	r3, #0
 8029666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802966a:	2300      	movs	r3, #0
 802966c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8029670:	2304      	movs	r3, #4
 8029672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8029676:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802967a:	4619      	mov	r1, r3
 802967c:	4841      	ldr	r0, [pc, #260]	; (8029784 <HAL_I2C_MspInit+0x19c>)
 802967e:	f004 fe3b 	bl	802e2f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8029682:	4b3f      	ldr	r3, [pc, #252]	; (8029780 <HAL_I2C_MspInit+0x198>)
 8029684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029688:	4a3d      	ldr	r2, [pc, #244]	; (8029780 <HAL_I2C_MspInit+0x198>)
 802968a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802968e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029692:	4b3b      	ldr	r3, [pc, #236]	; (8029780 <HAL_I2C_MspInit+0x198>)
 8029694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802969c:	60bb      	str	r3, [r7, #8]
 802969e:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80296a0:	4b39      	ldr	r3, [pc, #228]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296a2:	4a3a      	ldr	r2, [pc, #232]	; (802978c <HAL_I2C_MspInit+0x1a4>)
 80296a4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80296a6:	4b38      	ldr	r3, [pc, #224]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296a8:	2223      	movs	r2, #35	; 0x23
 80296aa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80296ac:	4b36      	ldr	r3, [pc, #216]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296ae:	2200      	movs	r2, #0
 80296b0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80296b2:	4b35      	ldr	r3, [pc, #212]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296b4:	2200      	movs	r2, #0
 80296b6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80296b8:	4b33      	ldr	r3, [pc, #204]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80296be:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80296c0:	4b31      	ldr	r3, [pc, #196]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296c2:	2200      	movs	r2, #0
 80296c4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80296c6:	4b30      	ldr	r3, [pc, #192]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296c8:	2200      	movs	r2, #0
 80296ca:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80296cc:	4b2e      	ldr	r3, [pc, #184]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296ce:	2200      	movs	r2, #0
 80296d0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80296d2:	4b2d      	ldr	r3, [pc, #180]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296d4:	2200      	movs	r2, #0
 80296d6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80296d8:	4b2b      	ldr	r3, [pc, #172]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296da:	2200      	movs	r2, #0
 80296dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80296de:	482a      	ldr	r0, [pc, #168]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296e0:	f001 ffb4 	bl	802b64c <HAL_DMA_Init>
 80296e4:	4603      	mov	r3, r0
 80296e6:	2b00      	cmp	r3, #0
 80296e8:	d001      	beq.n	80296ee <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 80296ea:	f000 f9fd 	bl	8029ae8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80296ee:	687b      	ldr	r3, [r7, #4]
 80296f0:	4a25      	ldr	r2, [pc, #148]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80296f4:	4a24      	ldr	r2, [pc, #144]	; (8029788 <HAL_I2C_MspInit+0x1a0>)
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 80296fa:	4b25      	ldr	r3, [pc, #148]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 80296fc:	4a25      	ldr	r2, [pc, #148]	; (8029794 <HAL_I2C_MspInit+0x1ac>)
 80296fe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8029700:	4b23      	ldr	r3, [pc, #140]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029702:	2224      	movs	r2, #36	; 0x24
 8029704:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029706:	4b22      	ldr	r3, [pc, #136]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029708:	2240      	movs	r2, #64	; 0x40
 802970a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802970c:	4b20      	ldr	r3, [pc, #128]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 802970e:	2200      	movs	r2, #0
 8029710:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029712:	4b1f      	ldr	r3, [pc, #124]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029718:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802971a:	4b1d      	ldr	r3, [pc, #116]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 802971c:	2200      	movs	r2, #0
 802971e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029720:	4b1b      	ldr	r3, [pc, #108]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029722:	2200      	movs	r2, #0
 8029724:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8029726:	4b1a      	ldr	r3, [pc, #104]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029728:	2200      	movs	r2, #0
 802972a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802972c:	4b18      	ldr	r3, [pc, #96]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 802972e:	2200      	movs	r2, #0
 8029730:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029732:	4b17      	ldr	r3, [pc, #92]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029734:	2200      	movs	r2, #0
 8029736:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8029738:	4815      	ldr	r0, [pc, #84]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 802973a:	f001 ff87 	bl	802b64c <HAL_DMA_Init>
 802973e:	4603      	mov	r3, r0
 8029740:	2b00      	cmp	r3, #0
 8029742:	d001      	beq.n	8029748 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8029744:	f000 f9d0 	bl	8029ae8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8029748:	687b      	ldr	r3, [r7, #4]
 802974a:	4a11      	ldr	r2, [pc, #68]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 802974c:	639a      	str	r2, [r3, #56]	; 0x38
 802974e:	4a10      	ldr	r2, [pc, #64]	; (8029790 <HAL_I2C_MspInit+0x1a8>)
 8029750:	687b      	ldr	r3, [r7, #4]
 8029752:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8029754:	2200      	movs	r2, #0
 8029756:	2100      	movs	r1, #0
 8029758:	2021      	movs	r0, #33	; 0x21
 802975a:	f001 fd7a 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802975e:	2021      	movs	r0, #33	; 0x21
 8029760:	f001 fd91 	bl	802b286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8029764:	2200      	movs	r2, #0
 8029766:	2100      	movs	r1, #0
 8029768:	2022      	movs	r0, #34	; 0x22
 802976a:	f001 fd72 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802976e:	2022      	movs	r0, #34	; 0x22
 8029770:	f001 fd89 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8029774:	bf00      	nop
 8029776:	37e0      	adds	r7, #224	; 0xe0
 8029778:	46bd      	mov	sp, r7
 802977a:	bd80      	pop	{r7, pc}
 802977c:	40005800 	.word	0x40005800
 8029780:	58024400 	.word	0x58024400
 8029784:	58020400 	.word	0x58020400
 8029788:	240245a4 	.word	0x240245a4
 802978c:	40020010 	.word	0x40020010
 8029790:	2402461c 	.word	0x2402461c
 8029794:	40020028 	.word	0x40020028

08029798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8029798:	b5b0      	push	{r4, r5, r7, lr}
 802979a:	b090      	sub	sp, #64	; 0x40
 802979c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802979e:	4b33      	ldr	r3, [pc, #204]	; (802986c <main+0xd4>)
 80297a0:	4a33      	ldr	r2, [pc, #204]	; (8029870 <main+0xd8>)
 80297a2:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80297a4:	f001 f9d0 	bl	802ab48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80297a8:	f000 f874 	bl	8029894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80297ac:	f7ff fe54 	bl	8029458 <MX_GPIO_Init>
  MX_DMA_Init();
 80297b0:	f7ff fe1a 	bl	80293e8 <MX_DMA_Init>
  MX_I2C2_Init();
 80297b4:	f7ff fed8 	bl	8029568 <MX_I2C2_Init>
  MX_SPI1_Init();
 80297b8:	f000 f99c 	bl	8029af4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80297bc:	f011 fd78 	bl	803b2b0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80297c0:	f000 ff4a 	bl	802a658 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80297c4:	f000 fe52 	bl	802a46c <MX_UART4_Init>
  MX_UART7_Init();
 80297c8:	f000 fea2 	bl	802a510 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80297cc:	f000 ff90 	bl	802a6f0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80297d0:	f000 fd4c 	bl	802a26c <MX_TIM3_Init>
  MX_TIM2_Init();
 80297d4:	f000 fcfc 	bl	802a1d0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80297d8:	f000 fd96 	bl	802a308 <MX_TIM4_Init>
  MX_COMP2_Init();
 80297dc:	f7ff fd36 	bl	802924c <MX_COMP2_Init>
  MX_DAC1_Init();
 80297e0:	f7ff fdae 	bl	8029340 <MX_DAC1_Init>
  MX_UART8_Init();
 80297e4:	f000 fee2 	bl	802a5ac <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80297e8:	2100      	movs	r1, #0
 80297ea:	4822      	ldr	r0, [pc, #136]	; (8029874 <main+0xdc>)
 80297ec:	f001 fd87 	bl	802b2fe <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 80297f0:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 80297f4:	2200      	movs	r2, #0
 80297f6:	2100      	movs	r1, #0
 80297f8:	481e      	ldr	r0, [pc, #120]	; (8029874 <main+0xdc>)
 80297fa:	f001 fdd2 	bl	802b3a2 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 80297fe:	481e      	ldr	r0, [pc, #120]	; (8029878 <main+0xe0>)
 8029800:	f00a feb6 	bl	8034570 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8029804:	481d      	ldr	r0, [pc, #116]	; (802987c <main+0xe4>)
 8029806:	f00a feb3 	bl	8034570 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802980a:	481d      	ldr	r0, [pc, #116]	; (8029880 <main+0xe8>)
 802980c:	f001 fb88 	bl	802af20 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 8029810:	4b1c      	ldr	r3, [pc, #112]	; (8029884 <main+0xec>)
 8029812:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 8029814:	4b1c      	ldr	r3, [pc, #112]	; (8029888 <main+0xf0>)
 8029816:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 8029818:	230a      	movs	r3, #10
 802981a:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 802981c:	4b1b      	ldr	r3, [pc, #108]	; (802988c <main+0xf4>)
 802981e:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 8029820:	230a      	movs	r3, #10
 8029822:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 8029824:	2314      	movs	r3, #20
 8029826:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 8029828:	4b19      	ldr	r3, [pc, #100]	; (8029890 <main+0xf8>)
 802982a:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 802982c:	2300      	movs	r3, #0
 802982e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 2;
 8029832:	2302      	movs	r3, #2
 8029834:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 8029838:	2300      	movs	r3, #0
 802983a:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 802983c:	466d      	mov	r5, sp
 802983e:	f107 0414 	add.w	r4, r7, #20
 8029842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029846:	6823      	ldr	r3, [r4, #0]
 8029848:	602b      	str	r3, [r5, #0]
 802984a:	1d3b      	adds	r3, r7, #4
 802984c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802984e:	f7f9 fcdb 	bl	8023208 <MotherboardInit>
 8029852:	4603      	mov	r3, r0
 8029854:	2b00      	cmp	r3, #0
 8029856:	d001      	beq.n	802985c <main+0xc4>
		return 1;
 8029858:	2301      	movs	r3, #1
 802985a:	e002      	b.n	8029862 <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802985c:	f7f9 fd2c 	bl	80232b8 <MotherboardTick>
 8029860:	e7fc      	b.n	802985c <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8029862:	4618      	mov	r0, r3
 8029864:	3728      	adds	r7, #40	; 0x28
 8029866:	46bd      	mov	sp, r7
 8029868:	bdb0      	pop	{r4, r5, r7, pc}
 802986a:	bf00      	nop
 802986c:	e000ed00 	.word	0xe000ed00
 8029870:	08020000 	.word	0x08020000
 8029874:	24024544 	.word	0x24024544
 8029878:	2402485c 	.word	0x2402485c
 802987c:	24024810 	.word	0x24024810
 8029880:	24024518 	.word	0x24024518
 8029884:	24024b34 	.word	0x24024b34
 8029888:	240248f4 	.word	0x240248f4
 802988c:	24024a14 	.word	0x24024a14
 8029890:	24024694 	.word	0x24024694

08029894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8029894:	b580      	push	{r7, lr}
 8029896:	b09e      	sub	sp, #120	; 0x78
 8029898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802989a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802989e:	224c      	movs	r2, #76	; 0x4c
 80298a0:	2100      	movs	r1, #0
 80298a2:	4618      	mov	r0, r3
 80298a4:	f012 fae2 	bl	803be6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80298a8:	f107 030c 	add.w	r3, r7, #12
 80298ac:	2220      	movs	r2, #32
 80298ae:	2100      	movs	r1, #0
 80298b0:	4618      	mov	r0, r3
 80298b2:	f012 fadb 	bl	803be6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80298b6:	2002      	movs	r0, #2
 80298b8:	f007 f96a 	bl	8030b90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80298bc:	2300      	movs	r3, #0
 80298be:	60bb      	str	r3, [r7, #8]
 80298c0:	4b4d      	ldr	r3, [pc, #308]	; (80299f8 <SystemClock_Config+0x164>)
 80298c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298c4:	4a4c      	ldr	r2, [pc, #304]	; (80299f8 <SystemClock_Config+0x164>)
 80298c6:	f023 0301 	bic.w	r3, r3, #1
 80298ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80298cc:	4b4a      	ldr	r3, [pc, #296]	; (80299f8 <SystemClock_Config+0x164>)
 80298ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298d0:	f003 0301 	and.w	r3, r3, #1
 80298d4:	60bb      	str	r3, [r7, #8]
 80298d6:	4b49      	ldr	r3, [pc, #292]	; (80299fc <SystemClock_Config+0x168>)
 80298d8:	699b      	ldr	r3, [r3, #24]
 80298da:	4a48      	ldr	r2, [pc, #288]	; (80299fc <SystemClock_Config+0x168>)
 80298dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80298e0:	6193      	str	r3, [r2, #24]
 80298e2:	4b46      	ldr	r3, [pc, #280]	; (80299fc <SystemClock_Config+0x168>)
 80298e4:	699b      	ldr	r3, [r3, #24]
 80298e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80298ea:	60bb      	str	r3, [r7, #8]
 80298ec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80298ee:	bf00      	nop
 80298f0:	4b42      	ldr	r3, [pc, #264]	; (80299fc <SystemClock_Config+0x168>)
 80298f2:	699b      	ldr	r3, [r3, #24]
 80298f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80298f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80298fc:	d1f8      	bne.n	80298f0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80298fe:	4b40      	ldr	r3, [pc, #256]	; (8029a00 <SystemClock_Config+0x16c>)
 8029900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029904:	4a3e      	ldr	r2, [pc, #248]	; (8029a00 <SystemClock_Config+0x16c>)
 8029906:	f043 0302 	orr.w	r3, r3, #2
 802990a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802990e:	4b3c      	ldr	r3, [pc, #240]	; (8029a00 <SystemClock_Config+0x16c>)
 8029910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029914:	f003 0302 	and.w	r3, r3, #2
 8029918:	607b      	str	r3, [r7, #4]
 802991a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802991c:	2300      	movs	r3, #0
 802991e:	603b      	str	r3, [r7, #0]
 8029920:	4b36      	ldr	r3, [pc, #216]	; (80299fc <SystemClock_Config+0x168>)
 8029922:	699b      	ldr	r3, [r3, #24]
 8029924:	4a35      	ldr	r2, [pc, #212]	; (80299fc <SystemClock_Config+0x168>)
 8029926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802992a:	6193      	str	r3, [r2, #24]
 802992c:	4b33      	ldr	r3, [pc, #204]	; (80299fc <SystemClock_Config+0x168>)
 802992e:	699b      	ldr	r3, [r3, #24]
 8029930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029934:	603b      	str	r3, [r7, #0]
 8029936:	4b30      	ldr	r3, [pc, #192]	; (80299f8 <SystemClock_Config+0x164>)
 8029938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802993a:	4a2f      	ldr	r2, [pc, #188]	; (80299f8 <SystemClock_Config+0x164>)
 802993c:	f043 0301 	orr.w	r3, r3, #1
 8029940:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029942:	4b2d      	ldr	r3, [pc, #180]	; (80299f8 <SystemClock_Config+0x164>)
 8029944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029946:	f003 0301 	and.w	r3, r3, #1
 802994a:	603b      	str	r3, [r7, #0]
 802994c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802994e:	bf00      	nop
 8029950:	4b2a      	ldr	r3, [pc, #168]	; (80299fc <SystemClock_Config+0x168>)
 8029952:	699b      	ldr	r3, [r3, #24]
 8029954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802995c:	d1f8      	bne.n	8029950 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802995e:	4b28      	ldr	r3, [pc, #160]	; (8029a00 <SystemClock_Config+0x16c>)
 8029960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029962:	4a27      	ldr	r2, [pc, #156]	; (8029a00 <SystemClock_Config+0x16c>)
 8029964:	f023 0303 	bic.w	r3, r3, #3
 8029968:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802996a:	2322      	movs	r3, #34	; 0x22
 802996c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802996e:	2301      	movs	r3, #1
 8029970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8029972:	2340      	movs	r3, #64	; 0x40
 8029974:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8029976:	2301      	movs	r3, #1
 8029978:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802997a:	2302      	movs	r3, #2
 802997c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802997e:	2300      	movs	r3, #0
 8029980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8029982:	2304      	movs	r3, #4
 8029984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8029986:	233c      	movs	r3, #60	; 0x3c
 8029988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 802998a:	2302      	movs	r3, #2
 802998c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802998e:	2305      	movs	r3, #5
 8029990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8029992:	2302      	movs	r3, #2
 8029994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8029996:	230c      	movs	r3, #12
 8029998:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802999a:	2300      	movs	r3, #0
 802999c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802999e:	2300      	movs	r3, #0
 80299a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80299a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80299a6:	4618      	mov	r0, r3
 80299a8:	f007 f93c 	bl	8030c24 <HAL_RCC_OscConfig>
 80299ac:	4603      	mov	r3, r0
 80299ae:	2b00      	cmp	r3, #0
 80299b0:	d001      	beq.n	80299b6 <SystemClock_Config+0x122>
  {
    Error_Handler();
 80299b2:	f000 f899 	bl	8029ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80299b6:	233f      	movs	r3, #63	; 0x3f
 80299b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80299ba:	2303      	movs	r3, #3
 80299bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80299be:	2300      	movs	r3, #0
 80299c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80299c2:	2308      	movs	r3, #8
 80299c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80299c6:	2340      	movs	r3, #64	; 0x40
 80299c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80299ca:	2340      	movs	r3, #64	; 0x40
 80299cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80299ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80299d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80299d4:	2340      	movs	r3, #64	; 0x40
 80299d6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80299d8:	f107 030c 	add.w	r3, r7, #12
 80299dc:	2104      	movs	r1, #4
 80299de:	4618      	mov	r0, r3
 80299e0:	f007 fd4e 	bl	8031480 <HAL_RCC_ClockConfig>
 80299e4:	4603      	mov	r3, r0
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	d001      	beq.n	80299ee <SystemClock_Config+0x15a>
  {
    Error_Handler();
 80299ea:	f000 f87d 	bl	8029ae8 <Error_Handler>
  }
}
 80299ee:	bf00      	nop
 80299f0:	3778      	adds	r7, #120	; 0x78
 80299f2:	46bd      	mov	sp, r7
 80299f4:	bd80      	pop	{r7, pc}
 80299f6:	bf00      	nop
 80299f8:	58000400 	.word	0x58000400
 80299fc:	58024800 	.word	0x58024800
 8029a00:	58024400 	.word	0x58024400

08029a04 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8029a04:	b580      	push	{r7, lr}
 8029a06:	b082      	sub	sp, #8
 8029a08:	af00      	add	r7, sp, #0
 8029a0a:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	4a04      	ldr	r2, [pc, #16]	; (8029a24 <HAL_COMP_TriggerCallback+0x20>)
 8029a12:	4293      	cmp	r3, r2
 8029a14:	d101      	bne.n	8029a1a <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 8029a16:	f7f9 fd25 	bl	8023464 <MotherboardOnStrobe>
	}
}
 8029a1a:	bf00      	nop
 8029a1c:	3708      	adds	r7, #8
 8029a1e:	46bd      	mov	sp, r7
 8029a20:	bd80      	pop	{r7, pc}
 8029a22:	bf00      	nop
 8029a24:	58003810 	.word	0x58003810

08029a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8029a28:	b580      	push	{r7, lr}
 8029a2a:	b082      	sub	sp, #8
 8029a2c:	af00      	add	r7, sp, #0
 8029a2e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029a30:	687b      	ldr	r3, [r7, #4]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	4a0b      	ldr	r2, [pc, #44]	; (8029a64 <HAL_UART_RxCpltCallback+0x3c>)
 8029a36:	4293      	cmp	r3, r2
 8029a38:	d101      	bne.n	8029a3e <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 8029a3a:	f7f9 fd33 	bl	80234a4 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	681b      	ldr	r3, [r3, #0]
 8029a42:	4a09      	ldr	r2, [pc, #36]	; (8029a68 <HAL_UART_RxCpltCallback+0x40>)
 8029a44:	4293      	cmp	r3, r2
 8029a46:	d101      	bne.n	8029a4c <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 8029a48:	f7f9 fd36 	bl	80234b8 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 8029a4c:	687b      	ldr	r3, [r7, #4]
 8029a4e:	681b      	ldr	r3, [r3, #0]
 8029a50:	4a06      	ldr	r2, [pc, #24]	; (8029a6c <HAL_UART_RxCpltCallback+0x44>)
 8029a52:	4293      	cmp	r3, r2
 8029a54:	d101      	bne.n	8029a5a <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 8029a56:	f7f9 fd1b 	bl	8023490 <MotherboardOnBodyRecieveComplete>
	}
}
 8029a5a:	bf00      	nop
 8029a5c:	3708      	adds	r7, #8
 8029a5e:	46bd      	mov	sp, r7
 8029a60:	bd80      	pop	{r7, pc}
 8029a62:	bf00      	nop
 8029a64:	40004800 	.word	0x40004800
 8029a68:	40004c00 	.word	0x40004c00
 8029a6c:	40007c00 	.word	0x40007c00

08029a70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8029a70:	b580      	push	{r7, lr}
 8029a72:	b082      	sub	sp, #8
 8029a74:	af00      	add	r7, sp, #0
 8029a76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029a78:	687b      	ldr	r3, [r7, #4]
 8029a7a:	681b      	ldr	r3, [r3, #0]
 8029a7c:	4a0b      	ldr	r2, [pc, #44]	; (8029aac <HAL_UART_TxCpltCallback+0x3c>)
 8029a7e:	4293      	cmp	r3, r2
 8029a80:	d101      	bne.n	8029a86 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 8029a82:	f7f9 fd23 	bl	80234cc <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	681b      	ldr	r3, [r3, #0]
 8029a8a:	4a09      	ldr	r2, [pc, #36]	; (8029ab0 <HAL_UART_TxCpltCallback+0x40>)
 8029a8c:	4293      	cmp	r3, r2
 8029a8e:	d101      	bne.n	8029a94 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 8029a90:	f7f9 fd26 	bl	80234e0 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 8029a94:	687b      	ldr	r3, [r7, #4]
 8029a96:	681b      	ldr	r3, [r3, #0]
 8029a98:	4a06      	ldr	r2, [pc, #24]	; (8029ab4 <HAL_UART_TxCpltCallback+0x44>)
 8029a9a:	4293      	cmp	r3, r2
 8029a9c:	d101      	bne.n	8029aa2 <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 8029a9e:	f7f9 fd29 	bl	80234f4 <MotherboardOnBodyTransmitComplete>
	}
}
 8029aa2:	bf00      	nop
 8029aa4:	3708      	adds	r7, #8
 8029aa6:	46bd      	mov	sp, r7
 8029aa8:	bd80      	pop	{r7, pc}
 8029aaa:	bf00      	nop
 8029aac:	40004800 	.word	0x40004800
 8029ab0:	40004c00 	.word	0x40004c00
 8029ab4:	40007c00 	.word	0x40007c00

08029ab8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8029ab8:	b580      	push	{r7, lr}
 8029aba:	b082      	sub	sp, #8
 8029abc:	af00      	add	r7, sp, #0
 8029abe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8029ac0:	687b      	ldr	r3, [r7, #4]
 8029ac2:	681b      	ldr	r3, [r3, #0]
 8029ac4:	4a07      	ldr	r2, [pc, #28]	; (8029ae4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8029ac6:	4293      	cmp	r3, r2
 8029ac8:	d101      	bne.n	8029ace <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 8029aca:	f7f9 fd1d 	bl	8023508 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8029ace:	687b      	ldr	r3, [r7, #4]
 8029ad0:	681b      	ldr	r3, [r3, #0]
 8029ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029ad6:	d101      	bne.n	8029adc <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 8029ad8:	f7f9 fd20 	bl	802351c <MotherboardOnImuTimerTick>
}
 8029adc:	bf00      	nop
 8029ade:	3708      	adds	r7, #8
 8029ae0:	46bd      	mov	sp, r7
 8029ae2:	bd80      	pop	{r7, pc}
 8029ae4:	40000400 	.word	0x40000400

08029ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8029ae8:	b480      	push	{r7}
 8029aea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8029aec:	b672      	cpsid	i
}
 8029aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8029af0:	e7fe      	b.n	8029af0 <Error_Handler+0x8>
	...

08029af4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8029af4:	b580      	push	{r7, lr}
 8029af6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8029af8:	4b28      	ldr	r3, [pc, #160]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029afa:	4a29      	ldr	r2, [pc, #164]	; (8029ba0 <MX_SPI1_Init+0xac>)
 8029afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029afe:	4b27      	ldr	r3, [pc, #156]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8029b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029b06:	4b25      	ldr	r3, [pc, #148]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b08:	2200      	movs	r2, #0
 8029b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029b0c:	4b23      	ldr	r3, [pc, #140]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b0e:	2207      	movs	r2, #7
 8029b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8029b12:	4b22      	ldr	r3, [pc, #136]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8029b18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8029b1a:	4b20      	ldr	r3, [pc, #128]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029b22:	4b1e      	ldr	r3, [pc, #120]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8029b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8029b2a:	4b1c      	ldr	r3, [pc, #112]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029b30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029b32:	4b1a      	ldr	r3, [pc, #104]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b34:	2200      	movs	r2, #0
 8029b36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029b38:	4b18      	ldr	r3, [pc, #96]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b3a:	2200      	movs	r2, #0
 8029b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029b3e:	4b17      	ldr	r3, [pc, #92]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b40:	2200      	movs	r2, #0
 8029b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8029b44:	4b15      	ldr	r3, [pc, #84]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b46:	2200      	movs	r2, #0
 8029b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8029b4a:	4b14      	ldr	r3, [pc, #80]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029b50:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8029b52:	4b12      	ldr	r3, [pc, #72]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b54:	2200      	movs	r2, #0
 8029b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8029b58:	4b10      	ldr	r3, [pc, #64]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b5a:	2200      	movs	r2, #0
 8029b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029b5e:	4b0f      	ldr	r3, [pc, #60]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b60:	2200      	movs	r2, #0
 8029b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029b64:	4b0d      	ldr	r3, [pc, #52]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b66:	2200      	movs	r2, #0
 8029b68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8029b6a:	4b0c      	ldr	r3, [pc, #48]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b6c:	2200      	movs	r2, #0
 8029b6e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8029b70:	4b0a      	ldr	r3, [pc, #40]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b72:	2200      	movs	r2, #0
 8029b74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8029b76:	4b09      	ldr	r3, [pc, #36]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b78:	2200      	movs	r2, #0
 8029b7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8029b7c:	4b07      	ldr	r3, [pc, #28]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b7e:	2200      	movs	r2, #0
 8029b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8029b82:	4b06      	ldr	r3, [pc, #24]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b84:	2200      	movs	r2, #0
 8029b86:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029b88:	4804      	ldr	r0, [pc, #16]	; (8029b9c <MX_SPI1_Init+0xa8>)
 8029b8a:	f009 fb6d 	bl	8033268 <HAL_SPI_Init>
 8029b8e:	4603      	mov	r3, r0
 8029b90:	2b00      	cmp	r3, #0
 8029b92:	d001      	beq.n	8029b98 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8029b94:	f7ff ffa8 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8029b98:	bf00      	nop
 8029b9a:	bd80      	pop	{r7, pc}
 8029b9c:	24024694 	.word	0x24024694
 8029ba0:	40013000 	.word	0x40013000

08029ba4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8029ba4:	b580      	push	{r7, lr}
 8029ba6:	b0b8      	sub	sp, #224	; 0xe0
 8029ba8:	af00      	add	r7, sp, #0
 8029baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029bac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029bb0:	2200      	movs	r2, #0
 8029bb2:	601a      	str	r2, [r3, #0]
 8029bb4:	605a      	str	r2, [r3, #4]
 8029bb6:	609a      	str	r2, [r3, #8]
 8029bb8:	60da      	str	r2, [r3, #12]
 8029bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029bbc:	f107 0310 	add.w	r3, r7, #16
 8029bc0:	22bc      	movs	r2, #188	; 0xbc
 8029bc2:	2100      	movs	r1, #0
 8029bc4:	4618      	mov	r0, r3
 8029bc6:	f012 f951 	bl	803be6c <memset>
  if(spiHandle->Instance==SPI1)
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	681b      	ldr	r3, [r3, #0]
 8029bce:	4a60      	ldr	r2, [pc, #384]	; (8029d50 <HAL_SPI_MspInit+0x1ac>)
 8029bd0:	4293      	cmp	r3, r2
 8029bd2:	f040 80b8 	bne.w	8029d46 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029bda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8029bdc:	2320      	movs	r3, #32
 8029bde:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8029be0:	2381      	movs	r3, #129	; 0x81
 8029be2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8029be4:	2302      	movs	r3, #2
 8029be6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8029be8:	2302      	movs	r3, #2
 8029bea:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8029bec:	2302      	movs	r3, #2
 8029bee:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8029bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029bf4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8029bf6:	2300      	movs	r3, #0
 8029bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8029bfa:	2300      	movs	r3, #0
 8029bfc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8029bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029c04:	f107 0310 	add.w	r3, r7, #16
 8029c08:	4618      	mov	r0, r3
 8029c0a:	f007 ffc5 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 8029c0e:	4603      	mov	r3, r0
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	d001      	beq.n	8029c18 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8029c14:	f7ff ff68 	bl	8029ae8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029c18:	4b4e      	ldr	r3, [pc, #312]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c1e:	4a4d      	ldr	r2, [pc, #308]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029c24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029c28:	4b4a      	ldr	r3, [pc, #296]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029c32:	60fb      	str	r3, [r7, #12]
 8029c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029c36:	4b47      	ldr	r3, [pc, #284]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c3c:	4a45      	ldr	r2, [pc, #276]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c3e:	f043 0301 	orr.w	r3, r3, #1
 8029c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029c46:	4b43      	ldr	r3, [pc, #268]	; (8029d54 <HAL_SPI_MspInit+0x1b0>)
 8029c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c4c:	f003 0301 	and.w	r3, r3, #1
 8029c50:	60bb      	str	r3, [r7, #8]
 8029c52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029c54:	23e0      	movs	r3, #224	; 0xe0
 8029c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029c5a:	2302      	movs	r3, #2
 8029c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029c60:	2300      	movs	r3, #0
 8029c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029c66:	2300      	movs	r3, #0
 8029c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029c6c:	2305      	movs	r3, #5
 8029c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029c72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029c76:	4619      	mov	r1, r3
 8029c78:	4837      	ldr	r0, [pc, #220]	; (8029d58 <HAL_SPI_MspInit+0x1b4>)
 8029c7a:	f004 fb3d 	bl	802e2f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8029c7e:	4b37      	ldr	r3, [pc, #220]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029c80:	4a37      	ldr	r2, [pc, #220]	; (8029d60 <HAL_SPI_MspInit+0x1bc>)
 8029c82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8029c84:	4b35      	ldr	r3, [pc, #212]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029c86:	2226      	movs	r2, #38	; 0x26
 8029c88:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029c8a:	4b34      	ldr	r3, [pc, #208]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029c8c:	2240      	movs	r2, #64	; 0x40
 8029c8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029c90:	4b32      	ldr	r3, [pc, #200]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029c92:	2200      	movs	r2, #0
 8029c94:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029c96:	4b31      	ldr	r3, [pc, #196]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029c9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029c9e:	4b2f      	ldr	r3, [pc, #188]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029ca0:	2200      	movs	r2, #0
 8029ca2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029ca4:	4b2d      	ldr	r3, [pc, #180]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029ca6:	2200      	movs	r2, #0
 8029ca8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8029caa:	4b2c      	ldr	r3, [pc, #176]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cac:	2200      	movs	r2, #0
 8029cae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029cb0:	4b2a      	ldr	r3, [pc, #168]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029cb6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029cb8:	4b28      	ldr	r3, [pc, #160]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cba:	2200      	movs	r2, #0
 8029cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8029cbe:	4827      	ldr	r0, [pc, #156]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cc0:	f001 fcc4 	bl	802b64c <HAL_DMA_Init>
 8029cc4:	4603      	mov	r3, r0
 8029cc6:	2b00      	cmp	r3, #0
 8029cc8:	d001      	beq.n	8029cce <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8029cca:	f7ff ff0d 	bl	8029ae8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8029cce:	687b      	ldr	r3, [r7, #4]
 8029cd0:	4a22      	ldr	r2, [pc, #136]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cd2:	679a      	str	r2, [r3, #120]	; 0x78
 8029cd4:	4a21      	ldr	r2, [pc, #132]	; (8029d5c <HAL_SPI_MspInit+0x1b8>)
 8029cd6:	687b      	ldr	r3, [r7, #4]
 8029cd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8029cda:	4b22      	ldr	r3, [pc, #136]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029cdc:	4a22      	ldr	r2, [pc, #136]	; (8029d68 <HAL_SPI_MspInit+0x1c4>)
 8029cde:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8029ce0:	4b20      	ldr	r3, [pc, #128]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029ce2:	2225      	movs	r2, #37	; 0x25
 8029ce4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029ce6:	4b1f      	ldr	r3, [pc, #124]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029ce8:	2200      	movs	r2, #0
 8029cea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029cec:	4b1d      	ldr	r3, [pc, #116]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029cee:	2200      	movs	r2, #0
 8029cf0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029cf2:	4b1c      	ldr	r3, [pc, #112]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029cf8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029cfa:	4b1a      	ldr	r3, [pc, #104]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029cfc:	2200      	movs	r2, #0
 8029cfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029d00:	4b18      	ldr	r3, [pc, #96]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d02:	2200      	movs	r2, #0
 8029d04:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8029d06:	4b17      	ldr	r3, [pc, #92]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d08:	2200      	movs	r2, #0
 8029d0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029d0c:	4b15      	ldr	r3, [pc, #84]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029d12:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029d14:	4b13      	ldr	r3, [pc, #76]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d16:	2200      	movs	r2, #0
 8029d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8029d1a:	4812      	ldr	r0, [pc, #72]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d1c:	f001 fc96 	bl	802b64c <HAL_DMA_Init>
 8029d20:	4603      	mov	r3, r0
 8029d22:	2b00      	cmp	r3, #0
 8029d24:	d001      	beq.n	8029d2a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8029d26:	f7ff fedf 	bl	8029ae8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8029d2a:	687b      	ldr	r3, [r7, #4]
 8029d2c:	4a0d      	ldr	r2, [pc, #52]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d2e:	67da      	str	r2, [r3, #124]	; 0x7c
 8029d30:	4a0c      	ldr	r2, [pc, #48]	; (8029d64 <HAL_SPI_MspInit+0x1c0>)
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8029d36:	2200      	movs	r2, #0
 8029d38:	2102      	movs	r1, #2
 8029d3a:	2023      	movs	r0, #35	; 0x23
 8029d3c:	f001 fa89 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029d40:	2023      	movs	r0, #35	; 0x23
 8029d42:	f001 faa0 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8029d46:	bf00      	nop
 8029d48:	37e0      	adds	r7, #224	; 0xe0
 8029d4a:	46bd      	mov	sp, r7
 8029d4c:	bd80      	pop	{r7, pc}
 8029d4e:	bf00      	nop
 8029d50:	40013000 	.word	0x40013000
 8029d54:	58024400 	.word	0x58024400
 8029d58:	58020000 	.word	0x58020000
 8029d5c:	2402471c 	.word	0x2402471c
 8029d60:	40020070 	.word	0x40020070
 8029d64:	24024794 	.word	0x24024794
 8029d68:	40020088 	.word	0x40020088

08029d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029d6c:	b480      	push	{r7}
 8029d6e:	b083      	sub	sp, #12
 8029d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029d72:	4b0a      	ldr	r3, [pc, #40]	; (8029d9c <HAL_MspInit+0x30>)
 8029d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029d78:	4a08      	ldr	r2, [pc, #32]	; (8029d9c <HAL_MspInit+0x30>)
 8029d7a:	f043 0302 	orr.w	r3, r3, #2
 8029d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029d82:	4b06      	ldr	r3, [pc, #24]	; (8029d9c <HAL_MspInit+0x30>)
 8029d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029d88:	f003 0302 	and.w	r3, r3, #2
 8029d8c:	607b      	str	r3, [r7, #4]
 8029d8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029d90:	bf00      	nop
 8029d92:	370c      	adds	r7, #12
 8029d94:	46bd      	mov	sp, r7
 8029d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d9a:	4770      	bx	lr
 8029d9c:	58024400 	.word	0x58024400

08029da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029da0:	b480      	push	{r7}
 8029da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029da4:	e7fe      	b.n	8029da4 <NMI_Handler+0x4>

08029da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029da6:	b480      	push	{r7}
 8029da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029daa:	e7fe      	b.n	8029daa <HardFault_Handler+0x4>

08029dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029dac:	b480      	push	{r7}
 8029dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029db0:	e7fe      	b.n	8029db0 <MemManage_Handler+0x4>

08029db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029db2:	b480      	push	{r7}
 8029db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029db6:	e7fe      	b.n	8029db6 <BusFault_Handler+0x4>

08029db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029db8:	b480      	push	{r7}
 8029dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029dbc:	e7fe      	b.n	8029dbc <UsageFault_Handler+0x4>

08029dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029dbe:	b480      	push	{r7}
 8029dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029dc2:	bf00      	nop
 8029dc4:	46bd      	mov	sp, r7
 8029dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dca:	4770      	bx	lr

08029dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029dcc:	b480      	push	{r7}
 8029dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029dd0:	bf00      	nop
 8029dd2:	46bd      	mov	sp, r7
 8029dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dd8:	4770      	bx	lr

08029dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029dda:	b480      	push	{r7}
 8029ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029dde:	bf00      	nop
 8029de0:	46bd      	mov	sp, r7
 8029de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029de6:	4770      	bx	lr

08029de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8029de8:	b580      	push	{r7, lr}
 8029dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029dec:	f000 ff1e 	bl	802ac2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8029df0:	bf00      	nop
 8029df2:	bd80      	pop	{r7, pc}

08029df4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8029df4:	b580      	push	{r7, lr}
 8029df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8029df8:	4802      	ldr	r0, [pc, #8]	; (8029e04 <DMA1_Stream0_IRQHandler+0x10>)
 8029dfa:	f002 ff51 	bl	802cca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8029dfe:	bf00      	nop
 8029e00:	bd80      	pop	{r7, pc}
 8029e02:	bf00      	nop
 8029e04:	240245a4 	.word	0x240245a4

08029e08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8029e08:	b580      	push	{r7, lr}
 8029e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8029e0c:	4802      	ldr	r0, [pc, #8]	; (8029e18 <DMA1_Stream1_IRQHandler+0x10>)
 8029e0e:	f002 ff47 	bl	802cca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8029e12:	bf00      	nop
 8029e14:	bd80      	pop	{r7, pc}
 8029e16:	bf00      	nop
 8029e18:	2402461c 	.word	0x2402461c

08029e1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8029e1c:	b580      	push	{r7, lr}
 8029e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8029e20:	4802      	ldr	r0, [pc, #8]	; (8029e2c <DMA1_Stream4_IRQHandler+0x10>)
 8029e22:	f002 ff3d 	bl	802cca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8029e26:	bf00      	nop
 8029e28:	bd80      	pop	{r7, pc}
 8029e2a:	bf00      	nop
 8029e2c:	2402471c 	.word	0x2402471c

08029e30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8029e30:	b580      	push	{r7, lr}
 8029e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8029e34:	4802      	ldr	r0, [pc, #8]	; (8029e40 <DMA1_Stream5_IRQHandler+0x10>)
 8029e36:	f002 ff33 	bl	802cca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8029e3a:	bf00      	nop
 8029e3c:	bd80      	pop	{r7, pc}
 8029e3e:	bf00      	nop
 8029e40:	24024794 	.word	0x24024794

08029e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8029e44:	b580      	push	{r7, lr}
 8029e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8029e48:	4802      	ldr	r0, [pc, #8]	; (8029e54 <TIM2_IRQHandler+0x10>)
 8029e4a:	f00a fc09 	bl	8034660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8029e4e:	bf00      	nop
 8029e50:	bd80      	pop	{r7, pc}
 8029e52:	bf00      	nop
 8029e54:	24024810 	.word	0x24024810

08029e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8029e58:	b580      	push	{r7, lr}
 8029e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8029e5c:	4802      	ldr	r0, [pc, #8]	; (8029e68 <TIM3_IRQHandler+0x10>)
 8029e5e:	f00a fbff 	bl	8034660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8029e62:	bf00      	nop
 8029e64:	bd80      	pop	{r7, pc}
 8029e66:	bf00      	nop
 8029e68:	2402485c 	.word	0x2402485c

08029e6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8029e6c:	b580      	push	{r7, lr}
 8029e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8029e70:	4802      	ldr	r0, [pc, #8]	; (8029e7c <TIM4_IRQHandler+0x10>)
 8029e72:	f00a fbf5 	bl	8034660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8029e76:	bf00      	nop
 8029e78:	bd80      	pop	{r7, pc}
 8029e7a:	bf00      	nop
 8029e7c:	240248a8 	.word	0x240248a8

08029e80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8029e80:	b580      	push	{r7, lr}
 8029e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8029e84:	4802      	ldr	r0, [pc, #8]	; (8029e90 <I2C2_EV_IRQHandler+0x10>)
 8029e86:	f004 fc91 	bl	802e7ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8029e8a:	bf00      	nop
 8029e8c:	bd80      	pop	{r7, pc}
 8029e8e:	bf00      	nop
 8029e90:	24024558 	.word	0x24024558

08029e94 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8029e94:	b580      	push	{r7, lr}
 8029e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8029e98:	4802      	ldr	r0, [pc, #8]	; (8029ea4 <I2C2_ER_IRQHandler+0x10>)
 8029e9a:	f004 fca1 	bl	802e7e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8029e9e:	bf00      	nop
 8029ea0:	bd80      	pop	{r7, pc}
 8029ea2:	bf00      	nop
 8029ea4:	24024558 	.word	0x24024558

08029ea8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029ea8:	b580      	push	{r7, lr}
 8029eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029eac:	4802      	ldr	r0, [pc, #8]	; (8029eb8 <SPI1_IRQHandler+0x10>)
 8029eae:	f009 ff5d 	bl	8033d6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029eb2:	bf00      	nop
 8029eb4:	bd80      	pop	{r7, pc}
 8029eb6:	bf00      	nop
 8029eb8:	24024694 	.word	0x24024694

08029ebc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8029ebc:	b580      	push	{r7, lr}
 8029ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8029ec0:	4802      	ldr	r0, [pc, #8]	; (8029ecc <USART3_IRQHandler+0x10>)
 8029ec2:	f00b fa13 	bl	80352ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8029ec6:	bf00      	nop
 8029ec8:	bd80      	pop	{r7, pc}
 8029eca:	bf00      	nop
 8029ecc:	24024b34 	.word	0x24024b34

08029ed0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8029ed0:	b580      	push	{r7, lr}
 8029ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8029ed4:	4802      	ldr	r0, [pc, #8]	; (8029ee0 <UART4_IRQHandler+0x10>)
 8029ed6:	f00b fa09 	bl	80352ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8029eda:	bf00      	nop
 8029edc:	bd80      	pop	{r7, pc}
 8029ede:	bf00      	nop
 8029ee0:	240248f4 	.word	0x240248f4

08029ee4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8029ee4:	b580      	push	{r7, lr}
 8029ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8029ee8:	4802      	ldr	r0, [pc, #8]	; (8029ef4 <UART8_IRQHandler+0x10>)
 8029eea:	f00b f9ff 	bl	80352ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8029eee:	bf00      	nop
 8029ef0:	bd80      	pop	{r7, pc}
 8029ef2:	bf00      	nop
 8029ef4:	24024a14 	.word	0x24024a14

08029ef8 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8029ef8:	b580      	push	{r7, lr}
 8029efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029efc:	4802      	ldr	r0, [pc, #8]	; (8029f08 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8029efe:	f005 fcc8 	bl	802f892 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8029f02:	bf00      	nop
 8029f04:	bd80      	pop	{r7, pc}
 8029f06:	bf00      	nop
 8029f08:	240260a8 	.word	0x240260a8

08029f0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8029f0c:	b580      	push	{r7, lr}
 8029f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029f10:	4802      	ldr	r0, [pc, #8]	; (8029f1c <OTG_FS_IRQHandler+0x10>)
 8029f12:	f005 fcbe 	bl	802f892 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8029f16:	bf00      	nop
 8029f18:	bd80      	pop	{r7, pc}
 8029f1a:	bf00      	nop
 8029f1c:	240260a8 	.word	0x240260a8

08029f20 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8029f20:	b580      	push	{r7, lr}
 8029f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8029f24:	4802      	ldr	r0, [pc, #8]	; (8029f30 <COMP1_IRQHandler+0x10>)
 8029f26:	f001 f845 	bl	802afb4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8029f2a:	bf00      	nop
 8029f2c:	bd80      	pop	{r7, pc}
 8029f2e:	bf00      	nop
 8029f30:	24024518 	.word	0x24024518

08029f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8029f34:	b480      	push	{r7}
 8029f36:	af00      	add	r7, sp, #0
	return 1;
 8029f38:	2301      	movs	r3, #1
}
 8029f3a:	4618      	mov	r0, r3
 8029f3c:	46bd      	mov	sp, r7
 8029f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f42:	4770      	bx	lr

08029f44 <_kill>:

int _kill(int pid, int sig)
{
 8029f44:	b580      	push	{r7, lr}
 8029f46:	b082      	sub	sp, #8
 8029f48:	af00      	add	r7, sp, #0
 8029f4a:	6078      	str	r0, [r7, #4]
 8029f4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8029f4e:	f011 ff19 	bl	803bd84 <__errno>
 8029f52:	4603      	mov	r3, r0
 8029f54:	2216      	movs	r2, #22
 8029f56:	601a      	str	r2, [r3, #0]
	return -1;
 8029f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029f5c:	4618      	mov	r0, r3
 8029f5e:	3708      	adds	r7, #8
 8029f60:	46bd      	mov	sp, r7
 8029f62:	bd80      	pop	{r7, pc}

08029f64 <_exit>:

void _exit (int status)
{
 8029f64:	b580      	push	{r7, lr}
 8029f66:	b082      	sub	sp, #8
 8029f68:	af00      	add	r7, sp, #0
 8029f6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8029f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029f70:	6878      	ldr	r0, [r7, #4]
 8029f72:	f7ff ffe7 	bl	8029f44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8029f76:	e7fe      	b.n	8029f76 <_exit+0x12>

08029f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029f78:	b580      	push	{r7, lr}
 8029f7a:	b086      	sub	sp, #24
 8029f7c:	af00      	add	r7, sp, #0
 8029f7e:	60f8      	str	r0, [r7, #12]
 8029f80:	60b9      	str	r1, [r7, #8]
 8029f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029f84:	2300      	movs	r3, #0
 8029f86:	617b      	str	r3, [r7, #20]
 8029f88:	e00a      	b.n	8029fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8029f8a:	f3af 8000 	nop.w
 8029f8e:	4601      	mov	r1, r0
 8029f90:	68bb      	ldr	r3, [r7, #8]
 8029f92:	1c5a      	adds	r2, r3, #1
 8029f94:	60ba      	str	r2, [r7, #8]
 8029f96:	b2ca      	uxtb	r2, r1
 8029f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029f9a:	697b      	ldr	r3, [r7, #20]
 8029f9c:	3301      	adds	r3, #1
 8029f9e:	617b      	str	r3, [r7, #20]
 8029fa0:	697a      	ldr	r2, [r7, #20]
 8029fa2:	687b      	ldr	r3, [r7, #4]
 8029fa4:	429a      	cmp	r2, r3
 8029fa6:	dbf0      	blt.n	8029f8a <_read+0x12>
	}

return len;
 8029fa8:	687b      	ldr	r3, [r7, #4]
}
 8029faa:	4618      	mov	r0, r3
 8029fac:	3718      	adds	r7, #24
 8029fae:	46bd      	mov	sp, r7
 8029fb0:	bd80      	pop	{r7, pc}

08029fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029fb2:	b580      	push	{r7, lr}
 8029fb4:	b086      	sub	sp, #24
 8029fb6:	af00      	add	r7, sp, #0
 8029fb8:	60f8      	str	r0, [r7, #12]
 8029fba:	60b9      	str	r1, [r7, #8]
 8029fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029fbe:	2300      	movs	r3, #0
 8029fc0:	617b      	str	r3, [r7, #20]
 8029fc2:	e009      	b.n	8029fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8029fc4:	68bb      	ldr	r3, [r7, #8]
 8029fc6:	1c5a      	adds	r2, r3, #1
 8029fc8:	60ba      	str	r2, [r7, #8]
 8029fca:	781b      	ldrb	r3, [r3, #0]
 8029fcc:	4618      	mov	r0, r3
 8029fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029fd2:	697b      	ldr	r3, [r7, #20]
 8029fd4:	3301      	adds	r3, #1
 8029fd6:	617b      	str	r3, [r7, #20]
 8029fd8:	697a      	ldr	r2, [r7, #20]
 8029fda:	687b      	ldr	r3, [r7, #4]
 8029fdc:	429a      	cmp	r2, r3
 8029fde:	dbf1      	blt.n	8029fc4 <_write+0x12>
	}
	return len;
 8029fe0:	687b      	ldr	r3, [r7, #4]
}
 8029fe2:	4618      	mov	r0, r3
 8029fe4:	3718      	adds	r7, #24
 8029fe6:	46bd      	mov	sp, r7
 8029fe8:	bd80      	pop	{r7, pc}

08029fea <_close>:

int _close(int file)
{
 8029fea:	b480      	push	{r7}
 8029fec:	b083      	sub	sp, #12
 8029fee:	af00      	add	r7, sp, #0
 8029ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8029ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029ff6:	4618      	mov	r0, r3
 8029ff8:	370c      	adds	r7, #12
 8029ffa:	46bd      	mov	sp, r7
 8029ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a000:	4770      	bx	lr

0802a002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802a002:	b480      	push	{r7}
 802a004:	b083      	sub	sp, #12
 802a006:	af00      	add	r7, sp, #0
 802a008:	6078      	str	r0, [r7, #4]
 802a00a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802a00c:	683b      	ldr	r3, [r7, #0]
 802a00e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a012:	605a      	str	r2, [r3, #4]
	return 0;
 802a014:	2300      	movs	r3, #0
}
 802a016:	4618      	mov	r0, r3
 802a018:	370c      	adds	r7, #12
 802a01a:	46bd      	mov	sp, r7
 802a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a020:	4770      	bx	lr

0802a022 <_isatty>:

int _isatty(int file)
{
 802a022:	b480      	push	{r7}
 802a024:	b083      	sub	sp, #12
 802a026:	af00      	add	r7, sp, #0
 802a028:	6078      	str	r0, [r7, #4]
	return 1;
 802a02a:	2301      	movs	r3, #1
}
 802a02c:	4618      	mov	r0, r3
 802a02e:	370c      	adds	r7, #12
 802a030:	46bd      	mov	sp, r7
 802a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a036:	4770      	bx	lr

0802a038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802a038:	b480      	push	{r7}
 802a03a:	b085      	sub	sp, #20
 802a03c:	af00      	add	r7, sp, #0
 802a03e:	60f8      	str	r0, [r7, #12]
 802a040:	60b9      	str	r1, [r7, #8]
 802a042:	607a      	str	r2, [r7, #4]
	return 0;
 802a044:	2300      	movs	r3, #0
}
 802a046:	4618      	mov	r0, r3
 802a048:	3714      	adds	r7, #20
 802a04a:	46bd      	mov	sp, r7
 802a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a050:	4770      	bx	lr
	...

0802a054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802a054:	b580      	push	{r7, lr}
 802a056:	b086      	sub	sp, #24
 802a058:	af00      	add	r7, sp, #0
 802a05a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802a05c:	4a14      	ldr	r2, [pc, #80]	; (802a0b0 <_sbrk+0x5c>)
 802a05e:	4b15      	ldr	r3, [pc, #84]	; (802a0b4 <_sbrk+0x60>)
 802a060:	1ad3      	subs	r3, r2, r3
 802a062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802a064:	697b      	ldr	r3, [r7, #20]
 802a066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802a068:	4b13      	ldr	r3, [pc, #76]	; (802a0b8 <_sbrk+0x64>)
 802a06a:	681b      	ldr	r3, [r3, #0]
 802a06c:	2b00      	cmp	r3, #0
 802a06e:	d102      	bne.n	802a076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802a070:	4b11      	ldr	r3, [pc, #68]	; (802a0b8 <_sbrk+0x64>)
 802a072:	4a12      	ldr	r2, [pc, #72]	; (802a0bc <_sbrk+0x68>)
 802a074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802a076:	4b10      	ldr	r3, [pc, #64]	; (802a0b8 <_sbrk+0x64>)
 802a078:	681a      	ldr	r2, [r3, #0]
 802a07a:	687b      	ldr	r3, [r7, #4]
 802a07c:	4413      	add	r3, r2
 802a07e:	693a      	ldr	r2, [r7, #16]
 802a080:	429a      	cmp	r2, r3
 802a082:	d207      	bcs.n	802a094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802a084:	f011 fe7e 	bl	803bd84 <__errno>
 802a088:	4603      	mov	r3, r0
 802a08a:	220c      	movs	r2, #12
 802a08c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802a08e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a092:	e009      	b.n	802a0a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802a094:	4b08      	ldr	r3, [pc, #32]	; (802a0b8 <_sbrk+0x64>)
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802a09a:	4b07      	ldr	r3, [pc, #28]	; (802a0b8 <_sbrk+0x64>)
 802a09c:	681a      	ldr	r2, [r3, #0]
 802a09e:	687b      	ldr	r3, [r7, #4]
 802a0a0:	4413      	add	r3, r2
 802a0a2:	4a05      	ldr	r2, [pc, #20]	; (802a0b8 <_sbrk+0x64>)
 802a0a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802a0a6:	68fb      	ldr	r3, [r7, #12]
}
 802a0a8:	4618      	mov	r0, r3
 802a0aa:	3718      	adds	r7, #24
 802a0ac:	46bd      	mov	sp, r7
 802a0ae:	bd80      	pop	{r7, pc}
 802a0b0:	24080000 	.word	0x24080000
 802a0b4:	00000400 	.word	0x00000400
 802a0b8:	2402480c 	.word	0x2402480c
 802a0bc:	240267e8 	.word	0x240267e8

0802a0c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802a0c0:	b480      	push	{r7}
 802a0c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802a0c4:	4b37      	ldr	r3, [pc, #220]	; (802a1a4 <SystemInit+0xe4>)
 802a0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a0ca:	4a36      	ldr	r2, [pc, #216]	; (802a1a4 <SystemInit+0xe4>)
 802a0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a0d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a0d4:	4b34      	ldr	r3, [pc, #208]	; (802a1a8 <SystemInit+0xe8>)
 802a0d6:	681b      	ldr	r3, [r3, #0]
 802a0d8:	f003 030f 	and.w	r3, r3, #15
 802a0dc:	2b06      	cmp	r3, #6
 802a0de:	d807      	bhi.n	802a0f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a0e0:	4b31      	ldr	r3, [pc, #196]	; (802a1a8 <SystemInit+0xe8>)
 802a0e2:	681b      	ldr	r3, [r3, #0]
 802a0e4:	f023 030f 	bic.w	r3, r3, #15
 802a0e8:	4a2f      	ldr	r2, [pc, #188]	; (802a1a8 <SystemInit+0xe8>)
 802a0ea:	f043 0307 	orr.w	r3, r3, #7
 802a0ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802a0f0:	4b2e      	ldr	r3, [pc, #184]	; (802a1ac <SystemInit+0xec>)
 802a0f2:	681b      	ldr	r3, [r3, #0]
 802a0f4:	4a2d      	ldr	r2, [pc, #180]	; (802a1ac <SystemInit+0xec>)
 802a0f6:	f043 0301 	orr.w	r3, r3, #1
 802a0fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802a0fc:	4b2b      	ldr	r3, [pc, #172]	; (802a1ac <SystemInit+0xec>)
 802a0fe:	2200      	movs	r2, #0
 802a100:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802a102:	4b2a      	ldr	r3, [pc, #168]	; (802a1ac <SystemInit+0xec>)
 802a104:	681a      	ldr	r2, [r3, #0]
 802a106:	4929      	ldr	r1, [pc, #164]	; (802a1ac <SystemInit+0xec>)
 802a108:	4b29      	ldr	r3, [pc, #164]	; (802a1b0 <SystemInit+0xf0>)
 802a10a:	4013      	ands	r3, r2
 802a10c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a10e:	4b26      	ldr	r3, [pc, #152]	; (802a1a8 <SystemInit+0xe8>)
 802a110:	681b      	ldr	r3, [r3, #0]
 802a112:	f003 0308 	and.w	r3, r3, #8
 802a116:	2b00      	cmp	r3, #0
 802a118:	d007      	beq.n	802a12a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a11a:	4b23      	ldr	r3, [pc, #140]	; (802a1a8 <SystemInit+0xe8>)
 802a11c:	681b      	ldr	r3, [r3, #0]
 802a11e:	f023 030f 	bic.w	r3, r3, #15
 802a122:	4a21      	ldr	r2, [pc, #132]	; (802a1a8 <SystemInit+0xe8>)
 802a124:	f043 0307 	orr.w	r3, r3, #7
 802a128:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802a12a:	4b20      	ldr	r3, [pc, #128]	; (802a1ac <SystemInit+0xec>)
 802a12c:	2200      	movs	r2, #0
 802a12e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802a130:	4b1e      	ldr	r3, [pc, #120]	; (802a1ac <SystemInit+0xec>)
 802a132:	2200      	movs	r2, #0
 802a134:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802a136:	4b1d      	ldr	r3, [pc, #116]	; (802a1ac <SystemInit+0xec>)
 802a138:	2200      	movs	r2, #0
 802a13a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802a13c:	4b1b      	ldr	r3, [pc, #108]	; (802a1ac <SystemInit+0xec>)
 802a13e:	4a1d      	ldr	r2, [pc, #116]	; (802a1b4 <SystemInit+0xf4>)
 802a140:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802a142:	4b1a      	ldr	r3, [pc, #104]	; (802a1ac <SystemInit+0xec>)
 802a144:	4a1c      	ldr	r2, [pc, #112]	; (802a1b8 <SystemInit+0xf8>)
 802a146:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802a148:	4b18      	ldr	r3, [pc, #96]	; (802a1ac <SystemInit+0xec>)
 802a14a:	4a1c      	ldr	r2, [pc, #112]	; (802a1bc <SystemInit+0xfc>)
 802a14c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802a14e:	4b17      	ldr	r3, [pc, #92]	; (802a1ac <SystemInit+0xec>)
 802a150:	2200      	movs	r2, #0
 802a152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802a154:	4b15      	ldr	r3, [pc, #84]	; (802a1ac <SystemInit+0xec>)
 802a156:	4a19      	ldr	r2, [pc, #100]	; (802a1bc <SystemInit+0xfc>)
 802a158:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802a15a:	4b14      	ldr	r3, [pc, #80]	; (802a1ac <SystemInit+0xec>)
 802a15c:	2200      	movs	r2, #0
 802a15e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802a160:	4b12      	ldr	r3, [pc, #72]	; (802a1ac <SystemInit+0xec>)
 802a162:	4a16      	ldr	r2, [pc, #88]	; (802a1bc <SystemInit+0xfc>)
 802a164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802a166:	4b11      	ldr	r3, [pc, #68]	; (802a1ac <SystemInit+0xec>)
 802a168:	2200      	movs	r2, #0
 802a16a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802a16c:	4b0f      	ldr	r3, [pc, #60]	; (802a1ac <SystemInit+0xec>)
 802a16e:	681b      	ldr	r3, [r3, #0]
 802a170:	4a0e      	ldr	r2, [pc, #56]	; (802a1ac <SystemInit+0xec>)
 802a172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a176:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802a178:	4b0c      	ldr	r3, [pc, #48]	; (802a1ac <SystemInit+0xec>)
 802a17a:	2200      	movs	r2, #0
 802a17c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802a17e:	4b10      	ldr	r3, [pc, #64]	; (802a1c0 <SystemInit+0x100>)
 802a180:	681a      	ldr	r2, [r3, #0]
 802a182:	4b10      	ldr	r3, [pc, #64]	; (802a1c4 <SystemInit+0x104>)
 802a184:	4013      	ands	r3, r2
 802a186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802a18a:	d202      	bcs.n	802a192 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802a18c:	4b0e      	ldr	r3, [pc, #56]	; (802a1c8 <SystemInit+0x108>)
 802a18e:	2201      	movs	r2, #1
 802a190:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802a192:	4b0e      	ldr	r3, [pc, #56]	; (802a1cc <SystemInit+0x10c>)
 802a194:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802a198:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802a19a:	bf00      	nop
 802a19c:	46bd      	mov	sp, r7
 802a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a2:	4770      	bx	lr
 802a1a4:	e000ed00 	.word	0xe000ed00
 802a1a8:	52002000 	.word	0x52002000
 802a1ac:	58024400 	.word	0x58024400
 802a1b0:	eaf6ed7f 	.word	0xeaf6ed7f
 802a1b4:	02020200 	.word	0x02020200
 802a1b8:	01ff0000 	.word	0x01ff0000
 802a1bc:	01010280 	.word	0x01010280
 802a1c0:	5c001000 	.word	0x5c001000
 802a1c4:	ffff0000 	.word	0xffff0000
 802a1c8:	51008108 	.word	0x51008108
 802a1cc:	52004000 	.word	0x52004000

0802a1d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802a1d0:	b580      	push	{r7, lr}
 802a1d2:	b088      	sub	sp, #32
 802a1d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a1d6:	f107 0310 	add.w	r3, r7, #16
 802a1da:	2200      	movs	r2, #0
 802a1dc:	601a      	str	r2, [r3, #0]
 802a1de:	605a      	str	r2, [r3, #4]
 802a1e0:	609a      	str	r2, [r3, #8]
 802a1e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a1e4:	1d3b      	adds	r3, r7, #4
 802a1e6:	2200      	movs	r2, #0
 802a1e8:	601a      	str	r2, [r3, #0]
 802a1ea:	605a      	str	r2, [r3, #4]
 802a1ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802a1ee:	4b1e      	ldr	r3, [pc, #120]	; (802a268 <MX_TIM2_Init+0x98>)
 802a1f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802a1f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802a1f6:	4b1c      	ldr	r3, [pc, #112]	; (802a268 <MX_TIM2_Init+0x98>)
 802a1f8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a1fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a1fe:	4b1a      	ldr	r3, [pc, #104]	; (802a268 <MX_TIM2_Init+0x98>)
 802a200:	2200      	movs	r2, #0
 802a202:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802a204:	4b18      	ldr	r3, [pc, #96]	; (802a268 <MX_TIM2_Init+0x98>)
 802a206:	2264      	movs	r2, #100	; 0x64
 802a208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a20a:	4b17      	ldr	r3, [pc, #92]	; (802a268 <MX_TIM2_Init+0x98>)
 802a20c:	2200      	movs	r2, #0
 802a20e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a210:	4b15      	ldr	r3, [pc, #84]	; (802a268 <MX_TIM2_Init+0x98>)
 802a212:	2200      	movs	r2, #0
 802a214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802a216:	4814      	ldr	r0, [pc, #80]	; (802a268 <MX_TIM2_Init+0x98>)
 802a218:	f00a f953 	bl	80344c2 <HAL_TIM_Base_Init>
 802a21c:	4603      	mov	r3, r0
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d001      	beq.n	802a226 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802a222:	f7ff fc61 	bl	8029ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a22a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802a22c:	f107 0310 	add.w	r3, r7, #16
 802a230:	4619      	mov	r1, r3
 802a232:	480d      	ldr	r0, [pc, #52]	; (802a268 <MX_TIM2_Init+0x98>)
 802a234:	f00a fb34 	bl	80348a0 <HAL_TIM_ConfigClockSource>
 802a238:	4603      	mov	r3, r0
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d001      	beq.n	802a242 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802a23e:	f7ff fc53 	bl	8029ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a242:	2300      	movs	r3, #0
 802a244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a246:	2300      	movs	r3, #0
 802a248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802a24a:	1d3b      	adds	r3, r7, #4
 802a24c:	4619      	mov	r1, r3
 802a24e:	4806      	ldr	r0, [pc, #24]	; (802a268 <MX_TIM2_Init+0x98>)
 802a250:	f00a fd7e 	bl	8034d50 <HAL_TIMEx_MasterConfigSynchronization>
 802a254:	4603      	mov	r3, r0
 802a256:	2b00      	cmp	r3, #0
 802a258:	d001      	beq.n	802a25e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802a25a:	f7ff fc45 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802a25e:	bf00      	nop
 802a260:	3720      	adds	r7, #32
 802a262:	46bd      	mov	sp, r7
 802a264:	bd80      	pop	{r7, pc}
 802a266:	bf00      	nop
 802a268:	24024810 	.word	0x24024810

0802a26c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802a26c:	b580      	push	{r7, lr}
 802a26e:	b088      	sub	sp, #32
 802a270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a272:	f107 0310 	add.w	r3, r7, #16
 802a276:	2200      	movs	r2, #0
 802a278:	601a      	str	r2, [r3, #0]
 802a27a:	605a      	str	r2, [r3, #4]
 802a27c:	609a      	str	r2, [r3, #8]
 802a27e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a280:	1d3b      	adds	r3, r7, #4
 802a282:	2200      	movs	r2, #0
 802a284:	601a      	str	r2, [r3, #0]
 802a286:	605a      	str	r2, [r3, #4]
 802a288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802a28a:	4b1d      	ldr	r3, [pc, #116]	; (802a300 <MX_TIM3_Init+0x94>)
 802a28c:	4a1d      	ldr	r2, [pc, #116]	; (802a304 <MX_TIM3_Init+0x98>)
 802a28e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802a290:	4b1b      	ldr	r3, [pc, #108]	; (802a300 <MX_TIM3_Init+0x94>)
 802a292:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a298:	4b19      	ldr	r3, [pc, #100]	; (802a300 <MX_TIM3_Init+0x94>)
 802a29a:	2200      	movs	r2, #0
 802a29c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802a29e:	4b18      	ldr	r3, [pc, #96]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2a0:	220a      	movs	r2, #10
 802a2a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a2a4:	4b16      	ldr	r3, [pc, #88]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2a6:	2200      	movs	r2, #0
 802a2a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a2aa:	4b15      	ldr	r3, [pc, #84]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2ac:	2200      	movs	r2, #0
 802a2ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802a2b0:	4813      	ldr	r0, [pc, #76]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2b2:	f00a f906 	bl	80344c2 <HAL_TIM_Base_Init>
 802a2b6:	4603      	mov	r3, r0
 802a2b8:	2b00      	cmp	r3, #0
 802a2ba:	d001      	beq.n	802a2c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802a2bc:	f7ff fc14 	bl	8029ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a2c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802a2c6:	f107 0310 	add.w	r3, r7, #16
 802a2ca:	4619      	mov	r1, r3
 802a2cc:	480c      	ldr	r0, [pc, #48]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2ce:	f00a fae7 	bl	80348a0 <HAL_TIM_ConfigClockSource>
 802a2d2:	4603      	mov	r3, r0
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	d001      	beq.n	802a2dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802a2d8:	f7ff fc06 	bl	8029ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a2dc:	2300      	movs	r3, #0
 802a2de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a2e0:	2300      	movs	r3, #0
 802a2e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802a2e4:	1d3b      	adds	r3, r7, #4
 802a2e6:	4619      	mov	r1, r3
 802a2e8:	4805      	ldr	r0, [pc, #20]	; (802a300 <MX_TIM3_Init+0x94>)
 802a2ea:	f00a fd31 	bl	8034d50 <HAL_TIMEx_MasterConfigSynchronization>
 802a2ee:	4603      	mov	r3, r0
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d001      	beq.n	802a2f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802a2f4:	f7ff fbf8 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802a2f8:	bf00      	nop
 802a2fa:	3720      	adds	r7, #32
 802a2fc:	46bd      	mov	sp, r7
 802a2fe:	bd80      	pop	{r7, pc}
 802a300:	2402485c 	.word	0x2402485c
 802a304:	40000400 	.word	0x40000400

0802a308 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802a308:	b580      	push	{r7, lr}
 802a30a:	b088      	sub	sp, #32
 802a30c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a30e:	f107 0310 	add.w	r3, r7, #16
 802a312:	2200      	movs	r2, #0
 802a314:	601a      	str	r2, [r3, #0]
 802a316:	605a      	str	r2, [r3, #4]
 802a318:	609a      	str	r2, [r3, #8]
 802a31a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a31c:	1d3b      	adds	r3, r7, #4
 802a31e:	2200      	movs	r2, #0
 802a320:	601a      	str	r2, [r3, #0]
 802a322:	605a      	str	r2, [r3, #4]
 802a324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802a326:	4b1d      	ldr	r3, [pc, #116]	; (802a39c <MX_TIM4_Init+0x94>)
 802a328:	4a1d      	ldr	r2, [pc, #116]	; (802a3a0 <MX_TIM4_Init+0x98>)
 802a32a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802a32c:	4b1b      	ldr	r3, [pc, #108]	; (802a39c <MX_TIM4_Init+0x94>)
 802a32e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a334:	4b19      	ldr	r3, [pc, #100]	; (802a39c <MX_TIM4_Init+0x94>)
 802a336:	2200      	movs	r2, #0
 802a338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802a33a:	4b18      	ldr	r3, [pc, #96]	; (802a39c <MX_TIM4_Init+0x94>)
 802a33c:	2264      	movs	r2, #100	; 0x64
 802a33e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a340:	4b16      	ldr	r3, [pc, #88]	; (802a39c <MX_TIM4_Init+0x94>)
 802a342:	2200      	movs	r2, #0
 802a344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a346:	4b15      	ldr	r3, [pc, #84]	; (802a39c <MX_TIM4_Init+0x94>)
 802a348:	2200      	movs	r2, #0
 802a34a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802a34c:	4813      	ldr	r0, [pc, #76]	; (802a39c <MX_TIM4_Init+0x94>)
 802a34e:	f00a f8b8 	bl	80344c2 <HAL_TIM_Base_Init>
 802a352:	4603      	mov	r3, r0
 802a354:	2b00      	cmp	r3, #0
 802a356:	d001      	beq.n	802a35c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802a358:	f7ff fbc6 	bl	8029ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802a362:	f107 0310 	add.w	r3, r7, #16
 802a366:	4619      	mov	r1, r3
 802a368:	480c      	ldr	r0, [pc, #48]	; (802a39c <MX_TIM4_Init+0x94>)
 802a36a:	f00a fa99 	bl	80348a0 <HAL_TIM_ConfigClockSource>
 802a36e:	4603      	mov	r3, r0
 802a370:	2b00      	cmp	r3, #0
 802a372:	d001      	beq.n	802a378 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802a374:	f7ff fbb8 	bl	8029ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a378:	2300      	movs	r3, #0
 802a37a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a37c:	2300      	movs	r3, #0
 802a37e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802a380:	1d3b      	adds	r3, r7, #4
 802a382:	4619      	mov	r1, r3
 802a384:	4805      	ldr	r0, [pc, #20]	; (802a39c <MX_TIM4_Init+0x94>)
 802a386:	f00a fce3 	bl	8034d50 <HAL_TIMEx_MasterConfigSynchronization>
 802a38a:	4603      	mov	r3, r0
 802a38c:	2b00      	cmp	r3, #0
 802a38e:	d001      	beq.n	802a394 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802a390:	f7ff fbaa 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802a394:	bf00      	nop
 802a396:	3720      	adds	r7, #32
 802a398:	46bd      	mov	sp, r7
 802a39a:	bd80      	pop	{r7, pc}
 802a39c:	240248a8 	.word	0x240248a8
 802a3a0:	40000800 	.word	0x40000800

0802a3a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802a3a4:	b580      	push	{r7, lr}
 802a3a6:	b086      	sub	sp, #24
 802a3a8:	af00      	add	r7, sp, #0
 802a3aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	681b      	ldr	r3, [r3, #0]
 802a3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a3b4:	d117      	bne.n	802a3e6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802a3b6:	4b2a      	ldr	r3, [pc, #168]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a3b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a3bc:	4a28      	ldr	r2, [pc, #160]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a3be:	f043 0301 	orr.w	r3, r3, #1
 802a3c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a3c6:	4b26      	ldr	r3, [pc, #152]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a3c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a3cc:	f003 0301 	and.w	r3, r3, #1
 802a3d0:	617b      	str	r3, [r7, #20]
 802a3d2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802a3d4:	2200      	movs	r2, #0
 802a3d6:	2101      	movs	r1, #1
 802a3d8:	201c      	movs	r0, #28
 802a3da:	f000 ff3a 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802a3de:	201c      	movs	r0, #28
 802a3e0:	f000 ff51 	bl	802b286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802a3e4:	e038      	b.n	802a458 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802a3e6:	687b      	ldr	r3, [r7, #4]
 802a3e8:	681b      	ldr	r3, [r3, #0]
 802a3ea:	4a1e      	ldr	r2, [pc, #120]	; (802a464 <HAL_TIM_Base_MspInit+0xc0>)
 802a3ec:	4293      	cmp	r3, r2
 802a3ee:	d117      	bne.n	802a420 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802a3f0:	4b1b      	ldr	r3, [pc, #108]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a3f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a3f6:	4a1a      	ldr	r2, [pc, #104]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a3f8:	f043 0302 	orr.w	r3, r3, #2
 802a3fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a400:	4b17      	ldr	r3, [pc, #92]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a406:	f003 0302 	and.w	r3, r3, #2
 802a40a:	613b      	str	r3, [r7, #16]
 802a40c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802a40e:	2200      	movs	r2, #0
 802a410:	2101      	movs	r1, #1
 802a412:	201d      	movs	r0, #29
 802a414:	f000 ff1d 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802a418:	201d      	movs	r0, #29
 802a41a:	f000 ff34 	bl	802b286 <HAL_NVIC_EnableIRQ>
}
 802a41e:	e01b      	b.n	802a458 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	681b      	ldr	r3, [r3, #0]
 802a424:	4a10      	ldr	r2, [pc, #64]	; (802a468 <HAL_TIM_Base_MspInit+0xc4>)
 802a426:	4293      	cmp	r3, r2
 802a428:	d116      	bne.n	802a458 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802a42a:	4b0d      	ldr	r3, [pc, #52]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a42c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a430:	4a0b      	ldr	r2, [pc, #44]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a432:	f043 0304 	orr.w	r3, r3, #4
 802a436:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a43a:	4b09      	ldr	r3, [pc, #36]	; (802a460 <HAL_TIM_Base_MspInit+0xbc>)
 802a43c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a440:	f003 0304 	and.w	r3, r3, #4
 802a444:	60fb      	str	r3, [r7, #12]
 802a446:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802a448:	2200      	movs	r2, #0
 802a44a:	2100      	movs	r1, #0
 802a44c:	201e      	movs	r0, #30
 802a44e:	f000 ff00 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802a452:	201e      	movs	r0, #30
 802a454:	f000 ff17 	bl	802b286 <HAL_NVIC_EnableIRQ>
}
 802a458:	bf00      	nop
 802a45a:	3718      	adds	r7, #24
 802a45c:	46bd      	mov	sp, r7
 802a45e:	bd80      	pop	{r7, pc}
 802a460:	58024400 	.word	0x58024400
 802a464:	40000400 	.word	0x40000400
 802a468:	40000800 	.word	0x40000800

0802a46c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802a46c:	b580      	push	{r7, lr}
 802a46e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802a470:	4b25      	ldr	r3, [pc, #148]	; (802a508 <MX_UART4_Init+0x9c>)
 802a472:	4a26      	ldr	r2, [pc, #152]	; (802a50c <MX_UART4_Init+0xa0>)
 802a474:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802a476:	4b24      	ldr	r3, [pc, #144]	; (802a508 <MX_UART4_Init+0x9c>)
 802a478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a47c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802a47e:	4b22      	ldr	r3, [pc, #136]	; (802a508 <MX_UART4_Init+0x9c>)
 802a480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a484:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802a486:	4b20      	ldr	r3, [pc, #128]	; (802a508 <MX_UART4_Init+0x9c>)
 802a488:	2200      	movs	r2, #0
 802a48a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802a48c:	4b1e      	ldr	r3, [pc, #120]	; (802a508 <MX_UART4_Init+0x9c>)
 802a48e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a492:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802a494:	4b1c      	ldr	r3, [pc, #112]	; (802a508 <MX_UART4_Init+0x9c>)
 802a496:	220c      	movs	r2, #12
 802a498:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a49a:	4b1b      	ldr	r3, [pc, #108]	; (802a508 <MX_UART4_Init+0x9c>)
 802a49c:	2200      	movs	r2, #0
 802a49e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a4a0:	4b19      	ldr	r3, [pc, #100]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4a2:	2200      	movs	r2, #0
 802a4a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a4a6:	4b18      	ldr	r3, [pc, #96]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4a8:	2200      	movs	r2, #0
 802a4aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a4ac:	4b16      	ldr	r3, [pc, #88]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4ae:	2200      	movs	r2, #0
 802a4b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a4b2:	4b15      	ldr	r3, [pc, #84]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4b4:	2220      	movs	r2, #32
 802a4b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a4b8:	4b13      	ldr	r3, [pc, #76]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a4be:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802a4c0:	4811      	ldr	r0, [pc, #68]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4c2:	f00a fcf1 	bl	8034ea8 <HAL_UART_Init>
 802a4c6:	4603      	mov	r3, r0
 802a4c8:	2b00      	cmp	r3, #0
 802a4ca:	d001      	beq.n	802a4d0 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802a4cc:	f7ff fb0c 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4d0:	2100      	movs	r1, #0
 802a4d2:	480d      	ldr	r0, [pc, #52]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4d4:	f00d fa3e 	bl	8037954 <HAL_UARTEx_SetTxFifoThreshold>
 802a4d8:	4603      	mov	r3, r0
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d001      	beq.n	802a4e2 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802a4de:	f7ff fb03 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4e2:	2100      	movs	r1, #0
 802a4e4:	4808      	ldr	r0, [pc, #32]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4e6:	f00d fa73 	bl	80379d0 <HAL_UARTEx_SetRxFifoThreshold>
 802a4ea:	4603      	mov	r3, r0
 802a4ec:	2b00      	cmp	r3, #0
 802a4ee:	d001      	beq.n	802a4f4 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802a4f0:	f7ff fafa 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802a4f4:	4804      	ldr	r0, [pc, #16]	; (802a508 <MX_UART4_Init+0x9c>)
 802a4f6:	f00d f9f4 	bl	80378e2 <HAL_UARTEx_DisableFifoMode>
 802a4fa:	4603      	mov	r3, r0
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	d001      	beq.n	802a504 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802a500:	f7ff faf2 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802a504:	bf00      	nop
 802a506:	bd80      	pop	{r7, pc}
 802a508:	240248f4 	.word	0x240248f4
 802a50c:	40004c00 	.word	0x40004c00

0802a510 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802a510:	b580      	push	{r7, lr}
 802a512:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802a514:	4b22      	ldr	r3, [pc, #136]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a516:	4a23      	ldr	r2, [pc, #140]	; (802a5a4 <MX_UART7_Init+0x94>)
 802a518:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802a51a:	4b21      	ldr	r3, [pc, #132]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a51c:	4a22      	ldr	r2, [pc, #136]	; (802a5a8 <MX_UART7_Init+0x98>)
 802a51e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802a520:	4b1f      	ldr	r3, [pc, #124]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a522:	2200      	movs	r2, #0
 802a524:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802a526:	4b1e      	ldr	r3, [pc, #120]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a528:	2200      	movs	r2, #0
 802a52a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802a52c:	4b1c      	ldr	r3, [pc, #112]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a52e:	2200      	movs	r2, #0
 802a530:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802a532:	4b1b      	ldr	r3, [pc, #108]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a534:	220c      	movs	r2, #12
 802a536:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a538:	4b19      	ldr	r3, [pc, #100]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a53a:	2200      	movs	r2, #0
 802a53c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802a53e:	4b18      	ldr	r3, [pc, #96]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a540:	2200      	movs	r2, #0
 802a542:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a544:	4b16      	ldr	r3, [pc, #88]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a546:	2200      	movs	r2, #0
 802a548:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a54a:	4b15      	ldr	r3, [pc, #84]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a54c:	2200      	movs	r2, #0
 802a54e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a550:	4b13      	ldr	r3, [pc, #76]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a552:	2200      	movs	r2, #0
 802a554:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802a556:	4812      	ldr	r0, [pc, #72]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a558:	f00a fca6 	bl	8034ea8 <HAL_UART_Init>
 802a55c:	4603      	mov	r3, r0
 802a55e:	2b00      	cmp	r3, #0
 802a560:	d001      	beq.n	802a566 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802a562:	f7ff fac1 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a566:	2100      	movs	r1, #0
 802a568:	480d      	ldr	r0, [pc, #52]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a56a:	f00d f9f3 	bl	8037954 <HAL_UARTEx_SetTxFifoThreshold>
 802a56e:	4603      	mov	r3, r0
 802a570:	2b00      	cmp	r3, #0
 802a572:	d001      	beq.n	802a578 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802a574:	f7ff fab8 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a578:	2100      	movs	r1, #0
 802a57a:	4809      	ldr	r0, [pc, #36]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a57c:	f00d fa28 	bl	80379d0 <HAL_UARTEx_SetRxFifoThreshold>
 802a580:	4603      	mov	r3, r0
 802a582:	2b00      	cmp	r3, #0
 802a584:	d001      	beq.n	802a58a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802a586:	f7ff faaf 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802a58a:	4805      	ldr	r0, [pc, #20]	; (802a5a0 <MX_UART7_Init+0x90>)
 802a58c:	f00d f9a9 	bl	80378e2 <HAL_UARTEx_DisableFifoMode>
 802a590:	4603      	mov	r3, r0
 802a592:	2b00      	cmp	r3, #0
 802a594:	d001      	beq.n	802a59a <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802a596:	f7ff faa7 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802a59a:	bf00      	nop
 802a59c:	bd80      	pop	{r7, pc}
 802a59e:	bf00      	nop
 802a5a0:	24024984 	.word	0x24024984
 802a5a4:	40007800 	.word	0x40007800
 802a5a8:	001312d0 	.word	0x001312d0

0802a5ac <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802a5ac:	b580      	push	{r7, lr}
 802a5ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802a5b0:	4b26      	ldr	r3, [pc, #152]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5b2:	4a27      	ldr	r2, [pc, #156]	; (802a650 <MX_UART8_Init+0xa4>)
 802a5b4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802a5b6:	4b25      	ldr	r3, [pc, #148]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5b8:	4a26      	ldr	r2, [pc, #152]	; (802a654 <MX_UART8_Init+0xa8>)
 802a5ba:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802a5bc:	4b23      	ldr	r3, [pc, #140]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a5c2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802a5c4:	4b21      	ldr	r3, [pc, #132]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5c6:	2200      	movs	r2, #0
 802a5c8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802a5ca:	4b20      	ldr	r3, [pc, #128]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a5d0:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802a5d2:	4b1e      	ldr	r3, [pc, #120]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5d4:	220c      	movs	r2, #12
 802a5d6:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a5d8:	4b1c      	ldr	r3, [pc, #112]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5da:	2200      	movs	r2, #0
 802a5dc:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802a5de:	4b1b      	ldr	r3, [pc, #108]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5e0:	2200      	movs	r2, #0
 802a5e2:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a5e4:	4b19      	ldr	r3, [pc, #100]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5e6:	2200      	movs	r2, #0
 802a5e8:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a5ea:	4b18      	ldr	r3, [pc, #96]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5ec:	2200      	movs	r2, #0
 802a5ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a5f0:	4b16      	ldr	r3, [pc, #88]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5f2:	2220      	movs	r2, #32
 802a5f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a5f6:	4b15      	ldr	r3, [pc, #84]	; (802a64c <MX_UART8_Init+0xa0>)
 802a5f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a5fc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802a5fe:	4813      	ldr	r0, [pc, #76]	; (802a64c <MX_UART8_Init+0xa0>)
 802a600:	f00a fc52 	bl	8034ea8 <HAL_UART_Init>
 802a604:	4603      	mov	r3, r0
 802a606:	2b00      	cmp	r3, #0
 802a608:	d001      	beq.n	802a60e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802a60a:	f7ff fa6d 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a60e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a612:	480e      	ldr	r0, [pc, #56]	; (802a64c <MX_UART8_Init+0xa0>)
 802a614:	f00d f99e 	bl	8037954 <HAL_UARTEx_SetTxFifoThreshold>
 802a618:	4603      	mov	r3, r0
 802a61a:	2b00      	cmp	r3, #0
 802a61c:	d001      	beq.n	802a622 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802a61e:	f7ff fa63 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a622:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a626:	4809      	ldr	r0, [pc, #36]	; (802a64c <MX_UART8_Init+0xa0>)
 802a628:	f00d f9d2 	bl	80379d0 <HAL_UARTEx_SetRxFifoThreshold>
 802a62c:	4603      	mov	r3, r0
 802a62e:	2b00      	cmp	r3, #0
 802a630:	d001      	beq.n	802a636 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802a632:	f7ff fa59 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802a636:	4805      	ldr	r0, [pc, #20]	; (802a64c <MX_UART8_Init+0xa0>)
 802a638:	f00d f918 	bl	803786c <HAL_UARTEx_EnableFifoMode>
 802a63c:	4603      	mov	r3, r0
 802a63e:	2b00      	cmp	r3, #0
 802a640:	d001      	beq.n	802a646 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802a642:	f7ff fa51 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802a646:	bf00      	nop
 802a648:	bd80      	pop	{r7, pc}
 802a64a:	bf00      	nop
 802a64c:	24024a14 	.word	0x24024a14
 802a650:	40007c00 	.word	0x40007c00
 802a654:	001312d0 	.word	0x001312d0

0802a658 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802a658:	b580      	push	{r7, lr}
 802a65a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802a65c:	4b22      	ldr	r3, [pc, #136]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a65e:	4a23      	ldr	r2, [pc, #140]	; (802a6ec <MX_USART2_UART_Init+0x94>)
 802a660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802a662:	4b21      	ldr	r3, [pc, #132]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a66a:	4b1f      	ldr	r3, [pc, #124]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a66c:	2200      	movs	r2, #0
 802a66e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802a670:	4b1d      	ldr	r3, [pc, #116]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a672:	2200      	movs	r2, #0
 802a674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802a676:	4b1c      	ldr	r3, [pc, #112]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a678:	2200      	movs	r2, #0
 802a67a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802a67c:	4b1a      	ldr	r3, [pc, #104]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a67e:	220c      	movs	r2, #12
 802a680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a682:	4b19      	ldr	r3, [pc, #100]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a684:	2200      	movs	r2, #0
 802a686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a688:	4b17      	ldr	r3, [pc, #92]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a68a:	2200      	movs	r2, #0
 802a68c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a68e:	4b16      	ldr	r3, [pc, #88]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a690:	2200      	movs	r2, #0
 802a692:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a694:	4b14      	ldr	r3, [pc, #80]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a696:	2200      	movs	r2, #0
 802a698:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a69a:	4b13      	ldr	r3, [pc, #76]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a69c:	2200      	movs	r2, #0
 802a69e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802a6a0:	4811      	ldr	r0, [pc, #68]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a6a2:	f00a fc01 	bl	8034ea8 <HAL_UART_Init>
 802a6a6:	4603      	mov	r3, r0
 802a6a8:	2b00      	cmp	r3, #0
 802a6aa:	d001      	beq.n	802a6b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802a6ac:	f7ff fa1c 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a6b0:	2100      	movs	r1, #0
 802a6b2:	480d      	ldr	r0, [pc, #52]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a6b4:	f00d f94e 	bl	8037954 <HAL_UARTEx_SetTxFifoThreshold>
 802a6b8:	4603      	mov	r3, r0
 802a6ba:	2b00      	cmp	r3, #0
 802a6bc:	d001      	beq.n	802a6c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802a6be:	f7ff fa13 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a6c2:	2100      	movs	r1, #0
 802a6c4:	4808      	ldr	r0, [pc, #32]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a6c6:	f00d f983 	bl	80379d0 <HAL_UARTEx_SetRxFifoThreshold>
 802a6ca:	4603      	mov	r3, r0
 802a6cc:	2b00      	cmp	r3, #0
 802a6ce:	d001      	beq.n	802a6d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802a6d0:	f7ff fa0a 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802a6d4:	4804      	ldr	r0, [pc, #16]	; (802a6e8 <MX_USART2_UART_Init+0x90>)
 802a6d6:	f00d f904 	bl	80378e2 <HAL_UARTEx_DisableFifoMode>
 802a6da:	4603      	mov	r3, r0
 802a6dc:	2b00      	cmp	r3, #0
 802a6de:	d001      	beq.n	802a6e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802a6e0:	f7ff fa02 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802a6e4:	bf00      	nop
 802a6e6:	bd80      	pop	{r7, pc}
 802a6e8:	24024aa4 	.word	0x24024aa4
 802a6ec:	40004400 	.word	0x40004400

0802a6f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802a6f0:	b580      	push	{r7, lr}
 802a6f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802a6f4:	4b26      	ldr	r3, [pc, #152]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a6f6:	4a27      	ldr	r2, [pc, #156]	; (802a794 <MX_USART3_UART_Init+0xa4>)
 802a6f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802a6fa:	4b25      	ldr	r3, [pc, #148]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a6fc:	4a26      	ldr	r2, [pc, #152]	; (802a798 <MX_USART3_UART_Init+0xa8>)
 802a6fe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802a700:	4b23      	ldr	r3, [pc, #140]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802a708:	4b21      	ldr	r3, [pc, #132]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a70a:	2200      	movs	r2, #0
 802a70c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802a70e:	4b20      	ldr	r3, [pc, #128]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a714:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802a716:	4b1e      	ldr	r3, [pc, #120]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a718:	220c      	movs	r2, #12
 802a71a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a71c:	4b1c      	ldr	r3, [pc, #112]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a71e:	2200      	movs	r2, #0
 802a720:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802a722:	4b1b      	ldr	r3, [pc, #108]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a724:	2200      	movs	r2, #0
 802a726:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a728:	4b19      	ldr	r3, [pc, #100]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a72a:	2200      	movs	r2, #0
 802a72c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a72e:	4b18      	ldr	r3, [pc, #96]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a730:	2200      	movs	r2, #0
 802a732:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a734:	4b16      	ldr	r3, [pc, #88]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a736:	2220      	movs	r2, #32
 802a738:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a73a:	4b15      	ldr	r3, [pc, #84]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a73c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a740:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802a742:	4813      	ldr	r0, [pc, #76]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a744:	f00a fbb0 	bl	8034ea8 <HAL_UART_Init>
 802a748:	4603      	mov	r3, r0
 802a74a:	2b00      	cmp	r3, #0
 802a74c:	d001      	beq.n	802a752 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802a74e:	f7ff f9cb 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a752:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a756:	480e      	ldr	r0, [pc, #56]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a758:	f00d f8fc 	bl	8037954 <HAL_UARTEx_SetTxFifoThreshold>
 802a75c:	4603      	mov	r3, r0
 802a75e:	2b00      	cmp	r3, #0
 802a760:	d001      	beq.n	802a766 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802a762:	f7ff f9c1 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a766:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a76a:	4809      	ldr	r0, [pc, #36]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a76c:	f00d f930 	bl	80379d0 <HAL_UARTEx_SetRxFifoThreshold>
 802a770:	4603      	mov	r3, r0
 802a772:	2b00      	cmp	r3, #0
 802a774:	d001      	beq.n	802a77a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802a776:	f7ff f9b7 	bl	8029ae8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802a77a:	4805      	ldr	r0, [pc, #20]	; (802a790 <MX_USART3_UART_Init+0xa0>)
 802a77c:	f00d f876 	bl	803786c <HAL_UARTEx_EnableFifoMode>
 802a780:	4603      	mov	r3, r0
 802a782:	2b00      	cmp	r3, #0
 802a784:	d001      	beq.n	802a78a <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802a786:	f7ff f9af 	bl	8029ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802a78a:	bf00      	nop
 802a78c:	bd80      	pop	{r7, pc}
 802a78e:	bf00      	nop
 802a790:	24024b34 	.word	0x24024b34
 802a794:	40004800 	.word	0x40004800
 802a798:	001312d0 	.word	0x001312d0

0802a79c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802a79c:	b580      	push	{r7, lr}
 802a79e:	b0c0      	sub	sp, #256	; 0x100
 802a7a0:	af00      	add	r7, sp, #0
 802a7a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a7a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a7a8:	2200      	movs	r2, #0
 802a7aa:	601a      	str	r2, [r3, #0]
 802a7ac:	605a      	str	r2, [r3, #4]
 802a7ae:	609a      	str	r2, [r3, #8]
 802a7b0:	60da      	str	r2, [r3, #12]
 802a7b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a7b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a7b8:	22bc      	movs	r2, #188	; 0xbc
 802a7ba:	2100      	movs	r1, #0
 802a7bc:	4618      	mov	r0, r3
 802a7be:	f011 fb55 	bl	803be6c <memset>
  if(uartHandle->Instance==UART4)
 802a7c2:	687b      	ldr	r3, [r7, #4]
 802a7c4:	681b      	ldr	r3, [r3, #0]
 802a7c6:	4ac2      	ldr	r2, [pc, #776]	; (802aad0 <HAL_UART_MspInit+0x334>)
 802a7c8:	4293      	cmp	r3, r2
 802a7ca:	d14a      	bne.n	802a862 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802a7cc:	2302      	movs	r3, #2
 802a7ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a7d0:	2300      	movs	r3, #0
 802a7d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a7d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a7da:	4618      	mov	r0, r3
 802a7dc:	f007 f9dc 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802a7e0:	4603      	mov	r3, r0
 802a7e2:	2b00      	cmp	r3, #0
 802a7e4:	d001      	beq.n	802a7ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802a7e6:	f7ff f97f 	bl	8029ae8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802a7ea:	4bba      	ldr	r3, [pc, #744]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a7ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a7f0:	4ab8      	ldr	r2, [pc, #736]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a7f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a7f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a7fa:	4bb6      	ldr	r3, [pc, #728]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a7fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802a804:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a808:	4bb2      	ldr	r3, [pc, #712]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a80a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a80e:	4ab1      	ldr	r2, [pc, #708]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a810:	f043 0301 	orr.w	r3, r3, #1
 802a814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a818:	4bae      	ldr	r3, [pc, #696]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a81a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a81e:	f003 0301 	and.w	r3, r3, #1
 802a822:	62bb      	str	r3, [r7, #40]	; 0x28
 802a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a826:	2303      	movs	r3, #3
 802a828:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a82c:	2302      	movs	r3, #2
 802a82e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a832:	2300      	movs	r3, #0
 802a834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a838:	2300      	movs	r3, #0
 802a83a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802a83e:	2308      	movs	r3, #8
 802a840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a844:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a848:	4619      	mov	r1, r3
 802a84a:	48a3      	ldr	r0, [pc, #652]	; (802aad8 <HAL_UART_MspInit+0x33c>)
 802a84c:	f003 fd54 	bl	802e2f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802a850:	2200      	movs	r2, #0
 802a852:	2100      	movs	r1, #0
 802a854:	2034      	movs	r0, #52	; 0x34
 802a856:	f000 fcfc 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802a85a:	2034      	movs	r0, #52	; 0x34
 802a85c:	f000 fd13 	bl	802b286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802a860:	e130      	b.n	802aac4 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802a862:	687b      	ldr	r3, [r7, #4]
 802a864:	681b      	ldr	r3, [r3, #0]
 802a866:	4a9d      	ldr	r2, [pc, #628]	; (802aadc <HAL_UART_MspInit+0x340>)
 802a868:	4293      	cmp	r3, r2
 802a86a:	d143      	bne.n	802a8f4 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802a86c:	2302      	movs	r3, #2
 802a86e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a870:	2300      	movs	r3, #0
 802a872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a87a:	4618      	mov	r0, r3
 802a87c:	f007 f98c 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802a880:	4603      	mov	r3, r0
 802a882:	2b00      	cmp	r3, #0
 802a884:	d001      	beq.n	802a88a <HAL_UART_MspInit+0xee>
      Error_Handler();
 802a886:	f7ff f92f 	bl	8029ae8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802a88a:	4b92      	ldr	r3, [pc, #584]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a88c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a890:	4a90      	ldr	r2, [pc, #576]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a896:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a89a:	4b8e      	ldr	r3, [pc, #568]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a89c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a8a4:	627b      	str	r3, [r7, #36]	; 0x24
 802a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a8a8:	4b8a      	ldr	r3, [pc, #552]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a8aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8ae:	4a89      	ldr	r2, [pc, #548]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a8b0:	f043 0310 	orr.w	r3, r3, #16
 802a8b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a8b8:	4b86      	ldr	r3, [pc, #536]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8be:	f003 0310 	and.w	r3, r3, #16
 802a8c2:	623b      	str	r3, [r7, #32]
 802a8c4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802a8c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802a8ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a8ce:	2302      	movs	r3, #2
 802a8d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a8d4:	2300      	movs	r3, #0
 802a8d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a8da:	2300      	movs	r3, #0
 802a8dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802a8e0:	2307      	movs	r3, #7
 802a8e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a8e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a8ea:	4619      	mov	r1, r3
 802a8ec:	487c      	ldr	r0, [pc, #496]	; (802aae0 <HAL_UART_MspInit+0x344>)
 802a8ee:	f003 fd03 	bl	802e2f8 <HAL_GPIO_Init>
}
 802a8f2:	e0e7      	b.n	802aac4 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802a8f4:	687b      	ldr	r3, [r7, #4]
 802a8f6:	681b      	ldr	r3, [r3, #0]
 802a8f8:	4a7a      	ldr	r2, [pc, #488]	; (802aae4 <HAL_UART_MspInit+0x348>)
 802a8fa:	4293      	cmp	r3, r2
 802a8fc:	d14a      	bne.n	802a994 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802a8fe:	2302      	movs	r3, #2
 802a900:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a902:	2300      	movs	r3, #0
 802a904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a90c:	4618      	mov	r0, r3
 802a90e:	f007 f943 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802a912:	4603      	mov	r3, r0
 802a914:	2b00      	cmp	r3, #0
 802a916:	d001      	beq.n	802a91c <HAL_UART_MspInit+0x180>
      Error_Handler();
 802a918:	f7ff f8e6 	bl	8029ae8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802a91c:	4b6d      	ldr	r3, [pc, #436]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a91e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a922:	4a6c      	ldr	r2, [pc, #432]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a92c:	4b69      	ldr	r3, [pc, #420]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a92e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a936:	61fb      	str	r3, [r7, #28]
 802a938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a93a:	4b66      	ldr	r3, [pc, #408]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a93c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a940:	4a64      	ldr	r2, [pc, #400]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a942:	f043 0310 	orr.w	r3, r3, #16
 802a946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a94a:	4b62      	ldr	r3, [pc, #392]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a94c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a950:	f003 0310 	and.w	r3, r3, #16
 802a954:	61bb      	str	r3, [r7, #24]
 802a956:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a958:	2303      	movs	r3, #3
 802a95a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a95e:	2302      	movs	r3, #2
 802a960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a964:	2300      	movs	r3, #0
 802a966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a96a:	2300      	movs	r3, #0
 802a96c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802a970:	2308      	movs	r3, #8
 802a972:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a976:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a97a:	4619      	mov	r1, r3
 802a97c:	4858      	ldr	r0, [pc, #352]	; (802aae0 <HAL_UART_MspInit+0x344>)
 802a97e:	f003 fcbb 	bl	802e2f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802a982:	2200      	movs	r2, #0
 802a984:	2102      	movs	r1, #2
 802a986:	2053      	movs	r0, #83	; 0x53
 802a988:	f000 fc63 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802a98c:	2053      	movs	r0, #83	; 0x53
 802a98e:	f000 fc7a 	bl	802b286 <HAL_NVIC_EnableIRQ>
}
 802a992:	e097      	b.n	802aac4 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802a994:	687b      	ldr	r3, [r7, #4]
 802a996:	681b      	ldr	r3, [r3, #0]
 802a998:	4a53      	ldr	r2, [pc, #332]	; (802aae8 <HAL_UART_MspInit+0x34c>)
 802a99a:	4293      	cmp	r3, r2
 802a99c:	d142      	bne.n	802aa24 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802a99e:	2302      	movs	r3, #2
 802a9a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a9a2:	2300      	movs	r3, #0
 802a9a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a9a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a9ac:	4618      	mov	r0, r3
 802a9ae:	f007 f8f3 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802a9b2:	4603      	mov	r3, r0
 802a9b4:	2b00      	cmp	r3, #0
 802a9b6:	d001      	beq.n	802a9bc <HAL_UART_MspInit+0x220>
      Error_Handler();
 802a9b8:	f7ff f896 	bl	8029ae8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802a9bc:	4b45      	ldr	r3, [pc, #276]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a9c2:	4a44      	ldr	r2, [pc, #272]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a9c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a9cc:	4b41      	ldr	r3, [pc, #260]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a9d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a9d6:	617b      	str	r3, [r7, #20]
 802a9d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a9da:	4b3e      	ldr	r3, [pc, #248]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9e0:	4a3c      	ldr	r2, [pc, #240]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9e2:	f043 0301 	orr.w	r3, r3, #1
 802a9e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a9ea:	4b3a      	ldr	r3, [pc, #232]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802a9ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a9f0:	f003 0301 	and.w	r3, r3, #1
 802a9f4:	613b      	str	r3, [r7, #16]
 802a9f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802a9f8:	230c      	movs	r3, #12
 802a9fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a9fe:	2302      	movs	r3, #2
 802aa00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aa04:	2300      	movs	r3, #0
 802aa06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aa0a:	2300      	movs	r3, #0
 802aa0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802aa10:	2307      	movs	r3, #7
 802aa12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802aa16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aa1a:	4619      	mov	r1, r3
 802aa1c:	482e      	ldr	r0, [pc, #184]	; (802aad8 <HAL_UART_MspInit+0x33c>)
 802aa1e:	f003 fc6b 	bl	802e2f8 <HAL_GPIO_Init>
}
 802aa22:	e04f      	b.n	802aac4 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802aa24:	687b      	ldr	r3, [r7, #4]
 802aa26:	681b      	ldr	r3, [r3, #0]
 802aa28:	4a30      	ldr	r2, [pc, #192]	; (802aaec <HAL_UART_MspInit+0x350>)
 802aa2a:	4293      	cmp	r3, r2
 802aa2c:	d14a      	bne.n	802aac4 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802aa2e:	2302      	movs	r3, #2
 802aa30:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802aa32:	2300      	movs	r3, #0
 802aa34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802aa38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa3c:	4618      	mov	r0, r3
 802aa3e:	f007 f8ab 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 802aa42:	4603      	mov	r3, r0
 802aa44:	2b00      	cmp	r3, #0
 802aa46:	d001      	beq.n	802aa4c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802aa48:	f7ff f84e 	bl	8029ae8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802aa4c:	4b21      	ldr	r3, [pc, #132]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa52:	4a20      	ldr	r2, [pc, #128]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802aa58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802aa5c:	4b1d      	ldr	r3, [pc, #116]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802aa66:	60fb      	str	r3, [r7, #12]
 802aa68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802aa6a:	4b1a      	ldr	r3, [pc, #104]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa70:	4a18      	ldr	r2, [pc, #96]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa72:	f043 0308 	orr.w	r3, r3, #8
 802aa76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aa7a:	4b16      	ldr	r3, [pc, #88]	; (802aad4 <HAL_UART_MspInit+0x338>)
 802aa7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa80:	f003 0308 	and.w	r3, r3, #8
 802aa84:	60bb      	str	r3, [r7, #8]
 802aa86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802aa88:	f44f 7340 	mov.w	r3, #768	; 0x300
 802aa8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802aa90:	2302      	movs	r3, #2
 802aa92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aa96:	2300      	movs	r3, #0
 802aa98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aa9c:	2300      	movs	r3, #0
 802aa9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802aaa2:	2307      	movs	r3, #7
 802aaa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802aaa8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aaac:	4619      	mov	r1, r3
 802aaae:	4810      	ldr	r0, [pc, #64]	; (802aaf0 <HAL_UART_MspInit+0x354>)
 802aab0:	f003 fc22 	bl	802e2f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802aab4:	2200      	movs	r2, #0
 802aab6:	2100      	movs	r1, #0
 802aab8:	2027      	movs	r0, #39	; 0x27
 802aaba:	f000 fbca 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802aabe:	2027      	movs	r0, #39	; 0x27
 802aac0:	f000 fbe1 	bl	802b286 <HAL_NVIC_EnableIRQ>
}
 802aac4:	bf00      	nop
 802aac6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802aaca:	46bd      	mov	sp, r7
 802aacc:	bd80      	pop	{r7, pc}
 802aace:	bf00      	nop
 802aad0:	40004c00 	.word	0x40004c00
 802aad4:	58024400 	.word	0x58024400
 802aad8:	58020000 	.word	0x58020000
 802aadc:	40007800 	.word	0x40007800
 802aae0:	58021000 	.word	0x58021000
 802aae4:	40007c00 	.word	0x40007c00
 802aae8:	40004400 	.word	0x40004400
 802aaec:	40004800 	.word	0x40004800
 802aaf0:	58020c00 	.word	0x58020c00

0802aaf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802aaf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 802ab2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802aaf8:	f7ff fae2 	bl	802a0c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802aafc:	480c      	ldr	r0, [pc, #48]	; (802ab30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802aafe:	490d      	ldr	r1, [pc, #52]	; (802ab34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802ab00:	4a0d      	ldr	r2, [pc, #52]	; (802ab38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802ab02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802ab04:	e002      	b.n	802ab0c <LoopCopyDataInit>

0802ab06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802ab06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802ab08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802ab0a:	3304      	adds	r3, #4

0802ab0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802ab0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802ab0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802ab10:	d3f9      	bcc.n	802ab06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802ab12:	4a0a      	ldr	r2, [pc, #40]	; (802ab3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802ab14:	4c0a      	ldr	r4, [pc, #40]	; (802ab40 <LoopFillZerobss+0x22>)
  movs r3, #0
 802ab16:	2300      	movs	r3, #0
  b LoopFillZerobss
 802ab18:	e001      	b.n	802ab1e <LoopFillZerobss>

0802ab1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802ab1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802ab1c:	3204      	adds	r2, #4

0802ab1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802ab1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802ab20:	d3fb      	bcc.n	802ab1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802ab22:	f011 f947 	bl	803bdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802ab26:	f7fe fe37 	bl	8029798 <main>
  bx  lr
 802ab2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802ab2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802ab30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802ab34:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802ab38:	08058634 	.word	0x08058634
  ldr r2, =_sbss
 802ab3c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802ab40:	240267e8 	.word	0x240267e8

0802ab44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802ab44:	e7fe      	b.n	802ab44 <ADC3_IRQHandler>
	...

0802ab48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802ab48:	b580      	push	{r7, lr}
 802ab4a:	b082      	sub	sp, #8
 802ab4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802ab4e:	2003      	movs	r0, #3
 802ab50:	f000 fb74 	bl	802b23c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802ab54:	f006 fe4a 	bl	80317ec <HAL_RCC_GetSysClockFreq>
 802ab58:	4602      	mov	r2, r0
 802ab5a:	4b15      	ldr	r3, [pc, #84]	; (802abb0 <HAL_Init+0x68>)
 802ab5c:	699b      	ldr	r3, [r3, #24]
 802ab5e:	0a1b      	lsrs	r3, r3, #8
 802ab60:	f003 030f 	and.w	r3, r3, #15
 802ab64:	4913      	ldr	r1, [pc, #76]	; (802abb4 <HAL_Init+0x6c>)
 802ab66:	5ccb      	ldrb	r3, [r1, r3]
 802ab68:	f003 031f 	and.w	r3, r3, #31
 802ab6c:	fa22 f303 	lsr.w	r3, r2, r3
 802ab70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802ab72:	4b0f      	ldr	r3, [pc, #60]	; (802abb0 <HAL_Init+0x68>)
 802ab74:	699b      	ldr	r3, [r3, #24]
 802ab76:	f003 030f 	and.w	r3, r3, #15
 802ab7a:	4a0e      	ldr	r2, [pc, #56]	; (802abb4 <HAL_Init+0x6c>)
 802ab7c:	5cd3      	ldrb	r3, [r2, r3]
 802ab7e:	f003 031f 	and.w	r3, r3, #31
 802ab82:	687a      	ldr	r2, [r7, #4]
 802ab84:	fa22 f303 	lsr.w	r3, r2, r3
 802ab88:	4a0b      	ldr	r2, [pc, #44]	; (802abb8 <HAL_Init+0x70>)
 802ab8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802ab8c:	4a0b      	ldr	r2, [pc, #44]	; (802abbc <HAL_Init+0x74>)
 802ab8e:	687b      	ldr	r3, [r7, #4]
 802ab90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802ab92:	200f      	movs	r0, #15
 802ab94:	f000 f814 	bl	802abc0 <HAL_InitTick>
 802ab98:	4603      	mov	r3, r0
 802ab9a:	2b00      	cmp	r3, #0
 802ab9c:	d001      	beq.n	802aba2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802ab9e:	2301      	movs	r3, #1
 802aba0:	e002      	b.n	802aba8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802aba2:	f7ff f8e3 	bl	8029d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802aba6:	2300      	movs	r3, #0
}
 802aba8:	4618      	mov	r0, r3
 802abaa:	3708      	adds	r7, #8
 802abac:	46bd      	mov	sp, r7
 802abae:	bd80      	pop	{r7, pc}
 802abb0:	58024400 	.word	0x58024400
 802abb4:	08058508 	.word	0x08058508
 802abb8:	24000008 	.word	0x24000008
 802abbc:	24000004 	.word	0x24000004

0802abc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802abc0:	b580      	push	{r7, lr}
 802abc2:	b082      	sub	sp, #8
 802abc4:	af00      	add	r7, sp, #0
 802abc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802abc8:	4b15      	ldr	r3, [pc, #84]	; (802ac20 <HAL_InitTick+0x60>)
 802abca:	781b      	ldrb	r3, [r3, #0]
 802abcc:	2b00      	cmp	r3, #0
 802abce:	d101      	bne.n	802abd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802abd0:	2301      	movs	r3, #1
 802abd2:	e021      	b.n	802ac18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802abd4:	4b13      	ldr	r3, [pc, #76]	; (802ac24 <HAL_InitTick+0x64>)
 802abd6:	681a      	ldr	r2, [r3, #0]
 802abd8:	4b11      	ldr	r3, [pc, #68]	; (802ac20 <HAL_InitTick+0x60>)
 802abda:	781b      	ldrb	r3, [r3, #0]
 802abdc:	4619      	mov	r1, r3
 802abde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802abe2:	fbb3 f3f1 	udiv	r3, r3, r1
 802abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 802abea:	4618      	mov	r0, r3
 802abec:	f000 fb59 	bl	802b2a2 <HAL_SYSTICK_Config>
 802abf0:	4603      	mov	r3, r0
 802abf2:	2b00      	cmp	r3, #0
 802abf4:	d001      	beq.n	802abfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802abf6:	2301      	movs	r3, #1
 802abf8:	e00e      	b.n	802ac18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802abfa:	687b      	ldr	r3, [r7, #4]
 802abfc:	2b0f      	cmp	r3, #15
 802abfe:	d80a      	bhi.n	802ac16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802ac00:	2200      	movs	r2, #0
 802ac02:	6879      	ldr	r1, [r7, #4]
 802ac04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ac08:	f000 fb23 	bl	802b252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802ac0c:	4a06      	ldr	r2, [pc, #24]	; (802ac28 <HAL_InitTick+0x68>)
 802ac0e:	687b      	ldr	r3, [r7, #4]
 802ac10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802ac12:	2300      	movs	r3, #0
 802ac14:	e000      	b.n	802ac18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802ac16:	2301      	movs	r3, #1
}
 802ac18:	4618      	mov	r0, r3
 802ac1a:	3708      	adds	r7, #8
 802ac1c:	46bd      	mov	sp, r7
 802ac1e:	bd80      	pop	{r7, pc}
 802ac20:	24000010 	.word	0x24000010
 802ac24:	24000004 	.word	0x24000004
 802ac28:	2400000c 	.word	0x2400000c

0802ac2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802ac2c:	b480      	push	{r7}
 802ac2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802ac30:	4b06      	ldr	r3, [pc, #24]	; (802ac4c <HAL_IncTick+0x20>)
 802ac32:	781b      	ldrb	r3, [r3, #0]
 802ac34:	461a      	mov	r2, r3
 802ac36:	4b06      	ldr	r3, [pc, #24]	; (802ac50 <HAL_IncTick+0x24>)
 802ac38:	681b      	ldr	r3, [r3, #0]
 802ac3a:	4413      	add	r3, r2
 802ac3c:	4a04      	ldr	r2, [pc, #16]	; (802ac50 <HAL_IncTick+0x24>)
 802ac3e:	6013      	str	r3, [r2, #0]
}
 802ac40:	bf00      	nop
 802ac42:	46bd      	mov	sp, r7
 802ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac48:	4770      	bx	lr
 802ac4a:	bf00      	nop
 802ac4c:	24000010 	.word	0x24000010
 802ac50:	24024bc4 	.word	0x24024bc4

0802ac54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802ac54:	b480      	push	{r7}
 802ac56:	af00      	add	r7, sp, #0
  return uwTick;
 802ac58:	4b03      	ldr	r3, [pc, #12]	; (802ac68 <HAL_GetTick+0x14>)
 802ac5a:	681b      	ldr	r3, [r3, #0]
}
 802ac5c:	4618      	mov	r0, r3
 802ac5e:	46bd      	mov	sp, r7
 802ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac64:	4770      	bx	lr
 802ac66:	bf00      	nop
 802ac68:	24024bc4 	.word	0x24024bc4

0802ac6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802ac6c:	b580      	push	{r7, lr}
 802ac6e:	b084      	sub	sp, #16
 802ac70:	af00      	add	r7, sp, #0
 802ac72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802ac74:	f7ff ffee 	bl	802ac54 <HAL_GetTick>
 802ac78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802ac7a:	687b      	ldr	r3, [r7, #4]
 802ac7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802ac7e:	68fb      	ldr	r3, [r7, #12]
 802ac80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802ac84:	d005      	beq.n	802ac92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802ac86:	4b0a      	ldr	r3, [pc, #40]	; (802acb0 <HAL_Delay+0x44>)
 802ac88:	781b      	ldrb	r3, [r3, #0]
 802ac8a:	461a      	mov	r2, r3
 802ac8c:	68fb      	ldr	r3, [r7, #12]
 802ac8e:	4413      	add	r3, r2
 802ac90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802ac92:	bf00      	nop
 802ac94:	f7ff ffde 	bl	802ac54 <HAL_GetTick>
 802ac98:	4602      	mov	r2, r0
 802ac9a:	68bb      	ldr	r3, [r7, #8]
 802ac9c:	1ad3      	subs	r3, r2, r3
 802ac9e:	68fa      	ldr	r2, [r7, #12]
 802aca0:	429a      	cmp	r2, r3
 802aca2:	d8f7      	bhi.n	802ac94 <HAL_Delay+0x28>
  {
  }
}
 802aca4:	bf00      	nop
 802aca6:	bf00      	nop
 802aca8:	3710      	adds	r7, #16
 802acaa:	46bd      	mov	sp, r7
 802acac:	bd80      	pop	{r7, pc}
 802acae:	bf00      	nop
 802acb0:	24000010 	.word	0x24000010

0802acb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802acb4:	b480      	push	{r7}
 802acb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802acb8:	4b03      	ldr	r3, [pc, #12]	; (802acc8 <HAL_GetREVID+0x14>)
 802acba:	681b      	ldr	r3, [r3, #0]
 802acbc:	0c1b      	lsrs	r3, r3, #16
}
 802acbe:	4618      	mov	r0, r3
 802acc0:	46bd      	mov	sp, r7
 802acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acc6:	4770      	bx	lr
 802acc8:	5c001000 	.word	0x5c001000

0802accc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802accc:	b580      	push	{r7, lr}
 802acce:	b088      	sub	sp, #32
 802acd0:	af00      	add	r7, sp, #0
 802acd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802acd4:	2300      	movs	r3, #0
 802acd6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802acd8:	2300      	movs	r3, #0
 802acda:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802acdc:	687b      	ldr	r3, [r7, #4]
 802acde:	2b00      	cmp	r3, #0
 802ace0:	d102      	bne.n	802ace8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802ace2:	2301      	movs	r3, #1
 802ace4:	77fb      	strb	r3, [r7, #31]
 802ace6:	e10e      	b.n	802af06 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ace8:	687b      	ldr	r3, [r7, #4]
 802acea:	681b      	ldr	r3, [r3, #0]
 802acec:	681b      	ldr	r3, [r3, #0]
 802acee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802acf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802acf6:	d102      	bne.n	802acfe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802acf8:	2301      	movs	r3, #1
 802acfa:	77fb      	strb	r3, [r7, #31]
 802acfc:	e103      	b.n	802af06 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802acfe:	687b      	ldr	r3, [r7, #4]
 802ad00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ad04:	b2db      	uxtb	r3, r3
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d109      	bne.n	802ad1e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802ad0a:	687b      	ldr	r3, [r7, #4]
 802ad0c:	2200      	movs	r2, #0
 802ad0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802ad12:	687b      	ldr	r3, [r7, #4]
 802ad14:	2200      	movs	r2, #0
 802ad16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802ad18:	6878      	ldr	r0, [r7, #4]
 802ad1a:	f7fe fac3 	bl	80292a4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802ad1e:	687b      	ldr	r3, [r7, #4]
 802ad20:	681b      	ldr	r3, [r3, #0]
 802ad22:	681b      	ldr	r3, [r3, #0]
 802ad24:	f003 0304 	and.w	r3, r3, #4
 802ad28:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad2a:	687b      	ldr	r3, [r7, #4]
 802ad2c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802ad2e:	687b      	ldr	r3, [r7, #4]
 802ad30:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad32:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802ad34:	687b      	ldr	r3, [r7, #4]
 802ad36:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802ad38:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802ad3e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802ad40:	687b      	ldr	r3, [r7, #4]
 802ad42:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802ad44:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802ad46:	687b      	ldr	r3, [r7, #4]
 802ad48:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad4a:	4313      	orrs	r3, r2
 802ad4c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802ad4e:	687b      	ldr	r3, [r7, #4]
 802ad50:	681b      	ldr	r3, [r3, #0]
 802ad52:	681a      	ldr	r2, [r3, #0]
 802ad54:	4b6e      	ldr	r3, [pc, #440]	; (802af10 <HAL_COMP_Init+0x244>)
 802ad56:	4013      	ands	r3, r2
 802ad58:	687a      	ldr	r2, [r7, #4]
 802ad5a:	6812      	ldr	r2, [r2, #0]
 802ad5c:	6979      	ldr	r1, [r7, #20]
 802ad5e:	430b      	orrs	r3, r1
 802ad60:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802ad62:	687b      	ldr	r3, [r7, #4]
 802ad64:	685b      	ldr	r3, [r3, #4]
 802ad66:	2b10      	cmp	r3, #16
 802ad68:	d108      	bne.n	802ad7c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802ad6a:	687b      	ldr	r3, [r7, #4]
 802ad6c:	681b      	ldr	r3, [r3, #0]
 802ad6e:	681a      	ldr	r2, [r3, #0]
 802ad70:	687b      	ldr	r3, [r7, #4]
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	f042 0210 	orr.w	r2, r2, #16
 802ad78:	601a      	str	r2, [r3, #0]
 802ad7a:	e007      	b.n	802ad8c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802ad7c:	687b      	ldr	r3, [r7, #4]
 802ad7e:	681b      	ldr	r3, [r3, #0]
 802ad80:	681a      	ldr	r2, [r3, #0]
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	681b      	ldr	r3, [r3, #0]
 802ad86:	f022 0210 	bic.w	r2, r2, #16
 802ad8a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	681b      	ldr	r3, [r3, #0]
 802ad90:	681b      	ldr	r3, [r3, #0]
 802ad92:	f003 0304 	and.w	r3, r3, #4
 802ad96:	2b00      	cmp	r3, #0
 802ad98:	d016      	beq.n	802adc8 <HAL_COMP_Init+0xfc>
 802ad9a:	69bb      	ldr	r3, [r7, #24]
 802ad9c:	2b00      	cmp	r3, #0
 802ad9e:	d013      	beq.n	802adc8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802ada0:	4b5c      	ldr	r3, [pc, #368]	; (802af14 <HAL_COMP_Init+0x248>)
 802ada2:	681b      	ldr	r3, [r3, #0]
 802ada4:	099b      	lsrs	r3, r3, #6
 802ada6:	4a5c      	ldr	r2, [pc, #368]	; (802af18 <HAL_COMP_Init+0x24c>)
 802ada8:	fba2 2303 	umull	r2, r3, r2, r3
 802adac:	099b      	lsrs	r3, r3, #6
 802adae:	1c5a      	adds	r2, r3, #1
 802adb0:	4613      	mov	r3, r2
 802adb2:	009b      	lsls	r3, r3, #2
 802adb4:	4413      	add	r3, r2
 802adb6:	009b      	lsls	r3, r3, #2
 802adb8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802adba:	e002      	b.n	802adc2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802adbc:	68fb      	ldr	r3, [r7, #12]
 802adbe:	3b01      	subs	r3, #1
 802adc0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802adc2:	68fb      	ldr	r3, [r7, #12]
 802adc4:	2b00      	cmp	r3, #0
 802adc6:	d1f9      	bne.n	802adbc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802adc8:	687b      	ldr	r3, [r7, #4]
 802adca:	681b      	ldr	r3, [r3, #0]
 802adcc:	4a53      	ldr	r2, [pc, #332]	; (802af1c <HAL_COMP_Init+0x250>)
 802adce:	4293      	cmp	r3, r2
 802add0:	d102      	bne.n	802add8 <HAL_COMP_Init+0x10c>
 802add2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802add6:	e001      	b.n	802addc <HAL_COMP_Init+0x110>
 802add8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802addc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802adde:	687b      	ldr	r3, [r7, #4]
 802ade0:	6a1b      	ldr	r3, [r3, #32]
 802ade2:	f003 0303 	and.w	r3, r3, #3
 802ade6:	2b00      	cmp	r3, #0
 802ade8:	d06d      	beq.n	802aec6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802adea:	687b      	ldr	r3, [r7, #4]
 802adec:	6a1b      	ldr	r3, [r3, #32]
 802adee:	f003 0310 	and.w	r3, r3, #16
 802adf2:	2b00      	cmp	r3, #0
 802adf4:	d008      	beq.n	802ae08 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802adf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802adfa:	681a      	ldr	r2, [r3, #0]
 802adfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae00:	693b      	ldr	r3, [r7, #16]
 802ae02:	4313      	orrs	r3, r2
 802ae04:	600b      	str	r3, [r1, #0]
 802ae06:	e008      	b.n	802ae1a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802ae08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae0c:	681a      	ldr	r2, [r3, #0]
 802ae0e:	693b      	ldr	r3, [r7, #16]
 802ae10:	43db      	mvns	r3, r3
 802ae12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae16:	4013      	ands	r3, r2
 802ae18:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802ae1a:	687b      	ldr	r3, [r7, #4]
 802ae1c:	6a1b      	ldr	r3, [r3, #32]
 802ae1e:	f003 0320 	and.w	r3, r3, #32
 802ae22:	2b00      	cmp	r3, #0
 802ae24:	d008      	beq.n	802ae38 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802ae26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae2a:	685a      	ldr	r2, [r3, #4]
 802ae2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae30:	693b      	ldr	r3, [r7, #16]
 802ae32:	4313      	orrs	r3, r2
 802ae34:	604b      	str	r3, [r1, #4]
 802ae36:	e008      	b.n	802ae4a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802ae38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae3c:	685a      	ldr	r2, [r3, #4]
 802ae3e:	693b      	ldr	r3, [r7, #16]
 802ae40:	43db      	mvns	r3, r3
 802ae42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae46:	4013      	ands	r3, r2
 802ae48:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802ae4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802ae4e:	693b      	ldr	r3, [r7, #16]
 802ae50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802ae54:	687b      	ldr	r3, [r7, #4]
 802ae56:	6a1b      	ldr	r3, [r3, #32]
 802ae58:	f003 0302 	and.w	r3, r3, #2
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	d00a      	beq.n	802ae76 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802ae60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae64:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ae68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae6c:	693b      	ldr	r3, [r7, #16]
 802ae6e:	4313      	orrs	r3, r2
 802ae70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802ae74:	e00a      	b.n	802ae8c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802ae76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ae7e:	693b      	ldr	r3, [r7, #16]
 802ae80:	43db      	mvns	r3, r3
 802ae82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae86:	4013      	ands	r3, r2
 802ae88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802ae8c:	687b      	ldr	r3, [r7, #4]
 802ae8e:	6a1b      	ldr	r3, [r3, #32]
 802ae90:	f003 0301 	and.w	r3, r3, #1
 802ae94:	2b00      	cmp	r3, #0
 802ae96:	d00a      	beq.n	802aeae <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802ae98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aea4:	693b      	ldr	r3, [r7, #16]
 802aea6:	4313      	orrs	r3, r2
 802aea8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802aeac:	e021      	b.n	802aef2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802aeae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aeb2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aeb6:	693b      	ldr	r3, [r7, #16]
 802aeb8:	43db      	mvns	r3, r3
 802aeba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aebe:	4013      	ands	r3, r2
 802aec0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802aec4:	e015      	b.n	802aef2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802aec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aeca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802aece:	693b      	ldr	r3, [r7, #16]
 802aed0:	43db      	mvns	r3, r3
 802aed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aed6:	4013      	ands	r3, r2
 802aed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802aedc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aee0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aee4:	693b      	ldr	r3, [r7, #16]
 802aee6:	43db      	mvns	r3, r3
 802aee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aeec:	4013      	ands	r3, r2
 802aeee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802aef2:	687b      	ldr	r3, [r7, #4]
 802aef4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802aef8:	b2db      	uxtb	r3, r3
 802aefa:	2b00      	cmp	r3, #0
 802aefc:	d103      	bne.n	802af06 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	2201      	movs	r2, #1
 802af02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802af06:	7ffb      	ldrb	r3, [r7, #31]
}
 802af08:	4618      	mov	r0, r3
 802af0a:	3720      	adds	r7, #32
 802af0c:	46bd      	mov	sp, r7
 802af0e:	bd80      	pop	{r7, pc}
 802af10:	f0e8cce1 	.word	0xf0e8cce1
 802af14:	24000004 	.word	0x24000004
 802af18:	053e2d63 	.word	0x053e2d63
 802af1c:	5800380c 	.word	0x5800380c

0802af20 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802af20:	b480      	push	{r7}
 802af22:	b085      	sub	sp, #20
 802af24:	af00      	add	r7, sp, #0
 802af26:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802af28:	2300      	movs	r3, #0
 802af2a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802af2c:	2300      	movs	r3, #0
 802af2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802af30:	687b      	ldr	r3, [r7, #4]
 802af32:	2b00      	cmp	r3, #0
 802af34:	d102      	bne.n	802af3c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802af36:	2301      	movs	r3, #1
 802af38:	73fb      	strb	r3, [r7, #15]
 802af3a:	e030      	b.n	802af9e <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802af3c:	687b      	ldr	r3, [r7, #4]
 802af3e:	681b      	ldr	r3, [r3, #0]
 802af40:	681b      	ldr	r3, [r3, #0]
 802af42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802af46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802af4a:	d102      	bne.n	802af52 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802af4c:	2301      	movs	r3, #1
 802af4e:	73fb      	strb	r3, [r7, #15]
 802af50:	e025      	b.n	802af9e <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802af52:	687b      	ldr	r3, [r7, #4]
 802af54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802af58:	b2db      	uxtb	r3, r3
 802af5a:	2b01      	cmp	r3, #1
 802af5c:	d11d      	bne.n	802af9a <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802af5e:	687b      	ldr	r3, [r7, #4]
 802af60:	681b      	ldr	r3, [r3, #0]
 802af62:	681a      	ldr	r2, [r3, #0]
 802af64:	687b      	ldr	r3, [r7, #4]
 802af66:	681b      	ldr	r3, [r3, #0]
 802af68:	f042 0201 	orr.w	r2, r2, #1
 802af6c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802af6e:	687b      	ldr	r3, [r7, #4]
 802af70:	2202      	movs	r2, #2
 802af72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802af76:	4b0d      	ldr	r3, [pc, #52]	; (802afac <HAL_COMP_Start+0x8c>)
 802af78:	681b      	ldr	r3, [r3, #0]
 802af7a:	099b      	lsrs	r3, r3, #6
 802af7c:	4a0c      	ldr	r2, [pc, #48]	; (802afb0 <HAL_COMP_Start+0x90>)
 802af7e:	fba2 2303 	umull	r2, r3, r2, r3
 802af82:	099b      	lsrs	r3, r3, #6
 802af84:	3301      	adds	r3, #1
 802af86:	00db      	lsls	r3, r3, #3
 802af88:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802af8a:	e002      	b.n	802af92 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802af8c:	68bb      	ldr	r3, [r7, #8]
 802af8e:	3b01      	subs	r3, #1
 802af90:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802af92:	68bb      	ldr	r3, [r7, #8]
 802af94:	2b00      	cmp	r3, #0
 802af96:	d1f9      	bne.n	802af8c <HAL_COMP_Start+0x6c>
 802af98:	e001      	b.n	802af9e <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802af9a:	2301      	movs	r3, #1
 802af9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802af9e:	7bfb      	ldrb	r3, [r7, #15]
}
 802afa0:	4618      	mov	r0, r3
 802afa2:	3714      	adds	r7, #20
 802afa4:	46bd      	mov	sp, r7
 802afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afaa:	4770      	bx	lr
 802afac:	24000004 	.word	0x24000004
 802afb0:	053e2d63 	.word	0x053e2d63

0802afb4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802afb4:	b580      	push	{r7, lr}
 802afb6:	b084      	sub	sp, #16
 802afb8:	af00      	add	r7, sp, #0
 802afba:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802afbc:	687b      	ldr	r3, [r7, #4]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	4a33      	ldr	r2, [pc, #204]	; (802b090 <HAL_COMP_IRQHandler+0xdc>)
 802afc2:	4293      	cmp	r3, r2
 802afc4:	d102      	bne.n	802afcc <HAL_COMP_IRQHandler+0x18>
 802afc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802afca:	e001      	b.n	802afd0 <HAL_COMP_IRQHandler+0x1c>
 802afcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802afd0:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802afd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802afd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802afda:	68fb      	ldr	r3, [r7, #12]
 802afdc:	4013      	ands	r3, r2
 802afde:	2b00      	cmp	r3, #0
 802afe0:	d014      	beq.n	802b00c <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802afe2:	4b2c      	ldr	r3, [pc, #176]	; (802b094 <HAL_COMP_IRQHandler+0xe0>)
 802afe4:	681b      	ldr	r3, [r3, #0]
 802afe6:	f003 0310 	and.w	r3, r3, #16
 802afea:	2b00      	cmp	r3, #0
 802afec:	d006      	beq.n	802affc <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802afee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aff2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802aff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802affa:	e004      	b.n	802b006 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802affc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802b000:	68fb      	ldr	r3, [r7, #12]
 802b002:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b006:	6878      	ldr	r0, [r7, #4]
 802b008:	f7fe fcfc 	bl	8029a04 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802b00c:	687b      	ldr	r3, [r7, #4]
 802b00e:	681b      	ldr	r3, [r3, #0]
 802b010:	681b      	ldr	r3, [r3, #0]
 802b012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b016:	2b40      	cmp	r3, #64	; 0x40
 802b018:	d136      	bne.n	802b088 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802b01a:	4b1f      	ldr	r3, [pc, #124]	; (802b098 <HAL_COMP_IRQHandler+0xe4>)
 802b01c:	681b      	ldr	r3, [r3, #0]
 802b01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802b022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b026:	d101      	bne.n	802b02c <HAL_COMP_IRQHandler+0x78>
 802b028:	2301      	movs	r3, #1
 802b02a:	e000      	b.n	802b02e <HAL_COMP_IRQHandler+0x7a>
 802b02c:	2300      	movs	r3, #0
 802b02e:	2b00      	cmp	r3, #0
 802b030:	d00b      	beq.n	802b04a <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802b032:	4b19      	ldr	r3, [pc, #100]	; (802b098 <HAL_COMP_IRQHandler+0xe4>)
 802b034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b038:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b03a:	687b      	ldr	r3, [r7, #4]
 802b03c:	681b      	ldr	r3, [r3, #0]
 802b03e:	681a      	ldr	r2, [r3, #0]
 802b040:	687b      	ldr	r3, [r7, #4]
 802b042:	681b      	ldr	r3, [r3, #0]
 802b044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b048:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802b04a:	4b13      	ldr	r3, [pc, #76]	; (802b098 <HAL_COMP_IRQHandler+0xe4>)
 802b04c:	681b      	ldr	r3, [r3, #0]
 802b04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802b056:	d101      	bne.n	802b05c <HAL_COMP_IRQHandler+0xa8>
 802b058:	2301      	movs	r3, #1
 802b05a:	e000      	b.n	802b05e <HAL_COMP_IRQHandler+0xaa>
 802b05c:	2300      	movs	r3, #0
 802b05e:	2b00      	cmp	r3, #0
 802b060:	d00b      	beq.n	802b07a <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802b062:	4b0d      	ldr	r3, [pc, #52]	; (802b098 <HAL_COMP_IRQHandler+0xe4>)
 802b064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b068:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b06a:	687b      	ldr	r3, [r7, #4]
 802b06c:	681b      	ldr	r3, [r3, #0]
 802b06e:	681a      	ldr	r2, [r3, #0]
 802b070:	687b      	ldr	r3, [r7, #4]
 802b072:	681b      	ldr	r3, [r3, #0]
 802b074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b078:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802b07a:	687b      	ldr	r3, [r7, #4]
 802b07c:	2201      	movs	r2, #1
 802b07e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b082:	6878      	ldr	r0, [r7, #4]
 802b084:	f7fe fcbe 	bl	8029a04 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802b088:	bf00      	nop
 802b08a:	3710      	adds	r7, #16
 802b08c:	46bd      	mov	sp, r7
 802b08e:	bd80      	pop	{r7, pc}
 802b090:	5800380c 	.word	0x5800380c
 802b094:	58003810 	.word	0x58003810
 802b098:	58003800 	.word	0x58003800

0802b09c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b09c:	b480      	push	{r7}
 802b09e:	b085      	sub	sp, #20
 802b0a0:	af00      	add	r7, sp, #0
 802b0a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	f003 0307 	and.w	r3, r3, #7
 802b0aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802b0ac:	4b0b      	ldr	r3, [pc, #44]	; (802b0dc <__NVIC_SetPriorityGrouping+0x40>)
 802b0ae:	68db      	ldr	r3, [r3, #12]
 802b0b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802b0b2:	68ba      	ldr	r2, [r7, #8]
 802b0b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802b0b8:	4013      	ands	r3, r2
 802b0ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802b0bc:	68fb      	ldr	r3, [r7, #12]
 802b0be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802b0c0:	68bb      	ldr	r3, [r7, #8]
 802b0c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802b0c4:	4b06      	ldr	r3, [pc, #24]	; (802b0e0 <__NVIC_SetPriorityGrouping+0x44>)
 802b0c6:	4313      	orrs	r3, r2
 802b0c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802b0ca:	4a04      	ldr	r2, [pc, #16]	; (802b0dc <__NVIC_SetPriorityGrouping+0x40>)
 802b0cc:	68bb      	ldr	r3, [r7, #8]
 802b0ce:	60d3      	str	r3, [r2, #12]
}
 802b0d0:	bf00      	nop
 802b0d2:	3714      	adds	r7, #20
 802b0d4:	46bd      	mov	sp, r7
 802b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0da:	4770      	bx	lr
 802b0dc:	e000ed00 	.word	0xe000ed00
 802b0e0:	05fa0000 	.word	0x05fa0000

0802b0e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802b0e4:	b480      	push	{r7}
 802b0e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802b0e8:	4b04      	ldr	r3, [pc, #16]	; (802b0fc <__NVIC_GetPriorityGrouping+0x18>)
 802b0ea:	68db      	ldr	r3, [r3, #12]
 802b0ec:	0a1b      	lsrs	r3, r3, #8
 802b0ee:	f003 0307 	and.w	r3, r3, #7
}
 802b0f2:	4618      	mov	r0, r3
 802b0f4:	46bd      	mov	sp, r7
 802b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0fa:	4770      	bx	lr
 802b0fc:	e000ed00 	.word	0xe000ed00

0802b100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b100:	b480      	push	{r7}
 802b102:	b083      	sub	sp, #12
 802b104:	af00      	add	r7, sp, #0
 802b106:	4603      	mov	r3, r0
 802b108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b10a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b10e:	2b00      	cmp	r3, #0
 802b110:	db0b      	blt.n	802b12a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802b112:	88fb      	ldrh	r3, [r7, #6]
 802b114:	f003 021f 	and.w	r2, r3, #31
 802b118:	4907      	ldr	r1, [pc, #28]	; (802b138 <__NVIC_EnableIRQ+0x38>)
 802b11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b11e:	095b      	lsrs	r3, r3, #5
 802b120:	2001      	movs	r0, #1
 802b122:	fa00 f202 	lsl.w	r2, r0, r2
 802b126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802b12a:	bf00      	nop
 802b12c:	370c      	adds	r7, #12
 802b12e:	46bd      	mov	sp, r7
 802b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b134:	4770      	bx	lr
 802b136:	bf00      	nop
 802b138:	e000e100 	.word	0xe000e100

0802b13c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802b13c:	b480      	push	{r7}
 802b13e:	b083      	sub	sp, #12
 802b140:	af00      	add	r7, sp, #0
 802b142:	4603      	mov	r3, r0
 802b144:	6039      	str	r1, [r7, #0]
 802b146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b14c:	2b00      	cmp	r3, #0
 802b14e:	db0a      	blt.n	802b166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b150:	683b      	ldr	r3, [r7, #0]
 802b152:	b2da      	uxtb	r2, r3
 802b154:	490c      	ldr	r1, [pc, #48]	; (802b188 <__NVIC_SetPriority+0x4c>)
 802b156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b15a:	0112      	lsls	r2, r2, #4
 802b15c:	b2d2      	uxtb	r2, r2
 802b15e:	440b      	add	r3, r1
 802b160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802b164:	e00a      	b.n	802b17c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b166:	683b      	ldr	r3, [r7, #0]
 802b168:	b2da      	uxtb	r2, r3
 802b16a:	4908      	ldr	r1, [pc, #32]	; (802b18c <__NVIC_SetPriority+0x50>)
 802b16c:	88fb      	ldrh	r3, [r7, #6]
 802b16e:	f003 030f 	and.w	r3, r3, #15
 802b172:	3b04      	subs	r3, #4
 802b174:	0112      	lsls	r2, r2, #4
 802b176:	b2d2      	uxtb	r2, r2
 802b178:	440b      	add	r3, r1
 802b17a:	761a      	strb	r2, [r3, #24]
}
 802b17c:	bf00      	nop
 802b17e:	370c      	adds	r7, #12
 802b180:	46bd      	mov	sp, r7
 802b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b186:	4770      	bx	lr
 802b188:	e000e100 	.word	0xe000e100
 802b18c:	e000ed00 	.word	0xe000ed00

0802b190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b190:	b480      	push	{r7}
 802b192:	b089      	sub	sp, #36	; 0x24
 802b194:	af00      	add	r7, sp, #0
 802b196:	60f8      	str	r0, [r7, #12]
 802b198:	60b9      	str	r1, [r7, #8]
 802b19a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802b19c:	68fb      	ldr	r3, [r7, #12]
 802b19e:	f003 0307 	and.w	r3, r3, #7
 802b1a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802b1a4:	69fb      	ldr	r3, [r7, #28]
 802b1a6:	f1c3 0307 	rsb	r3, r3, #7
 802b1aa:	2b04      	cmp	r3, #4
 802b1ac:	bf28      	it	cs
 802b1ae:	2304      	movcs	r3, #4
 802b1b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802b1b2:	69fb      	ldr	r3, [r7, #28]
 802b1b4:	3304      	adds	r3, #4
 802b1b6:	2b06      	cmp	r3, #6
 802b1b8:	d902      	bls.n	802b1c0 <NVIC_EncodePriority+0x30>
 802b1ba:	69fb      	ldr	r3, [r7, #28]
 802b1bc:	3b03      	subs	r3, #3
 802b1be:	e000      	b.n	802b1c2 <NVIC_EncodePriority+0x32>
 802b1c0:	2300      	movs	r3, #0
 802b1c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b1c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b1c8:	69bb      	ldr	r3, [r7, #24]
 802b1ca:	fa02 f303 	lsl.w	r3, r2, r3
 802b1ce:	43da      	mvns	r2, r3
 802b1d0:	68bb      	ldr	r3, [r7, #8]
 802b1d2:	401a      	ands	r2, r3
 802b1d4:	697b      	ldr	r3, [r7, #20]
 802b1d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802b1d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b1dc:	697b      	ldr	r3, [r7, #20]
 802b1de:	fa01 f303 	lsl.w	r3, r1, r3
 802b1e2:	43d9      	mvns	r1, r3
 802b1e4:	687b      	ldr	r3, [r7, #4]
 802b1e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b1e8:	4313      	orrs	r3, r2
         );
}
 802b1ea:	4618      	mov	r0, r3
 802b1ec:	3724      	adds	r7, #36	; 0x24
 802b1ee:	46bd      	mov	sp, r7
 802b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1f4:	4770      	bx	lr
	...

0802b1f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802b1f8:	b580      	push	{r7, lr}
 802b1fa:	b082      	sub	sp, #8
 802b1fc:	af00      	add	r7, sp, #0
 802b1fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802b200:	687b      	ldr	r3, [r7, #4]
 802b202:	3b01      	subs	r3, #1
 802b204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b208:	d301      	bcc.n	802b20e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802b20a:	2301      	movs	r3, #1
 802b20c:	e00f      	b.n	802b22e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802b20e:	4a0a      	ldr	r2, [pc, #40]	; (802b238 <SysTick_Config+0x40>)
 802b210:	687b      	ldr	r3, [r7, #4]
 802b212:	3b01      	subs	r3, #1
 802b214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802b216:	210f      	movs	r1, #15
 802b218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b21c:	f7ff ff8e 	bl	802b13c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802b220:	4b05      	ldr	r3, [pc, #20]	; (802b238 <SysTick_Config+0x40>)
 802b222:	2200      	movs	r2, #0
 802b224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802b226:	4b04      	ldr	r3, [pc, #16]	; (802b238 <SysTick_Config+0x40>)
 802b228:	2207      	movs	r2, #7
 802b22a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802b22c:	2300      	movs	r3, #0
}
 802b22e:	4618      	mov	r0, r3
 802b230:	3708      	adds	r7, #8
 802b232:	46bd      	mov	sp, r7
 802b234:	bd80      	pop	{r7, pc}
 802b236:	bf00      	nop
 802b238:	e000e010 	.word	0xe000e010

0802b23c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b23c:	b580      	push	{r7, lr}
 802b23e:	b082      	sub	sp, #8
 802b240:	af00      	add	r7, sp, #0
 802b242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802b244:	6878      	ldr	r0, [r7, #4]
 802b246:	f7ff ff29 	bl	802b09c <__NVIC_SetPriorityGrouping>
}
 802b24a:	bf00      	nop
 802b24c:	3708      	adds	r7, #8
 802b24e:	46bd      	mov	sp, r7
 802b250:	bd80      	pop	{r7, pc}

0802b252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b252:	b580      	push	{r7, lr}
 802b254:	b086      	sub	sp, #24
 802b256:	af00      	add	r7, sp, #0
 802b258:	4603      	mov	r3, r0
 802b25a:	60b9      	str	r1, [r7, #8]
 802b25c:	607a      	str	r2, [r7, #4]
 802b25e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802b260:	f7ff ff40 	bl	802b0e4 <__NVIC_GetPriorityGrouping>
 802b264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802b266:	687a      	ldr	r2, [r7, #4]
 802b268:	68b9      	ldr	r1, [r7, #8]
 802b26a:	6978      	ldr	r0, [r7, #20]
 802b26c:	f7ff ff90 	bl	802b190 <NVIC_EncodePriority>
 802b270:	4602      	mov	r2, r0
 802b272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802b276:	4611      	mov	r1, r2
 802b278:	4618      	mov	r0, r3
 802b27a:	f7ff ff5f 	bl	802b13c <__NVIC_SetPriority>
}
 802b27e:	bf00      	nop
 802b280:	3718      	adds	r7, #24
 802b282:	46bd      	mov	sp, r7
 802b284:	bd80      	pop	{r7, pc}

0802b286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b286:	b580      	push	{r7, lr}
 802b288:	b082      	sub	sp, #8
 802b28a:	af00      	add	r7, sp, #0
 802b28c:	4603      	mov	r3, r0
 802b28e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802b290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b294:	4618      	mov	r0, r3
 802b296:	f7ff ff33 	bl	802b100 <__NVIC_EnableIRQ>
}
 802b29a:	bf00      	nop
 802b29c:	3708      	adds	r7, #8
 802b29e:	46bd      	mov	sp, r7
 802b2a0:	bd80      	pop	{r7, pc}

0802b2a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802b2a2:	b580      	push	{r7, lr}
 802b2a4:	b082      	sub	sp, #8
 802b2a6:	af00      	add	r7, sp, #0
 802b2a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802b2aa:	6878      	ldr	r0, [r7, #4]
 802b2ac:	f7ff ffa4 	bl	802b1f8 <SysTick_Config>
 802b2b0:	4603      	mov	r3, r0
}
 802b2b2:	4618      	mov	r0, r3
 802b2b4:	3708      	adds	r7, #8
 802b2b6:	46bd      	mov	sp, r7
 802b2b8:	bd80      	pop	{r7, pc}

0802b2ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802b2ba:	b580      	push	{r7, lr}
 802b2bc:	b082      	sub	sp, #8
 802b2be:	af00      	add	r7, sp, #0
 802b2c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802b2c2:	687b      	ldr	r3, [r7, #4]
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	d101      	bne.n	802b2cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802b2c8:	2301      	movs	r3, #1
 802b2ca:	e014      	b.n	802b2f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802b2cc:	687b      	ldr	r3, [r7, #4]
 802b2ce:	791b      	ldrb	r3, [r3, #4]
 802b2d0:	b2db      	uxtb	r3, r3
 802b2d2:	2b00      	cmp	r3, #0
 802b2d4:	d105      	bne.n	802b2e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802b2d6:	687b      	ldr	r3, [r7, #4]
 802b2d8:	2200      	movs	r2, #0
 802b2da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802b2dc:	6878      	ldr	r0, [r7, #4]
 802b2de:	f7fe f861 	bl	80293a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802b2e2:	687b      	ldr	r3, [r7, #4]
 802b2e4:	2202      	movs	r2, #2
 802b2e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802b2e8:	687b      	ldr	r3, [r7, #4]
 802b2ea:	2200      	movs	r2, #0
 802b2ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802b2ee:	687b      	ldr	r3, [r7, #4]
 802b2f0:	2201      	movs	r2, #1
 802b2f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802b2f4:	2300      	movs	r3, #0
}
 802b2f6:	4618      	mov	r0, r3
 802b2f8:	3708      	adds	r7, #8
 802b2fa:	46bd      	mov	sp, r7
 802b2fc:	bd80      	pop	{r7, pc}

0802b2fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802b2fe:	b480      	push	{r7}
 802b300:	b083      	sub	sp, #12
 802b302:	af00      	add	r7, sp, #0
 802b304:	6078      	str	r0, [r7, #4]
 802b306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b308:	687b      	ldr	r3, [r7, #4]
 802b30a:	795b      	ldrb	r3, [r3, #5]
 802b30c:	2b01      	cmp	r3, #1
 802b30e:	d101      	bne.n	802b314 <HAL_DAC_Start+0x16>
 802b310:	2302      	movs	r3, #2
 802b312:	e040      	b.n	802b396 <HAL_DAC_Start+0x98>
 802b314:	687b      	ldr	r3, [r7, #4]
 802b316:	2201      	movs	r2, #1
 802b318:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b31a:	687b      	ldr	r3, [r7, #4]
 802b31c:	2202      	movs	r2, #2
 802b31e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802b320:	687b      	ldr	r3, [r7, #4]
 802b322:	681b      	ldr	r3, [r3, #0]
 802b324:	6819      	ldr	r1, [r3, #0]
 802b326:	683b      	ldr	r3, [r7, #0]
 802b328:	f003 0310 	and.w	r3, r3, #16
 802b32c:	2201      	movs	r2, #1
 802b32e:	409a      	lsls	r2, r3
 802b330:	687b      	ldr	r3, [r7, #4]
 802b332:	681b      	ldr	r3, [r3, #0]
 802b334:	430a      	orrs	r2, r1
 802b336:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802b338:	683b      	ldr	r3, [r7, #0]
 802b33a:	2b00      	cmp	r3, #0
 802b33c:	d10f      	bne.n	802b35e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802b33e:	687b      	ldr	r3, [r7, #4]
 802b340:	681b      	ldr	r3, [r3, #0]
 802b342:	681b      	ldr	r3, [r3, #0]
 802b344:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802b348:	2b02      	cmp	r3, #2
 802b34a:	d11d      	bne.n	802b388 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802b34c:	687b      	ldr	r3, [r7, #4]
 802b34e:	681b      	ldr	r3, [r3, #0]
 802b350:	685a      	ldr	r2, [r3, #4]
 802b352:	687b      	ldr	r3, [r7, #4]
 802b354:	681b      	ldr	r3, [r3, #0]
 802b356:	f042 0201 	orr.w	r2, r2, #1
 802b35a:	605a      	str	r2, [r3, #4]
 802b35c:	e014      	b.n	802b388 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802b35e:	687b      	ldr	r3, [r7, #4]
 802b360:	681b      	ldr	r3, [r3, #0]
 802b362:	681b      	ldr	r3, [r3, #0]
 802b364:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802b368:	683b      	ldr	r3, [r7, #0]
 802b36a:	f003 0310 	and.w	r3, r3, #16
 802b36e:	2102      	movs	r1, #2
 802b370:	fa01 f303 	lsl.w	r3, r1, r3
 802b374:	429a      	cmp	r2, r3
 802b376:	d107      	bne.n	802b388 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802b378:	687b      	ldr	r3, [r7, #4]
 802b37a:	681b      	ldr	r3, [r3, #0]
 802b37c:	685a      	ldr	r2, [r3, #4]
 802b37e:	687b      	ldr	r3, [r7, #4]
 802b380:	681b      	ldr	r3, [r3, #0]
 802b382:	f042 0202 	orr.w	r2, r2, #2
 802b386:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b388:	687b      	ldr	r3, [r7, #4]
 802b38a:	2201      	movs	r2, #1
 802b38c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b38e:	687b      	ldr	r3, [r7, #4]
 802b390:	2200      	movs	r2, #0
 802b392:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b394:	2300      	movs	r3, #0
}
 802b396:	4618      	mov	r0, r3
 802b398:	370c      	adds	r7, #12
 802b39a:	46bd      	mov	sp, r7
 802b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3a0:	4770      	bx	lr

0802b3a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802b3a2:	b480      	push	{r7}
 802b3a4:	b087      	sub	sp, #28
 802b3a6:	af00      	add	r7, sp, #0
 802b3a8:	60f8      	str	r0, [r7, #12]
 802b3aa:	60b9      	str	r1, [r7, #8]
 802b3ac:	607a      	str	r2, [r7, #4]
 802b3ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802b3b0:	2300      	movs	r3, #0
 802b3b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802b3b4:	68fb      	ldr	r3, [r7, #12]
 802b3b6:	681b      	ldr	r3, [r3, #0]
 802b3b8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802b3ba:	68bb      	ldr	r3, [r7, #8]
 802b3bc:	2b00      	cmp	r3, #0
 802b3be:	d105      	bne.n	802b3cc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802b3c0:	697a      	ldr	r2, [r7, #20]
 802b3c2:	687b      	ldr	r3, [r7, #4]
 802b3c4:	4413      	add	r3, r2
 802b3c6:	3308      	adds	r3, #8
 802b3c8:	617b      	str	r3, [r7, #20]
 802b3ca:	e004      	b.n	802b3d6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802b3cc:	697a      	ldr	r2, [r7, #20]
 802b3ce:	687b      	ldr	r3, [r7, #4]
 802b3d0:	4413      	add	r3, r2
 802b3d2:	3314      	adds	r3, #20
 802b3d4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802b3d6:	697b      	ldr	r3, [r7, #20]
 802b3d8:	461a      	mov	r2, r3
 802b3da:	683b      	ldr	r3, [r7, #0]
 802b3dc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802b3de:	2300      	movs	r3, #0
}
 802b3e0:	4618      	mov	r0, r3
 802b3e2:	371c      	adds	r7, #28
 802b3e4:	46bd      	mov	sp, r7
 802b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3ea:	4770      	bx	lr

0802b3ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802b3ec:	b580      	push	{r7, lr}
 802b3ee:	b088      	sub	sp, #32
 802b3f0:	af00      	add	r7, sp, #0
 802b3f2:	60f8      	str	r0, [r7, #12]
 802b3f4:	60b9      	str	r1, [r7, #8]
 802b3f6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b3f8:	68fb      	ldr	r3, [r7, #12]
 802b3fa:	795b      	ldrb	r3, [r3, #5]
 802b3fc:	2b01      	cmp	r3, #1
 802b3fe:	d101      	bne.n	802b404 <HAL_DAC_ConfigChannel+0x18>
 802b400:	2302      	movs	r3, #2
 802b402:	e11d      	b.n	802b640 <HAL_DAC_ConfigChannel+0x254>
 802b404:	68fb      	ldr	r3, [r7, #12]
 802b406:	2201      	movs	r2, #1
 802b408:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b40a:	68fb      	ldr	r3, [r7, #12]
 802b40c:	2202      	movs	r2, #2
 802b40e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802b410:	68bb      	ldr	r3, [r7, #8]
 802b412:	681b      	ldr	r3, [r3, #0]
 802b414:	2b04      	cmp	r3, #4
 802b416:	d174      	bne.n	802b502 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802b418:	f7ff fc1c 	bl	802ac54 <HAL_GetTick>
 802b41c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802b41e:	687b      	ldr	r3, [r7, #4]
 802b420:	2b00      	cmp	r3, #0
 802b422:	d134      	bne.n	802b48e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b424:	e011      	b.n	802b44a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b426:	f7ff fc15 	bl	802ac54 <HAL_GetTick>
 802b42a:	4602      	mov	r2, r0
 802b42c:	69bb      	ldr	r3, [r7, #24]
 802b42e:	1ad3      	subs	r3, r2, r3
 802b430:	2b01      	cmp	r3, #1
 802b432:	d90a      	bls.n	802b44a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b434:	68fb      	ldr	r3, [r7, #12]
 802b436:	691b      	ldr	r3, [r3, #16]
 802b438:	f043 0208 	orr.w	r2, r3, #8
 802b43c:	68fb      	ldr	r3, [r7, #12]
 802b43e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b440:	68fb      	ldr	r3, [r7, #12]
 802b442:	2203      	movs	r2, #3
 802b444:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b446:	2303      	movs	r3, #3
 802b448:	e0fa      	b.n	802b640 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b44a:	68fb      	ldr	r3, [r7, #12]
 802b44c:	681b      	ldr	r3, [r3, #0]
 802b44e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b450:	4b7d      	ldr	r3, [pc, #500]	; (802b648 <HAL_DAC_ConfigChannel+0x25c>)
 802b452:	4013      	ands	r3, r2
 802b454:	2b00      	cmp	r3, #0
 802b456:	d1e6      	bne.n	802b426 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802b458:	2001      	movs	r0, #1
 802b45a:	f7ff fc07 	bl	802ac6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b45e:	68fb      	ldr	r3, [r7, #12]
 802b460:	681b      	ldr	r3, [r3, #0]
 802b462:	68ba      	ldr	r2, [r7, #8]
 802b464:	6992      	ldr	r2, [r2, #24]
 802b466:	641a      	str	r2, [r3, #64]	; 0x40
 802b468:	e01e      	b.n	802b4a8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b46a:	f7ff fbf3 	bl	802ac54 <HAL_GetTick>
 802b46e:	4602      	mov	r2, r0
 802b470:	69bb      	ldr	r3, [r7, #24]
 802b472:	1ad3      	subs	r3, r2, r3
 802b474:	2b01      	cmp	r3, #1
 802b476:	d90a      	bls.n	802b48e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b478:	68fb      	ldr	r3, [r7, #12]
 802b47a:	691b      	ldr	r3, [r3, #16]
 802b47c:	f043 0208 	orr.w	r2, r3, #8
 802b480:	68fb      	ldr	r3, [r7, #12]
 802b482:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b484:	68fb      	ldr	r3, [r7, #12]
 802b486:	2203      	movs	r2, #3
 802b488:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b48a:	2303      	movs	r3, #3
 802b48c:	e0d8      	b.n	802b640 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802b48e:	68fb      	ldr	r3, [r7, #12]
 802b490:	681b      	ldr	r3, [r3, #0]
 802b492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b494:	2b00      	cmp	r3, #0
 802b496:	dbe8      	blt.n	802b46a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802b498:	2001      	movs	r0, #1
 802b49a:	f7ff fbe7 	bl	802ac6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b49e:	68fb      	ldr	r3, [r7, #12]
 802b4a0:	681b      	ldr	r3, [r3, #0]
 802b4a2:	68ba      	ldr	r2, [r7, #8]
 802b4a4:	6992      	ldr	r2, [r2, #24]
 802b4a6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802b4a8:	68fb      	ldr	r3, [r7, #12]
 802b4aa:	681b      	ldr	r3, [r3, #0]
 802b4ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802b4ae:	687b      	ldr	r3, [r7, #4]
 802b4b0:	f003 0310 	and.w	r3, r3, #16
 802b4b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802b4b8:	fa01 f303 	lsl.w	r3, r1, r3
 802b4bc:	43db      	mvns	r3, r3
 802b4be:	ea02 0103 	and.w	r1, r2, r3
 802b4c2:	68bb      	ldr	r3, [r7, #8]
 802b4c4:	69da      	ldr	r2, [r3, #28]
 802b4c6:	687b      	ldr	r3, [r7, #4]
 802b4c8:	f003 0310 	and.w	r3, r3, #16
 802b4cc:	409a      	lsls	r2, r3
 802b4ce:	68fb      	ldr	r3, [r7, #12]
 802b4d0:	681b      	ldr	r3, [r3, #0]
 802b4d2:	430a      	orrs	r2, r1
 802b4d4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802b4d6:	68fb      	ldr	r3, [r7, #12]
 802b4d8:	681b      	ldr	r3, [r3, #0]
 802b4da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b4dc:	687b      	ldr	r3, [r7, #4]
 802b4de:	f003 0310 	and.w	r3, r3, #16
 802b4e2:	21ff      	movs	r1, #255	; 0xff
 802b4e4:	fa01 f303 	lsl.w	r3, r1, r3
 802b4e8:	43db      	mvns	r3, r3
 802b4ea:	ea02 0103 	and.w	r1, r2, r3
 802b4ee:	68bb      	ldr	r3, [r7, #8]
 802b4f0:	6a1a      	ldr	r2, [r3, #32]
 802b4f2:	687b      	ldr	r3, [r7, #4]
 802b4f4:	f003 0310 	and.w	r3, r3, #16
 802b4f8:	409a      	lsls	r2, r3
 802b4fa:	68fb      	ldr	r3, [r7, #12]
 802b4fc:	681b      	ldr	r3, [r3, #0]
 802b4fe:	430a      	orrs	r2, r1
 802b500:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802b502:	68bb      	ldr	r3, [r7, #8]
 802b504:	691b      	ldr	r3, [r3, #16]
 802b506:	2b01      	cmp	r3, #1
 802b508:	d11d      	bne.n	802b546 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802b50a:	68fb      	ldr	r3, [r7, #12]
 802b50c:	681b      	ldr	r3, [r3, #0]
 802b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b510:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802b512:	687b      	ldr	r3, [r7, #4]
 802b514:	f003 0310 	and.w	r3, r3, #16
 802b518:	221f      	movs	r2, #31
 802b51a:	fa02 f303 	lsl.w	r3, r2, r3
 802b51e:	43db      	mvns	r3, r3
 802b520:	697a      	ldr	r2, [r7, #20]
 802b522:	4013      	ands	r3, r2
 802b524:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802b526:	68bb      	ldr	r3, [r7, #8]
 802b528:	695b      	ldr	r3, [r3, #20]
 802b52a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b52c:	687b      	ldr	r3, [r7, #4]
 802b52e:	f003 0310 	and.w	r3, r3, #16
 802b532:	693a      	ldr	r2, [r7, #16]
 802b534:	fa02 f303 	lsl.w	r3, r2, r3
 802b538:	697a      	ldr	r2, [r7, #20]
 802b53a:	4313      	orrs	r3, r2
 802b53c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802b53e:	68fb      	ldr	r3, [r7, #12]
 802b540:	681b      	ldr	r3, [r3, #0]
 802b542:	697a      	ldr	r2, [r7, #20]
 802b544:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802b546:	68fb      	ldr	r3, [r7, #12]
 802b548:	681b      	ldr	r3, [r3, #0]
 802b54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b54c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802b54e:	687b      	ldr	r3, [r7, #4]
 802b550:	f003 0310 	and.w	r3, r3, #16
 802b554:	2207      	movs	r2, #7
 802b556:	fa02 f303 	lsl.w	r3, r2, r3
 802b55a:	43db      	mvns	r3, r3
 802b55c:	697a      	ldr	r2, [r7, #20]
 802b55e:	4013      	ands	r3, r2
 802b560:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802b562:	68bb      	ldr	r3, [r7, #8]
 802b564:	68db      	ldr	r3, [r3, #12]
 802b566:	2b01      	cmp	r3, #1
 802b568:	d102      	bne.n	802b570 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802b56a:	2300      	movs	r3, #0
 802b56c:	61fb      	str	r3, [r7, #28]
 802b56e:	e00f      	b.n	802b590 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802b570:	68bb      	ldr	r3, [r7, #8]
 802b572:	68db      	ldr	r3, [r3, #12]
 802b574:	2b02      	cmp	r3, #2
 802b576:	d102      	bne.n	802b57e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802b578:	2301      	movs	r3, #1
 802b57a:	61fb      	str	r3, [r7, #28]
 802b57c:	e008      	b.n	802b590 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802b57e:	68bb      	ldr	r3, [r7, #8]
 802b580:	689b      	ldr	r3, [r3, #8]
 802b582:	2b00      	cmp	r3, #0
 802b584:	d102      	bne.n	802b58c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802b586:	2301      	movs	r3, #1
 802b588:	61fb      	str	r3, [r7, #28]
 802b58a:	e001      	b.n	802b590 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802b58c:	2300      	movs	r3, #0
 802b58e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802b590:	68bb      	ldr	r3, [r7, #8]
 802b592:	681a      	ldr	r2, [r3, #0]
 802b594:	68bb      	ldr	r3, [r7, #8]
 802b596:	689b      	ldr	r3, [r3, #8]
 802b598:	4313      	orrs	r3, r2
 802b59a:	69fa      	ldr	r2, [r7, #28]
 802b59c:	4313      	orrs	r3, r2
 802b59e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	f003 0310 	and.w	r3, r3, #16
 802b5a6:	693a      	ldr	r2, [r7, #16]
 802b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 802b5ac:	697a      	ldr	r2, [r7, #20]
 802b5ae:	4313      	orrs	r3, r2
 802b5b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802b5b2:	68fb      	ldr	r3, [r7, #12]
 802b5b4:	681b      	ldr	r3, [r3, #0]
 802b5b6:	697a      	ldr	r2, [r7, #20]
 802b5b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802b5ba:	68fb      	ldr	r3, [r7, #12]
 802b5bc:	681b      	ldr	r3, [r3, #0]
 802b5be:	6819      	ldr	r1, [r3, #0]
 802b5c0:	687b      	ldr	r3, [r7, #4]
 802b5c2:	f003 0310 	and.w	r3, r3, #16
 802b5c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802b5ca:	fa02 f303 	lsl.w	r3, r2, r3
 802b5ce:	43da      	mvns	r2, r3
 802b5d0:	68fb      	ldr	r3, [r7, #12]
 802b5d2:	681b      	ldr	r3, [r3, #0]
 802b5d4:	400a      	ands	r2, r1
 802b5d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802b5d8:	68fb      	ldr	r3, [r7, #12]
 802b5da:	681b      	ldr	r3, [r3, #0]
 802b5dc:	681b      	ldr	r3, [r3, #0]
 802b5de:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802b5e0:	687b      	ldr	r3, [r7, #4]
 802b5e2:	f003 0310 	and.w	r3, r3, #16
 802b5e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 802b5ea:	fa02 f303 	lsl.w	r3, r2, r3
 802b5ee:	43db      	mvns	r3, r3
 802b5f0:	697a      	ldr	r2, [r7, #20]
 802b5f2:	4013      	ands	r3, r2
 802b5f4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802b5f6:	68bb      	ldr	r3, [r7, #8]
 802b5f8:	685b      	ldr	r3, [r3, #4]
 802b5fa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b5fc:	687b      	ldr	r3, [r7, #4]
 802b5fe:	f003 0310 	and.w	r3, r3, #16
 802b602:	693a      	ldr	r2, [r7, #16]
 802b604:	fa02 f303 	lsl.w	r3, r2, r3
 802b608:	697a      	ldr	r2, [r7, #20]
 802b60a:	4313      	orrs	r3, r2
 802b60c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802b60e:	68fb      	ldr	r3, [r7, #12]
 802b610:	681b      	ldr	r3, [r3, #0]
 802b612:	697a      	ldr	r2, [r7, #20]
 802b614:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802b616:	68fb      	ldr	r3, [r7, #12]
 802b618:	681b      	ldr	r3, [r3, #0]
 802b61a:	6819      	ldr	r1, [r3, #0]
 802b61c:	687b      	ldr	r3, [r7, #4]
 802b61e:	f003 0310 	and.w	r3, r3, #16
 802b622:	22c0      	movs	r2, #192	; 0xc0
 802b624:	fa02 f303 	lsl.w	r3, r2, r3
 802b628:	43da      	mvns	r2, r3
 802b62a:	68fb      	ldr	r3, [r7, #12]
 802b62c:	681b      	ldr	r3, [r3, #0]
 802b62e:	400a      	ands	r2, r1
 802b630:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b632:	68fb      	ldr	r3, [r7, #12]
 802b634:	2201      	movs	r2, #1
 802b636:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b638:	68fb      	ldr	r3, [r7, #12]
 802b63a:	2200      	movs	r2, #0
 802b63c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b63e:	2300      	movs	r3, #0
}
 802b640:	4618      	mov	r0, r3
 802b642:	3720      	adds	r7, #32
 802b644:	46bd      	mov	sp, r7
 802b646:	bd80      	pop	{r7, pc}
 802b648:	20008000 	.word	0x20008000

0802b64c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b64c:	b580      	push	{r7, lr}
 802b64e:	b086      	sub	sp, #24
 802b650:	af00      	add	r7, sp, #0
 802b652:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802b654:	f7ff fafe 	bl	802ac54 <HAL_GetTick>
 802b658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802b65a:	687b      	ldr	r3, [r7, #4]
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	d101      	bne.n	802b664 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802b660:	2301      	movs	r3, #1
 802b662:	e316      	b.n	802bc92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802b664:	687b      	ldr	r3, [r7, #4]
 802b666:	681b      	ldr	r3, [r3, #0]
 802b668:	4a66      	ldr	r2, [pc, #408]	; (802b804 <HAL_DMA_Init+0x1b8>)
 802b66a:	4293      	cmp	r3, r2
 802b66c:	d04a      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b66e:	687b      	ldr	r3, [r7, #4]
 802b670:	681b      	ldr	r3, [r3, #0]
 802b672:	4a65      	ldr	r2, [pc, #404]	; (802b808 <HAL_DMA_Init+0x1bc>)
 802b674:	4293      	cmp	r3, r2
 802b676:	d045      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b678:	687b      	ldr	r3, [r7, #4]
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	4a63      	ldr	r2, [pc, #396]	; (802b80c <HAL_DMA_Init+0x1c0>)
 802b67e:	4293      	cmp	r3, r2
 802b680:	d040      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b682:	687b      	ldr	r3, [r7, #4]
 802b684:	681b      	ldr	r3, [r3, #0]
 802b686:	4a62      	ldr	r2, [pc, #392]	; (802b810 <HAL_DMA_Init+0x1c4>)
 802b688:	4293      	cmp	r3, r2
 802b68a:	d03b      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b68c:	687b      	ldr	r3, [r7, #4]
 802b68e:	681b      	ldr	r3, [r3, #0]
 802b690:	4a60      	ldr	r2, [pc, #384]	; (802b814 <HAL_DMA_Init+0x1c8>)
 802b692:	4293      	cmp	r3, r2
 802b694:	d036      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b696:	687b      	ldr	r3, [r7, #4]
 802b698:	681b      	ldr	r3, [r3, #0]
 802b69a:	4a5f      	ldr	r2, [pc, #380]	; (802b818 <HAL_DMA_Init+0x1cc>)
 802b69c:	4293      	cmp	r3, r2
 802b69e:	d031      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	681b      	ldr	r3, [r3, #0]
 802b6a4:	4a5d      	ldr	r2, [pc, #372]	; (802b81c <HAL_DMA_Init+0x1d0>)
 802b6a6:	4293      	cmp	r3, r2
 802b6a8:	d02c      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6aa:	687b      	ldr	r3, [r7, #4]
 802b6ac:	681b      	ldr	r3, [r3, #0]
 802b6ae:	4a5c      	ldr	r2, [pc, #368]	; (802b820 <HAL_DMA_Init+0x1d4>)
 802b6b0:	4293      	cmp	r3, r2
 802b6b2:	d027      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6b4:	687b      	ldr	r3, [r7, #4]
 802b6b6:	681b      	ldr	r3, [r3, #0]
 802b6b8:	4a5a      	ldr	r2, [pc, #360]	; (802b824 <HAL_DMA_Init+0x1d8>)
 802b6ba:	4293      	cmp	r3, r2
 802b6bc:	d022      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6be:	687b      	ldr	r3, [r7, #4]
 802b6c0:	681b      	ldr	r3, [r3, #0]
 802b6c2:	4a59      	ldr	r2, [pc, #356]	; (802b828 <HAL_DMA_Init+0x1dc>)
 802b6c4:	4293      	cmp	r3, r2
 802b6c6:	d01d      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6c8:	687b      	ldr	r3, [r7, #4]
 802b6ca:	681b      	ldr	r3, [r3, #0]
 802b6cc:	4a57      	ldr	r2, [pc, #348]	; (802b82c <HAL_DMA_Init+0x1e0>)
 802b6ce:	4293      	cmp	r3, r2
 802b6d0:	d018      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6d2:	687b      	ldr	r3, [r7, #4]
 802b6d4:	681b      	ldr	r3, [r3, #0]
 802b6d6:	4a56      	ldr	r2, [pc, #344]	; (802b830 <HAL_DMA_Init+0x1e4>)
 802b6d8:	4293      	cmp	r3, r2
 802b6da:	d013      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6dc:	687b      	ldr	r3, [r7, #4]
 802b6de:	681b      	ldr	r3, [r3, #0]
 802b6e0:	4a54      	ldr	r2, [pc, #336]	; (802b834 <HAL_DMA_Init+0x1e8>)
 802b6e2:	4293      	cmp	r3, r2
 802b6e4:	d00e      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6e6:	687b      	ldr	r3, [r7, #4]
 802b6e8:	681b      	ldr	r3, [r3, #0]
 802b6ea:	4a53      	ldr	r2, [pc, #332]	; (802b838 <HAL_DMA_Init+0x1ec>)
 802b6ec:	4293      	cmp	r3, r2
 802b6ee:	d009      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6f0:	687b      	ldr	r3, [r7, #4]
 802b6f2:	681b      	ldr	r3, [r3, #0]
 802b6f4:	4a51      	ldr	r2, [pc, #324]	; (802b83c <HAL_DMA_Init+0x1f0>)
 802b6f6:	4293      	cmp	r3, r2
 802b6f8:	d004      	beq.n	802b704 <HAL_DMA_Init+0xb8>
 802b6fa:	687b      	ldr	r3, [r7, #4]
 802b6fc:	681b      	ldr	r3, [r3, #0]
 802b6fe:	4a50      	ldr	r2, [pc, #320]	; (802b840 <HAL_DMA_Init+0x1f4>)
 802b700:	4293      	cmp	r3, r2
 802b702:	d101      	bne.n	802b708 <HAL_DMA_Init+0xbc>
 802b704:	2301      	movs	r3, #1
 802b706:	e000      	b.n	802b70a <HAL_DMA_Init+0xbe>
 802b708:	2300      	movs	r3, #0
 802b70a:	2b00      	cmp	r3, #0
 802b70c:	f000 813b 	beq.w	802b986 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b710:	687b      	ldr	r3, [r7, #4]
 802b712:	2202      	movs	r2, #2
 802b714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b718:	687b      	ldr	r3, [r7, #4]
 802b71a:	2200      	movs	r2, #0
 802b71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802b720:	687b      	ldr	r3, [r7, #4]
 802b722:	681b      	ldr	r3, [r3, #0]
 802b724:	4a37      	ldr	r2, [pc, #220]	; (802b804 <HAL_DMA_Init+0x1b8>)
 802b726:	4293      	cmp	r3, r2
 802b728:	d04a      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b72a:	687b      	ldr	r3, [r7, #4]
 802b72c:	681b      	ldr	r3, [r3, #0]
 802b72e:	4a36      	ldr	r2, [pc, #216]	; (802b808 <HAL_DMA_Init+0x1bc>)
 802b730:	4293      	cmp	r3, r2
 802b732:	d045      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b734:	687b      	ldr	r3, [r7, #4]
 802b736:	681b      	ldr	r3, [r3, #0]
 802b738:	4a34      	ldr	r2, [pc, #208]	; (802b80c <HAL_DMA_Init+0x1c0>)
 802b73a:	4293      	cmp	r3, r2
 802b73c:	d040      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b73e:	687b      	ldr	r3, [r7, #4]
 802b740:	681b      	ldr	r3, [r3, #0]
 802b742:	4a33      	ldr	r2, [pc, #204]	; (802b810 <HAL_DMA_Init+0x1c4>)
 802b744:	4293      	cmp	r3, r2
 802b746:	d03b      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	681b      	ldr	r3, [r3, #0]
 802b74c:	4a31      	ldr	r2, [pc, #196]	; (802b814 <HAL_DMA_Init+0x1c8>)
 802b74e:	4293      	cmp	r3, r2
 802b750:	d036      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	681b      	ldr	r3, [r3, #0]
 802b756:	4a30      	ldr	r2, [pc, #192]	; (802b818 <HAL_DMA_Init+0x1cc>)
 802b758:	4293      	cmp	r3, r2
 802b75a:	d031      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b75c:	687b      	ldr	r3, [r7, #4]
 802b75e:	681b      	ldr	r3, [r3, #0]
 802b760:	4a2e      	ldr	r2, [pc, #184]	; (802b81c <HAL_DMA_Init+0x1d0>)
 802b762:	4293      	cmp	r3, r2
 802b764:	d02c      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b766:	687b      	ldr	r3, [r7, #4]
 802b768:	681b      	ldr	r3, [r3, #0]
 802b76a:	4a2d      	ldr	r2, [pc, #180]	; (802b820 <HAL_DMA_Init+0x1d4>)
 802b76c:	4293      	cmp	r3, r2
 802b76e:	d027      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b770:	687b      	ldr	r3, [r7, #4]
 802b772:	681b      	ldr	r3, [r3, #0]
 802b774:	4a2b      	ldr	r2, [pc, #172]	; (802b824 <HAL_DMA_Init+0x1d8>)
 802b776:	4293      	cmp	r3, r2
 802b778:	d022      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b77a:	687b      	ldr	r3, [r7, #4]
 802b77c:	681b      	ldr	r3, [r3, #0]
 802b77e:	4a2a      	ldr	r2, [pc, #168]	; (802b828 <HAL_DMA_Init+0x1dc>)
 802b780:	4293      	cmp	r3, r2
 802b782:	d01d      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b784:	687b      	ldr	r3, [r7, #4]
 802b786:	681b      	ldr	r3, [r3, #0]
 802b788:	4a28      	ldr	r2, [pc, #160]	; (802b82c <HAL_DMA_Init+0x1e0>)
 802b78a:	4293      	cmp	r3, r2
 802b78c:	d018      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b78e:	687b      	ldr	r3, [r7, #4]
 802b790:	681b      	ldr	r3, [r3, #0]
 802b792:	4a27      	ldr	r2, [pc, #156]	; (802b830 <HAL_DMA_Init+0x1e4>)
 802b794:	4293      	cmp	r3, r2
 802b796:	d013      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b798:	687b      	ldr	r3, [r7, #4]
 802b79a:	681b      	ldr	r3, [r3, #0]
 802b79c:	4a25      	ldr	r2, [pc, #148]	; (802b834 <HAL_DMA_Init+0x1e8>)
 802b79e:	4293      	cmp	r3, r2
 802b7a0:	d00e      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b7a2:	687b      	ldr	r3, [r7, #4]
 802b7a4:	681b      	ldr	r3, [r3, #0]
 802b7a6:	4a24      	ldr	r2, [pc, #144]	; (802b838 <HAL_DMA_Init+0x1ec>)
 802b7a8:	4293      	cmp	r3, r2
 802b7aa:	d009      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b7ac:	687b      	ldr	r3, [r7, #4]
 802b7ae:	681b      	ldr	r3, [r3, #0]
 802b7b0:	4a22      	ldr	r2, [pc, #136]	; (802b83c <HAL_DMA_Init+0x1f0>)
 802b7b2:	4293      	cmp	r3, r2
 802b7b4:	d004      	beq.n	802b7c0 <HAL_DMA_Init+0x174>
 802b7b6:	687b      	ldr	r3, [r7, #4]
 802b7b8:	681b      	ldr	r3, [r3, #0]
 802b7ba:	4a21      	ldr	r2, [pc, #132]	; (802b840 <HAL_DMA_Init+0x1f4>)
 802b7bc:	4293      	cmp	r3, r2
 802b7be:	d108      	bne.n	802b7d2 <HAL_DMA_Init+0x186>
 802b7c0:	687b      	ldr	r3, [r7, #4]
 802b7c2:	681b      	ldr	r3, [r3, #0]
 802b7c4:	681a      	ldr	r2, [r3, #0]
 802b7c6:	687b      	ldr	r3, [r7, #4]
 802b7c8:	681b      	ldr	r3, [r3, #0]
 802b7ca:	f022 0201 	bic.w	r2, r2, #1
 802b7ce:	601a      	str	r2, [r3, #0]
 802b7d0:	e007      	b.n	802b7e2 <HAL_DMA_Init+0x196>
 802b7d2:	687b      	ldr	r3, [r7, #4]
 802b7d4:	681b      	ldr	r3, [r3, #0]
 802b7d6:	681a      	ldr	r2, [r3, #0]
 802b7d8:	687b      	ldr	r3, [r7, #4]
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	f022 0201 	bic.w	r2, r2, #1
 802b7e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b7e2:	e02f      	b.n	802b844 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b7e4:	f7ff fa36 	bl	802ac54 <HAL_GetTick>
 802b7e8:	4602      	mov	r2, r0
 802b7ea:	693b      	ldr	r3, [r7, #16]
 802b7ec:	1ad3      	subs	r3, r2, r3
 802b7ee:	2b05      	cmp	r3, #5
 802b7f0:	d928      	bls.n	802b844 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b7f2:	687b      	ldr	r3, [r7, #4]
 802b7f4:	2220      	movs	r2, #32
 802b7f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802b7f8:	687b      	ldr	r3, [r7, #4]
 802b7fa:	2203      	movs	r2, #3
 802b7fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802b800:	2301      	movs	r3, #1
 802b802:	e246      	b.n	802bc92 <HAL_DMA_Init+0x646>
 802b804:	40020010 	.word	0x40020010
 802b808:	40020028 	.word	0x40020028
 802b80c:	40020040 	.word	0x40020040
 802b810:	40020058 	.word	0x40020058
 802b814:	40020070 	.word	0x40020070
 802b818:	40020088 	.word	0x40020088
 802b81c:	400200a0 	.word	0x400200a0
 802b820:	400200b8 	.word	0x400200b8
 802b824:	40020410 	.word	0x40020410
 802b828:	40020428 	.word	0x40020428
 802b82c:	40020440 	.word	0x40020440
 802b830:	40020458 	.word	0x40020458
 802b834:	40020470 	.word	0x40020470
 802b838:	40020488 	.word	0x40020488
 802b83c:	400204a0 	.word	0x400204a0
 802b840:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b844:	687b      	ldr	r3, [r7, #4]
 802b846:	681b      	ldr	r3, [r3, #0]
 802b848:	681b      	ldr	r3, [r3, #0]
 802b84a:	f003 0301 	and.w	r3, r3, #1
 802b84e:	2b00      	cmp	r3, #0
 802b850:	d1c8      	bne.n	802b7e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802b852:	687b      	ldr	r3, [r7, #4]
 802b854:	681b      	ldr	r3, [r3, #0]
 802b856:	681b      	ldr	r3, [r3, #0]
 802b858:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b85a:	697a      	ldr	r2, [r7, #20]
 802b85c:	4b83      	ldr	r3, [pc, #524]	; (802ba6c <HAL_DMA_Init+0x420>)
 802b85e:	4013      	ands	r3, r2
 802b860:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802b862:	687b      	ldr	r3, [r7, #4]
 802b864:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b866:	687b      	ldr	r3, [r7, #4]
 802b868:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802b86a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b86c:	687b      	ldr	r3, [r7, #4]
 802b86e:	691b      	ldr	r3, [r3, #16]
 802b870:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b872:	687b      	ldr	r3, [r7, #4]
 802b874:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b876:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b878:	687b      	ldr	r3, [r7, #4]
 802b87a:	699b      	ldr	r3, [r3, #24]
 802b87c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b87e:	687b      	ldr	r3, [r7, #4]
 802b880:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b882:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b884:	687b      	ldr	r3, [r7, #4]
 802b886:	6a1b      	ldr	r3, [r3, #32]
 802b888:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802b88a:	697a      	ldr	r2, [r7, #20]
 802b88c:	4313      	orrs	r3, r2
 802b88e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b890:	687b      	ldr	r3, [r7, #4]
 802b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b894:	2b04      	cmp	r3, #4
 802b896:	d107      	bne.n	802b8a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b898:	687b      	ldr	r3, [r7, #4]
 802b89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b89c:	687b      	ldr	r3, [r7, #4]
 802b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8a0:	4313      	orrs	r3, r2
 802b8a2:	697a      	ldr	r2, [r7, #20]
 802b8a4:	4313      	orrs	r3, r2
 802b8a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802b8a8:	4b71      	ldr	r3, [pc, #452]	; (802ba70 <HAL_DMA_Init+0x424>)
 802b8aa:	681a      	ldr	r2, [r3, #0]
 802b8ac:	4b71      	ldr	r3, [pc, #452]	; (802ba74 <HAL_DMA_Init+0x428>)
 802b8ae:	4013      	ands	r3, r2
 802b8b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b8b4:	d328      	bcc.n	802b908 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802b8b6:	687b      	ldr	r3, [r7, #4]
 802b8b8:	685b      	ldr	r3, [r3, #4]
 802b8ba:	2b28      	cmp	r3, #40	; 0x28
 802b8bc:	d903      	bls.n	802b8c6 <HAL_DMA_Init+0x27a>
 802b8be:	687b      	ldr	r3, [r7, #4]
 802b8c0:	685b      	ldr	r3, [r3, #4]
 802b8c2:	2b2e      	cmp	r3, #46	; 0x2e
 802b8c4:	d917      	bls.n	802b8f6 <HAL_DMA_Init+0x2aa>
 802b8c6:	687b      	ldr	r3, [r7, #4]
 802b8c8:	685b      	ldr	r3, [r3, #4]
 802b8ca:	2b3e      	cmp	r3, #62	; 0x3e
 802b8cc:	d903      	bls.n	802b8d6 <HAL_DMA_Init+0x28a>
 802b8ce:	687b      	ldr	r3, [r7, #4]
 802b8d0:	685b      	ldr	r3, [r3, #4]
 802b8d2:	2b42      	cmp	r3, #66	; 0x42
 802b8d4:	d90f      	bls.n	802b8f6 <HAL_DMA_Init+0x2aa>
 802b8d6:	687b      	ldr	r3, [r7, #4]
 802b8d8:	685b      	ldr	r3, [r3, #4]
 802b8da:	2b46      	cmp	r3, #70	; 0x46
 802b8dc:	d903      	bls.n	802b8e6 <HAL_DMA_Init+0x29a>
 802b8de:	687b      	ldr	r3, [r7, #4]
 802b8e0:	685b      	ldr	r3, [r3, #4]
 802b8e2:	2b48      	cmp	r3, #72	; 0x48
 802b8e4:	d907      	bls.n	802b8f6 <HAL_DMA_Init+0x2aa>
 802b8e6:	687b      	ldr	r3, [r7, #4]
 802b8e8:	685b      	ldr	r3, [r3, #4]
 802b8ea:	2b4e      	cmp	r3, #78	; 0x4e
 802b8ec:	d905      	bls.n	802b8fa <HAL_DMA_Init+0x2ae>
 802b8ee:	687b      	ldr	r3, [r7, #4]
 802b8f0:	685b      	ldr	r3, [r3, #4]
 802b8f2:	2b52      	cmp	r3, #82	; 0x52
 802b8f4:	d801      	bhi.n	802b8fa <HAL_DMA_Init+0x2ae>
 802b8f6:	2301      	movs	r3, #1
 802b8f8:	e000      	b.n	802b8fc <HAL_DMA_Init+0x2b0>
 802b8fa:	2300      	movs	r3, #0
 802b8fc:	2b00      	cmp	r3, #0
 802b8fe:	d003      	beq.n	802b908 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802b900:	697b      	ldr	r3, [r7, #20]
 802b902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b906:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	697a      	ldr	r2, [r7, #20]
 802b90e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802b910:	687b      	ldr	r3, [r7, #4]
 802b912:	681b      	ldr	r3, [r3, #0]
 802b914:	695b      	ldr	r3, [r3, #20]
 802b916:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b918:	697b      	ldr	r3, [r7, #20]
 802b91a:	f023 0307 	bic.w	r3, r3, #7
 802b91e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802b920:	687b      	ldr	r3, [r7, #4]
 802b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b924:	697a      	ldr	r2, [r7, #20]
 802b926:	4313      	orrs	r3, r2
 802b928:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b92e:	2b04      	cmp	r3, #4
 802b930:	d117      	bne.n	802b962 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802b932:	687b      	ldr	r3, [r7, #4]
 802b934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b936:	697a      	ldr	r2, [r7, #20]
 802b938:	4313      	orrs	r3, r2
 802b93a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b940:	2b00      	cmp	r3, #0
 802b942:	d00e      	beq.n	802b962 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b944:	6878      	ldr	r0, [r7, #4]
 802b946:	f002 fb4d 	bl	802dfe4 <DMA_CheckFifoParam>
 802b94a:	4603      	mov	r3, r0
 802b94c:	2b00      	cmp	r3, #0
 802b94e:	d008      	beq.n	802b962 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b950:	687b      	ldr	r3, [r7, #4]
 802b952:	2240      	movs	r2, #64	; 0x40
 802b954:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802b956:	687b      	ldr	r3, [r7, #4]
 802b958:	2201      	movs	r2, #1
 802b95a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802b95e:	2301      	movs	r3, #1
 802b960:	e197      	b.n	802bc92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802b962:	687b      	ldr	r3, [r7, #4]
 802b964:	681b      	ldr	r3, [r3, #0]
 802b966:	697a      	ldr	r2, [r7, #20]
 802b968:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b96a:	6878      	ldr	r0, [r7, #4]
 802b96c:	f002 fa88 	bl	802de80 <DMA_CalcBaseAndBitshift>
 802b970:	4603      	mov	r3, r0
 802b972:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b978:	f003 031f 	and.w	r3, r3, #31
 802b97c:	223f      	movs	r2, #63	; 0x3f
 802b97e:	409a      	lsls	r2, r3
 802b980:	68bb      	ldr	r3, [r7, #8]
 802b982:	609a      	str	r2, [r3, #8]
 802b984:	e0cd      	b.n	802bb22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	681b      	ldr	r3, [r3, #0]
 802b98a:	4a3b      	ldr	r2, [pc, #236]	; (802ba78 <HAL_DMA_Init+0x42c>)
 802b98c:	4293      	cmp	r3, r2
 802b98e:	d022      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	681b      	ldr	r3, [r3, #0]
 802b994:	4a39      	ldr	r2, [pc, #228]	; (802ba7c <HAL_DMA_Init+0x430>)
 802b996:	4293      	cmp	r3, r2
 802b998:	d01d      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	681b      	ldr	r3, [r3, #0]
 802b99e:	4a38      	ldr	r2, [pc, #224]	; (802ba80 <HAL_DMA_Init+0x434>)
 802b9a0:	4293      	cmp	r3, r2
 802b9a2:	d018      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b9a4:	687b      	ldr	r3, [r7, #4]
 802b9a6:	681b      	ldr	r3, [r3, #0]
 802b9a8:	4a36      	ldr	r2, [pc, #216]	; (802ba84 <HAL_DMA_Init+0x438>)
 802b9aa:	4293      	cmp	r3, r2
 802b9ac:	d013      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b9ae:	687b      	ldr	r3, [r7, #4]
 802b9b0:	681b      	ldr	r3, [r3, #0]
 802b9b2:	4a35      	ldr	r2, [pc, #212]	; (802ba88 <HAL_DMA_Init+0x43c>)
 802b9b4:	4293      	cmp	r3, r2
 802b9b6:	d00e      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b9b8:	687b      	ldr	r3, [r7, #4]
 802b9ba:	681b      	ldr	r3, [r3, #0]
 802b9bc:	4a33      	ldr	r2, [pc, #204]	; (802ba8c <HAL_DMA_Init+0x440>)
 802b9be:	4293      	cmp	r3, r2
 802b9c0:	d009      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b9c2:	687b      	ldr	r3, [r7, #4]
 802b9c4:	681b      	ldr	r3, [r3, #0]
 802b9c6:	4a32      	ldr	r2, [pc, #200]	; (802ba90 <HAL_DMA_Init+0x444>)
 802b9c8:	4293      	cmp	r3, r2
 802b9ca:	d004      	beq.n	802b9d6 <HAL_DMA_Init+0x38a>
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	681b      	ldr	r3, [r3, #0]
 802b9d0:	4a30      	ldr	r2, [pc, #192]	; (802ba94 <HAL_DMA_Init+0x448>)
 802b9d2:	4293      	cmp	r3, r2
 802b9d4:	d101      	bne.n	802b9da <HAL_DMA_Init+0x38e>
 802b9d6:	2301      	movs	r3, #1
 802b9d8:	e000      	b.n	802b9dc <HAL_DMA_Init+0x390>
 802b9da:	2300      	movs	r3, #0
 802b9dc:	2b00      	cmp	r3, #0
 802b9de:	f000 8097 	beq.w	802bb10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	681b      	ldr	r3, [r3, #0]
 802b9e6:	4a24      	ldr	r2, [pc, #144]	; (802ba78 <HAL_DMA_Init+0x42c>)
 802b9e8:	4293      	cmp	r3, r2
 802b9ea:	d021      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	681b      	ldr	r3, [r3, #0]
 802b9f0:	4a22      	ldr	r2, [pc, #136]	; (802ba7c <HAL_DMA_Init+0x430>)
 802b9f2:	4293      	cmp	r3, r2
 802b9f4:	d01c      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802b9f6:	687b      	ldr	r3, [r7, #4]
 802b9f8:	681b      	ldr	r3, [r3, #0]
 802b9fa:	4a21      	ldr	r2, [pc, #132]	; (802ba80 <HAL_DMA_Init+0x434>)
 802b9fc:	4293      	cmp	r3, r2
 802b9fe:	d017      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802ba00:	687b      	ldr	r3, [r7, #4]
 802ba02:	681b      	ldr	r3, [r3, #0]
 802ba04:	4a1f      	ldr	r2, [pc, #124]	; (802ba84 <HAL_DMA_Init+0x438>)
 802ba06:	4293      	cmp	r3, r2
 802ba08:	d012      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802ba0a:	687b      	ldr	r3, [r7, #4]
 802ba0c:	681b      	ldr	r3, [r3, #0]
 802ba0e:	4a1e      	ldr	r2, [pc, #120]	; (802ba88 <HAL_DMA_Init+0x43c>)
 802ba10:	4293      	cmp	r3, r2
 802ba12:	d00d      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802ba14:	687b      	ldr	r3, [r7, #4]
 802ba16:	681b      	ldr	r3, [r3, #0]
 802ba18:	4a1c      	ldr	r2, [pc, #112]	; (802ba8c <HAL_DMA_Init+0x440>)
 802ba1a:	4293      	cmp	r3, r2
 802ba1c:	d008      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802ba1e:	687b      	ldr	r3, [r7, #4]
 802ba20:	681b      	ldr	r3, [r3, #0]
 802ba22:	4a1b      	ldr	r2, [pc, #108]	; (802ba90 <HAL_DMA_Init+0x444>)
 802ba24:	4293      	cmp	r3, r2
 802ba26:	d003      	beq.n	802ba30 <HAL_DMA_Init+0x3e4>
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	681b      	ldr	r3, [r3, #0]
 802ba2c:	4a19      	ldr	r2, [pc, #100]	; (802ba94 <HAL_DMA_Init+0x448>)
 802ba2e:	4293      	cmp	r3, r2
 802ba30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ba32:	687b      	ldr	r3, [r7, #4]
 802ba34:	2202      	movs	r2, #2
 802ba36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802ba3a:	687b      	ldr	r3, [r7, #4]
 802ba3c:	2200      	movs	r2, #0
 802ba3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802ba42:	687b      	ldr	r3, [r7, #4]
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	681b      	ldr	r3, [r3, #0]
 802ba48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802ba4a:	697a      	ldr	r2, [r7, #20]
 802ba4c:	4b12      	ldr	r3, [pc, #72]	; (802ba98 <HAL_DMA_Init+0x44c>)
 802ba4e:	4013      	ands	r3, r2
 802ba50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ba52:	687b      	ldr	r3, [r7, #4]
 802ba54:	689b      	ldr	r3, [r3, #8]
 802ba56:	2b40      	cmp	r3, #64	; 0x40
 802ba58:	d020      	beq.n	802ba9c <HAL_DMA_Init+0x450>
 802ba5a:	687b      	ldr	r3, [r7, #4]
 802ba5c:	689b      	ldr	r3, [r3, #8]
 802ba5e:	2b80      	cmp	r3, #128	; 0x80
 802ba60:	d102      	bne.n	802ba68 <HAL_DMA_Init+0x41c>
 802ba62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802ba66:	e01a      	b.n	802ba9e <HAL_DMA_Init+0x452>
 802ba68:	2300      	movs	r3, #0
 802ba6a:	e018      	b.n	802ba9e <HAL_DMA_Init+0x452>
 802ba6c:	fe10803f 	.word	0xfe10803f
 802ba70:	5c001000 	.word	0x5c001000
 802ba74:	ffff0000 	.word	0xffff0000
 802ba78:	58025408 	.word	0x58025408
 802ba7c:	5802541c 	.word	0x5802541c
 802ba80:	58025430 	.word	0x58025430
 802ba84:	58025444 	.word	0x58025444
 802ba88:	58025458 	.word	0x58025458
 802ba8c:	5802546c 	.word	0x5802546c
 802ba90:	58025480 	.word	0x58025480
 802ba94:	58025494 	.word	0x58025494
 802ba98:	fffe000f 	.word	0xfffe000f
 802ba9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ba9e:	687a      	ldr	r2, [r7, #4]
 802baa0:	68d2      	ldr	r2, [r2, #12]
 802baa2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802baa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802baa6:	687b      	ldr	r3, [r7, #4]
 802baa8:	691b      	ldr	r3, [r3, #16]
 802baaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802baac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802baae:	687b      	ldr	r3, [r7, #4]
 802bab0:	695b      	ldr	r3, [r3, #20]
 802bab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802bab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802bab6:	687b      	ldr	r3, [r7, #4]
 802bab8:	699b      	ldr	r3, [r3, #24]
 802baba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802babc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	69db      	ldr	r3, [r3, #28]
 802bac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802bac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802bac6:	687b      	ldr	r3, [r7, #4]
 802bac8:	6a1b      	ldr	r3, [r3, #32]
 802baca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802bacc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802bace:	697a      	ldr	r2, [r7, #20]
 802bad0:	4313      	orrs	r3, r2
 802bad2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	681b      	ldr	r3, [r3, #0]
 802bad8:	697a      	ldr	r2, [r7, #20]
 802bada:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802badc:	687b      	ldr	r3, [r7, #4]
 802bade:	681b      	ldr	r3, [r3, #0]
 802bae0:	461a      	mov	r2, r3
 802bae2:	4b6e      	ldr	r3, [pc, #440]	; (802bc9c <HAL_DMA_Init+0x650>)
 802bae4:	4413      	add	r3, r2
 802bae6:	4a6e      	ldr	r2, [pc, #440]	; (802bca0 <HAL_DMA_Init+0x654>)
 802bae8:	fba2 2303 	umull	r2, r3, r2, r3
 802baec:	091b      	lsrs	r3, r3, #4
 802baee:	009a      	lsls	r2, r3, #2
 802baf0:	687b      	ldr	r3, [r7, #4]
 802baf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802baf4:	6878      	ldr	r0, [r7, #4]
 802baf6:	f002 f9c3 	bl	802de80 <DMA_CalcBaseAndBitshift>
 802bafa:	4603      	mov	r3, r0
 802bafc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802bafe:	687b      	ldr	r3, [r7, #4]
 802bb00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802bb02:	f003 031f 	and.w	r3, r3, #31
 802bb06:	2201      	movs	r2, #1
 802bb08:	409a      	lsls	r2, r3
 802bb0a:	68fb      	ldr	r3, [r7, #12]
 802bb0c:	605a      	str	r2, [r3, #4]
 802bb0e:	e008      	b.n	802bb22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	2240      	movs	r2, #64	; 0x40
 802bb14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802bb16:	687b      	ldr	r3, [r7, #4]
 802bb18:	2203      	movs	r2, #3
 802bb1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802bb1e:	2301      	movs	r3, #1
 802bb20:	e0b7      	b.n	802bc92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	681b      	ldr	r3, [r3, #0]
 802bb26:	4a5f      	ldr	r2, [pc, #380]	; (802bca4 <HAL_DMA_Init+0x658>)
 802bb28:	4293      	cmp	r3, r2
 802bb2a:	d072      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb2c:	687b      	ldr	r3, [r7, #4]
 802bb2e:	681b      	ldr	r3, [r3, #0]
 802bb30:	4a5d      	ldr	r2, [pc, #372]	; (802bca8 <HAL_DMA_Init+0x65c>)
 802bb32:	4293      	cmp	r3, r2
 802bb34:	d06d      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	681b      	ldr	r3, [r3, #0]
 802bb3a:	4a5c      	ldr	r2, [pc, #368]	; (802bcac <HAL_DMA_Init+0x660>)
 802bb3c:	4293      	cmp	r3, r2
 802bb3e:	d068      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb40:	687b      	ldr	r3, [r7, #4]
 802bb42:	681b      	ldr	r3, [r3, #0]
 802bb44:	4a5a      	ldr	r2, [pc, #360]	; (802bcb0 <HAL_DMA_Init+0x664>)
 802bb46:	4293      	cmp	r3, r2
 802bb48:	d063      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb4a:	687b      	ldr	r3, [r7, #4]
 802bb4c:	681b      	ldr	r3, [r3, #0]
 802bb4e:	4a59      	ldr	r2, [pc, #356]	; (802bcb4 <HAL_DMA_Init+0x668>)
 802bb50:	4293      	cmp	r3, r2
 802bb52:	d05e      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb54:	687b      	ldr	r3, [r7, #4]
 802bb56:	681b      	ldr	r3, [r3, #0]
 802bb58:	4a57      	ldr	r2, [pc, #348]	; (802bcb8 <HAL_DMA_Init+0x66c>)
 802bb5a:	4293      	cmp	r3, r2
 802bb5c:	d059      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb5e:	687b      	ldr	r3, [r7, #4]
 802bb60:	681b      	ldr	r3, [r3, #0]
 802bb62:	4a56      	ldr	r2, [pc, #344]	; (802bcbc <HAL_DMA_Init+0x670>)
 802bb64:	4293      	cmp	r3, r2
 802bb66:	d054      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb68:	687b      	ldr	r3, [r7, #4]
 802bb6a:	681b      	ldr	r3, [r3, #0]
 802bb6c:	4a54      	ldr	r2, [pc, #336]	; (802bcc0 <HAL_DMA_Init+0x674>)
 802bb6e:	4293      	cmp	r3, r2
 802bb70:	d04f      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb72:	687b      	ldr	r3, [r7, #4]
 802bb74:	681b      	ldr	r3, [r3, #0]
 802bb76:	4a53      	ldr	r2, [pc, #332]	; (802bcc4 <HAL_DMA_Init+0x678>)
 802bb78:	4293      	cmp	r3, r2
 802bb7a:	d04a      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb7c:	687b      	ldr	r3, [r7, #4]
 802bb7e:	681b      	ldr	r3, [r3, #0]
 802bb80:	4a51      	ldr	r2, [pc, #324]	; (802bcc8 <HAL_DMA_Init+0x67c>)
 802bb82:	4293      	cmp	r3, r2
 802bb84:	d045      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb86:	687b      	ldr	r3, [r7, #4]
 802bb88:	681b      	ldr	r3, [r3, #0]
 802bb8a:	4a50      	ldr	r2, [pc, #320]	; (802bccc <HAL_DMA_Init+0x680>)
 802bb8c:	4293      	cmp	r3, r2
 802bb8e:	d040      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb90:	687b      	ldr	r3, [r7, #4]
 802bb92:	681b      	ldr	r3, [r3, #0]
 802bb94:	4a4e      	ldr	r2, [pc, #312]	; (802bcd0 <HAL_DMA_Init+0x684>)
 802bb96:	4293      	cmp	r3, r2
 802bb98:	d03b      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bb9a:	687b      	ldr	r3, [r7, #4]
 802bb9c:	681b      	ldr	r3, [r3, #0]
 802bb9e:	4a4d      	ldr	r2, [pc, #308]	; (802bcd4 <HAL_DMA_Init+0x688>)
 802bba0:	4293      	cmp	r3, r2
 802bba2:	d036      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bba4:	687b      	ldr	r3, [r7, #4]
 802bba6:	681b      	ldr	r3, [r3, #0]
 802bba8:	4a4b      	ldr	r2, [pc, #300]	; (802bcd8 <HAL_DMA_Init+0x68c>)
 802bbaa:	4293      	cmp	r3, r2
 802bbac:	d031      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbae:	687b      	ldr	r3, [r7, #4]
 802bbb0:	681b      	ldr	r3, [r3, #0]
 802bbb2:	4a4a      	ldr	r2, [pc, #296]	; (802bcdc <HAL_DMA_Init+0x690>)
 802bbb4:	4293      	cmp	r3, r2
 802bbb6:	d02c      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbb8:	687b      	ldr	r3, [r7, #4]
 802bbba:	681b      	ldr	r3, [r3, #0]
 802bbbc:	4a48      	ldr	r2, [pc, #288]	; (802bce0 <HAL_DMA_Init+0x694>)
 802bbbe:	4293      	cmp	r3, r2
 802bbc0:	d027      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbc2:	687b      	ldr	r3, [r7, #4]
 802bbc4:	681b      	ldr	r3, [r3, #0]
 802bbc6:	4a47      	ldr	r2, [pc, #284]	; (802bce4 <HAL_DMA_Init+0x698>)
 802bbc8:	4293      	cmp	r3, r2
 802bbca:	d022      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbcc:	687b      	ldr	r3, [r7, #4]
 802bbce:	681b      	ldr	r3, [r3, #0]
 802bbd0:	4a45      	ldr	r2, [pc, #276]	; (802bce8 <HAL_DMA_Init+0x69c>)
 802bbd2:	4293      	cmp	r3, r2
 802bbd4:	d01d      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbd6:	687b      	ldr	r3, [r7, #4]
 802bbd8:	681b      	ldr	r3, [r3, #0]
 802bbda:	4a44      	ldr	r2, [pc, #272]	; (802bcec <HAL_DMA_Init+0x6a0>)
 802bbdc:	4293      	cmp	r3, r2
 802bbde:	d018      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	681b      	ldr	r3, [r3, #0]
 802bbe4:	4a42      	ldr	r2, [pc, #264]	; (802bcf0 <HAL_DMA_Init+0x6a4>)
 802bbe6:	4293      	cmp	r3, r2
 802bbe8:	d013      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbea:	687b      	ldr	r3, [r7, #4]
 802bbec:	681b      	ldr	r3, [r3, #0]
 802bbee:	4a41      	ldr	r2, [pc, #260]	; (802bcf4 <HAL_DMA_Init+0x6a8>)
 802bbf0:	4293      	cmp	r3, r2
 802bbf2:	d00e      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbf4:	687b      	ldr	r3, [r7, #4]
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	4a3f      	ldr	r2, [pc, #252]	; (802bcf8 <HAL_DMA_Init+0x6ac>)
 802bbfa:	4293      	cmp	r3, r2
 802bbfc:	d009      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bbfe:	687b      	ldr	r3, [r7, #4]
 802bc00:	681b      	ldr	r3, [r3, #0]
 802bc02:	4a3e      	ldr	r2, [pc, #248]	; (802bcfc <HAL_DMA_Init+0x6b0>)
 802bc04:	4293      	cmp	r3, r2
 802bc06:	d004      	beq.n	802bc12 <HAL_DMA_Init+0x5c6>
 802bc08:	687b      	ldr	r3, [r7, #4]
 802bc0a:	681b      	ldr	r3, [r3, #0]
 802bc0c:	4a3c      	ldr	r2, [pc, #240]	; (802bd00 <HAL_DMA_Init+0x6b4>)
 802bc0e:	4293      	cmp	r3, r2
 802bc10:	d101      	bne.n	802bc16 <HAL_DMA_Init+0x5ca>
 802bc12:	2301      	movs	r3, #1
 802bc14:	e000      	b.n	802bc18 <HAL_DMA_Init+0x5cc>
 802bc16:	2300      	movs	r3, #0
 802bc18:	2b00      	cmp	r3, #0
 802bc1a:	d032      	beq.n	802bc82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802bc1c:	6878      	ldr	r0, [r7, #4]
 802bc1e:	f002 fa5d 	bl	802e0dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802bc22:	687b      	ldr	r3, [r7, #4]
 802bc24:	689b      	ldr	r3, [r3, #8]
 802bc26:	2b80      	cmp	r3, #128	; 0x80
 802bc28:	d102      	bne.n	802bc30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	2200      	movs	r2, #0
 802bc2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802bc30:	687b      	ldr	r3, [r7, #4]
 802bc32:	685a      	ldr	r2, [r3, #4]
 802bc34:	687b      	ldr	r3, [r7, #4]
 802bc36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bc38:	b2d2      	uxtb	r2, r2
 802bc3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802bc3c:	687b      	ldr	r3, [r7, #4]
 802bc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802bc40:	687a      	ldr	r2, [r7, #4]
 802bc42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802bc44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802bc46:	687b      	ldr	r3, [r7, #4]
 802bc48:	685b      	ldr	r3, [r3, #4]
 802bc4a:	2b00      	cmp	r3, #0
 802bc4c:	d010      	beq.n	802bc70 <HAL_DMA_Init+0x624>
 802bc4e:	687b      	ldr	r3, [r7, #4]
 802bc50:	685b      	ldr	r3, [r3, #4]
 802bc52:	2b08      	cmp	r3, #8
 802bc54:	d80c      	bhi.n	802bc70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802bc56:	6878      	ldr	r0, [r7, #4]
 802bc58:	f002 fada 	bl	802e210 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802bc5c:	687b      	ldr	r3, [r7, #4]
 802bc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bc60:	2200      	movs	r2, #0
 802bc62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802bc64:	687b      	ldr	r3, [r7, #4]
 802bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bc68:	687a      	ldr	r2, [r7, #4]
 802bc6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802bc6c:	605a      	str	r2, [r3, #4]
 802bc6e:	e008      	b.n	802bc82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	2200      	movs	r2, #0
 802bc74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802bc76:	687b      	ldr	r3, [r7, #4]
 802bc78:	2200      	movs	r2, #0
 802bc7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802bc7c:	687b      	ldr	r3, [r7, #4]
 802bc7e:	2200      	movs	r2, #0
 802bc80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bc82:	687b      	ldr	r3, [r7, #4]
 802bc84:	2200      	movs	r2, #0
 802bc86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802bc88:	687b      	ldr	r3, [r7, #4]
 802bc8a:	2201      	movs	r2, #1
 802bc8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802bc90:	2300      	movs	r3, #0
}
 802bc92:	4618      	mov	r0, r3
 802bc94:	3718      	adds	r7, #24
 802bc96:	46bd      	mov	sp, r7
 802bc98:	bd80      	pop	{r7, pc}
 802bc9a:	bf00      	nop
 802bc9c:	a7fdabf8 	.word	0xa7fdabf8
 802bca0:	cccccccd 	.word	0xcccccccd
 802bca4:	40020010 	.word	0x40020010
 802bca8:	40020028 	.word	0x40020028
 802bcac:	40020040 	.word	0x40020040
 802bcb0:	40020058 	.word	0x40020058
 802bcb4:	40020070 	.word	0x40020070
 802bcb8:	40020088 	.word	0x40020088
 802bcbc:	400200a0 	.word	0x400200a0
 802bcc0:	400200b8 	.word	0x400200b8
 802bcc4:	40020410 	.word	0x40020410
 802bcc8:	40020428 	.word	0x40020428
 802bccc:	40020440 	.word	0x40020440
 802bcd0:	40020458 	.word	0x40020458
 802bcd4:	40020470 	.word	0x40020470
 802bcd8:	40020488 	.word	0x40020488
 802bcdc:	400204a0 	.word	0x400204a0
 802bce0:	400204b8 	.word	0x400204b8
 802bce4:	58025408 	.word	0x58025408
 802bce8:	5802541c 	.word	0x5802541c
 802bcec:	58025430 	.word	0x58025430
 802bcf0:	58025444 	.word	0x58025444
 802bcf4:	58025458 	.word	0x58025458
 802bcf8:	5802546c 	.word	0x5802546c
 802bcfc:	58025480 	.word	0x58025480
 802bd00:	58025494 	.word	0x58025494

0802bd04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bd04:	b580      	push	{r7, lr}
 802bd06:	b086      	sub	sp, #24
 802bd08:	af00      	add	r7, sp, #0
 802bd0a:	60f8      	str	r0, [r7, #12]
 802bd0c:	60b9      	str	r1, [r7, #8]
 802bd0e:	607a      	str	r2, [r7, #4]
 802bd10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bd12:	2300      	movs	r3, #0
 802bd14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802bd16:	68fb      	ldr	r3, [r7, #12]
 802bd18:	2b00      	cmp	r3, #0
 802bd1a:	d101      	bne.n	802bd20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802bd1c:	2301      	movs	r3, #1
 802bd1e:	e226      	b.n	802c16e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802bd20:	68fb      	ldr	r3, [r7, #12]
 802bd22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802bd26:	2b01      	cmp	r3, #1
 802bd28:	d101      	bne.n	802bd2e <HAL_DMA_Start_IT+0x2a>
 802bd2a:	2302      	movs	r3, #2
 802bd2c:	e21f      	b.n	802c16e <HAL_DMA_Start_IT+0x46a>
 802bd2e:	68fb      	ldr	r3, [r7, #12]
 802bd30:	2201      	movs	r2, #1
 802bd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802bd36:	68fb      	ldr	r3, [r7, #12]
 802bd38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802bd3c:	b2db      	uxtb	r3, r3
 802bd3e:	2b01      	cmp	r3, #1
 802bd40:	f040 820a 	bne.w	802c158 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bd44:	68fb      	ldr	r3, [r7, #12]
 802bd46:	2202      	movs	r2, #2
 802bd48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bd4c:	68fb      	ldr	r3, [r7, #12]
 802bd4e:	2200      	movs	r2, #0
 802bd50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802bd52:	68fb      	ldr	r3, [r7, #12]
 802bd54:	681b      	ldr	r3, [r3, #0]
 802bd56:	4a68      	ldr	r2, [pc, #416]	; (802bef8 <HAL_DMA_Start_IT+0x1f4>)
 802bd58:	4293      	cmp	r3, r2
 802bd5a:	d04a      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd5c:	68fb      	ldr	r3, [r7, #12]
 802bd5e:	681b      	ldr	r3, [r3, #0]
 802bd60:	4a66      	ldr	r2, [pc, #408]	; (802befc <HAL_DMA_Start_IT+0x1f8>)
 802bd62:	4293      	cmp	r3, r2
 802bd64:	d045      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd66:	68fb      	ldr	r3, [r7, #12]
 802bd68:	681b      	ldr	r3, [r3, #0]
 802bd6a:	4a65      	ldr	r2, [pc, #404]	; (802bf00 <HAL_DMA_Start_IT+0x1fc>)
 802bd6c:	4293      	cmp	r3, r2
 802bd6e:	d040      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd70:	68fb      	ldr	r3, [r7, #12]
 802bd72:	681b      	ldr	r3, [r3, #0]
 802bd74:	4a63      	ldr	r2, [pc, #396]	; (802bf04 <HAL_DMA_Start_IT+0x200>)
 802bd76:	4293      	cmp	r3, r2
 802bd78:	d03b      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd7a:	68fb      	ldr	r3, [r7, #12]
 802bd7c:	681b      	ldr	r3, [r3, #0]
 802bd7e:	4a62      	ldr	r2, [pc, #392]	; (802bf08 <HAL_DMA_Start_IT+0x204>)
 802bd80:	4293      	cmp	r3, r2
 802bd82:	d036      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd84:	68fb      	ldr	r3, [r7, #12]
 802bd86:	681b      	ldr	r3, [r3, #0]
 802bd88:	4a60      	ldr	r2, [pc, #384]	; (802bf0c <HAL_DMA_Start_IT+0x208>)
 802bd8a:	4293      	cmp	r3, r2
 802bd8c:	d031      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd8e:	68fb      	ldr	r3, [r7, #12]
 802bd90:	681b      	ldr	r3, [r3, #0]
 802bd92:	4a5f      	ldr	r2, [pc, #380]	; (802bf10 <HAL_DMA_Start_IT+0x20c>)
 802bd94:	4293      	cmp	r3, r2
 802bd96:	d02c      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bd98:	68fb      	ldr	r3, [r7, #12]
 802bd9a:	681b      	ldr	r3, [r3, #0]
 802bd9c:	4a5d      	ldr	r2, [pc, #372]	; (802bf14 <HAL_DMA_Start_IT+0x210>)
 802bd9e:	4293      	cmp	r3, r2
 802bda0:	d027      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bda2:	68fb      	ldr	r3, [r7, #12]
 802bda4:	681b      	ldr	r3, [r3, #0]
 802bda6:	4a5c      	ldr	r2, [pc, #368]	; (802bf18 <HAL_DMA_Start_IT+0x214>)
 802bda8:	4293      	cmp	r3, r2
 802bdaa:	d022      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdac:	68fb      	ldr	r3, [r7, #12]
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	4a5a      	ldr	r2, [pc, #360]	; (802bf1c <HAL_DMA_Start_IT+0x218>)
 802bdb2:	4293      	cmp	r3, r2
 802bdb4:	d01d      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdb6:	68fb      	ldr	r3, [r7, #12]
 802bdb8:	681b      	ldr	r3, [r3, #0]
 802bdba:	4a59      	ldr	r2, [pc, #356]	; (802bf20 <HAL_DMA_Start_IT+0x21c>)
 802bdbc:	4293      	cmp	r3, r2
 802bdbe:	d018      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdc0:	68fb      	ldr	r3, [r7, #12]
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	4a57      	ldr	r2, [pc, #348]	; (802bf24 <HAL_DMA_Start_IT+0x220>)
 802bdc6:	4293      	cmp	r3, r2
 802bdc8:	d013      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdca:	68fb      	ldr	r3, [r7, #12]
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	4a56      	ldr	r2, [pc, #344]	; (802bf28 <HAL_DMA_Start_IT+0x224>)
 802bdd0:	4293      	cmp	r3, r2
 802bdd2:	d00e      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	681b      	ldr	r3, [r3, #0]
 802bdd8:	4a54      	ldr	r2, [pc, #336]	; (802bf2c <HAL_DMA_Start_IT+0x228>)
 802bdda:	4293      	cmp	r3, r2
 802bddc:	d009      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bdde:	68fb      	ldr	r3, [r7, #12]
 802bde0:	681b      	ldr	r3, [r3, #0]
 802bde2:	4a53      	ldr	r2, [pc, #332]	; (802bf30 <HAL_DMA_Start_IT+0x22c>)
 802bde4:	4293      	cmp	r3, r2
 802bde6:	d004      	beq.n	802bdf2 <HAL_DMA_Start_IT+0xee>
 802bde8:	68fb      	ldr	r3, [r7, #12]
 802bdea:	681b      	ldr	r3, [r3, #0]
 802bdec:	4a51      	ldr	r2, [pc, #324]	; (802bf34 <HAL_DMA_Start_IT+0x230>)
 802bdee:	4293      	cmp	r3, r2
 802bdf0:	d108      	bne.n	802be04 <HAL_DMA_Start_IT+0x100>
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	681b      	ldr	r3, [r3, #0]
 802bdf6:	681a      	ldr	r2, [r3, #0]
 802bdf8:	68fb      	ldr	r3, [r7, #12]
 802bdfa:	681b      	ldr	r3, [r3, #0]
 802bdfc:	f022 0201 	bic.w	r2, r2, #1
 802be00:	601a      	str	r2, [r3, #0]
 802be02:	e007      	b.n	802be14 <HAL_DMA_Start_IT+0x110>
 802be04:	68fb      	ldr	r3, [r7, #12]
 802be06:	681b      	ldr	r3, [r3, #0]
 802be08:	681a      	ldr	r2, [r3, #0]
 802be0a:	68fb      	ldr	r3, [r7, #12]
 802be0c:	681b      	ldr	r3, [r3, #0]
 802be0e:	f022 0201 	bic.w	r2, r2, #1
 802be12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802be14:	683b      	ldr	r3, [r7, #0]
 802be16:	687a      	ldr	r2, [r7, #4]
 802be18:	68b9      	ldr	r1, [r7, #8]
 802be1a:	68f8      	ldr	r0, [r7, #12]
 802be1c:	f001 fe84 	bl	802db28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802be20:	68fb      	ldr	r3, [r7, #12]
 802be22:	681b      	ldr	r3, [r3, #0]
 802be24:	4a34      	ldr	r2, [pc, #208]	; (802bef8 <HAL_DMA_Start_IT+0x1f4>)
 802be26:	4293      	cmp	r3, r2
 802be28:	d04a      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be2a:	68fb      	ldr	r3, [r7, #12]
 802be2c:	681b      	ldr	r3, [r3, #0]
 802be2e:	4a33      	ldr	r2, [pc, #204]	; (802befc <HAL_DMA_Start_IT+0x1f8>)
 802be30:	4293      	cmp	r3, r2
 802be32:	d045      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be34:	68fb      	ldr	r3, [r7, #12]
 802be36:	681b      	ldr	r3, [r3, #0]
 802be38:	4a31      	ldr	r2, [pc, #196]	; (802bf00 <HAL_DMA_Start_IT+0x1fc>)
 802be3a:	4293      	cmp	r3, r2
 802be3c:	d040      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be3e:	68fb      	ldr	r3, [r7, #12]
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	4a30      	ldr	r2, [pc, #192]	; (802bf04 <HAL_DMA_Start_IT+0x200>)
 802be44:	4293      	cmp	r3, r2
 802be46:	d03b      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be48:	68fb      	ldr	r3, [r7, #12]
 802be4a:	681b      	ldr	r3, [r3, #0]
 802be4c:	4a2e      	ldr	r2, [pc, #184]	; (802bf08 <HAL_DMA_Start_IT+0x204>)
 802be4e:	4293      	cmp	r3, r2
 802be50:	d036      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be52:	68fb      	ldr	r3, [r7, #12]
 802be54:	681b      	ldr	r3, [r3, #0]
 802be56:	4a2d      	ldr	r2, [pc, #180]	; (802bf0c <HAL_DMA_Start_IT+0x208>)
 802be58:	4293      	cmp	r3, r2
 802be5a:	d031      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be5c:	68fb      	ldr	r3, [r7, #12]
 802be5e:	681b      	ldr	r3, [r3, #0]
 802be60:	4a2b      	ldr	r2, [pc, #172]	; (802bf10 <HAL_DMA_Start_IT+0x20c>)
 802be62:	4293      	cmp	r3, r2
 802be64:	d02c      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be66:	68fb      	ldr	r3, [r7, #12]
 802be68:	681b      	ldr	r3, [r3, #0]
 802be6a:	4a2a      	ldr	r2, [pc, #168]	; (802bf14 <HAL_DMA_Start_IT+0x210>)
 802be6c:	4293      	cmp	r3, r2
 802be6e:	d027      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be70:	68fb      	ldr	r3, [r7, #12]
 802be72:	681b      	ldr	r3, [r3, #0]
 802be74:	4a28      	ldr	r2, [pc, #160]	; (802bf18 <HAL_DMA_Start_IT+0x214>)
 802be76:	4293      	cmp	r3, r2
 802be78:	d022      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be7a:	68fb      	ldr	r3, [r7, #12]
 802be7c:	681b      	ldr	r3, [r3, #0]
 802be7e:	4a27      	ldr	r2, [pc, #156]	; (802bf1c <HAL_DMA_Start_IT+0x218>)
 802be80:	4293      	cmp	r3, r2
 802be82:	d01d      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be84:	68fb      	ldr	r3, [r7, #12]
 802be86:	681b      	ldr	r3, [r3, #0]
 802be88:	4a25      	ldr	r2, [pc, #148]	; (802bf20 <HAL_DMA_Start_IT+0x21c>)
 802be8a:	4293      	cmp	r3, r2
 802be8c:	d018      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be8e:	68fb      	ldr	r3, [r7, #12]
 802be90:	681b      	ldr	r3, [r3, #0]
 802be92:	4a24      	ldr	r2, [pc, #144]	; (802bf24 <HAL_DMA_Start_IT+0x220>)
 802be94:	4293      	cmp	r3, r2
 802be96:	d013      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802be98:	68fb      	ldr	r3, [r7, #12]
 802be9a:	681b      	ldr	r3, [r3, #0]
 802be9c:	4a22      	ldr	r2, [pc, #136]	; (802bf28 <HAL_DMA_Start_IT+0x224>)
 802be9e:	4293      	cmp	r3, r2
 802bea0:	d00e      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802bea2:	68fb      	ldr	r3, [r7, #12]
 802bea4:	681b      	ldr	r3, [r3, #0]
 802bea6:	4a21      	ldr	r2, [pc, #132]	; (802bf2c <HAL_DMA_Start_IT+0x228>)
 802bea8:	4293      	cmp	r3, r2
 802beaa:	d009      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802beac:	68fb      	ldr	r3, [r7, #12]
 802beae:	681b      	ldr	r3, [r3, #0]
 802beb0:	4a1f      	ldr	r2, [pc, #124]	; (802bf30 <HAL_DMA_Start_IT+0x22c>)
 802beb2:	4293      	cmp	r3, r2
 802beb4:	d004      	beq.n	802bec0 <HAL_DMA_Start_IT+0x1bc>
 802beb6:	68fb      	ldr	r3, [r7, #12]
 802beb8:	681b      	ldr	r3, [r3, #0]
 802beba:	4a1e      	ldr	r2, [pc, #120]	; (802bf34 <HAL_DMA_Start_IT+0x230>)
 802bebc:	4293      	cmp	r3, r2
 802bebe:	d101      	bne.n	802bec4 <HAL_DMA_Start_IT+0x1c0>
 802bec0:	2301      	movs	r3, #1
 802bec2:	e000      	b.n	802bec6 <HAL_DMA_Start_IT+0x1c2>
 802bec4:	2300      	movs	r3, #0
 802bec6:	2b00      	cmp	r3, #0
 802bec8:	d036      	beq.n	802bf38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802beca:	68fb      	ldr	r3, [r7, #12]
 802becc:	681b      	ldr	r3, [r3, #0]
 802bece:	681b      	ldr	r3, [r3, #0]
 802bed0:	f023 021e 	bic.w	r2, r3, #30
 802bed4:	68fb      	ldr	r3, [r7, #12]
 802bed6:	681b      	ldr	r3, [r3, #0]
 802bed8:	f042 0216 	orr.w	r2, r2, #22
 802bedc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bede:	68fb      	ldr	r3, [r7, #12]
 802bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bee2:	2b00      	cmp	r3, #0
 802bee4:	d03e      	beq.n	802bf64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802bee6:	68fb      	ldr	r3, [r7, #12]
 802bee8:	681b      	ldr	r3, [r3, #0]
 802beea:	681a      	ldr	r2, [r3, #0]
 802beec:	68fb      	ldr	r3, [r7, #12]
 802beee:	681b      	ldr	r3, [r3, #0]
 802bef0:	f042 0208 	orr.w	r2, r2, #8
 802bef4:	601a      	str	r2, [r3, #0]
 802bef6:	e035      	b.n	802bf64 <HAL_DMA_Start_IT+0x260>
 802bef8:	40020010 	.word	0x40020010
 802befc:	40020028 	.word	0x40020028
 802bf00:	40020040 	.word	0x40020040
 802bf04:	40020058 	.word	0x40020058
 802bf08:	40020070 	.word	0x40020070
 802bf0c:	40020088 	.word	0x40020088
 802bf10:	400200a0 	.word	0x400200a0
 802bf14:	400200b8 	.word	0x400200b8
 802bf18:	40020410 	.word	0x40020410
 802bf1c:	40020428 	.word	0x40020428
 802bf20:	40020440 	.word	0x40020440
 802bf24:	40020458 	.word	0x40020458
 802bf28:	40020470 	.word	0x40020470
 802bf2c:	40020488 	.word	0x40020488
 802bf30:	400204a0 	.word	0x400204a0
 802bf34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802bf38:	68fb      	ldr	r3, [r7, #12]
 802bf3a:	681b      	ldr	r3, [r3, #0]
 802bf3c:	681b      	ldr	r3, [r3, #0]
 802bf3e:	f023 020e 	bic.w	r2, r3, #14
 802bf42:	68fb      	ldr	r3, [r7, #12]
 802bf44:	681b      	ldr	r3, [r3, #0]
 802bf46:	f042 020a 	orr.w	r2, r2, #10
 802bf4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bf4c:	68fb      	ldr	r3, [r7, #12]
 802bf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf50:	2b00      	cmp	r3, #0
 802bf52:	d007      	beq.n	802bf64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	681b      	ldr	r3, [r3, #0]
 802bf58:	681a      	ldr	r2, [r3, #0]
 802bf5a:	68fb      	ldr	r3, [r7, #12]
 802bf5c:	681b      	ldr	r3, [r3, #0]
 802bf5e:	f042 0204 	orr.w	r2, r2, #4
 802bf62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bf64:	68fb      	ldr	r3, [r7, #12]
 802bf66:	681b      	ldr	r3, [r3, #0]
 802bf68:	4a83      	ldr	r2, [pc, #524]	; (802c178 <HAL_DMA_Start_IT+0x474>)
 802bf6a:	4293      	cmp	r3, r2
 802bf6c:	d072      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bf6e:	68fb      	ldr	r3, [r7, #12]
 802bf70:	681b      	ldr	r3, [r3, #0]
 802bf72:	4a82      	ldr	r2, [pc, #520]	; (802c17c <HAL_DMA_Start_IT+0x478>)
 802bf74:	4293      	cmp	r3, r2
 802bf76:	d06d      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bf78:	68fb      	ldr	r3, [r7, #12]
 802bf7a:	681b      	ldr	r3, [r3, #0]
 802bf7c:	4a80      	ldr	r2, [pc, #512]	; (802c180 <HAL_DMA_Start_IT+0x47c>)
 802bf7e:	4293      	cmp	r3, r2
 802bf80:	d068      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bf82:	68fb      	ldr	r3, [r7, #12]
 802bf84:	681b      	ldr	r3, [r3, #0]
 802bf86:	4a7f      	ldr	r2, [pc, #508]	; (802c184 <HAL_DMA_Start_IT+0x480>)
 802bf88:	4293      	cmp	r3, r2
 802bf8a:	d063      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bf8c:	68fb      	ldr	r3, [r7, #12]
 802bf8e:	681b      	ldr	r3, [r3, #0]
 802bf90:	4a7d      	ldr	r2, [pc, #500]	; (802c188 <HAL_DMA_Start_IT+0x484>)
 802bf92:	4293      	cmp	r3, r2
 802bf94:	d05e      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bf96:	68fb      	ldr	r3, [r7, #12]
 802bf98:	681b      	ldr	r3, [r3, #0]
 802bf9a:	4a7c      	ldr	r2, [pc, #496]	; (802c18c <HAL_DMA_Start_IT+0x488>)
 802bf9c:	4293      	cmp	r3, r2
 802bf9e:	d059      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfa0:	68fb      	ldr	r3, [r7, #12]
 802bfa2:	681b      	ldr	r3, [r3, #0]
 802bfa4:	4a7a      	ldr	r2, [pc, #488]	; (802c190 <HAL_DMA_Start_IT+0x48c>)
 802bfa6:	4293      	cmp	r3, r2
 802bfa8:	d054      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfaa:	68fb      	ldr	r3, [r7, #12]
 802bfac:	681b      	ldr	r3, [r3, #0]
 802bfae:	4a79      	ldr	r2, [pc, #484]	; (802c194 <HAL_DMA_Start_IT+0x490>)
 802bfb0:	4293      	cmp	r3, r2
 802bfb2:	d04f      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfb4:	68fb      	ldr	r3, [r7, #12]
 802bfb6:	681b      	ldr	r3, [r3, #0]
 802bfb8:	4a77      	ldr	r2, [pc, #476]	; (802c198 <HAL_DMA_Start_IT+0x494>)
 802bfba:	4293      	cmp	r3, r2
 802bfbc:	d04a      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfbe:	68fb      	ldr	r3, [r7, #12]
 802bfc0:	681b      	ldr	r3, [r3, #0]
 802bfc2:	4a76      	ldr	r2, [pc, #472]	; (802c19c <HAL_DMA_Start_IT+0x498>)
 802bfc4:	4293      	cmp	r3, r2
 802bfc6:	d045      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfc8:	68fb      	ldr	r3, [r7, #12]
 802bfca:	681b      	ldr	r3, [r3, #0]
 802bfcc:	4a74      	ldr	r2, [pc, #464]	; (802c1a0 <HAL_DMA_Start_IT+0x49c>)
 802bfce:	4293      	cmp	r3, r2
 802bfd0:	d040      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfd2:	68fb      	ldr	r3, [r7, #12]
 802bfd4:	681b      	ldr	r3, [r3, #0]
 802bfd6:	4a73      	ldr	r2, [pc, #460]	; (802c1a4 <HAL_DMA_Start_IT+0x4a0>)
 802bfd8:	4293      	cmp	r3, r2
 802bfda:	d03b      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfdc:	68fb      	ldr	r3, [r7, #12]
 802bfde:	681b      	ldr	r3, [r3, #0]
 802bfe0:	4a71      	ldr	r2, [pc, #452]	; (802c1a8 <HAL_DMA_Start_IT+0x4a4>)
 802bfe2:	4293      	cmp	r3, r2
 802bfe4:	d036      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bfe6:	68fb      	ldr	r3, [r7, #12]
 802bfe8:	681b      	ldr	r3, [r3, #0]
 802bfea:	4a70      	ldr	r2, [pc, #448]	; (802c1ac <HAL_DMA_Start_IT+0x4a8>)
 802bfec:	4293      	cmp	r3, r2
 802bfee:	d031      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bff0:	68fb      	ldr	r3, [r7, #12]
 802bff2:	681b      	ldr	r3, [r3, #0]
 802bff4:	4a6e      	ldr	r2, [pc, #440]	; (802c1b0 <HAL_DMA_Start_IT+0x4ac>)
 802bff6:	4293      	cmp	r3, r2
 802bff8:	d02c      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802bffa:	68fb      	ldr	r3, [r7, #12]
 802bffc:	681b      	ldr	r3, [r3, #0]
 802bffe:	4a6d      	ldr	r2, [pc, #436]	; (802c1b4 <HAL_DMA_Start_IT+0x4b0>)
 802c000:	4293      	cmp	r3, r2
 802c002:	d027      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c004:	68fb      	ldr	r3, [r7, #12]
 802c006:	681b      	ldr	r3, [r3, #0]
 802c008:	4a6b      	ldr	r2, [pc, #428]	; (802c1b8 <HAL_DMA_Start_IT+0x4b4>)
 802c00a:	4293      	cmp	r3, r2
 802c00c:	d022      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c00e:	68fb      	ldr	r3, [r7, #12]
 802c010:	681b      	ldr	r3, [r3, #0]
 802c012:	4a6a      	ldr	r2, [pc, #424]	; (802c1bc <HAL_DMA_Start_IT+0x4b8>)
 802c014:	4293      	cmp	r3, r2
 802c016:	d01d      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c018:	68fb      	ldr	r3, [r7, #12]
 802c01a:	681b      	ldr	r3, [r3, #0]
 802c01c:	4a68      	ldr	r2, [pc, #416]	; (802c1c0 <HAL_DMA_Start_IT+0x4bc>)
 802c01e:	4293      	cmp	r3, r2
 802c020:	d018      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c022:	68fb      	ldr	r3, [r7, #12]
 802c024:	681b      	ldr	r3, [r3, #0]
 802c026:	4a67      	ldr	r2, [pc, #412]	; (802c1c4 <HAL_DMA_Start_IT+0x4c0>)
 802c028:	4293      	cmp	r3, r2
 802c02a:	d013      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c02c:	68fb      	ldr	r3, [r7, #12]
 802c02e:	681b      	ldr	r3, [r3, #0]
 802c030:	4a65      	ldr	r2, [pc, #404]	; (802c1c8 <HAL_DMA_Start_IT+0x4c4>)
 802c032:	4293      	cmp	r3, r2
 802c034:	d00e      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c036:	68fb      	ldr	r3, [r7, #12]
 802c038:	681b      	ldr	r3, [r3, #0]
 802c03a:	4a64      	ldr	r2, [pc, #400]	; (802c1cc <HAL_DMA_Start_IT+0x4c8>)
 802c03c:	4293      	cmp	r3, r2
 802c03e:	d009      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c040:	68fb      	ldr	r3, [r7, #12]
 802c042:	681b      	ldr	r3, [r3, #0]
 802c044:	4a62      	ldr	r2, [pc, #392]	; (802c1d0 <HAL_DMA_Start_IT+0x4cc>)
 802c046:	4293      	cmp	r3, r2
 802c048:	d004      	beq.n	802c054 <HAL_DMA_Start_IT+0x350>
 802c04a:	68fb      	ldr	r3, [r7, #12]
 802c04c:	681b      	ldr	r3, [r3, #0]
 802c04e:	4a61      	ldr	r2, [pc, #388]	; (802c1d4 <HAL_DMA_Start_IT+0x4d0>)
 802c050:	4293      	cmp	r3, r2
 802c052:	d101      	bne.n	802c058 <HAL_DMA_Start_IT+0x354>
 802c054:	2301      	movs	r3, #1
 802c056:	e000      	b.n	802c05a <HAL_DMA_Start_IT+0x356>
 802c058:	2300      	movs	r3, #0
 802c05a:	2b00      	cmp	r3, #0
 802c05c:	d01a      	beq.n	802c094 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802c05e:	68fb      	ldr	r3, [r7, #12]
 802c060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c062:	681b      	ldr	r3, [r3, #0]
 802c064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c068:	2b00      	cmp	r3, #0
 802c06a:	d007      	beq.n	802c07c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802c06c:	68fb      	ldr	r3, [r7, #12]
 802c06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c070:	681a      	ldr	r2, [r3, #0]
 802c072:	68fb      	ldr	r3, [r7, #12]
 802c074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c07a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802c07c:	68fb      	ldr	r3, [r7, #12]
 802c07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c080:	2b00      	cmp	r3, #0
 802c082:	d007      	beq.n	802c094 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802c084:	68fb      	ldr	r3, [r7, #12]
 802c086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c088:	681a      	ldr	r2, [r3, #0]
 802c08a:	68fb      	ldr	r3, [r7, #12]
 802c08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c08e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c092:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802c094:	68fb      	ldr	r3, [r7, #12]
 802c096:	681b      	ldr	r3, [r3, #0]
 802c098:	4a37      	ldr	r2, [pc, #220]	; (802c178 <HAL_DMA_Start_IT+0x474>)
 802c09a:	4293      	cmp	r3, r2
 802c09c:	d04a      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c09e:	68fb      	ldr	r3, [r7, #12]
 802c0a0:	681b      	ldr	r3, [r3, #0]
 802c0a2:	4a36      	ldr	r2, [pc, #216]	; (802c17c <HAL_DMA_Start_IT+0x478>)
 802c0a4:	4293      	cmp	r3, r2
 802c0a6:	d045      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0a8:	68fb      	ldr	r3, [r7, #12]
 802c0aa:	681b      	ldr	r3, [r3, #0]
 802c0ac:	4a34      	ldr	r2, [pc, #208]	; (802c180 <HAL_DMA_Start_IT+0x47c>)
 802c0ae:	4293      	cmp	r3, r2
 802c0b0:	d040      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0b2:	68fb      	ldr	r3, [r7, #12]
 802c0b4:	681b      	ldr	r3, [r3, #0]
 802c0b6:	4a33      	ldr	r2, [pc, #204]	; (802c184 <HAL_DMA_Start_IT+0x480>)
 802c0b8:	4293      	cmp	r3, r2
 802c0ba:	d03b      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0bc:	68fb      	ldr	r3, [r7, #12]
 802c0be:	681b      	ldr	r3, [r3, #0]
 802c0c0:	4a31      	ldr	r2, [pc, #196]	; (802c188 <HAL_DMA_Start_IT+0x484>)
 802c0c2:	4293      	cmp	r3, r2
 802c0c4:	d036      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0c6:	68fb      	ldr	r3, [r7, #12]
 802c0c8:	681b      	ldr	r3, [r3, #0]
 802c0ca:	4a30      	ldr	r2, [pc, #192]	; (802c18c <HAL_DMA_Start_IT+0x488>)
 802c0cc:	4293      	cmp	r3, r2
 802c0ce:	d031      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0d0:	68fb      	ldr	r3, [r7, #12]
 802c0d2:	681b      	ldr	r3, [r3, #0]
 802c0d4:	4a2e      	ldr	r2, [pc, #184]	; (802c190 <HAL_DMA_Start_IT+0x48c>)
 802c0d6:	4293      	cmp	r3, r2
 802c0d8:	d02c      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0da:	68fb      	ldr	r3, [r7, #12]
 802c0dc:	681b      	ldr	r3, [r3, #0]
 802c0de:	4a2d      	ldr	r2, [pc, #180]	; (802c194 <HAL_DMA_Start_IT+0x490>)
 802c0e0:	4293      	cmp	r3, r2
 802c0e2:	d027      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0e4:	68fb      	ldr	r3, [r7, #12]
 802c0e6:	681b      	ldr	r3, [r3, #0]
 802c0e8:	4a2b      	ldr	r2, [pc, #172]	; (802c198 <HAL_DMA_Start_IT+0x494>)
 802c0ea:	4293      	cmp	r3, r2
 802c0ec:	d022      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0ee:	68fb      	ldr	r3, [r7, #12]
 802c0f0:	681b      	ldr	r3, [r3, #0]
 802c0f2:	4a2a      	ldr	r2, [pc, #168]	; (802c19c <HAL_DMA_Start_IT+0x498>)
 802c0f4:	4293      	cmp	r3, r2
 802c0f6:	d01d      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c0f8:	68fb      	ldr	r3, [r7, #12]
 802c0fa:	681b      	ldr	r3, [r3, #0]
 802c0fc:	4a28      	ldr	r2, [pc, #160]	; (802c1a0 <HAL_DMA_Start_IT+0x49c>)
 802c0fe:	4293      	cmp	r3, r2
 802c100:	d018      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c102:	68fb      	ldr	r3, [r7, #12]
 802c104:	681b      	ldr	r3, [r3, #0]
 802c106:	4a27      	ldr	r2, [pc, #156]	; (802c1a4 <HAL_DMA_Start_IT+0x4a0>)
 802c108:	4293      	cmp	r3, r2
 802c10a:	d013      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c10c:	68fb      	ldr	r3, [r7, #12]
 802c10e:	681b      	ldr	r3, [r3, #0]
 802c110:	4a25      	ldr	r2, [pc, #148]	; (802c1a8 <HAL_DMA_Start_IT+0x4a4>)
 802c112:	4293      	cmp	r3, r2
 802c114:	d00e      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c116:	68fb      	ldr	r3, [r7, #12]
 802c118:	681b      	ldr	r3, [r3, #0]
 802c11a:	4a24      	ldr	r2, [pc, #144]	; (802c1ac <HAL_DMA_Start_IT+0x4a8>)
 802c11c:	4293      	cmp	r3, r2
 802c11e:	d009      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c120:	68fb      	ldr	r3, [r7, #12]
 802c122:	681b      	ldr	r3, [r3, #0]
 802c124:	4a22      	ldr	r2, [pc, #136]	; (802c1b0 <HAL_DMA_Start_IT+0x4ac>)
 802c126:	4293      	cmp	r3, r2
 802c128:	d004      	beq.n	802c134 <HAL_DMA_Start_IT+0x430>
 802c12a:	68fb      	ldr	r3, [r7, #12]
 802c12c:	681b      	ldr	r3, [r3, #0]
 802c12e:	4a21      	ldr	r2, [pc, #132]	; (802c1b4 <HAL_DMA_Start_IT+0x4b0>)
 802c130:	4293      	cmp	r3, r2
 802c132:	d108      	bne.n	802c146 <HAL_DMA_Start_IT+0x442>
 802c134:	68fb      	ldr	r3, [r7, #12]
 802c136:	681b      	ldr	r3, [r3, #0]
 802c138:	681a      	ldr	r2, [r3, #0]
 802c13a:	68fb      	ldr	r3, [r7, #12]
 802c13c:	681b      	ldr	r3, [r3, #0]
 802c13e:	f042 0201 	orr.w	r2, r2, #1
 802c142:	601a      	str	r2, [r3, #0]
 802c144:	e012      	b.n	802c16c <HAL_DMA_Start_IT+0x468>
 802c146:	68fb      	ldr	r3, [r7, #12]
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	681a      	ldr	r2, [r3, #0]
 802c14c:	68fb      	ldr	r3, [r7, #12]
 802c14e:	681b      	ldr	r3, [r3, #0]
 802c150:	f042 0201 	orr.w	r2, r2, #1
 802c154:	601a      	str	r2, [r3, #0]
 802c156:	e009      	b.n	802c16c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802c158:	68fb      	ldr	r3, [r7, #12]
 802c15a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802c15e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802c160:	68fb      	ldr	r3, [r7, #12]
 802c162:	2200      	movs	r2, #0
 802c164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802c168:	2301      	movs	r3, #1
 802c16a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802c16c:	7dfb      	ldrb	r3, [r7, #23]
}
 802c16e:	4618      	mov	r0, r3
 802c170:	3718      	adds	r7, #24
 802c172:	46bd      	mov	sp, r7
 802c174:	bd80      	pop	{r7, pc}
 802c176:	bf00      	nop
 802c178:	40020010 	.word	0x40020010
 802c17c:	40020028 	.word	0x40020028
 802c180:	40020040 	.word	0x40020040
 802c184:	40020058 	.word	0x40020058
 802c188:	40020070 	.word	0x40020070
 802c18c:	40020088 	.word	0x40020088
 802c190:	400200a0 	.word	0x400200a0
 802c194:	400200b8 	.word	0x400200b8
 802c198:	40020410 	.word	0x40020410
 802c19c:	40020428 	.word	0x40020428
 802c1a0:	40020440 	.word	0x40020440
 802c1a4:	40020458 	.word	0x40020458
 802c1a8:	40020470 	.word	0x40020470
 802c1ac:	40020488 	.word	0x40020488
 802c1b0:	400204a0 	.word	0x400204a0
 802c1b4:	400204b8 	.word	0x400204b8
 802c1b8:	58025408 	.word	0x58025408
 802c1bc:	5802541c 	.word	0x5802541c
 802c1c0:	58025430 	.word	0x58025430
 802c1c4:	58025444 	.word	0x58025444
 802c1c8:	58025458 	.word	0x58025458
 802c1cc:	5802546c 	.word	0x5802546c
 802c1d0:	58025480 	.word	0x58025480
 802c1d4:	58025494 	.word	0x58025494

0802c1d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c1d8:	b580      	push	{r7, lr}
 802c1da:	b086      	sub	sp, #24
 802c1dc:	af00      	add	r7, sp, #0
 802c1de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802c1e0:	f7fe fd38 	bl	802ac54 <HAL_GetTick>
 802c1e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c1e6:	687b      	ldr	r3, [r7, #4]
 802c1e8:	2b00      	cmp	r3, #0
 802c1ea:	d101      	bne.n	802c1f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802c1ec:	2301      	movs	r3, #1
 802c1ee:	e2dc      	b.n	802c7aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c1f0:	687b      	ldr	r3, [r7, #4]
 802c1f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c1f6:	b2db      	uxtb	r3, r3
 802c1f8:	2b02      	cmp	r3, #2
 802c1fa:	d008      	beq.n	802c20e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c1fc:	687b      	ldr	r3, [r7, #4]
 802c1fe:	2280      	movs	r2, #128	; 0x80
 802c200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c202:	687b      	ldr	r3, [r7, #4]
 802c204:	2200      	movs	r2, #0
 802c206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802c20a:	2301      	movs	r3, #1
 802c20c:	e2cd      	b.n	802c7aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c20e:	687b      	ldr	r3, [r7, #4]
 802c210:	681b      	ldr	r3, [r3, #0]
 802c212:	4a76      	ldr	r2, [pc, #472]	; (802c3ec <HAL_DMA_Abort+0x214>)
 802c214:	4293      	cmp	r3, r2
 802c216:	d04a      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c218:	687b      	ldr	r3, [r7, #4]
 802c21a:	681b      	ldr	r3, [r3, #0]
 802c21c:	4a74      	ldr	r2, [pc, #464]	; (802c3f0 <HAL_DMA_Abort+0x218>)
 802c21e:	4293      	cmp	r3, r2
 802c220:	d045      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c222:	687b      	ldr	r3, [r7, #4]
 802c224:	681b      	ldr	r3, [r3, #0]
 802c226:	4a73      	ldr	r2, [pc, #460]	; (802c3f4 <HAL_DMA_Abort+0x21c>)
 802c228:	4293      	cmp	r3, r2
 802c22a:	d040      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	681b      	ldr	r3, [r3, #0]
 802c230:	4a71      	ldr	r2, [pc, #452]	; (802c3f8 <HAL_DMA_Abort+0x220>)
 802c232:	4293      	cmp	r3, r2
 802c234:	d03b      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c236:	687b      	ldr	r3, [r7, #4]
 802c238:	681b      	ldr	r3, [r3, #0]
 802c23a:	4a70      	ldr	r2, [pc, #448]	; (802c3fc <HAL_DMA_Abort+0x224>)
 802c23c:	4293      	cmp	r3, r2
 802c23e:	d036      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c240:	687b      	ldr	r3, [r7, #4]
 802c242:	681b      	ldr	r3, [r3, #0]
 802c244:	4a6e      	ldr	r2, [pc, #440]	; (802c400 <HAL_DMA_Abort+0x228>)
 802c246:	4293      	cmp	r3, r2
 802c248:	d031      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c24a:	687b      	ldr	r3, [r7, #4]
 802c24c:	681b      	ldr	r3, [r3, #0]
 802c24e:	4a6d      	ldr	r2, [pc, #436]	; (802c404 <HAL_DMA_Abort+0x22c>)
 802c250:	4293      	cmp	r3, r2
 802c252:	d02c      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c254:	687b      	ldr	r3, [r7, #4]
 802c256:	681b      	ldr	r3, [r3, #0]
 802c258:	4a6b      	ldr	r2, [pc, #428]	; (802c408 <HAL_DMA_Abort+0x230>)
 802c25a:	4293      	cmp	r3, r2
 802c25c:	d027      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c25e:	687b      	ldr	r3, [r7, #4]
 802c260:	681b      	ldr	r3, [r3, #0]
 802c262:	4a6a      	ldr	r2, [pc, #424]	; (802c40c <HAL_DMA_Abort+0x234>)
 802c264:	4293      	cmp	r3, r2
 802c266:	d022      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c268:	687b      	ldr	r3, [r7, #4]
 802c26a:	681b      	ldr	r3, [r3, #0]
 802c26c:	4a68      	ldr	r2, [pc, #416]	; (802c410 <HAL_DMA_Abort+0x238>)
 802c26e:	4293      	cmp	r3, r2
 802c270:	d01d      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c272:	687b      	ldr	r3, [r7, #4]
 802c274:	681b      	ldr	r3, [r3, #0]
 802c276:	4a67      	ldr	r2, [pc, #412]	; (802c414 <HAL_DMA_Abort+0x23c>)
 802c278:	4293      	cmp	r3, r2
 802c27a:	d018      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c27c:	687b      	ldr	r3, [r7, #4]
 802c27e:	681b      	ldr	r3, [r3, #0]
 802c280:	4a65      	ldr	r2, [pc, #404]	; (802c418 <HAL_DMA_Abort+0x240>)
 802c282:	4293      	cmp	r3, r2
 802c284:	d013      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c286:	687b      	ldr	r3, [r7, #4]
 802c288:	681b      	ldr	r3, [r3, #0]
 802c28a:	4a64      	ldr	r2, [pc, #400]	; (802c41c <HAL_DMA_Abort+0x244>)
 802c28c:	4293      	cmp	r3, r2
 802c28e:	d00e      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c290:	687b      	ldr	r3, [r7, #4]
 802c292:	681b      	ldr	r3, [r3, #0]
 802c294:	4a62      	ldr	r2, [pc, #392]	; (802c420 <HAL_DMA_Abort+0x248>)
 802c296:	4293      	cmp	r3, r2
 802c298:	d009      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c29a:	687b      	ldr	r3, [r7, #4]
 802c29c:	681b      	ldr	r3, [r3, #0]
 802c29e:	4a61      	ldr	r2, [pc, #388]	; (802c424 <HAL_DMA_Abort+0x24c>)
 802c2a0:	4293      	cmp	r3, r2
 802c2a2:	d004      	beq.n	802c2ae <HAL_DMA_Abort+0xd6>
 802c2a4:	687b      	ldr	r3, [r7, #4]
 802c2a6:	681b      	ldr	r3, [r3, #0]
 802c2a8:	4a5f      	ldr	r2, [pc, #380]	; (802c428 <HAL_DMA_Abort+0x250>)
 802c2aa:	4293      	cmp	r3, r2
 802c2ac:	d101      	bne.n	802c2b2 <HAL_DMA_Abort+0xda>
 802c2ae:	2301      	movs	r3, #1
 802c2b0:	e000      	b.n	802c2b4 <HAL_DMA_Abort+0xdc>
 802c2b2:	2300      	movs	r3, #0
 802c2b4:	2b00      	cmp	r3, #0
 802c2b6:	d013      	beq.n	802c2e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802c2b8:	687b      	ldr	r3, [r7, #4]
 802c2ba:	681b      	ldr	r3, [r3, #0]
 802c2bc:	681a      	ldr	r2, [r3, #0]
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	681b      	ldr	r3, [r3, #0]
 802c2c2:	f022 021e 	bic.w	r2, r2, #30
 802c2c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802c2c8:	687b      	ldr	r3, [r7, #4]
 802c2ca:	681b      	ldr	r3, [r3, #0]
 802c2cc:	695a      	ldr	r2, [r3, #20]
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	681b      	ldr	r3, [r3, #0]
 802c2d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c2d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802c2d8:	687b      	ldr	r3, [r7, #4]
 802c2da:	681b      	ldr	r3, [r3, #0]
 802c2dc:	617b      	str	r3, [r7, #20]
 802c2de:	e00a      	b.n	802c2f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c2e0:	687b      	ldr	r3, [r7, #4]
 802c2e2:	681b      	ldr	r3, [r3, #0]
 802c2e4:	681a      	ldr	r2, [r3, #0]
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	681b      	ldr	r3, [r3, #0]
 802c2ea:	f022 020e 	bic.w	r2, r2, #14
 802c2ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802c2f0:	687b      	ldr	r3, [r7, #4]
 802c2f2:	681b      	ldr	r3, [r3, #0]
 802c2f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c2f6:	687b      	ldr	r3, [r7, #4]
 802c2f8:	681b      	ldr	r3, [r3, #0]
 802c2fa:	4a3c      	ldr	r2, [pc, #240]	; (802c3ec <HAL_DMA_Abort+0x214>)
 802c2fc:	4293      	cmp	r3, r2
 802c2fe:	d072      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c300:	687b      	ldr	r3, [r7, #4]
 802c302:	681b      	ldr	r3, [r3, #0]
 802c304:	4a3a      	ldr	r2, [pc, #232]	; (802c3f0 <HAL_DMA_Abort+0x218>)
 802c306:	4293      	cmp	r3, r2
 802c308:	d06d      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c30a:	687b      	ldr	r3, [r7, #4]
 802c30c:	681b      	ldr	r3, [r3, #0]
 802c30e:	4a39      	ldr	r2, [pc, #228]	; (802c3f4 <HAL_DMA_Abort+0x21c>)
 802c310:	4293      	cmp	r3, r2
 802c312:	d068      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	681b      	ldr	r3, [r3, #0]
 802c318:	4a37      	ldr	r2, [pc, #220]	; (802c3f8 <HAL_DMA_Abort+0x220>)
 802c31a:	4293      	cmp	r3, r2
 802c31c:	d063      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c31e:	687b      	ldr	r3, [r7, #4]
 802c320:	681b      	ldr	r3, [r3, #0]
 802c322:	4a36      	ldr	r2, [pc, #216]	; (802c3fc <HAL_DMA_Abort+0x224>)
 802c324:	4293      	cmp	r3, r2
 802c326:	d05e      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c328:	687b      	ldr	r3, [r7, #4]
 802c32a:	681b      	ldr	r3, [r3, #0]
 802c32c:	4a34      	ldr	r2, [pc, #208]	; (802c400 <HAL_DMA_Abort+0x228>)
 802c32e:	4293      	cmp	r3, r2
 802c330:	d059      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c332:	687b      	ldr	r3, [r7, #4]
 802c334:	681b      	ldr	r3, [r3, #0]
 802c336:	4a33      	ldr	r2, [pc, #204]	; (802c404 <HAL_DMA_Abort+0x22c>)
 802c338:	4293      	cmp	r3, r2
 802c33a:	d054      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c33c:	687b      	ldr	r3, [r7, #4]
 802c33e:	681b      	ldr	r3, [r3, #0]
 802c340:	4a31      	ldr	r2, [pc, #196]	; (802c408 <HAL_DMA_Abort+0x230>)
 802c342:	4293      	cmp	r3, r2
 802c344:	d04f      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c346:	687b      	ldr	r3, [r7, #4]
 802c348:	681b      	ldr	r3, [r3, #0]
 802c34a:	4a30      	ldr	r2, [pc, #192]	; (802c40c <HAL_DMA_Abort+0x234>)
 802c34c:	4293      	cmp	r3, r2
 802c34e:	d04a      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c350:	687b      	ldr	r3, [r7, #4]
 802c352:	681b      	ldr	r3, [r3, #0]
 802c354:	4a2e      	ldr	r2, [pc, #184]	; (802c410 <HAL_DMA_Abort+0x238>)
 802c356:	4293      	cmp	r3, r2
 802c358:	d045      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c35a:	687b      	ldr	r3, [r7, #4]
 802c35c:	681b      	ldr	r3, [r3, #0]
 802c35e:	4a2d      	ldr	r2, [pc, #180]	; (802c414 <HAL_DMA_Abort+0x23c>)
 802c360:	4293      	cmp	r3, r2
 802c362:	d040      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c364:	687b      	ldr	r3, [r7, #4]
 802c366:	681b      	ldr	r3, [r3, #0]
 802c368:	4a2b      	ldr	r2, [pc, #172]	; (802c418 <HAL_DMA_Abort+0x240>)
 802c36a:	4293      	cmp	r3, r2
 802c36c:	d03b      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c36e:	687b      	ldr	r3, [r7, #4]
 802c370:	681b      	ldr	r3, [r3, #0]
 802c372:	4a2a      	ldr	r2, [pc, #168]	; (802c41c <HAL_DMA_Abort+0x244>)
 802c374:	4293      	cmp	r3, r2
 802c376:	d036      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c378:	687b      	ldr	r3, [r7, #4]
 802c37a:	681b      	ldr	r3, [r3, #0]
 802c37c:	4a28      	ldr	r2, [pc, #160]	; (802c420 <HAL_DMA_Abort+0x248>)
 802c37e:	4293      	cmp	r3, r2
 802c380:	d031      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c382:	687b      	ldr	r3, [r7, #4]
 802c384:	681b      	ldr	r3, [r3, #0]
 802c386:	4a27      	ldr	r2, [pc, #156]	; (802c424 <HAL_DMA_Abort+0x24c>)
 802c388:	4293      	cmp	r3, r2
 802c38a:	d02c      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c38c:	687b      	ldr	r3, [r7, #4]
 802c38e:	681b      	ldr	r3, [r3, #0]
 802c390:	4a25      	ldr	r2, [pc, #148]	; (802c428 <HAL_DMA_Abort+0x250>)
 802c392:	4293      	cmp	r3, r2
 802c394:	d027      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c396:	687b      	ldr	r3, [r7, #4]
 802c398:	681b      	ldr	r3, [r3, #0]
 802c39a:	4a24      	ldr	r2, [pc, #144]	; (802c42c <HAL_DMA_Abort+0x254>)
 802c39c:	4293      	cmp	r3, r2
 802c39e:	d022      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3a0:	687b      	ldr	r3, [r7, #4]
 802c3a2:	681b      	ldr	r3, [r3, #0]
 802c3a4:	4a22      	ldr	r2, [pc, #136]	; (802c430 <HAL_DMA_Abort+0x258>)
 802c3a6:	4293      	cmp	r3, r2
 802c3a8:	d01d      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3aa:	687b      	ldr	r3, [r7, #4]
 802c3ac:	681b      	ldr	r3, [r3, #0]
 802c3ae:	4a21      	ldr	r2, [pc, #132]	; (802c434 <HAL_DMA_Abort+0x25c>)
 802c3b0:	4293      	cmp	r3, r2
 802c3b2:	d018      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3b4:	687b      	ldr	r3, [r7, #4]
 802c3b6:	681b      	ldr	r3, [r3, #0]
 802c3b8:	4a1f      	ldr	r2, [pc, #124]	; (802c438 <HAL_DMA_Abort+0x260>)
 802c3ba:	4293      	cmp	r3, r2
 802c3bc:	d013      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	681b      	ldr	r3, [r3, #0]
 802c3c2:	4a1e      	ldr	r2, [pc, #120]	; (802c43c <HAL_DMA_Abort+0x264>)
 802c3c4:	4293      	cmp	r3, r2
 802c3c6:	d00e      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3c8:	687b      	ldr	r3, [r7, #4]
 802c3ca:	681b      	ldr	r3, [r3, #0]
 802c3cc:	4a1c      	ldr	r2, [pc, #112]	; (802c440 <HAL_DMA_Abort+0x268>)
 802c3ce:	4293      	cmp	r3, r2
 802c3d0:	d009      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3d2:	687b      	ldr	r3, [r7, #4]
 802c3d4:	681b      	ldr	r3, [r3, #0]
 802c3d6:	4a1b      	ldr	r2, [pc, #108]	; (802c444 <HAL_DMA_Abort+0x26c>)
 802c3d8:	4293      	cmp	r3, r2
 802c3da:	d004      	beq.n	802c3e6 <HAL_DMA_Abort+0x20e>
 802c3dc:	687b      	ldr	r3, [r7, #4]
 802c3de:	681b      	ldr	r3, [r3, #0]
 802c3e0:	4a19      	ldr	r2, [pc, #100]	; (802c448 <HAL_DMA_Abort+0x270>)
 802c3e2:	4293      	cmp	r3, r2
 802c3e4:	d132      	bne.n	802c44c <HAL_DMA_Abort+0x274>
 802c3e6:	2301      	movs	r3, #1
 802c3e8:	e031      	b.n	802c44e <HAL_DMA_Abort+0x276>
 802c3ea:	bf00      	nop
 802c3ec:	40020010 	.word	0x40020010
 802c3f0:	40020028 	.word	0x40020028
 802c3f4:	40020040 	.word	0x40020040
 802c3f8:	40020058 	.word	0x40020058
 802c3fc:	40020070 	.word	0x40020070
 802c400:	40020088 	.word	0x40020088
 802c404:	400200a0 	.word	0x400200a0
 802c408:	400200b8 	.word	0x400200b8
 802c40c:	40020410 	.word	0x40020410
 802c410:	40020428 	.word	0x40020428
 802c414:	40020440 	.word	0x40020440
 802c418:	40020458 	.word	0x40020458
 802c41c:	40020470 	.word	0x40020470
 802c420:	40020488 	.word	0x40020488
 802c424:	400204a0 	.word	0x400204a0
 802c428:	400204b8 	.word	0x400204b8
 802c42c:	58025408 	.word	0x58025408
 802c430:	5802541c 	.word	0x5802541c
 802c434:	58025430 	.word	0x58025430
 802c438:	58025444 	.word	0x58025444
 802c43c:	58025458 	.word	0x58025458
 802c440:	5802546c 	.word	0x5802546c
 802c444:	58025480 	.word	0x58025480
 802c448:	58025494 	.word	0x58025494
 802c44c:	2300      	movs	r3, #0
 802c44e:	2b00      	cmp	r3, #0
 802c450:	d007      	beq.n	802c462 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c456:	681a      	ldr	r2, [r3, #0]
 802c458:	687b      	ldr	r3, [r7, #4]
 802c45a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c45c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c460:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c462:	687b      	ldr	r3, [r7, #4]
 802c464:	681b      	ldr	r3, [r3, #0]
 802c466:	4a6d      	ldr	r2, [pc, #436]	; (802c61c <HAL_DMA_Abort+0x444>)
 802c468:	4293      	cmp	r3, r2
 802c46a:	d04a      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c46c:	687b      	ldr	r3, [r7, #4]
 802c46e:	681b      	ldr	r3, [r3, #0]
 802c470:	4a6b      	ldr	r2, [pc, #428]	; (802c620 <HAL_DMA_Abort+0x448>)
 802c472:	4293      	cmp	r3, r2
 802c474:	d045      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c476:	687b      	ldr	r3, [r7, #4]
 802c478:	681b      	ldr	r3, [r3, #0]
 802c47a:	4a6a      	ldr	r2, [pc, #424]	; (802c624 <HAL_DMA_Abort+0x44c>)
 802c47c:	4293      	cmp	r3, r2
 802c47e:	d040      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c480:	687b      	ldr	r3, [r7, #4]
 802c482:	681b      	ldr	r3, [r3, #0]
 802c484:	4a68      	ldr	r2, [pc, #416]	; (802c628 <HAL_DMA_Abort+0x450>)
 802c486:	4293      	cmp	r3, r2
 802c488:	d03b      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c48a:	687b      	ldr	r3, [r7, #4]
 802c48c:	681b      	ldr	r3, [r3, #0]
 802c48e:	4a67      	ldr	r2, [pc, #412]	; (802c62c <HAL_DMA_Abort+0x454>)
 802c490:	4293      	cmp	r3, r2
 802c492:	d036      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c494:	687b      	ldr	r3, [r7, #4]
 802c496:	681b      	ldr	r3, [r3, #0]
 802c498:	4a65      	ldr	r2, [pc, #404]	; (802c630 <HAL_DMA_Abort+0x458>)
 802c49a:	4293      	cmp	r3, r2
 802c49c:	d031      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c49e:	687b      	ldr	r3, [r7, #4]
 802c4a0:	681b      	ldr	r3, [r3, #0]
 802c4a2:	4a64      	ldr	r2, [pc, #400]	; (802c634 <HAL_DMA_Abort+0x45c>)
 802c4a4:	4293      	cmp	r3, r2
 802c4a6:	d02c      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4a8:	687b      	ldr	r3, [r7, #4]
 802c4aa:	681b      	ldr	r3, [r3, #0]
 802c4ac:	4a62      	ldr	r2, [pc, #392]	; (802c638 <HAL_DMA_Abort+0x460>)
 802c4ae:	4293      	cmp	r3, r2
 802c4b0:	d027      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4b2:	687b      	ldr	r3, [r7, #4]
 802c4b4:	681b      	ldr	r3, [r3, #0]
 802c4b6:	4a61      	ldr	r2, [pc, #388]	; (802c63c <HAL_DMA_Abort+0x464>)
 802c4b8:	4293      	cmp	r3, r2
 802c4ba:	d022      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	681b      	ldr	r3, [r3, #0]
 802c4c0:	4a5f      	ldr	r2, [pc, #380]	; (802c640 <HAL_DMA_Abort+0x468>)
 802c4c2:	4293      	cmp	r3, r2
 802c4c4:	d01d      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4c6:	687b      	ldr	r3, [r7, #4]
 802c4c8:	681b      	ldr	r3, [r3, #0]
 802c4ca:	4a5e      	ldr	r2, [pc, #376]	; (802c644 <HAL_DMA_Abort+0x46c>)
 802c4cc:	4293      	cmp	r3, r2
 802c4ce:	d018      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4d0:	687b      	ldr	r3, [r7, #4]
 802c4d2:	681b      	ldr	r3, [r3, #0]
 802c4d4:	4a5c      	ldr	r2, [pc, #368]	; (802c648 <HAL_DMA_Abort+0x470>)
 802c4d6:	4293      	cmp	r3, r2
 802c4d8:	d013      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4da:	687b      	ldr	r3, [r7, #4]
 802c4dc:	681b      	ldr	r3, [r3, #0]
 802c4de:	4a5b      	ldr	r2, [pc, #364]	; (802c64c <HAL_DMA_Abort+0x474>)
 802c4e0:	4293      	cmp	r3, r2
 802c4e2:	d00e      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4e4:	687b      	ldr	r3, [r7, #4]
 802c4e6:	681b      	ldr	r3, [r3, #0]
 802c4e8:	4a59      	ldr	r2, [pc, #356]	; (802c650 <HAL_DMA_Abort+0x478>)
 802c4ea:	4293      	cmp	r3, r2
 802c4ec:	d009      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4ee:	687b      	ldr	r3, [r7, #4]
 802c4f0:	681b      	ldr	r3, [r3, #0]
 802c4f2:	4a58      	ldr	r2, [pc, #352]	; (802c654 <HAL_DMA_Abort+0x47c>)
 802c4f4:	4293      	cmp	r3, r2
 802c4f6:	d004      	beq.n	802c502 <HAL_DMA_Abort+0x32a>
 802c4f8:	687b      	ldr	r3, [r7, #4]
 802c4fa:	681b      	ldr	r3, [r3, #0]
 802c4fc:	4a56      	ldr	r2, [pc, #344]	; (802c658 <HAL_DMA_Abort+0x480>)
 802c4fe:	4293      	cmp	r3, r2
 802c500:	d108      	bne.n	802c514 <HAL_DMA_Abort+0x33c>
 802c502:	687b      	ldr	r3, [r7, #4]
 802c504:	681b      	ldr	r3, [r3, #0]
 802c506:	681a      	ldr	r2, [r3, #0]
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	681b      	ldr	r3, [r3, #0]
 802c50c:	f022 0201 	bic.w	r2, r2, #1
 802c510:	601a      	str	r2, [r3, #0]
 802c512:	e007      	b.n	802c524 <HAL_DMA_Abort+0x34c>
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	681b      	ldr	r3, [r3, #0]
 802c518:	681a      	ldr	r2, [r3, #0]
 802c51a:	687b      	ldr	r3, [r7, #4]
 802c51c:	681b      	ldr	r3, [r3, #0]
 802c51e:	f022 0201 	bic.w	r2, r2, #1
 802c522:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c524:	e013      	b.n	802c54e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c526:	f7fe fb95 	bl	802ac54 <HAL_GetTick>
 802c52a:	4602      	mov	r2, r0
 802c52c:	693b      	ldr	r3, [r7, #16]
 802c52e:	1ad3      	subs	r3, r2, r3
 802c530:	2b05      	cmp	r3, #5
 802c532:	d90c      	bls.n	802c54e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	2220      	movs	r2, #32
 802c538:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802c53a:	687b      	ldr	r3, [r7, #4]
 802c53c:	2203      	movs	r2, #3
 802c53e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c542:	687b      	ldr	r3, [r7, #4]
 802c544:	2200      	movs	r2, #0
 802c546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802c54a:	2301      	movs	r3, #1
 802c54c:	e12d      	b.n	802c7aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c54e:	697b      	ldr	r3, [r7, #20]
 802c550:	681b      	ldr	r3, [r3, #0]
 802c552:	f003 0301 	and.w	r3, r3, #1
 802c556:	2b00      	cmp	r3, #0
 802c558:	d1e5      	bne.n	802c526 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	681b      	ldr	r3, [r3, #0]
 802c55e:	4a2f      	ldr	r2, [pc, #188]	; (802c61c <HAL_DMA_Abort+0x444>)
 802c560:	4293      	cmp	r3, r2
 802c562:	d04a      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c564:	687b      	ldr	r3, [r7, #4]
 802c566:	681b      	ldr	r3, [r3, #0]
 802c568:	4a2d      	ldr	r2, [pc, #180]	; (802c620 <HAL_DMA_Abort+0x448>)
 802c56a:	4293      	cmp	r3, r2
 802c56c:	d045      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	681b      	ldr	r3, [r3, #0]
 802c572:	4a2c      	ldr	r2, [pc, #176]	; (802c624 <HAL_DMA_Abort+0x44c>)
 802c574:	4293      	cmp	r3, r2
 802c576:	d040      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c578:	687b      	ldr	r3, [r7, #4]
 802c57a:	681b      	ldr	r3, [r3, #0]
 802c57c:	4a2a      	ldr	r2, [pc, #168]	; (802c628 <HAL_DMA_Abort+0x450>)
 802c57e:	4293      	cmp	r3, r2
 802c580:	d03b      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c582:	687b      	ldr	r3, [r7, #4]
 802c584:	681b      	ldr	r3, [r3, #0]
 802c586:	4a29      	ldr	r2, [pc, #164]	; (802c62c <HAL_DMA_Abort+0x454>)
 802c588:	4293      	cmp	r3, r2
 802c58a:	d036      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	681b      	ldr	r3, [r3, #0]
 802c590:	4a27      	ldr	r2, [pc, #156]	; (802c630 <HAL_DMA_Abort+0x458>)
 802c592:	4293      	cmp	r3, r2
 802c594:	d031      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c596:	687b      	ldr	r3, [r7, #4]
 802c598:	681b      	ldr	r3, [r3, #0]
 802c59a:	4a26      	ldr	r2, [pc, #152]	; (802c634 <HAL_DMA_Abort+0x45c>)
 802c59c:	4293      	cmp	r3, r2
 802c59e:	d02c      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5a0:	687b      	ldr	r3, [r7, #4]
 802c5a2:	681b      	ldr	r3, [r3, #0]
 802c5a4:	4a24      	ldr	r2, [pc, #144]	; (802c638 <HAL_DMA_Abort+0x460>)
 802c5a6:	4293      	cmp	r3, r2
 802c5a8:	d027      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5aa:	687b      	ldr	r3, [r7, #4]
 802c5ac:	681b      	ldr	r3, [r3, #0]
 802c5ae:	4a23      	ldr	r2, [pc, #140]	; (802c63c <HAL_DMA_Abort+0x464>)
 802c5b0:	4293      	cmp	r3, r2
 802c5b2:	d022      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5b4:	687b      	ldr	r3, [r7, #4]
 802c5b6:	681b      	ldr	r3, [r3, #0]
 802c5b8:	4a21      	ldr	r2, [pc, #132]	; (802c640 <HAL_DMA_Abort+0x468>)
 802c5ba:	4293      	cmp	r3, r2
 802c5bc:	d01d      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5be:	687b      	ldr	r3, [r7, #4]
 802c5c0:	681b      	ldr	r3, [r3, #0]
 802c5c2:	4a20      	ldr	r2, [pc, #128]	; (802c644 <HAL_DMA_Abort+0x46c>)
 802c5c4:	4293      	cmp	r3, r2
 802c5c6:	d018      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	681b      	ldr	r3, [r3, #0]
 802c5cc:	4a1e      	ldr	r2, [pc, #120]	; (802c648 <HAL_DMA_Abort+0x470>)
 802c5ce:	4293      	cmp	r3, r2
 802c5d0:	d013      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5d2:	687b      	ldr	r3, [r7, #4]
 802c5d4:	681b      	ldr	r3, [r3, #0]
 802c5d6:	4a1d      	ldr	r2, [pc, #116]	; (802c64c <HAL_DMA_Abort+0x474>)
 802c5d8:	4293      	cmp	r3, r2
 802c5da:	d00e      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5dc:	687b      	ldr	r3, [r7, #4]
 802c5de:	681b      	ldr	r3, [r3, #0]
 802c5e0:	4a1b      	ldr	r2, [pc, #108]	; (802c650 <HAL_DMA_Abort+0x478>)
 802c5e2:	4293      	cmp	r3, r2
 802c5e4:	d009      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5e6:	687b      	ldr	r3, [r7, #4]
 802c5e8:	681b      	ldr	r3, [r3, #0]
 802c5ea:	4a1a      	ldr	r2, [pc, #104]	; (802c654 <HAL_DMA_Abort+0x47c>)
 802c5ec:	4293      	cmp	r3, r2
 802c5ee:	d004      	beq.n	802c5fa <HAL_DMA_Abort+0x422>
 802c5f0:	687b      	ldr	r3, [r7, #4]
 802c5f2:	681b      	ldr	r3, [r3, #0]
 802c5f4:	4a18      	ldr	r2, [pc, #96]	; (802c658 <HAL_DMA_Abort+0x480>)
 802c5f6:	4293      	cmp	r3, r2
 802c5f8:	d101      	bne.n	802c5fe <HAL_DMA_Abort+0x426>
 802c5fa:	2301      	movs	r3, #1
 802c5fc:	e000      	b.n	802c600 <HAL_DMA_Abort+0x428>
 802c5fe:	2300      	movs	r3, #0
 802c600:	2b00      	cmp	r3, #0
 802c602:	d02b      	beq.n	802c65c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c604:	687b      	ldr	r3, [r7, #4]
 802c606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c608:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802c60a:	687b      	ldr	r3, [r7, #4]
 802c60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c60e:	f003 031f 	and.w	r3, r3, #31
 802c612:	223f      	movs	r2, #63	; 0x3f
 802c614:	409a      	lsls	r2, r3
 802c616:	68bb      	ldr	r3, [r7, #8]
 802c618:	609a      	str	r2, [r3, #8]
 802c61a:	e02a      	b.n	802c672 <HAL_DMA_Abort+0x49a>
 802c61c:	40020010 	.word	0x40020010
 802c620:	40020028 	.word	0x40020028
 802c624:	40020040 	.word	0x40020040
 802c628:	40020058 	.word	0x40020058
 802c62c:	40020070 	.word	0x40020070
 802c630:	40020088 	.word	0x40020088
 802c634:	400200a0 	.word	0x400200a0
 802c638:	400200b8 	.word	0x400200b8
 802c63c:	40020410 	.word	0x40020410
 802c640:	40020428 	.word	0x40020428
 802c644:	40020440 	.word	0x40020440
 802c648:	40020458 	.word	0x40020458
 802c64c:	40020470 	.word	0x40020470
 802c650:	40020488 	.word	0x40020488
 802c654:	400204a0 	.word	0x400204a0
 802c658:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c660:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c666:	f003 031f 	and.w	r3, r3, #31
 802c66a:	2201      	movs	r2, #1
 802c66c:	409a      	lsls	r2, r3
 802c66e:	68fb      	ldr	r3, [r7, #12]
 802c670:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c672:	687b      	ldr	r3, [r7, #4]
 802c674:	681b      	ldr	r3, [r3, #0]
 802c676:	4a4f      	ldr	r2, [pc, #316]	; (802c7b4 <HAL_DMA_Abort+0x5dc>)
 802c678:	4293      	cmp	r3, r2
 802c67a:	d072      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	681b      	ldr	r3, [r3, #0]
 802c680:	4a4d      	ldr	r2, [pc, #308]	; (802c7b8 <HAL_DMA_Abort+0x5e0>)
 802c682:	4293      	cmp	r3, r2
 802c684:	d06d      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	681b      	ldr	r3, [r3, #0]
 802c68a:	4a4c      	ldr	r2, [pc, #304]	; (802c7bc <HAL_DMA_Abort+0x5e4>)
 802c68c:	4293      	cmp	r3, r2
 802c68e:	d068      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c690:	687b      	ldr	r3, [r7, #4]
 802c692:	681b      	ldr	r3, [r3, #0]
 802c694:	4a4a      	ldr	r2, [pc, #296]	; (802c7c0 <HAL_DMA_Abort+0x5e8>)
 802c696:	4293      	cmp	r3, r2
 802c698:	d063      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c69a:	687b      	ldr	r3, [r7, #4]
 802c69c:	681b      	ldr	r3, [r3, #0]
 802c69e:	4a49      	ldr	r2, [pc, #292]	; (802c7c4 <HAL_DMA_Abort+0x5ec>)
 802c6a0:	4293      	cmp	r3, r2
 802c6a2:	d05e      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6a4:	687b      	ldr	r3, [r7, #4]
 802c6a6:	681b      	ldr	r3, [r3, #0]
 802c6a8:	4a47      	ldr	r2, [pc, #284]	; (802c7c8 <HAL_DMA_Abort+0x5f0>)
 802c6aa:	4293      	cmp	r3, r2
 802c6ac:	d059      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6ae:	687b      	ldr	r3, [r7, #4]
 802c6b0:	681b      	ldr	r3, [r3, #0]
 802c6b2:	4a46      	ldr	r2, [pc, #280]	; (802c7cc <HAL_DMA_Abort+0x5f4>)
 802c6b4:	4293      	cmp	r3, r2
 802c6b6:	d054      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6b8:	687b      	ldr	r3, [r7, #4]
 802c6ba:	681b      	ldr	r3, [r3, #0]
 802c6bc:	4a44      	ldr	r2, [pc, #272]	; (802c7d0 <HAL_DMA_Abort+0x5f8>)
 802c6be:	4293      	cmp	r3, r2
 802c6c0:	d04f      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6c2:	687b      	ldr	r3, [r7, #4]
 802c6c4:	681b      	ldr	r3, [r3, #0]
 802c6c6:	4a43      	ldr	r2, [pc, #268]	; (802c7d4 <HAL_DMA_Abort+0x5fc>)
 802c6c8:	4293      	cmp	r3, r2
 802c6ca:	d04a      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6cc:	687b      	ldr	r3, [r7, #4]
 802c6ce:	681b      	ldr	r3, [r3, #0]
 802c6d0:	4a41      	ldr	r2, [pc, #260]	; (802c7d8 <HAL_DMA_Abort+0x600>)
 802c6d2:	4293      	cmp	r3, r2
 802c6d4:	d045      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6d6:	687b      	ldr	r3, [r7, #4]
 802c6d8:	681b      	ldr	r3, [r3, #0]
 802c6da:	4a40      	ldr	r2, [pc, #256]	; (802c7dc <HAL_DMA_Abort+0x604>)
 802c6dc:	4293      	cmp	r3, r2
 802c6de:	d040      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6e0:	687b      	ldr	r3, [r7, #4]
 802c6e2:	681b      	ldr	r3, [r3, #0]
 802c6e4:	4a3e      	ldr	r2, [pc, #248]	; (802c7e0 <HAL_DMA_Abort+0x608>)
 802c6e6:	4293      	cmp	r3, r2
 802c6e8:	d03b      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	681b      	ldr	r3, [r3, #0]
 802c6ee:	4a3d      	ldr	r2, [pc, #244]	; (802c7e4 <HAL_DMA_Abort+0x60c>)
 802c6f0:	4293      	cmp	r3, r2
 802c6f2:	d036      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6f4:	687b      	ldr	r3, [r7, #4]
 802c6f6:	681b      	ldr	r3, [r3, #0]
 802c6f8:	4a3b      	ldr	r2, [pc, #236]	; (802c7e8 <HAL_DMA_Abort+0x610>)
 802c6fa:	4293      	cmp	r3, r2
 802c6fc:	d031      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c6fe:	687b      	ldr	r3, [r7, #4]
 802c700:	681b      	ldr	r3, [r3, #0]
 802c702:	4a3a      	ldr	r2, [pc, #232]	; (802c7ec <HAL_DMA_Abort+0x614>)
 802c704:	4293      	cmp	r3, r2
 802c706:	d02c      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c708:	687b      	ldr	r3, [r7, #4]
 802c70a:	681b      	ldr	r3, [r3, #0]
 802c70c:	4a38      	ldr	r2, [pc, #224]	; (802c7f0 <HAL_DMA_Abort+0x618>)
 802c70e:	4293      	cmp	r3, r2
 802c710:	d027      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c712:	687b      	ldr	r3, [r7, #4]
 802c714:	681b      	ldr	r3, [r3, #0]
 802c716:	4a37      	ldr	r2, [pc, #220]	; (802c7f4 <HAL_DMA_Abort+0x61c>)
 802c718:	4293      	cmp	r3, r2
 802c71a:	d022      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c71c:	687b      	ldr	r3, [r7, #4]
 802c71e:	681b      	ldr	r3, [r3, #0]
 802c720:	4a35      	ldr	r2, [pc, #212]	; (802c7f8 <HAL_DMA_Abort+0x620>)
 802c722:	4293      	cmp	r3, r2
 802c724:	d01d      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c726:	687b      	ldr	r3, [r7, #4]
 802c728:	681b      	ldr	r3, [r3, #0]
 802c72a:	4a34      	ldr	r2, [pc, #208]	; (802c7fc <HAL_DMA_Abort+0x624>)
 802c72c:	4293      	cmp	r3, r2
 802c72e:	d018      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c730:	687b      	ldr	r3, [r7, #4]
 802c732:	681b      	ldr	r3, [r3, #0]
 802c734:	4a32      	ldr	r2, [pc, #200]	; (802c800 <HAL_DMA_Abort+0x628>)
 802c736:	4293      	cmp	r3, r2
 802c738:	d013      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c73a:	687b      	ldr	r3, [r7, #4]
 802c73c:	681b      	ldr	r3, [r3, #0]
 802c73e:	4a31      	ldr	r2, [pc, #196]	; (802c804 <HAL_DMA_Abort+0x62c>)
 802c740:	4293      	cmp	r3, r2
 802c742:	d00e      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c744:	687b      	ldr	r3, [r7, #4]
 802c746:	681b      	ldr	r3, [r3, #0]
 802c748:	4a2f      	ldr	r2, [pc, #188]	; (802c808 <HAL_DMA_Abort+0x630>)
 802c74a:	4293      	cmp	r3, r2
 802c74c:	d009      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c74e:	687b      	ldr	r3, [r7, #4]
 802c750:	681b      	ldr	r3, [r3, #0]
 802c752:	4a2e      	ldr	r2, [pc, #184]	; (802c80c <HAL_DMA_Abort+0x634>)
 802c754:	4293      	cmp	r3, r2
 802c756:	d004      	beq.n	802c762 <HAL_DMA_Abort+0x58a>
 802c758:	687b      	ldr	r3, [r7, #4]
 802c75a:	681b      	ldr	r3, [r3, #0]
 802c75c:	4a2c      	ldr	r2, [pc, #176]	; (802c810 <HAL_DMA_Abort+0x638>)
 802c75e:	4293      	cmp	r3, r2
 802c760:	d101      	bne.n	802c766 <HAL_DMA_Abort+0x58e>
 802c762:	2301      	movs	r3, #1
 802c764:	e000      	b.n	802c768 <HAL_DMA_Abort+0x590>
 802c766:	2300      	movs	r3, #0
 802c768:	2b00      	cmp	r3, #0
 802c76a:	d015      	beq.n	802c798 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802c76c:	687b      	ldr	r3, [r7, #4]
 802c76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c770:	687a      	ldr	r2, [r7, #4]
 802c772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802c774:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802c776:	687b      	ldr	r3, [r7, #4]
 802c778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c77a:	2b00      	cmp	r3, #0
 802c77c:	d00c      	beq.n	802c798 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802c77e:	687b      	ldr	r3, [r7, #4]
 802c780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c782:	681a      	ldr	r2, [r3, #0]
 802c784:	687b      	ldr	r3, [r7, #4]
 802c786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c78c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802c78e:	687b      	ldr	r3, [r7, #4]
 802c790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c792:	687a      	ldr	r2, [r7, #4]
 802c794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802c796:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802c798:	687b      	ldr	r3, [r7, #4]
 802c79a:	2201      	movs	r2, #1
 802c79c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c7a0:	687b      	ldr	r3, [r7, #4]
 802c7a2:	2200      	movs	r2, #0
 802c7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802c7a8:	2300      	movs	r3, #0
}
 802c7aa:	4618      	mov	r0, r3
 802c7ac:	3718      	adds	r7, #24
 802c7ae:	46bd      	mov	sp, r7
 802c7b0:	bd80      	pop	{r7, pc}
 802c7b2:	bf00      	nop
 802c7b4:	40020010 	.word	0x40020010
 802c7b8:	40020028 	.word	0x40020028
 802c7bc:	40020040 	.word	0x40020040
 802c7c0:	40020058 	.word	0x40020058
 802c7c4:	40020070 	.word	0x40020070
 802c7c8:	40020088 	.word	0x40020088
 802c7cc:	400200a0 	.word	0x400200a0
 802c7d0:	400200b8 	.word	0x400200b8
 802c7d4:	40020410 	.word	0x40020410
 802c7d8:	40020428 	.word	0x40020428
 802c7dc:	40020440 	.word	0x40020440
 802c7e0:	40020458 	.word	0x40020458
 802c7e4:	40020470 	.word	0x40020470
 802c7e8:	40020488 	.word	0x40020488
 802c7ec:	400204a0 	.word	0x400204a0
 802c7f0:	400204b8 	.word	0x400204b8
 802c7f4:	58025408 	.word	0x58025408
 802c7f8:	5802541c 	.word	0x5802541c
 802c7fc:	58025430 	.word	0x58025430
 802c800:	58025444 	.word	0x58025444
 802c804:	58025458 	.word	0x58025458
 802c808:	5802546c 	.word	0x5802546c
 802c80c:	58025480 	.word	0x58025480
 802c810:	58025494 	.word	0x58025494

0802c814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c814:	b580      	push	{r7, lr}
 802c816:	b084      	sub	sp, #16
 802c818:	af00      	add	r7, sp, #0
 802c81a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c81c:	687b      	ldr	r3, [r7, #4]
 802c81e:	2b00      	cmp	r3, #0
 802c820:	d101      	bne.n	802c826 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802c822:	2301      	movs	r3, #1
 802c824:	e237      	b.n	802cc96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c826:	687b      	ldr	r3, [r7, #4]
 802c828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c82c:	b2db      	uxtb	r3, r3
 802c82e:	2b02      	cmp	r3, #2
 802c830:	d004      	beq.n	802c83c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c832:	687b      	ldr	r3, [r7, #4]
 802c834:	2280      	movs	r2, #128	; 0x80
 802c836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802c838:	2301      	movs	r3, #1
 802c83a:	e22c      	b.n	802cc96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c83c:	687b      	ldr	r3, [r7, #4]
 802c83e:	681b      	ldr	r3, [r3, #0]
 802c840:	4a5c      	ldr	r2, [pc, #368]	; (802c9b4 <HAL_DMA_Abort_IT+0x1a0>)
 802c842:	4293      	cmp	r3, r2
 802c844:	d04a      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c846:	687b      	ldr	r3, [r7, #4]
 802c848:	681b      	ldr	r3, [r3, #0]
 802c84a:	4a5b      	ldr	r2, [pc, #364]	; (802c9b8 <HAL_DMA_Abort_IT+0x1a4>)
 802c84c:	4293      	cmp	r3, r2
 802c84e:	d045      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	681b      	ldr	r3, [r3, #0]
 802c854:	4a59      	ldr	r2, [pc, #356]	; (802c9bc <HAL_DMA_Abort_IT+0x1a8>)
 802c856:	4293      	cmp	r3, r2
 802c858:	d040      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c85a:	687b      	ldr	r3, [r7, #4]
 802c85c:	681b      	ldr	r3, [r3, #0]
 802c85e:	4a58      	ldr	r2, [pc, #352]	; (802c9c0 <HAL_DMA_Abort_IT+0x1ac>)
 802c860:	4293      	cmp	r3, r2
 802c862:	d03b      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c864:	687b      	ldr	r3, [r7, #4]
 802c866:	681b      	ldr	r3, [r3, #0]
 802c868:	4a56      	ldr	r2, [pc, #344]	; (802c9c4 <HAL_DMA_Abort_IT+0x1b0>)
 802c86a:	4293      	cmp	r3, r2
 802c86c:	d036      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c86e:	687b      	ldr	r3, [r7, #4]
 802c870:	681b      	ldr	r3, [r3, #0]
 802c872:	4a55      	ldr	r2, [pc, #340]	; (802c9c8 <HAL_DMA_Abort_IT+0x1b4>)
 802c874:	4293      	cmp	r3, r2
 802c876:	d031      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c878:	687b      	ldr	r3, [r7, #4]
 802c87a:	681b      	ldr	r3, [r3, #0]
 802c87c:	4a53      	ldr	r2, [pc, #332]	; (802c9cc <HAL_DMA_Abort_IT+0x1b8>)
 802c87e:	4293      	cmp	r3, r2
 802c880:	d02c      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	681b      	ldr	r3, [r3, #0]
 802c886:	4a52      	ldr	r2, [pc, #328]	; (802c9d0 <HAL_DMA_Abort_IT+0x1bc>)
 802c888:	4293      	cmp	r3, r2
 802c88a:	d027      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	681b      	ldr	r3, [r3, #0]
 802c890:	4a50      	ldr	r2, [pc, #320]	; (802c9d4 <HAL_DMA_Abort_IT+0x1c0>)
 802c892:	4293      	cmp	r3, r2
 802c894:	d022      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c896:	687b      	ldr	r3, [r7, #4]
 802c898:	681b      	ldr	r3, [r3, #0]
 802c89a:	4a4f      	ldr	r2, [pc, #316]	; (802c9d8 <HAL_DMA_Abort_IT+0x1c4>)
 802c89c:	4293      	cmp	r3, r2
 802c89e:	d01d      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8a0:	687b      	ldr	r3, [r7, #4]
 802c8a2:	681b      	ldr	r3, [r3, #0]
 802c8a4:	4a4d      	ldr	r2, [pc, #308]	; (802c9dc <HAL_DMA_Abort_IT+0x1c8>)
 802c8a6:	4293      	cmp	r3, r2
 802c8a8:	d018      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8aa:	687b      	ldr	r3, [r7, #4]
 802c8ac:	681b      	ldr	r3, [r3, #0]
 802c8ae:	4a4c      	ldr	r2, [pc, #304]	; (802c9e0 <HAL_DMA_Abort_IT+0x1cc>)
 802c8b0:	4293      	cmp	r3, r2
 802c8b2:	d013      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8b4:	687b      	ldr	r3, [r7, #4]
 802c8b6:	681b      	ldr	r3, [r3, #0]
 802c8b8:	4a4a      	ldr	r2, [pc, #296]	; (802c9e4 <HAL_DMA_Abort_IT+0x1d0>)
 802c8ba:	4293      	cmp	r3, r2
 802c8bc:	d00e      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8be:	687b      	ldr	r3, [r7, #4]
 802c8c0:	681b      	ldr	r3, [r3, #0]
 802c8c2:	4a49      	ldr	r2, [pc, #292]	; (802c9e8 <HAL_DMA_Abort_IT+0x1d4>)
 802c8c4:	4293      	cmp	r3, r2
 802c8c6:	d009      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8c8:	687b      	ldr	r3, [r7, #4]
 802c8ca:	681b      	ldr	r3, [r3, #0]
 802c8cc:	4a47      	ldr	r2, [pc, #284]	; (802c9ec <HAL_DMA_Abort_IT+0x1d8>)
 802c8ce:	4293      	cmp	r3, r2
 802c8d0:	d004      	beq.n	802c8dc <HAL_DMA_Abort_IT+0xc8>
 802c8d2:	687b      	ldr	r3, [r7, #4]
 802c8d4:	681b      	ldr	r3, [r3, #0]
 802c8d6:	4a46      	ldr	r2, [pc, #280]	; (802c9f0 <HAL_DMA_Abort_IT+0x1dc>)
 802c8d8:	4293      	cmp	r3, r2
 802c8da:	d101      	bne.n	802c8e0 <HAL_DMA_Abort_IT+0xcc>
 802c8dc:	2301      	movs	r3, #1
 802c8de:	e000      	b.n	802c8e2 <HAL_DMA_Abort_IT+0xce>
 802c8e0:	2300      	movs	r3, #0
 802c8e2:	2b00      	cmp	r3, #0
 802c8e4:	f000 8086 	beq.w	802c9f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802c8e8:	687b      	ldr	r3, [r7, #4]
 802c8ea:	2204      	movs	r2, #4
 802c8ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802c8f0:	687b      	ldr	r3, [r7, #4]
 802c8f2:	681b      	ldr	r3, [r3, #0]
 802c8f4:	4a2f      	ldr	r2, [pc, #188]	; (802c9b4 <HAL_DMA_Abort_IT+0x1a0>)
 802c8f6:	4293      	cmp	r3, r2
 802c8f8:	d04a      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	681b      	ldr	r3, [r3, #0]
 802c8fe:	4a2e      	ldr	r2, [pc, #184]	; (802c9b8 <HAL_DMA_Abort_IT+0x1a4>)
 802c900:	4293      	cmp	r3, r2
 802c902:	d045      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c904:	687b      	ldr	r3, [r7, #4]
 802c906:	681b      	ldr	r3, [r3, #0]
 802c908:	4a2c      	ldr	r2, [pc, #176]	; (802c9bc <HAL_DMA_Abort_IT+0x1a8>)
 802c90a:	4293      	cmp	r3, r2
 802c90c:	d040      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	681b      	ldr	r3, [r3, #0]
 802c912:	4a2b      	ldr	r2, [pc, #172]	; (802c9c0 <HAL_DMA_Abort_IT+0x1ac>)
 802c914:	4293      	cmp	r3, r2
 802c916:	d03b      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c918:	687b      	ldr	r3, [r7, #4]
 802c91a:	681b      	ldr	r3, [r3, #0]
 802c91c:	4a29      	ldr	r2, [pc, #164]	; (802c9c4 <HAL_DMA_Abort_IT+0x1b0>)
 802c91e:	4293      	cmp	r3, r2
 802c920:	d036      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	4a28      	ldr	r2, [pc, #160]	; (802c9c8 <HAL_DMA_Abort_IT+0x1b4>)
 802c928:	4293      	cmp	r3, r2
 802c92a:	d031      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c92c:	687b      	ldr	r3, [r7, #4]
 802c92e:	681b      	ldr	r3, [r3, #0]
 802c930:	4a26      	ldr	r2, [pc, #152]	; (802c9cc <HAL_DMA_Abort_IT+0x1b8>)
 802c932:	4293      	cmp	r3, r2
 802c934:	d02c      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c936:	687b      	ldr	r3, [r7, #4]
 802c938:	681b      	ldr	r3, [r3, #0]
 802c93a:	4a25      	ldr	r2, [pc, #148]	; (802c9d0 <HAL_DMA_Abort_IT+0x1bc>)
 802c93c:	4293      	cmp	r3, r2
 802c93e:	d027      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	681b      	ldr	r3, [r3, #0]
 802c944:	4a23      	ldr	r2, [pc, #140]	; (802c9d4 <HAL_DMA_Abort_IT+0x1c0>)
 802c946:	4293      	cmp	r3, r2
 802c948:	d022      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	681b      	ldr	r3, [r3, #0]
 802c94e:	4a22      	ldr	r2, [pc, #136]	; (802c9d8 <HAL_DMA_Abort_IT+0x1c4>)
 802c950:	4293      	cmp	r3, r2
 802c952:	d01d      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c954:	687b      	ldr	r3, [r7, #4]
 802c956:	681b      	ldr	r3, [r3, #0]
 802c958:	4a20      	ldr	r2, [pc, #128]	; (802c9dc <HAL_DMA_Abort_IT+0x1c8>)
 802c95a:	4293      	cmp	r3, r2
 802c95c:	d018      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	681b      	ldr	r3, [r3, #0]
 802c962:	4a1f      	ldr	r2, [pc, #124]	; (802c9e0 <HAL_DMA_Abort_IT+0x1cc>)
 802c964:	4293      	cmp	r3, r2
 802c966:	d013      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c968:	687b      	ldr	r3, [r7, #4]
 802c96a:	681b      	ldr	r3, [r3, #0]
 802c96c:	4a1d      	ldr	r2, [pc, #116]	; (802c9e4 <HAL_DMA_Abort_IT+0x1d0>)
 802c96e:	4293      	cmp	r3, r2
 802c970:	d00e      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	681b      	ldr	r3, [r3, #0]
 802c976:	4a1c      	ldr	r2, [pc, #112]	; (802c9e8 <HAL_DMA_Abort_IT+0x1d4>)
 802c978:	4293      	cmp	r3, r2
 802c97a:	d009      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	4a1a      	ldr	r2, [pc, #104]	; (802c9ec <HAL_DMA_Abort_IT+0x1d8>)
 802c982:	4293      	cmp	r3, r2
 802c984:	d004      	beq.n	802c990 <HAL_DMA_Abort_IT+0x17c>
 802c986:	687b      	ldr	r3, [r7, #4]
 802c988:	681b      	ldr	r3, [r3, #0]
 802c98a:	4a19      	ldr	r2, [pc, #100]	; (802c9f0 <HAL_DMA_Abort_IT+0x1dc>)
 802c98c:	4293      	cmp	r3, r2
 802c98e:	d108      	bne.n	802c9a2 <HAL_DMA_Abort_IT+0x18e>
 802c990:	687b      	ldr	r3, [r7, #4]
 802c992:	681b      	ldr	r3, [r3, #0]
 802c994:	681a      	ldr	r2, [r3, #0]
 802c996:	687b      	ldr	r3, [r7, #4]
 802c998:	681b      	ldr	r3, [r3, #0]
 802c99a:	f022 0201 	bic.w	r2, r2, #1
 802c99e:	601a      	str	r2, [r3, #0]
 802c9a0:	e178      	b.n	802cc94 <HAL_DMA_Abort_IT+0x480>
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	681b      	ldr	r3, [r3, #0]
 802c9a6:	681a      	ldr	r2, [r3, #0]
 802c9a8:	687b      	ldr	r3, [r7, #4]
 802c9aa:	681b      	ldr	r3, [r3, #0]
 802c9ac:	f022 0201 	bic.w	r2, r2, #1
 802c9b0:	601a      	str	r2, [r3, #0]
 802c9b2:	e16f      	b.n	802cc94 <HAL_DMA_Abort_IT+0x480>
 802c9b4:	40020010 	.word	0x40020010
 802c9b8:	40020028 	.word	0x40020028
 802c9bc:	40020040 	.word	0x40020040
 802c9c0:	40020058 	.word	0x40020058
 802c9c4:	40020070 	.word	0x40020070
 802c9c8:	40020088 	.word	0x40020088
 802c9cc:	400200a0 	.word	0x400200a0
 802c9d0:	400200b8 	.word	0x400200b8
 802c9d4:	40020410 	.word	0x40020410
 802c9d8:	40020428 	.word	0x40020428
 802c9dc:	40020440 	.word	0x40020440
 802c9e0:	40020458 	.word	0x40020458
 802c9e4:	40020470 	.word	0x40020470
 802c9e8:	40020488 	.word	0x40020488
 802c9ec:	400204a0 	.word	0x400204a0
 802c9f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c9f4:	687b      	ldr	r3, [r7, #4]
 802c9f6:	681b      	ldr	r3, [r3, #0]
 802c9f8:	681a      	ldr	r2, [r3, #0]
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	f022 020e 	bic.w	r2, r2, #14
 802ca02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	681b      	ldr	r3, [r3, #0]
 802ca08:	4a6c      	ldr	r2, [pc, #432]	; (802cbbc <HAL_DMA_Abort_IT+0x3a8>)
 802ca0a:	4293      	cmp	r3, r2
 802ca0c:	d04a      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca0e:	687b      	ldr	r3, [r7, #4]
 802ca10:	681b      	ldr	r3, [r3, #0]
 802ca12:	4a6b      	ldr	r2, [pc, #428]	; (802cbc0 <HAL_DMA_Abort_IT+0x3ac>)
 802ca14:	4293      	cmp	r3, r2
 802ca16:	d045      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca18:	687b      	ldr	r3, [r7, #4]
 802ca1a:	681b      	ldr	r3, [r3, #0]
 802ca1c:	4a69      	ldr	r2, [pc, #420]	; (802cbc4 <HAL_DMA_Abort_IT+0x3b0>)
 802ca1e:	4293      	cmp	r3, r2
 802ca20:	d040      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca22:	687b      	ldr	r3, [r7, #4]
 802ca24:	681b      	ldr	r3, [r3, #0]
 802ca26:	4a68      	ldr	r2, [pc, #416]	; (802cbc8 <HAL_DMA_Abort_IT+0x3b4>)
 802ca28:	4293      	cmp	r3, r2
 802ca2a:	d03b      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca2c:	687b      	ldr	r3, [r7, #4]
 802ca2e:	681b      	ldr	r3, [r3, #0]
 802ca30:	4a66      	ldr	r2, [pc, #408]	; (802cbcc <HAL_DMA_Abort_IT+0x3b8>)
 802ca32:	4293      	cmp	r3, r2
 802ca34:	d036      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca36:	687b      	ldr	r3, [r7, #4]
 802ca38:	681b      	ldr	r3, [r3, #0]
 802ca3a:	4a65      	ldr	r2, [pc, #404]	; (802cbd0 <HAL_DMA_Abort_IT+0x3bc>)
 802ca3c:	4293      	cmp	r3, r2
 802ca3e:	d031      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca40:	687b      	ldr	r3, [r7, #4]
 802ca42:	681b      	ldr	r3, [r3, #0]
 802ca44:	4a63      	ldr	r2, [pc, #396]	; (802cbd4 <HAL_DMA_Abort_IT+0x3c0>)
 802ca46:	4293      	cmp	r3, r2
 802ca48:	d02c      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca4a:	687b      	ldr	r3, [r7, #4]
 802ca4c:	681b      	ldr	r3, [r3, #0]
 802ca4e:	4a62      	ldr	r2, [pc, #392]	; (802cbd8 <HAL_DMA_Abort_IT+0x3c4>)
 802ca50:	4293      	cmp	r3, r2
 802ca52:	d027      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca54:	687b      	ldr	r3, [r7, #4]
 802ca56:	681b      	ldr	r3, [r3, #0]
 802ca58:	4a60      	ldr	r2, [pc, #384]	; (802cbdc <HAL_DMA_Abort_IT+0x3c8>)
 802ca5a:	4293      	cmp	r3, r2
 802ca5c:	d022      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca5e:	687b      	ldr	r3, [r7, #4]
 802ca60:	681b      	ldr	r3, [r3, #0]
 802ca62:	4a5f      	ldr	r2, [pc, #380]	; (802cbe0 <HAL_DMA_Abort_IT+0x3cc>)
 802ca64:	4293      	cmp	r3, r2
 802ca66:	d01d      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca68:	687b      	ldr	r3, [r7, #4]
 802ca6a:	681b      	ldr	r3, [r3, #0]
 802ca6c:	4a5d      	ldr	r2, [pc, #372]	; (802cbe4 <HAL_DMA_Abort_IT+0x3d0>)
 802ca6e:	4293      	cmp	r3, r2
 802ca70:	d018      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca72:	687b      	ldr	r3, [r7, #4]
 802ca74:	681b      	ldr	r3, [r3, #0]
 802ca76:	4a5c      	ldr	r2, [pc, #368]	; (802cbe8 <HAL_DMA_Abort_IT+0x3d4>)
 802ca78:	4293      	cmp	r3, r2
 802ca7a:	d013      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca7c:	687b      	ldr	r3, [r7, #4]
 802ca7e:	681b      	ldr	r3, [r3, #0]
 802ca80:	4a5a      	ldr	r2, [pc, #360]	; (802cbec <HAL_DMA_Abort_IT+0x3d8>)
 802ca82:	4293      	cmp	r3, r2
 802ca84:	d00e      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca86:	687b      	ldr	r3, [r7, #4]
 802ca88:	681b      	ldr	r3, [r3, #0]
 802ca8a:	4a59      	ldr	r2, [pc, #356]	; (802cbf0 <HAL_DMA_Abort_IT+0x3dc>)
 802ca8c:	4293      	cmp	r3, r2
 802ca8e:	d009      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca90:	687b      	ldr	r3, [r7, #4]
 802ca92:	681b      	ldr	r3, [r3, #0]
 802ca94:	4a57      	ldr	r2, [pc, #348]	; (802cbf4 <HAL_DMA_Abort_IT+0x3e0>)
 802ca96:	4293      	cmp	r3, r2
 802ca98:	d004      	beq.n	802caa4 <HAL_DMA_Abort_IT+0x290>
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	681b      	ldr	r3, [r3, #0]
 802ca9e:	4a56      	ldr	r2, [pc, #344]	; (802cbf8 <HAL_DMA_Abort_IT+0x3e4>)
 802caa0:	4293      	cmp	r3, r2
 802caa2:	d108      	bne.n	802cab6 <HAL_DMA_Abort_IT+0x2a2>
 802caa4:	687b      	ldr	r3, [r7, #4]
 802caa6:	681b      	ldr	r3, [r3, #0]
 802caa8:	681a      	ldr	r2, [r3, #0]
 802caaa:	687b      	ldr	r3, [r7, #4]
 802caac:	681b      	ldr	r3, [r3, #0]
 802caae:	f022 0201 	bic.w	r2, r2, #1
 802cab2:	601a      	str	r2, [r3, #0]
 802cab4:	e007      	b.n	802cac6 <HAL_DMA_Abort_IT+0x2b2>
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	681b      	ldr	r3, [r3, #0]
 802caba:	681a      	ldr	r2, [r3, #0]
 802cabc:	687b      	ldr	r3, [r7, #4]
 802cabe:	681b      	ldr	r3, [r3, #0]
 802cac0:	f022 0201 	bic.w	r2, r2, #1
 802cac4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802cac6:	687b      	ldr	r3, [r7, #4]
 802cac8:	681b      	ldr	r3, [r3, #0]
 802caca:	4a3c      	ldr	r2, [pc, #240]	; (802cbbc <HAL_DMA_Abort_IT+0x3a8>)
 802cacc:	4293      	cmp	r3, r2
 802cace:	d072      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cad0:	687b      	ldr	r3, [r7, #4]
 802cad2:	681b      	ldr	r3, [r3, #0]
 802cad4:	4a3a      	ldr	r2, [pc, #232]	; (802cbc0 <HAL_DMA_Abort_IT+0x3ac>)
 802cad6:	4293      	cmp	r3, r2
 802cad8:	d06d      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cada:	687b      	ldr	r3, [r7, #4]
 802cadc:	681b      	ldr	r3, [r3, #0]
 802cade:	4a39      	ldr	r2, [pc, #228]	; (802cbc4 <HAL_DMA_Abort_IT+0x3b0>)
 802cae0:	4293      	cmp	r3, r2
 802cae2:	d068      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cae4:	687b      	ldr	r3, [r7, #4]
 802cae6:	681b      	ldr	r3, [r3, #0]
 802cae8:	4a37      	ldr	r2, [pc, #220]	; (802cbc8 <HAL_DMA_Abort_IT+0x3b4>)
 802caea:	4293      	cmp	r3, r2
 802caec:	d063      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	681b      	ldr	r3, [r3, #0]
 802caf2:	4a36      	ldr	r2, [pc, #216]	; (802cbcc <HAL_DMA_Abort_IT+0x3b8>)
 802caf4:	4293      	cmp	r3, r2
 802caf6:	d05e      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802caf8:	687b      	ldr	r3, [r7, #4]
 802cafa:	681b      	ldr	r3, [r3, #0]
 802cafc:	4a34      	ldr	r2, [pc, #208]	; (802cbd0 <HAL_DMA_Abort_IT+0x3bc>)
 802cafe:	4293      	cmp	r3, r2
 802cb00:	d059      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	681b      	ldr	r3, [r3, #0]
 802cb06:	4a33      	ldr	r2, [pc, #204]	; (802cbd4 <HAL_DMA_Abort_IT+0x3c0>)
 802cb08:	4293      	cmp	r3, r2
 802cb0a:	d054      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb0c:	687b      	ldr	r3, [r7, #4]
 802cb0e:	681b      	ldr	r3, [r3, #0]
 802cb10:	4a31      	ldr	r2, [pc, #196]	; (802cbd8 <HAL_DMA_Abort_IT+0x3c4>)
 802cb12:	4293      	cmp	r3, r2
 802cb14:	d04f      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb16:	687b      	ldr	r3, [r7, #4]
 802cb18:	681b      	ldr	r3, [r3, #0]
 802cb1a:	4a30      	ldr	r2, [pc, #192]	; (802cbdc <HAL_DMA_Abort_IT+0x3c8>)
 802cb1c:	4293      	cmp	r3, r2
 802cb1e:	d04a      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb20:	687b      	ldr	r3, [r7, #4]
 802cb22:	681b      	ldr	r3, [r3, #0]
 802cb24:	4a2e      	ldr	r2, [pc, #184]	; (802cbe0 <HAL_DMA_Abort_IT+0x3cc>)
 802cb26:	4293      	cmp	r3, r2
 802cb28:	d045      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb2a:	687b      	ldr	r3, [r7, #4]
 802cb2c:	681b      	ldr	r3, [r3, #0]
 802cb2e:	4a2d      	ldr	r2, [pc, #180]	; (802cbe4 <HAL_DMA_Abort_IT+0x3d0>)
 802cb30:	4293      	cmp	r3, r2
 802cb32:	d040      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb34:	687b      	ldr	r3, [r7, #4]
 802cb36:	681b      	ldr	r3, [r3, #0]
 802cb38:	4a2b      	ldr	r2, [pc, #172]	; (802cbe8 <HAL_DMA_Abort_IT+0x3d4>)
 802cb3a:	4293      	cmp	r3, r2
 802cb3c:	d03b      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb3e:	687b      	ldr	r3, [r7, #4]
 802cb40:	681b      	ldr	r3, [r3, #0]
 802cb42:	4a2a      	ldr	r2, [pc, #168]	; (802cbec <HAL_DMA_Abort_IT+0x3d8>)
 802cb44:	4293      	cmp	r3, r2
 802cb46:	d036      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb48:	687b      	ldr	r3, [r7, #4]
 802cb4a:	681b      	ldr	r3, [r3, #0]
 802cb4c:	4a28      	ldr	r2, [pc, #160]	; (802cbf0 <HAL_DMA_Abort_IT+0x3dc>)
 802cb4e:	4293      	cmp	r3, r2
 802cb50:	d031      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb52:	687b      	ldr	r3, [r7, #4]
 802cb54:	681b      	ldr	r3, [r3, #0]
 802cb56:	4a27      	ldr	r2, [pc, #156]	; (802cbf4 <HAL_DMA_Abort_IT+0x3e0>)
 802cb58:	4293      	cmp	r3, r2
 802cb5a:	d02c      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb5c:	687b      	ldr	r3, [r7, #4]
 802cb5e:	681b      	ldr	r3, [r3, #0]
 802cb60:	4a25      	ldr	r2, [pc, #148]	; (802cbf8 <HAL_DMA_Abort_IT+0x3e4>)
 802cb62:	4293      	cmp	r3, r2
 802cb64:	d027      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb66:	687b      	ldr	r3, [r7, #4]
 802cb68:	681b      	ldr	r3, [r3, #0]
 802cb6a:	4a24      	ldr	r2, [pc, #144]	; (802cbfc <HAL_DMA_Abort_IT+0x3e8>)
 802cb6c:	4293      	cmp	r3, r2
 802cb6e:	d022      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb70:	687b      	ldr	r3, [r7, #4]
 802cb72:	681b      	ldr	r3, [r3, #0]
 802cb74:	4a22      	ldr	r2, [pc, #136]	; (802cc00 <HAL_DMA_Abort_IT+0x3ec>)
 802cb76:	4293      	cmp	r3, r2
 802cb78:	d01d      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb7a:	687b      	ldr	r3, [r7, #4]
 802cb7c:	681b      	ldr	r3, [r3, #0]
 802cb7e:	4a21      	ldr	r2, [pc, #132]	; (802cc04 <HAL_DMA_Abort_IT+0x3f0>)
 802cb80:	4293      	cmp	r3, r2
 802cb82:	d018      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb84:	687b      	ldr	r3, [r7, #4]
 802cb86:	681b      	ldr	r3, [r3, #0]
 802cb88:	4a1f      	ldr	r2, [pc, #124]	; (802cc08 <HAL_DMA_Abort_IT+0x3f4>)
 802cb8a:	4293      	cmp	r3, r2
 802cb8c:	d013      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb8e:	687b      	ldr	r3, [r7, #4]
 802cb90:	681b      	ldr	r3, [r3, #0]
 802cb92:	4a1e      	ldr	r2, [pc, #120]	; (802cc0c <HAL_DMA_Abort_IT+0x3f8>)
 802cb94:	4293      	cmp	r3, r2
 802cb96:	d00e      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cb98:	687b      	ldr	r3, [r7, #4]
 802cb9a:	681b      	ldr	r3, [r3, #0]
 802cb9c:	4a1c      	ldr	r2, [pc, #112]	; (802cc10 <HAL_DMA_Abort_IT+0x3fc>)
 802cb9e:	4293      	cmp	r3, r2
 802cba0:	d009      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cba2:	687b      	ldr	r3, [r7, #4]
 802cba4:	681b      	ldr	r3, [r3, #0]
 802cba6:	4a1b      	ldr	r2, [pc, #108]	; (802cc14 <HAL_DMA_Abort_IT+0x400>)
 802cba8:	4293      	cmp	r3, r2
 802cbaa:	d004      	beq.n	802cbb6 <HAL_DMA_Abort_IT+0x3a2>
 802cbac:	687b      	ldr	r3, [r7, #4]
 802cbae:	681b      	ldr	r3, [r3, #0]
 802cbb0:	4a19      	ldr	r2, [pc, #100]	; (802cc18 <HAL_DMA_Abort_IT+0x404>)
 802cbb2:	4293      	cmp	r3, r2
 802cbb4:	d132      	bne.n	802cc1c <HAL_DMA_Abort_IT+0x408>
 802cbb6:	2301      	movs	r3, #1
 802cbb8:	e031      	b.n	802cc1e <HAL_DMA_Abort_IT+0x40a>
 802cbba:	bf00      	nop
 802cbbc:	40020010 	.word	0x40020010
 802cbc0:	40020028 	.word	0x40020028
 802cbc4:	40020040 	.word	0x40020040
 802cbc8:	40020058 	.word	0x40020058
 802cbcc:	40020070 	.word	0x40020070
 802cbd0:	40020088 	.word	0x40020088
 802cbd4:	400200a0 	.word	0x400200a0
 802cbd8:	400200b8 	.word	0x400200b8
 802cbdc:	40020410 	.word	0x40020410
 802cbe0:	40020428 	.word	0x40020428
 802cbe4:	40020440 	.word	0x40020440
 802cbe8:	40020458 	.word	0x40020458
 802cbec:	40020470 	.word	0x40020470
 802cbf0:	40020488 	.word	0x40020488
 802cbf4:	400204a0 	.word	0x400204a0
 802cbf8:	400204b8 	.word	0x400204b8
 802cbfc:	58025408 	.word	0x58025408
 802cc00:	5802541c 	.word	0x5802541c
 802cc04:	58025430 	.word	0x58025430
 802cc08:	58025444 	.word	0x58025444
 802cc0c:	58025458 	.word	0x58025458
 802cc10:	5802546c 	.word	0x5802546c
 802cc14:	58025480 	.word	0x58025480
 802cc18:	58025494 	.word	0x58025494
 802cc1c:	2300      	movs	r3, #0
 802cc1e:	2b00      	cmp	r3, #0
 802cc20:	d028      	beq.n	802cc74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802cc22:	687b      	ldr	r3, [r7, #4]
 802cc24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc26:	681a      	ldr	r2, [r3, #0]
 802cc28:	687b      	ldr	r3, [r7, #4]
 802cc2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cc30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cc32:	687b      	ldr	r3, [r7, #4]
 802cc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cc36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802cc38:	687b      	ldr	r3, [r7, #4]
 802cc3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cc3c:	f003 031f 	and.w	r3, r3, #31
 802cc40:	2201      	movs	r2, #1
 802cc42:	409a      	lsls	r2, r3
 802cc44:	68fb      	ldr	r3, [r7, #12]
 802cc46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802cc48:	687b      	ldr	r3, [r7, #4]
 802cc4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802cc4c:	687a      	ldr	r2, [r7, #4]
 802cc4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802cc50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802cc52:	687b      	ldr	r3, [r7, #4]
 802cc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc56:	2b00      	cmp	r3, #0
 802cc58:	d00c      	beq.n	802cc74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802cc5a:	687b      	ldr	r3, [r7, #4]
 802cc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc5e:	681a      	ldr	r2, [r3, #0]
 802cc60:	687b      	ldr	r3, [r7, #4]
 802cc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cc68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802cc6a:	687b      	ldr	r3, [r7, #4]
 802cc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cc6e:	687a      	ldr	r2, [r7, #4]
 802cc70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802cc72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802cc74:	687b      	ldr	r3, [r7, #4]
 802cc76:	2201      	movs	r2, #1
 802cc78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802cc7c:	687b      	ldr	r3, [r7, #4]
 802cc7e:	2200      	movs	r2, #0
 802cc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802cc84:	687b      	ldr	r3, [r7, #4]
 802cc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cc88:	2b00      	cmp	r3, #0
 802cc8a:	d003      	beq.n	802cc94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802cc8c:	687b      	ldr	r3, [r7, #4]
 802cc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cc90:	6878      	ldr	r0, [r7, #4]
 802cc92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802cc94:	2300      	movs	r3, #0
}
 802cc96:	4618      	mov	r0, r3
 802cc98:	3710      	adds	r7, #16
 802cc9a:	46bd      	mov	sp, r7
 802cc9c:	bd80      	pop	{r7, pc}
 802cc9e:	bf00      	nop

0802cca0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802cca0:	b580      	push	{r7, lr}
 802cca2:	b08a      	sub	sp, #40	; 0x28
 802cca4:	af00      	add	r7, sp, #0
 802cca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802cca8:	2300      	movs	r3, #0
 802ccaa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802ccac:	4b67      	ldr	r3, [pc, #412]	; (802ce4c <HAL_DMA_IRQHandler+0x1ac>)
 802ccae:	681b      	ldr	r3, [r3, #0]
 802ccb0:	4a67      	ldr	r2, [pc, #412]	; (802ce50 <HAL_DMA_IRQHandler+0x1b0>)
 802ccb2:	fba2 2303 	umull	r2, r3, r2, r3
 802ccb6:	0a9b      	lsrs	r3, r3, #10
 802ccb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802ccba:	687b      	ldr	r3, [r7, #4]
 802ccbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ccbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802ccc0:	687b      	ldr	r3, [r7, #4]
 802ccc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ccc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802ccc6:	6a3b      	ldr	r3, [r7, #32]
 802ccc8:	681b      	ldr	r3, [r3, #0]
 802ccca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802cccc:	69fb      	ldr	r3, [r7, #28]
 802ccce:	681b      	ldr	r3, [r3, #0]
 802ccd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802ccd2:	687b      	ldr	r3, [r7, #4]
 802ccd4:	681b      	ldr	r3, [r3, #0]
 802ccd6:	4a5f      	ldr	r2, [pc, #380]	; (802ce54 <HAL_DMA_IRQHandler+0x1b4>)
 802ccd8:	4293      	cmp	r3, r2
 802ccda:	d04a      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802ccdc:	687b      	ldr	r3, [r7, #4]
 802ccde:	681b      	ldr	r3, [r3, #0]
 802cce0:	4a5d      	ldr	r2, [pc, #372]	; (802ce58 <HAL_DMA_IRQHandler+0x1b8>)
 802cce2:	4293      	cmp	r3, r2
 802cce4:	d045      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cce6:	687b      	ldr	r3, [r7, #4]
 802cce8:	681b      	ldr	r3, [r3, #0]
 802ccea:	4a5c      	ldr	r2, [pc, #368]	; (802ce5c <HAL_DMA_IRQHandler+0x1bc>)
 802ccec:	4293      	cmp	r3, r2
 802ccee:	d040      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	681b      	ldr	r3, [r3, #0]
 802ccf4:	4a5a      	ldr	r2, [pc, #360]	; (802ce60 <HAL_DMA_IRQHandler+0x1c0>)
 802ccf6:	4293      	cmp	r3, r2
 802ccf8:	d03b      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802ccfa:	687b      	ldr	r3, [r7, #4]
 802ccfc:	681b      	ldr	r3, [r3, #0]
 802ccfe:	4a59      	ldr	r2, [pc, #356]	; (802ce64 <HAL_DMA_IRQHandler+0x1c4>)
 802cd00:	4293      	cmp	r3, r2
 802cd02:	d036      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd04:	687b      	ldr	r3, [r7, #4]
 802cd06:	681b      	ldr	r3, [r3, #0]
 802cd08:	4a57      	ldr	r2, [pc, #348]	; (802ce68 <HAL_DMA_IRQHandler+0x1c8>)
 802cd0a:	4293      	cmp	r3, r2
 802cd0c:	d031      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd0e:	687b      	ldr	r3, [r7, #4]
 802cd10:	681b      	ldr	r3, [r3, #0]
 802cd12:	4a56      	ldr	r2, [pc, #344]	; (802ce6c <HAL_DMA_IRQHandler+0x1cc>)
 802cd14:	4293      	cmp	r3, r2
 802cd16:	d02c      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd18:	687b      	ldr	r3, [r7, #4]
 802cd1a:	681b      	ldr	r3, [r3, #0]
 802cd1c:	4a54      	ldr	r2, [pc, #336]	; (802ce70 <HAL_DMA_IRQHandler+0x1d0>)
 802cd1e:	4293      	cmp	r3, r2
 802cd20:	d027      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd22:	687b      	ldr	r3, [r7, #4]
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	4a53      	ldr	r2, [pc, #332]	; (802ce74 <HAL_DMA_IRQHandler+0x1d4>)
 802cd28:	4293      	cmp	r3, r2
 802cd2a:	d022      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd2c:	687b      	ldr	r3, [r7, #4]
 802cd2e:	681b      	ldr	r3, [r3, #0]
 802cd30:	4a51      	ldr	r2, [pc, #324]	; (802ce78 <HAL_DMA_IRQHandler+0x1d8>)
 802cd32:	4293      	cmp	r3, r2
 802cd34:	d01d      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd36:	687b      	ldr	r3, [r7, #4]
 802cd38:	681b      	ldr	r3, [r3, #0]
 802cd3a:	4a50      	ldr	r2, [pc, #320]	; (802ce7c <HAL_DMA_IRQHandler+0x1dc>)
 802cd3c:	4293      	cmp	r3, r2
 802cd3e:	d018      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd40:	687b      	ldr	r3, [r7, #4]
 802cd42:	681b      	ldr	r3, [r3, #0]
 802cd44:	4a4e      	ldr	r2, [pc, #312]	; (802ce80 <HAL_DMA_IRQHandler+0x1e0>)
 802cd46:	4293      	cmp	r3, r2
 802cd48:	d013      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd4a:	687b      	ldr	r3, [r7, #4]
 802cd4c:	681b      	ldr	r3, [r3, #0]
 802cd4e:	4a4d      	ldr	r2, [pc, #308]	; (802ce84 <HAL_DMA_IRQHandler+0x1e4>)
 802cd50:	4293      	cmp	r3, r2
 802cd52:	d00e      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd54:	687b      	ldr	r3, [r7, #4]
 802cd56:	681b      	ldr	r3, [r3, #0]
 802cd58:	4a4b      	ldr	r2, [pc, #300]	; (802ce88 <HAL_DMA_IRQHandler+0x1e8>)
 802cd5a:	4293      	cmp	r3, r2
 802cd5c:	d009      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd5e:	687b      	ldr	r3, [r7, #4]
 802cd60:	681b      	ldr	r3, [r3, #0]
 802cd62:	4a4a      	ldr	r2, [pc, #296]	; (802ce8c <HAL_DMA_IRQHandler+0x1ec>)
 802cd64:	4293      	cmp	r3, r2
 802cd66:	d004      	beq.n	802cd72 <HAL_DMA_IRQHandler+0xd2>
 802cd68:	687b      	ldr	r3, [r7, #4]
 802cd6a:	681b      	ldr	r3, [r3, #0]
 802cd6c:	4a48      	ldr	r2, [pc, #288]	; (802ce90 <HAL_DMA_IRQHandler+0x1f0>)
 802cd6e:	4293      	cmp	r3, r2
 802cd70:	d101      	bne.n	802cd76 <HAL_DMA_IRQHandler+0xd6>
 802cd72:	2301      	movs	r3, #1
 802cd74:	e000      	b.n	802cd78 <HAL_DMA_IRQHandler+0xd8>
 802cd76:	2300      	movs	r3, #0
 802cd78:	2b00      	cmp	r3, #0
 802cd7a:	f000 842b 	beq.w	802d5d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cd7e:	687b      	ldr	r3, [r7, #4]
 802cd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cd82:	f003 031f 	and.w	r3, r3, #31
 802cd86:	2208      	movs	r2, #8
 802cd88:	409a      	lsls	r2, r3
 802cd8a:	69bb      	ldr	r3, [r7, #24]
 802cd8c:	4013      	ands	r3, r2
 802cd8e:	2b00      	cmp	r3, #0
 802cd90:	f000 80a2 	beq.w	802ced8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802cd94:	687b      	ldr	r3, [r7, #4]
 802cd96:	681b      	ldr	r3, [r3, #0]
 802cd98:	4a2e      	ldr	r2, [pc, #184]	; (802ce54 <HAL_DMA_IRQHandler+0x1b4>)
 802cd9a:	4293      	cmp	r3, r2
 802cd9c:	d04a      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cd9e:	687b      	ldr	r3, [r7, #4]
 802cda0:	681b      	ldr	r3, [r3, #0]
 802cda2:	4a2d      	ldr	r2, [pc, #180]	; (802ce58 <HAL_DMA_IRQHandler+0x1b8>)
 802cda4:	4293      	cmp	r3, r2
 802cda6:	d045      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cda8:	687b      	ldr	r3, [r7, #4]
 802cdaa:	681b      	ldr	r3, [r3, #0]
 802cdac:	4a2b      	ldr	r2, [pc, #172]	; (802ce5c <HAL_DMA_IRQHandler+0x1bc>)
 802cdae:	4293      	cmp	r3, r2
 802cdb0:	d040      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	681b      	ldr	r3, [r3, #0]
 802cdb6:	4a2a      	ldr	r2, [pc, #168]	; (802ce60 <HAL_DMA_IRQHandler+0x1c0>)
 802cdb8:	4293      	cmp	r3, r2
 802cdba:	d03b      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdbc:	687b      	ldr	r3, [r7, #4]
 802cdbe:	681b      	ldr	r3, [r3, #0]
 802cdc0:	4a28      	ldr	r2, [pc, #160]	; (802ce64 <HAL_DMA_IRQHandler+0x1c4>)
 802cdc2:	4293      	cmp	r3, r2
 802cdc4:	d036      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdc6:	687b      	ldr	r3, [r7, #4]
 802cdc8:	681b      	ldr	r3, [r3, #0]
 802cdca:	4a27      	ldr	r2, [pc, #156]	; (802ce68 <HAL_DMA_IRQHandler+0x1c8>)
 802cdcc:	4293      	cmp	r3, r2
 802cdce:	d031      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdd0:	687b      	ldr	r3, [r7, #4]
 802cdd2:	681b      	ldr	r3, [r3, #0]
 802cdd4:	4a25      	ldr	r2, [pc, #148]	; (802ce6c <HAL_DMA_IRQHandler+0x1cc>)
 802cdd6:	4293      	cmp	r3, r2
 802cdd8:	d02c      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdda:	687b      	ldr	r3, [r7, #4]
 802cddc:	681b      	ldr	r3, [r3, #0]
 802cdde:	4a24      	ldr	r2, [pc, #144]	; (802ce70 <HAL_DMA_IRQHandler+0x1d0>)
 802cde0:	4293      	cmp	r3, r2
 802cde2:	d027      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cde4:	687b      	ldr	r3, [r7, #4]
 802cde6:	681b      	ldr	r3, [r3, #0]
 802cde8:	4a22      	ldr	r2, [pc, #136]	; (802ce74 <HAL_DMA_IRQHandler+0x1d4>)
 802cdea:	4293      	cmp	r3, r2
 802cdec:	d022      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdee:	687b      	ldr	r3, [r7, #4]
 802cdf0:	681b      	ldr	r3, [r3, #0]
 802cdf2:	4a21      	ldr	r2, [pc, #132]	; (802ce78 <HAL_DMA_IRQHandler+0x1d8>)
 802cdf4:	4293      	cmp	r3, r2
 802cdf6:	d01d      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802cdf8:	687b      	ldr	r3, [r7, #4]
 802cdfa:	681b      	ldr	r3, [r3, #0]
 802cdfc:	4a1f      	ldr	r2, [pc, #124]	; (802ce7c <HAL_DMA_IRQHandler+0x1dc>)
 802cdfe:	4293      	cmp	r3, r2
 802ce00:	d018      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802ce02:	687b      	ldr	r3, [r7, #4]
 802ce04:	681b      	ldr	r3, [r3, #0]
 802ce06:	4a1e      	ldr	r2, [pc, #120]	; (802ce80 <HAL_DMA_IRQHandler+0x1e0>)
 802ce08:	4293      	cmp	r3, r2
 802ce0a:	d013      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802ce0c:	687b      	ldr	r3, [r7, #4]
 802ce0e:	681b      	ldr	r3, [r3, #0]
 802ce10:	4a1c      	ldr	r2, [pc, #112]	; (802ce84 <HAL_DMA_IRQHandler+0x1e4>)
 802ce12:	4293      	cmp	r3, r2
 802ce14:	d00e      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	681b      	ldr	r3, [r3, #0]
 802ce1a:	4a1b      	ldr	r2, [pc, #108]	; (802ce88 <HAL_DMA_IRQHandler+0x1e8>)
 802ce1c:	4293      	cmp	r3, r2
 802ce1e:	d009      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	681b      	ldr	r3, [r3, #0]
 802ce24:	4a19      	ldr	r2, [pc, #100]	; (802ce8c <HAL_DMA_IRQHandler+0x1ec>)
 802ce26:	4293      	cmp	r3, r2
 802ce28:	d004      	beq.n	802ce34 <HAL_DMA_IRQHandler+0x194>
 802ce2a:	687b      	ldr	r3, [r7, #4]
 802ce2c:	681b      	ldr	r3, [r3, #0]
 802ce2e:	4a18      	ldr	r2, [pc, #96]	; (802ce90 <HAL_DMA_IRQHandler+0x1f0>)
 802ce30:	4293      	cmp	r3, r2
 802ce32:	d12f      	bne.n	802ce94 <HAL_DMA_IRQHandler+0x1f4>
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	681b      	ldr	r3, [r3, #0]
 802ce38:	681b      	ldr	r3, [r3, #0]
 802ce3a:	f003 0304 	and.w	r3, r3, #4
 802ce3e:	2b00      	cmp	r3, #0
 802ce40:	bf14      	ite	ne
 802ce42:	2301      	movne	r3, #1
 802ce44:	2300      	moveq	r3, #0
 802ce46:	b2db      	uxtb	r3, r3
 802ce48:	e02e      	b.n	802cea8 <HAL_DMA_IRQHandler+0x208>
 802ce4a:	bf00      	nop
 802ce4c:	24000004 	.word	0x24000004
 802ce50:	1b4e81b5 	.word	0x1b4e81b5
 802ce54:	40020010 	.word	0x40020010
 802ce58:	40020028 	.word	0x40020028
 802ce5c:	40020040 	.word	0x40020040
 802ce60:	40020058 	.word	0x40020058
 802ce64:	40020070 	.word	0x40020070
 802ce68:	40020088 	.word	0x40020088
 802ce6c:	400200a0 	.word	0x400200a0
 802ce70:	400200b8 	.word	0x400200b8
 802ce74:	40020410 	.word	0x40020410
 802ce78:	40020428 	.word	0x40020428
 802ce7c:	40020440 	.word	0x40020440
 802ce80:	40020458 	.word	0x40020458
 802ce84:	40020470 	.word	0x40020470
 802ce88:	40020488 	.word	0x40020488
 802ce8c:	400204a0 	.word	0x400204a0
 802ce90:	400204b8 	.word	0x400204b8
 802ce94:	687b      	ldr	r3, [r7, #4]
 802ce96:	681b      	ldr	r3, [r3, #0]
 802ce98:	681b      	ldr	r3, [r3, #0]
 802ce9a:	f003 0308 	and.w	r3, r3, #8
 802ce9e:	2b00      	cmp	r3, #0
 802cea0:	bf14      	ite	ne
 802cea2:	2301      	movne	r3, #1
 802cea4:	2300      	moveq	r3, #0
 802cea6:	b2db      	uxtb	r3, r3
 802cea8:	2b00      	cmp	r3, #0
 802ceaa:	d015      	beq.n	802ced8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802ceac:	687b      	ldr	r3, [r7, #4]
 802ceae:	681b      	ldr	r3, [r3, #0]
 802ceb0:	681a      	ldr	r2, [r3, #0]
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	681b      	ldr	r3, [r3, #0]
 802ceb6:	f022 0204 	bic.w	r2, r2, #4
 802ceba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cebc:	687b      	ldr	r3, [r7, #4]
 802cebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cec0:	f003 031f 	and.w	r3, r3, #31
 802cec4:	2208      	movs	r2, #8
 802cec6:	409a      	lsls	r2, r3
 802cec8:	6a3b      	ldr	r3, [r7, #32]
 802ceca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802cecc:	687b      	ldr	r3, [r7, #4]
 802cece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ced0:	f043 0201 	orr.w	r2, r3, #1
 802ced4:	687b      	ldr	r3, [r7, #4]
 802ced6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802ced8:	687b      	ldr	r3, [r7, #4]
 802ceda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cedc:	f003 031f 	and.w	r3, r3, #31
 802cee0:	69ba      	ldr	r2, [r7, #24]
 802cee2:	fa22 f303 	lsr.w	r3, r2, r3
 802cee6:	f003 0301 	and.w	r3, r3, #1
 802ceea:	2b00      	cmp	r3, #0
 802ceec:	d06e      	beq.n	802cfcc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802ceee:	687b      	ldr	r3, [r7, #4]
 802cef0:	681b      	ldr	r3, [r3, #0]
 802cef2:	4a69      	ldr	r2, [pc, #420]	; (802d098 <HAL_DMA_IRQHandler+0x3f8>)
 802cef4:	4293      	cmp	r3, r2
 802cef6:	d04a      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cef8:	687b      	ldr	r3, [r7, #4]
 802cefa:	681b      	ldr	r3, [r3, #0]
 802cefc:	4a67      	ldr	r2, [pc, #412]	; (802d09c <HAL_DMA_IRQHandler+0x3fc>)
 802cefe:	4293      	cmp	r3, r2
 802cf00:	d045      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf02:	687b      	ldr	r3, [r7, #4]
 802cf04:	681b      	ldr	r3, [r3, #0]
 802cf06:	4a66      	ldr	r2, [pc, #408]	; (802d0a0 <HAL_DMA_IRQHandler+0x400>)
 802cf08:	4293      	cmp	r3, r2
 802cf0a:	d040      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf0c:	687b      	ldr	r3, [r7, #4]
 802cf0e:	681b      	ldr	r3, [r3, #0]
 802cf10:	4a64      	ldr	r2, [pc, #400]	; (802d0a4 <HAL_DMA_IRQHandler+0x404>)
 802cf12:	4293      	cmp	r3, r2
 802cf14:	d03b      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf16:	687b      	ldr	r3, [r7, #4]
 802cf18:	681b      	ldr	r3, [r3, #0]
 802cf1a:	4a63      	ldr	r2, [pc, #396]	; (802d0a8 <HAL_DMA_IRQHandler+0x408>)
 802cf1c:	4293      	cmp	r3, r2
 802cf1e:	d036      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf20:	687b      	ldr	r3, [r7, #4]
 802cf22:	681b      	ldr	r3, [r3, #0]
 802cf24:	4a61      	ldr	r2, [pc, #388]	; (802d0ac <HAL_DMA_IRQHandler+0x40c>)
 802cf26:	4293      	cmp	r3, r2
 802cf28:	d031      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf2a:	687b      	ldr	r3, [r7, #4]
 802cf2c:	681b      	ldr	r3, [r3, #0]
 802cf2e:	4a60      	ldr	r2, [pc, #384]	; (802d0b0 <HAL_DMA_IRQHandler+0x410>)
 802cf30:	4293      	cmp	r3, r2
 802cf32:	d02c      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf34:	687b      	ldr	r3, [r7, #4]
 802cf36:	681b      	ldr	r3, [r3, #0]
 802cf38:	4a5e      	ldr	r2, [pc, #376]	; (802d0b4 <HAL_DMA_IRQHandler+0x414>)
 802cf3a:	4293      	cmp	r3, r2
 802cf3c:	d027      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf3e:	687b      	ldr	r3, [r7, #4]
 802cf40:	681b      	ldr	r3, [r3, #0]
 802cf42:	4a5d      	ldr	r2, [pc, #372]	; (802d0b8 <HAL_DMA_IRQHandler+0x418>)
 802cf44:	4293      	cmp	r3, r2
 802cf46:	d022      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf48:	687b      	ldr	r3, [r7, #4]
 802cf4a:	681b      	ldr	r3, [r3, #0]
 802cf4c:	4a5b      	ldr	r2, [pc, #364]	; (802d0bc <HAL_DMA_IRQHandler+0x41c>)
 802cf4e:	4293      	cmp	r3, r2
 802cf50:	d01d      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf52:	687b      	ldr	r3, [r7, #4]
 802cf54:	681b      	ldr	r3, [r3, #0]
 802cf56:	4a5a      	ldr	r2, [pc, #360]	; (802d0c0 <HAL_DMA_IRQHandler+0x420>)
 802cf58:	4293      	cmp	r3, r2
 802cf5a:	d018      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf5c:	687b      	ldr	r3, [r7, #4]
 802cf5e:	681b      	ldr	r3, [r3, #0]
 802cf60:	4a58      	ldr	r2, [pc, #352]	; (802d0c4 <HAL_DMA_IRQHandler+0x424>)
 802cf62:	4293      	cmp	r3, r2
 802cf64:	d013      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf66:	687b      	ldr	r3, [r7, #4]
 802cf68:	681b      	ldr	r3, [r3, #0]
 802cf6a:	4a57      	ldr	r2, [pc, #348]	; (802d0c8 <HAL_DMA_IRQHandler+0x428>)
 802cf6c:	4293      	cmp	r3, r2
 802cf6e:	d00e      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf70:	687b      	ldr	r3, [r7, #4]
 802cf72:	681b      	ldr	r3, [r3, #0]
 802cf74:	4a55      	ldr	r2, [pc, #340]	; (802d0cc <HAL_DMA_IRQHandler+0x42c>)
 802cf76:	4293      	cmp	r3, r2
 802cf78:	d009      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf7a:	687b      	ldr	r3, [r7, #4]
 802cf7c:	681b      	ldr	r3, [r3, #0]
 802cf7e:	4a54      	ldr	r2, [pc, #336]	; (802d0d0 <HAL_DMA_IRQHandler+0x430>)
 802cf80:	4293      	cmp	r3, r2
 802cf82:	d004      	beq.n	802cf8e <HAL_DMA_IRQHandler+0x2ee>
 802cf84:	687b      	ldr	r3, [r7, #4]
 802cf86:	681b      	ldr	r3, [r3, #0]
 802cf88:	4a52      	ldr	r2, [pc, #328]	; (802d0d4 <HAL_DMA_IRQHandler+0x434>)
 802cf8a:	4293      	cmp	r3, r2
 802cf8c:	d10a      	bne.n	802cfa4 <HAL_DMA_IRQHandler+0x304>
 802cf8e:	687b      	ldr	r3, [r7, #4]
 802cf90:	681b      	ldr	r3, [r3, #0]
 802cf92:	695b      	ldr	r3, [r3, #20]
 802cf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cf98:	2b00      	cmp	r3, #0
 802cf9a:	bf14      	ite	ne
 802cf9c:	2301      	movne	r3, #1
 802cf9e:	2300      	moveq	r3, #0
 802cfa0:	b2db      	uxtb	r3, r3
 802cfa2:	e003      	b.n	802cfac <HAL_DMA_IRQHandler+0x30c>
 802cfa4:	687b      	ldr	r3, [r7, #4]
 802cfa6:	681b      	ldr	r3, [r3, #0]
 802cfa8:	681b      	ldr	r3, [r3, #0]
 802cfaa:	2300      	movs	r3, #0
 802cfac:	2b00      	cmp	r3, #0
 802cfae:	d00d      	beq.n	802cfcc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cfb0:	687b      	ldr	r3, [r7, #4]
 802cfb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cfb4:	f003 031f 	and.w	r3, r3, #31
 802cfb8:	2201      	movs	r2, #1
 802cfba:	409a      	lsls	r2, r3
 802cfbc:	6a3b      	ldr	r3, [r7, #32]
 802cfbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802cfc0:	687b      	ldr	r3, [r7, #4]
 802cfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cfc4:	f043 0202 	orr.w	r2, r3, #2
 802cfc8:	687b      	ldr	r3, [r7, #4]
 802cfca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cfcc:	687b      	ldr	r3, [r7, #4]
 802cfce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cfd0:	f003 031f 	and.w	r3, r3, #31
 802cfd4:	2204      	movs	r2, #4
 802cfd6:	409a      	lsls	r2, r3
 802cfd8:	69bb      	ldr	r3, [r7, #24]
 802cfda:	4013      	ands	r3, r2
 802cfdc:	2b00      	cmp	r3, #0
 802cfde:	f000 808f 	beq.w	802d100 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802cfe2:	687b      	ldr	r3, [r7, #4]
 802cfe4:	681b      	ldr	r3, [r3, #0]
 802cfe6:	4a2c      	ldr	r2, [pc, #176]	; (802d098 <HAL_DMA_IRQHandler+0x3f8>)
 802cfe8:	4293      	cmp	r3, r2
 802cfea:	d04a      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802cfec:	687b      	ldr	r3, [r7, #4]
 802cfee:	681b      	ldr	r3, [r3, #0]
 802cff0:	4a2a      	ldr	r2, [pc, #168]	; (802d09c <HAL_DMA_IRQHandler+0x3fc>)
 802cff2:	4293      	cmp	r3, r2
 802cff4:	d045      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802cff6:	687b      	ldr	r3, [r7, #4]
 802cff8:	681b      	ldr	r3, [r3, #0]
 802cffa:	4a29      	ldr	r2, [pc, #164]	; (802d0a0 <HAL_DMA_IRQHandler+0x400>)
 802cffc:	4293      	cmp	r3, r2
 802cffe:	d040      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d000:	687b      	ldr	r3, [r7, #4]
 802d002:	681b      	ldr	r3, [r3, #0]
 802d004:	4a27      	ldr	r2, [pc, #156]	; (802d0a4 <HAL_DMA_IRQHandler+0x404>)
 802d006:	4293      	cmp	r3, r2
 802d008:	d03b      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d00a:	687b      	ldr	r3, [r7, #4]
 802d00c:	681b      	ldr	r3, [r3, #0]
 802d00e:	4a26      	ldr	r2, [pc, #152]	; (802d0a8 <HAL_DMA_IRQHandler+0x408>)
 802d010:	4293      	cmp	r3, r2
 802d012:	d036      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d014:	687b      	ldr	r3, [r7, #4]
 802d016:	681b      	ldr	r3, [r3, #0]
 802d018:	4a24      	ldr	r2, [pc, #144]	; (802d0ac <HAL_DMA_IRQHandler+0x40c>)
 802d01a:	4293      	cmp	r3, r2
 802d01c:	d031      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d01e:	687b      	ldr	r3, [r7, #4]
 802d020:	681b      	ldr	r3, [r3, #0]
 802d022:	4a23      	ldr	r2, [pc, #140]	; (802d0b0 <HAL_DMA_IRQHandler+0x410>)
 802d024:	4293      	cmp	r3, r2
 802d026:	d02c      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d028:	687b      	ldr	r3, [r7, #4]
 802d02a:	681b      	ldr	r3, [r3, #0]
 802d02c:	4a21      	ldr	r2, [pc, #132]	; (802d0b4 <HAL_DMA_IRQHandler+0x414>)
 802d02e:	4293      	cmp	r3, r2
 802d030:	d027      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d032:	687b      	ldr	r3, [r7, #4]
 802d034:	681b      	ldr	r3, [r3, #0]
 802d036:	4a20      	ldr	r2, [pc, #128]	; (802d0b8 <HAL_DMA_IRQHandler+0x418>)
 802d038:	4293      	cmp	r3, r2
 802d03a:	d022      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d03c:	687b      	ldr	r3, [r7, #4]
 802d03e:	681b      	ldr	r3, [r3, #0]
 802d040:	4a1e      	ldr	r2, [pc, #120]	; (802d0bc <HAL_DMA_IRQHandler+0x41c>)
 802d042:	4293      	cmp	r3, r2
 802d044:	d01d      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d046:	687b      	ldr	r3, [r7, #4]
 802d048:	681b      	ldr	r3, [r3, #0]
 802d04a:	4a1d      	ldr	r2, [pc, #116]	; (802d0c0 <HAL_DMA_IRQHandler+0x420>)
 802d04c:	4293      	cmp	r3, r2
 802d04e:	d018      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d050:	687b      	ldr	r3, [r7, #4]
 802d052:	681b      	ldr	r3, [r3, #0]
 802d054:	4a1b      	ldr	r2, [pc, #108]	; (802d0c4 <HAL_DMA_IRQHandler+0x424>)
 802d056:	4293      	cmp	r3, r2
 802d058:	d013      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d05a:	687b      	ldr	r3, [r7, #4]
 802d05c:	681b      	ldr	r3, [r3, #0]
 802d05e:	4a1a      	ldr	r2, [pc, #104]	; (802d0c8 <HAL_DMA_IRQHandler+0x428>)
 802d060:	4293      	cmp	r3, r2
 802d062:	d00e      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d064:	687b      	ldr	r3, [r7, #4]
 802d066:	681b      	ldr	r3, [r3, #0]
 802d068:	4a18      	ldr	r2, [pc, #96]	; (802d0cc <HAL_DMA_IRQHandler+0x42c>)
 802d06a:	4293      	cmp	r3, r2
 802d06c:	d009      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d06e:	687b      	ldr	r3, [r7, #4]
 802d070:	681b      	ldr	r3, [r3, #0]
 802d072:	4a17      	ldr	r2, [pc, #92]	; (802d0d0 <HAL_DMA_IRQHandler+0x430>)
 802d074:	4293      	cmp	r3, r2
 802d076:	d004      	beq.n	802d082 <HAL_DMA_IRQHandler+0x3e2>
 802d078:	687b      	ldr	r3, [r7, #4]
 802d07a:	681b      	ldr	r3, [r3, #0]
 802d07c:	4a15      	ldr	r2, [pc, #84]	; (802d0d4 <HAL_DMA_IRQHandler+0x434>)
 802d07e:	4293      	cmp	r3, r2
 802d080:	d12a      	bne.n	802d0d8 <HAL_DMA_IRQHandler+0x438>
 802d082:	687b      	ldr	r3, [r7, #4]
 802d084:	681b      	ldr	r3, [r3, #0]
 802d086:	681b      	ldr	r3, [r3, #0]
 802d088:	f003 0302 	and.w	r3, r3, #2
 802d08c:	2b00      	cmp	r3, #0
 802d08e:	bf14      	ite	ne
 802d090:	2301      	movne	r3, #1
 802d092:	2300      	moveq	r3, #0
 802d094:	b2db      	uxtb	r3, r3
 802d096:	e023      	b.n	802d0e0 <HAL_DMA_IRQHandler+0x440>
 802d098:	40020010 	.word	0x40020010
 802d09c:	40020028 	.word	0x40020028
 802d0a0:	40020040 	.word	0x40020040
 802d0a4:	40020058 	.word	0x40020058
 802d0a8:	40020070 	.word	0x40020070
 802d0ac:	40020088 	.word	0x40020088
 802d0b0:	400200a0 	.word	0x400200a0
 802d0b4:	400200b8 	.word	0x400200b8
 802d0b8:	40020410 	.word	0x40020410
 802d0bc:	40020428 	.word	0x40020428
 802d0c0:	40020440 	.word	0x40020440
 802d0c4:	40020458 	.word	0x40020458
 802d0c8:	40020470 	.word	0x40020470
 802d0cc:	40020488 	.word	0x40020488
 802d0d0:	400204a0 	.word	0x400204a0
 802d0d4:	400204b8 	.word	0x400204b8
 802d0d8:	687b      	ldr	r3, [r7, #4]
 802d0da:	681b      	ldr	r3, [r3, #0]
 802d0dc:	681b      	ldr	r3, [r3, #0]
 802d0de:	2300      	movs	r3, #0
 802d0e0:	2b00      	cmp	r3, #0
 802d0e2:	d00d      	beq.n	802d100 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d0e4:	687b      	ldr	r3, [r7, #4]
 802d0e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d0e8:	f003 031f 	and.w	r3, r3, #31
 802d0ec:	2204      	movs	r2, #4
 802d0ee:	409a      	lsls	r2, r3
 802d0f0:	6a3b      	ldr	r3, [r7, #32]
 802d0f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802d0f4:	687b      	ldr	r3, [r7, #4]
 802d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d0f8:	f043 0204 	orr.w	r2, r3, #4
 802d0fc:	687b      	ldr	r3, [r7, #4]
 802d0fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d100:	687b      	ldr	r3, [r7, #4]
 802d102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d104:	f003 031f 	and.w	r3, r3, #31
 802d108:	2210      	movs	r2, #16
 802d10a:	409a      	lsls	r2, r3
 802d10c:	69bb      	ldr	r3, [r7, #24]
 802d10e:	4013      	ands	r3, r2
 802d110:	2b00      	cmp	r3, #0
 802d112:	f000 80a6 	beq.w	802d262 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802d116:	687b      	ldr	r3, [r7, #4]
 802d118:	681b      	ldr	r3, [r3, #0]
 802d11a:	4a85      	ldr	r2, [pc, #532]	; (802d330 <HAL_DMA_IRQHandler+0x690>)
 802d11c:	4293      	cmp	r3, r2
 802d11e:	d04a      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d120:	687b      	ldr	r3, [r7, #4]
 802d122:	681b      	ldr	r3, [r3, #0]
 802d124:	4a83      	ldr	r2, [pc, #524]	; (802d334 <HAL_DMA_IRQHandler+0x694>)
 802d126:	4293      	cmp	r3, r2
 802d128:	d045      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d12a:	687b      	ldr	r3, [r7, #4]
 802d12c:	681b      	ldr	r3, [r3, #0]
 802d12e:	4a82      	ldr	r2, [pc, #520]	; (802d338 <HAL_DMA_IRQHandler+0x698>)
 802d130:	4293      	cmp	r3, r2
 802d132:	d040      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d134:	687b      	ldr	r3, [r7, #4]
 802d136:	681b      	ldr	r3, [r3, #0]
 802d138:	4a80      	ldr	r2, [pc, #512]	; (802d33c <HAL_DMA_IRQHandler+0x69c>)
 802d13a:	4293      	cmp	r3, r2
 802d13c:	d03b      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d13e:	687b      	ldr	r3, [r7, #4]
 802d140:	681b      	ldr	r3, [r3, #0]
 802d142:	4a7f      	ldr	r2, [pc, #508]	; (802d340 <HAL_DMA_IRQHandler+0x6a0>)
 802d144:	4293      	cmp	r3, r2
 802d146:	d036      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d148:	687b      	ldr	r3, [r7, #4]
 802d14a:	681b      	ldr	r3, [r3, #0]
 802d14c:	4a7d      	ldr	r2, [pc, #500]	; (802d344 <HAL_DMA_IRQHandler+0x6a4>)
 802d14e:	4293      	cmp	r3, r2
 802d150:	d031      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d152:	687b      	ldr	r3, [r7, #4]
 802d154:	681b      	ldr	r3, [r3, #0]
 802d156:	4a7c      	ldr	r2, [pc, #496]	; (802d348 <HAL_DMA_IRQHandler+0x6a8>)
 802d158:	4293      	cmp	r3, r2
 802d15a:	d02c      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d15c:	687b      	ldr	r3, [r7, #4]
 802d15e:	681b      	ldr	r3, [r3, #0]
 802d160:	4a7a      	ldr	r2, [pc, #488]	; (802d34c <HAL_DMA_IRQHandler+0x6ac>)
 802d162:	4293      	cmp	r3, r2
 802d164:	d027      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d166:	687b      	ldr	r3, [r7, #4]
 802d168:	681b      	ldr	r3, [r3, #0]
 802d16a:	4a79      	ldr	r2, [pc, #484]	; (802d350 <HAL_DMA_IRQHandler+0x6b0>)
 802d16c:	4293      	cmp	r3, r2
 802d16e:	d022      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d170:	687b      	ldr	r3, [r7, #4]
 802d172:	681b      	ldr	r3, [r3, #0]
 802d174:	4a77      	ldr	r2, [pc, #476]	; (802d354 <HAL_DMA_IRQHandler+0x6b4>)
 802d176:	4293      	cmp	r3, r2
 802d178:	d01d      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d17a:	687b      	ldr	r3, [r7, #4]
 802d17c:	681b      	ldr	r3, [r3, #0]
 802d17e:	4a76      	ldr	r2, [pc, #472]	; (802d358 <HAL_DMA_IRQHandler+0x6b8>)
 802d180:	4293      	cmp	r3, r2
 802d182:	d018      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d184:	687b      	ldr	r3, [r7, #4]
 802d186:	681b      	ldr	r3, [r3, #0]
 802d188:	4a74      	ldr	r2, [pc, #464]	; (802d35c <HAL_DMA_IRQHandler+0x6bc>)
 802d18a:	4293      	cmp	r3, r2
 802d18c:	d013      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d18e:	687b      	ldr	r3, [r7, #4]
 802d190:	681b      	ldr	r3, [r3, #0]
 802d192:	4a73      	ldr	r2, [pc, #460]	; (802d360 <HAL_DMA_IRQHandler+0x6c0>)
 802d194:	4293      	cmp	r3, r2
 802d196:	d00e      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d198:	687b      	ldr	r3, [r7, #4]
 802d19a:	681b      	ldr	r3, [r3, #0]
 802d19c:	4a71      	ldr	r2, [pc, #452]	; (802d364 <HAL_DMA_IRQHandler+0x6c4>)
 802d19e:	4293      	cmp	r3, r2
 802d1a0:	d009      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d1a2:	687b      	ldr	r3, [r7, #4]
 802d1a4:	681b      	ldr	r3, [r3, #0]
 802d1a6:	4a70      	ldr	r2, [pc, #448]	; (802d368 <HAL_DMA_IRQHandler+0x6c8>)
 802d1a8:	4293      	cmp	r3, r2
 802d1aa:	d004      	beq.n	802d1b6 <HAL_DMA_IRQHandler+0x516>
 802d1ac:	687b      	ldr	r3, [r7, #4]
 802d1ae:	681b      	ldr	r3, [r3, #0]
 802d1b0:	4a6e      	ldr	r2, [pc, #440]	; (802d36c <HAL_DMA_IRQHandler+0x6cc>)
 802d1b2:	4293      	cmp	r3, r2
 802d1b4:	d10a      	bne.n	802d1cc <HAL_DMA_IRQHandler+0x52c>
 802d1b6:	687b      	ldr	r3, [r7, #4]
 802d1b8:	681b      	ldr	r3, [r3, #0]
 802d1ba:	681b      	ldr	r3, [r3, #0]
 802d1bc:	f003 0308 	and.w	r3, r3, #8
 802d1c0:	2b00      	cmp	r3, #0
 802d1c2:	bf14      	ite	ne
 802d1c4:	2301      	movne	r3, #1
 802d1c6:	2300      	moveq	r3, #0
 802d1c8:	b2db      	uxtb	r3, r3
 802d1ca:	e009      	b.n	802d1e0 <HAL_DMA_IRQHandler+0x540>
 802d1cc:	687b      	ldr	r3, [r7, #4]
 802d1ce:	681b      	ldr	r3, [r3, #0]
 802d1d0:	681b      	ldr	r3, [r3, #0]
 802d1d2:	f003 0304 	and.w	r3, r3, #4
 802d1d6:	2b00      	cmp	r3, #0
 802d1d8:	bf14      	ite	ne
 802d1da:	2301      	movne	r3, #1
 802d1dc:	2300      	moveq	r3, #0
 802d1de:	b2db      	uxtb	r3, r3
 802d1e0:	2b00      	cmp	r3, #0
 802d1e2:	d03e      	beq.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d1e4:	687b      	ldr	r3, [r7, #4]
 802d1e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d1e8:	f003 031f 	and.w	r3, r3, #31
 802d1ec:	2210      	movs	r2, #16
 802d1ee:	409a      	lsls	r2, r3
 802d1f0:	6a3b      	ldr	r3, [r7, #32]
 802d1f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d1f4:	687b      	ldr	r3, [r7, #4]
 802d1f6:	681b      	ldr	r3, [r3, #0]
 802d1f8:	681b      	ldr	r3, [r3, #0]
 802d1fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d1fe:	2b00      	cmp	r3, #0
 802d200:	d018      	beq.n	802d234 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d202:	687b      	ldr	r3, [r7, #4]
 802d204:	681b      	ldr	r3, [r3, #0]
 802d206:	681b      	ldr	r3, [r3, #0]
 802d208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d20c:	2b00      	cmp	r3, #0
 802d20e:	d108      	bne.n	802d222 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802d210:	687b      	ldr	r3, [r7, #4]
 802d212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d214:	2b00      	cmp	r3, #0
 802d216:	d024      	beq.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802d218:	687b      	ldr	r3, [r7, #4]
 802d21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d21c:	6878      	ldr	r0, [r7, #4]
 802d21e:	4798      	blx	r3
 802d220:	e01f      	b.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802d222:	687b      	ldr	r3, [r7, #4]
 802d224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d226:	2b00      	cmp	r3, #0
 802d228:	d01b      	beq.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802d22a:	687b      	ldr	r3, [r7, #4]
 802d22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d22e:	6878      	ldr	r0, [r7, #4]
 802d230:	4798      	blx	r3
 802d232:	e016      	b.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d234:	687b      	ldr	r3, [r7, #4]
 802d236:	681b      	ldr	r3, [r3, #0]
 802d238:	681b      	ldr	r3, [r3, #0]
 802d23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d23e:	2b00      	cmp	r3, #0
 802d240:	d107      	bne.n	802d252 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d242:	687b      	ldr	r3, [r7, #4]
 802d244:	681b      	ldr	r3, [r3, #0]
 802d246:	681a      	ldr	r2, [r3, #0]
 802d248:	687b      	ldr	r3, [r7, #4]
 802d24a:	681b      	ldr	r3, [r3, #0]
 802d24c:	f022 0208 	bic.w	r2, r2, #8
 802d250:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802d252:	687b      	ldr	r3, [r7, #4]
 802d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d256:	2b00      	cmp	r3, #0
 802d258:	d003      	beq.n	802d262 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802d25a:	687b      	ldr	r3, [r7, #4]
 802d25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d25e:	6878      	ldr	r0, [r7, #4]
 802d260:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d262:	687b      	ldr	r3, [r7, #4]
 802d264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d266:	f003 031f 	and.w	r3, r3, #31
 802d26a:	2220      	movs	r2, #32
 802d26c:	409a      	lsls	r2, r3
 802d26e:	69bb      	ldr	r3, [r7, #24]
 802d270:	4013      	ands	r3, r2
 802d272:	2b00      	cmp	r3, #0
 802d274:	f000 8110 	beq.w	802d498 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802d278:	687b      	ldr	r3, [r7, #4]
 802d27a:	681b      	ldr	r3, [r3, #0]
 802d27c:	4a2c      	ldr	r2, [pc, #176]	; (802d330 <HAL_DMA_IRQHandler+0x690>)
 802d27e:	4293      	cmp	r3, r2
 802d280:	d04a      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d282:	687b      	ldr	r3, [r7, #4]
 802d284:	681b      	ldr	r3, [r3, #0]
 802d286:	4a2b      	ldr	r2, [pc, #172]	; (802d334 <HAL_DMA_IRQHandler+0x694>)
 802d288:	4293      	cmp	r3, r2
 802d28a:	d045      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d28c:	687b      	ldr	r3, [r7, #4]
 802d28e:	681b      	ldr	r3, [r3, #0]
 802d290:	4a29      	ldr	r2, [pc, #164]	; (802d338 <HAL_DMA_IRQHandler+0x698>)
 802d292:	4293      	cmp	r3, r2
 802d294:	d040      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d296:	687b      	ldr	r3, [r7, #4]
 802d298:	681b      	ldr	r3, [r3, #0]
 802d29a:	4a28      	ldr	r2, [pc, #160]	; (802d33c <HAL_DMA_IRQHandler+0x69c>)
 802d29c:	4293      	cmp	r3, r2
 802d29e:	d03b      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	681b      	ldr	r3, [r3, #0]
 802d2a4:	4a26      	ldr	r2, [pc, #152]	; (802d340 <HAL_DMA_IRQHandler+0x6a0>)
 802d2a6:	4293      	cmp	r3, r2
 802d2a8:	d036      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2aa:	687b      	ldr	r3, [r7, #4]
 802d2ac:	681b      	ldr	r3, [r3, #0]
 802d2ae:	4a25      	ldr	r2, [pc, #148]	; (802d344 <HAL_DMA_IRQHandler+0x6a4>)
 802d2b0:	4293      	cmp	r3, r2
 802d2b2:	d031      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2b4:	687b      	ldr	r3, [r7, #4]
 802d2b6:	681b      	ldr	r3, [r3, #0]
 802d2b8:	4a23      	ldr	r2, [pc, #140]	; (802d348 <HAL_DMA_IRQHandler+0x6a8>)
 802d2ba:	4293      	cmp	r3, r2
 802d2bc:	d02c      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2be:	687b      	ldr	r3, [r7, #4]
 802d2c0:	681b      	ldr	r3, [r3, #0]
 802d2c2:	4a22      	ldr	r2, [pc, #136]	; (802d34c <HAL_DMA_IRQHandler+0x6ac>)
 802d2c4:	4293      	cmp	r3, r2
 802d2c6:	d027      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2c8:	687b      	ldr	r3, [r7, #4]
 802d2ca:	681b      	ldr	r3, [r3, #0]
 802d2cc:	4a20      	ldr	r2, [pc, #128]	; (802d350 <HAL_DMA_IRQHandler+0x6b0>)
 802d2ce:	4293      	cmp	r3, r2
 802d2d0:	d022      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2d2:	687b      	ldr	r3, [r7, #4]
 802d2d4:	681b      	ldr	r3, [r3, #0]
 802d2d6:	4a1f      	ldr	r2, [pc, #124]	; (802d354 <HAL_DMA_IRQHandler+0x6b4>)
 802d2d8:	4293      	cmp	r3, r2
 802d2da:	d01d      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2dc:	687b      	ldr	r3, [r7, #4]
 802d2de:	681b      	ldr	r3, [r3, #0]
 802d2e0:	4a1d      	ldr	r2, [pc, #116]	; (802d358 <HAL_DMA_IRQHandler+0x6b8>)
 802d2e2:	4293      	cmp	r3, r2
 802d2e4:	d018      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2e6:	687b      	ldr	r3, [r7, #4]
 802d2e8:	681b      	ldr	r3, [r3, #0]
 802d2ea:	4a1c      	ldr	r2, [pc, #112]	; (802d35c <HAL_DMA_IRQHandler+0x6bc>)
 802d2ec:	4293      	cmp	r3, r2
 802d2ee:	d013      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2f0:	687b      	ldr	r3, [r7, #4]
 802d2f2:	681b      	ldr	r3, [r3, #0]
 802d2f4:	4a1a      	ldr	r2, [pc, #104]	; (802d360 <HAL_DMA_IRQHandler+0x6c0>)
 802d2f6:	4293      	cmp	r3, r2
 802d2f8:	d00e      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d2fa:	687b      	ldr	r3, [r7, #4]
 802d2fc:	681b      	ldr	r3, [r3, #0]
 802d2fe:	4a19      	ldr	r2, [pc, #100]	; (802d364 <HAL_DMA_IRQHandler+0x6c4>)
 802d300:	4293      	cmp	r3, r2
 802d302:	d009      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d304:	687b      	ldr	r3, [r7, #4]
 802d306:	681b      	ldr	r3, [r3, #0]
 802d308:	4a17      	ldr	r2, [pc, #92]	; (802d368 <HAL_DMA_IRQHandler+0x6c8>)
 802d30a:	4293      	cmp	r3, r2
 802d30c:	d004      	beq.n	802d318 <HAL_DMA_IRQHandler+0x678>
 802d30e:	687b      	ldr	r3, [r7, #4]
 802d310:	681b      	ldr	r3, [r3, #0]
 802d312:	4a16      	ldr	r2, [pc, #88]	; (802d36c <HAL_DMA_IRQHandler+0x6cc>)
 802d314:	4293      	cmp	r3, r2
 802d316:	d12b      	bne.n	802d370 <HAL_DMA_IRQHandler+0x6d0>
 802d318:	687b      	ldr	r3, [r7, #4]
 802d31a:	681b      	ldr	r3, [r3, #0]
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	f003 0310 	and.w	r3, r3, #16
 802d322:	2b00      	cmp	r3, #0
 802d324:	bf14      	ite	ne
 802d326:	2301      	movne	r3, #1
 802d328:	2300      	moveq	r3, #0
 802d32a:	b2db      	uxtb	r3, r3
 802d32c:	e02a      	b.n	802d384 <HAL_DMA_IRQHandler+0x6e4>
 802d32e:	bf00      	nop
 802d330:	40020010 	.word	0x40020010
 802d334:	40020028 	.word	0x40020028
 802d338:	40020040 	.word	0x40020040
 802d33c:	40020058 	.word	0x40020058
 802d340:	40020070 	.word	0x40020070
 802d344:	40020088 	.word	0x40020088
 802d348:	400200a0 	.word	0x400200a0
 802d34c:	400200b8 	.word	0x400200b8
 802d350:	40020410 	.word	0x40020410
 802d354:	40020428 	.word	0x40020428
 802d358:	40020440 	.word	0x40020440
 802d35c:	40020458 	.word	0x40020458
 802d360:	40020470 	.word	0x40020470
 802d364:	40020488 	.word	0x40020488
 802d368:	400204a0 	.word	0x400204a0
 802d36c:	400204b8 	.word	0x400204b8
 802d370:	687b      	ldr	r3, [r7, #4]
 802d372:	681b      	ldr	r3, [r3, #0]
 802d374:	681b      	ldr	r3, [r3, #0]
 802d376:	f003 0302 	and.w	r3, r3, #2
 802d37a:	2b00      	cmp	r3, #0
 802d37c:	bf14      	ite	ne
 802d37e:	2301      	movne	r3, #1
 802d380:	2300      	moveq	r3, #0
 802d382:	b2db      	uxtb	r3, r3
 802d384:	2b00      	cmp	r3, #0
 802d386:	f000 8087 	beq.w	802d498 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d38a:	687b      	ldr	r3, [r7, #4]
 802d38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d38e:	f003 031f 	and.w	r3, r3, #31
 802d392:	2220      	movs	r2, #32
 802d394:	409a      	lsls	r2, r3
 802d396:	6a3b      	ldr	r3, [r7, #32]
 802d398:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802d39a:	687b      	ldr	r3, [r7, #4]
 802d39c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d3a0:	b2db      	uxtb	r3, r3
 802d3a2:	2b04      	cmp	r3, #4
 802d3a4:	d139      	bne.n	802d41a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802d3a6:	687b      	ldr	r3, [r7, #4]
 802d3a8:	681b      	ldr	r3, [r3, #0]
 802d3aa:	681a      	ldr	r2, [r3, #0]
 802d3ac:	687b      	ldr	r3, [r7, #4]
 802d3ae:	681b      	ldr	r3, [r3, #0]
 802d3b0:	f022 0216 	bic.w	r2, r2, #22
 802d3b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d3b6:	687b      	ldr	r3, [r7, #4]
 802d3b8:	681b      	ldr	r3, [r3, #0]
 802d3ba:	695a      	ldr	r2, [r3, #20]
 802d3bc:	687b      	ldr	r3, [r7, #4]
 802d3be:	681b      	ldr	r3, [r3, #0]
 802d3c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d3c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d3c6:	687b      	ldr	r3, [r7, #4]
 802d3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d3ca:	2b00      	cmp	r3, #0
 802d3cc:	d103      	bne.n	802d3d6 <HAL_DMA_IRQHandler+0x736>
 802d3ce:	687b      	ldr	r3, [r7, #4]
 802d3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d3d2:	2b00      	cmp	r3, #0
 802d3d4:	d007      	beq.n	802d3e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d3d6:	687b      	ldr	r3, [r7, #4]
 802d3d8:	681b      	ldr	r3, [r3, #0]
 802d3da:	681a      	ldr	r2, [r3, #0]
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	681b      	ldr	r3, [r3, #0]
 802d3e0:	f022 0208 	bic.w	r2, r2, #8
 802d3e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d3e6:	687b      	ldr	r3, [r7, #4]
 802d3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d3ea:	f003 031f 	and.w	r3, r3, #31
 802d3ee:	223f      	movs	r2, #63	; 0x3f
 802d3f0:	409a      	lsls	r2, r3
 802d3f2:	6a3b      	ldr	r3, [r7, #32]
 802d3f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d3f6:	687b      	ldr	r3, [r7, #4]
 802d3f8:	2201      	movs	r2, #1
 802d3fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d3fe:	687b      	ldr	r3, [r7, #4]
 802d400:	2200      	movs	r2, #0
 802d402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802d406:	687b      	ldr	r3, [r7, #4]
 802d408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d40a:	2b00      	cmp	r3, #0
 802d40c:	f000 834a 	beq.w	802daa4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802d410:	687b      	ldr	r3, [r7, #4]
 802d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d414:	6878      	ldr	r0, [r7, #4]
 802d416:	4798      	blx	r3
          }
          return;
 802d418:	e344      	b.n	802daa4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d41a:	687b      	ldr	r3, [r7, #4]
 802d41c:	681b      	ldr	r3, [r3, #0]
 802d41e:	681b      	ldr	r3, [r3, #0]
 802d420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d424:	2b00      	cmp	r3, #0
 802d426:	d018      	beq.n	802d45a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d428:	687b      	ldr	r3, [r7, #4]
 802d42a:	681b      	ldr	r3, [r3, #0]
 802d42c:	681b      	ldr	r3, [r3, #0]
 802d42e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d432:	2b00      	cmp	r3, #0
 802d434:	d108      	bne.n	802d448 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802d436:	687b      	ldr	r3, [r7, #4]
 802d438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d43a:	2b00      	cmp	r3, #0
 802d43c:	d02c      	beq.n	802d498 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802d43e:	687b      	ldr	r3, [r7, #4]
 802d440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d442:	6878      	ldr	r0, [r7, #4]
 802d444:	4798      	blx	r3
 802d446:	e027      	b.n	802d498 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802d448:	687b      	ldr	r3, [r7, #4]
 802d44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d44c:	2b00      	cmp	r3, #0
 802d44e:	d023      	beq.n	802d498 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802d450:	687b      	ldr	r3, [r7, #4]
 802d452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d454:	6878      	ldr	r0, [r7, #4]
 802d456:	4798      	blx	r3
 802d458:	e01e      	b.n	802d498 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d45a:	687b      	ldr	r3, [r7, #4]
 802d45c:	681b      	ldr	r3, [r3, #0]
 802d45e:	681b      	ldr	r3, [r3, #0]
 802d460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d464:	2b00      	cmp	r3, #0
 802d466:	d10f      	bne.n	802d488 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802d468:	687b      	ldr	r3, [r7, #4]
 802d46a:	681b      	ldr	r3, [r3, #0]
 802d46c:	681a      	ldr	r2, [r3, #0]
 802d46e:	687b      	ldr	r3, [r7, #4]
 802d470:	681b      	ldr	r3, [r3, #0]
 802d472:	f022 0210 	bic.w	r2, r2, #16
 802d476:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802d478:	687b      	ldr	r3, [r7, #4]
 802d47a:	2201      	movs	r2, #1
 802d47c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802d480:	687b      	ldr	r3, [r7, #4]
 802d482:	2200      	movs	r2, #0
 802d484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802d488:	687b      	ldr	r3, [r7, #4]
 802d48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d48c:	2b00      	cmp	r3, #0
 802d48e:	d003      	beq.n	802d498 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802d490:	687b      	ldr	r3, [r7, #4]
 802d492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d494:	6878      	ldr	r0, [r7, #4]
 802d496:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802d498:	687b      	ldr	r3, [r7, #4]
 802d49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d49c:	2b00      	cmp	r3, #0
 802d49e:	f000 8306 	beq.w	802daae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802d4a2:	687b      	ldr	r3, [r7, #4]
 802d4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d4a6:	f003 0301 	and.w	r3, r3, #1
 802d4aa:	2b00      	cmp	r3, #0
 802d4ac:	f000 8088 	beq.w	802d5c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802d4b0:	687b      	ldr	r3, [r7, #4]
 802d4b2:	2204      	movs	r2, #4
 802d4b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802d4b8:	687b      	ldr	r3, [r7, #4]
 802d4ba:	681b      	ldr	r3, [r3, #0]
 802d4bc:	4a7a      	ldr	r2, [pc, #488]	; (802d6a8 <HAL_DMA_IRQHandler+0xa08>)
 802d4be:	4293      	cmp	r3, r2
 802d4c0:	d04a      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4c2:	687b      	ldr	r3, [r7, #4]
 802d4c4:	681b      	ldr	r3, [r3, #0]
 802d4c6:	4a79      	ldr	r2, [pc, #484]	; (802d6ac <HAL_DMA_IRQHandler+0xa0c>)
 802d4c8:	4293      	cmp	r3, r2
 802d4ca:	d045      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4cc:	687b      	ldr	r3, [r7, #4]
 802d4ce:	681b      	ldr	r3, [r3, #0]
 802d4d0:	4a77      	ldr	r2, [pc, #476]	; (802d6b0 <HAL_DMA_IRQHandler+0xa10>)
 802d4d2:	4293      	cmp	r3, r2
 802d4d4:	d040      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4d6:	687b      	ldr	r3, [r7, #4]
 802d4d8:	681b      	ldr	r3, [r3, #0]
 802d4da:	4a76      	ldr	r2, [pc, #472]	; (802d6b4 <HAL_DMA_IRQHandler+0xa14>)
 802d4dc:	4293      	cmp	r3, r2
 802d4de:	d03b      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4e0:	687b      	ldr	r3, [r7, #4]
 802d4e2:	681b      	ldr	r3, [r3, #0]
 802d4e4:	4a74      	ldr	r2, [pc, #464]	; (802d6b8 <HAL_DMA_IRQHandler+0xa18>)
 802d4e6:	4293      	cmp	r3, r2
 802d4e8:	d036      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4ea:	687b      	ldr	r3, [r7, #4]
 802d4ec:	681b      	ldr	r3, [r3, #0]
 802d4ee:	4a73      	ldr	r2, [pc, #460]	; (802d6bc <HAL_DMA_IRQHandler+0xa1c>)
 802d4f0:	4293      	cmp	r3, r2
 802d4f2:	d031      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4f4:	687b      	ldr	r3, [r7, #4]
 802d4f6:	681b      	ldr	r3, [r3, #0]
 802d4f8:	4a71      	ldr	r2, [pc, #452]	; (802d6c0 <HAL_DMA_IRQHandler+0xa20>)
 802d4fa:	4293      	cmp	r3, r2
 802d4fc:	d02c      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d4fe:	687b      	ldr	r3, [r7, #4]
 802d500:	681b      	ldr	r3, [r3, #0]
 802d502:	4a70      	ldr	r2, [pc, #448]	; (802d6c4 <HAL_DMA_IRQHandler+0xa24>)
 802d504:	4293      	cmp	r3, r2
 802d506:	d027      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d508:	687b      	ldr	r3, [r7, #4]
 802d50a:	681b      	ldr	r3, [r3, #0]
 802d50c:	4a6e      	ldr	r2, [pc, #440]	; (802d6c8 <HAL_DMA_IRQHandler+0xa28>)
 802d50e:	4293      	cmp	r3, r2
 802d510:	d022      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d512:	687b      	ldr	r3, [r7, #4]
 802d514:	681b      	ldr	r3, [r3, #0]
 802d516:	4a6d      	ldr	r2, [pc, #436]	; (802d6cc <HAL_DMA_IRQHandler+0xa2c>)
 802d518:	4293      	cmp	r3, r2
 802d51a:	d01d      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d51c:	687b      	ldr	r3, [r7, #4]
 802d51e:	681b      	ldr	r3, [r3, #0]
 802d520:	4a6b      	ldr	r2, [pc, #428]	; (802d6d0 <HAL_DMA_IRQHandler+0xa30>)
 802d522:	4293      	cmp	r3, r2
 802d524:	d018      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d526:	687b      	ldr	r3, [r7, #4]
 802d528:	681b      	ldr	r3, [r3, #0]
 802d52a:	4a6a      	ldr	r2, [pc, #424]	; (802d6d4 <HAL_DMA_IRQHandler+0xa34>)
 802d52c:	4293      	cmp	r3, r2
 802d52e:	d013      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d530:	687b      	ldr	r3, [r7, #4]
 802d532:	681b      	ldr	r3, [r3, #0]
 802d534:	4a68      	ldr	r2, [pc, #416]	; (802d6d8 <HAL_DMA_IRQHandler+0xa38>)
 802d536:	4293      	cmp	r3, r2
 802d538:	d00e      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d53a:	687b      	ldr	r3, [r7, #4]
 802d53c:	681b      	ldr	r3, [r3, #0]
 802d53e:	4a67      	ldr	r2, [pc, #412]	; (802d6dc <HAL_DMA_IRQHandler+0xa3c>)
 802d540:	4293      	cmp	r3, r2
 802d542:	d009      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d544:	687b      	ldr	r3, [r7, #4]
 802d546:	681b      	ldr	r3, [r3, #0]
 802d548:	4a65      	ldr	r2, [pc, #404]	; (802d6e0 <HAL_DMA_IRQHandler+0xa40>)
 802d54a:	4293      	cmp	r3, r2
 802d54c:	d004      	beq.n	802d558 <HAL_DMA_IRQHandler+0x8b8>
 802d54e:	687b      	ldr	r3, [r7, #4]
 802d550:	681b      	ldr	r3, [r3, #0]
 802d552:	4a64      	ldr	r2, [pc, #400]	; (802d6e4 <HAL_DMA_IRQHandler+0xa44>)
 802d554:	4293      	cmp	r3, r2
 802d556:	d108      	bne.n	802d56a <HAL_DMA_IRQHandler+0x8ca>
 802d558:	687b      	ldr	r3, [r7, #4]
 802d55a:	681b      	ldr	r3, [r3, #0]
 802d55c:	681a      	ldr	r2, [r3, #0]
 802d55e:	687b      	ldr	r3, [r7, #4]
 802d560:	681b      	ldr	r3, [r3, #0]
 802d562:	f022 0201 	bic.w	r2, r2, #1
 802d566:	601a      	str	r2, [r3, #0]
 802d568:	e007      	b.n	802d57a <HAL_DMA_IRQHandler+0x8da>
 802d56a:	687b      	ldr	r3, [r7, #4]
 802d56c:	681b      	ldr	r3, [r3, #0]
 802d56e:	681a      	ldr	r2, [r3, #0]
 802d570:	687b      	ldr	r3, [r7, #4]
 802d572:	681b      	ldr	r3, [r3, #0]
 802d574:	f022 0201 	bic.w	r2, r2, #1
 802d578:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802d57a:	68fb      	ldr	r3, [r7, #12]
 802d57c:	3301      	adds	r3, #1
 802d57e:	60fb      	str	r3, [r7, #12]
 802d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d582:	429a      	cmp	r2, r3
 802d584:	d307      	bcc.n	802d596 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802d586:	687b      	ldr	r3, [r7, #4]
 802d588:	681b      	ldr	r3, [r3, #0]
 802d58a:	681b      	ldr	r3, [r3, #0]
 802d58c:	f003 0301 	and.w	r3, r3, #1
 802d590:	2b00      	cmp	r3, #0
 802d592:	d1f2      	bne.n	802d57a <HAL_DMA_IRQHandler+0x8da>
 802d594:	e000      	b.n	802d598 <HAL_DMA_IRQHandler+0x8f8>
            break;
 802d596:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802d598:	687b      	ldr	r3, [r7, #4]
 802d59a:	681b      	ldr	r3, [r3, #0]
 802d59c:	681b      	ldr	r3, [r3, #0]
 802d59e:	f003 0301 	and.w	r3, r3, #1
 802d5a2:	2b00      	cmp	r3, #0
 802d5a4:	d004      	beq.n	802d5b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802d5a6:	687b      	ldr	r3, [r7, #4]
 802d5a8:	2203      	movs	r2, #3
 802d5aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802d5ae:	e003      	b.n	802d5b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802d5b0:	687b      	ldr	r3, [r7, #4]
 802d5b2:	2201      	movs	r2, #1
 802d5b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802d5b8:	687b      	ldr	r3, [r7, #4]
 802d5ba:	2200      	movs	r2, #0
 802d5bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802d5c0:	687b      	ldr	r3, [r7, #4]
 802d5c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d5c4:	2b00      	cmp	r3, #0
 802d5c6:	f000 8272 	beq.w	802daae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d5ca:	687b      	ldr	r3, [r7, #4]
 802d5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d5ce:	6878      	ldr	r0, [r7, #4]
 802d5d0:	4798      	blx	r3
 802d5d2:	e26c      	b.n	802daae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802d5d4:	687b      	ldr	r3, [r7, #4]
 802d5d6:	681b      	ldr	r3, [r3, #0]
 802d5d8:	4a43      	ldr	r2, [pc, #268]	; (802d6e8 <HAL_DMA_IRQHandler+0xa48>)
 802d5da:	4293      	cmp	r3, r2
 802d5dc:	d022      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d5de:	687b      	ldr	r3, [r7, #4]
 802d5e0:	681b      	ldr	r3, [r3, #0]
 802d5e2:	4a42      	ldr	r2, [pc, #264]	; (802d6ec <HAL_DMA_IRQHandler+0xa4c>)
 802d5e4:	4293      	cmp	r3, r2
 802d5e6:	d01d      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d5e8:	687b      	ldr	r3, [r7, #4]
 802d5ea:	681b      	ldr	r3, [r3, #0]
 802d5ec:	4a40      	ldr	r2, [pc, #256]	; (802d6f0 <HAL_DMA_IRQHandler+0xa50>)
 802d5ee:	4293      	cmp	r3, r2
 802d5f0:	d018      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d5f2:	687b      	ldr	r3, [r7, #4]
 802d5f4:	681b      	ldr	r3, [r3, #0]
 802d5f6:	4a3f      	ldr	r2, [pc, #252]	; (802d6f4 <HAL_DMA_IRQHandler+0xa54>)
 802d5f8:	4293      	cmp	r3, r2
 802d5fa:	d013      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d5fc:	687b      	ldr	r3, [r7, #4]
 802d5fe:	681b      	ldr	r3, [r3, #0]
 802d600:	4a3d      	ldr	r2, [pc, #244]	; (802d6f8 <HAL_DMA_IRQHandler+0xa58>)
 802d602:	4293      	cmp	r3, r2
 802d604:	d00e      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d606:	687b      	ldr	r3, [r7, #4]
 802d608:	681b      	ldr	r3, [r3, #0]
 802d60a:	4a3c      	ldr	r2, [pc, #240]	; (802d6fc <HAL_DMA_IRQHandler+0xa5c>)
 802d60c:	4293      	cmp	r3, r2
 802d60e:	d009      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d610:	687b      	ldr	r3, [r7, #4]
 802d612:	681b      	ldr	r3, [r3, #0]
 802d614:	4a3a      	ldr	r2, [pc, #232]	; (802d700 <HAL_DMA_IRQHandler+0xa60>)
 802d616:	4293      	cmp	r3, r2
 802d618:	d004      	beq.n	802d624 <HAL_DMA_IRQHandler+0x984>
 802d61a:	687b      	ldr	r3, [r7, #4]
 802d61c:	681b      	ldr	r3, [r3, #0]
 802d61e:	4a39      	ldr	r2, [pc, #228]	; (802d704 <HAL_DMA_IRQHandler+0xa64>)
 802d620:	4293      	cmp	r3, r2
 802d622:	d101      	bne.n	802d628 <HAL_DMA_IRQHandler+0x988>
 802d624:	2301      	movs	r3, #1
 802d626:	e000      	b.n	802d62a <HAL_DMA_IRQHandler+0x98a>
 802d628:	2300      	movs	r3, #0
 802d62a:	2b00      	cmp	r3, #0
 802d62c:	f000 823f 	beq.w	802daae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	681b      	ldr	r3, [r3, #0]
 802d634:	681b      	ldr	r3, [r3, #0]
 802d636:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802d638:	687b      	ldr	r3, [r7, #4]
 802d63a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d63c:	f003 031f 	and.w	r3, r3, #31
 802d640:	2204      	movs	r2, #4
 802d642:	409a      	lsls	r2, r3
 802d644:	697b      	ldr	r3, [r7, #20]
 802d646:	4013      	ands	r3, r2
 802d648:	2b00      	cmp	r3, #0
 802d64a:	f000 80cd 	beq.w	802d7e8 <HAL_DMA_IRQHandler+0xb48>
 802d64e:	693b      	ldr	r3, [r7, #16]
 802d650:	f003 0304 	and.w	r3, r3, #4
 802d654:	2b00      	cmp	r3, #0
 802d656:	f000 80c7 	beq.w	802d7e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802d65a:	687b      	ldr	r3, [r7, #4]
 802d65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d65e:	f003 031f 	and.w	r3, r3, #31
 802d662:	2204      	movs	r2, #4
 802d664:	409a      	lsls	r2, r3
 802d666:	69fb      	ldr	r3, [r7, #28]
 802d668:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d66a:	693b      	ldr	r3, [r7, #16]
 802d66c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d670:	2b00      	cmp	r3, #0
 802d672:	d049      	beq.n	802d708 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d674:	693b      	ldr	r3, [r7, #16]
 802d676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d67a:	2b00      	cmp	r3, #0
 802d67c:	d109      	bne.n	802d692 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802d67e:	687b      	ldr	r3, [r7, #4]
 802d680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d682:	2b00      	cmp	r3, #0
 802d684:	f000 8210 	beq.w	802daa8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802d688:	687b      	ldr	r3, [r7, #4]
 802d68a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d68c:	6878      	ldr	r0, [r7, #4]
 802d68e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d690:	e20a      	b.n	802daa8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802d692:	687b      	ldr	r3, [r7, #4]
 802d694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d696:	2b00      	cmp	r3, #0
 802d698:	f000 8206 	beq.w	802daa8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802d69c:	687b      	ldr	r3, [r7, #4]
 802d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d6a0:	6878      	ldr	r0, [r7, #4]
 802d6a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6a4:	e200      	b.n	802daa8 <HAL_DMA_IRQHandler+0xe08>
 802d6a6:	bf00      	nop
 802d6a8:	40020010 	.word	0x40020010
 802d6ac:	40020028 	.word	0x40020028
 802d6b0:	40020040 	.word	0x40020040
 802d6b4:	40020058 	.word	0x40020058
 802d6b8:	40020070 	.word	0x40020070
 802d6bc:	40020088 	.word	0x40020088
 802d6c0:	400200a0 	.word	0x400200a0
 802d6c4:	400200b8 	.word	0x400200b8
 802d6c8:	40020410 	.word	0x40020410
 802d6cc:	40020428 	.word	0x40020428
 802d6d0:	40020440 	.word	0x40020440
 802d6d4:	40020458 	.word	0x40020458
 802d6d8:	40020470 	.word	0x40020470
 802d6dc:	40020488 	.word	0x40020488
 802d6e0:	400204a0 	.word	0x400204a0
 802d6e4:	400204b8 	.word	0x400204b8
 802d6e8:	58025408 	.word	0x58025408
 802d6ec:	5802541c 	.word	0x5802541c
 802d6f0:	58025430 	.word	0x58025430
 802d6f4:	58025444 	.word	0x58025444
 802d6f8:	58025458 	.word	0x58025458
 802d6fc:	5802546c 	.word	0x5802546c
 802d700:	58025480 	.word	0x58025480
 802d704:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d708:	693b      	ldr	r3, [r7, #16]
 802d70a:	f003 0320 	and.w	r3, r3, #32
 802d70e:	2b00      	cmp	r3, #0
 802d710:	d160      	bne.n	802d7d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802d712:	687b      	ldr	r3, [r7, #4]
 802d714:	681b      	ldr	r3, [r3, #0]
 802d716:	4a7f      	ldr	r2, [pc, #508]	; (802d914 <HAL_DMA_IRQHandler+0xc74>)
 802d718:	4293      	cmp	r3, r2
 802d71a:	d04a      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d71c:	687b      	ldr	r3, [r7, #4]
 802d71e:	681b      	ldr	r3, [r3, #0]
 802d720:	4a7d      	ldr	r2, [pc, #500]	; (802d918 <HAL_DMA_IRQHandler+0xc78>)
 802d722:	4293      	cmp	r3, r2
 802d724:	d045      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d726:	687b      	ldr	r3, [r7, #4]
 802d728:	681b      	ldr	r3, [r3, #0]
 802d72a:	4a7c      	ldr	r2, [pc, #496]	; (802d91c <HAL_DMA_IRQHandler+0xc7c>)
 802d72c:	4293      	cmp	r3, r2
 802d72e:	d040      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d730:	687b      	ldr	r3, [r7, #4]
 802d732:	681b      	ldr	r3, [r3, #0]
 802d734:	4a7a      	ldr	r2, [pc, #488]	; (802d920 <HAL_DMA_IRQHandler+0xc80>)
 802d736:	4293      	cmp	r3, r2
 802d738:	d03b      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d73a:	687b      	ldr	r3, [r7, #4]
 802d73c:	681b      	ldr	r3, [r3, #0]
 802d73e:	4a79      	ldr	r2, [pc, #484]	; (802d924 <HAL_DMA_IRQHandler+0xc84>)
 802d740:	4293      	cmp	r3, r2
 802d742:	d036      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d744:	687b      	ldr	r3, [r7, #4]
 802d746:	681b      	ldr	r3, [r3, #0]
 802d748:	4a77      	ldr	r2, [pc, #476]	; (802d928 <HAL_DMA_IRQHandler+0xc88>)
 802d74a:	4293      	cmp	r3, r2
 802d74c:	d031      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d74e:	687b      	ldr	r3, [r7, #4]
 802d750:	681b      	ldr	r3, [r3, #0]
 802d752:	4a76      	ldr	r2, [pc, #472]	; (802d92c <HAL_DMA_IRQHandler+0xc8c>)
 802d754:	4293      	cmp	r3, r2
 802d756:	d02c      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	681b      	ldr	r3, [r3, #0]
 802d75c:	4a74      	ldr	r2, [pc, #464]	; (802d930 <HAL_DMA_IRQHandler+0xc90>)
 802d75e:	4293      	cmp	r3, r2
 802d760:	d027      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d762:	687b      	ldr	r3, [r7, #4]
 802d764:	681b      	ldr	r3, [r3, #0]
 802d766:	4a73      	ldr	r2, [pc, #460]	; (802d934 <HAL_DMA_IRQHandler+0xc94>)
 802d768:	4293      	cmp	r3, r2
 802d76a:	d022      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d76c:	687b      	ldr	r3, [r7, #4]
 802d76e:	681b      	ldr	r3, [r3, #0]
 802d770:	4a71      	ldr	r2, [pc, #452]	; (802d938 <HAL_DMA_IRQHandler+0xc98>)
 802d772:	4293      	cmp	r3, r2
 802d774:	d01d      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d776:	687b      	ldr	r3, [r7, #4]
 802d778:	681b      	ldr	r3, [r3, #0]
 802d77a:	4a70      	ldr	r2, [pc, #448]	; (802d93c <HAL_DMA_IRQHandler+0xc9c>)
 802d77c:	4293      	cmp	r3, r2
 802d77e:	d018      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d780:	687b      	ldr	r3, [r7, #4]
 802d782:	681b      	ldr	r3, [r3, #0]
 802d784:	4a6e      	ldr	r2, [pc, #440]	; (802d940 <HAL_DMA_IRQHandler+0xca0>)
 802d786:	4293      	cmp	r3, r2
 802d788:	d013      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d78a:	687b      	ldr	r3, [r7, #4]
 802d78c:	681b      	ldr	r3, [r3, #0]
 802d78e:	4a6d      	ldr	r2, [pc, #436]	; (802d944 <HAL_DMA_IRQHandler+0xca4>)
 802d790:	4293      	cmp	r3, r2
 802d792:	d00e      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d794:	687b      	ldr	r3, [r7, #4]
 802d796:	681b      	ldr	r3, [r3, #0]
 802d798:	4a6b      	ldr	r2, [pc, #428]	; (802d948 <HAL_DMA_IRQHandler+0xca8>)
 802d79a:	4293      	cmp	r3, r2
 802d79c:	d009      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d79e:	687b      	ldr	r3, [r7, #4]
 802d7a0:	681b      	ldr	r3, [r3, #0]
 802d7a2:	4a6a      	ldr	r2, [pc, #424]	; (802d94c <HAL_DMA_IRQHandler+0xcac>)
 802d7a4:	4293      	cmp	r3, r2
 802d7a6:	d004      	beq.n	802d7b2 <HAL_DMA_IRQHandler+0xb12>
 802d7a8:	687b      	ldr	r3, [r7, #4]
 802d7aa:	681b      	ldr	r3, [r3, #0]
 802d7ac:	4a68      	ldr	r2, [pc, #416]	; (802d950 <HAL_DMA_IRQHandler+0xcb0>)
 802d7ae:	4293      	cmp	r3, r2
 802d7b0:	d108      	bne.n	802d7c4 <HAL_DMA_IRQHandler+0xb24>
 802d7b2:	687b      	ldr	r3, [r7, #4]
 802d7b4:	681b      	ldr	r3, [r3, #0]
 802d7b6:	681a      	ldr	r2, [r3, #0]
 802d7b8:	687b      	ldr	r3, [r7, #4]
 802d7ba:	681b      	ldr	r3, [r3, #0]
 802d7bc:	f022 0208 	bic.w	r2, r2, #8
 802d7c0:	601a      	str	r2, [r3, #0]
 802d7c2:	e007      	b.n	802d7d4 <HAL_DMA_IRQHandler+0xb34>
 802d7c4:	687b      	ldr	r3, [r7, #4]
 802d7c6:	681b      	ldr	r3, [r3, #0]
 802d7c8:	681a      	ldr	r2, [r3, #0]
 802d7ca:	687b      	ldr	r3, [r7, #4]
 802d7cc:	681b      	ldr	r3, [r3, #0]
 802d7ce:	f022 0204 	bic.w	r2, r2, #4
 802d7d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802d7d4:	687b      	ldr	r3, [r7, #4]
 802d7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7d8:	2b00      	cmp	r3, #0
 802d7da:	f000 8165 	beq.w	802daa8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802d7de:	687b      	ldr	r3, [r7, #4]
 802d7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7e2:	6878      	ldr	r0, [r7, #4]
 802d7e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d7e6:	e15f      	b.n	802daa8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802d7e8:	687b      	ldr	r3, [r7, #4]
 802d7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d7ec:	f003 031f 	and.w	r3, r3, #31
 802d7f0:	2202      	movs	r2, #2
 802d7f2:	409a      	lsls	r2, r3
 802d7f4:	697b      	ldr	r3, [r7, #20]
 802d7f6:	4013      	ands	r3, r2
 802d7f8:	2b00      	cmp	r3, #0
 802d7fa:	f000 80c5 	beq.w	802d988 <HAL_DMA_IRQHandler+0xce8>
 802d7fe:	693b      	ldr	r3, [r7, #16]
 802d800:	f003 0302 	and.w	r3, r3, #2
 802d804:	2b00      	cmp	r3, #0
 802d806:	f000 80bf 	beq.w	802d988 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802d80a:	687b      	ldr	r3, [r7, #4]
 802d80c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d80e:	f003 031f 	and.w	r3, r3, #31
 802d812:	2202      	movs	r2, #2
 802d814:	409a      	lsls	r2, r3
 802d816:	69fb      	ldr	r3, [r7, #28]
 802d818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d81a:	693b      	ldr	r3, [r7, #16]
 802d81c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d820:	2b00      	cmp	r3, #0
 802d822:	d018      	beq.n	802d856 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d824:	693b      	ldr	r3, [r7, #16]
 802d826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d82a:	2b00      	cmp	r3, #0
 802d82c:	d109      	bne.n	802d842 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802d82e:	687b      	ldr	r3, [r7, #4]
 802d830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d832:	2b00      	cmp	r3, #0
 802d834:	f000 813a 	beq.w	802daac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802d838:	687b      	ldr	r3, [r7, #4]
 802d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d83c:	6878      	ldr	r0, [r7, #4]
 802d83e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d840:	e134      	b.n	802daac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802d842:	687b      	ldr	r3, [r7, #4]
 802d844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d846:	2b00      	cmp	r3, #0
 802d848:	f000 8130 	beq.w	802daac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802d84c:	687b      	ldr	r3, [r7, #4]
 802d84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d850:	6878      	ldr	r0, [r7, #4]
 802d852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d854:	e12a      	b.n	802daac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d856:	693b      	ldr	r3, [r7, #16]
 802d858:	f003 0320 	and.w	r3, r3, #32
 802d85c:	2b00      	cmp	r3, #0
 802d85e:	f040 8089 	bne.w	802d974 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802d862:	687b      	ldr	r3, [r7, #4]
 802d864:	681b      	ldr	r3, [r3, #0]
 802d866:	4a2b      	ldr	r2, [pc, #172]	; (802d914 <HAL_DMA_IRQHandler+0xc74>)
 802d868:	4293      	cmp	r3, r2
 802d86a:	d04a      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d86c:	687b      	ldr	r3, [r7, #4]
 802d86e:	681b      	ldr	r3, [r3, #0]
 802d870:	4a29      	ldr	r2, [pc, #164]	; (802d918 <HAL_DMA_IRQHandler+0xc78>)
 802d872:	4293      	cmp	r3, r2
 802d874:	d045      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d876:	687b      	ldr	r3, [r7, #4]
 802d878:	681b      	ldr	r3, [r3, #0]
 802d87a:	4a28      	ldr	r2, [pc, #160]	; (802d91c <HAL_DMA_IRQHandler+0xc7c>)
 802d87c:	4293      	cmp	r3, r2
 802d87e:	d040      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d880:	687b      	ldr	r3, [r7, #4]
 802d882:	681b      	ldr	r3, [r3, #0]
 802d884:	4a26      	ldr	r2, [pc, #152]	; (802d920 <HAL_DMA_IRQHandler+0xc80>)
 802d886:	4293      	cmp	r3, r2
 802d888:	d03b      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d88a:	687b      	ldr	r3, [r7, #4]
 802d88c:	681b      	ldr	r3, [r3, #0]
 802d88e:	4a25      	ldr	r2, [pc, #148]	; (802d924 <HAL_DMA_IRQHandler+0xc84>)
 802d890:	4293      	cmp	r3, r2
 802d892:	d036      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d894:	687b      	ldr	r3, [r7, #4]
 802d896:	681b      	ldr	r3, [r3, #0]
 802d898:	4a23      	ldr	r2, [pc, #140]	; (802d928 <HAL_DMA_IRQHandler+0xc88>)
 802d89a:	4293      	cmp	r3, r2
 802d89c:	d031      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d89e:	687b      	ldr	r3, [r7, #4]
 802d8a0:	681b      	ldr	r3, [r3, #0]
 802d8a2:	4a22      	ldr	r2, [pc, #136]	; (802d92c <HAL_DMA_IRQHandler+0xc8c>)
 802d8a4:	4293      	cmp	r3, r2
 802d8a6:	d02c      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8a8:	687b      	ldr	r3, [r7, #4]
 802d8aa:	681b      	ldr	r3, [r3, #0]
 802d8ac:	4a20      	ldr	r2, [pc, #128]	; (802d930 <HAL_DMA_IRQHandler+0xc90>)
 802d8ae:	4293      	cmp	r3, r2
 802d8b0:	d027      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8b2:	687b      	ldr	r3, [r7, #4]
 802d8b4:	681b      	ldr	r3, [r3, #0]
 802d8b6:	4a1f      	ldr	r2, [pc, #124]	; (802d934 <HAL_DMA_IRQHandler+0xc94>)
 802d8b8:	4293      	cmp	r3, r2
 802d8ba:	d022      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8bc:	687b      	ldr	r3, [r7, #4]
 802d8be:	681b      	ldr	r3, [r3, #0]
 802d8c0:	4a1d      	ldr	r2, [pc, #116]	; (802d938 <HAL_DMA_IRQHandler+0xc98>)
 802d8c2:	4293      	cmp	r3, r2
 802d8c4:	d01d      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8c6:	687b      	ldr	r3, [r7, #4]
 802d8c8:	681b      	ldr	r3, [r3, #0]
 802d8ca:	4a1c      	ldr	r2, [pc, #112]	; (802d93c <HAL_DMA_IRQHandler+0xc9c>)
 802d8cc:	4293      	cmp	r3, r2
 802d8ce:	d018      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8d0:	687b      	ldr	r3, [r7, #4]
 802d8d2:	681b      	ldr	r3, [r3, #0]
 802d8d4:	4a1a      	ldr	r2, [pc, #104]	; (802d940 <HAL_DMA_IRQHandler+0xca0>)
 802d8d6:	4293      	cmp	r3, r2
 802d8d8:	d013      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8da:	687b      	ldr	r3, [r7, #4]
 802d8dc:	681b      	ldr	r3, [r3, #0]
 802d8de:	4a19      	ldr	r2, [pc, #100]	; (802d944 <HAL_DMA_IRQHandler+0xca4>)
 802d8e0:	4293      	cmp	r3, r2
 802d8e2:	d00e      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8e4:	687b      	ldr	r3, [r7, #4]
 802d8e6:	681b      	ldr	r3, [r3, #0]
 802d8e8:	4a17      	ldr	r2, [pc, #92]	; (802d948 <HAL_DMA_IRQHandler+0xca8>)
 802d8ea:	4293      	cmp	r3, r2
 802d8ec:	d009      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8ee:	687b      	ldr	r3, [r7, #4]
 802d8f0:	681b      	ldr	r3, [r3, #0]
 802d8f2:	4a16      	ldr	r2, [pc, #88]	; (802d94c <HAL_DMA_IRQHandler+0xcac>)
 802d8f4:	4293      	cmp	r3, r2
 802d8f6:	d004      	beq.n	802d902 <HAL_DMA_IRQHandler+0xc62>
 802d8f8:	687b      	ldr	r3, [r7, #4]
 802d8fa:	681b      	ldr	r3, [r3, #0]
 802d8fc:	4a14      	ldr	r2, [pc, #80]	; (802d950 <HAL_DMA_IRQHandler+0xcb0>)
 802d8fe:	4293      	cmp	r3, r2
 802d900:	d128      	bne.n	802d954 <HAL_DMA_IRQHandler+0xcb4>
 802d902:	687b      	ldr	r3, [r7, #4]
 802d904:	681b      	ldr	r3, [r3, #0]
 802d906:	681a      	ldr	r2, [r3, #0]
 802d908:	687b      	ldr	r3, [r7, #4]
 802d90a:	681b      	ldr	r3, [r3, #0]
 802d90c:	f022 0214 	bic.w	r2, r2, #20
 802d910:	601a      	str	r2, [r3, #0]
 802d912:	e027      	b.n	802d964 <HAL_DMA_IRQHandler+0xcc4>
 802d914:	40020010 	.word	0x40020010
 802d918:	40020028 	.word	0x40020028
 802d91c:	40020040 	.word	0x40020040
 802d920:	40020058 	.word	0x40020058
 802d924:	40020070 	.word	0x40020070
 802d928:	40020088 	.word	0x40020088
 802d92c:	400200a0 	.word	0x400200a0
 802d930:	400200b8 	.word	0x400200b8
 802d934:	40020410 	.word	0x40020410
 802d938:	40020428 	.word	0x40020428
 802d93c:	40020440 	.word	0x40020440
 802d940:	40020458 	.word	0x40020458
 802d944:	40020470 	.word	0x40020470
 802d948:	40020488 	.word	0x40020488
 802d94c:	400204a0 	.word	0x400204a0
 802d950:	400204b8 	.word	0x400204b8
 802d954:	687b      	ldr	r3, [r7, #4]
 802d956:	681b      	ldr	r3, [r3, #0]
 802d958:	681a      	ldr	r2, [r3, #0]
 802d95a:	687b      	ldr	r3, [r7, #4]
 802d95c:	681b      	ldr	r3, [r3, #0]
 802d95e:	f022 020a 	bic.w	r2, r2, #10
 802d962:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d964:	687b      	ldr	r3, [r7, #4]
 802d966:	2201      	movs	r2, #1
 802d968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d96c:	687b      	ldr	r3, [r7, #4]
 802d96e:	2200      	movs	r2, #0
 802d970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802d974:	687b      	ldr	r3, [r7, #4]
 802d976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d978:	2b00      	cmp	r3, #0
 802d97a:	f000 8097 	beq.w	802daac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802d97e:	687b      	ldr	r3, [r7, #4]
 802d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d982:	6878      	ldr	r0, [r7, #4]
 802d984:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d986:	e091      	b.n	802daac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802d988:	687b      	ldr	r3, [r7, #4]
 802d98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d98c:	f003 031f 	and.w	r3, r3, #31
 802d990:	2208      	movs	r2, #8
 802d992:	409a      	lsls	r2, r3
 802d994:	697b      	ldr	r3, [r7, #20]
 802d996:	4013      	ands	r3, r2
 802d998:	2b00      	cmp	r3, #0
 802d99a:	f000 8088 	beq.w	802daae <HAL_DMA_IRQHandler+0xe0e>
 802d99e:	693b      	ldr	r3, [r7, #16]
 802d9a0:	f003 0308 	and.w	r3, r3, #8
 802d9a4:	2b00      	cmp	r3, #0
 802d9a6:	f000 8082 	beq.w	802daae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802d9aa:	687b      	ldr	r3, [r7, #4]
 802d9ac:	681b      	ldr	r3, [r3, #0]
 802d9ae:	4a41      	ldr	r2, [pc, #260]	; (802dab4 <HAL_DMA_IRQHandler+0xe14>)
 802d9b0:	4293      	cmp	r3, r2
 802d9b2:	d04a      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9b4:	687b      	ldr	r3, [r7, #4]
 802d9b6:	681b      	ldr	r3, [r3, #0]
 802d9b8:	4a3f      	ldr	r2, [pc, #252]	; (802dab8 <HAL_DMA_IRQHandler+0xe18>)
 802d9ba:	4293      	cmp	r3, r2
 802d9bc:	d045      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9be:	687b      	ldr	r3, [r7, #4]
 802d9c0:	681b      	ldr	r3, [r3, #0]
 802d9c2:	4a3e      	ldr	r2, [pc, #248]	; (802dabc <HAL_DMA_IRQHandler+0xe1c>)
 802d9c4:	4293      	cmp	r3, r2
 802d9c6:	d040      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9c8:	687b      	ldr	r3, [r7, #4]
 802d9ca:	681b      	ldr	r3, [r3, #0]
 802d9cc:	4a3c      	ldr	r2, [pc, #240]	; (802dac0 <HAL_DMA_IRQHandler+0xe20>)
 802d9ce:	4293      	cmp	r3, r2
 802d9d0:	d03b      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9d2:	687b      	ldr	r3, [r7, #4]
 802d9d4:	681b      	ldr	r3, [r3, #0]
 802d9d6:	4a3b      	ldr	r2, [pc, #236]	; (802dac4 <HAL_DMA_IRQHandler+0xe24>)
 802d9d8:	4293      	cmp	r3, r2
 802d9da:	d036      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9dc:	687b      	ldr	r3, [r7, #4]
 802d9de:	681b      	ldr	r3, [r3, #0]
 802d9e0:	4a39      	ldr	r2, [pc, #228]	; (802dac8 <HAL_DMA_IRQHandler+0xe28>)
 802d9e2:	4293      	cmp	r3, r2
 802d9e4:	d031      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9e6:	687b      	ldr	r3, [r7, #4]
 802d9e8:	681b      	ldr	r3, [r3, #0]
 802d9ea:	4a38      	ldr	r2, [pc, #224]	; (802dacc <HAL_DMA_IRQHandler+0xe2c>)
 802d9ec:	4293      	cmp	r3, r2
 802d9ee:	d02c      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9f0:	687b      	ldr	r3, [r7, #4]
 802d9f2:	681b      	ldr	r3, [r3, #0]
 802d9f4:	4a36      	ldr	r2, [pc, #216]	; (802dad0 <HAL_DMA_IRQHandler+0xe30>)
 802d9f6:	4293      	cmp	r3, r2
 802d9f8:	d027      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802d9fa:	687b      	ldr	r3, [r7, #4]
 802d9fc:	681b      	ldr	r3, [r3, #0]
 802d9fe:	4a35      	ldr	r2, [pc, #212]	; (802dad4 <HAL_DMA_IRQHandler+0xe34>)
 802da00:	4293      	cmp	r3, r2
 802da02:	d022      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da04:	687b      	ldr	r3, [r7, #4]
 802da06:	681b      	ldr	r3, [r3, #0]
 802da08:	4a33      	ldr	r2, [pc, #204]	; (802dad8 <HAL_DMA_IRQHandler+0xe38>)
 802da0a:	4293      	cmp	r3, r2
 802da0c:	d01d      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da0e:	687b      	ldr	r3, [r7, #4]
 802da10:	681b      	ldr	r3, [r3, #0]
 802da12:	4a32      	ldr	r2, [pc, #200]	; (802dadc <HAL_DMA_IRQHandler+0xe3c>)
 802da14:	4293      	cmp	r3, r2
 802da16:	d018      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da18:	687b      	ldr	r3, [r7, #4]
 802da1a:	681b      	ldr	r3, [r3, #0]
 802da1c:	4a30      	ldr	r2, [pc, #192]	; (802dae0 <HAL_DMA_IRQHandler+0xe40>)
 802da1e:	4293      	cmp	r3, r2
 802da20:	d013      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da22:	687b      	ldr	r3, [r7, #4]
 802da24:	681b      	ldr	r3, [r3, #0]
 802da26:	4a2f      	ldr	r2, [pc, #188]	; (802dae4 <HAL_DMA_IRQHandler+0xe44>)
 802da28:	4293      	cmp	r3, r2
 802da2a:	d00e      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da2c:	687b      	ldr	r3, [r7, #4]
 802da2e:	681b      	ldr	r3, [r3, #0]
 802da30:	4a2d      	ldr	r2, [pc, #180]	; (802dae8 <HAL_DMA_IRQHandler+0xe48>)
 802da32:	4293      	cmp	r3, r2
 802da34:	d009      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da36:	687b      	ldr	r3, [r7, #4]
 802da38:	681b      	ldr	r3, [r3, #0]
 802da3a:	4a2c      	ldr	r2, [pc, #176]	; (802daec <HAL_DMA_IRQHandler+0xe4c>)
 802da3c:	4293      	cmp	r3, r2
 802da3e:	d004      	beq.n	802da4a <HAL_DMA_IRQHandler+0xdaa>
 802da40:	687b      	ldr	r3, [r7, #4]
 802da42:	681b      	ldr	r3, [r3, #0]
 802da44:	4a2a      	ldr	r2, [pc, #168]	; (802daf0 <HAL_DMA_IRQHandler+0xe50>)
 802da46:	4293      	cmp	r3, r2
 802da48:	d108      	bne.n	802da5c <HAL_DMA_IRQHandler+0xdbc>
 802da4a:	687b      	ldr	r3, [r7, #4]
 802da4c:	681b      	ldr	r3, [r3, #0]
 802da4e:	681a      	ldr	r2, [r3, #0]
 802da50:	687b      	ldr	r3, [r7, #4]
 802da52:	681b      	ldr	r3, [r3, #0]
 802da54:	f022 021c 	bic.w	r2, r2, #28
 802da58:	601a      	str	r2, [r3, #0]
 802da5a:	e007      	b.n	802da6c <HAL_DMA_IRQHandler+0xdcc>
 802da5c:	687b      	ldr	r3, [r7, #4]
 802da5e:	681b      	ldr	r3, [r3, #0]
 802da60:	681a      	ldr	r2, [r3, #0]
 802da62:	687b      	ldr	r3, [r7, #4]
 802da64:	681b      	ldr	r3, [r3, #0]
 802da66:	f022 020e 	bic.w	r2, r2, #14
 802da6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802da6c:	687b      	ldr	r3, [r7, #4]
 802da6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802da70:	f003 031f 	and.w	r3, r3, #31
 802da74:	2201      	movs	r2, #1
 802da76:	409a      	lsls	r2, r3
 802da78:	69fb      	ldr	r3, [r7, #28]
 802da7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802da7c:	687b      	ldr	r3, [r7, #4]
 802da7e:	2201      	movs	r2, #1
 802da80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802da82:	687b      	ldr	r3, [r7, #4]
 802da84:	2201      	movs	r2, #1
 802da86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802da8a:	687b      	ldr	r3, [r7, #4]
 802da8c:	2200      	movs	r2, #0
 802da8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802da92:	687b      	ldr	r3, [r7, #4]
 802da94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802da96:	2b00      	cmp	r3, #0
 802da98:	d009      	beq.n	802daae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802da9a:	687b      	ldr	r3, [r7, #4]
 802da9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802da9e:	6878      	ldr	r0, [r7, #4]
 802daa0:	4798      	blx	r3
 802daa2:	e004      	b.n	802daae <HAL_DMA_IRQHandler+0xe0e>
          return;
 802daa4:	bf00      	nop
 802daa6:	e002      	b.n	802daae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802daa8:	bf00      	nop
 802daaa:	e000      	b.n	802daae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802daac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802daae:	3728      	adds	r7, #40	; 0x28
 802dab0:	46bd      	mov	sp, r7
 802dab2:	bd80      	pop	{r7, pc}
 802dab4:	40020010 	.word	0x40020010
 802dab8:	40020028 	.word	0x40020028
 802dabc:	40020040 	.word	0x40020040
 802dac0:	40020058 	.word	0x40020058
 802dac4:	40020070 	.word	0x40020070
 802dac8:	40020088 	.word	0x40020088
 802dacc:	400200a0 	.word	0x400200a0
 802dad0:	400200b8 	.word	0x400200b8
 802dad4:	40020410 	.word	0x40020410
 802dad8:	40020428 	.word	0x40020428
 802dadc:	40020440 	.word	0x40020440
 802dae0:	40020458 	.word	0x40020458
 802dae4:	40020470 	.word	0x40020470
 802dae8:	40020488 	.word	0x40020488
 802daec:	400204a0 	.word	0x400204a0
 802daf0:	400204b8 	.word	0x400204b8

0802daf4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802daf4:	b480      	push	{r7}
 802daf6:	b083      	sub	sp, #12
 802daf8:	af00      	add	r7, sp, #0
 802dafa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802dafc:	687b      	ldr	r3, [r7, #4]
 802dafe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802db02:	b2db      	uxtb	r3, r3
}
 802db04:	4618      	mov	r0, r3
 802db06:	370c      	adds	r7, #12
 802db08:	46bd      	mov	sp, r7
 802db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db0e:	4770      	bx	lr

0802db10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802db10:	b480      	push	{r7}
 802db12:	b083      	sub	sp, #12
 802db14:	af00      	add	r7, sp, #0
 802db16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802db18:	687b      	ldr	r3, [r7, #4]
 802db1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802db1c:	4618      	mov	r0, r3
 802db1e:	370c      	adds	r7, #12
 802db20:	46bd      	mov	sp, r7
 802db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db26:	4770      	bx	lr

0802db28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802db28:	b480      	push	{r7}
 802db2a:	b087      	sub	sp, #28
 802db2c:	af00      	add	r7, sp, #0
 802db2e:	60f8      	str	r0, [r7, #12]
 802db30:	60b9      	str	r1, [r7, #8]
 802db32:	607a      	str	r2, [r7, #4]
 802db34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802db36:	68fb      	ldr	r3, [r7, #12]
 802db38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802db3c:	68fb      	ldr	r3, [r7, #12]
 802db3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802db42:	68fb      	ldr	r3, [r7, #12]
 802db44:	681b      	ldr	r3, [r3, #0]
 802db46:	4a7f      	ldr	r2, [pc, #508]	; (802dd44 <DMA_SetConfig+0x21c>)
 802db48:	4293      	cmp	r3, r2
 802db4a:	d072      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db4c:	68fb      	ldr	r3, [r7, #12]
 802db4e:	681b      	ldr	r3, [r3, #0]
 802db50:	4a7d      	ldr	r2, [pc, #500]	; (802dd48 <DMA_SetConfig+0x220>)
 802db52:	4293      	cmp	r3, r2
 802db54:	d06d      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db56:	68fb      	ldr	r3, [r7, #12]
 802db58:	681b      	ldr	r3, [r3, #0]
 802db5a:	4a7c      	ldr	r2, [pc, #496]	; (802dd4c <DMA_SetConfig+0x224>)
 802db5c:	4293      	cmp	r3, r2
 802db5e:	d068      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db60:	68fb      	ldr	r3, [r7, #12]
 802db62:	681b      	ldr	r3, [r3, #0]
 802db64:	4a7a      	ldr	r2, [pc, #488]	; (802dd50 <DMA_SetConfig+0x228>)
 802db66:	4293      	cmp	r3, r2
 802db68:	d063      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db6a:	68fb      	ldr	r3, [r7, #12]
 802db6c:	681b      	ldr	r3, [r3, #0]
 802db6e:	4a79      	ldr	r2, [pc, #484]	; (802dd54 <DMA_SetConfig+0x22c>)
 802db70:	4293      	cmp	r3, r2
 802db72:	d05e      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db74:	68fb      	ldr	r3, [r7, #12]
 802db76:	681b      	ldr	r3, [r3, #0]
 802db78:	4a77      	ldr	r2, [pc, #476]	; (802dd58 <DMA_SetConfig+0x230>)
 802db7a:	4293      	cmp	r3, r2
 802db7c:	d059      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db7e:	68fb      	ldr	r3, [r7, #12]
 802db80:	681b      	ldr	r3, [r3, #0]
 802db82:	4a76      	ldr	r2, [pc, #472]	; (802dd5c <DMA_SetConfig+0x234>)
 802db84:	4293      	cmp	r3, r2
 802db86:	d054      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db88:	68fb      	ldr	r3, [r7, #12]
 802db8a:	681b      	ldr	r3, [r3, #0]
 802db8c:	4a74      	ldr	r2, [pc, #464]	; (802dd60 <DMA_SetConfig+0x238>)
 802db8e:	4293      	cmp	r3, r2
 802db90:	d04f      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db92:	68fb      	ldr	r3, [r7, #12]
 802db94:	681b      	ldr	r3, [r3, #0]
 802db96:	4a73      	ldr	r2, [pc, #460]	; (802dd64 <DMA_SetConfig+0x23c>)
 802db98:	4293      	cmp	r3, r2
 802db9a:	d04a      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802db9c:	68fb      	ldr	r3, [r7, #12]
 802db9e:	681b      	ldr	r3, [r3, #0]
 802dba0:	4a71      	ldr	r2, [pc, #452]	; (802dd68 <DMA_SetConfig+0x240>)
 802dba2:	4293      	cmp	r3, r2
 802dba4:	d045      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dba6:	68fb      	ldr	r3, [r7, #12]
 802dba8:	681b      	ldr	r3, [r3, #0]
 802dbaa:	4a70      	ldr	r2, [pc, #448]	; (802dd6c <DMA_SetConfig+0x244>)
 802dbac:	4293      	cmp	r3, r2
 802dbae:	d040      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbb0:	68fb      	ldr	r3, [r7, #12]
 802dbb2:	681b      	ldr	r3, [r3, #0]
 802dbb4:	4a6e      	ldr	r2, [pc, #440]	; (802dd70 <DMA_SetConfig+0x248>)
 802dbb6:	4293      	cmp	r3, r2
 802dbb8:	d03b      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbba:	68fb      	ldr	r3, [r7, #12]
 802dbbc:	681b      	ldr	r3, [r3, #0]
 802dbbe:	4a6d      	ldr	r2, [pc, #436]	; (802dd74 <DMA_SetConfig+0x24c>)
 802dbc0:	4293      	cmp	r3, r2
 802dbc2:	d036      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbc4:	68fb      	ldr	r3, [r7, #12]
 802dbc6:	681b      	ldr	r3, [r3, #0]
 802dbc8:	4a6b      	ldr	r2, [pc, #428]	; (802dd78 <DMA_SetConfig+0x250>)
 802dbca:	4293      	cmp	r3, r2
 802dbcc:	d031      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbce:	68fb      	ldr	r3, [r7, #12]
 802dbd0:	681b      	ldr	r3, [r3, #0]
 802dbd2:	4a6a      	ldr	r2, [pc, #424]	; (802dd7c <DMA_SetConfig+0x254>)
 802dbd4:	4293      	cmp	r3, r2
 802dbd6:	d02c      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbd8:	68fb      	ldr	r3, [r7, #12]
 802dbda:	681b      	ldr	r3, [r3, #0]
 802dbdc:	4a68      	ldr	r2, [pc, #416]	; (802dd80 <DMA_SetConfig+0x258>)
 802dbde:	4293      	cmp	r3, r2
 802dbe0:	d027      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbe2:	68fb      	ldr	r3, [r7, #12]
 802dbe4:	681b      	ldr	r3, [r3, #0]
 802dbe6:	4a67      	ldr	r2, [pc, #412]	; (802dd84 <DMA_SetConfig+0x25c>)
 802dbe8:	4293      	cmp	r3, r2
 802dbea:	d022      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbec:	68fb      	ldr	r3, [r7, #12]
 802dbee:	681b      	ldr	r3, [r3, #0]
 802dbf0:	4a65      	ldr	r2, [pc, #404]	; (802dd88 <DMA_SetConfig+0x260>)
 802dbf2:	4293      	cmp	r3, r2
 802dbf4:	d01d      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dbf6:	68fb      	ldr	r3, [r7, #12]
 802dbf8:	681b      	ldr	r3, [r3, #0]
 802dbfa:	4a64      	ldr	r2, [pc, #400]	; (802dd8c <DMA_SetConfig+0x264>)
 802dbfc:	4293      	cmp	r3, r2
 802dbfe:	d018      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dc00:	68fb      	ldr	r3, [r7, #12]
 802dc02:	681b      	ldr	r3, [r3, #0]
 802dc04:	4a62      	ldr	r2, [pc, #392]	; (802dd90 <DMA_SetConfig+0x268>)
 802dc06:	4293      	cmp	r3, r2
 802dc08:	d013      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dc0a:	68fb      	ldr	r3, [r7, #12]
 802dc0c:	681b      	ldr	r3, [r3, #0]
 802dc0e:	4a61      	ldr	r2, [pc, #388]	; (802dd94 <DMA_SetConfig+0x26c>)
 802dc10:	4293      	cmp	r3, r2
 802dc12:	d00e      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dc14:	68fb      	ldr	r3, [r7, #12]
 802dc16:	681b      	ldr	r3, [r3, #0]
 802dc18:	4a5f      	ldr	r2, [pc, #380]	; (802dd98 <DMA_SetConfig+0x270>)
 802dc1a:	4293      	cmp	r3, r2
 802dc1c:	d009      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dc1e:	68fb      	ldr	r3, [r7, #12]
 802dc20:	681b      	ldr	r3, [r3, #0]
 802dc22:	4a5e      	ldr	r2, [pc, #376]	; (802dd9c <DMA_SetConfig+0x274>)
 802dc24:	4293      	cmp	r3, r2
 802dc26:	d004      	beq.n	802dc32 <DMA_SetConfig+0x10a>
 802dc28:	68fb      	ldr	r3, [r7, #12]
 802dc2a:	681b      	ldr	r3, [r3, #0]
 802dc2c:	4a5c      	ldr	r2, [pc, #368]	; (802dda0 <DMA_SetConfig+0x278>)
 802dc2e:	4293      	cmp	r3, r2
 802dc30:	d101      	bne.n	802dc36 <DMA_SetConfig+0x10e>
 802dc32:	2301      	movs	r3, #1
 802dc34:	e000      	b.n	802dc38 <DMA_SetConfig+0x110>
 802dc36:	2300      	movs	r3, #0
 802dc38:	2b00      	cmp	r3, #0
 802dc3a:	d00d      	beq.n	802dc58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802dc3c:	68fb      	ldr	r3, [r7, #12]
 802dc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dc40:	68fa      	ldr	r2, [r7, #12]
 802dc42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802dc44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802dc46:	68fb      	ldr	r3, [r7, #12]
 802dc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dc4a:	2b00      	cmp	r3, #0
 802dc4c:	d004      	beq.n	802dc58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dc4e:	68fb      	ldr	r3, [r7, #12]
 802dc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc52:	68fa      	ldr	r2, [r7, #12]
 802dc54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802dc56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dc58:	68fb      	ldr	r3, [r7, #12]
 802dc5a:	681b      	ldr	r3, [r3, #0]
 802dc5c:	4a39      	ldr	r2, [pc, #228]	; (802dd44 <DMA_SetConfig+0x21c>)
 802dc5e:	4293      	cmp	r3, r2
 802dc60:	d04a      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc62:	68fb      	ldr	r3, [r7, #12]
 802dc64:	681b      	ldr	r3, [r3, #0]
 802dc66:	4a38      	ldr	r2, [pc, #224]	; (802dd48 <DMA_SetConfig+0x220>)
 802dc68:	4293      	cmp	r3, r2
 802dc6a:	d045      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc6c:	68fb      	ldr	r3, [r7, #12]
 802dc6e:	681b      	ldr	r3, [r3, #0]
 802dc70:	4a36      	ldr	r2, [pc, #216]	; (802dd4c <DMA_SetConfig+0x224>)
 802dc72:	4293      	cmp	r3, r2
 802dc74:	d040      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc76:	68fb      	ldr	r3, [r7, #12]
 802dc78:	681b      	ldr	r3, [r3, #0]
 802dc7a:	4a35      	ldr	r2, [pc, #212]	; (802dd50 <DMA_SetConfig+0x228>)
 802dc7c:	4293      	cmp	r3, r2
 802dc7e:	d03b      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc80:	68fb      	ldr	r3, [r7, #12]
 802dc82:	681b      	ldr	r3, [r3, #0]
 802dc84:	4a33      	ldr	r2, [pc, #204]	; (802dd54 <DMA_SetConfig+0x22c>)
 802dc86:	4293      	cmp	r3, r2
 802dc88:	d036      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc8a:	68fb      	ldr	r3, [r7, #12]
 802dc8c:	681b      	ldr	r3, [r3, #0]
 802dc8e:	4a32      	ldr	r2, [pc, #200]	; (802dd58 <DMA_SetConfig+0x230>)
 802dc90:	4293      	cmp	r3, r2
 802dc92:	d031      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc94:	68fb      	ldr	r3, [r7, #12]
 802dc96:	681b      	ldr	r3, [r3, #0]
 802dc98:	4a30      	ldr	r2, [pc, #192]	; (802dd5c <DMA_SetConfig+0x234>)
 802dc9a:	4293      	cmp	r3, r2
 802dc9c:	d02c      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dc9e:	68fb      	ldr	r3, [r7, #12]
 802dca0:	681b      	ldr	r3, [r3, #0]
 802dca2:	4a2f      	ldr	r2, [pc, #188]	; (802dd60 <DMA_SetConfig+0x238>)
 802dca4:	4293      	cmp	r3, r2
 802dca6:	d027      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dca8:	68fb      	ldr	r3, [r7, #12]
 802dcaa:	681b      	ldr	r3, [r3, #0]
 802dcac:	4a2d      	ldr	r2, [pc, #180]	; (802dd64 <DMA_SetConfig+0x23c>)
 802dcae:	4293      	cmp	r3, r2
 802dcb0:	d022      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcb2:	68fb      	ldr	r3, [r7, #12]
 802dcb4:	681b      	ldr	r3, [r3, #0]
 802dcb6:	4a2c      	ldr	r2, [pc, #176]	; (802dd68 <DMA_SetConfig+0x240>)
 802dcb8:	4293      	cmp	r3, r2
 802dcba:	d01d      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcbc:	68fb      	ldr	r3, [r7, #12]
 802dcbe:	681b      	ldr	r3, [r3, #0]
 802dcc0:	4a2a      	ldr	r2, [pc, #168]	; (802dd6c <DMA_SetConfig+0x244>)
 802dcc2:	4293      	cmp	r3, r2
 802dcc4:	d018      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcc6:	68fb      	ldr	r3, [r7, #12]
 802dcc8:	681b      	ldr	r3, [r3, #0]
 802dcca:	4a29      	ldr	r2, [pc, #164]	; (802dd70 <DMA_SetConfig+0x248>)
 802dccc:	4293      	cmp	r3, r2
 802dcce:	d013      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcd0:	68fb      	ldr	r3, [r7, #12]
 802dcd2:	681b      	ldr	r3, [r3, #0]
 802dcd4:	4a27      	ldr	r2, [pc, #156]	; (802dd74 <DMA_SetConfig+0x24c>)
 802dcd6:	4293      	cmp	r3, r2
 802dcd8:	d00e      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcda:	68fb      	ldr	r3, [r7, #12]
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	4a26      	ldr	r2, [pc, #152]	; (802dd78 <DMA_SetConfig+0x250>)
 802dce0:	4293      	cmp	r3, r2
 802dce2:	d009      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dce4:	68fb      	ldr	r3, [r7, #12]
 802dce6:	681b      	ldr	r3, [r3, #0]
 802dce8:	4a24      	ldr	r2, [pc, #144]	; (802dd7c <DMA_SetConfig+0x254>)
 802dcea:	4293      	cmp	r3, r2
 802dcec:	d004      	beq.n	802dcf8 <DMA_SetConfig+0x1d0>
 802dcee:	68fb      	ldr	r3, [r7, #12]
 802dcf0:	681b      	ldr	r3, [r3, #0]
 802dcf2:	4a23      	ldr	r2, [pc, #140]	; (802dd80 <DMA_SetConfig+0x258>)
 802dcf4:	4293      	cmp	r3, r2
 802dcf6:	d101      	bne.n	802dcfc <DMA_SetConfig+0x1d4>
 802dcf8:	2301      	movs	r3, #1
 802dcfa:	e000      	b.n	802dcfe <DMA_SetConfig+0x1d6>
 802dcfc:	2300      	movs	r3, #0
 802dcfe:	2b00      	cmp	r3, #0
 802dd00:	d059      	beq.n	802ddb6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dd02:	68fb      	ldr	r3, [r7, #12]
 802dd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dd06:	f003 031f 	and.w	r3, r3, #31
 802dd0a:	223f      	movs	r2, #63	; 0x3f
 802dd0c:	409a      	lsls	r2, r3
 802dd0e:	697b      	ldr	r3, [r7, #20]
 802dd10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802dd12:	68fb      	ldr	r3, [r7, #12]
 802dd14:	681b      	ldr	r3, [r3, #0]
 802dd16:	681a      	ldr	r2, [r3, #0]
 802dd18:	68fb      	ldr	r3, [r7, #12]
 802dd1a:	681b      	ldr	r3, [r3, #0]
 802dd1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802dd20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802dd22:	68fb      	ldr	r3, [r7, #12]
 802dd24:	681b      	ldr	r3, [r3, #0]
 802dd26:	683a      	ldr	r2, [r7, #0]
 802dd28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dd2a:	68fb      	ldr	r3, [r7, #12]
 802dd2c:	689b      	ldr	r3, [r3, #8]
 802dd2e:	2b40      	cmp	r3, #64	; 0x40
 802dd30:	d138      	bne.n	802dda4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802dd32:	68fb      	ldr	r3, [r7, #12]
 802dd34:	681b      	ldr	r3, [r3, #0]
 802dd36:	687a      	ldr	r2, [r7, #4]
 802dd38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802dd3a:	68fb      	ldr	r3, [r7, #12]
 802dd3c:	681b      	ldr	r3, [r3, #0]
 802dd3e:	68ba      	ldr	r2, [r7, #8]
 802dd40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802dd42:	e086      	b.n	802de52 <DMA_SetConfig+0x32a>
 802dd44:	40020010 	.word	0x40020010
 802dd48:	40020028 	.word	0x40020028
 802dd4c:	40020040 	.word	0x40020040
 802dd50:	40020058 	.word	0x40020058
 802dd54:	40020070 	.word	0x40020070
 802dd58:	40020088 	.word	0x40020088
 802dd5c:	400200a0 	.word	0x400200a0
 802dd60:	400200b8 	.word	0x400200b8
 802dd64:	40020410 	.word	0x40020410
 802dd68:	40020428 	.word	0x40020428
 802dd6c:	40020440 	.word	0x40020440
 802dd70:	40020458 	.word	0x40020458
 802dd74:	40020470 	.word	0x40020470
 802dd78:	40020488 	.word	0x40020488
 802dd7c:	400204a0 	.word	0x400204a0
 802dd80:	400204b8 	.word	0x400204b8
 802dd84:	58025408 	.word	0x58025408
 802dd88:	5802541c 	.word	0x5802541c
 802dd8c:	58025430 	.word	0x58025430
 802dd90:	58025444 	.word	0x58025444
 802dd94:	58025458 	.word	0x58025458
 802dd98:	5802546c 	.word	0x5802546c
 802dd9c:	58025480 	.word	0x58025480
 802dda0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802dda4:	68fb      	ldr	r3, [r7, #12]
 802dda6:	681b      	ldr	r3, [r3, #0]
 802dda8:	68ba      	ldr	r2, [r7, #8]
 802ddaa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802ddac:	68fb      	ldr	r3, [r7, #12]
 802ddae:	681b      	ldr	r3, [r3, #0]
 802ddb0:	687a      	ldr	r2, [r7, #4]
 802ddb2:	60da      	str	r2, [r3, #12]
}
 802ddb4:	e04d      	b.n	802de52 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802ddb6:	68fb      	ldr	r3, [r7, #12]
 802ddb8:	681b      	ldr	r3, [r3, #0]
 802ddba:	4a29      	ldr	r2, [pc, #164]	; (802de60 <DMA_SetConfig+0x338>)
 802ddbc:	4293      	cmp	r3, r2
 802ddbe:	d022      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddc0:	68fb      	ldr	r3, [r7, #12]
 802ddc2:	681b      	ldr	r3, [r3, #0]
 802ddc4:	4a27      	ldr	r2, [pc, #156]	; (802de64 <DMA_SetConfig+0x33c>)
 802ddc6:	4293      	cmp	r3, r2
 802ddc8:	d01d      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddca:	68fb      	ldr	r3, [r7, #12]
 802ddcc:	681b      	ldr	r3, [r3, #0]
 802ddce:	4a26      	ldr	r2, [pc, #152]	; (802de68 <DMA_SetConfig+0x340>)
 802ddd0:	4293      	cmp	r3, r2
 802ddd2:	d018      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddd4:	68fb      	ldr	r3, [r7, #12]
 802ddd6:	681b      	ldr	r3, [r3, #0]
 802ddd8:	4a24      	ldr	r2, [pc, #144]	; (802de6c <DMA_SetConfig+0x344>)
 802ddda:	4293      	cmp	r3, r2
 802dddc:	d013      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddde:	68fb      	ldr	r3, [r7, #12]
 802dde0:	681b      	ldr	r3, [r3, #0]
 802dde2:	4a23      	ldr	r2, [pc, #140]	; (802de70 <DMA_SetConfig+0x348>)
 802dde4:	4293      	cmp	r3, r2
 802dde6:	d00e      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802dde8:	68fb      	ldr	r3, [r7, #12]
 802ddea:	681b      	ldr	r3, [r3, #0]
 802ddec:	4a21      	ldr	r2, [pc, #132]	; (802de74 <DMA_SetConfig+0x34c>)
 802ddee:	4293      	cmp	r3, r2
 802ddf0:	d009      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddf2:	68fb      	ldr	r3, [r7, #12]
 802ddf4:	681b      	ldr	r3, [r3, #0]
 802ddf6:	4a20      	ldr	r2, [pc, #128]	; (802de78 <DMA_SetConfig+0x350>)
 802ddf8:	4293      	cmp	r3, r2
 802ddfa:	d004      	beq.n	802de06 <DMA_SetConfig+0x2de>
 802ddfc:	68fb      	ldr	r3, [r7, #12]
 802ddfe:	681b      	ldr	r3, [r3, #0]
 802de00:	4a1e      	ldr	r2, [pc, #120]	; (802de7c <DMA_SetConfig+0x354>)
 802de02:	4293      	cmp	r3, r2
 802de04:	d101      	bne.n	802de0a <DMA_SetConfig+0x2e2>
 802de06:	2301      	movs	r3, #1
 802de08:	e000      	b.n	802de0c <DMA_SetConfig+0x2e4>
 802de0a:	2300      	movs	r3, #0
 802de0c:	2b00      	cmp	r3, #0
 802de0e:	d020      	beq.n	802de52 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802de10:	68fb      	ldr	r3, [r7, #12]
 802de12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802de14:	f003 031f 	and.w	r3, r3, #31
 802de18:	2201      	movs	r2, #1
 802de1a:	409a      	lsls	r2, r3
 802de1c:	693b      	ldr	r3, [r7, #16]
 802de1e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802de20:	68fb      	ldr	r3, [r7, #12]
 802de22:	681b      	ldr	r3, [r3, #0]
 802de24:	683a      	ldr	r2, [r7, #0]
 802de26:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802de28:	68fb      	ldr	r3, [r7, #12]
 802de2a:	689b      	ldr	r3, [r3, #8]
 802de2c:	2b40      	cmp	r3, #64	; 0x40
 802de2e:	d108      	bne.n	802de42 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802de30:	68fb      	ldr	r3, [r7, #12]
 802de32:	681b      	ldr	r3, [r3, #0]
 802de34:	687a      	ldr	r2, [r7, #4]
 802de36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802de38:	68fb      	ldr	r3, [r7, #12]
 802de3a:	681b      	ldr	r3, [r3, #0]
 802de3c:	68ba      	ldr	r2, [r7, #8]
 802de3e:	60da      	str	r2, [r3, #12]
}
 802de40:	e007      	b.n	802de52 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802de42:	68fb      	ldr	r3, [r7, #12]
 802de44:	681b      	ldr	r3, [r3, #0]
 802de46:	68ba      	ldr	r2, [r7, #8]
 802de48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802de4a:	68fb      	ldr	r3, [r7, #12]
 802de4c:	681b      	ldr	r3, [r3, #0]
 802de4e:	687a      	ldr	r2, [r7, #4]
 802de50:	60da      	str	r2, [r3, #12]
}
 802de52:	bf00      	nop
 802de54:	371c      	adds	r7, #28
 802de56:	46bd      	mov	sp, r7
 802de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de5c:	4770      	bx	lr
 802de5e:	bf00      	nop
 802de60:	58025408 	.word	0x58025408
 802de64:	5802541c 	.word	0x5802541c
 802de68:	58025430 	.word	0x58025430
 802de6c:	58025444 	.word	0x58025444
 802de70:	58025458 	.word	0x58025458
 802de74:	5802546c 	.word	0x5802546c
 802de78:	58025480 	.word	0x58025480
 802de7c:	58025494 	.word	0x58025494

0802de80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802de80:	b480      	push	{r7}
 802de82:	b085      	sub	sp, #20
 802de84:	af00      	add	r7, sp, #0
 802de86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802de88:	687b      	ldr	r3, [r7, #4]
 802de8a:	681b      	ldr	r3, [r3, #0]
 802de8c:	4a42      	ldr	r2, [pc, #264]	; (802df98 <DMA_CalcBaseAndBitshift+0x118>)
 802de8e:	4293      	cmp	r3, r2
 802de90:	d04a      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802de92:	687b      	ldr	r3, [r7, #4]
 802de94:	681b      	ldr	r3, [r3, #0]
 802de96:	4a41      	ldr	r2, [pc, #260]	; (802df9c <DMA_CalcBaseAndBitshift+0x11c>)
 802de98:	4293      	cmp	r3, r2
 802de9a:	d045      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802de9c:	687b      	ldr	r3, [r7, #4]
 802de9e:	681b      	ldr	r3, [r3, #0]
 802dea0:	4a3f      	ldr	r2, [pc, #252]	; (802dfa0 <DMA_CalcBaseAndBitshift+0x120>)
 802dea2:	4293      	cmp	r3, r2
 802dea4:	d040      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802dea6:	687b      	ldr	r3, [r7, #4]
 802dea8:	681b      	ldr	r3, [r3, #0]
 802deaa:	4a3e      	ldr	r2, [pc, #248]	; (802dfa4 <DMA_CalcBaseAndBitshift+0x124>)
 802deac:	4293      	cmp	r3, r2
 802deae:	d03b      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802deb0:	687b      	ldr	r3, [r7, #4]
 802deb2:	681b      	ldr	r3, [r3, #0]
 802deb4:	4a3c      	ldr	r2, [pc, #240]	; (802dfa8 <DMA_CalcBaseAndBitshift+0x128>)
 802deb6:	4293      	cmp	r3, r2
 802deb8:	d036      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802deba:	687b      	ldr	r3, [r7, #4]
 802debc:	681b      	ldr	r3, [r3, #0]
 802debe:	4a3b      	ldr	r2, [pc, #236]	; (802dfac <DMA_CalcBaseAndBitshift+0x12c>)
 802dec0:	4293      	cmp	r3, r2
 802dec2:	d031      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802dec4:	687b      	ldr	r3, [r7, #4]
 802dec6:	681b      	ldr	r3, [r3, #0]
 802dec8:	4a39      	ldr	r2, [pc, #228]	; (802dfb0 <DMA_CalcBaseAndBitshift+0x130>)
 802deca:	4293      	cmp	r3, r2
 802decc:	d02c      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802dece:	687b      	ldr	r3, [r7, #4]
 802ded0:	681b      	ldr	r3, [r3, #0]
 802ded2:	4a38      	ldr	r2, [pc, #224]	; (802dfb4 <DMA_CalcBaseAndBitshift+0x134>)
 802ded4:	4293      	cmp	r3, r2
 802ded6:	d027      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802ded8:	687b      	ldr	r3, [r7, #4]
 802deda:	681b      	ldr	r3, [r3, #0]
 802dedc:	4a36      	ldr	r2, [pc, #216]	; (802dfb8 <DMA_CalcBaseAndBitshift+0x138>)
 802dede:	4293      	cmp	r3, r2
 802dee0:	d022      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802dee2:	687b      	ldr	r3, [r7, #4]
 802dee4:	681b      	ldr	r3, [r3, #0]
 802dee6:	4a35      	ldr	r2, [pc, #212]	; (802dfbc <DMA_CalcBaseAndBitshift+0x13c>)
 802dee8:	4293      	cmp	r3, r2
 802deea:	d01d      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802deec:	687b      	ldr	r3, [r7, #4]
 802deee:	681b      	ldr	r3, [r3, #0]
 802def0:	4a33      	ldr	r2, [pc, #204]	; (802dfc0 <DMA_CalcBaseAndBitshift+0x140>)
 802def2:	4293      	cmp	r3, r2
 802def4:	d018      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802def6:	687b      	ldr	r3, [r7, #4]
 802def8:	681b      	ldr	r3, [r3, #0]
 802defa:	4a32      	ldr	r2, [pc, #200]	; (802dfc4 <DMA_CalcBaseAndBitshift+0x144>)
 802defc:	4293      	cmp	r3, r2
 802defe:	d013      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802df00:	687b      	ldr	r3, [r7, #4]
 802df02:	681b      	ldr	r3, [r3, #0]
 802df04:	4a30      	ldr	r2, [pc, #192]	; (802dfc8 <DMA_CalcBaseAndBitshift+0x148>)
 802df06:	4293      	cmp	r3, r2
 802df08:	d00e      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802df0a:	687b      	ldr	r3, [r7, #4]
 802df0c:	681b      	ldr	r3, [r3, #0]
 802df0e:	4a2f      	ldr	r2, [pc, #188]	; (802dfcc <DMA_CalcBaseAndBitshift+0x14c>)
 802df10:	4293      	cmp	r3, r2
 802df12:	d009      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802df14:	687b      	ldr	r3, [r7, #4]
 802df16:	681b      	ldr	r3, [r3, #0]
 802df18:	4a2d      	ldr	r2, [pc, #180]	; (802dfd0 <DMA_CalcBaseAndBitshift+0x150>)
 802df1a:	4293      	cmp	r3, r2
 802df1c:	d004      	beq.n	802df28 <DMA_CalcBaseAndBitshift+0xa8>
 802df1e:	687b      	ldr	r3, [r7, #4]
 802df20:	681b      	ldr	r3, [r3, #0]
 802df22:	4a2c      	ldr	r2, [pc, #176]	; (802dfd4 <DMA_CalcBaseAndBitshift+0x154>)
 802df24:	4293      	cmp	r3, r2
 802df26:	d101      	bne.n	802df2c <DMA_CalcBaseAndBitshift+0xac>
 802df28:	2301      	movs	r3, #1
 802df2a:	e000      	b.n	802df2e <DMA_CalcBaseAndBitshift+0xae>
 802df2c:	2300      	movs	r3, #0
 802df2e:	2b00      	cmp	r3, #0
 802df30:	d024      	beq.n	802df7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802df32:	687b      	ldr	r3, [r7, #4]
 802df34:	681b      	ldr	r3, [r3, #0]
 802df36:	b2db      	uxtb	r3, r3
 802df38:	3b10      	subs	r3, #16
 802df3a:	4a27      	ldr	r2, [pc, #156]	; (802dfd8 <DMA_CalcBaseAndBitshift+0x158>)
 802df3c:	fba2 2303 	umull	r2, r3, r2, r3
 802df40:	091b      	lsrs	r3, r3, #4
 802df42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802df44:	68fb      	ldr	r3, [r7, #12]
 802df46:	f003 0307 	and.w	r3, r3, #7
 802df4a:	4a24      	ldr	r2, [pc, #144]	; (802dfdc <DMA_CalcBaseAndBitshift+0x15c>)
 802df4c:	5cd3      	ldrb	r3, [r2, r3]
 802df4e:	461a      	mov	r2, r3
 802df50:	687b      	ldr	r3, [r7, #4]
 802df52:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802df54:	68fb      	ldr	r3, [r7, #12]
 802df56:	2b03      	cmp	r3, #3
 802df58:	d908      	bls.n	802df6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802df5a:	687b      	ldr	r3, [r7, #4]
 802df5c:	681b      	ldr	r3, [r3, #0]
 802df5e:	461a      	mov	r2, r3
 802df60:	4b1f      	ldr	r3, [pc, #124]	; (802dfe0 <DMA_CalcBaseAndBitshift+0x160>)
 802df62:	4013      	ands	r3, r2
 802df64:	1d1a      	adds	r2, r3, #4
 802df66:	687b      	ldr	r3, [r7, #4]
 802df68:	659a      	str	r2, [r3, #88]	; 0x58
 802df6a:	e00d      	b.n	802df88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802df6c:	687b      	ldr	r3, [r7, #4]
 802df6e:	681b      	ldr	r3, [r3, #0]
 802df70:	461a      	mov	r2, r3
 802df72:	4b1b      	ldr	r3, [pc, #108]	; (802dfe0 <DMA_CalcBaseAndBitshift+0x160>)
 802df74:	4013      	ands	r3, r2
 802df76:	687a      	ldr	r2, [r7, #4]
 802df78:	6593      	str	r3, [r2, #88]	; 0x58
 802df7a:	e005      	b.n	802df88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802df7c:	687b      	ldr	r3, [r7, #4]
 802df7e:	681b      	ldr	r3, [r3, #0]
 802df80:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802df84:	687b      	ldr	r3, [r7, #4]
 802df86:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802df88:	687b      	ldr	r3, [r7, #4]
 802df8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802df8c:	4618      	mov	r0, r3
 802df8e:	3714      	adds	r7, #20
 802df90:	46bd      	mov	sp, r7
 802df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df96:	4770      	bx	lr
 802df98:	40020010 	.word	0x40020010
 802df9c:	40020028 	.word	0x40020028
 802dfa0:	40020040 	.word	0x40020040
 802dfa4:	40020058 	.word	0x40020058
 802dfa8:	40020070 	.word	0x40020070
 802dfac:	40020088 	.word	0x40020088
 802dfb0:	400200a0 	.word	0x400200a0
 802dfb4:	400200b8 	.word	0x400200b8
 802dfb8:	40020410 	.word	0x40020410
 802dfbc:	40020428 	.word	0x40020428
 802dfc0:	40020440 	.word	0x40020440
 802dfc4:	40020458 	.word	0x40020458
 802dfc8:	40020470 	.word	0x40020470
 802dfcc:	40020488 	.word	0x40020488
 802dfd0:	400204a0 	.word	0x400204a0
 802dfd4:	400204b8 	.word	0x400204b8
 802dfd8:	aaaaaaab 	.word	0xaaaaaaab
 802dfdc:	08058518 	.word	0x08058518
 802dfe0:	fffffc00 	.word	0xfffffc00

0802dfe4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802dfe4:	b480      	push	{r7}
 802dfe6:	b085      	sub	sp, #20
 802dfe8:	af00      	add	r7, sp, #0
 802dfea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802dfec:	2300      	movs	r3, #0
 802dfee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802dff0:	687b      	ldr	r3, [r7, #4]
 802dff2:	699b      	ldr	r3, [r3, #24]
 802dff4:	2b00      	cmp	r3, #0
 802dff6:	d120      	bne.n	802e03a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802dff8:	687b      	ldr	r3, [r7, #4]
 802dffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dffc:	2b03      	cmp	r3, #3
 802dffe:	d858      	bhi.n	802e0b2 <DMA_CheckFifoParam+0xce>
 802e000:	a201      	add	r2, pc, #4	; (adr r2, 802e008 <DMA_CheckFifoParam+0x24>)
 802e002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e006:	bf00      	nop
 802e008:	0802e019 	.word	0x0802e019
 802e00c:	0802e02b 	.word	0x0802e02b
 802e010:	0802e019 	.word	0x0802e019
 802e014:	0802e0b3 	.word	0x0802e0b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e018:	687b      	ldr	r3, [r7, #4]
 802e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e020:	2b00      	cmp	r3, #0
 802e022:	d048      	beq.n	802e0b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802e024:	2301      	movs	r3, #1
 802e026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e028:	e045      	b.n	802e0b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e02a:	687b      	ldr	r3, [r7, #4]
 802e02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e02e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e032:	d142      	bne.n	802e0ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802e034:	2301      	movs	r3, #1
 802e036:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e038:	e03f      	b.n	802e0ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802e03a:	687b      	ldr	r3, [r7, #4]
 802e03c:	699b      	ldr	r3, [r3, #24]
 802e03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802e042:	d123      	bne.n	802e08c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802e044:	687b      	ldr	r3, [r7, #4]
 802e046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e048:	2b03      	cmp	r3, #3
 802e04a:	d838      	bhi.n	802e0be <DMA_CheckFifoParam+0xda>
 802e04c:	a201      	add	r2, pc, #4	; (adr r2, 802e054 <DMA_CheckFifoParam+0x70>)
 802e04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e052:	bf00      	nop
 802e054:	0802e065 	.word	0x0802e065
 802e058:	0802e06b 	.word	0x0802e06b
 802e05c:	0802e065 	.word	0x0802e065
 802e060:	0802e07d 	.word	0x0802e07d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802e064:	2301      	movs	r3, #1
 802e066:	73fb      	strb	r3, [r7, #15]
        break;
 802e068:	e030      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e06e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e072:	2b00      	cmp	r3, #0
 802e074:	d025      	beq.n	802e0c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802e076:	2301      	movs	r3, #1
 802e078:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e07a:	e022      	b.n	802e0c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e07c:	687b      	ldr	r3, [r7, #4]
 802e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e080:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e084:	d11f      	bne.n	802e0c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802e086:	2301      	movs	r3, #1
 802e088:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e08a:	e01c      	b.n	802e0c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802e08c:	687b      	ldr	r3, [r7, #4]
 802e08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e090:	2b02      	cmp	r3, #2
 802e092:	d902      	bls.n	802e09a <DMA_CheckFifoParam+0xb6>
 802e094:	2b03      	cmp	r3, #3
 802e096:	d003      	beq.n	802e0a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802e098:	e018      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802e09a:	2301      	movs	r3, #1
 802e09c:	73fb      	strb	r3, [r7, #15]
        break;
 802e09e:	e015      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e0a0:	687b      	ldr	r3, [r7, #4]
 802e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e0a8:	2b00      	cmp	r3, #0
 802e0aa:	d00e      	beq.n	802e0ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802e0ac:	2301      	movs	r3, #1
 802e0ae:	73fb      	strb	r3, [r7, #15]
    break;
 802e0b0:	e00b      	b.n	802e0ca <DMA_CheckFifoParam+0xe6>
        break;
 802e0b2:	bf00      	nop
 802e0b4:	e00a      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        break;
 802e0b6:	bf00      	nop
 802e0b8:	e008      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        break;
 802e0ba:	bf00      	nop
 802e0bc:	e006      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        break;
 802e0be:	bf00      	nop
 802e0c0:	e004      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        break;
 802e0c2:	bf00      	nop
 802e0c4:	e002      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
        break;
 802e0c6:	bf00      	nop
 802e0c8:	e000      	b.n	802e0cc <DMA_CheckFifoParam+0xe8>
    break;
 802e0ca:	bf00      	nop
    }
  }

  return status;
 802e0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 802e0ce:	4618      	mov	r0, r3
 802e0d0:	3714      	adds	r7, #20
 802e0d2:	46bd      	mov	sp, r7
 802e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0d8:	4770      	bx	lr
 802e0da:	bf00      	nop

0802e0dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e0dc:	b480      	push	{r7}
 802e0de:	b085      	sub	sp, #20
 802e0e0:	af00      	add	r7, sp, #0
 802e0e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802e0e4:	687b      	ldr	r3, [r7, #4]
 802e0e6:	681b      	ldr	r3, [r3, #0]
 802e0e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e0ea:	687b      	ldr	r3, [r7, #4]
 802e0ec:	681b      	ldr	r3, [r3, #0]
 802e0ee:	4a38      	ldr	r2, [pc, #224]	; (802e1d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802e0f0:	4293      	cmp	r3, r2
 802e0f2:	d022      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e0f4:	687b      	ldr	r3, [r7, #4]
 802e0f6:	681b      	ldr	r3, [r3, #0]
 802e0f8:	4a36      	ldr	r2, [pc, #216]	; (802e1d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802e0fa:	4293      	cmp	r3, r2
 802e0fc:	d01d      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e0fe:	687b      	ldr	r3, [r7, #4]
 802e100:	681b      	ldr	r3, [r3, #0]
 802e102:	4a35      	ldr	r2, [pc, #212]	; (802e1d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802e104:	4293      	cmp	r3, r2
 802e106:	d018      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e108:	687b      	ldr	r3, [r7, #4]
 802e10a:	681b      	ldr	r3, [r3, #0]
 802e10c:	4a33      	ldr	r2, [pc, #204]	; (802e1dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802e10e:	4293      	cmp	r3, r2
 802e110:	d013      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e112:	687b      	ldr	r3, [r7, #4]
 802e114:	681b      	ldr	r3, [r3, #0]
 802e116:	4a32      	ldr	r2, [pc, #200]	; (802e1e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802e118:	4293      	cmp	r3, r2
 802e11a:	d00e      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e11c:	687b      	ldr	r3, [r7, #4]
 802e11e:	681b      	ldr	r3, [r3, #0]
 802e120:	4a30      	ldr	r2, [pc, #192]	; (802e1e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802e122:	4293      	cmp	r3, r2
 802e124:	d009      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e126:	687b      	ldr	r3, [r7, #4]
 802e128:	681b      	ldr	r3, [r3, #0]
 802e12a:	4a2f      	ldr	r2, [pc, #188]	; (802e1e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802e12c:	4293      	cmp	r3, r2
 802e12e:	d004      	beq.n	802e13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e130:	687b      	ldr	r3, [r7, #4]
 802e132:	681b      	ldr	r3, [r3, #0]
 802e134:	4a2d      	ldr	r2, [pc, #180]	; (802e1ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802e136:	4293      	cmp	r3, r2
 802e138:	d101      	bne.n	802e13e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802e13a:	2301      	movs	r3, #1
 802e13c:	e000      	b.n	802e140 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802e13e:	2300      	movs	r3, #0
 802e140:	2b00      	cmp	r3, #0
 802e142:	d01a      	beq.n	802e17a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802e144:	687b      	ldr	r3, [r7, #4]
 802e146:	681b      	ldr	r3, [r3, #0]
 802e148:	b2db      	uxtb	r3, r3
 802e14a:	3b08      	subs	r3, #8
 802e14c:	4a28      	ldr	r2, [pc, #160]	; (802e1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802e14e:	fba2 2303 	umull	r2, r3, r2, r3
 802e152:	091b      	lsrs	r3, r3, #4
 802e154:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802e156:	68fa      	ldr	r2, [r7, #12]
 802e158:	4b26      	ldr	r3, [pc, #152]	; (802e1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802e15a:	4413      	add	r3, r2
 802e15c:	009b      	lsls	r3, r3, #2
 802e15e:	461a      	mov	r2, r3
 802e160:	687b      	ldr	r3, [r7, #4]
 802e162:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802e164:	687b      	ldr	r3, [r7, #4]
 802e166:	4a24      	ldr	r2, [pc, #144]	; (802e1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802e168:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e16a:	68fb      	ldr	r3, [r7, #12]
 802e16c:	f003 031f 	and.w	r3, r3, #31
 802e170:	2201      	movs	r2, #1
 802e172:	409a      	lsls	r2, r3
 802e174:	687b      	ldr	r3, [r7, #4]
 802e176:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802e178:	e024      	b.n	802e1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802e17a:	687b      	ldr	r3, [r7, #4]
 802e17c:	681b      	ldr	r3, [r3, #0]
 802e17e:	b2db      	uxtb	r3, r3
 802e180:	3b10      	subs	r3, #16
 802e182:	4a1e      	ldr	r2, [pc, #120]	; (802e1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802e184:	fba2 2303 	umull	r2, r3, r2, r3
 802e188:	091b      	lsrs	r3, r3, #4
 802e18a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802e18c:	68bb      	ldr	r3, [r7, #8]
 802e18e:	4a1c      	ldr	r2, [pc, #112]	; (802e200 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802e190:	4293      	cmp	r3, r2
 802e192:	d806      	bhi.n	802e1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802e194:	68bb      	ldr	r3, [r7, #8]
 802e196:	4a1b      	ldr	r2, [pc, #108]	; (802e204 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802e198:	4293      	cmp	r3, r2
 802e19a:	d902      	bls.n	802e1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802e19c:	68fb      	ldr	r3, [r7, #12]
 802e19e:	3308      	adds	r3, #8
 802e1a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802e1a2:	68fa      	ldr	r2, [r7, #12]
 802e1a4:	4b18      	ldr	r3, [pc, #96]	; (802e208 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802e1a6:	4413      	add	r3, r2
 802e1a8:	009b      	lsls	r3, r3, #2
 802e1aa:	461a      	mov	r2, r3
 802e1ac:	687b      	ldr	r3, [r7, #4]
 802e1ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802e1b0:	687b      	ldr	r3, [r7, #4]
 802e1b2:	4a16      	ldr	r2, [pc, #88]	; (802e20c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802e1b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e1b6:	68fb      	ldr	r3, [r7, #12]
 802e1b8:	f003 031f 	and.w	r3, r3, #31
 802e1bc:	2201      	movs	r2, #1
 802e1be:	409a      	lsls	r2, r3
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 802e1c4:	bf00      	nop
 802e1c6:	3714      	adds	r7, #20
 802e1c8:	46bd      	mov	sp, r7
 802e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1ce:	4770      	bx	lr
 802e1d0:	58025408 	.word	0x58025408
 802e1d4:	5802541c 	.word	0x5802541c
 802e1d8:	58025430 	.word	0x58025430
 802e1dc:	58025444 	.word	0x58025444
 802e1e0:	58025458 	.word	0x58025458
 802e1e4:	5802546c 	.word	0x5802546c
 802e1e8:	58025480 	.word	0x58025480
 802e1ec:	58025494 	.word	0x58025494
 802e1f0:	cccccccd 	.word	0xcccccccd
 802e1f4:	16009600 	.word	0x16009600
 802e1f8:	58025880 	.word	0x58025880
 802e1fc:	aaaaaaab 	.word	0xaaaaaaab
 802e200:	400204b8 	.word	0x400204b8
 802e204:	4002040f 	.word	0x4002040f
 802e208:	10008200 	.word	0x10008200
 802e20c:	40020880 	.word	0x40020880

0802e210 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e210:	b480      	push	{r7}
 802e212:	b085      	sub	sp, #20
 802e214:	af00      	add	r7, sp, #0
 802e216:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802e218:	687b      	ldr	r3, [r7, #4]
 802e21a:	685b      	ldr	r3, [r3, #4]
 802e21c:	b2db      	uxtb	r3, r3
 802e21e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802e220:	68fb      	ldr	r3, [r7, #12]
 802e222:	2b00      	cmp	r3, #0
 802e224:	d04a      	beq.n	802e2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802e226:	68fb      	ldr	r3, [r7, #12]
 802e228:	2b08      	cmp	r3, #8
 802e22a:	d847      	bhi.n	802e2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e22c:	687b      	ldr	r3, [r7, #4]
 802e22e:	681b      	ldr	r3, [r3, #0]
 802e230:	4a25      	ldr	r2, [pc, #148]	; (802e2c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802e232:	4293      	cmp	r3, r2
 802e234:	d022      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e236:	687b      	ldr	r3, [r7, #4]
 802e238:	681b      	ldr	r3, [r3, #0]
 802e23a:	4a24      	ldr	r2, [pc, #144]	; (802e2cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802e23c:	4293      	cmp	r3, r2
 802e23e:	d01d      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e240:	687b      	ldr	r3, [r7, #4]
 802e242:	681b      	ldr	r3, [r3, #0]
 802e244:	4a22      	ldr	r2, [pc, #136]	; (802e2d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802e246:	4293      	cmp	r3, r2
 802e248:	d018      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e24a:	687b      	ldr	r3, [r7, #4]
 802e24c:	681b      	ldr	r3, [r3, #0]
 802e24e:	4a21      	ldr	r2, [pc, #132]	; (802e2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802e250:	4293      	cmp	r3, r2
 802e252:	d013      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e254:	687b      	ldr	r3, [r7, #4]
 802e256:	681b      	ldr	r3, [r3, #0]
 802e258:	4a1f      	ldr	r2, [pc, #124]	; (802e2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802e25a:	4293      	cmp	r3, r2
 802e25c:	d00e      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e25e:	687b      	ldr	r3, [r7, #4]
 802e260:	681b      	ldr	r3, [r3, #0]
 802e262:	4a1e      	ldr	r2, [pc, #120]	; (802e2dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802e264:	4293      	cmp	r3, r2
 802e266:	d009      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e268:	687b      	ldr	r3, [r7, #4]
 802e26a:	681b      	ldr	r3, [r3, #0]
 802e26c:	4a1c      	ldr	r2, [pc, #112]	; (802e2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802e26e:	4293      	cmp	r3, r2
 802e270:	d004      	beq.n	802e27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e272:	687b      	ldr	r3, [r7, #4]
 802e274:	681b      	ldr	r3, [r3, #0]
 802e276:	4a1b      	ldr	r2, [pc, #108]	; (802e2e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802e278:	4293      	cmp	r3, r2
 802e27a:	d101      	bne.n	802e280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802e27c:	2301      	movs	r3, #1
 802e27e:	e000      	b.n	802e282 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802e280:	2300      	movs	r3, #0
 802e282:	2b00      	cmp	r3, #0
 802e284:	d00a      	beq.n	802e29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802e286:	68fa      	ldr	r2, [r7, #12]
 802e288:	4b17      	ldr	r3, [pc, #92]	; (802e2e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802e28a:	4413      	add	r3, r2
 802e28c:	009b      	lsls	r3, r3, #2
 802e28e:	461a      	mov	r2, r3
 802e290:	687b      	ldr	r3, [r7, #4]
 802e292:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802e294:	687b      	ldr	r3, [r7, #4]
 802e296:	4a15      	ldr	r2, [pc, #84]	; (802e2ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802e298:	671a      	str	r2, [r3, #112]	; 0x70
 802e29a:	e009      	b.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802e29c:	68fa      	ldr	r2, [r7, #12]
 802e29e:	4b14      	ldr	r3, [pc, #80]	; (802e2f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802e2a0:	4413      	add	r3, r2
 802e2a2:	009b      	lsls	r3, r3, #2
 802e2a4:	461a      	mov	r2, r3
 802e2a6:	687b      	ldr	r3, [r7, #4]
 802e2a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802e2aa:	687b      	ldr	r3, [r7, #4]
 802e2ac:	4a11      	ldr	r2, [pc, #68]	; (802e2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802e2ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802e2b0:	68fb      	ldr	r3, [r7, #12]
 802e2b2:	3b01      	subs	r3, #1
 802e2b4:	2201      	movs	r2, #1
 802e2b6:	409a      	lsls	r2, r3
 802e2b8:	687b      	ldr	r3, [r7, #4]
 802e2ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802e2bc:	bf00      	nop
 802e2be:	3714      	adds	r7, #20
 802e2c0:	46bd      	mov	sp, r7
 802e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2c6:	4770      	bx	lr
 802e2c8:	58025408 	.word	0x58025408
 802e2cc:	5802541c 	.word	0x5802541c
 802e2d0:	58025430 	.word	0x58025430
 802e2d4:	58025444 	.word	0x58025444
 802e2d8:	58025458 	.word	0x58025458
 802e2dc:	5802546c 	.word	0x5802546c
 802e2e0:	58025480 	.word	0x58025480
 802e2e4:	58025494 	.word	0x58025494
 802e2e8:	1600963f 	.word	0x1600963f
 802e2ec:	58025940 	.word	0x58025940
 802e2f0:	1000823f 	.word	0x1000823f
 802e2f4:	40020940 	.word	0x40020940

0802e2f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802e2f8:	b480      	push	{r7}
 802e2fa:	b089      	sub	sp, #36	; 0x24
 802e2fc:	af00      	add	r7, sp, #0
 802e2fe:	6078      	str	r0, [r7, #4]
 802e300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802e302:	2300      	movs	r3, #0
 802e304:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802e306:	4b89      	ldr	r3, [pc, #548]	; (802e52c <HAL_GPIO_Init+0x234>)
 802e308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e30a:	e194      	b.n	802e636 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802e30c:	683b      	ldr	r3, [r7, #0]
 802e30e:	681a      	ldr	r2, [r3, #0]
 802e310:	2101      	movs	r1, #1
 802e312:	69fb      	ldr	r3, [r7, #28]
 802e314:	fa01 f303 	lsl.w	r3, r1, r3
 802e318:	4013      	ands	r3, r2
 802e31a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802e31c:	693b      	ldr	r3, [r7, #16]
 802e31e:	2b00      	cmp	r3, #0
 802e320:	f000 8186 	beq.w	802e630 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802e324:	683b      	ldr	r3, [r7, #0]
 802e326:	685b      	ldr	r3, [r3, #4]
 802e328:	f003 0303 	and.w	r3, r3, #3
 802e32c:	2b01      	cmp	r3, #1
 802e32e:	d005      	beq.n	802e33c <HAL_GPIO_Init+0x44>
 802e330:	683b      	ldr	r3, [r7, #0]
 802e332:	685b      	ldr	r3, [r3, #4]
 802e334:	f003 0303 	and.w	r3, r3, #3
 802e338:	2b02      	cmp	r3, #2
 802e33a:	d130      	bne.n	802e39e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802e33c:	687b      	ldr	r3, [r7, #4]
 802e33e:	689b      	ldr	r3, [r3, #8]
 802e340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802e342:	69fb      	ldr	r3, [r7, #28]
 802e344:	005b      	lsls	r3, r3, #1
 802e346:	2203      	movs	r2, #3
 802e348:	fa02 f303 	lsl.w	r3, r2, r3
 802e34c:	43db      	mvns	r3, r3
 802e34e:	69ba      	ldr	r2, [r7, #24]
 802e350:	4013      	ands	r3, r2
 802e352:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802e354:	683b      	ldr	r3, [r7, #0]
 802e356:	68da      	ldr	r2, [r3, #12]
 802e358:	69fb      	ldr	r3, [r7, #28]
 802e35a:	005b      	lsls	r3, r3, #1
 802e35c:	fa02 f303 	lsl.w	r3, r2, r3
 802e360:	69ba      	ldr	r2, [r7, #24]
 802e362:	4313      	orrs	r3, r2
 802e364:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802e366:	687b      	ldr	r3, [r7, #4]
 802e368:	69ba      	ldr	r2, [r7, #24]
 802e36a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802e36c:	687b      	ldr	r3, [r7, #4]
 802e36e:	685b      	ldr	r3, [r3, #4]
 802e370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802e372:	2201      	movs	r2, #1
 802e374:	69fb      	ldr	r3, [r7, #28]
 802e376:	fa02 f303 	lsl.w	r3, r2, r3
 802e37a:	43db      	mvns	r3, r3
 802e37c:	69ba      	ldr	r2, [r7, #24]
 802e37e:	4013      	ands	r3, r2
 802e380:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802e382:	683b      	ldr	r3, [r7, #0]
 802e384:	685b      	ldr	r3, [r3, #4]
 802e386:	091b      	lsrs	r3, r3, #4
 802e388:	f003 0201 	and.w	r2, r3, #1
 802e38c:	69fb      	ldr	r3, [r7, #28]
 802e38e:	fa02 f303 	lsl.w	r3, r2, r3
 802e392:	69ba      	ldr	r2, [r7, #24]
 802e394:	4313      	orrs	r3, r2
 802e396:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802e398:	687b      	ldr	r3, [r7, #4]
 802e39a:	69ba      	ldr	r2, [r7, #24]
 802e39c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802e39e:	683b      	ldr	r3, [r7, #0]
 802e3a0:	685b      	ldr	r3, [r3, #4]
 802e3a2:	f003 0303 	and.w	r3, r3, #3
 802e3a6:	2b03      	cmp	r3, #3
 802e3a8:	d017      	beq.n	802e3da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	68db      	ldr	r3, [r3, #12]
 802e3ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802e3b0:	69fb      	ldr	r3, [r7, #28]
 802e3b2:	005b      	lsls	r3, r3, #1
 802e3b4:	2203      	movs	r2, #3
 802e3b6:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ba:	43db      	mvns	r3, r3
 802e3bc:	69ba      	ldr	r2, [r7, #24]
 802e3be:	4013      	ands	r3, r2
 802e3c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802e3c2:	683b      	ldr	r3, [r7, #0]
 802e3c4:	689a      	ldr	r2, [r3, #8]
 802e3c6:	69fb      	ldr	r3, [r7, #28]
 802e3c8:	005b      	lsls	r3, r3, #1
 802e3ca:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ce:	69ba      	ldr	r2, [r7, #24]
 802e3d0:	4313      	orrs	r3, r2
 802e3d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802e3d4:	687b      	ldr	r3, [r7, #4]
 802e3d6:	69ba      	ldr	r2, [r7, #24]
 802e3d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802e3da:	683b      	ldr	r3, [r7, #0]
 802e3dc:	685b      	ldr	r3, [r3, #4]
 802e3de:	f003 0303 	and.w	r3, r3, #3
 802e3e2:	2b02      	cmp	r3, #2
 802e3e4:	d123      	bne.n	802e42e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802e3e6:	69fb      	ldr	r3, [r7, #28]
 802e3e8:	08da      	lsrs	r2, r3, #3
 802e3ea:	687b      	ldr	r3, [r7, #4]
 802e3ec:	3208      	adds	r2, #8
 802e3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e3f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802e3f4:	69fb      	ldr	r3, [r7, #28]
 802e3f6:	f003 0307 	and.w	r3, r3, #7
 802e3fa:	009b      	lsls	r3, r3, #2
 802e3fc:	220f      	movs	r2, #15
 802e3fe:	fa02 f303 	lsl.w	r3, r2, r3
 802e402:	43db      	mvns	r3, r3
 802e404:	69ba      	ldr	r2, [r7, #24]
 802e406:	4013      	ands	r3, r2
 802e408:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802e40a:	683b      	ldr	r3, [r7, #0]
 802e40c:	691a      	ldr	r2, [r3, #16]
 802e40e:	69fb      	ldr	r3, [r7, #28]
 802e410:	f003 0307 	and.w	r3, r3, #7
 802e414:	009b      	lsls	r3, r3, #2
 802e416:	fa02 f303 	lsl.w	r3, r2, r3
 802e41a:	69ba      	ldr	r2, [r7, #24]
 802e41c:	4313      	orrs	r3, r2
 802e41e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802e420:	69fb      	ldr	r3, [r7, #28]
 802e422:	08da      	lsrs	r2, r3, #3
 802e424:	687b      	ldr	r3, [r7, #4]
 802e426:	3208      	adds	r2, #8
 802e428:	69b9      	ldr	r1, [r7, #24]
 802e42a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802e42e:	687b      	ldr	r3, [r7, #4]
 802e430:	681b      	ldr	r3, [r3, #0]
 802e432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802e434:	69fb      	ldr	r3, [r7, #28]
 802e436:	005b      	lsls	r3, r3, #1
 802e438:	2203      	movs	r2, #3
 802e43a:	fa02 f303 	lsl.w	r3, r2, r3
 802e43e:	43db      	mvns	r3, r3
 802e440:	69ba      	ldr	r2, [r7, #24]
 802e442:	4013      	ands	r3, r2
 802e444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802e446:	683b      	ldr	r3, [r7, #0]
 802e448:	685b      	ldr	r3, [r3, #4]
 802e44a:	f003 0203 	and.w	r2, r3, #3
 802e44e:	69fb      	ldr	r3, [r7, #28]
 802e450:	005b      	lsls	r3, r3, #1
 802e452:	fa02 f303 	lsl.w	r3, r2, r3
 802e456:	69ba      	ldr	r2, [r7, #24]
 802e458:	4313      	orrs	r3, r2
 802e45a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802e45c:	687b      	ldr	r3, [r7, #4]
 802e45e:	69ba      	ldr	r2, [r7, #24]
 802e460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802e462:	683b      	ldr	r3, [r7, #0]
 802e464:	685b      	ldr	r3, [r3, #4]
 802e466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e46a:	2b00      	cmp	r3, #0
 802e46c:	f000 80e0 	beq.w	802e630 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e470:	4b2f      	ldr	r3, [pc, #188]	; (802e530 <HAL_GPIO_Init+0x238>)
 802e472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e476:	4a2e      	ldr	r2, [pc, #184]	; (802e530 <HAL_GPIO_Init+0x238>)
 802e478:	f043 0302 	orr.w	r3, r3, #2
 802e47c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e480:	4b2b      	ldr	r3, [pc, #172]	; (802e530 <HAL_GPIO_Init+0x238>)
 802e482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e486:	f003 0302 	and.w	r3, r3, #2
 802e48a:	60fb      	str	r3, [r7, #12]
 802e48c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802e48e:	4a29      	ldr	r2, [pc, #164]	; (802e534 <HAL_GPIO_Init+0x23c>)
 802e490:	69fb      	ldr	r3, [r7, #28]
 802e492:	089b      	lsrs	r3, r3, #2
 802e494:	3302      	adds	r3, #2
 802e496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e49a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802e49c:	69fb      	ldr	r3, [r7, #28]
 802e49e:	f003 0303 	and.w	r3, r3, #3
 802e4a2:	009b      	lsls	r3, r3, #2
 802e4a4:	220f      	movs	r2, #15
 802e4a6:	fa02 f303 	lsl.w	r3, r2, r3
 802e4aa:	43db      	mvns	r3, r3
 802e4ac:	69ba      	ldr	r2, [r7, #24]
 802e4ae:	4013      	ands	r3, r2
 802e4b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802e4b2:	687b      	ldr	r3, [r7, #4]
 802e4b4:	4a20      	ldr	r2, [pc, #128]	; (802e538 <HAL_GPIO_Init+0x240>)
 802e4b6:	4293      	cmp	r3, r2
 802e4b8:	d052      	beq.n	802e560 <HAL_GPIO_Init+0x268>
 802e4ba:	687b      	ldr	r3, [r7, #4]
 802e4bc:	4a1f      	ldr	r2, [pc, #124]	; (802e53c <HAL_GPIO_Init+0x244>)
 802e4be:	4293      	cmp	r3, r2
 802e4c0:	d031      	beq.n	802e526 <HAL_GPIO_Init+0x22e>
 802e4c2:	687b      	ldr	r3, [r7, #4]
 802e4c4:	4a1e      	ldr	r2, [pc, #120]	; (802e540 <HAL_GPIO_Init+0x248>)
 802e4c6:	4293      	cmp	r3, r2
 802e4c8:	d02b      	beq.n	802e522 <HAL_GPIO_Init+0x22a>
 802e4ca:	687b      	ldr	r3, [r7, #4]
 802e4cc:	4a1d      	ldr	r2, [pc, #116]	; (802e544 <HAL_GPIO_Init+0x24c>)
 802e4ce:	4293      	cmp	r3, r2
 802e4d0:	d025      	beq.n	802e51e <HAL_GPIO_Init+0x226>
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	4a1c      	ldr	r2, [pc, #112]	; (802e548 <HAL_GPIO_Init+0x250>)
 802e4d6:	4293      	cmp	r3, r2
 802e4d8:	d01f      	beq.n	802e51a <HAL_GPIO_Init+0x222>
 802e4da:	687b      	ldr	r3, [r7, #4]
 802e4dc:	4a1b      	ldr	r2, [pc, #108]	; (802e54c <HAL_GPIO_Init+0x254>)
 802e4de:	4293      	cmp	r3, r2
 802e4e0:	d019      	beq.n	802e516 <HAL_GPIO_Init+0x21e>
 802e4e2:	687b      	ldr	r3, [r7, #4]
 802e4e4:	4a1a      	ldr	r2, [pc, #104]	; (802e550 <HAL_GPIO_Init+0x258>)
 802e4e6:	4293      	cmp	r3, r2
 802e4e8:	d013      	beq.n	802e512 <HAL_GPIO_Init+0x21a>
 802e4ea:	687b      	ldr	r3, [r7, #4]
 802e4ec:	4a19      	ldr	r2, [pc, #100]	; (802e554 <HAL_GPIO_Init+0x25c>)
 802e4ee:	4293      	cmp	r3, r2
 802e4f0:	d00d      	beq.n	802e50e <HAL_GPIO_Init+0x216>
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	4a18      	ldr	r2, [pc, #96]	; (802e558 <HAL_GPIO_Init+0x260>)
 802e4f6:	4293      	cmp	r3, r2
 802e4f8:	d007      	beq.n	802e50a <HAL_GPIO_Init+0x212>
 802e4fa:	687b      	ldr	r3, [r7, #4]
 802e4fc:	4a17      	ldr	r2, [pc, #92]	; (802e55c <HAL_GPIO_Init+0x264>)
 802e4fe:	4293      	cmp	r3, r2
 802e500:	d101      	bne.n	802e506 <HAL_GPIO_Init+0x20e>
 802e502:	2309      	movs	r3, #9
 802e504:	e02d      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e506:	230a      	movs	r3, #10
 802e508:	e02b      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e50a:	2308      	movs	r3, #8
 802e50c:	e029      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e50e:	2307      	movs	r3, #7
 802e510:	e027      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e512:	2306      	movs	r3, #6
 802e514:	e025      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e516:	2305      	movs	r3, #5
 802e518:	e023      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e51a:	2304      	movs	r3, #4
 802e51c:	e021      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e51e:	2303      	movs	r3, #3
 802e520:	e01f      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e522:	2302      	movs	r3, #2
 802e524:	e01d      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e526:	2301      	movs	r3, #1
 802e528:	e01b      	b.n	802e562 <HAL_GPIO_Init+0x26a>
 802e52a:	bf00      	nop
 802e52c:	58000080 	.word	0x58000080
 802e530:	58024400 	.word	0x58024400
 802e534:	58000400 	.word	0x58000400
 802e538:	58020000 	.word	0x58020000
 802e53c:	58020400 	.word	0x58020400
 802e540:	58020800 	.word	0x58020800
 802e544:	58020c00 	.word	0x58020c00
 802e548:	58021000 	.word	0x58021000
 802e54c:	58021400 	.word	0x58021400
 802e550:	58021800 	.word	0x58021800
 802e554:	58021c00 	.word	0x58021c00
 802e558:	58022000 	.word	0x58022000
 802e55c:	58022400 	.word	0x58022400
 802e560:	2300      	movs	r3, #0
 802e562:	69fa      	ldr	r2, [r7, #28]
 802e564:	f002 0203 	and.w	r2, r2, #3
 802e568:	0092      	lsls	r2, r2, #2
 802e56a:	4093      	lsls	r3, r2
 802e56c:	69ba      	ldr	r2, [r7, #24]
 802e56e:	4313      	orrs	r3, r2
 802e570:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e572:	4938      	ldr	r1, [pc, #224]	; (802e654 <HAL_GPIO_Init+0x35c>)
 802e574:	69fb      	ldr	r3, [r7, #28]
 802e576:	089b      	lsrs	r3, r3, #2
 802e578:	3302      	adds	r3, #2
 802e57a:	69ba      	ldr	r2, [r7, #24]
 802e57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802e580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e584:	681b      	ldr	r3, [r3, #0]
 802e586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e588:	693b      	ldr	r3, [r7, #16]
 802e58a:	43db      	mvns	r3, r3
 802e58c:	69ba      	ldr	r2, [r7, #24]
 802e58e:	4013      	ands	r3, r2
 802e590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e592:	683b      	ldr	r3, [r7, #0]
 802e594:	685b      	ldr	r3, [r3, #4]
 802e596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802e59a:	2b00      	cmp	r3, #0
 802e59c:	d003      	beq.n	802e5a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802e59e:	69ba      	ldr	r2, [r7, #24]
 802e5a0:	693b      	ldr	r3, [r7, #16]
 802e5a2:	4313      	orrs	r3, r2
 802e5a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802e5a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e5aa:	69bb      	ldr	r3, [r7, #24]
 802e5ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802e5ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e5b2:	685b      	ldr	r3, [r3, #4]
 802e5b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e5b6:	693b      	ldr	r3, [r7, #16]
 802e5b8:	43db      	mvns	r3, r3
 802e5ba:	69ba      	ldr	r2, [r7, #24]
 802e5bc:	4013      	ands	r3, r2
 802e5be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e5c0:	683b      	ldr	r3, [r7, #0]
 802e5c2:	685b      	ldr	r3, [r3, #4]
 802e5c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802e5c8:	2b00      	cmp	r3, #0
 802e5ca:	d003      	beq.n	802e5d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802e5cc:	69ba      	ldr	r2, [r7, #24]
 802e5ce:	693b      	ldr	r3, [r7, #16]
 802e5d0:	4313      	orrs	r3, r2
 802e5d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802e5d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e5d8:	69bb      	ldr	r3, [r7, #24]
 802e5da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802e5dc:	697b      	ldr	r3, [r7, #20]
 802e5de:	685b      	ldr	r3, [r3, #4]
 802e5e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e5e2:	693b      	ldr	r3, [r7, #16]
 802e5e4:	43db      	mvns	r3, r3
 802e5e6:	69ba      	ldr	r2, [r7, #24]
 802e5e8:	4013      	ands	r3, r2
 802e5ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e5ec:	683b      	ldr	r3, [r7, #0]
 802e5ee:	685b      	ldr	r3, [r3, #4]
 802e5f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e5f4:	2b00      	cmp	r3, #0
 802e5f6:	d003      	beq.n	802e600 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802e5f8:	69ba      	ldr	r2, [r7, #24]
 802e5fa:	693b      	ldr	r3, [r7, #16]
 802e5fc:	4313      	orrs	r3, r2
 802e5fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802e600:	697b      	ldr	r3, [r7, #20]
 802e602:	69ba      	ldr	r2, [r7, #24]
 802e604:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802e606:	697b      	ldr	r3, [r7, #20]
 802e608:	681b      	ldr	r3, [r3, #0]
 802e60a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e60c:	693b      	ldr	r3, [r7, #16]
 802e60e:	43db      	mvns	r3, r3
 802e610:	69ba      	ldr	r2, [r7, #24]
 802e612:	4013      	ands	r3, r2
 802e614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e616:	683b      	ldr	r3, [r7, #0]
 802e618:	685b      	ldr	r3, [r3, #4]
 802e61a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e61e:	2b00      	cmp	r3, #0
 802e620:	d003      	beq.n	802e62a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802e622:	69ba      	ldr	r2, [r7, #24]
 802e624:	693b      	ldr	r3, [r7, #16]
 802e626:	4313      	orrs	r3, r2
 802e628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802e62a:	697b      	ldr	r3, [r7, #20]
 802e62c:	69ba      	ldr	r2, [r7, #24]
 802e62e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802e630:	69fb      	ldr	r3, [r7, #28]
 802e632:	3301      	adds	r3, #1
 802e634:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e636:	683b      	ldr	r3, [r7, #0]
 802e638:	681a      	ldr	r2, [r3, #0]
 802e63a:	69fb      	ldr	r3, [r7, #28]
 802e63c:	fa22 f303 	lsr.w	r3, r2, r3
 802e640:	2b00      	cmp	r3, #0
 802e642:	f47f ae63 	bne.w	802e30c <HAL_GPIO_Init+0x14>
  }
}
 802e646:	bf00      	nop
 802e648:	bf00      	nop
 802e64a:	3724      	adds	r7, #36	; 0x24
 802e64c:	46bd      	mov	sp, r7
 802e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e652:	4770      	bx	lr
 802e654:	58000400 	.word	0x58000400

0802e658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e658:	b480      	push	{r7}
 802e65a:	b083      	sub	sp, #12
 802e65c:	af00      	add	r7, sp, #0
 802e65e:	6078      	str	r0, [r7, #4]
 802e660:	460b      	mov	r3, r1
 802e662:	807b      	strh	r3, [r7, #2]
 802e664:	4613      	mov	r3, r2
 802e666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802e668:	787b      	ldrb	r3, [r7, #1]
 802e66a:	2b00      	cmp	r3, #0
 802e66c:	d003      	beq.n	802e676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e66e:	887a      	ldrh	r2, [r7, #2]
 802e670:	687b      	ldr	r3, [r7, #4]
 802e672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802e674:	e003      	b.n	802e67e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802e676:	887b      	ldrh	r3, [r7, #2]
 802e678:	041a      	lsls	r2, r3, #16
 802e67a:	687b      	ldr	r3, [r7, #4]
 802e67c:	619a      	str	r2, [r3, #24]
}
 802e67e:	bf00      	nop
 802e680:	370c      	adds	r7, #12
 802e682:	46bd      	mov	sp, r7
 802e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e688:	4770      	bx	lr
	...

0802e68c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e68c:	b580      	push	{r7, lr}
 802e68e:	b082      	sub	sp, #8
 802e690:	af00      	add	r7, sp, #0
 802e692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e694:	687b      	ldr	r3, [r7, #4]
 802e696:	2b00      	cmp	r3, #0
 802e698:	d101      	bne.n	802e69e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e69a:	2301      	movs	r3, #1
 802e69c:	e07f      	b.n	802e79e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e69e:	687b      	ldr	r3, [r7, #4]
 802e6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e6a4:	b2db      	uxtb	r3, r3
 802e6a6:	2b00      	cmp	r3, #0
 802e6a8:	d106      	bne.n	802e6b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e6aa:	687b      	ldr	r3, [r7, #4]
 802e6ac:	2200      	movs	r2, #0
 802e6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802e6b2:	6878      	ldr	r0, [r7, #4]
 802e6b4:	f7fa ff98 	bl	80295e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e6b8:	687b      	ldr	r3, [r7, #4]
 802e6ba:	2224      	movs	r2, #36	; 0x24
 802e6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e6c0:	687b      	ldr	r3, [r7, #4]
 802e6c2:	681b      	ldr	r3, [r3, #0]
 802e6c4:	681a      	ldr	r2, [r3, #0]
 802e6c6:	687b      	ldr	r3, [r7, #4]
 802e6c8:	681b      	ldr	r3, [r3, #0]
 802e6ca:	f022 0201 	bic.w	r2, r2, #1
 802e6ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802e6d0:	687b      	ldr	r3, [r7, #4]
 802e6d2:	685a      	ldr	r2, [r3, #4]
 802e6d4:	687b      	ldr	r3, [r7, #4]
 802e6d6:	681b      	ldr	r3, [r3, #0]
 802e6d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802e6dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802e6de:	687b      	ldr	r3, [r7, #4]
 802e6e0:	681b      	ldr	r3, [r3, #0]
 802e6e2:	689a      	ldr	r2, [r3, #8]
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	681b      	ldr	r3, [r3, #0]
 802e6e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e6ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	68db      	ldr	r3, [r3, #12]
 802e6f2:	2b01      	cmp	r3, #1
 802e6f4:	d107      	bne.n	802e706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802e6f6:	687b      	ldr	r3, [r7, #4]
 802e6f8:	689a      	ldr	r2, [r3, #8]
 802e6fa:	687b      	ldr	r3, [r7, #4]
 802e6fc:	681b      	ldr	r3, [r3, #0]
 802e6fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802e702:	609a      	str	r2, [r3, #8]
 802e704:	e006      	b.n	802e714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802e706:	687b      	ldr	r3, [r7, #4]
 802e708:	689a      	ldr	r2, [r3, #8]
 802e70a:	687b      	ldr	r3, [r7, #4]
 802e70c:	681b      	ldr	r3, [r3, #0]
 802e70e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802e712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e714:	687b      	ldr	r3, [r7, #4]
 802e716:	68db      	ldr	r3, [r3, #12]
 802e718:	2b02      	cmp	r3, #2
 802e71a:	d104      	bne.n	802e726 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802e71c:	687b      	ldr	r3, [r7, #4]
 802e71e:	681b      	ldr	r3, [r3, #0]
 802e720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802e726:	687b      	ldr	r3, [r7, #4]
 802e728:	681b      	ldr	r3, [r3, #0]
 802e72a:	6859      	ldr	r1, [r3, #4]
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	681a      	ldr	r2, [r3, #0]
 802e730:	4b1d      	ldr	r3, [pc, #116]	; (802e7a8 <HAL_I2C_Init+0x11c>)
 802e732:	430b      	orrs	r3, r1
 802e734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	68da      	ldr	r2, [r3, #12]
 802e73c:	687b      	ldr	r3, [r7, #4]
 802e73e:	681b      	ldr	r3, [r3, #0]
 802e740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e746:	687b      	ldr	r3, [r7, #4]
 802e748:	691a      	ldr	r2, [r3, #16]
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	695b      	ldr	r3, [r3, #20]
 802e74e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802e752:	687b      	ldr	r3, [r7, #4]
 802e754:	699b      	ldr	r3, [r3, #24]
 802e756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e758:	687b      	ldr	r3, [r7, #4]
 802e75a:	681b      	ldr	r3, [r3, #0]
 802e75c:	430a      	orrs	r2, r1
 802e75e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802e760:	687b      	ldr	r3, [r7, #4]
 802e762:	69d9      	ldr	r1, [r3, #28]
 802e764:	687b      	ldr	r3, [r7, #4]
 802e766:	6a1a      	ldr	r2, [r3, #32]
 802e768:	687b      	ldr	r3, [r7, #4]
 802e76a:	681b      	ldr	r3, [r3, #0]
 802e76c:	430a      	orrs	r2, r1
 802e76e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	681b      	ldr	r3, [r3, #0]
 802e774:	681a      	ldr	r2, [r3, #0]
 802e776:	687b      	ldr	r3, [r7, #4]
 802e778:	681b      	ldr	r3, [r3, #0]
 802e77a:	f042 0201 	orr.w	r2, r2, #1
 802e77e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	2200      	movs	r2, #0
 802e784:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	2220      	movs	r2, #32
 802e78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802e78e:	687b      	ldr	r3, [r7, #4]
 802e790:	2200      	movs	r2, #0
 802e792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e794:	687b      	ldr	r3, [r7, #4]
 802e796:	2200      	movs	r2, #0
 802e798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802e79c:	2300      	movs	r3, #0
}
 802e79e:	4618      	mov	r0, r3
 802e7a0:	3708      	adds	r7, #8
 802e7a2:	46bd      	mov	sp, r7
 802e7a4:	bd80      	pop	{r7, pc}
 802e7a6:	bf00      	nop
 802e7a8:	02008000 	.word	0x02008000

0802e7ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e7ac:	b580      	push	{r7, lr}
 802e7ae:	b084      	sub	sp, #16
 802e7b0:	af00      	add	r7, sp, #0
 802e7b2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e7b4:	687b      	ldr	r3, [r7, #4]
 802e7b6:	681b      	ldr	r3, [r3, #0]
 802e7b8:	699b      	ldr	r3, [r3, #24]
 802e7ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e7bc:	687b      	ldr	r3, [r7, #4]
 802e7be:	681b      	ldr	r3, [r3, #0]
 802e7c0:	681b      	ldr	r3, [r3, #0]
 802e7c2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802e7c4:	687b      	ldr	r3, [r7, #4]
 802e7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e7c8:	2b00      	cmp	r3, #0
 802e7ca:	d005      	beq.n	802e7d8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802e7cc:	687b      	ldr	r3, [r7, #4]
 802e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e7d0:	68ba      	ldr	r2, [r7, #8]
 802e7d2:	68f9      	ldr	r1, [r7, #12]
 802e7d4:	6878      	ldr	r0, [r7, #4]
 802e7d6:	4798      	blx	r3
  }
}
 802e7d8:	bf00      	nop
 802e7da:	3710      	adds	r7, #16
 802e7dc:	46bd      	mov	sp, r7
 802e7de:	bd80      	pop	{r7, pc}

0802e7e0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e7e0:	b580      	push	{r7, lr}
 802e7e2:	b086      	sub	sp, #24
 802e7e4:	af00      	add	r7, sp, #0
 802e7e6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e7e8:	687b      	ldr	r3, [r7, #4]
 802e7ea:	681b      	ldr	r3, [r3, #0]
 802e7ec:	699b      	ldr	r3, [r3, #24]
 802e7ee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e7f0:	687b      	ldr	r3, [r7, #4]
 802e7f2:	681b      	ldr	r3, [r3, #0]
 802e7f4:	681b      	ldr	r3, [r3, #0]
 802e7f6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e7f8:	697b      	ldr	r3, [r7, #20]
 802e7fa:	0a1b      	lsrs	r3, r3, #8
 802e7fc:	f003 0301 	and.w	r3, r3, #1
 802e800:	2b00      	cmp	r3, #0
 802e802:	d010      	beq.n	802e826 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e804:	693b      	ldr	r3, [r7, #16]
 802e806:	09db      	lsrs	r3, r3, #7
 802e808:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e80c:	2b00      	cmp	r3, #0
 802e80e:	d00a      	beq.n	802e826 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802e810:	687b      	ldr	r3, [r7, #4]
 802e812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e814:	f043 0201 	orr.w	r2, r3, #1
 802e818:	687b      	ldr	r3, [r7, #4]
 802e81a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	681b      	ldr	r3, [r3, #0]
 802e820:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e824:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e826:	697b      	ldr	r3, [r7, #20]
 802e828:	0a9b      	lsrs	r3, r3, #10
 802e82a:	f003 0301 	and.w	r3, r3, #1
 802e82e:	2b00      	cmp	r3, #0
 802e830:	d010      	beq.n	802e854 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e832:	693b      	ldr	r3, [r7, #16]
 802e834:	09db      	lsrs	r3, r3, #7
 802e836:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e83a:	2b00      	cmp	r3, #0
 802e83c:	d00a      	beq.n	802e854 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802e83e:	687b      	ldr	r3, [r7, #4]
 802e840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e842:	f043 0208 	orr.w	r2, r3, #8
 802e846:	687b      	ldr	r3, [r7, #4]
 802e848:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802e84a:	687b      	ldr	r3, [r7, #4]
 802e84c:	681b      	ldr	r3, [r3, #0]
 802e84e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e852:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e854:	697b      	ldr	r3, [r7, #20]
 802e856:	0a5b      	lsrs	r3, r3, #9
 802e858:	f003 0301 	and.w	r3, r3, #1
 802e85c:	2b00      	cmp	r3, #0
 802e85e:	d010      	beq.n	802e882 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e860:	693b      	ldr	r3, [r7, #16]
 802e862:	09db      	lsrs	r3, r3, #7
 802e864:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e868:	2b00      	cmp	r3, #0
 802e86a:	d00a      	beq.n	802e882 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802e86c:	687b      	ldr	r3, [r7, #4]
 802e86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e870:	f043 0202 	orr.w	r2, r3, #2
 802e874:	687b      	ldr	r3, [r7, #4]
 802e876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802e878:	687b      	ldr	r3, [r7, #4]
 802e87a:	681b      	ldr	r3, [r3, #0]
 802e87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 802e880:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802e882:	687b      	ldr	r3, [r7, #4]
 802e884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e886:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802e888:	68fb      	ldr	r3, [r7, #12]
 802e88a:	f003 030b 	and.w	r3, r3, #11
 802e88e:	2b00      	cmp	r3, #0
 802e890:	d003      	beq.n	802e89a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802e892:	68f9      	ldr	r1, [r7, #12]
 802e894:	6878      	ldr	r0, [r7, #4]
 802e896:	f000 fc77 	bl	802f188 <I2C_ITError>
  }
}
 802e89a:	bf00      	nop
 802e89c:	3718      	adds	r7, #24
 802e89e:	46bd      	mov	sp, r7
 802e8a0:	bd80      	pop	{r7, pc}

0802e8a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8a2:	b480      	push	{r7}
 802e8a4:	b083      	sub	sp, #12
 802e8a6:	af00      	add	r7, sp, #0
 802e8a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802e8aa:	bf00      	nop
 802e8ac:	370c      	adds	r7, #12
 802e8ae:	46bd      	mov	sp, r7
 802e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8b4:	4770      	bx	lr

0802e8b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8b6:	b480      	push	{r7}
 802e8b8:	b083      	sub	sp, #12
 802e8ba:	af00      	add	r7, sp, #0
 802e8bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802e8be:	bf00      	nop
 802e8c0:	370c      	adds	r7, #12
 802e8c2:	46bd      	mov	sp, r7
 802e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8c8:	4770      	bx	lr

0802e8ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802e8ca:	b480      	push	{r7}
 802e8cc:	b083      	sub	sp, #12
 802e8ce:	af00      	add	r7, sp, #0
 802e8d0:	6078      	str	r0, [r7, #4]
 802e8d2:	460b      	mov	r3, r1
 802e8d4:	70fb      	strb	r3, [r7, #3]
 802e8d6:	4613      	mov	r3, r2
 802e8d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802e8da:	bf00      	nop
 802e8dc:	370c      	adds	r7, #12
 802e8de:	46bd      	mov	sp, r7
 802e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8e4:	4770      	bx	lr

0802e8e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8e6:	b480      	push	{r7}
 802e8e8:	b083      	sub	sp, #12
 802e8ea:	af00      	add	r7, sp, #0
 802e8ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802e8ee:	bf00      	nop
 802e8f0:	370c      	adds	r7, #12
 802e8f2:	46bd      	mov	sp, r7
 802e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8f8:	4770      	bx	lr

0802e8fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802e8fa:	b480      	push	{r7}
 802e8fc:	b083      	sub	sp, #12
 802e8fe:	af00      	add	r7, sp, #0
 802e900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802e902:	bf00      	nop
 802e904:	370c      	adds	r7, #12
 802e906:	46bd      	mov	sp, r7
 802e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e90c:	4770      	bx	lr

0802e90e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e90e:	b480      	push	{r7}
 802e910:	b083      	sub	sp, #12
 802e912:	af00      	add	r7, sp, #0
 802e914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802e916:	bf00      	nop
 802e918:	370c      	adds	r7, #12
 802e91a:	46bd      	mov	sp, r7
 802e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e920:	4770      	bx	lr

0802e922 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802e922:	b580      	push	{r7, lr}
 802e924:	b086      	sub	sp, #24
 802e926:	af00      	add	r7, sp, #0
 802e928:	60f8      	str	r0, [r7, #12]
 802e92a:	60b9      	str	r1, [r7, #8]
 802e92c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802e92e:	68fb      	ldr	r3, [r7, #12]
 802e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e932:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802e934:	68bb      	ldr	r3, [r7, #8]
 802e936:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802e938:	68fb      	ldr	r3, [r7, #12]
 802e93a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802e93e:	2b01      	cmp	r3, #1
 802e940:	d101      	bne.n	802e946 <I2C_Slave_ISR_IT+0x24>
 802e942:	2302      	movs	r3, #2
 802e944:	e0ec      	b.n	802eb20 <I2C_Slave_ISR_IT+0x1fe>
 802e946:	68fb      	ldr	r3, [r7, #12]
 802e948:	2201      	movs	r2, #1
 802e94a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e94e:	693b      	ldr	r3, [r7, #16]
 802e950:	095b      	lsrs	r3, r3, #5
 802e952:	f003 0301 	and.w	r3, r3, #1
 802e956:	2b00      	cmp	r3, #0
 802e958:	d009      	beq.n	802e96e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802e95a:	687b      	ldr	r3, [r7, #4]
 802e95c:	095b      	lsrs	r3, r3, #5
 802e95e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e962:	2b00      	cmp	r3, #0
 802e964:	d003      	beq.n	802e96e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802e966:	6939      	ldr	r1, [r7, #16]
 802e968:	68f8      	ldr	r0, [r7, #12]
 802e96a:	f000 f9bf 	bl	802ecec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e96e:	693b      	ldr	r3, [r7, #16]
 802e970:	091b      	lsrs	r3, r3, #4
 802e972:	f003 0301 	and.w	r3, r3, #1
 802e976:	2b00      	cmp	r3, #0
 802e978:	d04d      	beq.n	802ea16 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802e97a:	687b      	ldr	r3, [r7, #4]
 802e97c:	091b      	lsrs	r3, r3, #4
 802e97e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e982:	2b00      	cmp	r3, #0
 802e984:	d047      	beq.n	802ea16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802e986:	68fb      	ldr	r3, [r7, #12]
 802e988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e98a:	b29b      	uxth	r3, r3
 802e98c:	2b00      	cmp	r3, #0
 802e98e:	d128      	bne.n	802e9e2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802e990:	68fb      	ldr	r3, [r7, #12]
 802e992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e996:	b2db      	uxtb	r3, r3
 802e998:	2b28      	cmp	r3, #40	; 0x28
 802e99a:	d108      	bne.n	802e9ae <I2C_Slave_ISR_IT+0x8c>
 802e99c:	697b      	ldr	r3, [r7, #20]
 802e99e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802e9a2:	d104      	bne.n	802e9ae <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802e9a4:	6939      	ldr	r1, [r7, #16]
 802e9a6:	68f8      	ldr	r0, [r7, #12]
 802e9a8:	f000 fb98 	bl	802f0dc <I2C_ITListenCplt>
 802e9ac:	e032      	b.n	802ea14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802e9ae:	68fb      	ldr	r3, [r7, #12]
 802e9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e9b4:	b2db      	uxtb	r3, r3
 802e9b6:	2b29      	cmp	r3, #41	; 0x29
 802e9b8:	d10e      	bne.n	802e9d8 <I2C_Slave_ISR_IT+0xb6>
 802e9ba:	697b      	ldr	r3, [r7, #20]
 802e9bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e9c0:	d00a      	beq.n	802e9d8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e9c2:	68fb      	ldr	r3, [r7, #12]
 802e9c4:	681b      	ldr	r3, [r3, #0]
 802e9c6:	2210      	movs	r2, #16
 802e9c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802e9ca:	68f8      	ldr	r0, [r7, #12]
 802e9cc:	f000 fcd3 	bl	802f376 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802e9d0:	68f8      	ldr	r0, [r7, #12]
 802e9d2:	f000 f92d 	bl	802ec30 <I2C_ITSlaveSeqCplt>
 802e9d6:	e01d      	b.n	802ea14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e9d8:	68fb      	ldr	r3, [r7, #12]
 802e9da:	681b      	ldr	r3, [r3, #0]
 802e9dc:	2210      	movs	r2, #16
 802e9de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802e9e0:	e096      	b.n	802eb10 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e9e2:	68fb      	ldr	r3, [r7, #12]
 802e9e4:	681b      	ldr	r3, [r3, #0]
 802e9e6:	2210      	movs	r2, #16
 802e9e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802e9ea:	68fb      	ldr	r3, [r7, #12]
 802e9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e9ee:	f043 0204 	orr.w	r2, r3, #4
 802e9f2:	68fb      	ldr	r3, [r7, #12]
 802e9f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802e9f6:	697b      	ldr	r3, [r7, #20]
 802e9f8:	2b00      	cmp	r3, #0
 802e9fa:	d004      	beq.n	802ea06 <I2C_Slave_ISR_IT+0xe4>
 802e9fc:	697b      	ldr	r3, [r7, #20]
 802e9fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802ea02:	f040 8085 	bne.w	802eb10 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802ea06:	68fb      	ldr	r3, [r7, #12]
 802ea08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ea0a:	4619      	mov	r1, r3
 802ea0c:	68f8      	ldr	r0, [r7, #12]
 802ea0e:	f000 fbbb 	bl	802f188 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802ea12:	e07d      	b.n	802eb10 <I2C_Slave_ISR_IT+0x1ee>
 802ea14:	e07c      	b.n	802eb10 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea16:	693b      	ldr	r3, [r7, #16]
 802ea18:	089b      	lsrs	r3, r3, #2
 802ea1a:	f003 0301 	and.w	r3, r3, #1
 802ea1e:	2b00      	cmp	r3, #0
 802ea20:	d030      	beq.n	802ea84 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802ea22:	687b      	ldr	r3, [r7, #4]
 802ea24:	089b      	lsrs	r3, r3, #2
 802ea26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea2a:	2b00      	cmp	r3, #0
 802ea2c:	d02a      	beq.n	802ea84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802ea2e:	68fb      	ldr	r3, [r7, #12]
 802ea30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea32:	b29b      	uxth	r3, r3
 802ea34:	2b00      	cmp	r3, #0
 802ea36:	d018      	beq.n	802ea6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ea38:	68fb      	ldr	r3, [r7, #12]
 802ea3a:	681b      	ldr	r3, [r3, #0]
 802ea3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ea3e:	68fb      	ldr	r3, [r7, #12]
 802ea40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea42:	b2d2      	uxtb	r2, r2
 802ea44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ea46:	68fb      	ldr	r3, [r7, #12]
 802ea48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea4a:	1c5a      	adds	r2, r3, #1
 802ea4c:	68fb      	ldr	r3, [r7, #12]
 802ea4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802ea50:	68fb      	ldr	r3, [r7, #12]
 802ea52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ea54:	3b01      	subs	r3, #1
 802ea56:	b29a      	uxth	r2, r3
 802ea58:	68fb      	ldr	r3, [r7, #12]
 802ea5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ea5c:	68fb      	ldr	r3, [r7, #12]
 802ea5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea60:	b29b      	uxth	r3, r3
 802ea62:	3b01      	subs	r3, #1
 802ea64:	b29a      	uxth	r2, r3
 802ea66:	68fb      	ldr	r3, [r7, #12]
 802ea68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802ea6a:	68fb      	ldr	r3, [r7, #12]
 802ea6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea6e:	b29b      	uxth	r3, r3
 802ea70:	2b00      	cmp	r3, #0
 802ea72:	d14f      	bne.n	802eb14 <I2C_Slave_ISR_IT+0x1f2>
 802ea74:	697b      	ldr	r3, [r7, #20]
 802ea76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ea7a:	d04b      	beq.n	802eb14 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802ea7c:	68f8      	ldr	r0, [r7, #12]
 802ea7e:	f000 f8d7 	bl	802ec30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802ea82:	e047      	b.n	802eb14 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802ea84:	693b      	ldr	r3, [r7, #16]
 802ea86:	08db      	lsrs	r3, r3, #3
 802ea88:	f003 0301 	and.w	r3, r3, #1
 802ea8c:	2b00      	cmp	r3, #0
 802ea8e:	d00a      	beq.n	802eaa6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802ea90:	687b      	ldr	r3, [r7, #4]
 802ea92:	08db      	lsrs	r3, r3, #3
 802ea94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802ea98:	2b00      	cmp	r3, #0
 802ea9a:	d004      	beq.n	802eaa6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802ea9c:	6939      	ldr	r1, [r7, #16]
 802ea9e:	68f8      	ldr	r0, [r7, #12]
 802eaa0:	f000 f842 	bl	802eb28 <I2C_ITAddrCplt>
 802eaa4:	e037      	b.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eaa6:	693b      	ldr	r3, [r7, #16]
 802eaa8:	085b      	lsrs	r3, r3, #1
 802eaaa:	f003 0301 	and.w	r3, r3, #1
 802eaae:	2b00      	cmp	r3, #0
 802eab0:	d031      	beq.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802eab2:	687b      	ldr	r3, [r7, #4]
 802eab4:	085b      	lsrs	r3, r3, #1
 802eab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eaba:	2b00      	cmp	r3, #0
 802eabc:	d02b      	beq.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802eabe:	68fb      	ldr	r3, [r7, #12]
 802eac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eac2:	b29b      	uxth	r3, r3
 802eac4:	2b00      	cmp	r3, #0
 802eac6:	d018      	beq.n	802eafa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802eac8:	68fb      	ldr	r3, [r7, #12]
 802eaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eacc:	781a      	ldrb	r2, [r3, #0]
 802eace:	68fb      	ldr	r3, [r7, #12]
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ead4:	68fb      	ldr	r3, [r7, #12]
 802ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ead8:	1c5a      	adds	r2, r3, #1
 802eada:	68fb      	ldr	r3, [r7, #12]
 802eadc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802eade:	68fb      	ldr	r3, [r7, #12]
 802eae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eae2:	b29b      	uxth	r3, r3
 802eae4:	3b01      	subs	r3, #1
 802eae6:	b29a      	uxth	r2, r3
 802eae8:	68fb      	ldr	r3, [r7, #12]
 802eaea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802eaec:	68fb      	ldr	r3, [r7, #12]
 802eaee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802eaf0:	3b01      	subs	r3, #1
 802eaf2:	b29a      	uxth	r2, r3
 802eaf4:	68fb      	ldr	r3, [r7, #12]
 802eaf6:	851a      	strh	r2, [r3, #40]	; 0x28
 802eaf8:	e00d      	b.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802eafa:	697b      	ldr	r3, [r7, #20]
 802eafc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802eb00:	d002      	beq.n	802eb08 <I2C_Slave_ISR_IT+0x1e6>
 802eb02:	697b      	ldr	r3, [r7, #20]
 802eb04:	2b00      	cmp	r3, #0
 802eb06:	d106      	bne.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802eb08:	68f8      	ldr	r0, [r7, #12]
 802eb0a:	f000 f891 	bl	802ec30 <I2C_ITSlaveSeqCplt>
 802eb0e:	e002      	b.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802eb10:	bf00      	nop
 802eb12:	e000      	b.n	802eb16 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802eb14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802eb16:	68fb      	ldr	r3, [r7, #12]
 802eb18:	2200      	movs	r2, #0
 802eb1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802eb1e:	2300      	movs	r3, #0
}
 802eb20:	4618      	mov	r0, r3
 802eb22:	3718      	adds	r7, #24
 802eb24:	46bd      	mov	sp, r7
 802eb26:	bd80      	pop	{r7, pc}

0802eb28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802eb28:	b580      	push	{r7, lr}
 802eb2a:	b084      	sub	sp, #16
 802eb2c:	af00      	add	r7, sp, #0
 802eb2e:	6078      	str	r0, [r7, #4]
 802eb30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802eb32:	687b      	ldr	r3, [r7, #4]
 802eb34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eb38:	b2db      	uxtb	r3, r3
 802eb3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802eb3e:	2b28      	cmp	r3, #40	; 0x28
 802eb40:	d16a      	bne.n	802ec18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 802eb42:	687b      	ldr	r3, [r7, #4]
 802eb44:	681b      	ldr	r3, [r3, #0]
 802eb46:	699b      	ldr	r3, [r3, #24]
 802eb48:	0c1b      	lsrs	r3, r3, #16
 802eb4a:	b2db      	uxtb	r3, r3
 802eb4c:	f003 0301 	and.w	r3, r3, #1
 802eb50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 802eb52:	687b      	ldr	r3, [r7, #4]
 802eb54:	681b      	ldr	r3, [r3, #0]
 802eb56:	699b      	ldr	r3, [r3, #24]
 802eb58:	0c1b      	lsrs	r3, r3, #16
 802eb5a:	b29b      	uxth	r3, r3
 802eb5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802eb60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802eb62:	687b      	ldr	r3, [r7, #4]
 802eb64:	681b      	ldr	r3, [r3, #0]
 802eb66:	689b      	ldr	r3, [r3, #8]
 802eb68:	b29b      	uxth	r3, r3
 802eb6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802eb6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 802eb70:	687b      	ldr	r3, [r7, #4]
 802eb72:	681b      	ldr	r3, [r3, #0]
 802eb74:	68db      	ldr	r3, [r3, #12]
 802eb76:	b29b      	uxth	r3, r3
 802eb78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802eb7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	68db      	ldr	r3, [r3, #12]
 802eb82:	2b02      	cmp	r3, #2
 802eb84:	d138      	bne.n	802ebf8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802eb86:	897b      	ldrh	r3, [r7, #10]
 802eb88:	09db      	lsrs	r3, r3, #7
 802eb8a:	b29a      	uxth	r2, r3
 802eb8c:	89bb      	ldrh	r3, [r7, #12]
 802eb8e:	4053      	eors	r3, r2
 802eb90:	b29b      	uxth	r3, r3
 802eb92:	f003 0306 	and.w	r3, r3, #6
 802eb96:	2b00      	cmp	r3, #0
 802eb98:	d11c      	bne.n	802ebd4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 802eb9a:	897b      	ldrh	r3, [r7, #10]
 802eb9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 802eb9e:	687b      	ldr	r3, [r7, #4]
 802eba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eba2:	1c5a      	adds	r2, r3, #1
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 802eba8:	687b      	ldr	r3, [r7, #4]
 802ebaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ebac:	2b02      	cmp	r3, #2
 802ebae:	d13b      	bne.n	802ec28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 802ebb0:	687b      	ldr	r3, [r7, #4]
 802ebb2:	2200      	movs	r2, #0
 802ebb4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ebb6:	687b      	ldr	r3, [r7, #4]
 802ebb8:	681b      	ldr	r3, [r3, #0]
 802ebba:	2208      	movs	r2, #8
 802ebbc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	2200      	movs	r2, #0
 802ebc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ebc6:	89ba      	ldrh	r2, [r7, #12]
 802ebc8:	7bfb      	ldrb	r3, [r7, #15]
 802ebca:	4619      	mov	r1, r3
 802ebcc:	6878      	ldr	r0, [r7, #4]
 802ebce:	f7ff fe7c 	bl	802e8ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802ebd2:	e029      	b.n	802ec28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802ebd4:	893b      	ldrh	r3, [r7, #8]
 802ebd6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ebd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ebdc:	6878      	ldr	r0, [r7, #4]
 802ebde:	f000 fc0c 	bl	802f3fa <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802ebe2:	687b      	ldr	r3, [r7, #4]
 802ebe4:	2200      	movs	r2, #0
 802ebe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ebea:	89ba      	ldrh	r2, [r7, #12]
 802ebec:	7bfb      	ldrb	r3, [r7, #15]
 802ebee:	4619      	mov	r1, r3
 802ebf0:	6878      	ldr	r0, [r7, #4]
 802ebf2:	f7ff fe6a 	bl	802e8ca <HAL_I2C_AddrCallback>
}
 802ebf6:	e017      	b.n	802ec28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ebf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ebfc:	6878      	ldr	r0, [r7, #4]
 802ebfe:	f000 fbfc 	bl	802f3fa <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 802ec02:	687b      	ldr	r3, [r7, #4]
 802ec04:	2200      	movs	r2, #0
 802ec06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec0a:	89ba      	ldrh	r2, [r7, #12]
 802ec0c:	7bfb      	ldrb	r3, [r7, #15]
 802ec0e:	4619      	mov	r1, r3
 802ec10:	6878      	ldr	r0, [r7, #4]
 802ec12:	f7ff fe5a 	bl	802e8ca <HAL_I2C_AddrCallback>
}
 802ec16:	e007      	b.n	802ec28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ec18:	687b      	ldr	r3, [r7, #4]
 802ec1a:	681b      	ldr	r3, [r3, #0]
 802ec1c:	2208      	movs	r2, #8
 802ec1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802ec20:	687b      	ldr	r3, [r7, #4]
 802ec22:	2200      	movs	r2, #0
 802ec24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 802ec28:	bf00      	nop
 802ec2a:	3710      	adds	r7, #16
 802ec2c:	46bd      	mov	sp, r7
 802ec2e:	bd80      	pop	{r7, pc}

0802ec30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802ec30:	b580      	push	{r7, lr}
 802ec32:	b084      	sub	sp, #16
 802ec34:	af00      	add	r7, sp, #0
 802ec36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ec38:	687b      	ldr	r3, [r7, #4]
 802ec3a:	681b      	ldr	r3, [r3, #0]
 802ec3c:	681b      	ldr	r3, [r3, #0]
 802ec3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ec40:	687b      	ldr	r3, [r7, #4]
 802ec42:	2200      	movs	r2, #0
 802ec44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ec48:	68fb      	ldr	r3, [r7, #12]
 802ec4a:	0b9b      	lsrs	r3, r3, #14
 802ec4c:	f003 0301 	and.w	r3, r3, #1
 802ec50:	2b00      	cmp	r3, #0
 802ec52:	d008      	beq.n	802ec66 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ec54:	687b      	ldr	r3, [r7, #4]
 802ec56:	681b      	ldr	r3, [r3, #0]
 802ec58:	681a      	ldr	r2, [r3, #0]
 802ec5a:	687b      	ldr	r3, [r7, #4]
 802ec5c:	681b      	ldr	r3, [r3, #0]
 802ec5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ec62:	601a      	str	r2, [r3, #0]
 802ec64:	e00d      	b.n	802ec82 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ec66:	68fb      	ldr	r3, [r7, #12]
 802ec68:	0bdb      	lsrs	r3, r3, #15
 802ec6a:	f003 0301 	and.w	r3, r3, #1
 802ec6e:	2b00      	cmp	r3, #0
 802ec70:	d007      	beq.n	802ec82 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ec72:	687b      	ldr	r3, [r7, #4]
 802ec74:	681b      	ldr	r3, [r3, #0]
 802ec76:	681a      	ldr	r2, [r3, #0]
 802ec78:	687b      	ldr	r3, [r7, #4]
 802ec7a:	681b      	ldr	r3, [r3, #0]
 802ec7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ec80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802ec82:	687b      	ldr	r3, [r7, #4]
 802ec84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ec88:	b2db      	uxtb	r3, r3
 802ec8a:	2b29      	cmp	r3, #41	; 0x29
 802ec8c:	d112      	bne.n	802ecb4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ec8e:	687b      	ldr	r3, [r7, #4]
 802ec90:	2228      	movs	r2, #40	; 0x28
 802ec92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ec96:	687b      	ldr	r3, [r7, #4]
 802ec98:	2221      	movs	r2, #33	; 0x21
 802ec9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 802ec9c:	2101      	movs	r1, #1
 802ec9e:	6878      	ldr	r0, [r7, #4]
 802eca0:	f000 fbab 	bl	802f3fa <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802eca4:	687b      	ldr	r3, [r7, #4]
 802eca6:	2200      	movs	r2, #0
 802eca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802ecac:	6878      	ldr	r0, [r7, #4]
 802ecae:	f7ff fdf8 	bl	802e8a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802ecb2:	e017      	b.n	802ece4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802ecb4:	687b      	ldr	r3, [r7, #4]
 802ecb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ecba:	b2db      	uxtb	r3, r3
 802ecbc:	2b2a      	cmp	r3, #42	; 0x2a
 802ecbe:	d111      	bne.n	802ece4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ecc0:	687b      	ldr	r3, [r7, #4]
 802ecc2:	2228      	movs	r2, #40	; 0x28
 802ecc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ecc8:	687b      	ldr	r3, [r7, #4]
 802ecca:	2222      	movs	r2, #34	; 0x22
 802eccc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 802ecce:	2102      	movs	r1, #2
 802ecd0:	6878      	ldr	r0, [r7, #4]
 802ecd2:	f000 fb92 	bl	802f3fa <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 802ecd6:	687b      	ldr	r3, [r7, #4]
 802ecd8:	2200      	movs	r2, #0
 802ecda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802ecde:	6878      	ldr	r0, [r7, #4]
 802ece0:	f7ff fde9 	bl	802e8b6 <HAL_I2C_SlaveRxCpltCallback>
}
 802ece4:	bf00      	nop
 802ece6:	3710      	adds	r7, #16
 802ece8:	46bd      	mov	sp, r7
 802ecea:	bd80      	pop	{r7, pc}

0802ecec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ecec:	b580      	push	{r7, lr}
 802ecee:	b086      	sub	sp, #24
 802ecf0:	af00      	add	r7, sp, #0
 802ecf2:	6078      	str	r0, [r7, #4]
 802ecf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ecf6:	687b      	ldr	r3, [r7, #4]
 802ecf8:	681b      	ldr	r3, [r3, #0]
 802ecfa:	681b      	ldr	r3, [r3, #0]
 802ecfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 802ecfe:	683b      	ldr	r3, [r7, #0]
 802ed00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802ed02:	687b      	ldr	r3, [r7, #4]
 802ed04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ed08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	681b      	ldr	r3, [r3, #0]
 802ed0e:	2220      	movs	r2, #32
 802ed10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802ed12:	7bfb      	ldrb	r3, [r7, #15]
 802ed14:	2b21      	cmp	r3, #33	; 0x21
 802ed16:	d002      	beq.n	802ed1e <I2C_ITSlaveCplt+0x32>
 802ed18:	7bfb      	ldrb	r3, [r7, #15]
 802ed1a:	2b29      	cmp	r3, #41	; 0x29
 802ed1c:	d108      	bne.n	802ed30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802ed1e:	f248 0101 	movw	r1, #32769	; 0x8001
 802ed22:	6878      	ldr	r0, [r7, #4]
 802ed24:	f000 fb69 	bl	802f3fa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ed28:	687b      	ldr	r3, [r7, #4]
 802ed2a:	2221      	movs	r2, #33	; 0x21
 802ed2c:	631a      	str	r2, [r3, #48]	; 0x30
 802ed2e:	e00d      	b.n	802ed4c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802ed30:	7bfb      	ldrb	r3, [r7, #15]
 802ed32:	2b22      	cmp	r3, #34	; 0x22
 802ed34:	d002      	beq.n	802ed3c <I2C_ITSlaveCplt+0x50>
 802ed36:	7bfb      	ldrb	r3, [r7, #15]
 802ed38:	2b2a      	cmp	r3, #42	; 0x2a
 802ed3a:	d107      	bne.n	802ed4c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 802ed3c:	f248 0102 	movw	r1, #32770	; 0x8002
 802ed40:	6878      	ldr	r0, [r7, #4]
 802ed42:	f000 fb5a 	bl	802f3fa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ed46:	687b      	ldr	r3, [r7, #4]
 802ed48:	2222      	movs	r2, #34	; 0x22
 802ed4a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 802ed4c:	687b      	ldr	r3, [r7, #4]
 802ed4e:	681b      	ldr	r3, [r3, #0]
 802ed50:	685a      	ldr	r2, [r3, #4]
 802ed52:	687b      	ldr	r3, [r7, #4]
 802ed54:	681b      	ldr	r3, [r3, #0]
 802ed56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ed5a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 802ed5c:	687b      	ldr	r3, [r7, #4]
 802ed5e:	681b      	ldr	r3, [r3, #0]
 802ed60:	6859      	ldr	r1, [r3, #4]
 802ed62:	687b      	ldr	r3, [r7, #4]
 802ed64:	681a      	ldr	r2, [r3, #0]
 802ed66:	4b80      	ldr	r3, [pc, #512]	; (802ef68 <I2C_ITSlaveCplt+0x27c>)
 802ed68:	400b      	ands	r3, r1
 802ed6a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 802ed6c:	6878      	ldr	r0, [r7, #4]
 802ed6e:	f000 fb02 	bl	802f376 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ed72:	693b      	ldr	r3, [r7, #16]
 802ed74:	0b9b      	lsrs	r3, r3, #14
 802ed76:	f003 0301 	and.w	r3, r3, #1
 802ed7a:	2b00      	cmp	r3, #0
 802ed7c:	d07a      	beq.n	802ee74 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ed7e:	687b      	ldr	r3, [r7, #4]
 802ed80:	681b      	ldr	r3, [r3, #0]
 802ed82:	681a      	ldr	r2, [r3, #0]
 802ed84:	687b      	ldr	r3, [r7, #4]
 802ed86:	681b      	ldr	r3, [r3, #0]
 802ed88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ed8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802ed8e:	687b      	ldr	r3, [r7, #4]
 802ed90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed92:	2b00      	cmp	r3, #0
 802ed94:	f000 8111 	beq.w	802efba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 802ed98:	687b      	ldr	r3, [r7, #4]
 802ed9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ed9c:	681b      	ldr	r3, [r3, #0]
 802ed9e:	4a73      	ldr	r2, [pc, #460]	; (802ef6c <I2C_ITSlaveCplt+0x280>)
 802eda0:	4293      	cmp	r3, r2
 802eda2:	d059      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eda8:	681b      	ldr	r3, [r3, #0]
 802edaa:	4a71      	ldr	r2, [pc, #452]	; (802ef70 <I2C_ITSlaveCplt+0x284>)
 802edac:	4293      	cmp	r3, r2
 802edae:	d053      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edb4:	681b      	ldr	r3, [r3, #0]
 802edb6:	4a6f      	ldr	r2, [pc, #444]	; (802ef74 <I2C_ITSlaveCplt+0x288>)
 802edb8:	4293      	cmp	r3, r2
 802edba:	d04d      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edbc:	687b      	ldr	r3, [r7, #4]
 802edbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edc0:	681b      	ldr	r3, [r3, #0]
 802edc2:	4a6d      	ldr	r2, [pc, #436]	; (802ef78 <I2C_ITSlaveCplt+0x28c>)
 802edc4:	4293      	cmp	r3, r2
 802edc6:	d047      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edc8:	687b      	ldr	r3, [r7, #4]
 802edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edcc:	681b      	ldr	r3, [r3, #0]
 802edce:	4a6b      	ldr	r2, [pc, #428]	; (802ef7c <I2C_ITSlaveCplt+0x290>)
 802edd0:	4293      	cmp	r3, r2
 802edd2:	d041      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edd4:	687b      	ldr	r3, [r7, #4]
 802edd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edd8:	681b      	ldr	r3, [r3, #0]
 802edda:	4a69      	ldr	r2, [pc, #420]	; (802ef80 <I2C_ITSlaveCplt+0x294>)
 802eddc:	4293      	cmp	r3, r2
 802edde:	d03b      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ede0:	687b      	ldr	r3, [r7, #4]
 802ede2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ede4:	681b      	ldr	r3, [r3, #0]
 802ede6:	4a67      	ldr	r2, [pc, #412]	; (802ef84 <I2C_ITSlaveCplt+0x298>)
 802ede8:	4293      	cmp	r3, r2
 802edea:	d035      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edec:	687b      	ldr	r3, [r7, #4]
 802edee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edf0:	681b      	ldr	r3, [r3, #0]
 802edf2:	4a65      	ldr	r2, [pc, #404]	; (802ef88 <I2C_ITSlaveCplt+0x29c>)
 802edf4:	4293      	cmp	r3, r2
 802edf6:	d02f      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802edf8:	687b      	ldr	r3, [r7, #4]
 802edfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edfc:	681b      	ldr	r3, [r3, #0]
 802edfe:	4a63      	ldr	r2, [pc, #396]	; (802ef8c <I2C_ITSlaveCplt+0x2a0>)
 802ee00:	4293      	cmp	r3, r2
 802ee02:	d029      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee04:	687b      	ldr	r3, [r7, #4]
 802ee06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee08:	681b      	ldr	r3, [r3, #0]
 802ee0a:	4a61      	ldr	r2, [pc, #388]	; (802ef90 <I2C_ITSlaveCplt+0x2a4>)
 802ee0c:	4293      	cmp	r3, r2
 802ee0e:	d023      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee14:	681b      	ldr	r3, [r3, #0]
 802ee16:	4a5f      	ldr	r2, [pc, #380]	; (802ef94 <I2C_ITSlaveCplt+0x2a8>)
 802ee18:	4293      	cmp	r3, r2
 802ee1a:	d01d      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee1c:	687b      	ldr	r3, [r7, #4]
 802ee1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee20:	681b      	ldr	r3, [r3, #0]
 802ee22:	4a5d      	ldr	r2, [pc, #372]	; (802ef98 <I2C_ITSlaveCplt+0x2ac>)
 802ee24:	4293      	cmp	r3, r2
 802ee26:	d017      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee28:	687b      	ldr	r3, [r7, #4]
 802ee2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee2c:	681b      	ldr	r3, [r3, #0]
 802ee2e:	4a5b      	ldr	r2, [pc, #364]	; (802ef9c <I2C_ITSlaveCplt+0x2b0>)
 802ee30:	4293      	cmp	r3, r2
 802ee32:	d011      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee34:	687b      	ldr	r3, [r7, #4]
 802ee36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee38:	681b      	ldr	r3, [r3, #0]
 802ee3a:	4a59      	ldr	r2, [pc, #356]	; (802efa0 <I2C_ITSlaveCplt+0x2b4>)
 802ee3c:	4293      	cmp	r3, r2
 802ee3e:	d00b      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee40:	687b      	ldr	r3, [r7, #4]
 802ee42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee44:	681b      	ldr	r3, [r3, #0]
 802ee46:	4a57      	ldr	r2, [pc, #348]	; (802efa4 <I2C_ITSlaveCplt+0x2b8>)
 802ee48:	4293      	cmp	r3, r2
 802ee4a:	d005      	beq.n	802ee58 <I2C_ITSlaveCplt+0x16c>
 802ee4c:	687b      	ldr	r3, [r7, #4]
 802ee4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee50:	681b      	ldr	r3, [r3, #0]
 802ee52:	4a55      	ldr	r2, [pc, #340]	; (802efa8 <I2C_ITSlaveCplt+0x2bc>)
 802ee54:	4293      	cmp	r3, r2
 802ee56:	d105      	bne.n	802ee64 <I2C_ITSlaveCplt+0x178>
 802ee58:	687b      	ldr	r3, [r7, #4]
 802ee5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee5c:	681b      	ldr	r3, [r3, #0]
 802ee5e:	685b      	ldr	r3, [r3, #4]
 802ee60:	b29b      	uxth	r3, r3
 802ee62:	e004      	b.n	802ee6e <I2C_ITSlaveCplt+0x182>
 802ee64:	687b      	ldr	r3, [r7, #4]
 802ee66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee68:	681b      	ldr	r3, [r3, #0]
 802ee6a:	685b      	ldr	r3, [r3, #4]
 802ee6c:	b29b      	uxth	r3, r3
 802ee6e:	687a      	ldr	r2, [r7, #4]
 802ee70:	8553      	strh	r3, [r2, #42]	; 0x2a
 802ee72:	e0a2      	b.n	802efba <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ee74:	693b      	ldr	r3, [r7, #16]
 802ee76:	0bdb      	lsrs	r3, r3, #15
 802ee78:	f003 0301 	and.w	r3, r3, #1
 802ee7c:	2b00      	cmp	r3, #0
 802ee7e:	f000 809c 	beq.w	802efba <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ee82:	687b      	ldr	r3, [r7, #4]
 802ee84:	681b      	ldr	r3, [r3, #0]
 802ee86:	681a      	ldr	r2, [r3, #0]
 802ee88:	687b      	ldr	r3, [r7, #4]
 802ee8a:	681b      	ldr	r3, [r3, #0]
 802ee8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ee90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802ee92:	687b      	ldr	r3, [r7, #4]
 802ee94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ee96:	2b00      	cmp	r3, #0
 802ee98:	f000 808f 	beq.w	802efba <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 802ee9c:	687b      	ldr	r3, [r7, #4]
 802ee9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eea0:	681b      	ldr	r3, [r3, #0]
 802eea2:	4a32      	ldr	r2, [pc, #200]	; (802ef6c <I2C_ITSlaveCplt+0x280>)
 802eea4:	4293      	cmp	r3, r2
 802eea6:	d059      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eea8:	687b      	ldr	r3, [r7, #4]
 802eeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeac:	681b      	ldr	r3, [r3, #0]
 802eeae:	4a30      	ldr	r2, [pc, #192]	; (802ef70 <I2C_ITSlaveCplt+0x284>)
 802eeb0:	4293      	cmp	r3, r2
 802eeb2:	d053      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eeb4:	687b      	ldr	r3, [r7, #4]
 802eeb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeb8:	681b      	ldr	r3, [r3, #0]
 802eeba:	4a2e      	ldr	r2, [pc, #184]	; (802ef74 <I2C_ITSlaveCplt+0x288>)
 802eebc:	4293      	cmp	r3, r2
 802eebe:	d04d      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eec0:	687b      	ldr	r3, [r7, #4]
 802eec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eec4:	681b      	ldr	r3, [r3, #0]
 802eec6:	4a2c      	ldr	r2, [pc, #176]	; (802ef78 <I2C_ITSlaveCplt+0x28c>)
 802eec8:	4293      	cmp	r3, r2
 802eeca:	d047      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eecc:	687b      	ldr	r3, [r7, #4]
 802eece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eed0:	681b      	ldr	r3, [r3, #0]
 802eed2:	4a2a      	ldr	r2, [pc, #168]	; (802ef7c <I2C_ITSlaveCplt+0x290>)
 802eed4:	4293      	cmp	r3, r2
 802eed6:	d041      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eed8:	687b      	ldr	r3, [r7, #4]
 802eeda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eedc:	681b      	ldr	r3, [r3, #0]
 802eede:	4a28      	ldr	r2, [pc, #160]	; (802ef80 <I2C_ITSlaveCplt+0x294>)
 802eee0:	4293      	cmp	r3, r2
 802eee2:	d03b      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eee4:	687b      	ldr	r3, [r7, #4]
 802eee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eee8:	681b      	ldr	r3, [r3, #0]
 802eeea:	4a26      	ldr	r2, [pc, #152]	; (802ef84 <I2C_ITSlaveCplt+0x298>)
 802eeec:	4293      	cmp	r3, r2
 802eeee:	d035      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eef0:	687b      	ldr	r3, [r7, #4]
 802eef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eef4:	681b      	ldr	r3, [r3, #0]
 802eef6:	4a24      	ldr	r2, [pc, #144]	; (802ef88 <I2C_ITSlaveCplt+0x29c>)
 802eef8:	4293      	cmp	r3, r2
 802eefa:	d02f      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802eefc:	687b      	ldr	r3, [r7, #4]
 802eefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef00:	681b      	ldr	r3, [r3, #0]
 802ef02:	4a22      	ldr	r2, [pc, #136]	; (802ef8c <I2C_ITSlaveCplt+0x2a0>)
 802ef04:	4293      	cmp	r3, r2
 802ef06:	d029      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef08:	687b      	ldr	r3, [r7, #4]
 802ef0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef0c:	681b      	ldr	r3, [r3, #0]
 802ef0e:	4a20      	ldr	r2, [pc, #128]	; (802ef90 <I2C_ITSlaveCplt+0x2a4>)
 802ef10:	4293      	cmp	r3, r2
 802ef12:	d023      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef14:	687b      	ldr	r3, [r7, #4]
 802ef16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef18:	681b      	ldr	r3, [r3, #0]
 802ef1a:	4a1e      	ldr	r2, [pc, #120]	; (802ef94 <I2C_ITSlaveCplt+0x2a8>)
 802ef1c:	4293      	cmp	r3, r2
 802ef1e:	d01d      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef20:	687b      	ldr	r3, [r7, #4]
 802ef22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef24:	681b      	ldr	r3, [r3, #0]
 802ef26:	4a1c      	ldr	r2, [pc, #112]	; (802ef98 <I2C_ITSlaveCplt+0x2ac>)
 802ef28:	4293      	cmp	r3, r2
 802ef2a:	d017      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef2c:	687b      	ldr	r3, [r7, #4]
 802ef2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef30:	681b      	ldr	r3, [r3, #0]
 802ef32:	4a1a      	ldr	r2, [pc, #104]	; (802ef9c <I2C_ITSlaveCplt+0x2b0>)
 802ef34:	4293      	cmp	r3, r2
 802ef36:	d011      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef38:	687b      	ldr	r3, [r7, #4]
 802ef3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef3c:	681b      	ldr	r3, [r3, #0]
 802ef3e:	4a18      	ldr	r2, [pc, #96]	; (802efa0 <I2C_ITSlaveCplt+0x2b4>)
 802ef40:	4293      	cmp	r3, r2
 802ef42:	d00b      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef44:	687b      	ldr	r3, [r7, #4]
 802ef46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef48:	681b      	ldr	r3, [r3, #0]
 802ef4a:	4a16      	ldr	r2, [pc, #88]	; (802efa4 <I2C_ITSlaveCplt+0x2b8>)
 802ef4c:	4293      	cmp	r3, r2
 802ef4e:	d005      	beq.n	802ef5c <I2C_ITSlaveCplt+0x270>
 802ef50:	687b      	ldr	r3, [r7, #4]
 802ef52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef54:	681b      	ldr	r3, [r3, #0]
 802ef56:	4a14      	ldr	r2, [pc, #80]	; (802efa8 <I2C_ITSlaveCplt+0x2bc>)
 802ef58:	4293      	cmp	r3, r2
 802ef5a:	d127      	bne.n	802efac <I2C_ITSlaveCplt+0x2c0>
 802ef5c:	687b      	ldr	r3, [r7, #4]
 802ef5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef60:	681b      	ldr	r3, [r3, #0]
 802ef62:	685b      	ldr	r3, [r3, #4]
 802ef64:	b29b      	uxth	r3, r3
 802ef66:	e026      	b.n	802efb6 <I2C_ITSlaveCplt+0x2ca>
 802ef68:	fe00e800 	.word	0xfe00e800
 802ef6c:	40020010 	.word	0x40020010
 802ef70:	40020028 	.word	0x40020028
 802ef74:	40020040 	.word	0x40020040
 802ef78:	40020058 	.word	0x40020058
 802ef7c:	40020070 	.word	0x40020070
 802ef80:	40020088 	.word	0x40020088
 802ef84:	400200a0 	.word	0x400200a0
 802ef88:	400200b8 	.word	0x400200b8
 802ef8c:	40020410 	.word	0x40020410
 802ef90:	40020428 	.word	0x40020428
 802ef94:	40020440 	.word	0x40020440
 802ef98:	40020458 	.word	0x40020458
 802ef9c:	40020470 	.word	0x40020470
 802efa0:	40020488 	.word	0x40020488
 802efa4:	400204a0 	.word	0x400204a0
 802efa8:	400204b8 	.word	0x400204b8
 802efac:	687b      	ldr	r3, [r7, #4]
 802efae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802efb0:	681b      	ldr	r3, [r3, #0]
 802efb2:	685b      	ldr	r3, [r3, #4]
 802efb4:	b29b      	uxth	r3, r3
 802efb6:	687a      	ldr	r2, [r7, #4]
 802efb8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 802efba:	697b      	ldr	r3, [r7, #20]
 802efbc:	089b      	lsrs	r3, r3, #2
 802efbe:	f003 0301 	and.w	r3, r3, #1
 802efc2:	2b00      	cmp	r3, #0
 802efc4:	d020      	beq.n	802f008 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802efc6:	697b      	ldr	r3, [r7, #20]
 802efc8:	f023 0304 	bic.w	r3, r3, #4
 802efcc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802efce:	687b      	ldr	r3, [r7, #4]
 802efd0:	681b      	ldr	r3, [r3, #0]
 802efd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802efd4:	687b      	ldr	r3, [r7, #4]
 802efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802efd8:	b2d2      	uxtb	r2, r2
 802efda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802efdc:	687b      	ldr	r3, [r7, #4]
 802efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802efe0:	1c5a      	adds	r2, r3, #1
 802efe2:	687b      	ldr	r3, [r7, #4]
 802efe4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802efe6:	687b      	ldr	r3, [r7, #4]
 802efe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802efea:	2b00      	cmp	r3, #0
 802efec:	d00c      	beq.n	802f008 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 802efee:	687b      	ldr	r3, [r7, #4]
 802eff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802eff2:	3b01      	subs	r3, #1
 802eff4:	b29a      	uxth	r2, r3
 802eff6:	687b      	ldr	r3, [r7, #4]
 802eff8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802effa:	687b      	ldr	r3, [r7, #4]
 802effc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802effe:	b29b      	uxth	r3, r3
 802f000:	3b01      	subs	r3, #1
 802f002:	b29a      	uxth	r2, r3
 802f004:	687b      	ldr	r3, [r7, #4]
 802f006:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802f008:	687b      	ldr	r3, [r7, #4]
 802f00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f00c:	b29b      	uxth	r3, r3
 802f00e:	2b00      	cmp	r3, #0
 802f010:	d005      	beq.n	802f01e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f012:	687b      	ldr	r3, [r7, #4]
 802f014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f016:	f043 0204 	orr.w	r2, r3, #4
 802f01a:	687b      	ldr	r3, [r7, #4]
 802f01c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f01e:	687b      	ldr	r3, [r7, #4]
 802f020:	2200      	movs	r2, #0
 802f022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f026:	687b      	ldr	r3, [r7, #4]
 802f028:	2200      	movs	r2, #0
 802f02a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802f02c:	687b      	ldr	r3, [r7, #4]
 802f02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f030:	2b00      	cmp	r3, #0
 802f032:	d010      	beq.n	802f056 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 802f034:	687b      	ldr	r3, [r7, #4]
 802f036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f038:	4619      	mov	r1, r3
 802f03a:	6878      	ldr	r0, [r7, #4]
 802f03c:	f000 f8a4 	bl	802f188 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802f040:	687b      	ldr	r3, [r7, #4]
 802f042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f046:	b2db      	uxtb	r3, r3
 802f048:	2b28      	cmp	r3, #40	; 0x28
 802f04a:	d141      	bne.n	802f0d0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 802f04c:	6979      	ldr	r1, [r7, #20]
 802f04e:	6878      	ldr	r0, [r7, #4]
 802f050:	f000 f844 	bl	802f0dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f054:	e03c      	b.n	802f0d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 802f056:	687b      	ldr	r3, [r7, #4]
 802f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f05a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802f05e:	d014      	beq.n	802f08a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802f060:	6878      	ldr	r0, [r7, #4]
 802f062:	f7ff fde5 	bl	802ec30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f066:	687b      	ldr	r3, [r7, #4]
 802f068:	4a1b      	ldr	r2, [pc, #108]	; (802f0d8 <I2C_ITSlaveCplt+0x3ec>)
 802f06a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 802f06c:	687b      	ldr	r3, [r7, #4]
 802f06e:	2220      	movs	r2, #32
 802f070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f074:	687b      	ldr	r3, [r7, #4]
 802f076:	2200      	movs	r2, #0
 802f078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f07a:	687b      	ldr	r3, [r7, #4]
 802f07c:	2200      	movs	r2, #0
 802f07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802f082:	6878      	ldr	r0, [r7, #4]
 802f084:	f7ff fc2f 	bl	802e8e6 <HAL_I2C_ListenCpltCallback>
}
 802f088:	e022      	b.n	802f0d0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802f08a:	687b      	ldr	r3, [r7, #4]
 802f08c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f090:	b2db      	uxtb	r3, r3
 802f092:	2b22      	cmp	r3, #34	; 0x22
 802f094:	d10e      	bne.n	802f0b4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 802f096:	687b      	ldr	r3, [r7, #4]
 802f098:	2220      	movs	r2, #32
 802f09a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f09e:	687b      	ldr	r3, [r7, #4]
 802f0a0:	2200      	movs	r2, #0
 802f0a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	2200      	movs	r2, #0
 802f0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802f0ac:	6878      	ldr	r0, [r7, #4]
 802f0ae:	f7ff fc02 	bl	802e8b6 <HAL_I2C_SlaveRxCpltCallback>
}
 802f0b2:	e00d      	b.n	802f0d0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 802f0b4:	687b      	ldr	r3, [r7, #4]
 802f0b6:	2220      	movs	r2, #32
 802f0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0bc:	687b      	ldr	r3, [r7, #4]
 802f0be:	2200      	movs	r2, #0
 802f0c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0c2:	687b      	ldr	r3, [r7, #4]
 802f0c4:	2200      	movs	r2, #0
 802f0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802f0ca:	6878      	ldr	r0, [r7, #4]
 802f0cc:	f7ff fbe9 	bl	802e8a2 <HAL_I2C_SlaveTxCpltCallback>
}
 802f0d0:	bf00      	nop
 802f0d2:	3718      	adds	r7, #24
 802f0d4:	46bd      	mov	sp, r7
 802f0d6:	bd80      	pop	{r7, pc}
 802f0d8:	ffff0000 	.word	0xffff0000

0802f0dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802f0dc:	b580      	push	{r7, lr}
 802f0de:	b082      	sub	sp, #8
 802f0e0:	af00      	add	r7, sp, #0
 802f0e2:	6078      	str	r0, [r7, #4]
 802f0e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f0e6:	687b      	ldr	r3, [r7, #4]
 802f0e8:	4a26      	ldr	r2, [pc, #152]	; (802f184 <I2C_ITListenCplt+0xa8>)
 802f0ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 802f0ec:	687b      	ldr	r3, [r7, #4]
 802f0ee:	2200      	movs	r2, #0
 802f0f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802f0f2:	687b      	ldr	r3, [r7, #4]
 802f0f4:	2220      	movs	r2, #32
 802f0f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f0fa:	687b      	ldr	r3, [r7, #4]
 802f0fc:	2200      	movs	r2, #0
 802f0fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f102:	687b      	ldr	r3, [r7, #4]
 802f104:	2200      	movs	r2, #0
 802f106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 802f108:	683b      	ldr	r3, [r7, #0]
 802f10a:	089b      	lsrs	r3, r3, #2
 802f10c:	f003 0301 	and.w	r3, r3, #1
 802f110:	2b00      	cmp	r3, #0
 802f112:	d022      	beq.n	802f15a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f114:	687b      	ldr	r3, [r7, #4]
 802f116:	681b      	ldr	r3, [r3, #0]
 802f118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f11a:	687b      	ldr	r3, [r7, #4]
 802f11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f11e:	b2d2      	uxtb	r2, r2
 802f120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f122:	687b      	ldr	r3, [r7, #4]
 802f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f126:	1c5a      	adds	r2, r3, #1
 802f128:	687b      	ldr	r3, [r7, #4]
 802f12a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f12c:	687b      	ldr	r3, [r7, #4]
 802f12e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f130:	2b00      	cmp	r3, #0
 802f132:	d012      	beq.n	802f15a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 802f134:	687b      	ldr	r3, [r7, #4]
 802f136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f138:	3b01      	subs	r3, #1
 802f13a:	b29a      	uxth	r2, r3
 802f13c:	687b      	ldr	r3, [r7, #4]
 802f13e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f140:	687b      	ldr	r3, [r7, #4]
 802f142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f144:	b29b      	uxth	r3, r3
 802f146:	3b01      	subs	r3, #1
 802f148:	b29a      	uxth	r2, r3
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f14e:	687b      	ldr	r3, [r7, #4]
 802f150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f152:	f043 0204 	orr.w	r2, r3, #4
 802f156:	687b      	ldr	r3, [r7, #4]
 802f158:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f15a:	f248 0103 	movw	r1, #32771	; 0x8003
 802f15e:	6878      	ldr	r0, [r7, #4]
 802f160:	f000 f94b 	bl	802f3fa <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802f164:	687b      	ldr	r3, [r7, #4]
 802f166:	681b      	ldr	r3, [r3, #0]
 802f168:	2210      	movs	r2, #16
 802f16a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802f16c:	687b      	ldr	r3, [r7, #4]
 802f16e:	2200      	movs	r2, #0
 802f170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802f174:	6878      	ldr	r0, [r7, #4]
 802f176:	f7ff fbb6 	bl	802e8e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 802f17a:	bf00      	nop
 802f17c:	3708      	adds	r7, #8
 802f17e:	46bd      	mov	sp, r7
 802f180:	bd80      	pop	{r7, pc}
 802f182:	bf00      	nop
 802f184:	ffff0000 	.word	0xffff0000

0802f188 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 802f188:	b580      	push	{r7, lr}
 802f18a:	b084      	sub	sp, #16
 802f18c:	af00      	add	r7, sp, #0
 802f18e:	6078      	str	r0, [r7, #4]
 802f190:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802f192:	687b      	ldr	r3, [r7, #4]
 802f194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802f19a:	687b      	ldr	r3, [r7, #4]
 802f19c:	2200      	movs	r2, #0
 802f19e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	4a5d      	ldr	r2, [pc, #372]	; (802f31c <I2C_ITError+0x194>)
 802f1a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 802f1a8:	687b      	ldr	r3, [r7, #4]
 802f1aa:	2200      	movs	r2, #0
 802f1ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802f1ae:	687b      	ldr	r3, [r7, #4]
 802f1b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f1b2:	683b      	ldr	r3, [r7, #0]
 802f1b4:	431a      	orrs	r2, r3
 802f1b6:	687b      	ldr	r3, [r7, #4]
 802f1b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 802f1ba:	7bfb      	ldrb	r3, [r7, #15]
 802f1bc:	2b28      	cmp	r3, #40	; 0x28
 802f1be:	d005      	beq.n	802f1cc <I2C_ITError+0x44>
 802f1c0:	7bfb      	ldrb	r3, [r7, #15]
 802f1c2:	2b29      	cmp	r3, #41	; 0x29
 802f1c4:	d002      	beq.n	802f1cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802f1c6:	7bfb      	ldrb	r3, [r7, #15]
 802f1c8:	2b2a      	cmp	r3, #42	; 0x2a
 802f1ca:	d10b      	bne.n	802f1e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f1cc:	2103      	movs	r1, #3
 802f1ce:	6878      	ldr	r0, [r7, #4]
 802f1d0:	f000 f913 	bl	802f3fa <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802f1d4:	687b      	ldr	r3, [r7, #4]
 802f1d6:	2228      	movs	r2, #40	; 0x28
 802f1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 802f1dc:	687b      	ldr	r3, [r7, #4]
 802f1de:	4a50      	ldr	r2, [pc, #320]	; (802f320 <I2C_ITError+0x198>)
 802f1e0:	635a      	str	r2, [r3, #52]	; 0x34
 802f1e2:	e011      	b.n	802f208 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f1e4:	f248 0103 	movw	r1, #32771	; 0x8003
 802f1e8:	6878      	ldr	r0, [r7, #4]
 802f1ea:	f000 f906 	bl	802f3fa <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802f1ee:	687b      	ldr	r3, [r7, #4]
 802f1f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f1f4:	b2db      	uxtb	r3, r3
 802f1f6:	2b60      	cmp	r3, #96	; 0x60
 802f1f8:	d003      	beq.n	802f202 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 802f1fa:	687b      	ldr	r3, [r7, #4]
 802f1fc:	2220      	movs	r2, #32
 802f1fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 802f202:	687b      	ldr	r3, [r7, #4]
 802f204:	2200      	movs	r2, #0
 802f206:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 802f208:	687b      	ldr	r3, [r7, #4]
 802f20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f20c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 802f20e:	687b      	ldr	r3, [r7, #4]
 802f210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f212:	2b00      	cmp	r3, #0
 802f214:	d039      	beq.n	802f28a <I2C_ITError+0x102>
 802f216:	68bb      	ldr	r3, [r7, #8]
 802f218:	2b11      	cmp	r3, #17
 802f21a:	d002      	beq.n	802f222 <I2C_ITError+0x9a>
 802f21c:	68bb      	ldr	r3, [r7, #8]
 802f21e:	2b21      	cmp	r3, #33	; 0x21
 802f220:	d133      	bne.n	802f28a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802f222:	687b      	ldr	r3, [r7, #4]
 802f224:	681b      	ldr	r3, [r3, #0]
 802f226:	681b      	ldr	r3, [r3, #0]
 802f228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802f22c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f230:	d107      	bne.n	802f242 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802f232:	687b      	ldr	r3, [r7, #4]
 802f234:	681b      	ldr	r3, [r3, #0]
 802f236:	681a      	ldr	r2, [r3, #0]
 802f238:	687b      	ldr	r3, [r7, #4]
 802f23a:	681b      	ldr	r3, [r3, #0]
 802f23c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f240:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f242:	687b      	ldr	r3, [r7, #4]
 802f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f246:	4618      	mov	r0, r3
 802f248:	f7fe fc54 	bl	802daf4 <HAL_DMA_GetState>
 802f24c:	4603      	mov	r3, r0
 802f24e:	2b01      	cmp	r3, #1
 802f250:	d017      	beq.n	802f282 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802f252:	687b      	ldr	r3, [r7, #4]
 802f254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f256:	4a33      	ldr	r2, [pc, #204]	; (802f324 <I2C_ITError+0x19c>)
 802f258:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f25a:	687b      	ldr	r3, [r7, #4]
 802f25c:	2200      	movs	r2, #0
 802f25e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802f262:	687b      	ldr	r3, [r7, #4]
 802f264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f266:	4618      	mov	r0, r3
 802f268:	f7fd fad4 	bl	802c814 <HAL_DMA_Abort_IT>
 802f26c:	4603      	mov	r3, r0
 802f26e:	2b00      	cmp	r3, #0
 802f270:	d04d      	beq.n	802f30e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802f272:	687b      	ldr	r3, [r7, #4]
 802f274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f278:	687a      	ldr	r2, [r7, #4]
 802f27a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802f27c:	4610      	mov	r0, r2
 802f27e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f280:	e045      	b.n	802f30e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f282:	6878      	ldr	r0, [r7, #4]
 802f284:	f000 f850 	bl	802f328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f288:	e041      	b.n	802f30e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 802f28a:	687b      	ldr	r3, [r7, #4]
 802f28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f28e:	2b00      	cmp	r3, #0
 802f290:	d039      	beq.n	802f306 <I2C_ITError+0x17e>
 802f292:	68bb      	ldr	r3, [r7, #8]
 802f294:	2b12      	cmp	r3, #18
 802f296:	d002      	beq.n	802f29e <I2C_ITError+0x116>
 802f298:	68bb      	ldr	r3, [r7, #8]
 802f29a:	2b22      	cmp	r3, #34	; 0x22
 802f29c:	d133      	bne.n	802f306 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802f29e:	687b      	ldr	r3, [r7, #4]
 802f2a0:	681b      	ldr	r3, [r3, #0]
 802f2a2:	681b      	ldr	r3, [r3, #0]
 802f2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f2ac:	d107      	bne.n	802f2be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	681b      	ldr	r3, [r3, #0]
 802f2b2:	681a      	ldr	r2, [r3, #0]
 802f2b4:	687b      	ldr	r3, [r7, #4]
 802f2b6:	681b      	ldr	r3, [r3, #0]
 802f2b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802f2bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f2be:	687b      	ldr	r3, [r7, #4]
 802f2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2c2:	4618      	mov	r0, r3
 802f2c4:	f7fe fc16 	bl	802daf4 <HAL_DMA_GetState>
 802f2c8:	4603      	mov	r3, r0
 802f2ca:	2b01      	cmp	r3, #1
 802f2cc:	d017      	beq.n	802f2fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802f2ce:	687b      	ldr	r3, [r7, #4]
 802f2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2d2:	4a14      	ldr	r2, [pc, #80]	; (802f324 <I2C_ITError+0x19c>)
 802f2d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f2d6:	687b      	ldr	r3, [r7, #4]
 802f2d8:	2200      	movs	r2, #0
 802f2da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802f2de:	687b      	ldr	r3, [r7, #4]
 802f2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2e2:	4618      	mov	r0, r3
 802f2e4:	f7fd fa96 	bl	802c814 <HAL_DMA_Abort_IT>
 802f2e8:	4603      	mov	r3, r0
 802f2ea:	2b00      	cmp	r3, #0
 802f2ec:	d011      	beq.n	802f312 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802f2ee:	687b      	ldr	r3, [r7, #4]
 802f2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f2f4:	687a      	ldr	r2, [r7, #4]
 802f2f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802f2f8:	4610      	mov	r0, r2
 802f2fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f2fc:	e009      	b.n	802f312 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f2fe:	6878      	ldr	r0, [r7, #4]
 802f300:	f000 f812 	bl	802f328 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f304:	e005      	b.n	802f312 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 802f306:	6878      	ldr	r0, [r7, #4]
 802f308:	f000 f80e 	bl	802f328 <I2C_TreatErrorCallback>
  }
}
 802f30c:	e002      	b.n	802f314 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f30e:	bf00      	nop
 802f310:	e000      	b.n	802f314 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f312:	bf00      	nop
}
 802f314:	bf00      	nop
 802f316:	3710      	adds	r7, #16
 802f318:	46bd      	mov	sp, r7
 802f31a:	bd80      	pop	{r7, pc}
 802f31c:	ffff0000 	.word	0xffff0000
 802f320:	0802e923 	.word	0x0802e923
 802f324:	0802f3bf 	.word	0x0802f3bf

0802f328 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802f328:	b580      	push	{r7, lr}
 802f32a:	b082      	sub	sp, #8
 802f32c:	af00      	add	r7, sp, #0
 802f32e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802f330:	687b      	ldr	r3, [r7, #4]
 802f332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f336:	b2db      	uxtb	r3, r3
 802f338:	2b60      	cmp	r3, #96	; 0x60
 802f33a:	d10e      	bne.n	802f35a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802f33c:	687b      	ldr	r3, [r7, #4]
 802f33e:	2220      	movs	r2, #32
 802f340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f344:	687b      	ldr	r3, [r7, #4]
 802f346:	2200      	movs	r2, #0
 802f348:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f34a:	687b      	ldr	r3, [r7, #4]
 802f34c:	2200      	movs	r2, #0
 802f34e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802f352:	6878      	ldr	r0, [r7, #4]
 802f354:	f7ff fadb 	bl	802e90e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f358:	e009      	b.n	802f36e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 802f35a:	687b      	ldr	r3, [r7, #4]
 802f35c:	2200      	movs	r2, #0
 802f35e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f360:	687b      	ldr	r3, [r7, #4]
 802f362:	2200      	movs	r2, #0
 802f364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 802f368:	6878      	ldr	r0, [r7, #4]
 802f36a:	f7ff fac6 	bl	802e8fa <HAL_I2C_ErrorCallback>
}
 802f36e:	bf00      	nop
 802f370:	3708      	adds	r7, #8
 802f372:	46bd      	mov	sp, r7
 802f374:	bd80      	pop	{r7, pc}

0802f376 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802f376:	b480      	push	{r7}
 802f378:	b083      	sub	sp, #12
 802f37a:	af00      	add	r7, sp, #0
 802f37c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	681b      	ldr	r3, [r3, #0]
 802f382:	699b      	ldr	r3, [r3, #24]
 802f384:	f003 0302 	and.w	r3, r3, #2
 802f388:	2b02      	cmp	r3, #2
 802f38a:	d103      	bne.n	802f394 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802f38c:	687b      	ldr	r3, [r7, #4]
 802f38e:	681b      	ldr	r3, [r3, #0]
 802f390:	2200      	movs	r2, #0
 802f392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802f394:	687b      	ldr	r3, [r7, #4]
 802f396:	681b      	ldr	r3, [r3, #0]
 802f398:	699b      	ldr	r3, [r3, #24]
 802f39a:	f003 0301 	and.w	r3, r3, #1
 802f39e:	2b01      	cmp	r3, #1
 802f3a0:	d007      	beq.n	802f3b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802f3a2:	687b      	ldr	r3, [r7, #4]
 802f3a4:	681b      	ldr	r3, [r3, #0]
 802f3a6:	699a      	ldr	r2, [r3, #24]
 802f3a8:	687b      	ldr	r3, [r7, #4]
 802f3aa:	681b      	ldr	r3, [r3, #0]
 802f3ac:	f042 0201 	orr.w	r2, r2, #1
 802f3b0:	619a      	str	r2, [r3, #24]
  }
}
 802f3b2:	bf00      	nop
 802f3b4:	370c      	adds	r7, #12
 802f3b6:	46bd      	mov	sp, r7
 802f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3bc:	4770      	bx	lr

0802f3be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802f3be:	b580      	push	{r7, lr}
 802f3c0:	b084      	sub	sp, #16
 802f3c2:	af00      	add	r7, sp, #0
 802f3c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802f3c6:	687b      	ldr	r3, [r7, #4]
 802f3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 802f3cc:	68fb      	ldr	r3, [r7, #12]
 802f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3d0:	2b00      	cmp	r3, #0
 802f3d2:	d003      	beq.n	802f3dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802f3d4:	68fb      	ldr	r3, [r7, #12]
 802f3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3d8:	2200      	movs	r2, #0
 802f3da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802f3dc:	68fb      	ldr	r3, [r7, #12]
 802f3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f3e0:	2b00      	cmp	r3, #0
 802f3e2:	d003      	beq.n	802f3ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802f3e4:	68fb      	ldr	r3, [r7, #12]
 802f3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f3e8:	2200      	movs	r2, #0
 802f3ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 802f3ec:	68f8      	ldr	r0, [r7, #12]
 802f3ee:	f7ff ff9b 	bl	802f328 <I2C_TreatErrorCallback>
}
 802f3f2:	bf00      	nop
 802f3f4:	3710      	adds	r7, #16
 802f3f6:	46bd      	mov	sp, r7
 802f3f8:	bd80      	pop	{r7, pc}

0802f3fa <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 802f3fa:	b480      	push	{r7}
 802f3fc:	b085      	sub	sp, #20
 802f3fe:	af00      	add	r7, sp, #0
 802f400:	6078      	str	r0, [r7, #4]
 802f402:	460b      	mov	r3, r1
 802f404:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 802f406:	2300      	movs	r3, #0
 802f408:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 802f40a:	887b      	ldrh	r3, [r7, #2]
 802f40c:	f003 0301 	and.w	r3, r3, #1
 802f410:	2b00      	cmp	r3, #0
 802f412:	d00f      	beq.n	802f434 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802f414:	68fb      	ldr	r3, [r7, #12]
 802f416:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 802f41a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f41c:	687b      	ldr	r3, [r7, #4]
 802f41e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f422:	b2db      	uxtb	r3, r3
 802f424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f428:	2b28      	cmp	r3, #40	; 0x28
 802f42a:	d003      	beq.n	802f434 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f42c:	68fb      	ldr	r3, [r7, #12]
 802f42e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f432:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802f434:	887b      	ldrh	r3, [r7, #2]
 802f436:	f003 0302 	and.w	r3, r3, #2
 802f43a:	2b00      	cmp	r3, #0
 802f43c:	d00f      	beq.n	802f45e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802f43e:	68fb      	ldr	r3, [r7, #12]
 802f440:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802f444:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f446:	687b      	ldr	r3, [r7, #4]
 802f448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f44c:	b2db      	uxtb	r3, r3
 802f44e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f452:	2b28      	cmp	r3, #40	; 0x28
 802f454:	d003      	beq.n	802f45e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f456:	68fb      	ldr	r3, [r7, #12]
 802f458:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f45c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802f45e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802f462:	2b00      	cmp	r3, #0
 802f464:	da03      	bge.n	802f46e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f466:	68fb      	ldr	r3, [r7, #12]
 802f468:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 802f46c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802f46e:	887b      	ldrh	r3, [r7, #2]
 802f470:	2b10      	cmp	r3, #16
 802f472:	d103      	bne.n	802f47c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802f474:	68fb      	ldr	r3, [r7, #12]
 802f476:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 802f47a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 802f47c:	887b      	ldrh	r3, [r7, #2]
 802f47e:	2b20      	cmp	r3, #32
 802f480:	d103      	bne.n	802f48a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802f482:	68fb      	ldr	r3, [r7, #12]
 802f484:	f043 0320 	orr.w	r3, r3, #32
 802f488:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 802f48a:	887b      	ldrh	r3, [r7, #2]
 802f48c:	2b40      	cmp	r3, #64	; 0x40
 802f48e:	d103      	bne.n	802f498 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802f490:	68fb      	ldr	r3, [r7, #12]
 802f492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f496:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 802f498:	687b      	ldr	r3, [r7, #4]
 802f49a:	681b      	ldr	r3, [r3, #0]
 802f49c:	6819      	ldr	r1, [r3, #0]
 802f49e:	68fb      	ldr	r3, [r7, #12]
 802f4a0:	43da      	mvns	r2, r3
 802f4a2:	687b      	ldr	r3, [r7, #4]
 802f4a4:	681b      	ldr	r3, [r3, #0]
 802f4a6:	400a      	ands	r2, r1
 802f4a8:	601a      	str	r2, [r3, #0]
}
 802f4aa:	bf00      	nop
 802f4ac:	3714      	adds	r7, #20
 802f4ae:	46bd      	mov	sp, r7
 802f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4b4:	4770      	bx	lr

0802f4b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802f4b6:	b480      	push	{r7}
 802f4b8:	b083      	sub	sp, #12
 802f4ba:	af00      	add	r7, sp, #0
 802f4bc:	6078      	str	r0, [r7, #4]
 802f4be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f4c0:	687b      	ldr	r3, [r7, #4]
 802f4c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f4c6:	b2db      	uxtb	r3, r3
 802f4c8:	2b20      	cmp	r3, #32
 802f4ca:	d138      	bne.n	802f53e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f4cc:	687b      	ldr	r3, [r7, #4]
 802f4ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f4d2:	2b01      	cmp	r3, #1
 802f4d4:	d101      	bne.n	802f4da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802f4d6:	2302      	movs	r3, #2
 802f4d8:	e032      	b.n	802f540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802f4da:	687b      	ldr	r3, [r7, #4]
 802f4dc:	2201      	movs	r2, #1
 802f4de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f4e2:	687b      	ldr	r3, [r7, #4]
 802f4e4:	2224      	movs	r2, #36	; 0x24
 802f4e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f4ea:	687b      	ldr	r3, [r7, #4]
 802f4ec:	681b      	ldr	r3, [r3, #0]
 802f4ee:	681a      	ldr	r2, [r3, #0]
 802f4f0:	687b      	ldr	r3, [r7, #4]
 802f4f2:	681b      	ldr	r3, [r3, #0]
 802f4f4:	f022 0201 	bic.w	r2, r2, #1
 802f4f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	681b      	ldr	r3, [r3, #0]
 802f4fe:	681a      	ldr	r2, [r3, #0]
 802f500:	687b      	ldr	r3, [r7, #4]
 802f502:	681b      	ldr	r3, [r3, #0]
 802f504:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f508:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802f50a:	687b      	ldr	r3, [r7, #4]
 802f50c:	681b      	ldr	r3, [r3, #0]
 802f50e:	6819      	ldr	r1, [r3, #0]
 802f510:	687b      	ldr	r3, [r7, #4]
 802f512:	681b      	ldr	r3, [r3, #0]
 802f514:	683a      	ldr	r2, [r7, #0]
 802f516:	430a      	orrs	r2, r1
 802f518:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f51a:	687b      	ldr	r3, [r7, #4]
 802f51c:	681b      	ldr	r3, [r3, #0]
 802f51e:	681a      	ldr	r2, [r3, #0]
 802f520:	687b      	ldr	r3, [r7, #4]
 802f522:	681b      	ldr	r3, [r3, #0]
 802f524:	f042 0201 	orr.w	r2, r2, #1
 802f528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f52a:	687b      	ldr	r3, [r7, #4]
 802f52c:	2220      	movs	r2, #32
 802f52e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f532:	687b      	ldr	r3, [r7, #4]
 802f534:	2200      	movs	r2, #0
 802f536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f53a:	2300      	movs	r3, #0
 802f53c:	e000      	b.n	802f540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802f53e:	2302      	movs	r3, #2
  }
}
 802f540:	4618      	mov	r0, r3
 802f542:	370c      	adds	r7, #12
 802f544:	46bd      	mov	sp, r7
 802f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f54a:	4770      	bx	lr

0802f54c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802f54c:	b480      	push	{r7}
 802f54e:	b085      	sub	sp, #20
 802f550:	af00      	add	r7, sp, #0
 802f552:	6078      	str	r0, [r7, #4]
 802f554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f556:	687b      	ldr	r3, [r7, #4]
 802f558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f55c:	b2db      	uxtb	r3, r3
 802f55e:	2b20      	cmp	r3, #32
 802f560:	d139      	bne.n	802f5d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f562:	687b      	ldr	r3, [r7, #4]
 802f564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f568:	2b01      	cmp	r3, #1
 802f56a:	d101      	bne.n	802f570 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802f56c:	2302      	movs	r3, #2
 802f56e:	e033      	b.n	802f5d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802f570:	687b      	ldr	r3, [r7, #4]
 802f572:	2201      	movs	r2, #1
 802f574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f578:	687b      	ldr	r3, [r7, #4]
 802f57a:	2224      	movs	r2, #36	; 0x24
 802f57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f580:	687b      	ldr	r3, [r7, #4]
 802f582:	681b      	ldr	r3, [r3, #0]
 802f584:	681a      	ldr	r2, [r3, #0]
 802f586:	687b      	ldr	r3, [r7, #4]
 802f588:	681b      	ldr	r3, [r3, #0]
 802f58a:	f022 0201 	bic.w	r2, r2, #1
 802f58e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802f590:	687b      	ldr	r3, [r7, #4]
 802f592:	681b      	ldr	r3, [r3, #0]
 802f594:	681b      	ldr	r3, [r3, #0]
 802f596:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802f598:	68fb      	ldr	r3, [r7, #12]
 802f59a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802f59e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802f5a0:	683b      	ldr	r3, [r7, #0]
 802f5a2:	021b      	lsls	r3, r3, #8
 802f5a4:	68fa      	ldr	r2, [r7, #12]
 802f5a6:	4313      	orrs	r3, r2
 802f5a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802f5aa:	687b      	ldr	r3, [r7, #4]
 802f5ac:	681b      	ldr	r3, [r3, #0]
 802f5ae:	68fa      	ldr	r2, [r7, #12]
 802f5b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f5b2:	687b      	ldr	r3, [r7, #4]
 802f5b4:	681b      	ldr	r3, [r3, #0]
 802f5b6:	681a      	ldr	r2, [r3, #0]
 802f5b8:	687b      	ldr	r3, [r7, #4]
 802f5ba:	681b      	ldr	r3, [r3, #0]
 802f5bc:	f042 0201 	orr.w	r2, r2, #1
 802f5c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f5c2:	687b      	ldr	r3, [r7, #4]
 802f5c4:	2220      	movs	r2, #32
 802f5c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f5ca:	687b      	ldr	r3, [r7, #4]
 802f5cc:	2200      	movs	r2, #0
 802f5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f5d2:	2300      	movs	r3, #0
 802f5d4:	e000      	b.n	802f5d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802f5d6:	2302      	movs	r3, #2
  }
}
 802f5d8:	4618      	mov	r0, r3
 802f5da:	3714      	adds	r7, #20
 802f5dc:	46bd      	mov	sp, r7
 802f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5e2:	4770      	bx	lr

0802f5e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802f5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f5e6:	b08f      	sub	sp, #60	; 0x3c
 802f5e8:	af0a      	add	r7, sp, #40	; 0x28
 802f5ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	2b00      	cmp	r3, #0
 802f5f0:	d101      	bne.n	802f5f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 802f5f2:	2301      	movs	r3, #1
 802f5f4:	e116      	b.n	802f824 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802f5f6:	687b      	ldr	r3, [r7, #4]
 802f5f8:	681b      	ldr	r3, [r3, #0]
 802f5fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802f5fc:	687b      	ldr	r3, [r7, #4]
 802f5fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802f602:	b2db      	uxtb	r3, r3
 802f604:	2b00      	cmp	r3, #0
 802f606:	d106      	bne.n	802f616 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802f608:	687b      	ldr	r3, [r7, #4]
 802f60a:	2200      	movs	r2, #0
 802f60c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802f610:	6878      	ldr	r0, [r7, #4]
 802f612:	f00c f82f 	bl	803b674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802f616:	687b      	ldr	r3, [r7, #4]
 802f618:	2203      	movs	r2, #3
 802f61a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802f61e:	68bb      	ldr	r3, [r7, #8]
 802f620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f626:	2b00      	cmp	r3, #0
 802f628:	d102      	bne.n	802f630 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802f62a:	687b      	ldr	r3, [r7, #4]
 802f62c:	2200      	movs	r2, #0
 802f62e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802f630:	687b      	ldr	r3, [r7, #4]
 802f632:	681b      	ldr	r3, [r3, #0]
 802f634:	4618      	mov	r0, r3
 802f636:	f008 fb78 	bl	8037d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f63a:	687b      	ldr	r3, [r7, #4]
 802f63c:	681b      	ldr	r3, [r3, #0]
 802f63e:	603b      	str	r3, [r7, #0]
 802f640:	687e      	ldr	r6, [r7, #4]
 802f642:	466d      	mov	r5, sp
 802f644:	f106 0410 	add.w	r4, r6, #16
 802f648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f64a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f64c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f64e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f650:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f654:	e885 0003 	stmia.w	r5, {r0, r1}
 802f658:	1d33      	adds	r3, r6, #4
 802f65a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f65c:	6838      	ldr	r0, [r7, #0]
 802f65e:	f008 fa43 	bl	8037ae8 <USB_CoreInit>
 802f662:	4603      	mov	r3, r0
 802f664:	2b00      	cmp	r3, #0
 802f666:	d005      	beq.n	802f674 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f668:	687b      	ldr	r3, [r7, #4]
 802f66a:	2202      	movs	r2, #2
 802f66c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f670:	2301      	movs	r3, #1
 802f672:	e0d7      	b.n	802f824 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 802f674:	687b      	ldr	r3, [r7, #4]
 802f676:	681b      	ldr	r3, [r3, #0]
 802f678:	2100      	movs	r1, #0
 802f67a:	4618      	mov	r0, r3
 802f67c:	f008 fb66 	bl	8037d4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f680:	2300      	movs	r3, #0
 802f682:	73fb      	strb	r3, [r7, #15]
 802f684:	e04a      	b.n	802f71c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 802f686:	7bfa      	ldrb	r2, [r7, #15]
 802f688:	6879      	ldr	r1, [r7, #4]
 802f68a:	4613      	mov	r3, r2
 802f68c:	00db      	lsls	r3, r3, #3
 802f68e:	4413      	add	r3, r2
 802f690:	009b      	lsls	r3, r3, #2
 802f692:	440b      	add	r3, r1
 802f694:	333d      	adds	r3, #61	; 0x3d
 802f696:	2201      	movs	r2, #1
 802f698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802f69a:	7bfa      	ldrb	r2, [r7, #15]
 802f69c:	6879      	ldr	r1, [r7, #4]
 802f69e:	4613      	mov	r3, r2
 802f6a0:	00db      	lsls	r3, r3, #3
 802f6a2:	4413      	add	r3, r2
 802f6a4:	009b      	lsls	r3, r3, #2
 802f6a6:	440b      	add	r3, r1
 802f6a8:	333c      	adds	r3, #60	; 0x3c
 802f6aa:	7bfa      	ldrb	r2, [r7, #15]
 802f6ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 802f6ae:	7bfa      	ldrb	r2, [r7, #15]
 802f6b0:	7bfb      	ldrb	r3, [r7, #15]
 802f6b2:	b298      	uxth	r0, r3
 802f6b4:	6879      	ldr	r1, [r7, #4]
 802f6b6:	4613      	mov	r3, r2
 802f6b8:	00db      	lsls	r3, r3, #3
 802f6ba:	4413      	add	r3, r2
 802f6bc:	009b      	lsls	r3, r3, #2
 802f6be:	440b      	add	r3, r1
 802f6c0:	3344      	adds	r3, #68	; 0x44
 802f6c2:	4602      	mov	r2, r0
 802f6c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 802f6c6:	7bfa      	ldrb	r2, [r7, #15]
 802f6c8:	6879      	ldr	r1, [r7, #4]
 802f6ca:	4613      	mov	r3, r2
 802f6cc:	00db      	lsls	r3, r3, #3
 802f6ce:	4413      	add	r3, r2
 802f6d0:	009b      	lsls	r3, r3, #2
 802f6d2:	440b      	add	r3, r1
 802f6d4:	3340      	adds	r3, #64	; 0x40
 802f6d6:	2200      	movs	r2, #0
 802f6d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 802f6da:	7bfa      	ldrb	r2, [r7, #15]
 802f6dc:	6879      	ldr	r1, [r7, #4]
 802f6de:	4613      	mov	r3, r2
 802f6e0:	00db      	lsls	r3, r3, #3
 802f6e2:	4413      	add	r3, r2
 802f6e4:	009b      	lsls	r3, r3, #2
 802f6e6:	440b      	add	r3, r1
 802f6e8:	3348      	adds	r3, #72	; 0x48
 802f6ea:	2200      	movs	r2, #0
 802f6ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 802f6ee:	7bfa      	ldrb	r2, [r7, #15]
 802f6f0:	6879      	ldr	r1, [r7, #4]
 802f6f2:	4613      	mov	r3, r2
 802f6f4:	00db      	lsls	r3, r3, #3
 802f6f6:	4413      	add	r3, r2
 802f6f8:	009b      	lsls	r3, r3, #2
 802f6fa:	440b      	add	r3, r1
 802f6fc:	334c      	adds	r3, #76	; 0x4c
 802f6fe:	2200      	movs	r2, #0
 802f700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 802f702:	7bfa      	ldrb	r2, [r7, #15]
 802f704:	6879      	ldr	r1, [r7, #4]
 802f706:	4613      	mov	r3, r2
 802f708:	00db      	lsls	r3, r3, #3
 802f70a:	4413      	add	r3, r2
 802f70c:	009b      	lsls	r3, r3, #2
 802f70e:	440b      	add	r3, r1
 802f710:	3354      	adds	r3, #84	; 0x54
 802f712:	2200      	movs	r2, #0
 802f714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f716:	7bfb      	ldrb	r3, [r7, #15]
 802f718:	3301      	adds	r3, #1
 802f71a:	73fb      	strb	r3, [r7, #15]
 802f71c:	7bfa      	ldrb	r2, [r7, #15]
 802f71e:	687b      	ldr	r3, [r7, #4]
 802f720:	685b      	ldr	r3, [r3, #4]
 802f722:	429a      	cmp	r2, r3
 802f724:	d3af      	bcc.n	802f686 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f726:	2300      	movs	r3, #0
 802f728:	73fb      	strb	r3, [r7, #15]
 802f72a:	e044      	b.n	802f7b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802f72c:	7bfa      	ldrb	r2, [r7, #15]
 802f72e:	6879      	ldr	r1, [r7, #4]
 802f730:	4613      	mov	r3, r2
 802f732:	00db      	lsls	r3, r3, #3
 802f734:	4413      	add	r3, r2
 802f736:	009b      	lsls	r3, r3, #2
 802f738:	440b      	add	r3, r1
 802f73a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802f73e:	2200      	movs	r2, #0
 802f740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 802f742:	7bfa      	ldrb	r2, [r7, #15]
 802f744:	6879      	ldr	r1, [r7, #4]
 802f746:	4613      	mov	r3, r2
 802f748:	00db      	lsls	r3, r3, #3
 802f74a:	4413      	add	r3, r2
 802f74c:	009b      	lsls	r3, r3, #2
 802f74e:	440b      	add	r3, r1
 802f750:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802f754:	7bfa      	ldrb	r2, [r7, #15]
 802f756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802f758:	7bfa      	ldrb	r2, [r7, #15]
 802f75a:	6879      	ldr	r1, [r7, #4]
 802f75c:	4613      	mov	r3, r2
 802f75e:	00db      	lsls	r3, r3, #3
 802f760:	4413      	add	r3, r2
 802f762:	009b      	lsls	r3, r3, #2
 802f764:	440b      	add	r3, r1
 802f766:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802f76a:	2200      	movs	r2, #0
 802f76c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802f76e:	7bfa      	ldrb	r2, [r7, #15]
 802f770:	6879      	ldr	r1, [r7, #4]
 802f772:	4613      	mov	r3, r2
 802f774:	00db      	lsls	r3, r3, #3
 802f776:	4413      	add	r3, r2
 802f778:	009b      	lsls	r3, r3, #2
 802f77a:	440b      	add	r3, r1
 802f77c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802f780:	2200      	movs	r2, #0
 802f782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 802f784:	7bfa      	ldrb	r2, [r7, #15]
 802f786:	6879      	ldr	r1, [r7, #4]
 802f788:	4613      	mov	r3, r2
 802f78a:	00db      	lsls	r3, r3, #3
 802f78c:	4413      	add	r3, r2
 802f78e:	009b      	lsls	r3, r3, #2
 802f790:	440b      	add	r3, r1
 802f792:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802f796:	2200      	movs	r2, #0
 802f798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802f79a:	7bfa      	ldrb	r2, [r7, #15]
 802f79c:	6879      	ldr	r1, [r7, #4]
 802f79e:	4613      	mov	r3, r2
 802f7a0:	00db      	lsls	r3, r3, #3
 802f7a2:	4413      	add	r3, r2
 802f7a4:	009b      	lsls	r3, r3, #2
 802f7a6:	440b      	add	r3, r1
 802f7a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802f7ac:	2200      	movs	r2, #0
 802f7ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f7b0:	7bfb      	ldrb	r3, [r7, #15]
 802f7b2:	3301      	adds	r3, #1
 802f7b4:	73fb      	strb	r3, [r7, #15]
 802f7b6:	7bfa      	ldrb	r2, [r7, #15]
 802f7b8:	687b      	ldr	r3, [r7, #4]
 802f7ba:	685b      	ldr	r3, [r3, #4]
 802f7bc:	429a      	cmp	r2, r3
 802f7be:	d3b5      	bcc.n	802f72c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f7c0:	687b      	ldr	r3, [r7, #4]
 802f7c2:	681b      	ldr	r3, [r3, #0]
 802f7c4:	603b      	str	r3, [r7, #0]
 802f7c6:	687e      	ldr	r6, [r7, #4]
 802f7c8:	466d      	mov	r5, sp
 802f7ca:	f106 0410 	add.w	r4, r6, #16
 802f7ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f7d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f7d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f7d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f7d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f7da:	e885 0003 	stmia.w	r5, {r0, r1}
 802f7de:	1d33      	adds	r3, r6, #4
 802f7e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f7e2:	6838      	ldr	r0, [r7, #0]
 802f7e4:	f008 fafe 	bl	8037de4 <USB_DevInit>
 802f7e8:	4603      	mov	r3, r0
 802f7ea:	2b00      	cmp	r3, #0
 802f7ec:	d005      	beq.n	802f7fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f7ee:	687b      	ldr	r3, [r7, #4]
 802f7f0:	2202      	movs	r2, #2
 802f7f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f7f6:	2301      	movs	r3, #1
 802f7f8:	e014      	b.n	802f824 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 802f7fa:	687b      	ldr	r3, [r7, #4]
 802f7fc:	2200      	movs	r2, #0
 802f7fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 802f802:	687b      	ldr	r3, [r7, #4]
 802f804:	2201      	movs	r2, #1
 802f806:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 802f80a:	687b      	ldr	r3, [r7, #4]
 802f80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f80e:	2b01      	cmp	r3, #1
 802f810:	d102      	bne.n	802f818 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 802f812:	6878      	ldr	r0, [r7, #4]
 802f814:	f001 f98c 	bl	8030b30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 802f818:	687b      	ldr	r3, [r7, #4]
 802f81a:	681b      	ldr	r3, [r3, #0]
 802f81c:	4618      	mov	r0, r3
 802f81e:	f009 fc4c 	bl	80390ba <USB_DevDisconnect>

  return HAL_OK;
 802f822:	2300      	movs	r3, #0
}
 802f824:	4618      	mov	r0, r3
 802f826:	3714      	adds	r7, #20
 802f828:	46bd      	mov	sp, r7
 802f82a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f82c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802f82c:	b580      	push	{r7, lr}
 802f82e:	b084      	sub	sp, #16
 802f830:	af00      	add	r7, sp, #0
 802f832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f834:	687b      	ldr	r3, [r7, #4]
 802f836:	681b      	ldr	r3, [r3, #0]
 802f838:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802f83a:	687b      	ldr	r3, [r7, #4]
 802f83c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802f840:	2b01      	cmp	r3, #1
 802f842:	d101      	bne.n	802f848 <HAL_PCD_Start+0x1c>
 802f844:	2302      	movs	r3, #2
 802f846:	e020      	b.n	802f88a <HAL_PCD_Start+0x5e>
 802f848:	687b      	ldr	r3, [r7, #4]
 802f84a:	2201      	movs	r2, #1
 802f84c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f850:	687b      	ldr	r3, [r7, #4]
 802f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f854:	2b01      	cmp	r3, #1
 802f856:	d109      	bne.n	802f86c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802f858:	687b      	ldr	r3, [r7, #4]
 802f85a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f85c:	2b01      	cmp	r3, #1
 802f85e:	d005      	beq.n	802f86c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f860:	68fb      	ldr	r3, [r7, #12]
 802f862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f864:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f868:	68fb      	ldr	r3, [r7, #12]
 802f86a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802f86c:	687b      	ldr	r3, [r7, #4]
 802f86e:	681b      	ldr	r3, [r3, #0]
 802f870:	4618      	mov	r0, r3
 802f872:	f008 fa49 	bl	8037d08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802f876:	687b      	ldr	r3, [r7, #4]
 802f878:	681b      	ldr	r3, [r3, #0]
 802f87a:	4618      	mov	r0, r3
 802f87c:	f009 fbfc 	bl	8039078 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 802f880:	687b      	ldr	r3, [r7, #4]
 802f882:	2200      	movs	r2, #0
 802f884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802f888:	2300      	movs	r3, #0
}
 802f88a:	4618      	mov	r0, r3
 802f88c:	3710      	adds	r7, #16
 802f88e:	46bd      	mov	sp, r7
 802f890:	bd80      	pop	{r7, pc}

0802f892 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 802f892:	b590      	push	{r4, r7, lr}
 802f894:	b08d      	sub	sp, #52	; 0x34
 802f896:	af00      	add	r7, sp, #0
 802f898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f89a:	687b      	ldr	r3, [r7, #4]
 802f89c:	681b      	ldr	r3, [r3, #0]
 802f89e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f8a0:	6a3b      	ldr	r3, [r7, #32]
 802f8a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 802f8a4:	687b      	ldr	r3, [r7, #4]
 802f8a6:	681b      	ldr	r3, [r3, #0]
 802f8a8:	4618      	mov	r0, r3
 802f8aa:	f009 fcba 	bl	8039222 <USB_GetMode>
 802f8ae:	4603      	mov	r3, r0
 802f8b0:	2b00      	cmp	r3, #0
 802f8b2:	f040 84b7 	bne.w	8030224 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802f8b6:	687b      	ldr	r3, [r7, #4]
 802f8b8:	681b      	ldr	r3, [r3, #0]
 802f8ba:	4618      	mov	r0, r3
 802f8bc:	f009 fc1e 	bl	80390fc <USB_ReadInterrupts>
 802f8c0:	4603      	mov	r3, r0
 802f8c2:	2b00      	cmp	r3, #0
 802f8c4:	f000 84ad 	beq.w	8030222 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 802f8c8:	69fb      	ldr	r3, [r7, #28]
 802f8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f8ce:	689b      	ldr	r3, [r3, #8]
 802f8d0:	0a1b      	lsrs	r3, r3, #8
 802f8d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802f8d6:	687b      	ldr	r3, [r7, #4]
 802f8d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802f8dc:	687b      	ldr	r3, [r7, #4]
 802f8de:	681b      	ldr	r3, [r3, #0]
 802f8e0:	4618      	mov	r0, r3
 802f8e2:	f009 fc0b 	bl	80390fc <USB_ReadInterrupts>
 802f8e6:	4603      	mov	r3, r0
 802f8e8:	f003 0302 	and.w	r3, r3, #2
 802f8ec:	2b02      	cmp	r3, #2
 802f8ee:	d107      	bne.n	802f900 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	681b      	ldr	r3, [r3, #0]
 802f8f4:	695a      	ldr	r2, [r3, #20]
 802f8f6:	687b      	ldr	r3, [r7, #4]
 802f8f8:	681b      	ldr	r3, [r3, #0]
 802f8fa:	f002 0202 	and.w	r2, r2, #2
 802f8fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 802f900:	687b      	ldr	r3, [r7, #4]
 802f902:	681b      	ldr	r3, [r3, #0]
 802f904:	4618      	mov	r0, r3
 802f906:	f009 fbf9 	bl	80390fc <USB_ReadInterrupts>
 802f90a:	4603      	mov	r3, r0
 802f90c:	f003 0310 	and.w	r3, r3, #16
 802f910:	2b10      	cmp	r3, #16
 802f912:	d161      	bne.n	802f9d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f914:	687b      	ldr	r3, [r7, #4]
 802f916:	681b      	ldr	r3, [r3, #0]
 802f918:	699a      	ldr	r2, [r3, #24]
 802f91a:	687b      	ldr	r3, [r7, #4]
 802f91c:	681b      	ldr	r3, [r3, #0]
 802f91e:	f022 0210 	bic.w	r2, r2, #16
 802f922:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 802f924:	6a3b      	ldr	r3, [r7, #32]
 802f926:	6a1b      	ldr	r3, [r3, #32]
 802f928:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802f92a:	69bb      	ldr	r3, [r7, #24]
 802f92c:	f003 020f 	and.w	r2, r3, #15
 802f930:	4613      	mov	r3, r2
 802f932:	00db      	lsls	r3, r3, #3
 802f934:	4413      	add	r3, r2
 802f936:	009b      	lsls	r3, r3, #2
 802f938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f93c:	687a      	ldr	r2, [r7, #4]
 802f93e:	4413      	add	r3, r2
 802f940:	3304      	adds	r3, #4
 802f942:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 802f944:	69bb      	ldr	r3, [r7, #24]
 802f946:	0c5b      	lsrs	r3, r3, #17
 802f948:	f003 030f 	and.w	r3, r3, #15
 802f94c:	2b02      	cmp	r3, #2
 802f94e:	d124      	bne.n	802f99a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 802f950:	69ba      	ldr	r2, [r7, #24]
 802f952:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802f956:	4013      	ands	r3, r2
 802f958:	2b00      	cmp	r3, #0
 802f95a:	d035      	beq.n	802f9c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f95c:	697b      	ldr	r3, [r7, #20]
 802f95e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 802f960:	69bb      	ldr	r3, [r7, #24]
 802f962:	091b      	lsrs	r3, r3, #4
 802f964:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f96a:	b29b      	uxth	r3, r3
 802f96c:	461a      	mov	r2, r3
 802f96e:	6a38      	ldr	r0, [r7, #32]
 802f970:	f009 fa30 	bl	8038dd4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f974:	697b      	ldr	r3, [r7, #20]
 802f976:	691a      	ldr	r2, [r3, #16]
 802f978:	69bb      	ldr	r3, [r7, #24]
 802f97a:	091b      	lsrs	r3, r3, #4
 802f97c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f980:	441a      	add	r2, r3
 802f982:	697b      	ldr	r3, [r7, #20]
 802f984:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f986:	697b      	ldr	r3, [r7, #20]
 802f988:	6a1a      	ldr	r2, [r3, #32]
 802f98a:	69bb      	ldr	r3, [r7, #24]
 802f98c:	091b      	lsrs	r3, r3, #4
 802f98e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f992:	441a      	add	r2, r3
 802f994:	697b      	ldr	r3, [r7, #20]
 802f996:	621a      	str	r2, [r3, #32]
 802f998:	e016      	b.n	802f9c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802f99a:	69bb      	ldr	r3, [r7, #24]
 802f99c:	0c5b      	lsrs	r3, r3, #17
 802f99e:	f003 030f 	and.w	r3, r3, #15
 802f9a2:	2b06      	cmp	r3, #6
 802f9a4:	d110      	bne.n	802f9c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 802f9a6:	687b      	ldr	r3, [r7, #4]
 802f9a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802f9ac:	2208      	movs	r2, #8
 802f9ae:	4619      	mov	r1, r3
 802f9b0:	6a38      	ldr	r0, [r7, #32]
 802f9b2:	f009 fa0f 	bl	8038dd4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9b6:	697b      	ldr	r3, [r7, #20]
 802f9b8:	6a1a      	ldr	r2, [r3, #32]
 802f9ba:	69bb      	ldr	r3, [r7, #24]
 802f9bc:	091b      	lsrs	r3, r3, #4
 802f9be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9c2:	441a      	add	r2, r3
 802f9c4:	697b      	ldr	r3, [r7, #20]
 802f9c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f9c8:	687b      	ldr	r3, [r7, #4]
 802f9ca:	681b      	ldr	r3, [r3, #0]
 802f9cc:	699a      	ldr	r2, [r3, #24]
 802f9ce:	687b      	ldr	r3, [r7, #4]
 802f9d0:	681b      	ldr	r3, [r3, #0]
 802f9d2:	f042 0210 	orr.w	r2, r2, #16
 802f9d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 802f9d8:	687b      	ldr	r3, [r7, #4]
 802f9da:	681b      	ldr	r3, [r3, #0]
 802f9dc:	4618      	mov	r0, r3
 802f9de:	f009 fb8d 	bl	80390fc <USB_ReadInterrupts>
 802f9e2:	4603      	mov	r3, r0
 802f9e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f9e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802f9ec:	f040 80a7 	bne.w	802fb3e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 802f9f0:	2300      	movs	r3, #0
 802f9f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 802f9f4:	687b      	ldr	r3, [r7, #4]
 802f9f6:	681b      	ldr	r3, [r3, #0]
 802f9f8:	4618      	mov	r0, r3
 802f9fa:	f009 fb92 	bl	8039122 <USB_ReadDevAllOutEpInterrupt>
 802f9fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 802fa00:	e099      	b.n	802fb36 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 802fa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fa04:	f003 0301 	and.w	r3, r3, #1
 802fa08:	2b00      	cmp	r3, #0
 802fa0a:	f000 808e 	beq.w	802fb2a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fa0e:	687b      	ldr	r3, [r7, #4]
 802fa10:	681b      	ldr	r3, [r3, #0]
 802fa12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa14:	b2d2      	uxtb	r2, r2
 802fa16:	4611      	mov	r1, r2
 802fa18:	4618      	mov	r0, r3
 802fa1a:	f009 fbb6 	bl	803918a <USB_ReadDevOutEPInterrupt>
 802fa1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 802fa20:	693b      	ldr	r3, [r7, #16]
 802fa22:	f003 0301 	and.w	r3, r3, #1
 802fa26:	2b00      	cmp	r3, #0
 802fa28:	d00c      	beq.n	802fa44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa2c:	015a      	lsls	r2, r3, #5
 802fa2e:	69fb      	ldr	r3, [r7, #28]
 802fa30:	4413      	add	r3, r2
 802fa32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa36:	461a      	mov	r2, r3
 802fa38:	2301      	movs	r3, #1
 802fa3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802fa3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fa3e:	6878      	ldr	r0, [r7, #4]
 802fa40:	f000 fef0 	bl	8030824 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 802fa44:	693b      	ldr	r3, [r7, #16]
 802fa46:	f003 0308 	and.w	r3, r3, #8
 802fa4a:	2b00      	cmp	r3, #0
 802fa4c:	d00c      	beq.n	802fa68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa50:	015a      	lsls	r2, r3, #5
 802fa52:	69fb      	ldr	r3, [r7, #28]
 802fa54:	4413      	add	r3, r2
 802fa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa5a:	461a      	mov	r2, r3
 802fa5c:	2308      	movs	r3, #8
 802fa5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 802fa60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fa62:	6878      	ldr	r0, [r7, #4]
 802fa64:	f000 ffc6 	bl	80309f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802fa68:	693b      	ldr	r3, [r7, #16]
 802fa6a:	f003 0310 	and.w	r3, r3, #16
 802fa6e:	2b00      	cmp	r3, #0
 802fa70:	d008      	beq.n	802fa84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 802fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa74:	015a      	lsls	r2, r3, #5
 802fa76:	69fb      	ldr	r3, [r7, #28]
 802fa78:	4413      	add	r3, r2
 802fa7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa7e:	461a      	mov	r2, r3
 802fa80:	2310      	movs	r3, #16
 802fa82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 802fa84:	693b      	ldr	r3, [r7, #16]
 802fa86:	f003 0302 	and.w	r3, r3, #2
 802fa8a:	2b00      	cmp	r3, #0
 802fa8c:	d030      	beq.n	802faf0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802fa8e:	6a3b      	ldr	r3, [r7, #32]
 802fa90:	695b      	ldr	r3, [r3, #20]
 802fa92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fa96:	2b80      	cmp	r3, #128	; 0x80
 802fa98:	d109      	bne.n	802faae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802fa9a:	69fb      	ldr	r3, [r7, #28]
 802fa9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802faa0:	685b      	ldr	r3, [r3, #4]
 802faa2:	69fa      	ldr	r2, [r7, #28]
 802faa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802faa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802faac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 802faae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fab0:	4613      	mov	r3, r2
 802fab2:	00db      	lsls	r3, r3, #3
 802fab4:	4413      	add	r3, r2
 802fab6:	009b      	lsls	r3, r3, #2
 802fab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802fabc:	687a      	ldr	r2, [r7, #4]
 802fabe:	4413      	add	r3, r2
 802fac0:	3304      	adds	r3, #4
 802fac2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fac4:	697b      	ldr	r3, [r7, #20]
 802fac6:	78db      	ldrb	r3, [r3, #3]
 802fac8:	2b01      	cmp	r3, #1
 802faca:	d108      	bne.n	802fade <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 802facc:	697b      	ldr	r3, [r7, #20]
 802face:	2200      	movs	r2, #0
 802fad0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802fad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fad4:	b2db      	uxtb	r3, r3
 802fad6:	4619      	mov	r1, r3
 802fad8:	6878      	ldr	r0, [r7, #4]
 802fada:	f00b fef7 	bl	803b8cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 802fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fae0:	015a      	lsls	r2, r3, #5
 802fae2:	69fb      	ldr	r3, [r7, #28]
 802fae4:	4413      	add	r3, r2
 802fae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802faea:	461a      	mov	r2, r3
 802faec:	2302      	movs	r3, #2
 802faee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802faf0:	693b      	ldr	r3, [r7, #16]
 802faf2:	f003 0320 	and.w	r3, r3, #32
 802faf6:	2b00      	cmp	r3, #0
 802faf8:	d008      	beq.n	802fb0c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fafc:	015a      	lsls	r2, r3, #5
 802fafe:	69fb      	ldr	r3, [r7, #28]
 802fb00:	4413      	add	r3, r2
 802fb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb06:	461a      	mov	r2, r3
 802fb08:	2320      	movs	r3, #32
 802fb0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802fb0c:	693b      	ldr	r3, [r7, #16]
 802fb0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fb12:	2b00      	cmp	r3, #0
 802fb14:	d009      	beq.n	802fb2a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802fb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb18:	015a      	lsls	r2, r3, #5
 802fb1a:	69fb      	ldr	r3, [r7, #28]
 802fb1c:	4413      	add	r3, r2
 802fb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb22:	461a      	mov	r2, r3
 802fb24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802fb28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb2c:	3301      	adds	r3, #1
 802fb2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb32:	085b      	lsrs	r3, r3, #1
 802fb34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb38:	2b00      	cmp	r3, #0
 802fb3a:	f47f af62 	bne.w	802fa02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	681b      	ldr	r3, [r3, #0]
 802fb42:	4618      	mov	r0, r3
 802fb44:	f009 fada 	bl	80390fc <USB_ReadInterrupts>
 802fb48:	4603      	mov	r3, r0
 802fb4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802fb4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802fb52:	f040 80db 	bne.w	802fd0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802fb56:	687b      	ldr	r3, [r7, #4]
 802fb58:	681b      	ldr	r3, [r3, #0]
 802fb5a:	4618      	mov	r0, r3
 802fb5c:	f009 fafb 	bl	8039156 <USB_ReadDevAllInEpInterrupt>
 802fb60:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 802fb62:	2300      	movs	r3, #0
 802fb64:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802fb66:	e0cd      	b.n	802fd04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb6a:	f003 0301 	and.w	r3, r3, #1
 802fb6e:	2b00      	cmp	r3, #0
 802fb70:	f000 80c2 	beq.w	802fcf8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fb74:	687b      	ldr	r3, [r7, #4]
 802fb76:	681b      	ldr	r3, [r3, #0]
 802fb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fb7a:	b2d2      	uxtb	r2, r2
 802fb7c:	4611      	mov	r1, r2
 802fb7e:	4618      	mov	r0, r3
 802fb80:	f009 fb21 	bl	80391c6 <USB_ReadDevInEPInterrupt>
 802fb84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802fb86:	693b      	ldr	r3, [r7, #16]
 802fb88:	f003 0301 	and.w	r3, r3, #1
 802fb8c:	2b00      	cmp	r3, #0
 802fb8e:	d057      	beq.n	802fc40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb92:	f003 030f 	and.w	r3, r3, #15
 802fb96:	2201      	movs	r2, #1
 802fb98:	fa02 f303 	lsl.w	r3, r2, r3
 802fb9c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802fb9e:	69fb      	ldr	r3, [r7, #28]
 802fba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fba6:	68fb      	ldr	r3, [r7, #12]
 802fba8:	43db      	mvns	r3, r3
 802fbaa:	69f9      	ldr	r1, [r7, #28]
 802fbac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802fbb0:	4013      	ands	r3, r2
 802fbb2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 802fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbb6:	015a      	lsls	r2, r3, #5
 802fbb8:	69fb      	ldr	r3, [r7, #28]
 802fbba:	4413      	add	r3, r2
 802fbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbc0:	461a      	mov	r2, r3
 802fbc2:	2301      	movs	r3, #1
 802fbc4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 802fbc6:	687b      	ldr	r3, [r7, #4]
 802fbc8:	691b      	ldr	r3, [r3, #16]
 802fbca:	2b01      	cmp	r3, #1
 802fbcc:	d132      	bne.n	802fc34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802fbce:	6879      	ldr	r1, [r7, #4]
 802fbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fbd2:	4613      	mov	r3, r2
 802fbd4:	00db      	lsls	r3, r3, #3
 802fbd6:	4413      	add	r3, r2
 802fbd8:	009b      	lsls	r3, r3, #2
 802fbda:	440b      	add	r3, r1
 802fbdc:	334c      	adds	r3, #76	; 0x4c
 802fbde:	6819      	ldr	r1, [r3, #0]
 802fbe0:	6878      	ldr	r0, [r7, #4]
 802fbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fbe4:	4613      	mov	r3, r2
 802fbe6:	00db      	lsls	r3, r3, #3
 802fbe8:	4413      	add	r3, r2
 802fbea:	009b      	lsls	r3, r3, #2
 802fbec:	4403      	add	r3, r0
 802fbee:	3348      	adds	r3, #72	; 0x48
 802fbf0:	681b      	ldr	r3, [r3, #0]
 802fbf2:	4419      	add	r1, r3
 802fbf4:	6878      	ldr	r0, [r7, #4]
 802fbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fbf8:	4613      	mov	r3, r2
 802fbfa:	00db      	lsls	r3, r3, #3
 802fbfc:	4413      	add	r3, r2
 802fbfe:	009b      	lsls	r3, r3, #2
 802fc00:	4403      	add	r3, r0
 802fc02:	334c      	adds	r3, #76	; 0x4c
 802fc04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc08:	2b00      	cmp	r3, #0
 802fc0a:	d113      	bne.n	802fc34 <HAL_PCD_IRQHandler+0x3a2>
 802fc0c:	6879      	ldr	r1, [r7, #4]
 802fc0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc10:	4613      	mov	r3, r2
 802fc12:	00db      	lsls	r3, r3, #3
 802fc14:	4413      	add	r3, r2
 802fc16:	009b      	lsls	r3, r3, #2
 802fc18:	440b      	add	r3, r1
 802fc1a:	3354      	adds	r3, #84	; 0x54
 802fc1c:	681b      	ldr	r3, [r3, #0]
 802fc1e:	2b00      	cmp	r3, #0
 802fc20:	d108      	bne.n	802fc34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	6818      	ldr	r0, [r3, #0]
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fc2c:	461a      	mov	r2, r3
 802fc2e:	2101      	movs	r1, #1
 802fc30:	f009 fb2a 	bl	8039288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc36:	b2db      	uxtb	r3, r3
 802fc38:	4619      	mov	r1, r3
 802fc3a:	6878      	ldr	r0, [r7, #4]
 802fc3c:	f00b fdc1 	bl	803b7c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802fc40:	693b      	ldr	r3, [r7, #16]
 802fc42:	f003 0308 	and.w	r3, r3, #8
 802fc46:	2b00      	cmp	r3, #0
 802fc48:	d008      	beq.n	802fc5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc4c:	015a      	lsls	r2, r3, #5
 802fc4e:	69fb      	ldr	r3, [r7, #28]
 802fc50:	4413      	add	r3, r2
 802fc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc56:	461a      	mov	r2, r3
 802fc58:	2308      	movs	r3, #8
 802fc5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802fc5c:	693b      	ldr	r3, [r7, #16]
 802fc5e:	f003 0310 	and.w	r3, r3, #16
 802fc62:	2b00      	cmp	r3, #0
 802fc64:	d008      	beq.n	802fc78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802fc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc68:	015a      	lsls	r2, r3, #5
 802fc6a:	69fb      	ldr	r3, [r7, #28]
 802fc6c:	4413      	add	r3, r2
 802fc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc72:	461a      	mov	r2, r3
 802fc74:	2310      	movs	r3, #16
 802fc76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802fc78:	693b      	ldr	r3, [r7, #16]
 802fc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fc7e:	2b00      	cmp	r3, #0
 802fc80:	d008      	beq.n	802fc94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802fc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc84:	015a      	lsls	r2, r3, #5
 802fc86:	69fb      	ldr	r3, [r7, #28]
 802fc88:	4413      	add	r3, r2
 802fc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc8e:	461a      	mov	r2, r3
 802fc90:	2340      	movs	r3, #64	; 0x40
 802fc92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802fc94:	693b      	ldr	r3, [r7, #16]
 802fc96:	f003 0302 	and.w	r3, r3, #2
 802fc9a:	2b00      	cmp	r3, #0
 802fc9c:	d023      	beq.n	802fce6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802fc9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fca0:	6a38      	ldr	r0, [r7, #32]
 802fca2:	f008 f9fd 	bl	80380a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 802fca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fca8:	4613      	mov	r3, r2
 802fcaa:	00db      	lsls	r3, r3, #3
 802fcac:	4413      	add	r3, r2
 802fcae:	009b      	lsls	r3, r3, #2
 802fcb0:	3338      	adds	r3, #56	; 0x38
 802fcb2:	687a      	ldr	r2, [r7, #4]
 802fcb4:	4413      	add	r3, r2
 802fcb6:	3304      	adds	r3, #4
 802fcb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fcba:	697b      	ldr	r3, [r7, #20]
 802fcbc:	78db      	ldrb	r3, [r3, #3]
 802fcbe:	2b01      	cmp	r3, #1
 802fcc0:	d108      	bne.n	802fcd4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802fcc2:	697b      	ldr	r3, [r7, #20]
 802fcc4:	2200      	movs	r2, #0
 802fcc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 802fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcca:	b2db      	uxtb	r3, r3
 802fccc:	4619      	mov	r1, r3
 802fcce:	6878      	ldr	r0, [r7, #4]
 802fcd0:	f00b fe0e 	bl	803b8f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 802fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcd6:	015a      	lsls	r2, r3, #5
 802fcd8:	69fb      	ldr	r3, [r7, #28]
 802fcda:	4413      	add	r3, r2
 802fcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fce0:	461a      	mov	r2, r3
 802fce2:	2302      	movs	r3, #2
 802fce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 802fce6:	693b      	ldr	r3, [r7, #16]
 802fce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fcec:	2b00      	cmp	r3, #0
 802fcee:	d003      	beq.n	802fcf8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802fcf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fcf2:	6878      	ldr	r0, [r7, #4]
 802fcf4:	f000 fd08 	bl	8030708 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcfa:	3301      	adds	r3, #1
 802fcfc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd00:	085b      	lsrs	r3, r3, #1
 802fd02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd06:	2b00      	cmp	r3, #0
 802fd08:	f47f af2e 	bne.w	802fb68 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802fd0c:	687b      	ldr	r3, [r7, #4]
 802fd0e:	681b      	ldr	r3, [r3, #0]
 802fd10:	4618      	mov	r0, r3
 802fd12:	f009 f9f3 	bl	80390fc <USB_ReadInterrupts>
 802fd16:	4603      	mov	r3, r0
 802fd18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802fd1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802fd20:	d122      	bne.n	802fd68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fd22:	69fb      	ldr	r3, [r7, #28]
 802fd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd28:	685b      	ldr	r3, [r3, #4]
 802fd2a:	69fa      	ldr	r2, [r7, #28]
 802fd2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd30:	f023 0301 	bic.w	r3, r3, #1
 802fd34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802fd36:	687b      	ldr	r3, [r7, #4]
 802fd38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fd3c:	2b01      	cmp	r3, #1
 802fd3e:	d108      	bne.n	802fd52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802fd40:	687b      	ldr	r3, [r7, #4]
 802fd42:	2200      	movs	r2, #0
 802fd44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802fd48:	2100      	movs	r1, #0
 802fd4a:	6878      	ldr	r0, [r7, #4]
 802fd4c:	f000 ff14 	bl	8030b78 <HAL_PCDEx_LPM_Callback>
 802fd50:	e002      	b.n	802fd58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802fd52:	6878      	ldr	r0, [r7, #4]
 802fd54:	f00b fdac 	bl	803b8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802fd58:	687b      	ldr	r3, [r7, #4]
 802fd5a:	681b      	ldr	r3, [r3, #0]
 802fd5c:	695a      	ldr	r2, [r3, #20]
 802fd5e:	687b      	ldr	r3, [r7, #4]
 802fd60:	681b      	ldr	r3, [r3, #0]
 802fd62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802fd66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802fd68:	687b      	ldr	r3, [r7, #4]
 802fd6a:	681b      	ldr	r3, [r3, #0]
 802fd6c:	4618      	mov	r0, r3
 802fd6e:	f009 f9c5 	bl	80390fc <USB_ReadInterrupts>
 802fd72:	4603      	mov	r3, r0
 802fd74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fd7c:	d112      	bne.n	802fda4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802fd7e:	69fb      	ldr	r3, [r7, #28]
 802fd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd84:	689b      	ldr	r3, [r3, #8]
 802fd86:	f003 0301 	and.w	r3, r3, #1
 802fd8a:	2b01      	cmp	r3, #1
 802fd8c:	d102      	bne.n	802fd94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fd8e:	6878      	ldr	r0, [r7, #4]
 802fd90:	f00b fd68 	bl	803b864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802fd94:	687b      	ldr	r3, [r7, #4]
 802fd96:	681b      	ldr	r3, [r3, #0]
 802fd98:	695a      	ldr	r2, [r3, #20]
 802fd9a:	687b      	ldr	r3, [r7, #4]
 802fd9c:	681b      	ldr	r3, [r3, #0]
 802fd9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802fda2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802fda4:	687b      	ldr	r3, [r7, #4]
 802fda6:	681b      	ldr	r3, [r3, #0]
 802fda8:	4618      	mov	r0, r3
 802fdaa:	f009 f9a7 	bl	80390fc <USB_ReadInterrupts>
 802fdae:	4603      	mov	r3, r0
 802fdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802fdb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802fdb8:	d121      	bne.n	802fdfe <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 802fdba:	687b      	ldr	r3, [r7, #4]
 802fdbc:	681b      	ldr	r3, [r3, #0]
 802fdbe:	695a      	ldr	r2, [r3, #20]
 802fdc0:	687b      	ldr	r3, [r7, #4]
 802fdc2:	681b      	ldr	r3, [r3, #0]
 802fdc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802fdc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 802fdca:	687b      	ldr	r3, [r7, #4]
 802fdcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fdd0:	2b00      	cmp	r3, #0
 802fdd2:	d111      	bne.n	802fdf8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 802fdd4:	687b      	ldr	r3, [r7, #4]
 802fdd6:	2201      	movs	r2, #1
 802fdd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 802fddc:	687b      	ldr	r3, [r7, #4]
 802fdde:	681b      	ldr	r3, [r3, #0]
 802fde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fde2:	089b      	lsrs	r3, r3, #2
 802fde4:	f003 020f 	and.w	r2, r3, #15
 802fde8:	687b      	ldr	r3, [r7, #4]
 802fdea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 802fdee:	2101      	movs	r1, #1
 802fdf0:	6878      	ldr	r0, [r7, #4]
 802fdf2:	f000 fec1 	bl	8030b78 <HAL_PCDEx_LPM_Callback>
 802fdf6:	e002      	b.n	802fdfe <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fdf8:	6878      	ldr	r0, [r7, #4]
 802fdfa:	f00b fd33 	bl	803b864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 802fdfe:	687b      	ldr	r3, [r7, #4]
 802fe00:	681b      	ldr	r3, [r3, #0]
 802fe02:	4618      	mov	r0, r3
 802fe04:	f009 f97a 	bl	80390fc <USB_ReadInterrupts>
 802fe08:	4603      	mov	r3, r0
 802fe0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802fe0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fe12:	f040 80b7 	bne.w	802ff84 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fe16:	69fb      	ldr	r3, [r7, #28]
 802fe18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe1c:	685b      	ldr	r3, [r3, #4]
 802fe1e:	69fa      	ldr	r2, [r7, #28]
 802fe20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe24:	f023 0301 	bic.w	r3, r3, #1
 802fe28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802fe2a:	687b      	ldr	r3, [r7, #4]
 802fe2c:	681b      	ldr	r3, [r3, #0]
 802fe2e:	2110      	movs	r1, #16
 802fe30:	4618      	mov	r0, r3
 802fe32:	f008 f935 	bl	80380a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fe36:	2300      	movs	r3, #0
 802fe38:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fe3a:	e046      	b.n	802feca <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe3e:	015a      	lsls	r2, r3, #5
 802fe40:	69fb      	ldr	r3, [r7, #28]
 802fe42:	4413      	add	r3, r2
 802fe44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fe48:	461a      	mov	r2, r3
 802fe4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fe4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe52:	015a      	lsls	r2, r3, #5
 802fe54:	69fb      	ldr	r3, [r7, #28]
 802fe56:	4413      	add	r3, r2
 802fe58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fe5c:	681b      	ldr	r3, [r3, #0]
 802fe5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fe60:	0151      	lsls	r1, r2, #5
 802fe62:	69fa      	ldr	r2, [r7, #28]
 802fe64:	440a      	add	r2, r1
 802fe66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fe6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fe6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe72:	015a      	lsls	r2, r3, #5
 802fe74:	69fb      	ldr	r3, [r7, #28]
 802fe76:	4413      	add	r3, r2
 802fe78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fe7c:	461a      	mov	r2, r3
 802fe7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fe82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe86:	015a      	lsls	r2, r3, #5
 802fe88:	69fb      	ldr	r3, [r7, #28]
 802fe8a:	4413      	add	r3, r2
 802fe8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fe90:	681b      	ldr	r3, [r3, #0]
 802fe92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fe94:	0151      	lsls	r1, r2, #5
 802fe96:	69fa      	ldr	r2, [r7, #28]
 802fe98:	440a      	add	r2, r1
 802fe9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fe9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fea6:	015a      	lsls	r2, r3, #5
 802fea8:	69fb      	ldr	r3, [r7, #28]
 802feaa:	4413      	add	r3, r2
 802feac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802feb0:	681b      	ldr	r3, [r3, #0]
 802feb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802feb4:	0151      	lsls	r1, r2, #5
 802feb6:	69fa      	ldr	r2, [r7, #28]
 802feb8:	440a      	add	r2, r1
 802feba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802febe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802fec2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fec6:	3301      	adds	r3, #1
 802fec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802feca:	687b      	ldr	r3, [r7, #4]
 802fecc:	685b      	ldr	r3, [r3, #4]
 802fece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fed0:	429a      	cmp	r2, r3
 802fed2:	d3b3      	bcc.n	802fe3c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802fed4:	69fb      	ldr	r3, [r7, #28]
 802fed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802feda:	69db      	ldr	r3, [r3, #28]
 802fedc:	69fa      	ldr	r2, [r7, #28]
 802fede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fee2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802fee6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802fee8:	687b      	ldr	r3, [r7, #4]
 802feea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802feec:	2b00      	cmp	r3, #0
 802feee:	d016      	beq.n	802ff1e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802fef0:	69fb      	ldr	r3, [r7, #28]
 802fef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802fefa:	69fa      	ldr	r2, [r7, #28]
 802fefc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff00:	f043 030b 	orr.w	r3, r3, #11
 802ff04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802ff08:	69fb      	ldr	r3, [r7, #28]
 802ff0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ff10:	69fa      	ldr	r2, [r7, #28]
 802ff12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff16:	f043 030b 	orr.w	r3, r3, #11
 802ff1a:	6453      	str	r3, [r2, #68]	; 0x44
 802ff1c:	e015      	b.n	802ff4a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802ff1e:	69fb      	ldr	r3, [r7, #28]
 802ff20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff24:	695a      	ldr	r2, [r3, #20]
 802ff26:	69fb      	ldr	r3, [r7, #28]
 802ff28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff2c:	4619      	mov	r1, r3
 802ff2e:	f242 032b 	movw	r3, #8235	; 0x202b
 802ff32:	4313      	orrs	r3, r2
 802ff34:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802ff36:	69fb      	ldr	r3, [r7, #28]
 802ff38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff3c:	691b      	ldr	r3, [r3, #16]
 802ff3e:	69fa      	ldr	r2, [r7, #28]
 802ff40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff44:	f043 030b 	orr.w	r3, r3, #11
 802ff48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802ff4a:	69fb      	ldr	r3, [r7, #28]
 802ff4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff50:	681b      	ldr	r3, [r3, #0]
 802ff52:	69fa      	ldr	r2, [r7, #28]
 802ff54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802ff5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ff5e:	687b      	ldr	r3, [r7, #4]
 802ff60:	6818      	ldr	r0, [r3, #0]
 802ff62:	687b      	ldr	r3, [r7, #4]
 802ff64:	691b      	ldr	r3, [r3, #16]
 802ff66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802ff68:	687b      	ldr	r3, [r7, #4]
 802ff6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ff6e:	461a      	mov	r2, r3
 802ff70:	f009 f98a 	bl	8039288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802ff74:	687b      	ldr	r3, [r7, #4]
 802ff76:	681b      	ldr	r3, [r3, #0]
 802ff78:	695a      	ldr	r2, [r3, #20]
 802ff7a:	687b      	ldr	r3, [r7, #4]
 802ff7c:	681b      	ldr	r3, [r3, #0]
 802ff7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802ff82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802ff84:	687b      	ldr	r3, [r7, #4]
 802ff86:	681b      	ldr	r3, [r3, #0]
 802ff88:	4618      	mov	r0, r3
 802ff8a:	f009 f8b7 	bl	80390fc <USB_ReadInterrupts>
 802ff8e:	4603      	mov	r3, r0
 802ff90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ff94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ff98:	d124      	bne.n	802ffe4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802ff9a:	687b      	ldr	r3, [r7, #4]
 802ff9c:	681b      	ldr	r3, [r3, #0]
 802ff9e:	4618      	mov	r0, r3
 802ffa0:	f009 f94e 	bl	8039240 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802ffa4:	687b      	ldr	r3, [r7, #4]
 802ffa6:	681b      	ldr	r3, [r3, #0]
 802ffa8:	4618      	mov	r0, r3
 802ffaa:	f008 f8f6 	bl	803819a <USB_GetDevSpeed>
 802ffae:	4603      	mov	r3, r0
 802ffb0:	461a      	mov	r2, r3
 802ffb2:	687b      	ldr	r3, [r7, #4]
 802ffb4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	681c      	ldr	r4, [r3, #0]
 802ffba:	f001 fd91 	bl	8031ae0 <HAL_RCC_GetHCLKFreq>
 802ffbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802ffc4:	b2db      	uxtb	r3, r3
 802ffc6:	461a      	mov	r2, r3
 802ffc8:	4620      	mov	r0, r4
 802ffca:	f007 fdfb 	bl	8037bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 802ffce:	6878      	ldr	r0, [r7, #4]
 802ffd0:	f00b fc1f 	bl	803b812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802ffd4:	687b      	ldr	r3, [r7, #4]
 802ffd6:	681b      	ldr	r3, [r3, #0]
 802ffd8:	695a      	ldr	r2, [r3, #20]
 802ffda:	687b      	ldr	r3, [r7, #4]
 802ffdc:	681b      	ldr	r3, [r3, #0]
 802ffde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802ffe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802ffe4:	687b      	ldr	r3, [r7, #4]
 802ffe6:	681b      	ldr	r3, [r3, #0]
 802ffe8:	4618      	mov	r0, r3
 802ffea:	f009 f887 	bl	80390fc <USB_ReadInterrupts>
 802ffee:	4603      	mov	r3, r0
 802fff0:	f003 0308 	and.w	r3, r3, #8
 802fff4:	2b08      	cmp	r3, #8
 802fff6:	d10a      	bne.n	803000e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802fff8:	6878      	ldr	r0, [r7, #4]
 802fffa:	f00b fbfc 	bl	803b7f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 802fffe:	687b      	ldr	r3, [r7, #4]
 8030000:	681b      	ldr	r3, [r3, #0]
 8030002:	695a      	ldr	r2, [r3, #20]
 8030004:	687b      	ldr	r3, [r7, #4]
 8030006:	681b      	ldr	r3, [r3, #0]
 8030008:	f002 0208 	and.w	r2, r2, #8
 803000c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	681b      	ldr	r3, [r3, #0]
 8030012:	4618      	mov	r0, r3
 8030014:	f009 f872 	bl	80390fc <USB_ReadInterrupts>
 8030018:	4603      	mov	r3, r0
 803001a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803001e:	2b80      	cmp	r3, #128	; 0x80
 8030020:	d122      	bne.n	8030068 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8030022:	6a3b      	ldr	r3, [r7, #32]
 8030024:	699b      	ldr	r3, [r3, #24]
 8030026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 803002a:	6a3b      	ldr	r3, [r7, #32]
 803002c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803002e:	2301      	movs	r3, #1
 8030030:	627b      	str	r3, [r7, #36]	; 0x24
 8030032:	e014      	b.n	803005e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8030034:	6879      	ldr	r1, [r7, #4]
 8030036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030038:	4613      	mov	r3, r2
 803003a:	00db      	lsls	r3, r3, #3
 803003c:	4413      	add	r3, r2
 803003e:	009b      	lsls	r3, r3, #2
 8030040:	440b      	add	r3, r1
 8030042:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8030046:	781b      	ldrb	r3, [r3, #0]
 8030048:	2b01      	cmp	r3, #1
 803004a:	d105      	bne.n	8030058 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 803004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803004e:	b2db      	uxtb	r3, r3
 8030050:	4619      	mov	r1, r3
 8030052:	6878      	ldr	r0, [r7, #4]
 8030054:	f000 fb27 	bl	80306a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803005a:	3301      	adds	r3, #1
 803005c:	627b      	str	r3, [r7, #36]	; 0x24
 803005e:	687b      	ldr	r3, [r7, #4]
 8030060:	685b      	ldr	r3, [r3, #4]
 8030062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030064:	429a      	cmp	r2, r3
 8030066:	d3e5      	bcc.n	8030034 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8030068:	687b      	ldr	r3, [r7, #4]
 803006a:	681b      	ldr	r3, [r3, #0]
 803006c:	4618      	mov	r0, r3
 803006e:	f009 f845 	bl	80390fc <USB_ReadInterrupts>
 8030072:	4603      	mov	r3, r0
 8030074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8030078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803007c:	d13b      	bne.n	80300f6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803007e:	2301      	movs	r3, #1
 8030080:	627b      	str	r3, [r7, #36]	; 0x24
 8030082:	e02b      	b.n	80300dc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8030084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030086:	015a      	lsls	r2, r3, #5
 8030088:	69fb      	ldr	r3, [r7, #28]
 803008a:	4413      	add	r3, r2
 803008c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8030090:	681b      	ldr	r3, [r3, #0]
 8030092:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8030094:	6879      	ldr	r1, [r7, #4]
 8030096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030098:	4613      	mov	r3, r2
 803009a:	00db      	lsls	r3, r3, #3
 803009c:	4413      	add	r3, r2
 803009e:	009b      	lsls	r3, r3, #2
 80300a0:	440b      	add	r3, r1
 80300a2:	3340      	adds	r3, #64	; 0x40
 80300a4:	781b      	ldrb	r3, [r3, #0]
 80300a6:	2b01      	cmp	r3, #1
 80300a8:	d115      	bne.n	80300d6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80300aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80300ac:	2b00      	cmp	r3, #0
 80300ae:	da12      	bge.n	80300d6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80300b0:	6879      	ldr	r1, [r7, #4]
 80300b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300b4:	4613      	mov	r3, r2
 80300b6:	00db      	lsls	r3, r3, #3
 80300b8:	4413      	add	r3, r2
 80300ba:	009b      	lsls	r3, r3, #2
 80300bc:	440b      	add	r3, r1
 80300be:	333f      	adds	r3, #63	; 0x3f
 80300c0:	2201      	movs	r2, #1
 80300c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80300c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300c6:	b2db      	uxtb	r3, r3
 80300c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80300cc:	b2db      	uxtb	r3, r3
 80300ce:	4619      	mov	r1, r3
 80300d0:	6878      	ldr	r0, [r7, #4]
 80300d2:	f000 fae8 	bl	80306a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80300d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300d8:	3301      	adds	r3, #1
 80300da:	627b      	str	r3, [r7, #36]	; 0x24
 80300dc:	687b      	ldr	r3, [r7, #4]
 80300de:	685b      	ldr	r3, [r3, #4]
 80300e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300e2:	429a      	cmp	r2, r3
 80300e4:	d3ce      	bcc.n	8030084 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80300e6:	687b      	ldr	r3, [r7, #4]
 80300e8:	681b      	ldr	r3, [r3, #0]
 80300ea:	695a      	ldr	r2, [r3, #20]
 80300ec:	687b      	ldr	r3, [r7, #4]
 80300ee:	681b      	ldr	r3, [r3, #0]
 80300f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80300f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	681b      	ldr	r3, [r3, #0]
 80300fa:	4618      	mov	r0, r3
 80300fc:	f008 fffe 	bl	80390fc <USB_ReadInterrupts>
 8030100:	4603      	mov	r3, r0
 8030102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8030106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803010a:	d155      	bne.n	80301b8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803010c:	2301      	movs	r3, #1
 803010e:	627b      	str	r3, [r7, #36]	; 0x24
 8030110:	e045      	b.n	803019e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8030112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030114:	015a      	lsls	r2, r3, #5
 8030116:	69fb      	ldr	r3, [r7, #28]
 8030118:	4413      	add	r3, r2
 803011a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803011e:	681b      	ldr	r3, [r3, #0]
 8030120:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8030122:	6879      	ldr	r1, [r7, #4]
 8030124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030126:	4613      	mov	r3, r2
 8030128:	00db      	lsls	r3, r3, #3
 803012a:	4413      	add	r3, r2
 803012c:	009b      	lsls	r3, r3, #2
 803012e:	440b      	add	r3, r1
 8030130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8030134:	781b      	ldrb	r3, [r3, #0]
 8030136:	2b01      	cmp	r3, #1
 8030138:	d12e      	bne.n	8030198 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803013a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 803013c:	2b00      	cmp	r3, #0
 803013e:	da2b      	bge.n	8030198 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8030140:	69bb      	ldr	r3, [r7, #24]
 8030142:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8030146:	687b      	ldr	r3, [r7, #4]
 8030148:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 803014c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8030150:	429a      	cmp	r2, r3
 8030152:	d121      	bne.n	8030198 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8030154:	6879      	ldr	r1, [r7, #4]
 8030156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030158:	4613      	mov	r3, r2
 803015a:	00db      	lsls	r3, r3, #3
 803015c:	4413      	add	r3, r2
 803015e:	009b      	lsls	r3, r3, #2
 8030160:	440b      	add	r3, r1
 8030162:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8030166:	2201      	movs	r2, #1
 8030168:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 803016a:	6a3b      	ldr	r3, [r7, #32]
 803016c:	699b      	ldr	r3, [r3, #24]
 803016e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8030172:	6a3b      	ldr	r3, [r7, #32]
 8030174:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8030176:	6a3b      	ldr	r3, [r7, #32]
 8030178:	695b      	ldr	r3, [r3, #20]
 803017a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803017e:	2b00      	cmp	r3, #0
 8030180:	d10a      	bne.n	8030198 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8030182:	69fb      	ldr	r3, [r7, #28]
 8030184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030188:	685b      	ldr	r3, [r3, #4]
 803018a:	69fa      	ldr	r2, [r7, #28]
 803018c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8030190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8030194:	6053      	str	r3, [r2, #4]
            break;
 8030196:	e007      	b.n	80301a8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803019a:	3301      	adds	r3, #1
 803019c:	627b      	str	r3, [r7, #36]	; 0x24
 803019e:	687b      	ldr	r3, [r7, #4]
 80301a0:	685b      	ldr	r3, [r3, #4]
 80301a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80301a4:	429a      	cmp	r2, r3
 80301a6:	d3b4      	bcc.n	8030112 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80301a8:	687b      	ldr	r3, [r7, #4]
 80301aa:	681b      	ldr	r3, [r3, #0]
 80301ac:	695a      	ldr	r2, [r3, #20]
 80301ae:	687b      	ldr	r3, [r7, #4]
 80301b0:	681b      	ldr	r3, [r3, #0]
 80301b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80301b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80301b8:	687b      	ldr	r3, [r7, #4]
 80301ba:	681b      	ldr	r3, [r3, #0]
 80301bc:	4618      	mov	r0, r3
 80301be:	f008 ff9d 	bl	80390fc <USB_ReadInterrupts>
 80301c2:	4603      	mov	r3, r0
 80301c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80301c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80301cc:	d10a      	bne.n	80301e4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80301ce:	6878      	ldr	r0, [r7, #4]
 80301d0:	f00b fba0 	bl	803b914 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80301d4:	687b      	ldr	r3, [r7, #4]
 80301d6:	681b      	ldr	r3, [r3, #0]
 80301d8:	695a      	ldr	r2, [r3, #20]
 80301da:	687b      	ldr	r3, [r7, #4]
 80301dc:	681b      	ldr	r3, [r3, #0]
 80301de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80301e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80301e4:	687b      	ldr	r3, [r7, #4]
 80301e6:	681b      	ldr	r3, [r3, #0]
 80301e8:	4618      	mov	r0, r3
 80301ea:	f008 ff87 	bl	80390fc <USB_ReadInterrupts>
 80301ee:	4603      	mov	r3, r0
 80301f0:	f003 0304 	and.w	r3, r3, #4
 80301f4:	2b04      	cmp	r3, #4
 80301f6:	d115      	bne.n	8030224 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80301f8:	687b      	ldr	r3, [r7, #4]
 80301fa:	681b      	ldr	r3, [r3, #0]
 80301fc:	685b      	ldr	r3, [r3, #4]
 80301fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8030200:	69bb      	ldr	r3, [r7, #24]
 8030202:	f003 0304 	and.w	r3, r3, #4
 8030206:	2b00      	cmp	r3, #0
 8030208:	d002      	beq.n	8030210 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803020a:	6878      	ldr	r0, [r7, #4]
 803020c:	f00b fb90 	bl	803b930 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8030210:	687b      	ldr	r3, [r7, #4]
 8030212:	681b      	ldr	r3, [r3, #0]
 8030214:	6859      	ldr	r1, [r3, #4]
 8030216:	687b      	ldr	r3, [r7, #4]
 8030218:	681b      	ldr	r3, [r3, #0]
 803021a:	69ba      	ldr	r2, [r7, #24]
 803021c:	430a      	orrs	r2, r1
 803021e:	605a      	str	r2, [r3, #4]
 8030220:	e000      	b.n	8030224 <HAL_PCD_IRQHandler+0x992>
      return;
 8030222:	bf00      	nop
    }
  }
}
 8030224:	3734      	adds	r7, #52	; 0x34
 8030226:	46bd      	mov	sp, r7
 8030228:	bd90      	pop	{r4, r7, pc}

0803022a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 803022a:	b580      	push	{r7, lr}
 803022c:	b082      	sub	sp, #8
 803022e:	af00      	add	r7, sp, #0
 8030230:	6078      	str	r0, [r7, #4]
 8030232:	460b      	mov	r3, r1
 8030234:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8030236:	687b      	ldr	r3, [r7, #4]
 8030238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803023c:	2b01      	cmp	r3, #1
 803023e:	d101      	bne.n	8030244 <HAL_PCD_SetAddress+0x1a>
 8030240:	2302      	movs	r3, #2
 8030242:	e013      	b.n	803026c <HAL_PCD_SetAddress+0x42>
 8030244:	687b      	ldr	r3, [r7, #4]
 8030246:	2201      	movs	r2, #1
 8030248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 803024c:	687b      	ldr	r3, [r7, #4]
 803024e:	78fa      	ldrb	r2, [r7, #3]
 8030250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8030254:	687b      	ldr	r3, [r7, #4]
 8030256:	681b      	ldr	r3, [r3, #0]
 8030258:	78fa      	ldrb	r2, [r7, #3]
 803025a:	4611      	mov	r1, r2
 803025c:	4618      	mov	r0, r3
 803025e:	f008 fee5 	bl	803902c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8030262:	687b      	ldr	r3, [r7, #4]
 8030264:	2200      	movs	r2, #0
 8030266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 803026a:	2300      	movs	r3, #0
}
 803026c:	4618      	mov	r0, r3
 803026e:	3708      	adds	r7, #8
 8030270:	46bd      	mov	sp, r7
 8030272:	bd80      	pop	{r7, pc}

08030274 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8030274:	b580      	push	{r7, lr}
 8030276:	b084      	sub	sp, #16
 8030278:	af00      	add	r7, sp, #0
 803027a:	6078      	str	r0, [r7, #4]
 803027c:	4608      	mov	r0, r1
 803027e:	4611      	mov	r1, r2
 8030280:	461a      	mov	r2, r3
 8030282:	4603      	mov	r3, r0
 8030284:	70fb      	strb	r3, [r7, #3]
 8030286:	460b      	mov	r3, r1
 8030288:	803b      	strh	r3, [r7, #0]
 803028a:	4613      	mov	r3, r2
 803028c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 803028e:	2300      	movs	r3, #0
 8030290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8030292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030296:	2b00      	cmp	r3, #0
 8030298:	da0f      	bge.n	80302ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803029a:	78fb      	ldrb	r3, [r7, #3]
 803029c:	f003 020f 	and.w	r2, r3, #15
 80302a0:	4613      	mov	r3, r2
 80302a2:	00db      	lsls	r3, r3, #3
 80302a4:	4413      	add	r3, r2
 80302a6:	009b      	lsls	r3, r3, #2
 80302a8:	3338      	adds	r3, #56	; 0x38
 80302aa:	687a      	ldr	r2, [r7, #4]
 80302ac:	4413      	add	r3, r2
 80302ae:	3304      	adds	r3, #4
 80302b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80302b2:	68fb      	ldr	r3, [r7, #12]
 80302b4:	2201      	movs	r2, #1
 80302b6:	705a      	strb	r2, [r3, #1]
 80302b8:	e00f      	b.n	80302da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80302ba:	78fb      	ldrb	r3, [r7, #3]
 80302bc:	f003 020f 	and.w	r2, r3, #15
 80302c0:	4613      	mov	r3, r2
 80302c2:	00db      	lsls	r3, r3, #3
 80302c4:	4413      	add	r3, r2
 80302c6:	009b      	lsls	r3, r3, #2
 80302c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80302cc:	687a      	ldr	r2, [r7, #4]
 80302ce:	4413      	add	r3, r2
 80302d0:	3304      	adds	r3, #4
 80302d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80302d4:	68fb      	ldr	r3, [r7, #12]
 80302d6:	2200      	movs	r2, #0
 80302d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80302da:	78fb      	ldrb	r3, [r7, #3]
 80302dc:	f003 030f 	and.w	r3, r3, #15
 80302e0:	b2da      	uxtb	r2, r3
 80302e2:	68fb      	ldr	r3, [r7, #12]
 80302e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80302e6:	883a      	ldrh	r2, [r7, #0]
 80302e8:	68fb      	ldr	r3, [r7, #12]
 80302ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80302ec:	68fb      	ldr	r3, [r7, #12]
 80302ee:	78ba      	ldrb	r2, [r7, #2]
 80302f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80302f2:	68fb      	ldr	r3, [r7, #12]
 80302f4:	785b      	ldrb	r3, [r3, #1]
 80302f6:	2b00      	cmp	r3, #0
 80302f8:	d004      	beq.n	8030304 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80302fa:	68fb      	ldr	r3, [r7, #12]
 80302fc:	781b      	ldrb	r3, [r3, #0]
 80302fe:	b29a      	uxth	r2, r3
 8030300:	68fb      	ldr	r3, [r7, #12]
 8030302:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8030304:	78bb      	ldrb	r3, [r7, #2]
 8030306:	2b02      	cmp	r3, #2
 8030308:	d102      	bne.n	8030310 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 803030a:	68fb      	ldr	r3, [r7, #12]
 803030c:	2200      	movs	r2, #0
 803030e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8030310:	687b      	ldr	r3, [r7, #4]
 8030312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030316:	2b01      	cmp	r3, #1
 8030318:	d101      	bne.n	803031e <HAL_PCD_EP_Open+0xaa>
 803031a:	2302      	movs	r3, #2
 803031c:	e00e      	b.n	803033c <HAL_PCD_EP_Open+0xc8>
 803031e:	687b      	ldr	r3, [r7, #4]
 8030320:	2201      	movs	r2, #1
 8030322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8030326:	687b      	ldr	r3, [r7, #4]
 8030328:	681b      	ldr	r3, [r3, #0]
 803032a:	68f9      	ldr	r1, [r7, #12]
 803032c:	4618      	mov	r0, r3
 803032e:	f007 ff59 	bl	80381e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8030332:	687b      	ldr	r3, [r7, #4]
 8030334:	2200      	movs	r2, #0
 8030336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 803033a:	7afb      	ldrb	r3, [r7, #11]
}
 803033c:	4618      	mov	r0, r3
 803033e:	3710      	adds	r7, #16
 8030340:	46bd      	mov	sp, r7
 8030342:	bd80      	pop	{r7, pc}

08030344 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030344:	b580      	push	{r7, lr}
 8030346:	b084      	sub	sp, #16
 8030348:	af00      	add	r7, sp, #0
 803034a:	6078      	str	r0, [r7, #4]
 803034c:	460b      	mov	r3, r1
 803034e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8030350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030354:	2b00      	cmp	r3, #0
 8030356:	da0f      	bge.n	8030378 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030358:	78fb      	ldrb	r3, [r7, #3]
 803035a:	f003 020f 	and.w	r2, r3, #15
 803035e:	4613      	mov	r3, r2
 8030360:	00db      	lsls	r3, r3, #3
 8030362:	4413      	add	r3, r2
 8030364:	009b      	lsls	r3, r3, #2
 8030366:	3338      	adds	r3, #56	; 0x38
 8030368:	687a      	ldr	r2, [r7, #4]
 803036a:	4413      	add	r3, r2
 803036c:	3304      	adds	r3, #4
 803036e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8030370:	68fb      	ldr	r3, [r7, #12]
 8030372:	2201      	movs	r2, #1
 8030374:	705a      	strb	r2, [r3, #1]
 8030376:	e00f      	b.n	8030398 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030378:	78fb      	ldrb	r3, [r7, #3]
 803037a:	f003 020f 	and.w	r2, r3, #15
 803037e:	4613      	mov	r3, r2
 8030380:	00db      	lsls	r3, r3, #3
 8030382:	4413      	add	r3, r2
 8030384:	009b      	lsls	r3, r3, #2
 8030386:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803038a:	687a      	ldr	r2, [r7, #4]
 803038c:	4413      	add	r3, r2
 803038e:	3304      	adds	r3, #4
 8030390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8030392:	68fb      	ldr	r3, [r7, #12]
 8030394:	2200      	movs	r2, #0
 8030396:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8030398:	78fb      	ldrb	r3, [r7, #3]
 803039a:	f003 030f 	and.w	r3, r3, #15
 803039e:	b2da      	uxtb	r2, r3
 80303a0:	68fb      	ldr	r3, [r7, #12]
 80303a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80303a4:	687b      	ldr	r3, [r7, #4]
 80303a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80303aa:	2b01      	cmp	r3, #1
 80303ac:	d101      	bne.n	80303b2 <HAL_PCD_EP_Close+0x6e>
 80303ae:	2302      	movs	r3, #2
 80303b0:	e00e      	b.n	80303d0 <HAL_PCD_EP_Close+0x8c>
 80303b2:	687b      	ldr	r3, [r7, #4]
 80303b4:	2201      	movs	r2, #1
 80303b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80303ba:	687b      	ldr	r3, [r7, #4]
 80303bc:	681b      	ldr	r3, [r3, #0]
 80303be:	68f9      	ldr	r1, [r7, #12]
 80303c0:	4618      	mov	r0, r3
 80303c2:	f007 ff97 	bl	80382f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80303c6:	687b      	ldr	r3, [r7, #4]
 80303c8:	2200      	movs	r2, #0
 80303ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80303ce:	2300      	movs	r3, #0
}
 80303d0:	4618      	mov	r0, r3
 80303d2:	3710      	adds	r7, #16
 80303d4:	46bd      	mov	sp, r7
 80303d6:	bd80      	pop	{r7, pc}

080303d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80303d8:	b580      	push	{r7, lr}
 80303da:	b086      	sub	sp, #24
 80303dc:	af00      	add	r7, sp, #0
 80303de:	60f8      	str	r0, [r7, #12]
 80303e0:	607a      	str	r2, [r7, #4]
 80303e2:	603b      	str	r3, [r7, #0]
 80303e4:	460b      	mov	r3, r1
 80303e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80303e8:	7afb      	ldrb	r3, [r7, #11]
 80303ea:	f003 020f 	and.w	r2, r3, #15
 80303ee:	4613      	mov	r3, r2
 80303f0:	00db      	lsls	r3, r3, #3
 80303f2:	4413      	add	r3, r2
 80303f4:	009b      	lsls	r3, r3, #2
 80303f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80303fa:	68fa      	ldr	r2, [r7, #12]
 80303fc:	4413      	add	r3, r2
 80303fe:	3304      	adds	r3, #4
 8030400:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8030402:	697b      	ldr	r3, [r7, #20]
 8030404:	687a      	ldr	r2, [r7, #4]
 8030406:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030408:	697b      	ldr	r3, [r7, #20]
 803040a:	683a      	ldr	r2, [r7, #0]
 803040c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 803040e:	697b      	ldr	r3, [r7, #20]
 8030410:	2200      	movs	r2, #0
 8030412:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8030414:	697b      	ldr	r3, [r7, #20]
 8030416:	2200      	movs	r2, #0
 8030418:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803041a:	7afb      	ldrb	r3, [r7, #11]
 803041c:	f003 030f 	and.w	r3, r3, #15
 8030420:	b2da      	uxtb	r2, r3
 8030422:	697b      	ldr	r3, [r7, #20]
 8030424:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8030426:	68fb      	ldr	r3, [r7, #12]
 8030428:	691b      	ldr	r3, [r3, #16]
 803042a:	2b01      	cmp	r3, #1
 803042c:	d102      	bne.n	8030434 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 803042e:	687a      	ldr	r2, [r7, #4]
 8030430:	697b      	ldr	r3, [r7, #20]
 8030432:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030434:	7afb      	ldrb	r3, [r7, #11]
 8030436:	f003 030f 	and.w	r3, r3, #15
 803043a:	2b00      	cmp	r3, #0
 803043c:	d109      	bne.n	8030452 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803043e:	68fb      	ldr	r3, [r7, #12]
 8030440:	6818      	ldr	r0, [r3, #0]
 8030442:	68fb      	ldr	r3, [r7, #12]
 8030444:	691b      	ldr	r3, [r3, #16]
 8030446:	b2db      	uxtb	r3, r3
 8030448:	461a      	mov	r2, r3
 803044a:	6979      	ldr	r1, [r7, #20]
 803044c:	f008 fa7e 	bl	803894c <USB_EP0StartXfer>
 8030450:	e008      	b.n	8030464 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030452:	68fb      	ldr	r3, [r7, #12]
 8030454:	6818      	ldr	r0, [r3, #0]
 8030456:	68fb      	ldr	r3, [r7, #12]
 8030458:	691b      	ldr	r3, [r3, #16]
 803045a:	b2db      	uxtb	r3, r3
 803045c:	461a      	mov	r2, r3
 803045e:	6979      	ldr	r1, [r7, #20]
 8030460:	f008 f824 	bl	80384ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8030464:	2300      	movs	r3, #0
}
 8030466:	4618      	mov	r0, r3
 8030468:	3718      	adds	r7, #24
 803046a:	46bd      	mov	sp, r7
 803046c:	bd80      	pop	{r7, pc}

0803046e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803046e:	b480      	push	{r7}
 8030470:	b083      	sub	sp, #12
 8030472:	af00      	add	r7, sp, #0
 8030474:	6078      	str	r0, [r7, #4]
 8030476:	460b      	mov	r3, r1
 8030478:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 803047a:	78fb      	ldrb	r3, [r7, #3]
 803047c:	f003 020f 	and.w	r2, r3, #15
 8030480:	6879      	ldr	r1, [r7, #4]
 8030482:	4613      	mov	r3, r2
 8030484:	00db      	lsls	r3, r3, #3
 8030486:	4413      	add	r3, r2
 8030488:	009b      	lsls	r3, r3, #2
 803048a:	440b      	add	r3, r1
 803048c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8030490:	681b      	ldr	r3, [r3, #0]
}
 8030492:	4618      	mov	r0, r3
 8030494:	370c      	adds	r7, #12
 8030496:	46bd      	mov	sp, r7
 8030498:	f85d 7b04 	ldr.w	r7, [sp], #4
 803049c:	4770      	bx	lr

0803049e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803049e:	b580      	push	{r7, lr}
 80304a0:	b086      	sub	sp, #24
 80304a2:	af00      	add	r7, sp, #0
 80304a4:	60f8      	str	r0, [r7, #12]
 80304a6:	607a      	str	r2, [r7, #4]
 80304a8:	603b      	str	r3, [r7, #0]
 80304aa:	460b      	mov	r3, r1
 80304ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80304ae:	7afb      	ldrb	r3, [r7, #11]
 80304b0:	f003 020f 	and.w	r2, r3, #15
 80304b4:	4613      	mov	r3, r2
 80304b6:	00db      	lsls	r3, r3, #3
 80304b8:	4413      	add	r3, r2
 80304ba:	009b      	lsls	r3, r3, #2
 80304bc:	3338      	adds	r3, #56	; 0x38
 80304be:	68fa      	ldr	r2, [r7, #12]
 80304c0:	4413      	add	r3, r2
 80304c2:	3304      	adds	r3, #4
 80304c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80304c6:	697b      	ldr	r3, [r7, #20]
 80304c8:	687a      	ldr	r2, [r7, #4]
 80304ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80304cc:	697b      	ldr	r3, [r7, #20]
 80304ce:	683a      	ldr	r2, [r7, #0]
 80304d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80304d2:	697b      	ldr	r3, [r7, #20]
 80304d4:	2200      	movs	r2, #0
 80304d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80304d8:	697b      	ldr	r3, [r7, #20]
 80304da:	2201      	movs	r2, #1
 80304dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80304de:	7afb      	ldrb	r3, [r7, #11]
 80304e0:	f003 030f 	and.w	r3, r3, #15
 80304e4:	b2da      	uxtb	r2, r3
 80304e6:	697b      	ldr	r3, [r7, #20]
 80304e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80304ea:	68fb      	ldr	r3, [r7, #12]
 80304ec:	691b      	ldr	r3, [r3, #16]
 80304ee:	2b01      	cmp	r3, #1
 80304f0:	d102      	bne.n	80304f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80304f2:	687a      	ldr	r2, [r7, #4]
 80304f4:	697b      	ldr	r3, [r7, #20]
 80304f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80304f8:	7afb      	ldrb	r3, [r7, #11]
 80304fa:	f003 030f 	and.w	r3, r3, #15
 80304fe:	2b00      	cmp	r3, #0
 8030500:	d109      	bne.n	8030516 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030502:	68fb      	ldr	r3, [r7, #12]
 8030504:	6818      	ldr	r0, [r3, #0]
 8030506:	68fb      	ldr	r3, [r7, #12]
 8030508:	691b      	ldr	r3, [r3, #16]
 803050a:	b2db      	uxtb	r3, r3
 803050c:	461a      	mov	r2, r3
 803050e:	6979      	ldr	r1, [r7, #20]
 8030510:	f008 fa1c 	bl	803894c <USB_EP0StartXfer>
 8030514:	e008      	b.n	8030528 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030516:	68fb      	ldr	r3, [r7, #12]
 8030518:	6818      	ldr	r0, [r3, #0]
 803051a:	68fb      	ldr	r3, [r7, #12]
 803051c:	691b      	ldr	r3, [r3, #16]
 803051e:	b2db      	uxtb	r3, r3
 8030520:	461a      	mov	r2, r3
 8030522:	6979      	ldr	r1, [r7, #20]
 8030524:	f007 ffc2 	bl	80384ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8030528:	2300      	movs	r3, #0
}
 803052a:	4618      	mov	r0, r3
 803052c:	3718      	adds	r7, #24
 803052e:	46bd      	mov	sp, r7
 8030530:	bd80      	pop	{r7, pc}

08030532 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030532:	b580      	push	{r7, lr}
 8030534:	b084      	sub	sp, #16
 8030536:	af00      	add	r7, sp, #0
 8030538:	6078      	str	r0, [r7, #4]
 803053a:	460b      	mov	r3, r1
 803053c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 803053e:	78fb      	ldrb	r3, [r7, #3]
 8030540:	f003 020f 	and.w	r2, r3, #15
 8030544:	687b      	ldr	r3, [r7, #4]
 8030546:	685b      	ldr	r3, [r3, #4]
 8030548:	429a      	cmp	r2, r3
 803054a:	d901      	bls.n	8030550 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 803054c:	2301      	movs	r3, #1
 803054e:	e050      	b.n	80305f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8030550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030554:	2b00      	cmp	r3, #0
 8030556:	da0f      	bge.n	8030578 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030558:	78fb      	ldrb	r3, [r7, #3]
 803055a:	f003 020f 	and.w	r2, r3, #15
 803055e:	4613      	mov	r3, r2
 8030560:	00db      	lsls	r3, r3, #3
 8030562:	4413      	add	r3, r2
 8030564:	009b      	lsls	r3, r3, #2
 8030566:	3338      	adds	r3, #56	; 0x38
 8030568:	687a      	ldr	r2, [r7, #4]
 803056a:	4413      	add	r3, r2
 803056c:	3304      	adds	r3, #4
 803056e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8030570:	68fb      	ldr	r3, [r7, #12]
 8030572:	2201      	movs	r2, #1
 8030574:	705a      	strb	r2, [r3, #1]
 8030576:	e00d      	b.n	8030594 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8030578:	78fa      	ldrb	r2, [r7, #3]
 803057a:	4613      	mov	r3, r2
 803057c:	00db      	lsls	r3, r3, #3
 803057e:	4413      	add	r3, r2
 8030580:	009b      	lsls	r3, r3, #2
 8030582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030586:	687a      	ldr	r2, [r7, #4]
 8030588:	4413      	add	r3, r2
 803058a:	3304      	adds	r3, #4
 803058c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803058e:	68fb      	ldr	r3, [r7, #12]
 8030590:	2200      	movs	r2, #0
 8030592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8030594:	68fb      	ldr	r3, [r7, #12]
 8030596:	2201      	movs	r2, #1
 8030598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 803059a:	78fb      	ldrb	r3, [r7, #3]
 803059c:	f003 030f 	and.w	r3, r3, #15
 80305a0:	b2da      	uxtb	r2, r3
 80305a2:	68fb      	ldr	r3, [r7, #12]
 80305a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80305a6:	687b      	ldr	r3, [r7, #4]
 80305a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80305ac:	2b01      	cmp	r3, #1
 80305ae:	d101      	bne.n	80305b4 <HAL_PCD_EP_SetStall+0x82>
 80305b0:	2302      	movs	r3, #2
 80305b2:	e01e      	b.n	80305f2 <HAL_PCD_EP_SetStall+0xc0>
 80305b4:	687b      	ldr	r3, [r7, #4]
 80305b6:	2201      	movs	r2, #1
 80305b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80305bc:	687b      	ldr	r3, [r7, #4]
 80305be:	681b      	ldr	r3, [r3, #0]
 80305c0:	68f9      	ldr	r1, [r7, #12]
 80305c2:	4618      	mov	r0, r3
 80305c4:	f008 fc5e 	bl	8038e84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80305c8:	78fb      	ldrb	r3, [r7, #3]
 80305ca:	f003 030f 	and.w	r3, r3, #15
 80305ce:	2b00      	cmp	r3, #0
 80305d0:	d10a      	bne.n	80305e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80305d2:	687b      	ldr	r3, [r7, #4]
 80305d4:	6818      	ldr	r0, [r3, #0]
 80305d6:	687b      	ldr	r3, [r7, #4]
 80305d8:	691b      	ldr	r3, [r3, #16]
 80305da:	b2d9      	uxtb	r1, r3
 80305dc:	687b      	ldr	r3, [r7, #4]
 80305de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80305e2:	461a      	mov	r2, r3
 80305e4:	f008 fe50 	bl	8039288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	2200      	movs	r2, #0
 80305ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80305f0:	2300      	movs	r3, #0
}
 80305f2:	4618      	mov	r0, r3
 80305f4:	3710      	adds	r7, #16
 80305f6:	46bd      	mov	sp, r7
 80305f8:	bd80      	pop	{r7, pc}

080305fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80305fa:	b580      	push	{r7, lr}
 80305fc:	b084      	sub	sp, #16
 80305fe:	af00      	add	r7, sp, #0
 8030600:	6078      	str	r0, [r7, #4]
 8030602:	460b      	mov	r3, r1
 8030604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8030606:	78fb      	ldrb	r3, [r7, #3]
 8030608:	f003 020f 	and.w	r2, r3, #15
 803060c:	687b      	ldr	r3, [r7, #4]
 803060e:	685b      	ldr	r3, [r3, #4]
 8030610:	429a      	cmp	r2, r3
 8030612:	d901      	bls.n	8030618 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8030614:	2301      	movs	r3, #1
 8030616:	e042      	b.n	803069e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8030618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803061c:	2b00      	cmp	r3, #0
 803061e:	da0f      	bge.n	8030640 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030620:	78fb      	ldrb	r3, [r7, #3]
 8030622:	f003 020f 	and.w	r2, r3, #15
 8030626:	4613      	mov	r3, r2
 8030628:	00db      	lsls	r3, r3, #3
 803062a:	4413      	add	r3, r2
 803062c:	009b      	lsls	r3, r3, #2
 803062e:	3338      	adds	r3, #56	; 0x38
 8030630:	687a      	ldr	r2, [r7, #4]
 8030632:	4413      	add	r3, r2
 8030634:	3304      	adds	r3, #4
 8030636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8030638:	68fb      	ldr	r3, [r7, #12]
 803063a:	2201      	movs	r2, #1
 803063c:	705a      	strb	r2, [r3, #1]
 803063e:	e00f      	b.n	8030660 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030640:	78fb      	ldrb	r3, [r7, #3]
 8030642:	f003 020f 	and.w	r2, r3, #15
 8030646:	4613      	mov	r3, r2
 8030648:	00db      	lsls	r3, r3, #3
 803064a:	4413      	add	r3, r2
 803064c:	009b      	lsls	r3, r3, #2
 803064e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030652:	687a      	ldr	r2, [r7, #4]
 8030654:	4413      	add	r3, r2
 8030656:	3304      	adds	r3, #4
 8030658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803065a:	68fb      	ldr	r3, [r7, #12]
 803065c:	2200      	movs	r2, #0
 803065e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8030660:	68fb      	ldr	r3, [r7, #12]
 8030662:	2200      	movs	r2, #0
 8030664:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030666:	78fb      	ldrb	r3, [r7, #3]
 8030668:	f003 030f 	and.w	r3, r3, #15
 803066c:	b2da      	uxtb	r2, r3
 803066e:	68fb      	ldr	r3, [r7, #12]
 8030670:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8030672:	687b      	ldr	r3, [r7, #4]
 8030674:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030678:	2b01      	cmp	r3, #1
 803067a:	d101      	bne.n	8030680 <HAL_PCD_EP_ClrStall+0x86>
 803067c:	2302      	movs	r3, #2
 803067e:	e00e      	b.n	803069e <HAL_PCD_EP_ClrStall+0xa4>
 8030680:	687b      	ldr	r3, [r7, #4]
 8030682:	2201      	movs	r2, #1
 8030684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8030688:	687b      	ldr	r3, [r7, #4]
 803068a:	681b      	ldr	r3, [r3, #0]
 803068c:	68f9      	ldr	r1, [r7, #12]
 803068e:	4618      	mov	r0, r3
 8030690:	f008 fc66 	bl	8038f60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8030694:	687b      	ldr	r3, [r7, #4]
 8030696:	2200      	movs	r2, #0
 8030698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 803069c:	2300      	movs	r3, #0
}
 803069e:	4618      	mov	r0, r3
 80306a0:	3710      	adds	r7, #16
 80306a2:	46bd      	mov	sp, r7
 80306a4:	bd80      	pop	{r7, pc}

080306a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80306a6:	b580      	push	{r7, lr}
 80306a8:	b084      	sub	sp, #16
 80306aa:	af00      	add	r7, sp, #0
 80306ac:	6078      	str	r0, [r7, #4]
 80306ae:	460b      	mov	r3, r1
 80306b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80306b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80306b6:	2b00      	cmp	r3, #0
 80306b8:	da0c      	bge.n	80306d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80306ba:	78fb      	ldrb	r3, [r7, #3]
 80306bc:	f003 020f 	and.w	r2, r3, #15
 80306c0:	4613      	mov	r3, r2
 80306c2:	00db      	lsls	r3, r3, #3
 80306c4:	4413      	add	r3, r2
 80306c6:	009b      	lsls	r3, r3, #2
 80306c8:	3338      	adds	r3, #56	; 0x38
 80306ca:	687a      	ldr	r2, [r7, #4]
 80306cc:	4413      	add	r3, r2
 80306ce:	3304      	adds	r3, #4
 80306d0:	60fb      	str	r3, [r7, #12]
 80306d2:	e00c      	b.n	80306ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80306d4:	78fb      	ldrb	r3, [r7, #3]
 80306d6:	f003 020f 	and.w	r2, r3, #15
 80306da:	4613      	mov	r3, r2
 80306dc:	00db      	lsls	r3, r3, #3
 80306de:	4413      	add	r3, r2
 80306e0:	009b      	lsls	r3, r3, #2
 80306e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80306e6:	687a      	ldr	r2, [r7, #4]
 80306e8:	4413      	add	r3, r2
 80306ea:	3304      	adds	r3, #4
 80306ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80306ee:	687b      	ldr	r3, [r7, #4]
 80306f0:	681b      	ldr	r3, [r3, #0]
 80306f2:	68f9      	ldr	r1, [r7, #12]
 80306f4:	4618      	mov	r0, r3
 80306f6:	f008 fa85 	bl	8038c04 <USB_EPStopXfer>
 80306fa:	4603      	mov	r3, r0
 80306fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80306fe:	7afb      	ldrb	r3, [r7, #11]
}
 8030700:	4618      	mov	r0, r3
 8030702:	3710      	adds	r7, #16
 8030704:	46bd      	mov	sp, r7
 8030706:	bd80      	pop	{r7, pc}

08030708 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030708:	b580      	push	{r7, lr}
 803070a:	b08a      	sub	sp, #40	; 0x28
 803070c:	af02      	add	r7, sp, #8
 803070e:	6078      	str	r0, [r7, #4]
 8030710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030712:	687b      	ldr	r3, [r7, #4]
 8030714:	681b      	ldr	r3, [r3, #0]
 8030716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030718:	697b      	ldr	r3, [r7, #20]
 803071a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 803071c:	683a      	ldr	r2, [r7, #0]
 803071e:	4613      	mov	r3, r2
 8030720:	00db      	lsls	r3, r3, #3
 8030722:	4413      	add	r3, r2
 8030724:	009b      	lsls	r3, r3, #2
 8030726:	3338      	adds	r3, #56	; 0x38
 8030728:	687a      	ldr	r2, [r7, #4]
 803072a:	4413      	add	r3, r2
 803072c:	3304      	adds	r3, #4
 803072e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8030730:	68fb      	ldr	r3, [r7, #12]
 8030732:	6a1a      	ldr	r2, [r3, #32]
 8030734:	68fb      	ldr	r3, [r7, #12]
 8030736:	699b      	ldr	r3, [r3, #24]
 8030738:	429a      	cmp	r2, r3
 803073a:	d901      	bls.n	8030740 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 803073c:	2301      	movs	r3, #1
 803073e:	e06c      	b.n	803081a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8030740:	68fb      	ldr	r3, [r7, #12]
 8030742:	699a      	ldr	r2, [r3, #24]
 8030744:	68fb      	ldr	r3, [r7, #12]
 8030746:	6a1b      	ldr	r3, [r3, #32]
 8030748:	1ad3      	subs	r3, r2, r3
 803074a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 803074c:	68fb      	ldr	r3, [r7, #12]
 803074e:	68db      	ldr	r3, [r3, #12]
 8030750:	69fa      	ldr	r2, [r7, #28]
 8030752:	429a      	cmp	r2, r3
 8030754:	d902      	bls.n	803075c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8030756:	68fb      	ldr	r3, [r7, #12]
 8030758:	68db      	ldr	r3, [r3, #12]
 803075a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 803075c:	69fb      	ldr	r3, [r7, #28]
 803075e:	3303      	adds	r3, #3
 8030760:	089b      	lsrs	r3, r3, #2
 8030762:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030764:	e02b      	b.n	80307be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8030766:	68fb      	ldr	r3, [r7, #12]
 8030768:	699a      	ldr	r2, [r3, #24]
 803076a:	68fb      	ldr	r3, [r7, #12]
 803076c:	6a1b      	ldr	r3, [r3, #32]
 803076e:	1ad3      	subs	r3, r2, r3
 8030770:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8030772:	68fb      	ldr	r3, [r7, #12]
 8030774:	68db      	ldr	r3, [r3, #12]
 8030776:	69fa      	ldr	r2, [r7, #28]
 8030778:	429a      	cmp	r2, r3
 803077a:	d902      	bls.n	8030782 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 803077c:	68fb      	ldr	r3, [r7, #12]
 803077e:	68db      	ldr	r3, [r3, #12]
 8030780:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8030782:	69fb      	ldr	r3, [r7, #28]
 8030784:	3303      	adds	r3, #3
 8030786:	089b      	lsrs	r3, r3, #2
 8030788:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 803078a:	68fb      	ldr	r3, [r7, #12]
 803078c:	6919      	ldr	r1, [r3, #16]
 803078e:	683b      	ldr	r3, [r7, #0]
 8030790:	b2da      	uxtb	r2, r3
 8030792:	69fb      	ldr	r3, [r7, #28]
 8030794:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8030796:	687b      	ldr	r3, [r7, #4]
 8030798:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 803079a:	b2db      	uxtb	r3, r3
 803079c:	9300      	str	r3, [sp, #0]
 803079e:	4603      	mov	r3, r0
 80307a0:	6978      	ldr	r0, [r7, #20]
 80307a2:	f008 fad9 	bl	8038d58 <USB_WritePacket>

    ep->xfer_buff  += len;
 80307a6:	68fb      	ldr	r3, [r7, #12]
 80307a8:	691a      	ldr	r2, [r3, #16]
 80307aa:	69fb      	ldr	r3, [r7, #28]
 80307ac:	441a      	add	r2, r3
 80307ae:	68fb      	ldr	r3, [r7, #12]
 80307b0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80307b2:	68fb      	ldr	r3, [r7, #12]
 80307b4:	6a1a      	ldr	r2, [r3, #32]
 80307b6:	69fb      	ldr	r3, [r7, #28]
 80307b8:	441a      	add	r2, r3
 80307ba:	68fb      	ldr	r3, [r7, #12]
 80307bc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80307be:	683b      	ldr	r3, [r7, #0]
 80307c0:	015a      	lsls	r2, r3, #5
 80307c2:	693b      	ldr	r3, [r7, #16]
 80307c4:	4413      	add	r3, r2
 80307c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80307ca:	699b      	ldr	r3, [r3, #24]
 80307cc:	b29b      	uxth	r3, r3
 80307ce:	69ba      	ldr	r2, [r7, #24]
 80307d0:	429a      	cmp	r2, r3
 80307d2:	d809      	bhi.n	80307e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80307d4:	68fb      	ldr	r3, [r7, #12]
 80307d6:	6a1a      	ldr	r2, [r3, #32]
 80307d8:	68fb      	ldr	r3, [r7, #12]
 80307da:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80307dc:	429a      	cmp	r2, r3
 80307de:	d203      	bcs.n	80307e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80307e0:	68fb      	ldr	r3, [r7, #12]
 80307e2:	699b      	ldr	r3, [r3, #24]
 80307e4:	2b00      	cmp	r3, #0
 80307e6:	d1be      	bne.n	8030766 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80307e8:	68fb      	ldr	r3, [r7, #12]
 80307ea:	699a      	ldr	r2, [r3, #24]
 80307ec:	68fb      	ldr	r3, [r7, #12]
 80307ee:	6a1b      	ldr	r3, [r3, #32]
 80307f0:	429a      	cmp	r2, r3
 80307f2:	d811      	bhi.n	8030818 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80307f4:	683b      	ldr	r3, [r7, #0]
 80307f6:	f003 030f 	and.w	r3, r3, #15
 80307fa:	2201      	movs	r2, #1
 80307fc:	fa02 f303 	lsl.w	r3, r2, r3
 8030800:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8030802:	693b      	ldr	r3, [r7, #16]
 8030804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8030808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803080a:	68bb      	ldr	r3, [r7, #8]
 803080c:	43db      	mvns	r3, r3
 803080e:	6939      	ldr	r1, [r7, #16]
 8030810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8030814:	4013      	ands	r3, r2
 8030816:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8030818:	2300      	movs	r3, #0
}
 803081a:	4618      	mov	r0, r3
 803081c:	3720      	adds	r7, #32
 803081e:	46bd      	mov	sp, r7
 8030820:	bd80      	pop	{r7, pc}
	...

08030824 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030824:	b580      	push	{r7, lr}
 8030826:	b088      	sub	sp, #32
 8030828:	af00      	add	r7, sp, #0
 803082a:	6078      	str	r0, [r7, #4]
 803082c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 803082e:	687b      	ldr	r3, [r7, #4]
 8030830:	681b      	ldr	r3, [r3, #0]
 8030832:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030834:	69fb      	ldr	r3, [r7, #28]
 8030836:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8030838:	69fb      	ldr	r3, [r7, #28]
 803083a:	333c      	adds	r3, #60	; 0x3c
 803083c:	3304      	adds	r3, #4
 803083e:	681b      	ldr	r3, [r3, #0]
 8030840:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030842:	683b      	ldr	r3, [r7, #0]
 8030844:	015a      	lsls	r2, r3, #5
 8030846:	69bb      	ldr	r3, [r7, #24]
 8030848:	4413      	add	r3, r2
 803084a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803084e:	689b      	ldr	r3, [r3, #8]
 8030850:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8030852:	687b      	ldr	r3, [r7, #4]
 8030854:	691b      	ldr	r3, [r3, #16]
 8030856:	2b01      	cmp	r3, #1
 8030858:	d17b      	bne.n	8030952 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 803085a:	693b      	ldr	r3, [r7, #16]
 803085c:	f003 0308 	and.w	r3, r3, #8
 8030860:	2b00      	cmp	r3, #0
 8030862:	d015      	beq.n	8030890 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030864:	697b      	ldr	r3, [r7, #20]
 8030866:	4a61      	ldr	r2, [pc, #388]	; (80309ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8030868:	4293      	cmp	r3, r2
 803086a:	f240 80b9 	bls.w	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 803086e:	693b      	ldr	r3, [r7, #16]
 8030870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030874:	2b00      	cmp	r3, #0
 8030876:	f000 80b3 	beq.w	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 803087a:	683b      	ldr	r3, [r7, #0]
 803087c:	015a      	lsls	r2, r3, #5
 803087e:	69bb      	ldr	r3, [r7, #24]
 8030880:	4413      	add	r3, r2
 8030882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030886:	461a      	mov	r2, r3
 8030888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803088c:	6093      	str	r3, [r2, #8]
 803088e:	e0a7      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8030890:	693b      	ldr	r3, [r7, #16]
 8030892:	f003 0320 	and.w	r3, r3, #32
 8030896:	2b00      	cmp	r3, #0
 8030898:	d009      	beq.n	80308ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 803089a:	683b      	ldr	r3, [r7, #0]
 803089c:	015a      	lsls	r2, r3, #5
 803089e:	69bb      	ldr	r3, [r7, #24]
 80308a0:	4413      	add	r3, r2
 80308a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308a6:	461a      	mov	r2, r3
 80308a8:	2320      	movs	r3, #32
 80308aa:	6093      	str	r3, [r2, #8]
 80308ac:	e098      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80308ae:	693b      	ldr	r3, [r7, #16]
 80308b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80308b4:	2b00      	cmp	r3, #0
 80308b6:	f040 8093 	bne.w	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308ba:	697b      	ldr	r3, [r7, #20]
 80308bc:	4a4b      	ldr	r2, [pc, #300]	; (80309ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80308be:	4293      	cmp	r3, r2
 80308c0:	d90f      	bls.n	80308e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80308c2:	693b      	ldr	r3, [r7, #16]
 80308c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308c8:	2b00      	cmp	r3, #0
 80308ca:	d00a      	beq.n	80308e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80308cc:	683b      	ldr	r3, [r7, #0]
 80308ce:	015a      	lsls	r2, r3, #5
 80308d0:	69bb      	ldr	r3, [r7, #24]
 80308d2:	4413      	add	r3, r2
 80308d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308d8:	461a      	mov	r2, r3
 80308da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80308de:	6093      	str	r3, [r2, #8]
 80308e0:	e07e      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80308e2:	683a      	ldr	r2, [r7, #0]
 80308e4:	4613      	mov	r3, r2
 80308e6:	00db      	lsls	r3, r3, #3
 80308e8:	4413      	add	r3, r2
 80308ea:	009b      	lsls	r3, r3, #2
 80308ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80308f0:	687a      	ldr	r2, [r7, #4]
 80308f2:	4413      	add	r3, r2
 80308f4:	3304      	adds	r3, #4
 80308f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80308f8:	68fb      	ldr	r3, [r7, #12]
 80308fa:	69da      	ldr	r2, [r3, #28]
 80308fc:	683b      	ldr	r3, [r7, #0]
 80308fe:	0159      	lsls	r1, r3, #5
 8030900:	69bb      	ldr	r3, [r7, #24]
 8030902:	440b      	add	r3, r1
 8030904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030908:	691b      	ldr	r3, [r3, #16]
 803090a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803090e:	1ad2      	subs	r2, r2, r3
 8030910:	68fb      	ldr	r3, [r7, #12]
 8030912:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8030914:	683b      	ldr	r3, [r7, #0]
 8030916:	2b00      	cmp	r3, #0
 8030918:	d114      	bne.n	8030944 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 803091a:	68fb      	ldr	r3, [r7, #12]
 803091c:	699b      	ldr	r3, [r3, #24]
 803091e:	2b00      	cmp	r3, #0
 8030920:	d109      	bne.n	8030936 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030922:	687b      	ldr	r3, [r7, #4]
 8030924:	6818      	ldr	r0, [r3, #0]
 8030926:	687b      	ldr	r3, [r7, #4]
 8030928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803092c:	461a      	mov	r2, r3
 803092e:	2101      	movs	r1, #1
 8030930:	f008 fcaa 	bl	8039288 <USB_EP0_OutStart>
 8030934:	e006      	b.n	8030944 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8030936:	68fb      	ldr	r3, [r7, #12]
 8030938:	691a      	ldr	r2, [r3, #16]
 803093a:	68fb      	ldr	r3, [r7, #12]
 803093c:	6a1b      	ldr	r3, [r3, #32]
 803093e:	441a      	add	r2, r3
 8030940:	68fb      	ldr	r3, [r7, #12]
 8030942:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030944:	683b      	ldr	r3, [r7, #0]
 8030946:	b2db      	uxtb	r3, r3
 8030948:	4619      	mov	r1, r3
 803094a:	6878      	ldr	r0, [r7, #4]
 803094c:	f00a ff1e 	bl	803b78c <HAL_PCD_DataOutStageCallback>
 8030950:	e046      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8030952:	697b      	ldr	r3, [r7, #20]
 8030954:	4a26      	ldr	r2, [pc, #152]	; (80309f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8030956:	4293      	cmp	r3, r2
 8030958:	d124      	bne.n	80309a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 803095a:	693b      	ldr	r3, [r7, #16]
 803095c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030960:	2b00      	cmp	r3, #0
 8030962:	d00a      	beq.n	803097a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030964:	683b      	ldr	r3, [r7, #0]
 8030966:	015a      	lsls	r2, r3, #5
 8030968:	69bb      	ldr	r3, [r7, #24]
 803096a:	4413      	add	r3, r2
 803096c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030970:	461a      	mov	r2, r3
 8030972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030976:	6093      	str	r3, [r2, #8]
 8030978:	e032      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 803097a:	693b      	ldr	r3, [r7, #16]
 803097c:	f003 0320 	and.w	r3, r3, #32
 8030980:	2b00      	cmp	r3, #0
 8030982:	d008      	beq.n	8030996 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8030984:	683b      	ldr	r3, [r7, #0]
 8030986:	015a      	lsls	r2, r3, #5
 8030988:	69bb      	ldr	r3, [r7, #24]
 803098a:	4413      	add	r3, r2
 803098c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030990:	461a      	mov	r2, r3
 8030992:	2320      	movs	r3, #32
 8030994:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030996:	683b      	ldr	r3, [r7, #0]
 8030998:	b2db      	uxtb	r3, r3
 803099a:	4619      	mov	r1, r3
 803099c:	6878      	ldr	r0, [r7, #4]
 803099e:	f00a fef5 	bl	803b78c <HAL_PCD_DataOutStageCallback>
 80309a2:	e01d      	b.n	80309e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80309a4:	683b      	ldr	r3, [r7, #0]
 80309a6:	2b00      	cmp	r3, #0
 80309a8:	d114      	bne.n	80309d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80309aa:	6879      	ldr	r1, [r7, #4]
 80309ac:	683a      	ldr	r2, [r7, #0]
 80309ae:	4613      	mov	r3, r2
 80309b0:	00db      	lsls	r3, r3, #3
 80309b2:	4413      	add	r3, r2
 80309b4:	009b      	lsls	r3, r3, #2
 80309b6:	440b      	add	r3, r1
 80309b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80309bc:	681b      	ldr	r3, [r3, #0]
 80309be:	2b00      	cmp	r3, #0
 80309c0:	d108      	bne.n	80309d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80309c2:	687b      	ldr	r3, [r7, #4]
 80309c4:	6818      	ldr	r0, [r3, #0]
 80309c6:	687b      	ldr	r3, [r7, #4]
 80309c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80309cc:	461a      	mov	r2, r3
 80309ce:	2100      	movs	r1, #0
 80309d0:	f008 fc5a 	bl	8039288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80309d4:	683b      	ldr	r3, [r7, #0]
 80309d6:	b2db      	uxtb	r3, r3
 80309d8:	4619      	mov	r1, r3
 80309da:	6878      	ldr	r0, [r7, #4]
 80309dc:	f00a fed6 	bl	803b78c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80309e0:	2300      	movs	r3, #0
}
 80309e2:	4618      	mov	r0, r3
 80309e4:	3720      	adds	r7, #32
 80309e6:	46bd      	mov	sp, r7
 80309e8:	bd80      	pop	{r7, pc}
 80309ea:	bf00      	nop
 80309ec:	4f54300a 	.word	0x4f54300a
 80309f0:	4f54310a 	.word	0x4f54310a

080309f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80309f4:	b580      	push	{r7, lr}
 80309f6:	b086      	sub	sp, #24
 80309f8:	af00      	add	r7, sp, #0
 80309fa:	6078      	str	r0, [r7, #4]
 80309fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80309fe:	687b      	ldr	r3, [r7, #4]
 8030a00:	681b      	ldr	r3, [r3, #0]
 8030a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030a04:	697b      	ldr	r3, [r7, #20]
 8030a06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8030a08:	697b      	ldr	r3, [r7, #20]
 8030a0a:	333c      	adds	r3, #60	; 0x3c
 8030a0c:	3304      	adds	r3, #4
 8030a0e:	681b      	ldr	r3, [r3, #0]
 8030a10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030a12:	683b      	ldr	r3, [r7, #0]
 8030a14:	015a      	lsls	r2, r3, #5
 8030a16:	693b      	ldr	r3, [r7, #16]
 8030a18:	4413      	add	r3, r2
 8030a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a1e:	689b      	ldr	r3, [r3, #8]
 8030a20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a22:	68fb      	ldr	r3, [r7, #12]
 8030a24:	4a15      	ldr	r2, [pc, #84]	; (8030a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8030a26:	4293      	cmp	r3, r2
 8030a28:	d90e      	bls.n	8030a48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8030a2a:	68bb      	ldr	r3, [r7, #8]
 8030a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a30:	2b00      	cmp	r3, #0
 8030a32:	d009      	beq.n	8030a48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030a34:	683b      	ldr	r3, [r7, #0]
 8030a36:	015a      	lsls	r2, r3, #5
 8030a38:	693b      	ldr	r3, [r7, #16]
 8030a3a:	4413      	add	r3, r2
 8030a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a40:	461a      	mov	r2, r3
 8030a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030a46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8030a48:	6878      	ldr	r0, [r7, #4]
 8030a4a:	f00a fe8d 	bl	803b768 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8030a4e:	68fb      	ldr	r3, [r7, #12]
 8030a50:	4a0a      	ldr	r2, [pc, #40]	; (8030a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8030a52:	4293      	cmp	r3, r2
 8030a54:	d90c      	bls.n	8030a70 <PCD_EP_OutSetupPacket_int+0x7c>
 8030a56:	687b      	ldr	r3, [r7, #4]
 8030a58:	691b      	ldr	r3, [r3, #16]
 8030a5a:	2b01      	cmp	r3, #1
 8030a5c:	d108      	bne.n	8030a70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030a5e:	687b      	ldr	r3, [r7, #4]
 8030a60:	6818      	ldr	r0, [r3, #0]
 8030a62:	687b      	ldr	r3, [r7, #4]
 8030a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030a68:	461a      	mov	r2, r3
 8030a6a:	2101      	movs	r1, #1
 8030a6c:	f008 fc0c 	bl	8039288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8030a70:	2300      	movs	r3, #0
}
 8030a72:	4618      	mov	r0, r3
 8030a74:	3718      	adds	r7, #24
 8030a76:	46bd      	mov	sp, r7
 8030a78:	bd80      	pop	{r7, pc}
 8030a7a:	bf00      	nop
 8030a7c:	4f54300a 	.word	0x4f54300a

08030a80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8030a80:	b480      	push	{r7}
 8030a82:	b085      	sub	sp, #20
 8030a84:	af00      	add	r7, sp, #0
 8030a86:	6078      	str	r0, [r7, #4]
 8030a88:	460b      	mov	r3, r1
 8030a8a:	70fb      	strb	r3, [r7, #3]
 8030a8c:	4613      	mov	r3, r2
 8030a8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8030a90:	687b      	ldr	r3, [r7, #4]
 8030a92:	681b      	ldr	r3, [r3, #0]
 8030a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030a96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8030a98:	78fb      	ldrb	r3, [r7, #3]
 8030a9a:	2b00      	cmp	r3, #0
 8030a9c:	d107      	bne.n	8030aae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8030a9e:	883b      	ldrh	r3, [r7, #0]
 8030aa0:	0419      	lsls	r1, r3, #16
 8030aa2:	687b      	ldr	r3, [r7, #4]
 8030aa4:	681b      	ldr	r3, [r3, #0]
 8030aa6:	68ba      	ldr	r2, [r7, #8]
 8030aa8:	430a      	orrs	r2, r1
 8030aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8030aac:	e028      	b.n	8030b00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8030aae:	687b      	ldr	r3, [r7, #4]
 8030ab0:	681b      	ldr	r3, [r3, #0]
 8030ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030ab4:	0c1b      	lsrs	r3, r3, #16
 8030ab6:	68ba      	ldr	r2, [r7, #8]
 8030ab8:	4413      	add	r3, r2
 8030aba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030abc:	2300      	movs	r3, #0
 8030abe:	73fb      	strb	r3, [r7, #15]
 8030ac0:	e00d      	b.n	8030ade <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8030ac2:	687b      	ldr	r3, [r7, #4]
 8030ac4:	681a      	ldr	r2, [r3, #0]
 8030ac6:	7bfb      	ldrb	r3, [r7, #15]
 8030ac8:	3340      	adds	r3, #64	; 0x40
 8030aca:	009b      	lsls	r3, r3, #2
 8030acc:	4413      	add	r3, r2
 8030ace:	685b      	ldr	r3, [r3, #4]
 8030ad0:	0c1b      	lsrs	r3, r3, #16
 8030ad2:	68ba      	ldr	r2, [r7, #8]
 8030ad4:	4413      	add	r3, r2
 8030ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030ad8:	7bfb      	ldrb	r3, [r7, #15]
 8030ada:	3301      	adds	r3, #1
 8030adc:	73fb      	strb	r3, [r7, #15]
 8030ade:	7bfa      	ldrb	r2, [r7, #15]
 8030ae0:	78fb      	ldrb	r3, [r7, #3]
 8030ae2:	3b01      	subs	r3, #1
 8030ae4:	429a      	cmp	r2, r3
 8030ae6:	d3ec      	bcc.n	8030ac2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8030ae8:	883b      	ldrh	r3, [r7, #0]
 8030aea:	0418      	lsls	r0, r3, #16
 8030aec:	687b      	ldr	r3, [r7, #4]
 8030aee:	6819      	ldr	r1, [r3, #0]
 8030af0:	78fb      	ldrb	r3, [r7, #3]
 8030af2:	3b01      	subs	r3, #1
 8030af4:	68ba      	ldr	r2, [r7, #8]
 8030af6:	4302      	orrs	r2, r0
 8030af8:	3340      	adds	r3, #64	; 0x40
 8030afa:	009b      	lsls	r3, r3, #2
 8030afc:	440b      	add	r3, r1
 8030afe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8030b00:	2300      	movs	r3, #0
}
 8030b02:	4618      	mov	r0, r3
 8030b04:	3714      	adds	r7, #20
 8030b06:	46bd      	mov	sp, r7
 8030b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b0c:	4770      	bx	lr

08030b0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8030b0e:	b480      	push	{r7}
 8030b10:	b083      	sub	sp, #12
 8030b12:	af00      	add	r7, sp, #0
 8030b14:	6078      	str	r0, [r7, #4]
 8030b16:	460b      	mov	r3, r1
 8030b18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8030b1a:	687b      	ldr	r3, [r7, #4]
 8030b1c:	681b      	ldr	r3, [r3, #0]
 8030b1e:	887a      	ldrh	r2, [r7, #2]
 8030b20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8030b22:	2300      	movs	r3, #0
}
 8030b24:	4618      	mov	r0, r3
 8030b26:	370c      	adds	r7, #12
 8030b28:	46bd      	mov	sp, r7
 8030b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b2e:	4770      	bx	lr

08030b30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8030b30:	b480      	push	{r7}
 8030b32:	b085      	sub	sp, #20
 8030b34:	af00      	add	r7, sp, #0
 8030b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030b38:	687b      	ldr	r3, [r7, #4]
 8030b3a:	681b      	ldr	r3, [r3, #0]
 8030b3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8030b3e:	687b      	ldr	r3, [r7, #4]
 8030b40:	2201      	movs	r2, #1
 8030b42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8030b46:	687b      	ldr	r3, [r7, #4]
 8030b48:	2200      	movs	r2, #0
 8030b4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8030b4e:	68fb      	ldr	r3, [r7, #12]
 8030b50:	699b      	ldr	r3, [r3, #24]
 8030b52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8030b56:	68fb      	ldr	r3, [r7, #12]
 8030b58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8030b5a:	68fb      	ldr	r3, [r7, #12]
 8030b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8030b5e:	4b05      	ldr	r3, [pc, #20]	; (8030b74 <HAL_PCDEx_ActivateLPM+0x44>)
 8030b60:	4313      	orrs	r3, r2
 8030b62:	68fa      	ldr	r2, [r7, #12]
 8030b64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8030b66:	2300      	movs	r3, #0
}
 8030b68:	4618      	mov	r0, r3
 8030b6a:	3714      	adds	r7, #20
 8030b6c:	46bd      	mov	sp, r7
 8030b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b72:	4770      	bx	lr
 8030b74:	10000003 	.word	0x10000003

08030b78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8030b78:	b480      	push	{r7}
 8030b7a:	b083      	sub	sp, #12
 8030b7c:	af00      	add	r7, sp, #0
 8030b7e:	6078      	str	r0, [r7, #4]
 8030b80:	460b      	mov	r3, r1
 8030b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8030b84:	bf00      	nop
 8030b86:	370c      	adds	r7, #12
 8030b88:	46bd      	mov	sp, r7
 8030b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b8e:	4770      	bx	lr

08030b90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8030b90:	b580      	push	{r7, lr}
 8030b92:	b084      	sub	sp, #16
 8030b94:	af00      	add	r7, sp, #0
 8030b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8030b98:	4b19      	ldr	r3, [pc, #100]	; (8030c00 <HAL_PWREx_ConfigSupply+0x70>)
 8030b9a:	68db      	ldr	r3, [r3, #12]
 8030b9c:	f003 0304 	and.w	r3, r3, #4
 8030ba0:	2b04      	cmp	r3, #4
 8030ba2:	d00a      	beq.n	8030bba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8030ba4:	4b16      	ldr	r3, [pc, #88]	; (8030c00 <HAL_PWREx_ConfigSupply+0x70>)
 8030ba6:	68db      	ldr	r3, [r3, #12]
 8030ba8:	f003 0307 	and.w	r3, r3, #7
 8030bac:	687a      	ldr	r2, [r7, #4]
 8030bae:	429a      	cmp	r2, r3
 8030bb0:	d001      	beq.n	8030bb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8030bb2:	2301      	movs	r3, #1
 8030bb4:	e01f      	b.n	8030bf6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8030bb6:	2300      	movs	r3, #0
 8030bb8:	e01d      	b.n	8030bf6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8030bba:	4b11      	ldr	r3, [pc, #68]	; (8030c00 <HAL_PWREx_ConfigSupply+0x70>)
 8030bbc:	68db      	ldr	r3, [r3, #12]
 8030bbe:	f023 0207 	bic.w	r2, r3, #7
 8030bc2:	490f      	ldr	r1, [pc, #60]	; (8030c00 <HAL_PWREx_ConfigSupply+0x70>)
 8030bc4:	687b      	ldr	r3, [r7, #4]
 8030bc6:	4313      	orrs	r3, r2
 8030bc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8030bca:	f7fa f843 	bl	802ac54 <HAL_GetTick>
 8030bce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030bd0:	e009      	b.n	8030be6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8030bd2:	f7fa f83f 	bl	802ac54 <HAL_GetTick>
 8030bd6:	4602      	mov	r2, r0
 8030bd8:	68fb      	ldr	r3, [r7, #12]
 8030bda:	1ad3      	subs	r3, r2, r3
 8030bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030be0:	d901      	bls.n	8030be6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8030be2:	2301      	movs	r3, #1
 8030be4:	e007      	b.n	8030bf6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030be6:	4b06      	ldr	r3, [pc, #24]	; (8030c00 <HAL_PWREx_ConfigSupply+0x70>)
 8030be8:	685b      	ldr	r3, [r3, #4]
 8030bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030bf2:	d1ee      	bne.n	8030bd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8030bf4:	2300      	movs	r3, #0
}
 8030bf6:	4618      	mov	r0, r3
 8030bf8:	3710      	adds	r7, #16
 8030bfa:	46bd      	mov	sp, r7
 8030bfc:	bd80      	pop	{r7, pc}
 8030bfe:	bf00      	nop
 8030c00:	58024800 	.word	0x58024800

08030c04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8030c04:	b480      	push	{r7}
 8030c06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8030c08:	4b05      	ldr	r3, [pc, #20]	; (8030c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c0a:	68db      	ldr	r3, [r3, #12]
 8030c0c:	4a04      	ldr	r2, [pc, #16]	; (8030c20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8030c12:	60d3      	str	r3, [r2, #12]
}
 8030c14:	bf00      	nop
 8030c16:	46bd      	mov	sp, r7
 8030c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c1c:	4770      	bx	lr
 8030c1e:	bf00      	nop
 8030c20:	58024800 	.word	0x58024800

08030c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030c24:	b580      	push	{r7, lr}
 8030c26:	b08c      	sub	sp, #48	; 0x30
 8030c28:	af00      	add	r7, sp, #0
 8030c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8030c2c:	687b      	ldr	r3, [r7, #4]
 8030c2e:	2b00      	cmp	r3, #0
 8030c30:	d102      	bne.n	8030c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8030c32:	2301      	movs	r3, #1
 8030c34:	f000 bc1d 	b.w	8031472 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030c38:	687b      	ldr	r3, [r7, #4]
 8030c3a:	681b      	ldr	r3, [r3, #0]
 8030c3c:	f003 0301 	and.w	r3, r3, #1
 8030c40:	2b00      	cmp	r3, #0
 8030c42:	f000 8087 	beq.w	8030d54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030c46:	4b99      	ldr	r3, [pc, #612]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030c48:	691b      	ldr	r3, [r3, #16]
 8030c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030c50:	4b96      	ldr	r3, [pc, #600]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030c54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8030c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c58:	2b10      	cmp	r3, #16
 8030c5a:	d007      	beq.n	8030c6c <HAL_RCC_OscConfig+0x48>
 8030c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c5e:	2b18      	cmp	r3, #24
 8030c60:	d110      	bne.n	8030c84 <HAL_RCC_OscConfig+0x60>
 8030c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030c64:	f003 0303 	and.w	r3, r3, #3
 8030c68:	2b02      	cmp	r3, #2
 8030c6a:	d10b      	bne.n	8030c84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030c6c:	4b8f      	ldr	r3, [pc, #572]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030c6e:	681b      	ldr	r3, [r3, #0]
 8030c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030c74:	2b00      	cmp	r3, #0
 8030c76:	d06c      	beq.n	8030d52 <HAL_RCC_OscConfig+0x12e>
 8030c78:	687b      	ldr	r3, [r7, #4]
 8030c7a:	685b      	ldr	r3, [r3, #4]
 8030c7c:	2b00      	cmp	r3, #0
 8030c7e:	d168      	bne.n	8030d52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8030c80:	2301      	movs	r3, #1
 8030c82:	e3f6      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030c84:	687b      	ldr	r3, [r7, #4]
 8030c86:	685b      	ldr	r3, [r3, #4]
 8030c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030c8c:	d106      	bne.n	8030c9c <HAL_RCC_OscConfig+0x78>
 8030c8e:	4b87      	ldr	r3, [pc, #540]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030c90:	681b      	ldr	r3, [r3, #0]
 8030c92:	4a86      	ldr	r2, [pc, #536]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030c98:	6013      	str	r3, [r2, #0]
 8030c9a:	e02e      	b.n	8030cfa <HAL_RCC_OscConfig+0xd6>
 8030c9c:	687b      	ldr	r3, [r7, #4]
 8030c9e:	685b      	ldr	r3, [r3, #4]
 8030ca0:	2b00      	cmp	r3, #0
 8030ca2:	d10c      	bne.n	8030cbe <HAL_RCC_OscConfig+0x9a>
 8030ca4:	4b81      	ldr	r3, [pc, #516]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030ca6:	681b      	ldr	r3, [r3, #0]
 8030ca8:	4a80      	ldr	r2, [pc, #512]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030cae:	6013      	str	r3, [r2, #0]
 8030cb0:	4b7e      	ldr	r3, [pc, #504]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cb2:	681b      	ldr	r3, [r3, #0]
 8030cb4:	4a7d      	ldr	r2, [pc, #500]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030cba:	6013      	str	r3, [r2, #0]
 8030cbc:	e01d      	b.n	8030cfa <HAL_RCC_OscConfig+0xd6>
 8030cbe:	687b      	ldr	r3, [r7, #4]
 8030cc0:	685b      	ldr	r3, [r3, #4]
 8030cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8030cc6:	d10c      	bne.n	8030ce2 <HAL_RCC_OscConfig+0xbe>
 8030cc8:	4b78      	ldr	r3, [pc, #480]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cca:	681b      	ldr	r3, [r3, #0]
 8030ccc:	4a77      	ldr	r2, [pc, #476]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8030cd2:	6013      	str	r3, [r2, #0]
 8030cd4:	4b75      	ldr	r3, [pc, #468]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cd6:	681b      	ldr	r3, [r3, #0]
 8030cd8:	4a74      	ldr	r2, [pc, #464]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030cde:	6013      	str	r3, [r2, #0]
 8030ce0:	e00b      	b.n	8030cfa <HAL_RCC_OscConfig+0xd6>
 8030ce2:	4b72      	ldr	r3, [pc, #456]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030ce4:	681b      	ldr	r3, [r3, #0]
 8030ce6:	4a71      	ldr	r2, [pc, #452]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030cec:	6013      	str	r3, [r2, #0]
 8030cee:	4b6f      	ldr	r3, [pc, #444]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cf0:	681b      	ldr	r3, [r3, #0]
 8030cf2:	4a6e      	ldr	r2, [pc, #440]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030cf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8030cfa:	687b      	ldr	r3, [r7, #4]
 8030cfc:	685b      	ldr	r3, [r3, #4]
 8030cfe:	2b00      	cmp	r3, #0
 8030d00:	d013      	beq.n	8030d2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d02:	f7f9 ffa7 	bl	802ac54 <HAL_GetTick>
 8030d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d08:	e008      	b.n	8030d1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d0a:	f7f9 ffa3 	bl	802ac54 <HAL_GetTick>
 8030d0e:	4602      	mov	r2, r0
 8030d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d12:	1ad3      	subs	r3, r2, r3
 8030d14:	2b64      	cmp	r3, #100	; 0x64
 8030d16:	d901      	bls.n	8030d1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8030d18:	2303      	movs	r3, #3
 8030d1a:	e3aa      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d1c:	4b63      	ldr	r3, [pc, #396]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030d1e:	681b      	ldr	r3, [r3, #0]
 8030d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030d24:	2b00      	cmp	r3, #0
 8030d26:	d0f0      	beq.n	8030d0a <HAL_RCC_OscConfig+0xe6>
 8030d28:	e014      	b.n	8030d54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d2a:	f7f9 ff93 	bl	802ac54 <HAL_GetTick>
 8030d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d30:	e008      	b.n	8030d44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d32:	f7f9 ff8f 	bl	802ac54 <HAL_GetTick>
 8030d36:	4602      	mov	r2, r0
 8030d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d3a:	1ad3      	subs	r3, r2, r3
 8030d3c:	2b64      	cmp	r3, #100	; 0x64
 8030d3e:	d901      	bls.n	8030d44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8030d40:	2303      	movs	r3, #3
 8030d42:	e396      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d44:	4b59      	ldr	r3, [pc, #356]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030d46:	681b      	ldr	r3, [r3, #0]
 8030d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030d4c:	2b00      	cmp	r3, #0
 8030d4e:	d1f0      	bne.n	8030d32 <HAL_RCC_OscConfig+0x10e>
 8030d50:	e000      	b.n	8030d54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030d52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030d54:	687b      	ldr	r3, [r7, #4]
 8030d56:	681b      	ldr	r3, [r3, #0]
 8030d58:	f003 0302 	and.w	r3, r3, #2
 8030d5c:	2b00      	cmp	r3, #0
 8030d5e:	f000 80cb 	beq.w	8030ef8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030d62:	4b52      	ldr	r3, [pc, #328]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030d64:	691b      	ldr	r3, [r3, #16]
 8030d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030d6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030d6c:	4b4f      	ldr	r3, [pc, #316]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030d70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8030d72:	6a3b      	ldr	r3, [r7, #32]
 8030d74:	2b00      	cmp	r3, #0
 8030d76:	d007      	beq.n	8030d88 <HAL_RCC_OscConfig+0x164>
 8030d78:	6a3b      	ldr	r3, [r7, #32]
 8030d7a:	2b18      	cmp	r3, #24
 8030d7c:	d156      	bne.n	8030e2c <HAL_RCC_OscConfig+0x208>
 8030d7e:	69fb      	ldr	r3, [r7, #28]
 8030d80:	f003 0303 	and.w	r3, r3, #3
 8030d84:	2b00      	cmp	r3, #0
 8030d86:	d151      	bne.n	8030e2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030d88:	4b48      	ldr	r3, [pc, #288]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030d8a:	681b      	ldr	r3, [r3, #0]
 8030d8c:	f003 0304 	and.w	r3, r3, #4
 8030d90:	2b00      	cmp	r3, #0
 8030d92:	d005      	beq.n	8030da0 <HAL_RCC_OscConfig+0x17c>
 8030d94:	687b      	ldr	r3, [r7, #4]
 8030d96:	68db      	ldr	r3, [r3, #12]
 8030d98:	2b00      	cmp	r3, #0
 8030d9a:	d101      	bne.n	8030da0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8030d9c:	2301      	movs	r3, #1
 8030d9e:	e368      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030da0:	4b42      	ldr	r3, [pc, #264]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030da2:	681b      	ldr	r3, [r3, #0]
 8030da4:	f023 0219 	bic.w	r2, r3, #25
 8030da8:	687b      	ldr	r3, [r7, #4]
 8030daa:	68db      	ldr	r3, [r3, #12]
 8030dac:	493f      	ldr	r1, [pc, #252]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030dae:	4313      	orrs	r3, r2
 8030db0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8030db2:	f7f9 ff4f 	bl	802ac54 <HAL_GetTick>
 8030db6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030db8:	e008      	b.n	8030dcc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030dba:	f7f9 ff4b 	bl	802ac54 <HAL_GetTick>
 8030dbe:	4602      	mov	r2, r0
 8030dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030dc2:	1ad3      	subs	r3, r2, r3
 8030dc4:	2b02      	cmp	r3, #2
 8030dc6:	d901      	bls.n	8030dcc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8030dc8:	2303      	movs	r3, #3
 8030dca:	e352      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030dcc:	4b37      	ldr	r3, [pc, #220]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030dce:	681b      	ldr	r3, [r3, #0]
 8030dd0:	f003 0304 	and.w	r3, r3, #4
 8030dd4:	2b00      	cmp	r3, #0
 8030dd6:	d0f0      	beq.n	8030dba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030dd8:	f7f9 ff6c 	bl	802acb4 <HAL_GetREVID>
 8030ddc:	4603      	mov	r3, r0
 8030dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8030de2:	4293      	cmp	r3, r2
 8030de4:	d817      	bhi.n	8030e16 <HAL_RCC_OscConfig+0x1f2>
 8030de6:	687b      	ldr	r3, [r7, #4]
 8030de8:	691b      	ldr	r3, [r3, #16]
 8030dea:	2b40      	cmp	r3, #64	; 0x40
 8030dec:	d108      	bne.n	8030e00 <HAL_RCC_OscConfig+0x1dc>
 8030dee:	4b2f      	ldr	r3, [pc, #188]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030df0:	685b      	ldr	r3, [r3, #4]
 8030df2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030df6:	4a2d      	ldr	r2, [pc, #180]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030dfe:	e07b      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e00:	4b2a      	ldr	r3, [pc, #168]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e02:	685b      	ldr	r3, [r3, #4]
 8030e04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030e08:	687b      	ldr	r3, [r7, #4]
 8030e0a:	691b      	ldr	r3, [r3, #16]
 8030e0c:	031b      	lsls	r3, r3, #12
 8030e0e:	4927      	ldr	r1, [pc, #156]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e10:	4313      	orrs	r3, r2
 8030e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e14:	e070      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e16:	4b25      	ldr	r3, [pc, #148]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e18:	685b      	ldr	r3, [r3, #4]
 8030e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030e1e:	687b      	ldr	r3, [r7, #4]
 8030e20:	691b      	ldr	r3, [r3, #16]
 8030e22:	061b      	lsls	r3, r3, #24
 8030e24:	4921      	ldr	r1, [pc, #132]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e26:	4313      	orrs	r3, r2
 8030e28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e2a:	e065      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8030e2c:	687b      	ldr	r3, [r7, #4]
 8030e2e:	68db      	ldr	r3, [r3, #12]
 8030e30:	2b00      	cmp	r3, #0
 8030e32:	d048      	beq.n	8030ec6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030e34:	4b1d      	ldr	r3, [pc, #116]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e36:	681b      	ldr	r3, [r3, #0]
 8030e38:	f023 0219 	bic.w	r2, r3, #25
 8030e3c:	687b      	ldr	r3, [r7, #4]
 8030e3e:	68db      	ldr	r3, [r3, #12]
 8030e40:	491a      	ldr	r1, [pc, #104]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e42:	4313      	orrs	r3, r2
 8030e44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030e46:	f7f9 ff05 	bl	802ac54 <HAL_GetTick>
 8030e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e4c:	e008      	b.n	8030e60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030e4e:	f7f9 ff01 	bl	802ac54 <HAL_GetTick>
 8030e52:	4602      	mov	r2, r0
 8030e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030e56:	1ad3      	subs	r3, r2, r3
 8030e58:	2b02      	cmp	r3, #2
 8030e5a:	d901      	bls.n	8030e60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8030e5c:	2303      	movs	r3, #3
 8030e5e:	e308      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e60:	4b12      	ldr	r3, [pc, #72]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e62:	681b      	ldr	r3, [r3, #0]
 8030e64:	f003 0304 	and.w	r3, r3, #4
 8030e68:	2b00      	cmp	r3, #0
 8030e6a:	d0f0      	beq.n	8030e4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e6c:	f7f9 ff22 	bl	802acb4 <HAL_GetREVID>
 8030e70:	4603      	mov	r3, r0
 8030e72:	f241 0203 	movw	r2, #4099	; 0x1003
 8030e76:	4293      	cmp	r3, r2
 8030e78:	d81a      	bhi.n	8030eb0 <HAL_RCC_OscConfig+0x28c>
 8030e7a:	687b      	ldr	r3, [r7, #4]
 8030e7c:	691b      	ldr	r3, [r3, #16]
 8030e7e:	2b40      	cmp	r3, #64	; 0x40
 8030e80:	d108      	bne.n	8030e94 <HAL_RCC_OscConfig+0x270>
 8030e82:	4b0a      	ldr	r3, [pc, #40]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e84:	685b      	ldr	r3, [r3, #4]
 8030e86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030e8a:	4a08      	ldr	r2, [pc, #32]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030e90:	6053      	str	r3, [r2, #4]
 8030e92:	e031      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
 8030e94:	4b05      	ldr	r3, [pc, #20]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030e96:	685b      	ldr	r3, [r3, #4]
 8030e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030e9c:	687b      	ldr	r3, [r7, #4]
 8030e9e:	691b      	ldr	r3, [r3, #16]
 8030ea0:	031b      	lsls	r3, r3, #12
 8030ea2:	4902      	ldr	r1, [pc, #8]	; (8030eac <HAL_RCC_OscConfig+0x288>)
 8030ea4:	4313      	orrs	r3, r2
 8030ea6:	604b      	str	r3, [r1, #4]
 8030ea8:	e026      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
 8030eaa:	bf00      	nop
 8030eac:	58024400 	.word	0x58024400
 8030eb0:	4b9a      	ldr	r3, [pc, #616]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030eb2:	685b      	ldr	r3, [r3, #4]
 8030eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030eb8:	687b      	ldr	r3, [r7, #4]
 8030eba:	691b      	ldr	r3, [r3, #16]
 8030ebc:	061b      	lsls	r3, r3, #24
 8030ebe:	4997      	ldr	r1, [pc, #604]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030ec0:	4313      	orrs	r3, r2
 8030ec2:	604b      	str	r3, [r1, #4]
 8030ec4:	e018      	b.n	8030ef8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030ec6:	4b95      	ldr	r3, [pc, #596]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030ec8:	681b      	ldr	r3, [r3, #0]
 8030eca:	4a94      	ldr	r2, [pc, #592]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030ecc:	f023 0301 	bic.w	r3, r3, #1
 8030ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030ed2:	f7f9 febf 	bl	802ac54 <HAL_GetTick>
 8030ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030ed8:	e008      	b.n	8030eec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030eda:	f7f9 febb 	bl	802ac54 <HAL_GetTick>
 8030ede:	4602      	mov	r2, r0
 8030ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030ee2:	1ad3      	subs	r3, r2, r3
 8030ee4:	2b02      	cmp	r3, #2
 8030ee6:	d901      	bls.n	8030eec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8030ee8:	2303      	movs	r3, #3
 8030eea:	e2c2      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030eec:	4b8b      	ldr	r3, [pc, #556]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030eee:	681b      	ldr	r3, [r3, #0]
 8030ef0:	f003 0304 	and.w	r3, r3, #4
 8030ef4:	2b00      	cmp	r3, #0
 8030ef6:	d1f0      	bne.n	8030eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8030ef8:	687b      	ldr	r3, [r7, #4]
 8030efa:	681b      	ldr	r3, [r3, #0]
 8030efc:	f003 0310 	and.w	r3, r3, #16
 8030f00:	2b00      	cmp	r3, #0
 8030f02:	f000 80a9 	beq.w	8031058 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030f06:	4b85      	ldr	r3, [pc, #532]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f08:	691b      	ldr	r3, [r3, #16]
 8030f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030f10:	4b82      	ldr	r3, [pc, #520]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030f14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8030f16:	69bb      	ldr	r3, [r7, #24]
 8030f18:	2b08      	cmp	r3, #8
 8030f1a:	d007      	beq.n	8030f2c <HAL_RCC_OscConfig+0x308>
 8030f1c:	69bb      	ldr	r3, [r7, #24]
 8030f1e:	2b18      	cmp	r3, #24
 8030f20:	d13a      	bne.n	8030f98 <HAL_RCC_OscConfig+0x374>
 8030f22:	697b      	ldr	r3, [r7, #20]
 8030f24:	f003 0303 	and.w	r3, r3, #3
 8030f28:	2b01      	cmp	r3, #1
 8030f2a:	d135      	bne.n	8030f98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f2c:	4b7b      	ldr	r3, [pc, #492]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f2e:	681b      	ldr	r3, [r3, #0]
 8030f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030f34:	2b00      	cmp	r3, #0
 8030f36:	d005      	beq.n	8030f44 <HAL_RCC_OscConfig+0x320>
 8030f38:	687b      	ldr	r3, [r7, #4]
 8030f3a:	69db      	ldr	r3, [r3, #28]
 8030f3c:	2b80      	cmp	r3, #128	; 0x80
 8030f3e:	d001      	beq.n	8030f44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8030f40:	2301      	movs	r3, #1
 8030f42:	e296      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f44:	f7f9 feb6 	bl	802acb4 <HAL_GetREVID>
 8030f48:	4603      	mov	r3, r0
 8030f4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8030f4e:	4293      	cmp	r3, r2
 8030f50:	d817      	bhi.n	8030f82 <HAL_RCC_OscConfig+0x35e>
 8030f52:	687b      	ldr	r3, [r7, #4]
 8030f54:	6a1b      	ldr	r3, [r3, #32]
 8030f56:	2b20      	cmp	r3, #32
 8030f58:	d108      	bne.n	8030f6c <HAL_RCC_OscConfig+0x348>
 8030f5a:	4b70      	ldr	r3, [pc, #448]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f5c:	685b      	ldr	r3, [r3, #4]
 8030f5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030f62:	4a6e      	ldr	r2, [pc, #440]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030f68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f6a:	e075      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f6c:	4b6b      	ldr	r3, [pc, #428]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f6e:	685b      	ldr	r3, [r3, #4]
 8030f70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030f74:	687b      	ldr	r3, [r7, #4]
 8030f76:	6a1b      	ldr	r3, [r3, #32]
 8030f78:	069b      	lsls	r3, r3, #26
 8030f7a:	4968      	ldr	r1, [pc, #416]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f7c:	4313      	orrs	r3, r2
 8030f7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f80:	e06a      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f82:	4b66      	ldr	r3, [pc, #408]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f84:	68db      	ldr	r3, [r3, #12]
 8030f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030f8a:	687b      	ldr	r3, [r7, #4]
 8030f8c:	6a1b      	ldr	r3, [r3, #32]
 8030f8e:	061b      	lsls	r3, r3, #24
 8030f90:	4962      	ldr	r1, [pc, #392]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030f92:	4313      	orrs	r3, r2
 8030f94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f96:	e05f      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8030f98:	687b      	ldr	r3, [r7, #4]
 8030f9a:	69db      	ldr	r3, [r3, #28]
 8030f9c:	2b00      	cmp	r3, #0
 8030f9e:	d042      	beq.n	8031026 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8030fa0:	4b5e      	ldr	r3, [pc, #376]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030fa2:	681b      	ldr	r3, [r3, #0]
 8030fa4:	4a5d      	ldr	r2, [pc, #372]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030fac:	f7f9 fe52 	bl	802ac54 <HAL_GetTick>
 8030fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030fb2:	e008      	b.n	8030fc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030fb4:	f7f9 fe4e 	bl	802ac54 <HAL_GetTick>
 8030fb8:	4602      	mov	r2, r0
 8030fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fbc:	1ad3      	subs	r3, r2, r3
 8030fbe:	2b02      	cmp	r3, #2
 8030fc0:	d901      	bls.n	8030fc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8030fc2:	2303      	movs	r3, #3
 8030fc4:	e255      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030fc6:	4b55      	ldr	r3, [pc, #340]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030fc8:	681b      	ldr	r3, [r3, #0]
 8030fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030fce:	2b00      	cmp	r3, #0
 8030fd0:	d0f0      	beq.n	8030fb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030fd2:	f7f9 fe6f 	bl	802acb4 <HAL_GetREVID>
 8030fd6:	4603      	mov	r3, r0
 8030fd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8030fdc:	4293      	cmp	r3, r2
 8030fde:	d817      	bhi.n	8031010 <HAL_RCC_OscConfig+0x3ec>
 8030fe0:	687b      	ldr	r3, [r7, #4]
 8030fe2:	6a1b      	ldr	r3, [r3, #32]
 8030fe4:	2b20      	cmp	r3, #32
 8030fe6:	d108      	bne.n	8030ffa <HAL_RCC_OscConfig+0x3d6>
 8030fe8:	4b4c      	ldr	r3, [pc, #304]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030fea:	685b      	ldr	r3, [r3, #4]
 8030fec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030ff0:	4a4a      	ldr	r2, [pc, #296]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030ff6:	6053      	str	r3, [r2, #4]
 8030ff8:	e02e      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
 8030ffa:	4b48      	ldr	r3, [pc, #288]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8030ffc:	685b      	ldr	r3, [r3, #4]
 8030ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8031002:	687b      	ldr	r3, [r7, #4]
 8031004:	6a1b      	ldr	r3, [r3, #32]
 8031006:	069b      	lsls	r3, r3, #26
 8031008:	4944      	ldr	r1, [pc, #272]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 803100a:	4313      	orrs	r3, r2
 803100c:	604b      	str	r3, [r1, #4]
 803100e:	e023      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
 8031010:	4b42      	ldr	r3, [pc, #264]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8031012:	68db      	ldr	r3, [r3, #12]
 8031014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8031018:	687b      	ldr	r3, [r7, #4]
 803101a:	6a1b      	ldr	r3, [r3, #32]
 803101c:	061b      	lsls	r3, r3, #24
 803101e:	493f      	ldr	r1, [pc, #252]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8031020:	4313      	orrs	r3, r2
 8031022:	60cb      	str	r3, [r1, #12]
 8031024:	e018      	b.n	8031058 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8031026:	4b3d      	ldr	r3, [pc, #244]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8031028:	681b      	ldr	r3, [r3, #0]
 803102a:	4a3c      	ldr	r2, [pc, #240]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 803102c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8031030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031032:	f7f9 fe0f 	bl	802ac54 <HAL_GetTick>
 8031036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8031038:	e008      	b.n	803104c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 803103a:	f7f9 fe0b 	bl	802ac54 <HAL_GetTick>
 803103e:	4602      	mov	r2, r0
 8031040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031042:	1ad3      	subs	r3, r2, r3
 8031044:	2b02      	cmp	r3, #2
 8031046:	d901      	bls.n	803104c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8031048:	2303      	movs	r3, #3
 803104a:	e212      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 803104c:	4b33      	ldr	r3, [pc, #204]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 803104e:	681b      	ldr	r3, [r3, #0]
 8031050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031054:	2b00      	cmp	r3, #0
 8031056:	d1f0      	bne.n	803103a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8031058:	687b      	ldr	r3, [r7, #4]
 803105a:	681b      	ldr	r3, [r3, #0]
 803105c:	f003 0308 	and.w	r3, r3, #8
 8031060:	2b00      	cmp	r3, #0
 8031062:	d036      	beq.n	80310d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8031064:	687b      	ldr	r3, [r7, #4]
 8031066:	695b      	ldr	r3, [r3, #20]
 8031068:	2b00      	cmp	r3, #0
 803106a:	d019      	beq.n	80310a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 803106c:	4b2b      	ldr	r3, [pc, #172]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 803106e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8031070:	4a2a      	ldr	r2, [pc, #168]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8031072:	f043 0301 	orr.w	r3, r3, #1
 8031076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031078:	f7f9 fdec 	bl	802ac54 <HAL_GetTick>
 803107c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803107e:	e008      	b.n	8031092 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8031080:	f7f9 fde8 	bl	802ac54 <HAL_GetTick>
 8031084:	4602      	mov	r2, r0
 8031086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031088:	1ad3      	subs	r3, r2, r3
 803108a:	2b02      	cmp	r3, #2
 803108c:	d901      	bls.n	8031092 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 803108e:	2303      	movs	r3, #3
 8031090:	e1ef      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8031092:	4b22      	ldr	r3, [pc, #136]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 8031094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8031096:	f003 0302 	and.w	r3, r3, #2
 803109a:	2b00      	cmp	r3, #0
 803109c:	d0f0      	beq.n	8031080 <HAL_RCC_OscConfig+0x45c>
 803109e:	e018      	b.n	80310d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80310a0:	4b1e      	ldr	r3, [pc, #120]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 80310a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310a4:	4a1d      	ldr	r2, [pc, #116]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 80310a6:	f023 0301 	bic.w	r3, r3, #1
 80310aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80310ac:	f7f9 fdd2 	bl	802ac54 <HAL_GetTick>
 80310b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80310b2:	e008      	b.n	80310c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80310b4:	f7f9 fdce 	bl	802ac54 <HAL_GetTick>
 80310b8:	4602      	mov	r2, r0
 80310ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310bc:	1ad3      	subs	r3, r2, r3
 80310be:	2b02      	cmp	r3, #2
 80310c0:	d901      	bls.n	80310c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80310c2:	2303      	movs	r3, #3
 80310c4:	e1d5      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80310c6:	4b15      	ldr	r3, [pc, #84]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 80310c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310ca:	f003 0302 	and.w	r3, r3, #2
 80310ce:	2b00      	cmp	r3, #0
 80310d0:	d1f0      	bne.n	80310b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80310d2:	687b      	ldr	r3, [r7, #4]
 80310d4:	681b      	ldr	r3, [r3, #0]
 80310d6:	f003 0320 	and.w	r3, r3, #32
 80310da:	2b00      	cmp	r3, #0
 80310dc:	d039      	beq.n	8031152 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80310de:	687b      	ldr	r3, [r7, #4]
 80310e0:	699b      	ldr	r3, [r3, #24]
 80310e2:	2b00      	cmp	r3, #0
 80310e4:	d01c      	beq.n	8031120 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80310e6:	4b0d      	ldr	r3, [pc, #52]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 80310e8:	681b      	ldr	r3, [r3, #0]
 80310ea:	4a0c      	ldr	r2, [pc, #48]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 80310ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80310f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80310f2:	f7f9 fdaf 	bl	802ac54 <HAL_GetTick>
 80310f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80310f8:	e008      	b.n	803110c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80310fa:	f7f9 fdab 	bl	802ac54 <HAL_GetTick>
 80310fe:	4602      	mov	r2, r0
 8031100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031102:	1ad3      	subs	r3, r2, r3
 8031104:	2b02      	cmp	r3, #2
 8031106:	d901      	bls.n	803110c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8031108:	2303      	movs	r3, #3
 803110a:	e1b2      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 803110c:	4b03      	ldr	r3, [pc, #12]	; (803111c <HAL_RCC_OscConfig+0x4f8>)
 803110e:	681b      	ldr	r3, [r3, #0]
 8031110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031114:	2b00      	cmp	r3, #0
 8031116:	d0f0      	beq.n	80310fa <HAL_RCC_OscConfig+0x4d6>
 8031118:	e01b      	b.n	8031152 <HAL_RCC_OscConfig+0x52e>
 803111a:	bf00      	nop
 803111c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8031120:	4b9b      	ldr	r3, [pc, #620]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031122:	681b      	ldr	r3, [r3, #0]
 8031124:	4a9a      	ldr	r2, [pc, #616]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803112a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 803112c:	f7f9 fd92 	bl	802ac54 <HAL_GetTick>
 8031130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8031132:	e008      	b.n	8031146 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8031134:	f7f9 fd8e 	bl	802ac54 <HAL_GetTick>
 8031138:	4602      	mov	r2, r0
 803113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803113c:	1ad3      	subs	r3, r2, r3
 803113e:	2b02      	cmp	r3, #2
 8031140:	d901      	bls.n	8031146 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8031142:	2303      	movs	r3, #3
 8031144:	e195      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8031146:	4b92      	ldr	r3, [pc, #584]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031148:	681b      	ldr	r3, [r3, #0]
 803114a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803114e:	2b00      	cmp	r3, #0
 8031150:	d1f0      	bne.n	8031134 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8031152:	687b      	ldr	r3, [r7, #4]
 8031154:	681b      	ldr	r3, [r3, #0]
 8031156:	f003 0304 	and.w	r3, r3, #4
 803115a:	2b00      	cmp	r3, #0
 803115c:	f000 8081 	beq.w	8031262 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8031160:	4b8c      	ldr	r3, [pc, #560]	; (8031394 <HAL_RCC_OscConfig+0x770>)
 8031162:	681b      	ldr	r3, [r3, #0]
 8031164:	4a8b      	ldr	r2, [pc, #556]	; (8031394 <HAL_RCC_OscConfig+0x770>)
 8031166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803116a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 803116c:	f7f9 fd72 	bl	802ac54 <HAL_GetTick>
 8031170:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8031172:	e008      	b.n	8031186 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8031174:	f7f9 fd6e 	bl	802ac54 <HAL_GetTick>
 8031178:	4602      	mov	r2, r0
 803117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803117c:	1ad3      	subs	r3, r2, r3
 803117e:	2b64      	cmp	r3, #100	; 0x64
 8031180:	d901      	bls.n	8031186 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8031182:	2303      	movs	r3, #3
 8031184:	e175      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8031186:	4b83      	ldr	r3, [pc, #524]	; (8031394 <HAL_RCC_OscConfig+0x770>)
 8031188:	681b      	ldr	r3, [r3, #0]
 803118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803118e:	2b00      	cmp	r3, #0
 8031190:	d0f0      	beq.n	8031174 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8031192:	687b      	ldr	r3, [r7, #4]
 8031194:	689b      	ldr	r3, [r3, #8]
 8031196:	2b01      	cmp	r3, #1
 8031198:	d106      	bne.n	80311a8 <HAL_RCC_OscConfig+0x584>
 803119a:	4b7d      	ldr	r3, [pc, #500]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803119e:	4a7c      	ldr	r2, [pc, #496]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311a0:	f043 0301 	orr.w	r3, r3, #1
 80311a4:	6713      	str	r3, [r2, #112]	; 0x70
 80311a6:	e02d      	b.n	8031204 <HAL_RCC_OscConfig+0x5e0>
 80311a8:	687b      	ldr	r3, [r7, #4]
 80311aa:	689b      	ldr	r3, [r3, #8]
 80311ac:	2b00      	cmp	r3, #0
 80311ae:	d10c      	bne.n	80311ca <HAL_RCC_OscConfig+0x5a6>
 80311b0:	4b77      	ldr	r3, [pc, #476]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311b4:	4a76      	ldr	r2, [pc, #472]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311b6:	f023 0301 	bic.w	r3, r3, #1
 80311ba:	6713      	str	r3, [r2, #112]	; 0x70
 80311bc:	4b74      	ldr	r3, [pc, #464]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311c0:	4a73      	ldr	r2, [pc, #460]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311c2:	f023 0304 	bic.w	r3, r3, #4
 80311c6:	6713      	str	r3, [r2, #112]	; 0x70
 80311c8:	e01c      	b.n	8031204 <HAL_RCC_OscConfig+0x5e0>
 80311ca:	687b      	ldr	r3, [r7, #4]
 80311cc:	689b      	ldr	r3, [r3, #8]
 80311ce:	2b05      	cmp	r3, #5
 80311d0:	d10c      	bne.n	80311ec <HAL_RCC_OscConfig+0x5c8>
 80311d2:	4b6f      	ldr	r3, [pc, #444]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311d6:	4a6e      	ldr	r2, [pc, #440]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311d8:	f043 0304 	orr.w	r3, r3, #4
 80311dc:	6713      	str	r3, [r2, #112]	; 0x70
 80311de:	4b6c      	ldr	r3, [pc, #432]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311e2:	4a6b      	ldr	r2, [pc, #428]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311e4:	f043 0301 	orr.w	r3, r3, #1
 80311e8:	6713      	str	r3, [r2, #112]	; 0x70
 80311ea:	e00b      	b.n	8031204 <HAL_RCC_OscConfig+0x5e0>
 80311ec:	4b68      	ldr	r3, [pc, #416]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311f0:	4a67      	ldr	r2, [pc, #412]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311f2:	f023 0301 	bic.w	r3, r3, #1
 80311f6:	6713      	str	r3, [r2, #112]	; 0x70
 80311f8:	4b65      	ldr	r3, [pc, #404]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311fc:	4a64      	ldr	r2, [pc, #400]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80311fe:	f023 0304 	bic.w	r3, r3, #4
 8031202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8031204:	687b      	ldr	r3, [r7, #4]
 8031206:	689b      	ldr	r3, [r3, #8]
 8031208:	2b00      	cmp	r3, #0
 803120a:	d015      	beq.n	8031238 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803120c:	f7f9 fd22 	bl	802ac54 <HAL_GetTick>
 8031210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8031212:	e00a      	b.n	803122a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031214:	f7f9 fd1e 	bl	802ac54 <HAL_GetTick>
 8031218:	4602      	mov	r2, r0
 803121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803121c:	1ad3      	subs	r3, r2, r3
 803121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8031222:	4293      	cmp	r3, r2
 8031224:	d901      	bls.n	803122a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8031226:	2303      	movs	r3, #3
 8031228:	e123      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803122a:	4b59      	ldr	r3, [pc, #356]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803122e:	f003 0302 	and.w	r3, r3, #2
 8031232:	2b00      	cmp	r3, #0
 8031234:	d0ee      	beq.n	8031214 <HAL_RCC_OscConfig+0x5f0>
 8031236:	e014      	b.n	8031262 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031238:	f7f9 fd0c 	bl	802ac54 <HAL_GetTick>
 803123c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803123e:	e00a      	b.n	8031256 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031240:	f7f9 fd08 	bl	802ac54 <HAL_GetTick>
 8031244:	4602      	mov	r2, r0
 8031246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031248:	1ad3      	subs	r3, r2, r3
 803124a:	f241 3288 	movw	r2, #5000	; 0x1388
 803124e:	4293      	cmp	r3, r2
 8031250:	d901      	bls.n	8031256 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8031252:	2303      	movs	r3, #3
 8031254:	e10d      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8031256:	4b4e      	ldr	r3, [pc, #312]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803125a:	f003 0302 	and.w	r3, r3, #2
 803125e:	2b00      	cmp	r3, #0
 8031260:	d1ee      	bne.n	8031240 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8031262:	687b      	ldr	r3, [r7, #4]
 8031264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031266:	2b00      	cmp	r3, #0
 8031268:	f000 8102 	beq.w	8031470 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 803126c:	4b48      	ldr	r3, [pc, #288]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803126e:	691b      	ldr	r3, [r3, #16]
 8031270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8031274:	2b18      	cmp	r3, #24
 8031276:	f000 80bd 	beq.w	80313f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 803127a:	687b      	ldr	r3, [r7, #4]
 803127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803127e:	2b02      	cmp	r3, #2
 8031280:	f040 809e 	bne.w	80313c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8031284:	4b42      	ldr	r3, [pc, #264]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031286:	681b      	ldr	r3, [r3, #0]
 8031288:	4a41      	ldr	r2, [pc, #260]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803128a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803128e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031290:	f7f9 fce0 	bl	802ac54 <HAL_GetTick>
 8031294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8031296:	e008      	b.n	80312aa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8031298:	f7f9 fcdc 	bl	802ac54 <HAL_GetTick>
 803129c:	4602      	mov	r2, r0
 803129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312a0:	1ad3      	subs	r3, r2, r3
 80312a2:	2b02      	cmp	r3, #2
 80312a4:	d901      	bls.n	80312aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80312a6:	2303      	movs	r3, #3
 80312a8:	e0e3      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80312aa:	4b39      	ldr	r3, [pc, #228]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80312ac:	681b      	ldr	r3, [r3, #0]
 80312ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80312b2:	2b00      	cmp	r3, #0
 80312b4:	d1f0      	bne.n	8031298 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80312b6:	4b36      	ldr	r3, [pc, #216]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80312b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80312ba:	4b37      	ldr	r3, [pc, #220]	; (8031398 <HAL_RCC_OscConfig+0x774>)
 80312bc:	4013      	ands	r3, r2
 80312be:	687a      	ldr	r2, [r7, #4]
 80312c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80312c2:	687a      	ldr	r2, [r7, #4]
 80312c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80312c6:	0112      	lsls	r2, r2, #4
 80312c8:	430a      	orrs	r2, r1
 80312ca:	4931      	ldr	r1, [pc, #196]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 80312cc:	4313      	orrs	r3, r2
 80312ce:	628b      	str	r3, [r1, #40]	; 0x28
 80312d0:	687b      	ldr	r3, [r7, #4]
 80312d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80312d4:	3b01      	subs	r3, #1
 80312d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80312da:	687b      	ldr	r3, [r7, #4]
 80312dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80312de:	3b01      	subs	r3, #1
 80312e0:	025b      	lsls	r3, r3, #9
 80312e2:	b29b      	uxth	r3, r3
 80312e4:	431a      	orrs	r2, r3
 80312e6:	687b      	ldr	r3, [r7, #4]
 80312e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80312ea:	3b01      	subs	r3, #1
 80312ec:	041b      	lsls	r3, r3, #16
 80312ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80312f2:	431a      	orrs	r2, r3
 80312f4:	687b      	ldr	r3, [r7, #4]
 80312f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80312f8:	3b01      	subs	r3, #1
 80312fa:	061b      	lsls	r3, r3, #24
 80312fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8031300:	4923      	ldr	r1, [pc, #140]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031302:	4313      	orrs	r3, r2
 8031304:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8031306:	4b22      	ldr	r3, [pc, #136]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803130a:	4a21      	ldr	r2, [pc, #132]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803130c:	f023 0301 	bic.w	r3, r3, #1
 8031310:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8031312:	4b1f      	ldr	r3, [pc, #124]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8031316:	4b21      	ldr	r3, [pc, #132]	; (803139c <HAL_RCC_OscConfig+0x778>)
 8031318:	4013      	ands	r3, r2
 803131a:	687a      	ldr	r2, [r7, #4]
 803131c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 803131e:	00d2      	lsls	r2, r2, #3
 8031320:	491b      	ldr	r1, [pc, #108]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031322:	4313      	orrs	r3, r2
 8031324:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8031326:	4b1a      	ldr	r3, [pc, #104]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803132a:	f023 020c 	bic.w	r2, r3, #12
 803132e:	687b      	ldr	r3, [r7, #4]
 8031330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031332:	4917      	ldr	r1, [pc, #92]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031334:	4313      	orrs	r3, r2
 8031336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8031338:	4b15      	ldr	r3, [pc, #84]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803133c:	f023 0202 	bic.w	r2, r3, #2
 8031340:	687b      	ldr	r3, [r7, #4]
 8031342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031344:	4912      	ldr	r1, [pc, #72]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031346:	4313      	orrs	r3, r2
 8031348:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 803134a:	4b11      	ldr	r3, [pc, #68]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803134e:	4a10      	ldr	r2, [pc, #64]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8031354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031356:	4b0e      	ldr	r3, [pc, #56]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803135a:	4a0d      	ldr	r2, [pc, #52]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8031362:	4b0b      	ldr	r3, [pc, #44]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031366:	4a0a      	ldr	r2, [pc, #40]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 803136c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 803136e:	4b08      	ldr	r3, [pc, #32]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031372:	4a07      	ldr	r2, [pc, #28]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031374:	f043 0301 	orr.w	r3, r3, #1
 8031378:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 803137a:	4b05      	ldr	r3, [pc, #20]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 803137c:	681b      	ldr	r3, [r3, #0]
 803137e:	4a04      	ldr	r2, [pc, #16]	; (8031390 <HAL_RCC_OscConfig+0x76c>)
 8031380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8031384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031386:	f7f9 fc65 	bl	802ac54 <HAL_GetTick>
 803138a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803138c:	e011      	b.n	80313b2 <HAL_RCC_OscConfig+0x78e>
 803138e:	bf00      	nop
 8031390:	58024400 	.word	0x58024400
 8031394:	58024800 	.word	0x58024800
 8031398:	fffffc0c 	.word	0xfffffc0c
 803139c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80313a0:	f7f9 fc58 	bl	802ac54 <HAL_GetTick>
 80313a4:	4602      	mov	r2, r0
 80313a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80313a8:	1ad3      	subs	r3, r2, r3
 80313aa:	2b02      	cmp	r3, #2
 80313ac:	d901      	bls.n	80313b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80313ae:	2303      	movs	r3, #3
 80313b0:	e05f      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80313b2:	4b32      	ldr	r3, [pc, #200]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313b4:	681b      	ldr	r3, [r3, #0]
 80313b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80313ba:	2b00      	cmp	r3, #0
 80313bc:	d0f0      	beq.n	80313a0 <HAL_RCC_OscConfig+0x77c>
 80313be:	e057      	b.n	8031470 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80313c0:	4b2e      	ldr	r3, [pc, #184]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313c2:	681b      	ldr	r3, [r3, #0]
 80313c4:	4a2d      	ldr	r2, [pc, #180]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80313ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80313cc:	f7f9 fc42 	bl	802ac54 <HAL_GetTick>
 80313d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80313d2:	e008      	b.n	80313e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80313d4:	f7f9 fc3e 	bl	802ac54 <HAL_GetTick>
 80313d8:	4602      	mov	r2, r0
 80313da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80313dc:	1ad3      	subs	r3, r2, r3
 80313de:	2b02      	cmp	r3, #2
 80313e0:	d901      	bls.n	80313e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80313e2:	2303      	movs	r3, #3
 80313e4:	e045      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80313e6:	4b25      	ldr	r3, [pc, #148]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313e8:	681b      	ldr	r3, [r3, #0]
 80313ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80313ee:	2b00      	cmp	r3, #0
 80313f0:	d1f0      	bne.n	80313d4 <HAL_RCC_OscConfig+0x7b0>
 80313f2:	e03d      	b.n	8031470 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80313f4:	4b21      	ldr	r3, [pc, #132]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80313f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80313fa:	4b20      	ldr	r3, [pc, #128]	; (803147c <HAL_RCC_OscConfig+0x858>)
 80313fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80313fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031400:	687b      	ldr	r3, [r7, #4]
 8031402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031404:	2b01      	cmp	r3, #1
 8031406:	d031      	beq.n	803146c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031408:	693b      	ldr	r3, [r7, #16]
 803140a:	f003 0203 	and.w	r2, r3, #3
 803140e:	687b      	ldr	r3, [r7, #4]
 8031410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031412:	429a      	cmp	r2, r3
 8031414:	d12a      	bne.n	803146c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8031416:	693b      	ldr	r3, [r7, #16]
 8031418:	091b      	lsrs	r3, r3, #4
 803141a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 803141e:	687b      	ldr	r3, [r7, #4]
 8031420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031422:	429a      	cmp	r2, r3
 8031424:	d122      	bne.n	803146c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8031426:	68fb      	ldr	r3, [r7, #12]
 8031428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803142c:	687b      	ldr	r3, [r7, #4]
 803142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031430:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8031432:	429a      	cmp	r2, r3
 8031434:	d11a      	bne.n	803146c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8031436:	68fb      	ldr	r3, [r7, #12]
 8031438:	0a5b      	lsrs	r3, r3, #9
 803143a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803143e:	687b      	ldr	r3, [r7, #4]
 8031440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031442:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8031444:	429a      	cmp	r2, r3
 8031446:	d111      	bne.n	803146c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8031448:	68fb      	ldr	r3, [r7, #12]
 803144a:	0c1b      	lsrs	r3, r3, #16
 803144c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031450:	687b      	ldr	r3, [r7, #4]
 8031452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031454:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8031456:	429a      	cmp	r2, r3
 8031458:	d108      	bne.n	803146c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 803145a:	68fb      	ldr	r3, [r7, #12]
 803145c:	0e1b      	lsrs	r3, r3, #24
 803145e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031462:	687b      	ldr	r3, [r7, #4]
 8031464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031466:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8031468:	429a      	cmp	r2, r3
 803146a:	d001      	beq.n	8031470 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 803146c:	2301      	movs	r3, #1
 803146e:	e000      	b.n	8031472 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8031470:	2300      	movs	r3, #0
}
 8031472:	4618      	mov	r0, r3
 8031474:	3730      	adds	r7, #48	; 0x30
 8031476:	46bd      	mov	sp, r7
 8031478:	bd80      	pop	{r7, pc}
 803147a:	bf00      	nop
 803147c:	58024400 	.word	0x58024400

08031480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8031480:	b580      	push	{r7, lr}
 8031482:	b086      	sub	sp, #24
 8031484:	af00      	add	r7, sp, #0
 8031486:	6078      	str	r0, [r7, #4]
 8031488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 803148a:	687b      	ldr	r3, [r7, #4]
 803148c:	2b00      	cmp	r3, #0
 803148e:	d101      	bne.n	8031494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8031490:	2301      	movs	r3, #1
 8031492:	e19c      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8031494:	4b8a      	ldr	r3, [pc, #552]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 8031496:	681b      	ldr	r3, [r3, #0]
 8031498:	f003 030f 	and.w	r3, r3, #15
 803149c:	683a      	ldr	r2, [r7, #0]
 803149e:	429a      	cmp	r2, r3
 80314a0:	d910      	bls.n	80314c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80314a2:	4b87      	ldr	r3, [pc, #540]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80314a4:	681b      	ldr	r3, [r3, #0]
 80314a6:	f023 020f 	bic.w	r2, r3, #15
 80314aa:	4985      	ldr	r1, [pc, #532]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80314ac:	683b      	ldr	r3, [r7, #0]
 80314ae:	4313      	orrs	r3, r2
 80314b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80314b2:	4b83      	ldr	r3, [pc, #524]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80314b4:	681b      	ldr	r3, [r3, #0]
 80314b6:	f003 030f 	and.w	r3, r3, #15
 80314ba:	683a      	ldr	r2, [r7, #0]
 80314bc:	429a      	cmp	r2, r3
 80314be:	d001      	beq.n	80314c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80314c0:	2301      	movs	r3, #1
 80314c2:	e184      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	681b      	ldr	r3, [r3, #0]
 80314c8:	f003 0304 	and.w	r3, r3, #4
 80314cc:	2b00      	cmp	r3, #0
 80314ce:	d010      	beq.n	80314f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80314d0:	687b      	ldr	r3, [r7, #4]
 80314d2:	691a      	ldr	r2, [r3, #16]
 80314d4:	4b7b      	ldr	r3, [pc, #492]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80314d6:	699b      	ldr	r3, [r3, #24]
 80314d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80314dc:	429a      	cmp	r2, r3
 80314de:	d908      	bls.n	80314f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80314e0:	4b78      	ldr	r3, [pc, #480]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80314e2:	699b      	ldr	r3, [r3, #24]
 80314e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80314e8:	687b      	ldr	r3, [r7, #4]
 80314ea:	691b      	ldr	r3, [r3, #16]
 80314ec:	4975      	ldr	r1, [pc, #468]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80314ee:	4313      	orrs	r3, r2
 80314f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80314f2:	687b      	ldr	r3, [r7, #4]
 80314f4:	681b      	ldr	r3, [r3, #0]
 80314f6:	f003 0308 	and.w	r3, r3, #8
 80314fa:	2b00      	cmp	r3, #0
 80314fc:	d010      	beq.n	8031520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80314fe:	687b      	ldr	r3, [r7, #4]
 8031500:	695a      	ldr	r2, [r3, #20]
 8031502:	4b70      	ldr	r3, [pc, #448]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031504:	69db      	ldr	r3, [r3, #28]
 8031506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803150a:	429a      	cmp	r2, r3
 803150c:	d908      	bls.n	8031520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 803150e:	4b6d      	ldr	r3, [pc, #436]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031510:	69db      	ldr	r3, [r3, #28]
 8031512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031516:	687b      	ldr	r3, [r7, #4]
 8031518:	695b      	ldr	r3, [r3, #20]
 803151a:	496a      	ldr	r1, [pc, #424]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803151c:	4313      	orrs	r3, r2
 803151e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031520:	687b      	ldr	r3, [r7, #4]
 8031522:	681b      	ldr	r3, [r3, #0]
 8031524:	f003 0310 	and.w	r3, r3, #16
 8031528:	2b00      	cmp	r3, #0
 803152a:	d010      	beq.n	803154e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 803152c:	687b      	ldr	r3, [r7, #4]
 803152e:	699a      	ldr	r2, [r3, #24]
 8031530:	4b64      	ldr	r3, [pc, #400]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031532:	69db      	ldr	r3, [r3, #28]
 8031534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8031538:	429a      	cmp	r2, r3
 803153a:	d908      	bls.n	803154e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 803153c:	4b61      	ldr	r3, [pc, #388]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803153e:	69db      	ldr	r3, [r3, #28]
 8031540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8031544:	687b      	ldr	r3, [r7, #4]
 8031546:	699b      	ldr	r3, [r3, #24]
 8031548:	495e      	ldr	r1, [pc, #376]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803154a:	4313      	orrs	r3, r2
 803154c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 803154e:	687b      	ldr	r3, [r7, #4]
 8031550:	681b      	ldr	r3, [r3, #0]
 8031552:	f003 0320 	and.w	r3, r3, #32
 8031556:	2b00      	cmp	r3, #0
 8031558:	d010      	beq.n	803157c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 803155a:	687b      	ldr	r3, [r7, #4]
 803155c:	69da      	ldr	r2, [r3, #28]
 803155e:	4b59      	ldr	r3, [pc, #356]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031560:	6a1b      	ldr	r3, [r3, #32]
 8031562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031566:	429a      	cmp	r2, r3
 8031568:	d908      	bls.n	803157c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 803156a:	4b56      	ldr	r3, [pc, #344]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803156c:	6a1b      	ldr	r3, [r3, #32]
 803156e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031572:	687b      	ldr	r3, [r7, #4]
 8031574:	69db      	ldr	r3, [r3, #28]
 8031576:	4953      	ldr	r1, [pc, #332]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031578:	4313      	orrs	r3, r2
 803157a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 803157c:	687b      	ldr	r3, [r7, #4]
 803157e:	681b      	ldr	r3, [r3, #0]
 8031580:	f003 0302 	and.w	r3, r3, #2
 8031584:	2b00      	cmp	r3, #0
 8031586:	d010      	beq.n	80315aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8031588:	687b      	ldr	r3, [r7, #4]
 803158a:	68da      	ldr	r2, [r3, #12]
 803158c:	4b4d      	ldr	r3, [pc, #308]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803158e:	699b      	ldr	r3, [r3, #24]
 8031590:	f003 030f 	and.w	r3, r3, #15
 8031594:	429a      	cmp	r2, r3
 8031596:	d908      	bls.n	80315aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8031598:	4b4a      	ldr	r3, [pc, #296]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803159a:	699b      	ldr	r3, [r3, #24]
 803159c:	f023 020f 	bic.w	r2, r3, #15
 80315a0:	687b      	ldr	r3, [r7, #4]
 80315a2:	68db      	ldr	r3, [r3, #12]
 80315a4:	4947      	ldr	r1, [pc, #284]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80315a6:	4313      	orrs	r3, r2
 80315a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80315aa:	687b      	ldr	r3, [r7, #4]
 80315ac:	681b      	ldr	r3, [r3, #0]
 80315ae:	f003 0301 	and.w	r3, r3, #1
 80315b2:	2b00      	cmp	r3, #0
 80315b4:	d055      	beq.n	8031662 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80315b6:	4b43      	ldr	r3, [pc, #268]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80315b8:	699b      	ldr	r3, [r3, #24]
 80315ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80315be:	687b      	ldr	r3, [r7, #4]
 80315c0:	689b      	ldr	r3, [r3, #8]
 80315c2:	4940      	ldr	r1, [pc, #256]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80315c4:	4313      	orrs	r3, r2
 80315c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80315c8:	687b      	ldr	r3, [r7, #4]
 80315ca:	685b      	ldr	r3, [r3, #4]
 80315cc:	2b02      	cmp	r3, #2
 80315ce:	d107      	bne.n	80315e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80315d0:	4b3c      	ldr	r3, [pc, #240]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80315d2:	681b      	ldr	r3, [r3, #0]
 80315d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80315d8:	2b00      	cmp	r3, #0
 80315da:	d121      	bne.n	8031620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80315dc:	2301      	movs	r3, #1
 80315de:	e0f6      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80315e0:	687b      	ldr	r3, [r7, #4]
 80315e2:	685b      	ldr	r3, [r3, #4]
 80315e4:	2b03      	cmp	r3, #3
 80315e6:	d107      	bne.n	80315f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80315e8:	4b36      	ldr	r3, [pc, #216]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 80315ea:	681b      	ldr	r3, [r3, #0]
 80315ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80315f0:	2b00      	cmp	r3, #0
 80315f2:	d115      	bne.n	8031620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80315f4:	2301      	movs	r3, #1
 80315f6:	e0ea      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80315f8:	687b      	ldr	r3, [r7, #4]
 80315fa:	685b      	ldr	r3, [r3, #4]
 80315fc:	2b01      	cmp	r3, #1
 80315fe:	d107      	bne.n	8031610 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8031600:	4b30      	ldr	r3, [pc, #192]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031602:	681b      	ldr	r3, [r3, #0]
 8031604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031608:	2b00      	cmp	r3, #0
 803160a:	d109      	bne.n	8031620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 803160c:	2301      	movs	r3, #1
 803160e:	e0de      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8031610:	4b2c      	ldr	r3, [pc, #176]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031612:	681b      	ldr	r3, [r3, #0]
 8031614:	f003 0304 	and.w	r3, r3, #4
 8031618:	2b00      	cmp	r3, #0
 803161a:	d101      	bne.n	8031620 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 803161c:	2301      	movs	r3, #1
 803161e:	e0d6      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8031620:	4b28      	ldr	r3, [pc, #160]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031622:	691b      	ldr	r3, [r3, #16]
 8031624:	f023 0207 	bic.w	r2, r3, #7
 8031628:	687b      	ldr	r3, [r7, #4]
 803162a:	685b      	ldr	r3, [r3, #4]
 803162c:	4925      	ldr	r1, [pc, #148]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803162e:	4313      	orrs	r3, r2
 8031630:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031632:	f7f9 fb0f 	bl	802ac54 <HAL_GetTick>
 8031636:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8031638:	e00a      	b.n	8031650 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 803163a:	f7f9 fb0b 	bl	802ac54 <HAL_GetTick>
 803163e:	4602      	mov	r2, r0
 8031640:	697b      	ldr	r3, [r7, #20]
 8031642:	1ad3      	subs	r3, r2, r3
 8031644:	f241 3288 	movw	r2, #5000	; 0x1388
 8031648:	4293      	cmp	r3, r2
 803164a:	d901      	bls.n	8031650 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 803164c:	2303      	movs	r3, #3
 803164e:	e0be      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8031650:	4b1c      	ldr	r3, [pc, #112]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031652:	691b      	ldr	r3, [r3, #16]
 8031654:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8031658:	687b      	ldr	r3, [r7, #4]
 803165a:	685b      	ldr	r3, [r3, #4]
 803165c:	00db      	lsls	r3, r3, #3
 803165e:	429a      	cmp	r2, r3
 8031660:	d1eb      	bne.n	803163a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8031662:	687b      	ldr	r3, [r7, #4]
 8031664:	681b      	ldr	r3, [r3, #0]
 8031666:	f003 0302 	and.w	r3, r3, #2
 803166a:	2b00      	cmp	r3, #0
 803166c:	d010      	beq.n	8031690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 803166e:	687b      	ldr	r3, [r7, #4]
 8031670:	68da      	ldr	r2, [r3, #12]
 8031672:	4b14      	ldr	r3, [pc, #80]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031674:	699b      	ldr	r3, [r3, #24]
 8031676:	f003 030f 	and.w	r3, r3, #15
 803167a:	429a      	cmp	r2, r3
 803167c:	d208      	bcs.n	8031690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 803167e:	4b11      	ldr	r3, [pc, #68]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 8031680:	699b      	ldr	r3, [r3, #24]
 8031682:	f023 020f 	bic.w	r2, r3, #15
 8031686:	687b      	ldr	r3, [r7, #4]
 8031688:	68db      	ldr	r3, [r3, #12]
 803168a:	490e      	ldr	r1, [pc, #56]	; (80316c4 <HAL_RCC_ClockConfig+0x244>)
 803168c:	4313      	orrs	r3, r2
 803168e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8031690:	4b0b      	ldr	r3, [pc, #44]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 8031692:	681b      	ldr	r3, [r3, #0]
 8031694:	f003 030f 	and.w	r3, r3, #15
 8031698:	683a      	ldr	r2, [r7, #0]
 803169a:	429a      	cmp	r2, r3
 803169c:	d214      	bcs.n	80316c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 803169e:	4b08      	ldr	r3, [pc, #32]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80316a0:	681b      	ldr	r3, [r3, #0]
 80316a2:	f023 020f 	bic.w	r2, r3, #15
 80316a6:	4906      	ldr	r1, [pc, #24]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80316a8:	683b      	ldr	r3, [r7, #0]
 80316aa:	4313      	orrs	r3, r2
 80316ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80316ae:	4b04      	ldr	r3, [pc, #16]	; (80316c0 <HAL_RCC_ClockConfig+0x240>)
 80316b0:	681b      	ldr	r3, [r3, #0]
 80316b2:	f003 030f 	and.w	r3, r3, #15
 80316b6:	683a      	ldr	r2, [r7, #0]
 80316b8:	429a      	cmp	r2, r3
 80316ba:	d005      	beq.n	80316c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80316bc:	2301      	movs	r3, #1
 80316be:	e086      	b.n	80317ce <HAL_RCC_ClockConfig+0x34e>
 80316c0:	52002000 	.word	0x52002000
 80316c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80316c8:	687b      	ldr	r3, [r7, #4]
 80316ca:	681b      	ldr	r3, [r3, #0]
 80316cc:	f003 0304 	and.w	r3, r3, #4
 80316d0:	2b00      	cmp	r3, #0
 80316d2:	d010      	beq.n	80316f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80316d4:	687b      	ldr	r3, [r7, #4]
 80316d6:	691a      	ldr	r2, [r3, #16]
 80316d8:	4b3f      	ldr	r3, [pc, #252]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 80316da:	699b      	ldr	r3, [r3, #24]
 80316dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80316e0:	429a      	cmp	r2, r3
 80316e2:	d208      	bcs.n	80316f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80316e4:	4b3c      	ldr	r3, [pc, #240]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 80316e6:	699b      	ldr	r3, [r3, #24]
 80316e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80316ec:	687b      	ldr	r3, [r7, #4]
 80316ee:	691b      	ldr	r3, [r3, #16]
 80316f0:	4939      	ldr	r1, [pc, #228]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 80316f2:	4313      	orrs	r3, r2
 80316f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	681b      	ldr	r3, [r3, #0]
 80316fa:	f003 0308 	and.w	r3, r3, #8
 80316fe:	2b00      	cmp	r3, #0
 8031700:	d010      	beq.n	8031724 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031702:	687b      	ldr	r3, [r7, #4]
 8031704:	695a      	ldr	r2, [r3, #20]
 8031706:	4b34      	ldr	r3, [pc, #208]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031708:	69db      	ldr	r3, [r3, #28]
 803170a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803170e:	429a      	cmp	r2, r3
 8031710:	d208      	bcs.n	8031724 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031712:	4b31      	ldr	r3, [pc, #196]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031714:	69db      	ldr	r3, [r3, #28]
 8031716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803171a:	687b      	ldr	r3, [r7, #4]
 803171c:	695b      	ldr	r3, [r3, #20]
 803171e:	492e      	ldr	r1, [pc, #184]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031720:	4313      	orrs	r3, r2
 8031722:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031724:	687b      	ldr	r3, [r7, #4]
 8031726:	681b      	ldr	r3, [r3, #0]
 8031728:	f003 0310 	and.w	r3, r3, #16
 803172c:	2b00      	cmp	r3, #0
 803172e:	d010      	beq.n	8031752 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031730:	687b      	ldr	r3, [r7, #4]
 8031732:	699a      	ldr	r2, [r3, #24]
 8031734:	4b28      	ldr	r3, [pc, #160]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031736:	69db      	ldr	r3, [r3, #28]
 8031738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803173c:	429a      	cmp	r2, r3
 803173e:	d208      	bcs.n	8031752 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031740:	4b25      	ldr	r3, [pc, #148]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031742:	69db      	ldr	r3, [r3, #28]
 8031744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8031748:	687b      	ldr	r3, [r7, #4]
 803174a:	699b      	ldr	r3, [r3, #24]
 803174c:	4922      	ldr	r1, [pc, #136]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 803174e:	4313      	orrs	r3, r2
 8031750:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8031752:	687b      	ldr	r3, [r7, #4]
 8031754:	681b      	ldr	r3, [r3, #0]
 8031756:	f003 0320 	and.w	r3, r3, #32
 803175a:	2b00      	cmp	r3, #0
 803175c:	d010      	beq.n	8031780 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 803175e:	687b      	ldr	r3, [r7, #4]
 8031760:	69da      	ldr	r2, [r3, #28]
 8031762:	4b1d      	ldr	r3, [pc, #116]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031764:	6a1b      	ldr	r3, [r3, #32]
 8031766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803176a:	429a      	cmp	r2, r3
 803176c:	d208      	bcs.n	8031780 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 803176e:	4b1a      	ldr	r3, [pc, #104]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031770:	6a1b      	ldr	r3, [r3, #32]
 8031772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031776:	687b      	ldr	r3, [r7, #4]
 8031778:	69db      	ldr	r3, [r3, #28]
 803177a:	4917      	ldr	r1, [pc, #92]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 803177c:	4313      	orrs	r3, r2
 803177e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8031780:	f000 f834 	bl	80317ec <HAL_RCC_GetSysClockFreq>
 8031784:	4602      	mov	r2, r0
 8031786:	4b14      	ldr	r3, [pc, #80]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 8031788:	699b      	ldr	r3, [r3, #24]
 803178a:	0a1b      	lsrs	r3, r3, #8
 803178c:	f003 030f 	and.w	r3, r3, #15
 8031790:	4912      	ldr	r1, [pc, #72]	; (80317dc <HAL_RCC_ClockConfig+0x35c>)
 8031792:	5ccb      	ldrb	r3, [r1, r3]
 8031794:	f003 031f 	and.w	r3, r3, #31
 8031798:	fa22 f303 	lsr.w	r3, r2, r3
 803179c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 803179e:	4b0e      	ldr	r3, [pc, #56]	; (80317d8 <HAL_RCC_ClockConfig+0x358>)
 80317a0:	699b      	ldr	r3, [r3, #24]
 80317a2:	f003 030f 	and.w	r3, r3, #15
 80317a6:	4a0d      	ldr	r2, [pc, #52]	; (80317dc <HAL_RCC_ClockConfig+0x35c>)
 80317a8:	5cd3      	ldrb	r3, [r2, r3]
 80317aa:	f003 031f 	and.w	r3, r3, #31
 80317ae:	693a      	ldr	r2, [r7, #16]
 80317b0:	fa22 f303 	lsr.w	r3, r2, r3
 80317b4:	4a0a      	ldr	r2, [pc, #40]	; (80317e0 <HAL_RCC_ClockConfig+0x360>)
 80317b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80317b8:	4a0a      	ldr	r2, [pc, #40]	; (80317e4 <HAL_RCC_ClockConfig+0x364>)
 80317ba:	693b      	ldr	r3, [r7, #16]
 80317bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80317be:	4b0a      	ldr	r3, [pc, #40]	; (80317e8 <HAL_RCC_ClockConfig+0x368>)
 80317c0:	681b      	ldr	r3, [r3, #0]
 80317c2:	4618      	mov	r0, r3
 80317c4:	f7f9 f9fc 	bl	802abc0 <HAL_InitTick>
 80317c8:	4603      	mov	r3, r0
 80317ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80317cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80317ce:	4618      	mov	r0, r3
 80317d0:	3718      	adds	r7, #24
 80317d2:	46bd      	mov	sp, r7
 80317d4:	bd80      	pop	{r7, pc}
 80317d6:	bf00      	nop
 80317d8:	58024400 	.word	0x58024400
 80317dc:	08058508 	.word	0x08058508
 80317e0:	24000008 	.word	0x24000008
 80317e4:	24000004 	.word	0x24000004
 80317e8:	2400000c 	.word	0x2400000c

080317ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80317ec:	b480      	push	{r7}
 80317ee:	b089      	sub	sp, #36	; 0x24
 80317f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80317f2:	4bb3      	ldr	r3, [pc, #716]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80317f4:	691b      	ldr	r3, [r3, #16]
 80317f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80317fa:	2b18      	cmp	r3, #24
 80317fc:	f200 8155 	bhi.w	8031aaa <HAL_RCC_GetSysClockFreq+0x2be>
 8031800:	a201      	add	r2, pc, #4	; (adr r2, 8031808 <HAL_RCC_GetSysClockFreq+0x1c>)
 8031802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031806:	bf00      	nop
 8031808:	0803186d 	.word	0x0803186d
 803180c:	08031aab 	.word	0x08031aab
 8031810:	08031aab 	.word	0x08031aab
 8031814:	08031aab 	.word	0x08031aab
 8031818:	08031aab 	.word	0x08031aab
 803181c:	08031aab 	.word	0x08031aab
 8031820:	08031aab 	.word	0x08031aab
 8031824:	08031aab 	.word	0x08031aab
 8031828:	08031893 	.word	0x08031893
 803182c:	08031aab 	.word	0x08031aab
 8031830:	08031aab 	.word	0x08031aab
 8031834:	08031aab 	.word	0x08031aab
 8031838:	08031aab 	.word	0x08031aab
 803183c:	08031aab 	.word	0x08031aab
 8031840:	08031aab 	.word	0x08031aab
 8031844:	08031aab 	.word	0x08031aab
 8031848:	08031899 	.word	0x08031899
 803184c:	08031aab 	.word	0x08031aab
 8031850:	08031aab 	.word	0x08031aab
 8031854:	08031aab 	.word	0x08031aab
 8031858:	08031aab 	.word	0x08031aab
 803185c:	08031aab 	.word	0x08031aab
 8031860:	08031aab 	.word	0x08031aab
 8031864:	08031aab 	.word	0x08031aab
 8031868:	0803189f 	.word	0x0803189f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803186c:	4b94      	ldr	r3, [pc, #592]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803186e:	681b      	ldr	r3, [r3, #0]
 8031870:	f003 0320 	and.w	r3, r3, #32
 8031874:	2b00      	cmp	r3, #0
 8031876:	d009      	beq.n	803188c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8031878:	4b91      	ldr	r3, [pc, #580]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803187a:	681b      	ldr	r3, [r3, #0]
 803187c:	08db      	lsrs	r3, r3, #3
 803187e:	f003 0303 	and.w	r3, r3, #3
 8031882:	4a90      	ldr	r2, [pc, #576]	; (8031ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8031884:	fa22 f303 	lsr.w	r3, r2, r3
 8031888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 803188a:	e111      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 803188c:	4b8d      	ldr	r3, [pc, #564]	; (8031ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 803188e:	61bb      	str	r3, [r7, #24]
    break;
 8031890:	e10e      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8031892:	4b8d      	ldr	r3, [pc, #564]	; (8031ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8031894:	61bb      	str	r3, [r7, #24]
    break;
 8031896:	e10b      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8031898:	4b8c      	ldr	r3, [pc, #560]	; (8031acc <HAL_RCC_GetSysClockFreq+0x2e0>)
 803189a:	61bb      	str	r3, [r7, #24]
    break;
 803189c:	e108      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 803189e:	4b88      	ldr	r3, [pc, #544]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80318a2:	f003 0303 	and.w	r3, r3, #3
 80318a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80318a8:	4b85      	ldr	r3, [pc, #532]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80318ac:	091b      	lsrs	r3, r3, #4
 80318ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80318b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80318b4:	4b82      	ldr	r3, [pc, #520]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80318b8:	f003 0301 	and.w	r3, r3, #1
 80318bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80318be:	4b80      	ldr	r3, [pc, #512]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80318c2:	08db      	lsrs	r3, r3, #3
 80318c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80318c8:	68fa      	ldr	r2, [r7, #12]
 80318ca:	fb02 f303 	mul.w	r3, r2, r3
 80318ce:	ee07 3a90 	vmov	s15, r3
 80318d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80318d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80318da:	693b      	ldr	r3, [r7, #16]
 80318dc:	2b00      	cmp	r3, #0
 80318de:	f000 80e1 	beq.w	8031aa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80318e2:	697b      	ldr	r3, [r7, #20]
 80318e4:	2b02      	cmp	r3, #2
 80318e6:	f000 8083 	beq.w	80319f0 <HAL_RCC_GetSysClockFreq+0x204>
 80318ea:	697b      	ldr	r3, [r7, #20]
 80318ec:	2b02      	cmp	r3, #2
 80318ee:	f200 80a1 	bhi.w	8031a34 <HAL_RCC_GetSysClockFreq+0x248>
 80318f2:	697b      	ldr	r3, [r7, #20]
 80318f4:	2b00      	cmp	r3, #0
 80318f6:	d003      	beq.n	8031900 <HAL_RCC_GetSysClockFreq+0x114>
 80318f8:	697b      	ldr	r3, [r7, #20]
 80318fa:	2b01      	cmp	r3, #1
 80318fc:	d056      	beq.n	80319ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80318fe:	e099      	b.n	8031a34 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8031900:	4b6f      	ldr	r3, [pc, #444]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031902:	681b      	ldr	r3, [r3, #0]
 8031904:	f003 0320 	and.w	r3, r3, #32
 8031908:	2b00      	cmp	r3, #0
 803190a:	d02d      	beq.n	8031968 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 803190c:	4b6c      	ldr	r3, [pc, #432]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803190e:	681b      	ldr	r3, [r3, #0]
 8031910:	08db      	lsrs	r3, r3, #3
 8031912:	f003 0303 	and.w	r3, r3, #3
 8031916:	4a6b      	ldr	r2, [pc, #428]	; (8031ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8031918:	fa22 f303 	lsr.w	r3, r2, r3
 803191c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 803191e:	687b      	ldr	r3, [r7, #4]
 8031920:	ee07 3a90 	vmov	s15, r3
 8031924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031928:	693b      	ldr	r3, [r7, #16]
 803192a:	ee07 3a90 	vmov	s15, r3
 803192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031936:	4b62      	ldr	r3, [pc, #392]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803193a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803193e:	ee07 3a90 	vmov	s15, r3
 8031942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031946:	ed97 6a02 	vldr	s12, [r7, #8]
 803194a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8031ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 803194e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803195a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8031966:	e087      	b.n	8031a78 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031968:	693b      	ldr	r3, [r7, #16]
 803196a:	ee07 3a90 	vmov	s15, r3
 803196e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031972:	eddf 6a58 	vldr	s13, [pc, #352]	; 8031ad4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8031976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803197a:	4b51      	ldr	r3, [pc, #324]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803197e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031982:	ee07 3a90 	vmov	s15, r3
 8031986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803198a:	ed97 6a02 	vldr	s12, [r7, #8]
 803198e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8031ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803199a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803199e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80319aa:	e065      	b.n	8031a78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80319ac:	693b      	ldr	r3, [r7, #16]
 80319ae:	ee07 3a90 	vmov	s15, r3
 80319b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8031ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80319ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80319be:	4b40      	ldr	r3, [pc, #256]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80319c6:	ee07 3a90 	vmov	s15, r3
 80319ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80319ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80319d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8031ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80319d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80319da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80319de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80319e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80319ee:	e043      	b.n	8031a78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80319f0:	693b      	ldr	r3, [r7, #16]
 80319f2:	ee07 3a90 	vmov	s15, r3
 80319f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8031adc <HAL_RCC_GetSysClockFreq+0x2f0>
 80319fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a02:	4b2f      	ldr	r3, [pc, #188]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a0a:	ee07 3a90 	vmov	s15, r3
 8031a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8031ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a32:	e021      	b.n	8031a78 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a34:	693b      	ldr	r3, [r7, #16]
 8031a36:	ee07 3a90 	vmov	s15, r3
 8031a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8031ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8031a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a46:	4b1e      	ldr	r3, [pc, #120]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a4e:	ee07 3a90 	vmov	s15, r3
 8031a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8031ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a76:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8031a78:	4b11      	ldr	r3, [pc, #68]	; (8031ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a7c:	0a5b      	lsrs	r3, r3, #9
 8031a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8031a82:	3301      	adds	r3, #1
 8031a84:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8031a86:	683b      	ldr	r3, [r7, #0]
 8031a88:	ee07 3a90 	vmov	s15, r3
 8031a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8031a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8031a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8031a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8031a9c:	ee17 3a90 	vmov	r3, s15
 8031aa0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8031aa2:	e005      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8031aa4:	2300      	movs	r3, #0
 8031aa6:	61bb      	str	r3, [r7, #24]
    break;
 8031aa8:	e002      	b.n	8031ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8031aaa:	4b07      	ldr	r3, [pc, #28]	; (8031ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8031aac:	61bb      	str	r3, [r7, #24]
    break;
 8031aae:	bf00      	nop
  }

  return sysclockfreq;
 8031ab0:	69bb      	ldr	r3, [r7, #24]
}
 8031ab2:	4618      	mov	r0, r3
 8031ab4:	3724      	adds	r7, #36	; 0x24
 8031ab6:	46bd      	mov	sp, r7
 8031ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031abc:	4770      	bx	lr
 8031abe:	bf00      	nop
 8031ac0:	58024400 	.word	0x58024400
 8031ac4:	03d09000 	.word	0x03d09000
 8031ac8:	003d0900 	.word	0x003d0900
 8031acc:	017d7840 	.word	0x017d7840
 8031ad0:	46000000 	.word	0x46000000
 8031ad4:	4c742400 	.word	0x4c742400
 8031ad8:	4a742400 	.word	0x4a742400
 8031adc:	4bbebc20 	.word	0x4bbebc20

08031ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031ae0:	b580      	push	{r7, lr}
 8031ae2:	b082      	sub	sp, #8
 8031ae4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8031ae6:	f7ff fe81 	bl	80317ec <HAL_RCC_GetSysClockFreq>
 8031aea:	4602      	mov	r2, r0
 8031aec:	4b10      	ldr	r3, [pc, #64]	; (8031b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8031aee:	699b      	ldr	r3, [r3, #24]
 8031af0:	0a1b      	lsrs	r3, r3, #8
 8031af2:	f003 030f 	and.w	r3, r3, #15
 8031af6:	490f      	ldr	r1, [pc, #60]	; (8031b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8031af8:	5ccb      	ldrb	r3, [r1, r3]
 8031afa:	f003 031f 	and.w	r3, r3, #31
 8031afe:	fa22 f303 	lsr.w	r3, r2, r3
 8031b02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031b04:	4b0a      	ldr	r3, [pc, #40]	; (8031b30 <HAL_RCC_GetHCLKFreq+0x50>)
 8031b06:	699b      	ldr	r3, [r3, #24]
 8031b08:	f003 030f 	and.w	r3, r3, #15
 8031b0c:	4a09      	ldr	r2, [pc, #36]	; (8031b34 <HAL_RCC_GetHCLKFreq+0x54>)
 8031b0e:	5cd3      	ldrb	r3, [r2, r3]
 8031b10:	f003 031f 	and.w	r3, r3, #31
 8031b14:	687a      	ldr	r2, [r7, #4]
 8031b16:	fa22 f303 	lsr.w	r3, r2, r3
 8031b1a:	4a07      	ldr	r2, [pc, #28]	; (8031b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8031b1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031b1e:	4a07      	ldr	r2, [pc, #28]	; (8031b3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8031b20:	687b      	ldr	r3, [r7, #4]
 8031b22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8031b24:	4b04      	ldr	r3, [pc, #16]	; (8031b38 <HAL_RCC_GetHCLKFreq+0x58>)
 8031b26:	681b      	ldr	r3, [r3, #0]
}
 8031b28:	4618      	mov	r0, r3
 8031b2a:	3708      	adds	r7, #8
 8031b2c:	46bd      	mov	sp, r7
 8031b2e:	bd80      	pop	{r7, pc}
 8031b30:	58024400 	.word	0x58024400
 8031b34:	08058508 	.word	0x08058508
 8031b38:	24000008 	.word	0x24000008
 8031b3c:	24000004 	.word	0x24000004

08031b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8031b40:	b580      	push	{r7, lr}
 8031b42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8031b44:	f7ff ffcc 	bl	8031ae0 <HAL_RCC_GetHCLKFreq>
 8031b48:	4602      	mov	r2, r0
 8031b4a:	4b06      	ldr	r3, [pc, #24]	; (8031b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8031b4c:	69db      	ldr	r3, [r3, #28]
 8031b4e:	091b      	lsrs	r3, r3, #4
 8031b50:	f003 0307 	and.w	r3, r3, #7
 8031b54:	4904      	ldr	r1, [pc, #16]	; (8031b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8031b56:	5ccb      	ldrb	r3, [r1, r3]
 8031b58:	f003 031f 	and.w	r3, r3, #31
 8031b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8031b60:	4618      	mov	r0, r3
 8031b62:	bd80      	pop	{r7, pc}
 8031b64:	58024400 	.word	0x58024400
 8031b68:	08058508 	.word	0x08058508

08031b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8031b6c:	b580      	push	{r7, lr}
 8031b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8031b70:	f7ff ffb6 	bl	8031ae0 <HAL_RCC_GetHCLKFreq>
 8031b74:	4602      	mov	r2, r0
 8031b76:	4b06      	ldr	r3, [pc, #24]	; (8031b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8031b78:	69db      	ldr	r3, [r3, #28]
 8031b7a:	0a1b      	lsrs	r3, r3, #8
 8031b7c:	f003 0307 	and.w	r3, r3, #7
 8031b80:	4904      	ldr	r1, [pc, #16]	; (8031b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8031b82:	5ccb      	ldrb	r3, [r1, r3]
 8031b84:	f003 031f 	and.w	r3, r3, #31
 8031b88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8031b8c:	4618      	mov	r0, r3
 8031b8e:	bd80      	pop	{r7, pc}
 8031b90:	58024400 	.word	0x58024400
 8031b94:	08058508 	.word	0x08058508

08031b98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8031b98:	b580      	push	{r7, lr}
 8031b9a:	b086      	sub	sp, #24
 8031b9c:	af00      	add	r7, sp, #0
 8031b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8031ba0:	2300      	movs	r3, #0
 8031ba2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8031ba4:	2300      	movs	r3, #0
 8031ba6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8031ba8:	687b      	ldr	r3, [r7, #4]
 8031baa:	681b      	ldr	r3, [r3, #0]
 8031bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031bb0:	2b00      	cmp	r3, #0
 8031bb2:	d03f      	beq.n	8031c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8031bb4:	687b      	ldr	r3, [r7, #4]
 8031bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031bbc:	d02a      	beq.n	8031c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8031bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031bc2:	d824      	bhi.n	8031c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031bc8:	d018      	beq.n	8031bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8031bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031bce:	d81e      	bhi.n	8031c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031bd0:	2b00      	cmp	r3, #0
 8031bd2:	d003      	beq.n	8031bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8031bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031bd8:	d007      	beq.n	8031bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8031bda:	e018      	b.n	8031c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031bdc:	4ba3      	ldr	r3, [pc, #652]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031be0:	4aa2      	ldr	r2, [pc, #648]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031be8:	e015      	b.n	8031c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031bea:	687b      	ldr	r3, [r7, #4]
 8031bec:	3304      	adds	r3, #4
 8031bee:	2102      	movs	r1, #2
 8031bf0:	4618      	mov	r0, r3
 8031bf2:	f001 f9d5 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031bf6:	4603      	mov	r3, r0
 8031bf8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031bfa:	e00c      	b.n	8031c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8031bfc:	687b      	ldr	r3, [r7, #4]
 8031bfe:	3324      	adds	r3, #36	; 0x24
 8031c00:	2102      	movs	r1, #2
 8031c02:	4618      	mov	r0, r3
 8031c04:	f001 fa7e 	bl	8033104 <RCCEx_PLL3_Config>
 8031c08:	4603      	mov	r3, r0
 8031c0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c0c:	e003      	b.n	8031c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031c0e:	2301      	movs	r3, #1
 8031c10:	75fb      	strb	r3, [r7, #23]
      break;
 8031c12:	e000      	b.n	8031c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8031c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c16:	7dfb      	ldrb	r3, [r7, #23]
 8031c18:	2b00      	cmp	r3, #0
 8031c1a:	d109      	bne.n	8031c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8031c1c:	4b93      	ldr	r3, [pc, #588]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8031c24:	687b      	ldr	r3, [r7, #4]
 8031c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031c28:	4990      	ldr	r1, [pc, #576]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c2a:	4313      	orrs	r3, r2
 8031c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8031c2e:	e001      	b.n	8031c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031c30:	7dfb      	ldrb	r3, [r7, #23]
 8031c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8031c34:	687b      	ldr	r3, [r7, #4]
 8031c36:	681b      	ldr	r3, [r3, #0]
 8031c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031c3c:	2b00      	cmp	r3, #0
 8031c3e:	d03d      	beq.n	8031cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8031c40:	687b      	ldr	r3, [r7, #4]
 8031c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031c44:	2b04      	cmp	r3, #4
 8031c46:	d826      	bhi.n	8031c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8031c48:	a201      	add	r2, pc, #4	; (adr r2, 8031c50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8031c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031c4e:	bf00      	nop
 8031c50:	08031c65 	.word	0x08031c65
 8031c54:	08031c73 	.word	0x08031c73
 8031c58:	08031c85 	.word	0x08031c85
 8031c5c:	08031c9d 	.word	0x08031c9d
 8031c60:	08031c9d 	.word	0x08031c9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c64:	4b81      	ldr	r3, [pc, #516]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c68:	4a80      	ldr	r2, [pc, #512]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031c70:	e015      	b.n	8031c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	3304      	adds	r3, #4
 8031c76:	2100      	movs	r1, #0
 8031c78:	4618      	mov	r0, r3
 8031c7a:	f001 f991 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031c7e:	4603      	mov	r3, r0
 8031c80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031c82:	e00c      	b.n	8031c9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031c84:	687b      	ldr	r3, [r7, #4]
 8031c86:	3324      	adds	r3, #36	; 0x24
 8031c88:	2100      	movs	r1, #0
 8031c8a:	4618      	mov	r0, r3
 8031c8c:	f001 fa3a 	bl	8033104 <RCCEx_PLL3_Config>
 8031c90:	4603      	mov	r3, r0
 8031c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031c94:	e003      	b.n	8031c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031c96:	2301      	movs	r3, #1
 8031c98:	75fb      	strb	r3, [r7, #23]
      break;
 8031c9a:	e000      	b.n	8031c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8031c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c9e:	7dfb      	ldrb	r3, [r7, #23]
 8031ca0:	2b00      	cmp	r3, #0
 8031ca2:	d109      	bne.n	8031cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8031ca4:	4b71      	ldr	r3, [pc, #452]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031ca8:	f023 0207 	bic.w	r2, r3, #7
 8031cac:	687b      	ldr	r3, [r7, #4]
 8031cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031cb0:	496e      	ldr	r1, [pc, #440]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cb2:	4313      	orrs	r3, r2
 8031cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8031cb6:	e001      	b.n	8031cbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031cb8:	7dfb      	ldrb	r3, [r7, #23]
 8031cba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8031cbc:	687b      	ldr	r3, [r7, #4]
 8031cbe:	681b      	ldr	r3, [r3, #0]
 8031cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031cc4:	2b00      	cmp	r3, #0
 8031cc6:	d042      	beq.n	8031d4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8031cc8:	687b      	ldr	r3, [r7, #4]
 8031cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031cd0:	d02b      	beq.n	8031d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8031cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031cd6:	d825      	bhi.n	8031d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8031cda:	d028      	beq.n	8031d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8031cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8031cde:	d821      	bhi.n	8031d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031ce0:	2b80      	cmp	r3, #128	; 0x80
 8031ce2:	d016      	beq.n	8031d12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8031ce4:	2b80      	cmp	r3, #128	; 0x80
 8031ce6:	d81d      	bhi.n	8031d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031ce8:	2b00      	cmp	r3, #0
 8031cea:	d002      	beq.n	8031cf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8031cec:	2b40      	cmp	r3, #64	; 0x40
 8031cee:	d007      	beq.n	8031d00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8031cf0:	e018      	b.n	8031d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031cf2:	4b5e      	ldr	r3, [pc, #376]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031cf6:	4a5d      	ldr	r2, [pc, #372]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031cfe:	e017      	b.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d00:	687b      	ldr	r3, [r7, #4]
 8031d02:	3304      	adds	r3, #4
 8031d04:	2100      	movs	r1, #0
 8031d06:	4618      	mov	r0, r3
 8031d08:	f001 f94a 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031d0c:	4603      	mov	r3, r0
 8031d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d10:	e00e      	b.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031d12:	687b      	ldr	r3, [r7, #4]
 8031d14:	3324      	adds	r3, #36	; 0x24
 8031d16:	2100      	movs	r1, #0
 8031d18:	4618      	mov	r0, r3
 8031d1a:	f001 f9f3 	bl	8033104 <RCCEx_PLL3_Config>
 8031d1e:	4603      	mov	r3, r0
 8031d20:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d22:	e005      	b.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031d24:	2301      	movs	r3, #1
 8031d26:	75fb      	strb	r3, [r7, #23]
      break;
 8031d28:	e002      	b.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d2a:	bf00      	nop
 8031d2c:	e000      	b.n	8031d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031d30:	7dfb      	ldrb	r3, [r7, #23]
 8031d32:	2b00      	cmp	r3, #0
 8031d34:	d109      	bne.n	8031d4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8031d36:	4b4d      	ldr	r3, [pc, #308]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031d3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8031d3e:	687b      	ldr	r3, [r7, #4]
 8031d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d42:	494a      	ldr	r1, [pc, #296]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d44:	4313      	orrs	r3, r2
 8031d46:	650b      	str	r3, [r1, #80]	; 0x50
 8031d48:	e001      	b.n	8031d4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031d4a:	7dfb      	ldrb	r3, [r7, #23]
 8031d4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8031d4e:	687b      	ldr	r3, [r7, #4]
 8031d50:	681b      	ldr	r3, [r3, #0]
 8031d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8031d56:	2b00      	cmp	r3, #0
 8031d58:	d049      	beq.n	8031dee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8031d5a:	687b      	ldr	r3, [r7, #4]
 8031d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031d64:	d030      	beq.n	8031dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8031d66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031d6a:	d82a      	bhi.n	8031dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031d70:	d02c      	beq.n	8031dcc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8031d72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031d76:	d824      	bhi.n	8031dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031d7c:	d018      	beq.n	8031db0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8031d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031d82:	d81e      	bhi.n	8031dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031d84:	2b00      	cmp	r3, #0
 8031d86:	d003      	beq.n	8031d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8031d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031d8c:	d007      	beq.n	8031d9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8031d8e:	e018      	b.n	8031dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031d90:	4b36      	ldr	r3, [pc, #216]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031d94:	4a35      	ldr	r2, [pc, #212]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031d9c:	e017      	b.n	8031dce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d9e:	687b      	ldr	r3, [r7, #4]
 8031da0:	3304      	adds	r3, #4
 8031da2:	2100      	movs	r1, #0
 8031da4:	4618      	mov	r0, r3
 8031da6:	f001 f8fb 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031daa:	4603      	mov	r3, r0
 8031dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031dae:	e00e      	b.n	8031dce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031db0:	687b      	ldr	r3, [r7, #4]
 8031db2:	3324      	adds	r3, #36	; 0x24
 8031db4:	2100      	movs	r1, #0
 8031db6:	4618      	mov	r0, r3
 8031db8:	f001 f9a4 	bl	8033104 <RCCEx_PLL3_Config>
 8031dbc:	4603      	mov	r3, r0
 8031dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031dc0:	e005      	b.n	8031dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031dc2:	2301      	movs	r3, #1
 8031dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8031dc6:	e002      	b.n	8031dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031dc8:	bf00      	nop
 8031dca:	e000      	b.n	8031dce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031dce:	7dfb      	ldrb	r3, [r7, #23]
 8031dd0:	2b00      	cmp	r3, #0
 8031dd2:	d10a      	bne.n	8031dea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8031dd4:	4b25      	ldr	r3, [pc, #148]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031dd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8031ddc:	687b      	ldr	r3, [r7, #4]
 8031dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031de2:	4922      	ldr	r1, [pc, #136]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031de4:	4313      	orrs	r3, r2
 8031de6:	658b      	str	r3, [r1, #88]	; 0x58
 8031de8:	e001      	b.n	8031dee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031dea:	7dfb      	ldrb	r3, [r7, #23]
 8031dec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8031dee:	687b      	ldr	r3, [r7, #4]
 8031df0:	681b      	ldr	r3, [r3, #0]
 8031df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031df6:	2b00      	cmp	r3, #0
 8031df8:	d04b      	beq.n	8031e92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8031dfa:	687b      	ldr	r3, [r7, #4]
 8031dfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e04:	d030      	beq.n	8031e68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8031e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e0a:	d82a      	bhi.n	8031e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e10:	d02e      	beq.n	8031e70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8031e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e16:	d824      	bhi.n	8031e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e1c:	d018      	beq.n	8031e50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8031e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e22:	d81e      	bhi.n	8031e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e24:	2b00      	cmp	r3, #0
 8031e26:	d003      	beq.n	8031e30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8031e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031e2c:	d007      	beq.n	8031e3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8031e2e:	e018      	b.n	8031e62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031e30:	4b0e      	ldr	r3, [pc, #56]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031e34:	4a0d      	ldr	r2, [pc, #52]	; (8031e6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e3c:	e019      	b.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031e3e:	687b      	ldr	r3, [r7, #4]
 8031e40:	3304      	adds	r3, #4
 8031e42:	2100      	movs	r1, #0
 8031e44:	4618      	mov	r0, r3
 8031e46:	f001 f8ab 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031e4a:	4603      	mov	r3, r0
 8031e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031e4e:	e010      	b.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8031e50:	687b      	ldr	r3, [r7, #4]
 8031e52:	3324      	adds	r3, #36	; 0x24
 8031e54:	2100      	movs	r1, #0
 8031e56:	4618      	mov	r0, r3
 8031e58:	f001 f954 	bl	8033104 <RCCEx_PLL3_Config>
 8031e5c:	4603      	mov	r3, r0
 8031e5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e60:	e007      	b.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031e62:	2301      	movs	r3, #1
 8031e64:	75fb      	strb	r3, [r7, #23]
      break;
 8031e66:	e004      	b.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8031e68:	bf00      	nop
 8031e6a:	e002      	b.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8031e6c:	58024400 	.word	0x58024400
      break;
 8031e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031e72:	7dfb      	ldrb	r3, [r7, #23]
 8031e74:	2b00      	cmp	r3, #0
 8031e76:	d10a      	bne.n	8031e8e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8031e78:	4b99      	ldr	r3, [pc, #612]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031e7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8031e80:	687b      	ldr	r3, [r7, #4]
 8031e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031e86:	4996      	ldr	r1, [pc, #600]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e88:	4313      	orrs	r3, r2
 8031e8a:	658b      	str	r3, [r1, #88]	; 0x58
 8031e8c:	e001      	b.n	8031e92 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031e8e:	7dfb      	ldrb	r3, [r7, #23]
 8031e90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8031e92:	687b      	ldr	r3, [r7, #4]
 8031e94:	681b      	ldr	r3, [r3, #0]
 8031e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031e9a:	2b00      	cmp	r3, #0
 8031e9c:	d032      	beq.n	8031f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8031e9e:	687b      	ldr	r3, [r7, #4]
 8031ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031ea2:	2b30      	cmp	r3, #48	; 0x30
 8031ea4:	d01c      	beq.n	8031ee0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8031ea6:	2b30      	cmp	r3, #48	; 0x30
 8031ea8:	d817      	bhi.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031eaa:	2b20      	cmp	r3, #32
 8031eac:	d00c      	beq.n	8031ec8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8031eae:	2b20      	cmp	r3, #32
 8031eb0:	d813      	bhi.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031eb2:	2b00      	cmp	r3, #0
 8031eb4:	d016      	beq.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8031eb6:	2b10      	cmp	r3, #16
 8031eb8:	d10f      	bne.n	8031eda <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031eba:	4b89      	ldr	r3, [pc, #548]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031ebe:	4a88      	ldr	r2, [pc, #544]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031ec6:	e00e      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031ec8:	687b      	ldr	r3, [r7, #4]
 8031eca:	3304      	adds	r3, #4
 8031ecc:	2102      	movs	r1, #2
 8031ece:	4618      	mov	r0, r3
 8031ed0:	f001 f866 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031ed4:	4603      	mov	r3, r0
 8031ed6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031ed8:	e005      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031eda:	2301      	movs	r3, #1
 8031edc:	75fb      	strb	r3, [r7, #23]
      break;
 8031ede:	e002      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031ee0:	bf00      	nop
 8031ee2:	e000      	b.n	8031ee6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ee6:	7dfb      	ldrb	r3, [r7, #23]
 8031ee8:	2b00      	cmp	r3, #0
 8031eea:	d109      	bne.n	8031f00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8031eec:	4b7c      	ldr	r3, [pc, #496]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8031ef4:	687b      	ldr	r3, [r7, #4]
 8031ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031ef8:	4979      	ldr	r1, [pc, #484]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031efa:	4313      	orrs	r3, r2
 8031efc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031efe:	e001      	b.n	8031f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f00:	7dfb      	ldrb	r3, [r7, #23]
 8031f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8031f04:	687b      	ldr	r3, [r7, #4]
 8031f06:	681b      	ldr	r3, [r3, #0]
 8031f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d047      	beq.n	8031fa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8031f10:	687b      	ldr	r3, [r7, #4]
 8031f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f18:	d030      	beq.n	8031f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8031f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f1e:	d82a      	bhi.n	8031f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f24:	d02c      	beq.n	8031f80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8031f26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f2a:	d824      	bhi.n	8031f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f30:	d018      	beq.n	8031f64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8031f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f36:	d81e      	bhi.n	8031f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f38:	2b00      	cmp	r3, #0
 8031f3a:	d003      	beq.n	8031f44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8031f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031f40:	d007      	beq.n	8031f52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8031f42:	e018      	b.n	8031f76 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031f44:	4b66      	ldr	r3, [pc, #408]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031f48:	4a65      	ldr	r2, [pc, #404]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031f50:	e017      	b.n	8031f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031f52:	687b      	ldr	r3, [r7, #4]
 8031f54:	3304      	adds	r3, #4
 8031f56:	2100      	movs	r1, #0
 8031f58:	4618      	mov	r0, r3
 8031f5a:	f001 f821 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031f5e:	4603      	mov	r3, r0
 8031f60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031f62:	e00e      	b.n	8031f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031f64:	687b      	ldr	r3, [r7, #4]
 8031f66:	3324      	adds	r3, #36	; 0x24
 8031f68:	2100      	movs	r1, #0
 8031f6a:	4618      	mov	r0, r3
 8031f6c:	f001 f8ca 	bl	8033104 <RCCEx_PLL3_Config>
 8031f70:	4603      	mov	r3, r0
 8031f72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031f74:	e005      	b.n	8031f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031f76:	2301      	movs	r3, #1
 8031f78:	75fb      	strb	r3, [r7, #23]
      break;
 8031f7a:	e002      	b.n	8031f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031f7c:	bf00      	nop
 8031f7e:	e000      	b.n	8031f82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031f82:	7dfb      	ldrb	r3, [r7, #23]
 8031f84:	2b00      	cmp	r3, #0
 8031f86:	d109      	bne.n	8031f9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8031f88:	4b55      	ldr	r3, [pc, #340]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031f8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8031f90:	687b      	ldr	r3, [r7, #4]
 8031f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031f94:	4952      	ldr	r1, [pc, #328]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f96:	4313      	orrs	r3, r2
 8031f98:	650b      	str	r3, [r1, #80]	; 0x50
 8031f9a:	e001      	b.n	8031fa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f9c:	7dfb      	ldrb	r3, [r7, #23]
 8031f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8031fa0:	687b      	ldr	r3, [r7, #4]
 8031fa2:	681b      	ldr	r3, [r3, #0]
 8031fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031fa8:	2b00      	cmp	r3, #0
 8031faa:	d049      	beq.n	8032040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8031fac:	687b      	ldr	r3, [r7, #4]
 8031fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031fb4:	d02e      	beq.n	8032014 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8031fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031fba:	d828      	bhi.n	803200e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031fc0:	d02a      	beq.n	8032018 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8031fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031fc6:	d822      	bhi.n	803200e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031fc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031fcc:	d026      	beq.n	803201c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8031fce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031fd2:	d81c      	bhi.n	803200e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031fd8:	d010      	beq.n	8031ffc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8031fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031fde:	d816      	bhi.n	803200e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031fe0:	2b00      	cmp	r3, #0
 8031fe2:	d01d      	beq.n	8032020 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8031fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8031fe8:	d111      	bne.n	803200e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031fea:	687b      	ldr	r3, [r7, #4]
 8031fec:	3304      	adds	r3, #4
 8031fee:	2101      	movs	r1, #1
 8031ff0:	4618      	mov	r0, r3
 8031ff2:	f000 ffd5 	bl	8032fa0 <RCCEx_PLL2_Config>
 8031ff6:	4603      	mov	r3, r0
 8031ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8031ffa:	e012      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8031ffc:	687b      	ldr	r3, [r7, #4]
 8031ffe:	3324      	adds	r3, #36	; 0x24
 8032000:	2101      	movs	r1, #1
 8032002:	4618      	mov	r0, r3
 8032004:	f001 f87e 	bl	8033104 <RCCEx_PLL3_Config>
 8032008:	4603      	mov	r3, r0
 803200a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803200c:	e009      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803200e:	2301      	movs	r3, #1
 8032010:	75fb      	strb	r3, [r7, #23]
      break;
 8032012:	e006      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032014:	bf00      	nop
 8032016:	e004      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032018:	bf00      	nop
 803201a:	e002      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 803201c:	bf00      	nop
 803201e:	e000      	b.n	8032022 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032022:	7dfb      	ldrb	r3, [r7, #23]
 8032024:	2b00      	cmp	r3, #0
 8032026:	d109      	bne.n	803203c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8032028:	4b2d      	ldr	r3, [pc, #180]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803202c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8032030:	687b      	ldr	r3, [r7, #4]
 8032032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8032034:	492a      	ldr	r1, [pc, #168]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032036:	4313      	orrs	r3, r2
 8032038:	650b      	str	r3, [r1, #80]	; 0x50
 803203a:	e001      	b.n	8032040 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803203c:	7dfb      	ldrb	r3, [r7, #23]
 803203e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8032040:	687b      	ldr	r3, [r7, #4]
 8032042:	681b      	ldr	r3, [r3, #0]
 8032044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8032048:	2b00      	cmp	r3, #0
 803204a:	d04d      	beq.n	80320e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 803204c:	687b      	ldr	r3, [r7, #4]
 803204e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8032052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032056:	d02e      	beq.n	80320b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8032058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803205c:	d828      	bhi.n	80320b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 803205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032062:	d02a      	beq.n	80320ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8032064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032068:	d822      	bhi.n	80320b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 803206a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803206e:	d026      	beq.n	80320be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8032070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032074:	d81c      	bhi.n	80320b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8032076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803207a:	d010      	beq.n	803209e <HAL_RCCEx_PeriphCLKConfig+0x506>
 803207c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032080:	d816      	bhi.n	80320b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8032082:	2b00      	cmp	r3, #0
 8032084:	d01d      	beq.n	80320c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8032086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803208a:	d111      	bne.n	80320b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803208c:	687b      	ldr	r3, [r7, #4]
 803208e:	3304      	adds	r3, #4
 8032090:	2101      	movs	r1, #1
 8032092:	4618      	mov	r0, r3
 8032094:	f000 ff84 	bl	8032fa0 <RCCEx_PLL2_Config>
 8032098:	4603      	mov	r3, r0
 803209a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803209c:	e012      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803209e:	687b      	ldr	r3, [r7, #4]
 80320a0:	3324      	adds	r3, #36	; 0x24
 80320a2:	2101      	movs	r1, #1
 80320a4:	4618      	mov	r0, r3
 80320a6:	f001 f82d 	bl	8033104 <RCCEx_PLL3_Config>
 80320aa:	4603      	mov	r3, r0
 80320ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80320ae:	e009      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80320b0:	2301      	movs	r3, #1
 80320b2:	75fb      	strb	r3, [r7, #23]
      break;
 80320b4:	e006      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320b6:	bf00      	nop
 80320b8:	e004      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320ba:	bf00      	nop
 80320bc:	e002      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320be:	bf00      	nop
 80320c0:	e000      	b.n	80320c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80320c4:	7dfb      	ldrb	r3, [r7, #23]
 80320c6:	2b00      	cmp	r3, #0
 80320c8:	d10c      	bne.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80320ca:	4b05      	ldr	r3, [pc, #20]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80320cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80320ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80320d2:	687b      	ldr	r3, [r7, #4]
 80320d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80320d8:	4901      	ldr	r1, [pc, #4]	; (80320e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80320da:	4313      	orrs	r3, r2
 80320dc:	658b      	str	r3, [r1, #88]	; 0x58
 80320de:	e003      	b.n	80320e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80320e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80320e4:	7dfb      	ldrb	r3, [r7, #23]
 80320e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80320e8:	687b      	ldr	r3, [r7, #4]
 80320ea:	681b      	ldr	r3, [r3, #0]
 80320ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80320f0:	2b00      	cmp	r3, #0
 80320f2:	d02f      	beq.n	8032154 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80320f4:	687b      	ldr	r3, [r7, #4]
 80320f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80320f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80320fc:	d00e      	beq.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80320fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032102:	d814      	bhi.n	803212e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8032104:	2b00      	cmp	r3, #0
 8032106:	d015      	beq.n	8032134 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8032108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803210c:	d10f      	bne.n	803212e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803210e:	4baf      	ldr	r3, [pc, #700]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032112:	4aae      	ldr	r2, [pc, #696]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803211a:	e00c      	b.n	8032136 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803211c:	687b      	ldr	r3, [r7, #4]
 803211e:	3304      	adds	r3, #4
 8032120:	2101      	movs	r1, #1
 8032122:	4618      	mov	r0, r3
 8032124:	f000 ff3c 	bl	8032fa0 <RCCEx_PLL2_Config>
 8032128:	4603      	mov	r3, r0
 803212a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803212c:	e003      	b.n	8032136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803212e:	2301      	movs	r3, #1
 8032130:	75fb      	strb	r3, [r7, #23]
      break;
 8032132:	e000      	b.n	8032136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8032134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032136:	7dfb      	ldrb	r3, [r7, #23]
 8032138:	2b00      	cmp	r3, #0
 803213a:	d109      	bne.n	8032150 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 803213c:	4ba3      	ldr	r3, [pc, #652]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032140:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032144:	687b      	ldr	r3, [r7, #4]
 8032146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8032148:	49a0      	ldr	r1, [pc, #640]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803214a:	4313      	orrs	r3, r2
 803214c:	650b      	str	r3, [r1, #80]	; 0x50
 803214e:	e001      	b.n	8032154 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032150:	7dfb      	ldrb	r3, [r7, #23]
 8032152:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8032154:	687b      	ldr	r3, [r7, #4]
 8032156:	681b      	ldr	r3, [r3, #0]
 8032158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803215c:	2b00      	cmp	r3, #0
 803215e:	d032      	beq.n	80321c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8032160:	687b      	ldr	r3, [r7, #4]
 8032162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032164:	2b03      	cmp	r3, #3
 8032166:	d81b      	bhi.n	80321a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8032168:	a201      	add	r2, pc, #4	; (adr r2, 8032170 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 803216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803216e:	bf00      	nop
 8032170:	080321a7 	.word	0x080321a7
 8032174:	08032181 	.word	0x08032181
 8032178:	0803218f 	.word	0x0803218f
 803217c:	080321a7 	.word	0x080321a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032180:	4b92      	ldr	r3, [pc, #584]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032184:	4a91      	ldr	r2, [pc, #580]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803218a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 803218c:	e00c      	b.n	80321a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803218e:	687b      	ldr	r3, [r7, #4]
 8032190:	3304      	adds	r3, #4
 8032192:	2102      	movs	r1, #2
 8032194:	4618      	mov	r0, r3
 8032196:	f000 ff03 	bl	8032fa0 <RCCEx_PLL2_Config>
 803219a:	4603      	mov	r3, r0
 803219c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 803219e:	e003      	b.n	80321a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80321a0:	2301      	movs	r3, #1
 80321a2:	75fb      	strb	r3, [r7, #23]
      break;
 80321a4:	e000      	b.n	80321a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80321a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80321a8:	7dfb      	ldrb	r3, [r7, #23]
 80321aa:	2b00      	cmp	r3, #0
 80321ac:	d109      	bne.n	80321c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80321ae:	4b87      	ldr	r3, [pc, #540]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80321b2:	f023 0203 	bic.w	r2, r3, #3
 80321b6:	687b      	ldr	r3, [r7, #4]
 80321b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80321ba:	4984      	ldr	r1, [pc, #528]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321bc:	4313      	orrs	r3, r2
 80321be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80321c0:	e001      	b.n	80321c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80321c2:	7dfb      	ldrb	r3, [r7, #23]
 80321c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80321c6:	687b      	ldr	r3, [r7, #4]
 80321c8:	681b      	ldr	r3, [r3, #0]
 80321ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80321ce:	2b00      	cmp	r3, #0
 80321d0:	f000 8086 	beq.w	80322e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80321d4:	4b7e      	ldr	r3, [pc, #504]	; (80323d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80321d6:	681b      	ldr	r3, [r3, #0]
 80321d8:	4a7d      	ldr	r2, [pc, #500]	; (80323d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80321da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80321de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80321e0:	f7f8 fd38 	bl	802ac54 <HAL_GetTick>
 80321e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80321e6:	e009      	b.n	80321fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80321e8:	f7f8 fd34 	bl	802ac54 <HAL_GetTick>
 80321ec:	4602      	mov	r2, r0
 80321ee:	693b      	ldr	r3, [r7, #16]
 80321f0:	1ad3      	subs	r3, r2, r3
 80321f2:	2b64      	cmp	r3, #100	; 0x64
 80321f4:	d902      	bls.n	80321fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80321f6:	2303      	movs	r3, #3
 80321f8:	75fb      	strb	r3, [r7, #23]
        break;
 80321fa:	e005      	b.n	8032208 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80321fc:	4b74      	ldr	r3, [pc, #464]	; (80323d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80321fe:	681b      	ldr	r3, [r3, #0]
 8032200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032204:	2b00      	cmp	r3, #0
 8032206:	d0ef      	beq.n	80321e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8032208:	7dfb      	ldrb	r3, [r7, #23]
 803220a:	2b00      	cmp	r3, #0
 803220c:	d166      	bne.n	80322dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 803220e:	4b6f      	ldr	r3, [pc, #444]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032210:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8032212:	687b      	ldr	r3, [r7, #4]
 8032214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032218:	4053      	eors	r3, r2
 803221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803221e:	2b00      	cmp	r3, #0
 8032220:	d013      	beq.n	803224a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8032222:	4b6a      	ldr	r3, [pc, #424]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803222a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 803222c:	4b67      	ldr	r3, [pc, #412]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032230:	4a66      	ldr	r2, [pc, #408]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032236:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8032238:	4b64      	ldr	r3, [pc, #400]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803223c:	4a63      	ldr	r2, [pc, #396]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8032242:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8032244:	4a61      	ldr	r2, [pc, #388]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032246:	68fb      	ldr	r3, [r7, #12]
 8032248:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 803224a:	687b      	ldr	r3, [r7, #4]
 803224c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032254:	d115      	bne.n	8032282 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032256:	f7f8 fcfd 	bl	802ac54 <HAL_GetTick>
 803225a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803225c:	e00b      	b.n	8032276 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 803225e:	f7f8 fcf9 	bl	802ac54 <HAL_GetTick>
 8032262:	4602      	mov	r2, r0
 8032264:	693b      	ldr	r3, [r7, #16]
 8032266:	1ad3      	subs	r3, r2, r3
 8032268:	f241 3288 	movw	r2, #5000	; 0x1388
 803226c:	4293      	cmp	r3, r2
 803226e:	d902      	bls.n	8032276 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8032270:	2303      	movs	r3, #3
 8032272:	75fb      	strb	r3, [r7, #23]
            break;
 8032274:	e005      	b.n	8032282 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8032276:	4b55      	ldr	r3, [pc, #340]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803227a:	f003 0302 	and.w	r3, r3, #2
 803227e:	2b00      	cmp	r3, #0
 8032280:	d0ed      	beq.n	803225e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8032282:	7dfb      	ldrb	r3, [r7, #23]
 8032284:	2b00      	cmp	r3, #0
 8032286:	d126      	bne.n	80322d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8032288:	687b      	ldr	r3, [r7, #4]
 803228a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8032292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032296:	d10d      	bne.n	80322b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8032298:	4b4c      	ldr	r3, [pc, #304]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803229a:	691b      	ldr	r3, [r3, #16]
 803229c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80322a0:	687b      	ldr	r3, [r7, #4]
 80322a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322a6:	0919      	lsrs	r1, r3, #4
 80322a8:	4b4a      	ldr	r3, [pc, #296]	; (80323d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80322aa:	400b      	ands	r3, r1
 80322ac:	4947      	ldr	r1, [pc, #284]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ae:	4313      	orrs	r3, r2
 80322b0:	610b      	str	r3, [r1, #16]
 80322b2:	e005      	b.n	80322c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80322b4:	4b45      	ldr	r3, [pc, #276]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322b6:	691b      	ldr	r3, [r3, #16]
 80322b8:	4a44      	ldr	r2, [pc, #272]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80322be:	6113      	str	r3, [r2, #16]
 80322c0:	4b42      	ldr	r3, [pc, #264]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80322c4:	687b      	ldr	r3, [r7, #4]
 80322c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80322ce:	493f      	ldr	r1, [pc, #252]	; (80323cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322d0:	4313      	orrs	r3, r2
 80322d2:	670b      	str	r3, [r1, #112]	; 0x70
 80322d4:	e004      	b.n	80322e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80322d6:	7dfb      	ldrb	r3, [r7, #23]
 80322d8:	75bb      	strb	r3, [r7, #22]
 80322da:	e001      	b.n	80322e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80322dc:	7dfb      	ldrb	r3, [r7, #23]
 80322de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80322e0:	687b      	ldr	r3, [r7, #4]
 80322e2:	681b      	ldr	r3, [r3, #0]
 80322e4:	f003 0301 	and.w	r3, r3, #1
 80322e8:	2b00      	cmp	r3, #0
 80322ea:	f000 8085 	beq.w	80323f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80322ee:	687b      	ldr	r3, [r7, #4]
 80322f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80322f2:	2b28      	cmp	r3, #40	; 0x28
 80322f4:	d866      	bhi.n	80323c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80322f6:	a201      	add	r2, pc, #4	; (adr r2, 80322fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80322f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80322fc:	080323d9 	.word	0x080323d9
 8032300:	080323c5 	.word	0x080323c5
 8032304:	080323c5 	.word	0x080323c5
 8032308:	080323c5 	.word	0x080323c5
 803230c:	080323c5 	.word	0x080323c5
 8032310:	080323c5 	.word	0x080323c5
 8032314:	080323c5 	.word	0x080323c5
 8032318:	080323c5 	.word	0x080323c5
 803231c:	080323a1 	.word	0x080323a1
 8032320:	080323c5 	.word	0x080323c5
 8032324:	080323c5 	.word	0x080323c5
 8032328:	080323c5 	.word	0x080323c5
 803232c:	080323c5 	.word	0x080323c5
 8032330:	080323c5 	.word	0x080323c5
 8032334:	080323c5 	.word	0x080323c5
 8032338:	080323c5 	.word	0x080323c5
 803233c:	080323b3 	.word	0x080323b3
 8032340:	080323c5 	.word	0x080323c5
 8032344:	080323c5 	.word	0x080323c5
 8032348:	080323c5 	.word	0x080323c5
 803234c:	080323c5 	.word	0x080323c5
 8032350:	080323c5 	.word	0x080323c5
 8032354:	080323c5 	.word	0x080323c5
 8032358:	080323c5 	.word	0x080323c5
 803235c:	080323d9 	.word	0x080323d9
 8032360:	080323c5 	.word	0x080323c5
 8032364:	080323c5 	.word	0x080323c5
 8032368:	080323c5 	.word	0x080323c5
 803236c:	080323c5 	.word	0x080323c5
 8032370:	080323c5 	.word	0x080323c5
 8032374:	080323c5 	.word	0x080323c5
 8032378:	080323c5 	.word	0x080323c5
 803237c:	080323d9 	.word	0x080323d9
 8032380:	080323c5 	.word	0x080323c5
 8032384:	080323c5 	.word	0x080323c5
 8032388:	080323c5 	.word	0x080323c5
 803238c:	080323c5 	.word	0x080323c5
 8032390:	080323c5 	.word	0x080323c5
 8032394:	080323c5 	.word	0x080323c5
 8032398:	080323c5 	.word	0x080323c5
 803239c:	080323d9 	.word	0x080323d9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80323a0:	687b      	ldr	r3, [r7, #4]
 80323a2:	3304      	adds	r3, #4
 80323a4:	2101      	movs	r1, #1
 80323a6:	4618      	mov	r0, r3
 80323a8:	f000 fdfa 	bl	8032fa0 <RCCEx_PLL2_Config>
 80323ac:	4603      	mov	r3, r0
 80323ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80323b0:	e013      	b.n	80323da <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80323b2:	687b      	ldr	r3, [r7, #4]
 80323b4:	3324      	adds	r3, #36	; 0x24
 80323b6:	2101      	movs	r1, #1
 80323b8:	4618      	mov	r0, r3
 80323ba:	f000 fea3 	bl	8033104 <RCCEx_PLL3_Config>
 80323be:	4603      	mov	r3, r0
 80323c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80323c2:	e00a      	b.n	80323da <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80323c4:	2301      	movs	r3, #1
 80323c6:	75fb      	strb	r3, [r7, #23]
      break;
 80323c8:	e007      	b.n	80323da <HAL_RCCEx_PeriphCLKConfig+0x842>
 80323ca:	bf00      	nop
 80323cc:	58024400 	.word	0x58024400
 80323d0:	58024800 	.word	0x58024800
 80323d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80323d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80323da:	7dfb      	ldrb	r3, [r7, #23]
 80323dc:	2b00      	cmp	r3, #0
 80323de:	d109      	bne.n	80323f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80323e0:	4b96      	ldr	r3, [pc, #600]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80323e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80323e8:	687b      	ldr	r3, [r7, #4]
 80323ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80323ec:	4993      	ldr	r1, [pc, #588]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323ee:	4313      	orrs	r3, r2
 80323f0:	654b      	str	r3, [r1, #84]	; 0x54
 80323f2:	e001      	b.n	80323f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80323f4:	7dfb      	ldrb	r3, [r7, #23]
 80323f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80323f8:	687b      	ldr	r3, [r7, #4]
 80323fa:	681b      	ldr	r3, [r3, #0]
 80323fc:	f003 0302 	and.w	r3, r3, #2
 8032400:	2b00      	cmp	r3, #0
 8032402:	d038      	beq.n	8032476 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8032404:	687b      	ldr	r3, [r7, #4]
 8032406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032408:	2b05      	cmp	r3, #5
 803240a:	d821      	bhi.n	8032450 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 803240c:	a201      	add	r2, pc, #4	; (adr r2, 8032414 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 803240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032412:	bf00      	nop
 8032414:	08032457 	.word	0x08032457
 8032418:	0803242d 	.word	0x0803242d
 803241c:	0803243f 	.word	0x0803243f
 8032420:	08032457 	.word	0x08032457
 8032424:	08032457 	.word	0x08032457
 8032428:	08032457 	.word	0x08032457
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803242c:	687b      	ldr	r3, [r7, #4]
 803242e:	3304      	adds	r3, #4
 8032430:	2101      	movs	r1, #1
 8032432:	4618      	mov	r0, r3
 8032434:	f000 fdb4 	bl	8032fa0 <RCCEx_PLL2_Config>
 8032438:	4603      	mov	r3, r0
 803243a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 803243c:	e00c      	b.n	8032458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803243e:	687b      	ldr	r3, [r7, #4]
 8032440:	3324      	adds	r3, #36	; 0x24
 8032442:	2101      	movs	r1, #1
 8032444:	4618      	mov	r0, r3
 8032446:	f000 fe5d 	bl	8033104 <RCCEx_PLL3_Config>
 803244a:	4603      	mov	r3, r0
 803244c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 803244e:	e003      	b.n	8032458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032450:	2301      	movs	r3, #1
 8032452:	75fb      	strb	r3, [r7, #23]
      break;
 8032454:	e000      	b.n	8032458 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8032456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032458:	7dfb      	ldrb	r3, [r7, #23]
 803245a:	2b00      	cmp	r3, #0
 803245c:	d109      	bne.n	8032472 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 803245e:	4b77      	ldr	r3, [pc, #476]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032462:	f023 0207 	bic.w	r2, r3, #7
 8032466:	687b      	ldr	r3, [r7, #4]
 8032468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803246a:	4974      	ldr	r1, [pc, #464]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803246c:	4313      	orrs	r3, r2
 803246e:	654b      	str	r3, [r1, #84]	; 0x54
 8032470:	e001      	b.n	8032476 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032472:	7dfb      	ldrb	r3, [r7, #23]
 8032474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8032476:	687b      	ldr	r3, [r7, #4]
 8032478:	681b      	ldr	r3, [r3, #0]
 803247a:	f003 0304 	and.w	r3, r3, #4
 803247e:	2b00      	cmp	r3, #0
 8032480:	d03a      	beq.n	80324f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8032482:	687b      	ldr	r3, [r7, #4]
 8032484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8032488:	2b05      	cmp	r3, #5
 803248a:	d821      	bhi.n	80324d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 803248c:	a201      	add	r2, pc, #4	; (adr r2, 8032494 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 803248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032492:	bf00      	nop
 8032494:	080324d7 	.word	0x080324d7
 8032498:	080324ad 	.word	0x080324ad
 803249c:	080324bf 	.word	0x080324bf
 80324a0:	080324d7 	.word	0x080324d7
 80324a4:	080324d7 	.word	0x080324d7
 80324a8:	080324d7 	.word	0x080324d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80324ac:	687b      	ldr	r3, [r7, #4]
 80324ae:	3304      	adds	r3, #4
 80324b0:	2101      	movs	r1, #1
 80324b2:	4618      	mov	r0, r3
 80324b4:	f000 fd74 	bl	8032fa0 <RCCEx_PLL2_Config>
 80324b8:	4603      	mov	r3, r0
 80324ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80324bc:	e00c      	b.n	80324d8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80324be:	687b      	ldr	r3, [r7, #4]
 80324c0:	3324      	adds	r3, #36	; 0x24
 80324c2:	2101      	movs	r1, #1
 80324c4:	4618      	mov	r0, r3
 80324c6:	f000 fe1d 	bl	8033104 <RCCEx_PLL3_Config>
 80324ca:	4603      	mov	r3, r0
 80324cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80324ce:	e003      	b.n	80324d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80324d0:	2301      	movs	r3, #1
 80324d2:	75fb      	strb	r3, [r7, #23]
      break;
 80324d4:	e000      	b.n	80324d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80324d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80324d8:	7dfb      	ldrb	r3, [r7, #23]
 80324da:	2b00      	cmp	r3, #0
 80324dc:	d10a      	bne.n	80324f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80324de:	4b57      	ldr	r3, [pc, #348]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80324e2:	f023 0207 	bic.w	r2, r3, #7
 80324e6:	687b      	ldr	r3, [r7, #4]
 80324e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80324ec:	4953      	ldr	r1, [pc, #332]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324ee:	4313      	orrs	r3, r2
 80324f0:	658b      	str	r3, [r1, #88]	; 0x58
 80324f2:	e001      	b.n	80324f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80324f4:	7dfb      	ldrb	r3, [r7, #23]
 80324f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80324f8:	687b      	ldr	r3, [r7, #4]
 80324fa:	681b      	ldr	r3, [r3, #0]
 80324fc:	f003 0320 	and.w	r3, r3, #32
 8032500:	2b00      	cmp	r3, #0
 8032502:	d04b      	beq.n	803259c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8032504:	687b      	ldr	r3, [r7, #4]
 8032506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803250e:	d02e      	beq.n	803256e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8032510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032514:	d828      	bhi.n	8032568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803251a:	d02a      	beq.n	8032572 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 803251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032520:	d822      	bhi.n	8032568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032526:	d026      	beq.n	8032576 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8032528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803252c:	d81c      	bhi.n	8032568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803252e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032532:	d010      	beq.n	8032556 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8032534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032538:	d816      	bhi.n	8032568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803253a:	2b00      	cmp	r3, #0
 803253c:	d01d      	beq.n	803257a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 803253e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032542:	d111      	bne.n	8032568 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032544:	687b      	ldr	r3, [r7, #4]
 8032546:	3304      	adds	r3, #4
 8032548:	2100      	movs	r1, #0
 803254a:	4618      	mov	r0, r3
 803254c:	f000 fd28 	bl	8032fa0 <RCCEx_PLL2_Config>
 8032550:	4603      	mov	r3, r0
 8032552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8032554:	e012      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8032556:	687b      	ldr	r3, [r7, #4]
 8032558:	3324      	adds	r3, #36	; 0x24
 803255a:	2102      	movs	r1, #2
 803255c:	4618      	mov	r0, r3
 803255e:	f000 fdd1 	bl	8033104 <RCCEx_PLL3_Config>
 8032562:	4603      	mov	r3, r0
 8032564:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8032566:	e009      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032568:	2301      	movs	r3, #1
 803256a:	75fb      	strb	r3, [r7, #23]
      break;
 803256c:	e006      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 803256e:	bf00      	nop
 8032570:	e004      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8032572:	bf00      	nop
 8032574:	e002      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8032576:	bf00      	nop
 8032578:	e000      	b.n	803257c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 803257a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803257c:	7dfb      	ldrb	r3, [r7, #23]
 803257e:	2b00      	cmp	r3, #0
 8032580:	d10a      	bne.n	8032598 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8032582:	4b2e      	ldr	r3, [pc, #184]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032586:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 803258a:	687b      	ldr	r3, [r7, #4]
 803258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8032590:	492a      	ldr	r1, [pc, #168]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032592:	4313      	orrs	r3, r2
 8032594:	654b      	str	r3, [r1, #84]	; 0x54
 8032596:	e001      	b.n	803259c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032598:	7dfb      	ldrb	r3, [r7, #23]
 803259a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 803259c:	687b      	ldr	r3, [r7, #4]
 803259e:	681b      	ldr	r3, [r3, #0]
 80325a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80325a4:	2b00      	cmp	r3, #0
 80325a6:	d04d      	beq.n	8032644 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80325a8:	687b      	ldr	r3, [r7, #4]
 80325aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80325ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80325b2:	d02e      	beq.n	8032612 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80325b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80325b8:	d828      	bhi.n	803260c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80325be:	d02a      	beq.n	8032616 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80325c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80325c4:	d822      	bhi.n	803260c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80325ca:	d026      	beq.n	803261a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80325cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80325d0:	d81c      	bhi.n	803260c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80325d6:	d010      	beq.n	80325fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80325d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80325dc:	d816      	bhi.n	803260c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325de:	2b00      	cmp	r3, #0
 80325e0:	d01d      	beq.n	803261e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80325e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80325e6:	d111      	bne.n	803260c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80325e8:	687b      	ldr	r3, [r7, #4]
 80325ea:	3304      	adds	r3, #4
 80325ec:	2100      	movs	r1, #0
 80325ee:	4618      	mov	r0, r3
 80325f0:	f000 fcd6 	bl	8032fa0 <RCCEx_PLL2_Config>
 80325f4:	4603      	mov	r3, r0
 80325f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80325f8:	e012      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80325fa:	687b      	ldr	r3, [r7, #4]
 80325fc:	3324      	adds	r3, #36	; 0x24
 80325fe:	2102      	movs	r1, #2
 8032600:	4618      	mov	r0, r3
 8032602:	f000 fd7f 	bl	8033104 <RCCEx_PLL3_Config>
 8032606:	4603      	mov	r3, r0
 8032608:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803260a:	e009      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803260c:	2301      	movs	r3, #1
 803260e:	75fb      	strb	r3, [r7, #23]
      break;
 8032610:	e006      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032612:	bf00      	nop
 8032614:	e004      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032616:	bf00      	nop
 8032618:	e002      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803261a:	bf00      	nop
 803261c:	e000      	b.n	8032620 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803261e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032620:	7dfb      	ldrb	r3, [r7, #23]
 8032622:	2b00      	cmp	r3, #0
 8032624:	d10c      	bne.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8032626:	4b05      	ldr	r3, [pc, #20]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803262a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 803262e:	687b      	ldr	r3, [r7, #4]
 8032630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032634:	4901      	ldr	r1, [pc, #4]	; (803263c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032636:	4313      	orrs	r3, r2
 8032638:	658b      	str	r3, [r1, #88]	; 0x58
 803263a:	e003      	b.n	8032644 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 803263c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032640:	7dfb      	ldrb	r3, [r7, #23]
 8032642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8032644:	687b      	ldr	r3, [r7, #4]
 8032646:	681b      	ldr	r3, [r3, #0]
 8032648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803264c:	2b00      	cmp	r3, #0
 803264e:	d04b      	beq.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8032650:	687b      	ldr	r3, [r7, #4]
 8032652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8032656:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 803265a:	d02e      	beq.n	80326ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 803265c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8032660:	d828      	bhi.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8032662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8032666:	d02a      	beq.n	80326be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8032668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803266c:	d822      	bhi.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 803266e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8032672:	d026      	beq.n	80326c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8032674:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8032678:	d81c      	bhi.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 803267a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803267e:	d010      	beq.n	80326a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8032680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8032684:	d816      	bhi.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8032686:	2b00      	cmp	r3, #0
 8032688:	d01d      	beq.n	80326c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 803268a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803268e:	d111      	bne.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032690:	687b      	ldr	r3, [r7, #4]
 8032692:	3304      	adds	r3, #4
 8032694:	2100      	movs	r1, #0
 8032696:	4618      	mov	r0, r3
 8032698:	f000 fc82 	bl	8032fa0 <RCCEx_PLL2_Config>
 803269c:	4603      	mov	r3, r0
 803269e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80326a0:	e012      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80326a2:	687b      	ldr	r3, [r7, #4]
 80326a4:	3324      	adds	r3, #36	; 0x24
 80326a6:	2102      	movs	r1, #2
 80326a8:	4618      	mov	r0, r3
 80326aa:	f000 fd2b 	bl	8033104 <RCCEx_PLL3_Config>
 80326ae:	4603      	mov	r3, r0
 80326b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80326b2:	e009      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80326b4:	2301      	movs	r3, #1
 80326b6:	75fb      	strb	r3, [r7, #23]
      break;
 80326b8:	e006      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326ba:	bf00      	nop
 80326bc:	e004      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326be:	bf00      	nop
 80326c0:	e002      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326c2:	bf00      	nop
 80326c4:	e000      	b.n	80326c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80326c8:	7dfb      	ldrb	r3, [r7, #23]
 80326ca:	2b00      	cmp	r3, #0
 80326cc:	d10a      	bne.n	80326e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80326ce:	4b9d      	ldr	r3, [pc, #628]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80326d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80326d6:	687b      	ldr	r3, [r7, #4]
 80326d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80326dc:	4999      	ldr	r1, [pc, #612]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326de:	4313      	orrs	r3, r2
 80326e0:	658b      	str	r3, [r1, #88]	; 0x58
 80326e2:	e001      	b.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80326e4:	7dfb      	ldrb	r3, [r7, #23]
 80326e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80326e8:	687b      	ldr	r3, [r7, #4]
 80326ea:	681b      	ldr	r3, [r3, #0]
 80326ec:	f003 0308 	and.w	r3, r3, #8
 80326f0:	2b00      	cmp	r3, #0
 80326f2:	d01a      	beq.n	803272a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80326f4:	687b      	ldr	r3, [r7, #4]
 80326f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80326fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80326fe:	d10a      	bne.n	8032716 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032700:	687b      	ldr	r3, [r7, #4]
 8032702:	3324      	adds	r3, #36	; 0x24
 8032704:	2102      	movs	r1, #2
 8032706:	4618      	mov	r0, r3
 8032708:	f000 fcfc 	bl	8033104 <RCCEx_PLL3_Config>
 803270c:	4603      	mov	r3, r0
 803270e:	2b00      	cmp	r3, #0
 8032710:	d001      	beq.n	8032716 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8032712:	2301      	movs	r3, #1
 8032714:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8032716:	4b8b      	ldr	r3, [pc, #556]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803271a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 803271e:	687b      	ldr	r3, [r7, #4]
 8032720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8032724:	4987      	ldr	r1, [pc, #540]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032726:	4313      	orrs	r3, r2
 8032728:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 803272a:	687b      	ldr	r3, [r7, #4]
 803272c:	681b      	ldr	r3, [r3, #0]
 803272e:	f003 0310 	and.w	r3, r3, #16
 8032732:	2b00      	cmp	r3, #0
 8032734:	d01a      	beq.n	803276c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8032736:	687b      	ldr	r3, [r7, #4]
 8032738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803273c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032740:	d10a      	bne.n	8032758 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032742:	687b      	ldr	r3, [r7, #4]
 8032744:	3324      	adds	r3, #36	; 0x24
 8032746:	2102      	movs	r1, #2
 8032748:	4618      	mov	r0, r3
 803274a:	f000 fcdb 	bl	8033104 <RCCEx_PLL3_Config>
 803274e:	4603      	mov	r3, r0
 8032750:	2b00      	cmp	r3, #0
 8032752:	d001      	beq.n	8032758 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8032754:	2301      	movs	r3, #1
 8032756:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8032758:	4b7a      	ldr	r3, [pc, #488]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803275c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8032760:	687b      	ldr	r3, [r7, #4]
 8032762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8032766:	4977      	ldr	r1, [pc, #476]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032768:	4313      	orrs	r3, r2
 803276a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 803276c:	687b      	ldr	r3, [r7, #4]
 803276e:	681b      	ldr	r3, [r3, #0]
 8032770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8032774:	2b00      	cmp	r3, #0
 8032776:	d034      	beq.n	80327e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8032778:	687b      	ldr	r3, [r7, #4]
 803277a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803277e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8032782:	d01d      	beq.n	80327c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8032784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8032788:	d817      	bhi.n	80327ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 803278a:	2b00      	cmp	r3, #0
 803278c:	d003      	beq.n	8032796 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 803278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8032792:	d009      	beq.n	80327a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8032794:	e011      	b.n	80327ba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032796:	687b      	ldr	r3, [r7, #4]
 8032798:	3304      	adds	r3, #4
 803279a:	2100      	movs	r1, #0
 803279c:	4618      	mov	r0, r3
 803279e:	f000 fbff 	bl	8032fa0 <RCCEx_PLL2_Config>
 80327a2:	4603      	mov	r3, r0
 80327a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80327a6:	e00c      	b.n	80327c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80327a8:	687b      	ldr	r3, [r7, #4]
 80327aa:	3324      	adds	r3, #36	; 0x24
 80327ac:	2102      	movs	r1, #2
 80327ae:	4618      	mov	r0, r3
 80327b0:	f000 fca8 	bl	8033104 <RCCEx_PLL3_Config>
 80327b4:	4603      	mov	r3, r0
 80327b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80327b8:	e003      	b.n	80327c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80327ba:	2301      	movs	r3, #1
 80327bc:	75fb      	strb	r3, [r7, #23]
      break;
 80327be:	e000      	b.n	80327c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80327c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80327c2:	7dfb      	ldrb	r3, [r7, #23]
 80327c4:	2b00      	cmp	r3, #0
 80327c6:	d10a      	bne.n	80327de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80327c8:	4b5e      	ldr	r3, [pc, #376]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80327cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80327d6:	495b      	ldr	r1, [pc, #364]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327d8:	4313      	orrs	r3, r2
 80327da:	658b      	str	r3, [r1, #88]	; 0x58
 80327dc:	e001      	b.n	80327e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80327de:	7dfb      	ldrb	r3, [r7, #23]
 80327e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80327e2:	687b      	ldr	r3, [r7, #4]
 80327e4:	681b      	ldr	r3, [r3, #0]
 80327e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80327ea:	2b00      	cmp	r3, #0
 80327ec:	d033      	beq.n	8032856 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80327ee:	687b      	ldr	r3, [r7, #4]
 80327f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80327f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80327f8:	d01c      	beq.n	8032834 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80327fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80327fe:	d816      	bhi.n	803282e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8032800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8032804:	d003      	beq.n	803280e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8032806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803280a:	d007      	beq.n	803281c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 803280c:	e00f      	b.n	803282e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803280e:	4b4d      	ldr	r3, [pc, #308]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032812:	4a4c      	ldr	r2, [pc, #304]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 803281a:	e00c      	b.n	8032836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803281c:	687b      	ldr	r3, [r7, #4]
 803281e:	3324      	adds	r3, #36	; 0x24
 8032820:	2101      	movs	r1, #1
 8032822:	4618      	mov	r0, r3
 8032824:	f000 fc6e 	bl	8033104 <RCCEx_PLL3_Config>
 8032828:	4603      	mov	r3, r0
 803282a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 803282c:	e003      	b.n	8032836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803282e:	2301      	movs	r3, #1
 8032830:	75fb      	strb	r3, [r7, #23]
      break;
 8032832:	e000      	b.n	8032836 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8032834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032836:	7dfb      	ldrb	r3, [r7, #23]
 8032838:	2b00      	cmp	r3, #0
 803283a:	d10a      	bne.n	8032852 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 803283c:	4b41      	ldr	r3, [pc, #260]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8032844:	687b      	ldr	r3, [r7, #4]
 8032846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803284a:	493e      	ldr	r1, [pc, #248]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803284c:	4313      	orrs	r3, r2
 803284e:	654b      	str	r3, [r1, #84]	; 0x54
 8032850:	e001      	b.n	8032856 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032852:	7dfb      	ldrb	r3, [r7, #23]
 8032854:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8032856:	687b      	ldr	r3, [r7, #4]
 8032858:	681b      	ldr	r3, [r3, #0]
 803285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 803285e:	2b00      	cmp	r3, #0
 8032860:	d029      	beq.n	80328b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8032862:	687b      	ldr	r3, [r7, #4]
 8032864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032866:	2b00      	cmp	r3, #0
 8032868:	d003      	beq.n	8032872 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 803286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803286e:	d007      	beq.n	8032880 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8032870:	e00f      	b.n	8032892 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032872:	4b34      	ldr	r3, [pc, #208]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032876:	4a33      	ldr	r2, [pc, #204]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803287c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 803287e:	e00b      	b.n	8032898 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8032880:	687b      	ldr	r3, [r7, #4]
 8032882:	3304      	adds	r3, #4
 8032884:	2102      	movs	r1, #2
 8032886:	4618      	mov	r0, r3
 8032888:	f000 fb8a 	bl	8032fa0 <RCCEx_PLL2_Config>
 803288c:	4603      	mov	r3, r0
 803288e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8032890:	e002      	b.n	8032898 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8032892:	2301      	movs	r3, #1
 8032894:	75fb      	strb	r3, [r7, #23]
      break;
 8032896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032898:	7dfb      	ldrb	r3, [r7, #23]
 803289a:	2b00      	cmp	r3, #0
 803289c:	d109      	bne.n	80328b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 803289e:	4b29      	ldr	r3, [pc, #164]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80328a6:	687b      	ldr	r3, [r7, #4]
 80328a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328aa:	4926      	ldr	r1, [pc, #152]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328ac:	4313      	orrs	r3, r2
 80328ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80328b0:	e001      	b.n	80328b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80328b2:	7dfb      	ldrb	r3, [r7, #23]
 80328b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80328b6:	687b      	ldr	r3, [r7, #4]
 80328b8:	681b      	ldr	r3, [r3, #0]
 80328ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80328be:	2b00      	cmp	r3, #0
 80328c0:	d00a      	beq.n	80328d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80328c2:	687b      	ldr	r3, [r7, #4]
 80328c4:	3324      	adds	r3, #36	; 0x24
 80328c6:	2102      	movs	r1, #2
 80328c8:	4618      	mov	r0, r3
 80328ca:	f000 fc1b 	bl	8033104 <RCCEx_PLL3_Config>
 80328ce:	4603      	mov	r3, r0
 80328d0:	2b00      	cmp	r3, #0
 80328d2:	d001      	beq.n	80328d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80328d4:	2301      	movs	r3, #1
 80328d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80328d8:	687b      	ldr	r3, [r7, #4]
 80328da:	681b      	ldr	r3, [r3, #0]
 80328dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80328e0:	2b00      	cmp	r3, #0
 80328e2:	d033      	beq.n	803294c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80328e4:	687b      	ldr	r3, [r7, #4]
 80328e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80328e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80328ec:	d017      	beq.n	803291e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80328ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80328f2:	d811      	bhi.n	8032918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80328f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80328f8:	d013      	beq.n	8032922 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80328fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80328fe:	d80b      	bhi.n	8032918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032900:	2b00      	cmp	r3, #0
 8032902:	d010      	beq.n	8032926 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8032904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032908:	d106      	bne.n	8032918 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803290a:	4b0e      	ldr	r3, [pc, #56]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803290e:	4a0d      	ldr	r2, [pc, #52]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8032916:	e007      	b.n	8032928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032918:	2301      	movs	r3, #1
 803291a:	75fb      	strb	r3, [r7, #23]
      break;
 803291c:	e004      	b.n	8032928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803291e:	bf00      	nop
 8032920:	e002      	b.n	8032928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032922:	bf00      	nop
 8032924:	e000      	b.n	8032928 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032928:	7dfb      	ldrb	r3, [r7, #23]
 803292a:	2b00      	cmp	r3, #0
 803292c:	d10c      	bne.n	8032948 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 803292e:	4b05      	ldr	r3, [pc, #20]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8032936:	687b      	ldr	r3, [r7, #4]
 8032938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803293a:	4902      	ldr	r1, [pc, #8]	; (8032944 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803293c:	4313      	orrs	r3, r2
 803293e:	654b      	str	r3, [r1, #84]	; 0x54
 8032940:	e004      	b.n	803294c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8032942:	bf00      	nop
 8032944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032948:	7dfb      	ldrb	r3, [r7, #23]
 803294a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 803294c:	687b      	ldr	r3, [r7, #4]
 803294e:	681b      	ldr	r3, [r3, #0]
 8032950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8032954:	2b00      	cmp	r3, #0
 8032956:	d008      	beq.n	803296a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8032958:	4b31      	ldr	r3, [pc, #196]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803295c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8032960:	687b      	ldr	r3, [r7, #4]
 8032962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032964:	492e      	ldr	r1, [pc, #184]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032966:	4313      	orrs	r3, r2
 8032968:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	681b      	ldr	r3, [r3, #0]
 803296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8032972:	2b00      	cmp	r3, #0
 8032974:	d009      	beq.n	803298a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8032976:	4b2a      	ldr	r3, [pc, #168]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032978:	691b      	ldr	r3, [r3, #16]
 803297a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 803297e:	687b      	ldr	r3, [r7, #4]
 8032980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8032984:	4926      	ldr	r1, [pc, #152]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032986:	4313      	orrs	r3, r2
 8032988:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 803298a:	687b      	ldr	r3, [r7, #4]
 803298c:	681b      	ldr	r3, [r3, #0]
 803298e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8032992:	2b00      	cmp	r3, #0
 8032994:	d008      	beq.n	80329a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8032996:	4b22      	ldr	r3, [pc, #136]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803299a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 803299e:	687b      	ldr	r3, [r7, #4]
 80329a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80329a2:	491f      	ldr	r1, [pc, #124]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329a4:	4313      	orrs	r3, r2
 80329a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80329a8:	687b      	ldr	r3, [r7, #4]
 80329aa:	681b      	ldr	r3, [r3, #0]
 80329ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80329b0:	2b00      	cmp	r3, #0
 80329b2:	d00d      	beq.n	80329d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80329b4:	4b1a      	ldr	r3, [pc, #104]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329b6:	691b      	ldr	r3, [r3, #16]
 80329b8:	4a19      	ldr	r2, [pc, #100]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80329be:	6113      	str	r3, [r2, #16]
 80329c0:	4b17      	ldr	r3, [pc, #92]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329c2:	691a      	ldr	r2, [r3, #16]
 80329c4:	687b      	ldr	r3, [r7, #4]
 80329c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80329ca:	4915      	ldr	r1, [pc, #84]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329cc:	4313      	orrs	r3, r2
 80329ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80329d0:	687b      	ldr	r3, [r7, #4]
 80329d2:	681b      	ldr	r3, [r3, #0]
 80329d4:	2b00      	cmp	r3, #0
 80329d6:	da08      	bge.n	80329ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80329d8:	4b11      	ldr	r3, [pc, #68]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80329dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80329e0:	687b      	ldr	r3, [r7, #4]
 80329e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80329e4:	490e      	ldr	r1, [pc, #56]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329e6:	4313      	orrs	r3, r2
 80329e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80329ea:	687b      	ldr	r3, [r7, #4]
 80329ec:	681b      	ldr	r3, [r3, #0]
 80329ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80329f2:	2b00      	cmp	r3, #0
 80329f4:	d009      	beq.n	8032a0a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80329f6:	4b0a      	ldr	r3, [pc, #40]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80329fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80329fe:	687b      	ldr	r3, [r7, #4]
 8032a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8032a04:	4906      	ldr	r1, [pc, #24]	; (8032a20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a06:	4313      	orrs	r3, r2
 8032a08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8032a0a:	7dbb      	ldrb	r3, [r7, #22]
 8032a0c:	2b00      	cmp	r3, #0
 8032a0e:	d101      	bne.n	8032a14 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8032a10:	2300      	movs	r3, #0
 8032a12:	e000      	b.n	8032a16 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8032a14:	2301      	movs	r3, #1
}
 8032a16:	4618      	mov	r0, r3
 8032a18:	3718      	adds	r7, #24
 8032a1a:	46bd      	mov	sp, r7
 8032a1c:	bd80      	pop	{r7, pc}
 8032a1e:	bf00      	nop
 8032a20:	58024400 	.word	0x58024400

08032a24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8032a24:	b580      	push	{r7, lr}
 8032a26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8032a28:	f7ff f85a 	bl	8031ae0 <HAL_RCC_GetHCLKFreq>
 8032a2c:	4602      	mov	r2, r0
 8032a2e:	4b06      	ldr	r3, [pc, #24]	; (8032a48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8032a30:	6a1b      	ldr	r3, [r3, #32]
 8032a32:	091b      	lsrs	r3, r3, #4
 8032a34:	f003 0307 	and.w	r3, r3, #7
 8032a38:	4904      	ldr	r1, [pc, #16]	; (8032a4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8032a3a:	5ccb      	ldrb	r3, [r1, r3]
 8032a3c:	f003 031f 	and.w	r3, r3, #31
 8032a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8032a44:	4618      	mov	r0, r3
 8032a46:	bd80      	pop	{r7, pc}
 8032a48:	58024400 	.word	0x58024400
 8032a4c:	08058508 	.word	0x08058508

08032a50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8032a50:	b480      	push	{r7}
 8032a52:	b089      	sub	sp, #36	; 0x24
 8032a54:	af00      	add	r7, sp, #0
 8032a56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032a58:	4ba1      	ldr	r3, [pc, #644]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032a5c:	f003 0303 	and.w	r3, r3, #3
 8032a60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8032a62:	4b9f      	ldr	r3, [pc, #636]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032a66:	0b1b      	lsrs	r3, r3, #12
 8032a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032a6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8032a6e:	4b9c      	ldr	r3, [pc, #624]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a72:	091b      	lsrs	r3, r3, #4
 8032a74:	f003 0301 	and.w	r3, r3, #1
 8032a78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8032a7a:	4b99      	ldr	r3, [pc, #612]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032a7e:	08db      	lsrs	r3, r3, #3
 8032a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032a84:	693a      	ldr	r2, [r7, #16]
 8032a86:	fb02 f303 	mul.w	r3, r2, r3
 8032a8a:	ee07 3a90 	vmov	s15, r3
 8032a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8032a96:	697b      	ldr	r3, [r7, #20]
 8032a98:	2b00      	cmp	r3, #0
 8032a9a:	f000 8111 	beq.w	8032cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8032a9e:	69bb      	ldr	r3, [r7, #24]
 8032aa0:	2b02      	cmp	r3, #2
 8032aa2:	f000 8083 	beq.w	8032bac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8032aa6:	69bb      	ldr	r3, [r7, #24]
 8032aa8:	2b02      	cmp	r3, #2
 8032aaa:	f200 80a1 	bhi.w	8032bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8032aae:	69bb      	ldr	r3, [r7, #24]
 8032ab0:	2b00      	cmp	r3, #0
 8032ab2:	d003      	beq.n	8032abc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8032ab4:	69bb      	ldr	r3, [r7, #24]
 8032ab6:	2b01      	cmp	r3, #1
 8032ab8:	d056      	beq.n	8032b68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8032aba:	e099      	b.n	8032bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032abc:	4b88      	ldr	r3, [pc, #544]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032abe:	681b      	ldr	r3, [r3, #0]
 8032ac0:	f003 0320 	and.w	r3, r3, #32
 8032ac4:	2b00      	cmp	r3, #0
 8032ac6:	d02d      	beq.n	8032b24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032ac8:	4b85      	ldr	r3, [pc, #532]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032aca:	681b      	ldr	r3, [r3, #0]
 8032acc:	08db      	lsrs	r3, r3, #3
 8032ace:	f003 0303 	and.w	r3, r3, #3
 8032ad2:	4a84      	ldr	r2, [pc, #528]	; (8032ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8032ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8032ad8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032ada:	68bb      	ldr	r3, [r7, #8]
 8032adc:	ee07 3a90 	vmov	s15, r3
 8032ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032ae4:	697b      	ldr	r3, [r7, #20]
 8032ae6:	ee07 3a90 	vmov	s15, r3
 8032aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032af2:	4b7b      	ldr	r3, [pc, #492]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032afa:	ee07 3a90 	vmov	s15, r3
 8032afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032b22:	e087      	b.n	8032c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b24:	697b      	ldr	r3, [r7, #20]
 8032b26:	ee07 3a90 	vmov	s15, r3
 8032b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032cec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8032b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b36:	4b6a      	ldr	r3, [pc, #424]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b3e:	ee07 3a90 	vmov	s15, r3
 8032b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032b66:	e065      	b.n	8032c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b68:	697b      	ldr	r3, [r7, #20]
 8032b6a:	ee07 3a90 	vmov	s15, r3
 8032b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b7a:	4b59      	ldr	r3, [pc, #356]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b82:	ee07 3a90 	vmov	s15, r3
 8032b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032baa:	e043      	b.n	8032c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032bac:	697b      	ldr	r3, [r7, #20]
 8032bae:	ee07 3a90 	vmov	s15, r3
 8032bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8032bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032bbe:	4b48      	ldr	r3, [pc, #288]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032bc6:	ee07 3a90 	vmov	s15, r3
 8032bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8032bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032bee:	e021      	b.n	8032c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032bf0:	697b      	ldr	r3, [r7, #20]
 8032bf2:	ee07 3a90 	vmov	s15, r3
 8032bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c02:	4b37      	ldr	r3, [pc, #220]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c0a:	ee07 3a90 	vmov	s15, r3
 8032c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8032c34:	4b2a      	ldr	r3, [pc, #168]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c38:	0a5b      	lsrs	r3, r3, #9
 8032c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032c3e:	ee07 3a90 	vmov	s15, r3
 8032c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8032c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032c5a:	ee17 2a90 	vmov	r2, s15
 8032c5e:	687b      	ldr	r3, [r7, #4]
 8032c60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8032c62:	4b1f      	ldr	r3, [pc, #124]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c66:	0c1b      	lsrs	r3, r3, #16
 8032c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032c6c:	ee07 3a90 	vmov	s15, r3
 8032c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8032c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032c88:	ee17 2a90 	vmov	r2, s15
 8032c8c:	687b      	ldr	r3, [r7, #4]
 8032c8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8032c90:	4b13      	ldr	r3, [pc, #76]	; (8032ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c94:	0e1b      	lsrs	r3, r3, #24
 8032c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032c9a:	ee07 3a90 	vmov	s15, r3
 8032c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8032cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032cb6:	ee17 2a90 	vmov	r2, s15
 8032cba:	687b      	ldr	r3, [r7, #4]
 8032cbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8032cbe:	e008      	b.n	8032cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8032cc0:	687b      	ldr	r3, [r7, #4]
 8032cc2:	2200      	movs	r2, #0
 8032cc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8032cc6:	687b      	ldr	r3, [r7, #4]
 8032cc8:	2200      	movs	r2, #0
 8032cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8032ccc:	687b      	ldr	r3, [r7, #4]
 8032cce:	2200      	movs	r2, #0
 8032cd0:	609a      	str	r2, [r3, #8]
}
 8032cd2:	bf00      	nop
 8032cd4:	3724      	adds	r7, #36	; 0x24
 8032cd6:	46bd      	mov	sp, r7
 8032cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032cdc:	4770      	bx	lr
 8032cde:	bf00      	nop
 8032ce0:	58024400 	.word	0x58024400
 8032ce4:	03d09000 	.word	0x03d09000
 8032ce8:	46000000 	.word	0x46000000
 8032cec:	4c742400 	.word	0x4c742400
 8032cf0:	4a742400 	.word	0x4a742400
 8032cf4:	4bbebc20 	.word	0x4bbebc20

08032cf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8032cf8:	b480      	push	{r7}
 8032cfa:	b089      	sub	sp, #36	; 0x24
 8032cfc:	af00      	add	r7, sp, #0
 8032cfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032d00:	4ba1      	ldr	r3, [pc, #644]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d04:	f003 0303 	and.w	r3, r3, #3
 8032d08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8032d0a:	4b9f      	ldr	r3, [pc, #636]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d0e:	0d1b      	lsrs	r3, r3, #20
 8032d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032d14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8032d16:	4b9c      	ldr	r3, [pc, #624]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d1a:	0a1b      	lsrs	r3, r3, #8
 8032d1c:	f003 0301 	and.w	r3, r3, #1
 8032d20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8032d22:	4b99      	ldr	r3, [pc, #612]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032d26:	08db      	lsrs	r3, r3, #3
 8032d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032d2c:	693a      	ldr	r2, [r7, #16]
 8032d2e:	fb02 f303 	mul.w	r3, r2, r3
 8032d32:	ee07 3a90 	vmov	s15, r3
 8032d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8032d3e:	697b      	ldr	r3, [r7, #20]
 8032d40:	2b00      	cmp	r3, #0
 8032d42:	f000 8111 	beq.w	8032f68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8032d46:	69bb      	ldr	r3, [r7, #24]
 8032d48:	2b02      	cmp	r3, #2
 8032d4a:	f000 8083 	beq.w	8032e54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8032d4e:	69bb      	ldr	r3, [r7, #24]
 8032d50:	2b02      	cmp	r3, #2
 8032d52:	f200 80a1 	bhi.w	8032e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8032d56:	69bb      	ldr	r3, [r7, #24]
 8032d58:	2b00      	cmp	r3, #0
 8032d5a:	d003      	beq.n	8032d64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8032d5c:	69bb      	ldr	r3, [r7, #24]
 8032d5e:	2b01      	cmp	r3, #1
 8032d60:	d056      	beq.n	8032e10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8032d62:	e099      	b.n	8032e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032d64:	4b88      	ldr	r3, [pc, #544]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d66:	681b      	ldr	r3, [r3, #0]
 8032d68:	f003 0320 	and.w	r3, r3, #32
 8032d6c:	2b00      	cmp	r3, #0
 8032d6e:	d02d      	beq.n	8032dcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032d70:	4b85      	ldr	r3, [pc, #532]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d72:	681b      	ldr	r3, [r3, #0]
 8032d74:	08db      	lsrs	r3, r3, #3
 8032d76:	f003 0303 	and.w	r3, r3, #3
 8032d7a:	4a84      	ldr	r2, [pc, #528]	; (8032f8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8032d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8032d80:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032d82:	68bb      	ldr	r3, [r7, #8]
 8032d84:	ee07 3a90 	vmov	s15, r3
 8032d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032d8c:	697b      	ldr	r3, [r7, #20]
 8032d8e:	ee07 3a90 	vmov	s15, r3
 8032d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032d9a:	4b7b      	ldr	r3, [pc, #492]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032da2:	ee07 3a90 	vmov	s15, r3
 8032da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8032dae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032dca:	e087      	b.n	8032edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032dcc:	697b      	ldr	r3, [r7, #20]
 8032dce:	ee07 3a90 	vmov	s15, r3
 8032dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032f94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8032dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032dde:	4b6a      	ldr	r3, [pc, #424]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032de6:	ee07 3a90 	vmov	s15, r3
 8032dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8032df2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e0e:	e065      	b.n	8032edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e10:	697b      	ldr	r3, [r7, #20]
 8032e12:	ee07 3a90 	vmov	s15, r3
 8032e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e22:	4b59      	ldr	r3, [pc, #356]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e2a:	ee07 3a90 	vmov	s15, r3
 8032e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e52:	e043      	b.n	8032edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e54:	697b      	ldr	r3, [r7, #20]
 8032e56:	ee07 3a90 	vmov	s15, r3
 8032e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8032e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e66:	4b48      	ldr	r3, [pc, #288]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e6e:	ee07 3a90 	vmov	s15, r3
 8032e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e96:	e021      	b.n	8032edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e98:	697b      	ldr	r3, [r7, #20]
 8032e9a:	ee07 3a90 	vmov	s15, r3
 8032e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032eaa:	4b37      	ldr	r3, [pc, #220]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032eb2:	ee07 3a90 	vmov	s15, r3
 8032eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8032ebe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032f90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032eda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8032edc:	4b2a      	ldr	r3, [pc, #168]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ee0:	0a5b      	lsrs	r3, r3, #9
 8032ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032ee6:	ee07 3a90 	vmov	s15, r3
 8032eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8032efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f02:	ee17 2a90 	vmov	r2, s15
 8032f06:	687b      	ldr	r3, [r7, #4]
 8032f08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8032f0a:	4b1f      	ldr	r3, [pc, #124]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f0e:	0c1b      	lsrs	r3, r3, #16
 8032f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f14:	ee07 3a90 	vmov	s15, r3
 8032f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f30:	ee17 2a90 	vmov	r2, s15
 8032f34:	687b      	ldr	r3, [r7, #4]
 8032f36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8032f38:	4b13      	ldr	r3, [pc, #76]	; (8032f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f3c:	0e1b      	lsrs	r3, r3, #24
 8032f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f42:	ee07 3a90 	vmov	s15, r3
 8032f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f5e:	ee17 2a90 	vmov	r2, s15
 8032f62:	687b      	ldr	r3, [r7, #4]
 8032f64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8032f66:	e008      	b.n	8032f7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8032f68:	687b      	ldr	r3, [r7, #4]
 8032f6a:	2200      	movs	r2, #0
 8032f6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8032f6e:	687b      	ldr	r3, [r7, #4]
 8032f70:	2200      	movs	r2, #0
 8032f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8032f74:	687b      	ldr	r3, [r7, #4]
 8032f76:	2200      	movs	r2, #0
 8032f78:	609a      	str	r2, [r3, #8]
}
 8032f7a:	bf00      	nop
 8032f7c:	3724      	adds	r7, #36	; 0x24
 8032f7e:	46bd      	mov	sp, r7
 8032f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032f84:	4770      	bx	lr
 8032f86:	bf00      	nop
 8032f88:	58024400 	.word	0x58024400
 8032f8c:	03d09000 	.word	0x03d09000
 8032f90:	46000000 	.word	0x46000000
 8032f94:	4c742400 	.word	0x4c742400
 8032f98:	4a742400 	.word	0x4a742400
 8032f9c:	4bbebc20 	.word	0x4bbebc20

08032fa0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8032fa0:	b580      	push	{r7, lr}
 8032fa2:	b084      	sub	sp, #16
 8032fa4:	af00      	add	r7, sp, #0
 8032fa6:	6078      	str	r0, [r7, #4]
 8032fa8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8032faa:	2300      	movs	r3, #0
 8032fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8032fae:	4b53      	ldr	r3, [pc, #332]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8032fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032fb2:	f003 0303 	and.w	r3, r3, #3
 8032fb6:	2b03      	cmp	r3, #3
 8032fb8:	d101      	bne.n	8032fbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8032fba:	2301      	movs	r3, #1
 8032fbc:	e099      	b.n	80330f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8032fbe:	4b4f      	ldr	r3, [pc, #316]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8032fc0:	681b      	ldr	r3, [r3, #0]
 8032fc2:	4a4e      	ldr	r2, [pc, #312]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8032fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8032fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032fca:	f7f7 fe43 	bl	802ac54 <HAL_GetTick>
 8032fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032fd0:	e008      	b.n	8032fe4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8032fd2:	f7f7 fe3f 	bl	802ac54 <HAL_GetTick>
 8032fd6:	4602      	mov	r2, r0
 8032fd8:	68bb      	ldr	r3, [r7, #8]
 8032fda:	1ad3      	subs	r3, r2, r3
 8032fdc:	2b02      	cmp	r3, #2
 8032fde:	d901      	bls.n	8032fe4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8032fe0:	2303      	movs	r3, #3
 8032fe2:	e086      	b.n	80330f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032fe4:	4b45      	ldr	r3, [pc, #276]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8032fe6:	681b      	ldr	r3, [r3, #0]
 8032fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8032fec:	2b00      	cmp	r3, #0
 8032fee:	d1f0      	bne.n	8032fd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8032ff0:	4b42      	ldr	r3, [pc, #264]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8032ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032ff4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8032ff8:	687b      	ldr	r3, [r7, #4]
 8032ffa:	681b      	ldr	r3, [r3, #0]
 8032ffc:	031b      	lsls	r3, r3, #12
 8032ffe:	493f      	ldr	r1, [pc, #252]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033000:	4313      	orrs	r3, r2
 8033002:	628b      	str	r3, [r1, #40]	; 0x28
 8033004:	687b      	ldr	r3, [r7, #4]
 8033006:	685b      	ldr	r3, [r3, #4]
 8033008:	3b01      	subs	r3, #1
 803300a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803300e:	687b      	ldr	r3, [r7, #4]
 8033010:	689b      	ldr	r3, [r3, #8]
 8033012:	3b01      	subs	r3, #1
 8033014:	025b      	lsls	r3, r3, #9
 8033016:	b29b      	uxth	r3, r3
 8033018:	431a      	orrs	r2, r3
 803301a:	687b      	ldr	r3, [r7, #4]
 803301c:	68db      	ldr	r3, [r3, #12]
 803301e:	3b01      	subs	r3, #1
 8033020:	041b      	lsls	r3, r3, #16
 8033022:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8033026:	431a      	orrs	r2, r3
 8033028:	687b      	ldr	r3, [r7, #4]
 803302a:	691b      	ldr	r3, [r3, #16]
 803302c:	3b01      	subs	r3, #1
 803302e:	061b      	lsls	r3, r3, #24
 8033030:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8033034:	4931      	ldr	r1, [pc, #196]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033036:	4313      	orrs	r3, r2
 8033038:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 803303a:	4b30      	ldr	r3, [pc, #192]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 803303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803303e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8033042:	687b      	ldr	r3, [r7, #4]
 8033044:	695b      	ldr	r3, [r3, #20]
 8033046:	492d      	ldr	r1, [pc, #180]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033048:	4313      	orrs	r3, r2
 803304a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 803304c:	4b2b      	ldr	r3, [pc, #172]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 803304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033050:	f023 0220 	bic.w	r2, r3, #32
 8033054:	687b      	ldr	r3, [r7, #4]
 8033056:	699b      	ldr	r3, [r3, #24]
 8033058:	4928      	ldr	r1, [pc, #160]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 803305a:	4313      	orrs	r3, r2
 803305c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 803305e:	4b27      	ldr	r3, [pc, #156]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033062:	4a26      	ldr	r2, [pc, #152]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033064:	f023 0310 	bic.w	r3, r3, #16
 8033068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 803306a:	4b24      	ldr	r3, [pc, #144]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 803306c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803306e:	4b24      	ldr	r3, [pc, #144]	; (8033100 <RCCEx_PLL2_Config+0x160>)
 8033070:	4013      	ands	r3, r2
 8033072:	687a      	ldr	r2, [r7, #4]
 8033074:	69d2      	ldr	r2, [r2, #28]
 8033076:	00d2      	lsls	r2, r2, #3
 8033078:	4920      	ldr	r1, [pc, #128]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 803307a:	4313      	orrs	r3, r2
 803307c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 803307e:	4b1f      	ldr	r3, [pc, #124]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033082:	4a1e      	ldr	r2, [pc, #120]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033084:	f043 0310 	orr.w	r3, r3, #16
 8033088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 803308a:	683b      	ldr	r3, [r7, #0]
 803308c:	2b00      	cmp	r3, #0
 803308e:	d106      	bne.n	803309e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8033090:	4b1a      	ldr	r3, [pc, #104]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033094:	4a19      	ldr	r2, [pc, #100]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 8033096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803309a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803309c:	e00f      	b.n	80330be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803309e:	683b      	ldr	r3, [r7, #0]
 80330a0:	2b01      	cmp	r3, #1
 80330a2:	d106      	bne.n	80330b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80330a4:	4b15      	ldr	r3, [pc, #84]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330a8:	4a14      	ldr	r2, [pc, #80]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80330ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80330b0:	e005      	b.n	80330be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80330b2:	4b12      	ldr	r3, [pc, #72]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330b6:	4a11      	ldr	r2, [pc, #68]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80330bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80330be:	4b0f      	ldr	r3, [pc, #60]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330c0:	681b      	ldr	r3, [r3, #0]
 80330c2:	4a0e      	ldr	r2, [pc, #56]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80330c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80330ca:	f7f7 fdc3 	bl	802ac54 <HAL_GetTick>
 80330ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80330d0:	e008      	b.n	80330e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80330d2:	f7f7 fdbf 	bl	802ac54 <HAL_GetTick>
 80330d6:	4602      	mov	r2, r0
 80330d8:	68bb      	ldr	r3, [r7, #8]
 80330da:	1ad3      	subs	r3, r2, r3
 80330dc:	2b02      	cmp	r3, #2
 80330de:	d901      	bls.n	80330e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80330e0:	2303      	movs	r3, #3
 80330e2:	e006      	b.n	80330f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80330e4:	4b05      	ldr	r3, [pc, #20]	; (80330fc <RCCEx_PLL2_Config+0x15c>)
 80330e6:	681b      	ldr	r3, [r3, #0]
 80330e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80330ec:	2b00      	cmp	r3, #0
 80330ee:	d0f0      	beq.n	80330d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80330f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80330f2:	4618      	mov	r0, r3
 80330f4:	3710      	adds	r7, #16
 80330f6:	46bd      	mov	sp, r7
 80330f8:	bd80      	pop	{r7, pc}
 80330fa:	bf00      	nop
 80330fc:	58024400 	.word	0x58024400
 8033100:	ffff0007 	.word	0xffff0007

08033104 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8033104:	b580      	push	{r7, lr}
 8033106:	b084      	sub	sp, #16
 8033108:	af00      	add	r7, sp, #0
 803310a:	6078      	str	r0, [r7, #4]
 803310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 803310e:	2300      	movs	r3, #0
 8033110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8033112:	4b53      	ldr	r3, [pc, #332]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033116:	f003 0303 	and.w	r3, r3, #3
 803311a:	2b03      	cmp	r3, #3
 803311c:	d101      	bne.n	8033122 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 803311e:	2301      	movs	r3, #1
 8033120:	e099      	b.n	8033256 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8033122:	4b4f      	ldr	r3, [pc, #316]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033124:	681b      	ldr	r3, [r3, #0]
 8033126:	4a4e      	ldr	r2, [pc, #312]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803312c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803312e:	f7f7 fd91 	bl	802ac54 <HAL_GetTick>
 8033132:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8033134:	e008      	b.n	8033148 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8033136:	f7f7 fd8d 	bl	802ac54 <HAL_GetTick>
 803313a:	4602      	mov	r2, r0
 803313c:	68bb      	ldr	r3, [r7, #8]
 803313e:	1ad3      	subs	r3, r2, r3
 8033140:	2b02      	cmp	r3, #2
 8033142:	d901      	bls.n	8033148 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8033144:	2303      	movs	r3, #3
 8033146:	e086      	b.n	8033256 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8033148:	4b45      	ldr	r3, [pc, #276]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803314a:	681b      	ldr	r3, [r3, #0]
 803314c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033150:	2b00      	cmp	r3, #0
 8033152:	d1f0      	bne.n	8033136 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8033154:	4b42      	ldr	r3, [pc, #264]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033158:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 803315c:	687b      	ldr	r3, [r7, #4]
 803315e:	681b      	ldr	r3, [r3, #0]
 8033160:	051b      	lsls	r3, r3, #20
 8033162:	493f      	ldr	r1, [pc, #252]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033164:	4313      	orrs	r3, r2
 8033166:	628b      	str	r3, [r1, #40]	; 0x28
 8033168:	687b      	ldr	r3, [r7, #4]
 803316a:	685b      	ldr	r3, [r3, #4]
 803316c:	3b01      	subs	r3, #1
 803316e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8033172:	687b      	ldr	r3, [r7, #4]
 8033174:	689b      	ldr	r3, [r3, #8]
 8033176:	3b01      	subs	r3, #1
 8033178:	025b      	lsls	r3, r3, #9
 803317a:	b29b      	uxth	r3, r3
 803317c:	431a      	orrs	r2, r3
 803317e:	687b      	ldr	r3, [r7, #4]
 8033180:	68db      	ldr	r3, [r3, #12]
 8033182:	3b01      	subs	r3, #1
 8033184:	041b      	lsls	r3, r3, #16
 8033186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803318a:	431a      	orrs	r2, r3
 803318c:	687b      	ldr	r3, [r7, #4]
 803318e:	691b      	ldr	r3, [r3, #16]
 8033190:	3b01      	subs	r3, #1
 8033192:	061b      	lsls	r3, r3, #24
 8033194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8033198:	4931      	ldr	r1, [pc, #196]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803319a:	4313      	orrs	r3, r2
 803319c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 803319e:	4b30      	ldr	r3, [pc, #192]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80331a6:	687b      	ldr	r3, [r7, #4]
 80331a8:	695b      	ldr	r3, [r3, #20]
 80331aa:	492d      	ldr	r1, [pc, #180]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331ac:	4313      	orrs	r3, r2
 80331ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80331b0:	4b2b      	ldr	r3, [pc, #172]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80331b8:	687b      	ldr	r3, [r7, #4]
 80331ba:	699b      	ldr	r3, [r3, #24]
 80331bc:	4928      	ldr	r1, [pc, #160]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331be:	4313      	orrs	r3, r2
 80331c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80331c2:	4b27      	ldr	r3, [pc, #156]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331c6:	4a26      	ldr	r2, [pc, #152]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80331cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80331ce:	4b24      	ldr	r3, [pc, #144]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80331d2:	4b24      	ldr	r3, [pc, #144]	; (8033264 <RCCEx_PLL3_Config+0x160>)
 80331d4:	4013      	ands	r3, r2
 80331d6:	687a      	ldr	r2, [r7, #4]
 80331d8:	69d2      	ldr	r2, [r2, #28]
 80331da:	00d2      	lsls	r2, r2, #3
 80331dc:	4920      	ldr	r1, [pc, #128]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331de:	4313      	orrs	r3, r2
 80331e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80331e2:	4b1f      	ldr	r3, [pc, #124]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331e6:	4a1e      	ldr	r2, [pc, #120]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80331ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80331ee:	683b      	ldr	r3, [r7, #0]
 80331f0:	2b00      	cmp	r3, #0
 80331f2:	d106      	bne.n	8033202 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80331f4:	4b1a      	ldr	r3, [pc, #104]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331f8:	4a19      	ldr	r2, [pc, #100]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 80331fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80331fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033200:	e00f      	b.n	8033222 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8033202:	683b      	ldr	r3, [r7, #0]
 8033204:	2b01      	cmp	r3, #1
 8033206:	d106      	bne.n	8033216 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8033208:	4b15      	ldr	r3, [pc, #84]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803320c:	4a14      	ldr	r2, [pc, #80]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803320e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8033212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033214:	e005      	b.n	8033222 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8033216:	4b12      	ldr	r3, [pc, #72]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803321a:	4a11      	ldr	r2, [pc, #68]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803321c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8033222:	4b0f      	ldr	r3, [pc, #60]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033224:	681b      	ldr	r3, [r3, #0]
 8033226:	4a0e      	ldr	r2, [pc, #56]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 8033228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803322c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803322e:	f7f7 fd11 	bl	802ac54 <HAL_GetTick>
 8033232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8033234:	e008      	b.n	8033248 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8033236:	f7f7 fd0d 	bl	802ac54 <HAL_GetTick>
 803323a:	4602      	mov	r2, r0
 803323c:	68bb      	ldr	r3, [r7, #8]
 803323e:	1ad3      	subs	r3, r2, r3
 8033240:	2b02      	cmp	r3, #2
 8033242:	d901      	bls.n	8033248 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033244:	2303      	movs	r3, #3
 8033246:	e006      	b.n	8033256 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8033248:	4b05      	ldr	r3, [pc, #20]	; (8033260 <RCCEx_PLL3_Config+0x15c>)
 803324a:	681b      	ldr	r3, [r3, #0]
 803324c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033250:	2b00      	cmp	r3, #0
 8033252:	d0f0      	beq.n	8033236 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8033254:	7bfb      	ldrb	r3, [r7, #15]
}
 8033256:	4618      	mov	r0, r3
 8033258:	3710      	adds	r7, #16
 803325a:	46bd      	mov	sp, r7
 803325c:	bd80      	pop	{r7, pc}
 803325e:	bf00      	nop
 8033260:	58024400 	.word	0x58024400
 8033264:	ffff0007 	.word	0xffff0007

08033268 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8033268:	b580      	push	{r7, lr}
 803326a:	b084      	sub	sp, #16
 803326c:	af00      	add	r7, sp, #0
 803326e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8033270:	687b      	ldr	r3, [r7, #4]
 8033272:	2b00      	cmp	r3, #0
 8033274:	d101      	bne.n	803327a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8033276:	2301      	movs	r3, #1
 8033278:	e0f1      	b.n	803345e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 803327a:	687b      	ldr	r3, [r7, #4]
 803327c:	2200      	movs	r2, #0
 803327e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8033280:	687b      	ldr	r3, [r7, #4]
 8033282:	681b      	ldr	r3, [r3, #0]
 8033284:	4a78      	ldr	r2, [pc, #480]	; (8033468 <HAL_SPI_Init+0x200>)
 8033286:	4293      	cmp	r3, r2
 8033288:	d00f      	beq.n	80332aa <HAL_SPI_Init+0x42>
 803328a:	687b      	ldr	r3, [r7, #4]
 803328c:	681b      	ldr	r3, [r3, #0]
 803328e:	4a77      	ldr	r2, [pc, #476]	; (803346c <HAL_SPI_Init+0x204>)
 8033290:	4293      	cmp	r3, r2
 8033292:	d00a      	beq.n	80332aa <HAL_SPI_Init+0x42>
 8033294:	687b      	ldr	r3, [r7, #4]
 8033296:	681b      	ldr	r3, [r3, #0]
 8033298:	4a75      	ldr	r2, [pc, #468]	; (8033470 <HAL_SPI_Init+0x208>)
 803329a:	4293      	cmp	r3, r2
 803329c:	d005      	beq.n	80332aa <HAL_SPI_Init+0x42>
 803329e:	687b      	ldr	r3, [r7, #4]
 80332a0:	68db      	ldr	r3, [r3, #12]
 80332a2:	2b0f      	cmp	r3, #15
 80332a4:	d901      	bls.n	80332aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80332a6:	2301      	movs	r3, #1
 80332a8:	e0d9      	b.n	803345e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80332aa:	6878      	ldr	r0, [r7, #4]
 80332ac:	f001 f8ee 	bl	803448c <SPI_GetPacketSize>
 80332b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80332b2:	687b      	ldr	r3, [r7, #4]
 80332b4:	681b      	ldr	r3, [r3, #0]
 80332b6:	4a6c      	ldr	r2, [pc, #432]	; (8033468 <HAL_SPI_Init+0x200>)
 80332b8:	4293      	cmp	r3, r2
 80332ba:	d00c      	beq.n	80332d6 <HAL_SPI_Init+0x6e>
 80332bc:	687b      	ldr	r3, [r7, #4]
 80332be:	681b      	ldr	r3, [r3, #0]
 80332c0:	4a6a      	ldr	r2, [pc, #424]	; (803346c <HAL_SPI_Init+0x204>)
 80332c2:	4293      	cmp	r3, r2
 80332c4:	d007      	beq.n	80332d6 <HAL_SPI_Init+0x6e>
 80332c6:	687b      	ldr	r3, [r7, #4]
 80332c8:	681b      	ldr	r3, [r3, #0]
 80332ca:	4a69      	ldr	r2, [pc, #420]	; (8033470 <HAL_SPI_Init+0x208>)
 80332cc:	4293      	cmp	r3, r2
 80332ce:	d002      	beq.n	80332d6 <HAL_SPI_Init+0x6e>
 80332d0:	68fb      	ldr	r3, [r7, #12]
 80332d2:	2b08      	cmp	r3, #8
 80332d4:	d811      	bhi.n	80332fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80332d6:	687b      	ldr	r3, [r7, #4]
 80332d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80332da:	4a63      	ldr	r2, [pc, #396]	; (8033468 <HAL_SPI_Init+0x200>)
 80332dc:	4293      	cmp	r3, r2
 80332de:	d009      	beq.n	80332f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80332e0:	687b      	ldr	r3, [r7, #4]
 80332e2:	681b      	ldr	r3, [r3, #0]
 80332e4:	4a61      	ldr	r2, [pc, #388]	; (803346c <HAL_SPI_Init+0x204>)
 80332e6:	4293      	cmp	r3, r2
 80332e8:	d004      	beq.n	80332f4 <HAL_SPI_Init+0x8c>
 80332ea:	687b      	ldr	r3, [r7, #4]
 80332ec:	681b      	ldr	r3, [r3, #0]
 80332ee:	4a60      	ldr	r2, [pc, #384]	; (8033470 <HAL_SPI_Init+0x208>)
 80332f0:	4293      	cmp	r3, r2
 80332f2:	d104      	bne.n	80332fe <HAL_SPI_Init+0x96>
 80332f4:	68fb      	ldr	r3, [r7, #12]
 80332f6:	2b10      	cmp	r3, #16
 80332f8:	d901      	bls.n	80332fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80332fa:	2301      	movs	r3, #1
 80332fc:	e0af      	b.n	803345e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80332fe:	687b      	ldr	r3, [r7, #4]
 8033300:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033304:	b2db      	uxtb	r3, r3
 8033306:	2b00      	cmp	r3, #0
 8033308:	d106      	bne.n	8033318 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 803330a:	687b      	ldr	r3, [r7, #4]
 803330c:	2200      	movs	r2, #0
 803330e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8033312:	6878      	ldr	r0, [r7, #4]
 8033314:	f7f6 fc46 	bl	8029ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8033318:	687b      	ldr	r3, [r7, #4]
 803331a:	2202      	movs	r2, #2
 803331c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033320:	687b      	ldr	r3, [r7, #4]
 8033322:	681b      	ldr	r3, [r3, #0]
 8033324:	681a      	ldr	r2, [r3, #0]
 8033326:	687b      	ldr	r3, [r7, #4]
 8033328:	681b      	ldr	r3, [r3, #0]
 803332a:	f022 0201 	bic.w	r2, r2, #1
 803332e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8033330:	687b      	ldr	r3, [r7, #4]
 8033332:	681b      	ldr	r3, [r3, #0]
 8033334:	689b      	ldr	r3, [r3, #8]
 8033336:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 803333a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 803333c:	687b      	ldr	r3, [r7, #4]
 803333e:	699b      	ldr	r3, [r3, #24]
 8033340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8033344:	d119      	bne.n	803337a <HAL_SPI_Init+0x112>
 8033346:	687b      	ldr	r3, [r7, #4]
 8033348:	685b      	ldr	r3, [r3, #4]
 803334a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803334e:	d103      	bne.n	8033358 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8033350:	687b      	ldr	r3, [r7, #4]
 8033352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033354:	2b00      	cmp	r3, #0
 8033356:	d008      	beq.n	803336a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8033358:	687b      	ldr	r3, [r7, #4]
 803335a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 803335c:	2b00      	cmp	r3, #0
 803335e:	d10c      	bne.n	803337a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8033360:	687b      	ldr	r3, [r7, #4]
 8033362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8033364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8033368:	d107      	bne.n	803337a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 803336a:	687b      	ldr	r3, [r7, #4]
 803336c:	681b      	ldr	r3, [r3, #0]
 803336e:	681a      	ldr	r2, [r3, #0]
 8033370:	687b      	ldr	r3, [r7, #4]
 8033372:	681b      	ldr	r3, [r3, #0]
 8033374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8033378:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 803337a:	687b      	ldr	r3, [r7, #4]
 803337c:	69da      	ldr	r2, [r3, #28]
 803337e:	687b      	ldr	r3, [r7, #4]
 8033380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033382:	431a      	orrs	r2, r3
 8033384:	68bb      	ldr	r3, [r7, #8]
 8033386:	431a      	orrs	r2, r3
 8033388:	687b      	ldr	r3, [r7, #4]
 803338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803338c:	ea42 0103 	orr.w	r1, r2, r3
 8033390:	687b      	ldr	r3, [r7, #4]
 8033392:	68da      	ldr	r2, [r3, #12]
 8033394:	687b      	ldr	r3, [r7, #4]
 8033396:	681b      	ldr	r3, [r3, #0]
 8033398:	430a      	orrs	r2, r1
 803339a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 803339c:	687b      	ldr	r3, [r7, #4]
 803339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80333a0:	687b      	ldr	r3, [r7, #4]
 80333a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80333a4:	431a      	orrs	r2, r3
 80333a6:	687b      	ldr	r3, [r7, #4]
 80333a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80333aa:	431a      	orrs	r2, r3
 80333ac:	687b      	ldr	r3, [r7, #4]
 80333ae:	699b      	ldr	r3, [r3, #24]
 80333b0:	431a      	orrs	r2, r3
 80333b2:	687b      	ldr	r3, [r7, #4]
 80333b4:	691b      	ldr	r3, [r3, #16]
 80333b6:	431a      	orrs	r2, r3
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	695b      	ldr	r3, [r3, #20]
 80333bc:	431a      	orrs	r2, r3
 80333be:	687b      	ldr	r3, [r7, #4]
 80333c0:	6a1b      	ldr	r3, [r3, #32]
 80333c2:	431a      	orrs	r2, r3
 80333c4:	687b      	ldr	r3, [r7, #4]
 80333c6:	685b      	ldr	r3, [r3, #4]
 80333c8:	431a      	orrs	r2, r3
 80333ca:	687b      	ldr	r3, [r7, #4]
 80333cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80333ce:	431a      	orrs	r2, r3
 80333d0:	687b      	ldr	r3, [r7, #4]
 80333d2:	689b      	ldr	r3, [r3, #8]
 80333d4:	431a      	orrs	r2, r3
 80333d6:	687b      	ldr	r3, [r7, #4]
 80333d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80333da:	ea42 0103 	orr.w	r1, r2, r3
 80333de:	687b      	ldr	r3, [r7, #4]
 80333e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80333e2:	687b      	ldr	r3, [r7, #4]
 80333e4:	681b      	ldr	r3, [r3, #0]
 80333e6:	430a      	orrs	r2, r1
 80333e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80333ea:	687b      	ldr	r3, [r7, #4]
 80333ec:	685b      	ldr	r3, [r3, #4]
 80333ee:	2b00      	cmp	r3, #0
 80333f0:	d113      	bne.n	803341a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80333f2:	687b      	ldr	r3, [r7, #4]
 80333f4:	681b      	ldr	r3, [r3, #0]
 80333f6:	689b      	ldr	r3, [r3, #8]
 80333f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80333fc:	687b      	ldr	r3, [r7, #4]
 80333fe:	681b      	ldr	r3, [r3, #0]
 8033400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033404:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8033406:	687b      	ldr	r3, [r7, #4]
 8033408:	681b      	ldr	r3, [r3, #0]
 803340a:	689b      	ldr	r3, [r3, #8]
 803340c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8033410:	687b      	ldr	r3, [r7, #4]
 8033412:	681b      	ldr	r3, [r3, #0]
 8033414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8033418:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803341a:	687b      	ldr	r3, [r7, #4]
 803341c:	681b      	ldr	r3, [r3, #0]
 803341e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033420:	687b      	ldr	r3, [r7, #4]
 8033422:	681b      	ldr	r3, [r3, #0]
 8033424:	f022 0201 	bic.w	r2, r2, #1
 8033428:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 803342a:	687b      	ldr	r3, [r7, #4]
 803342c:	685b      	ldr	r3, [r3, #4]
 803342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033432:	2b00      	cmp	r3, #0
 8033434:	d00a      	beq.n	803344c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8033436:	687b      	ldr	r3, [r7, #4]
 8033438:	681b      	ldr	r3, [r3, #0]
 803343a:	68db      	ldr	r3, [r3, #12]
 803343c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8033440:	687b      	ldr	r3, [r7, #4]
 8033442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8033444:	687b      	ldr	r3, [r7, #4]
 8033446:	681b      	ldr	r3, [r3, #0]
 8033448:	430a      	orrs	r2, r1
 803344a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 803344c:	687b      	ldr	r3, [r7, #4]
 803344e:	2200      	movs	r2, #0
 8033450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8033454:	687b      	ldr	r3, [r7, #4]
 8033456:	2201      	movs	r2, #1
 8033458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 803345c:	2300      	movs	r3, #0
}
 803345e:	4618      	mov	r0, r3
 8033460:	3710      	adds	r7, #16
 8033462:	46bd      	mov	sp, r7
 8033464:	bd80      	pop	{r7, pc}
 8033466:	bf00      	nop
 8033468:	40013000 	.word	0x40013000
 803346c:	40003800 	.word	0x40003800
 8033470:	40003c00 	.word	0x40003c00

08033474 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8033474:	b580      	push	{r7, lr}
 8033476:	b086      	sub	sp, #24
 8033478:	af00      	add	r7, sp, #0
 803347a:	60f8      	str	r0, [r7, #12]
 803347c:	60b9      	str	r1, [r7, #8]
 803347e:	4613      	mov	r3, r2
 8033480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033482:	2300      	movs	r3, #0
 8033484:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033486:	68fb      	ldr	r3, [r7, #12]
 8033488:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803348c:	2b01      	cmp	r3, #1
 803348e:	d101      	bne.n	8033494 <HAL_SPI_Transmit_DMA+0x20>
 8033490:	2302      	movs	r3, #2
 8033492:	e12c      	b.n	80336ee <HAL_SPI_Transmit_DMA+0x27a>
 8033494:	68fb      	ldr	r3, [r7, #12]
 8033496:	2201      	movs	r2, #1
 8033498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 803349c:	68fb      	ldr	r3, [r7, #12]
 803349e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80334a2:	b2db      	uxtb	r3, r3
 80334a4:	2b01      	cmp	r3, #1
 80334a6:	d007      	beq.n	80334b8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80334a8:	2302      	movs	r3, #2
 80334aa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80334ac:	68fb      	ldr	r3, [r7, #12]
 80334ae:	2200      	movs	r2, #0
 80334b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80334b4:	7dfb      	ldrb	r3, [r7, #23]
 80334b6:	e11a      	b.n	80336ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80334b8:	68bb      	ldr	r3, [r7, #8]
 80334ba:	2b00      	cmp	r3, #0
 80334bc:	d002      	beq.n	80334c4 <HAL_SPI_Transmit_DMA+0x50>
 80334be:	88fb      	ldrh	r3, [r7, #6]
 80334c0:	2b00      	cmp	r3, #0
 80334c2:	d107      	bne.n	80334d4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80334c4:	2301      	movs	r3, #1
 80334c6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80334c8:	68fb      	ldr	r3, [r7, #12]
 80334ca:	2200      	movs	r2, #0
 80334cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80334d0:	7dfb      	ldrb	r3, [r7, #23]
 80334d2:	e10c      	b.n	80336ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80334d4:	68fb      	ldr	r3, [r7, #12]
 80334d6:	2203      	movs	r2, #3
 80334d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80334dc:	68fb      	ldr	r3, [r7, #12]
 80334de:	2200      	movs	r2, #0
 80334e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80334e4:	68fb      	ldr	r3, [r7, #12]
 80334e6:	68ba      	ldr	r2, [r7, #8]
 80334e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80334ea:	68fb      	ldr	r3, [r7, #12]
 80334ec:	88fa      	ldrh	r2, [r7, #6]
 80334ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80334f2:	68fb      	ldr	r3, [r7, #12]
 80334f4:	88fa      	ldrh	r2, [r7, #6]
 80334f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80334fa:	68fb      	ldr	r3, [r7, #12]
 80334fc:	2200      	movs	r2, #0
 80334fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8033500:	68fb      	ldr	r3, [r7, #12]
 8033502:	2200      	movs	r2, #0
 8033504:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8033506:	68fb      	ldr	r3, [r7, #12]
 8033508:	2200      	movs	r2, #0
 803350a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 803350c:	68fb      	ldr	r3, [r7, #12]
 803350e:	2200      	movs	r2, #0
 8033510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8033514:	68fb      	ldr	r3, [r7, #12]
 8033516:	2200      	movs	r2, #0
 8033518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 803351c:	68fb      	ldr	r3, [r7, #12]
 803351e:	689b      	ldr	r3, [r3, #8]
 8033520:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033524:	d107      	bne.n	8033536 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8033526:	68fb      	ldr	r3, [r7, #12]
 8033528:	681b      	ldr	r3, [r3, #0]
 803352a:	681a      	ldr	r2, [r3, #0]
 803352c:	68fb      	ldr	r3, [r7, #12]
 803352e:	681b      	ldr	r3, [r3, #0]
 8033530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033534:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033536:	68fb      	ldr	r3, [r7, #12]
 8033538:	68db      	ldr	r3, [r3, #12]
 803353a:	2b0f      	cmp	r3, #15
 803353c:	d905      	bls.n	803354a <HAL_SPI_Transmit_DMA+0xd6>
 803353e:	68fb      	ldr	r3, [r7, #12]
 8033540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033542:	699b      	ldr	r3, [r3, #24]
 8033544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033548:	d10f      	bne.n	803356a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803354a:	68fb      	ldr	r3, [r7, #12]
 803354c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803354e:	2b07      	cmp	r3, #7
 8033550:	d913      	bls.n	803357a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033552:	68fb      	ldr	r3, [r7, #12]
 8033554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033556:	699b      	ldr	r3, [r3, #24]
 8033558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803355c:	d00d      	beq.n	803357a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803355e:	68fb      	ldr	r3, [r7, #12]
 8033560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033562:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033568:	d007      	beq.n	803357a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 803356a:	2301      	movs	r3, #1
 803356c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803356e:	68fb      	ldr	r3, [r7, #12]
 8033570:	2200      	movs	r2, #0
 8033572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033576:	7dfb      	ldrb	r3, [r7, #23]
 8033578:	e0b9      	b.n	80336ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 803357a:	68fb      	ldr	r3, [r7, #12]
 803357c:	68db      	ldr	r3, [r3, #12]
 803357e:	2b07      	cmp	r3, #7
 8033580:	d820      	bhi.n	80335c4 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033582:	68fb      	ldr	r3, [r7, #12]
 8033584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033586:	699b      	ldr	r3, [r3, #24]
 8033588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803358c:	d109      	bne.n	80335a2 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803358e:	68fb      	ldr	r3, [r7, #12]
 8033590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033594:	b29b      	uxth	r3, r3
 8033596:	3301      	adds	r3, #1
 8033598:	105b      	asrs	r3, r3, #1
 803359a:	b29a      	uxth	r2, r3
 803359c:	68fb      	ldr	r3, [r7, #12]
 803359e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80335a2:	68fb      	ldr	r3, [r7, #12]
 80335a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335a6:	699b      	ldr	r3, [r3, #24]
 80335a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80335ac:	d11e      	bne.n	80335ec <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80335ae:	68fb      	ldr	r3, [r7, #12]
 80335b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80335b4:	b29b      	uxth	r3, r3
 80335b6:	3303      	adds	r3, #3
 80335b8:	109b      	asrs	r3, r3, #2
 80335ba:	b29a      	uxth	r2, r3
 80335bc:	68fb      	ldr	r3, [r7, #12]
 80335be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80335c2:	e013      	b.n	80335ec <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80335c4:	68fb      	ldr	r3, [r7, #12]
 80335c6:	68db      	ldr	r3, [r3, #12]
 80335c8:	2b0f      	cmp	r3, #15
 80335ca:	d80f      	bhi.n	80335ec <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80335cc:	68fb      	ldr	r3, [r7, #12]
 80335ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335d0:	699b      	ldr	r3, [r3, #24]
 80335d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80335d6:	d109      	bne.n	80335ec <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80335d8:	68fb      	ldr	r3, [r7, #12]
 80335da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80335de:	b29b      	uxth	r3, r3
 80335e0:	3301      	adds	r3, #1
 80335e2:	105b      	asrs	r3, r3, #1
 80335e4:	b29a      	uxth	r2, r3
 80335e6:	68fb      	ldr	r3, [r7, #12]
 80335e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80335ec:	68fb      	ldr	r3, [r7, #12]
 80335ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335f0:	4a41      	ldr	r2, [pc, #260]	; (80336f8 <HAL_SPI_Transmit_DMA+0x284>)
 80335f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80335f4:	68fb      	ldr	r3, [r7, #12]
 80335f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335f8:	4a40      	ldr	r2, [pc, #256]	; (80336fc <HAL_SPI_Transmit_DMA+0x288>)
 80335fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80335fc:	68fb      	ldr	r3, [r7, #12]
 80335fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033600:	4a3f      	ldr	r2, [pc, #252]	; (8033700 <HAL_SPI_Transmit_DMA+0x28c>)
 8033602:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8033604:	68fb      	ldr	r3, [r7, #12]
 8033606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033608:	2200      	movs	r2, #0
 803360a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 803360c:	68fb      	ldr	r3, [r7, #12]
 803360e:	681b      	ldr	r3, [r3, #0]
 8033610:	689a      	ldr	r2, [r3, #8]
 8033612:	68fb      	ldr	r3, [r7, #12]
 8033614:	681b      	ldr	r3, [r3, #0]
 8033616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803361a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803361c:	68fb      	ldr	r3, [r7, #12]
 803361e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033620:	68fb      	ldr	r3, [r7, #12]
 8033622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033624:	4619      	mov	r1, r3
 8033626:	68fb      	ldr	r3, [r7, #12]
 8033628:	681b      	ldr	r3, [r3, #0]
 803362a:	3320      	adds	r3, #32
 803362c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 803362e:	68fb      	ldr	r3, [r7, #12]
 8033630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033634:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033636:	f7f8 fb65 	bl	802bd04 <HAL_DMA_Start_IT>
 803363a:	4603      	mov	r3, r0
 803363c:	2b00      	cmp	r3, #0
 803363e:	d013      	beq.n	8033668 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033640:	68fb      	ldr	r3, [r7, #12]
 8033642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033646:	f043 0210 	orr.w	r2, r3, #16
 803364a:	68fb      	ldr	r3, [r7, #12]
 803364c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033650:	68fb      	ldr	r3, [r7, #12]
 8033652:	2200      	movs	r2, #0
 8033654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033658:	68fb      	ldr	r3, [r7, #12]
 803365a:	2201      	movs	r2, #1
 803365c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033660:	2301      	movs	r3, #1
 8033662:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033664:	7dfb      	ldrb	r3, [r7, #23]
 8033666:	e042      	b.n	80336ee <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033668:	68fb      	ldr	r3, [r7, #12]
 803366a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803366c:	69db      	ldr	r3, [r3, #28]
 803366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033672:	d108      	bne.n	8033686 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033674:	68fb      	ldr	r3, [r7, #12]
 8033676:	681b      	ldr	r3, [r3, #0]
 8033678:	6859      	ldr	r1, [r3, #4]
 803367a:	68fb      	ldr	r3, [r7, #12]
 803367c:	681a      	ldr	r2, [r3, #0]
 803367e:	4b21      	ldr	r3, [pc, #132]	; (8033704 <HAL_SPI_Transmit_DMA+0x290>)
 8033680:	400b      	ands	r3, r1
 8033682:	6053      	str	r3, [r2, #4]
 8033684:	e009      	b.n	803369a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033686:	68fb      	ldr	r3, [r7, #12]
 8033688:	681b      	ldr	r3, [r3, #0]
 803368a:	685a      	ldr	r2, [r3, #4]
 803368c:	4b1d      	ldr	r3, [pc, #116]	; (8033704 <HAL_SPI_Transmit_DMA+0x290>)
 803368e:	4013      	ands	r3, r2
 8033690:	88f9      	ldrh	r1, [r7, #6]
 8033692:	68fa      	ldr	r2, [r7, #12]
 8033694:	6812      	ldr	r2, [r2, #0]
 8033696:	430b      	orrs	r3, r1
 8033698:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 803369a:	68fb      	ldr	r3, [r7, #12]
 803369c:	681b      	ldr	r3, [r3, #0]
 803369e:	689a      	ldr	r2, [r3, #8]
 80336a0:	68fb      	ldr	r3, [r7, #12]
 80336a2:	681b      	ldr	r3, [r3, #0]
 80336a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80336a8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80336aa:	68fb      	ldr	r3, [r7, #12]
 80336ac:	681b      	ldr	r3, [r3, #0]
 80336ae:	691a      	ldr	r2, [r3, #16]
 80336b0:	68fb      	ldr	r3, [r7, #12]
 80336b2:	681b      	ldr	r3, [r3, #0]
 80336b4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80336b8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80336ba:	68fb      	ldr	r3, [r7, #12]
 80336bc:	681b      	ldr	r3, [r3, #0]
 80336be:	681a      	ldr	r2, [r3, #0]
 80336c0:	68fb      	ldr	r3, [r7, #12]
 80336c2:	681b      	ldr	r3, [r3, #0]
 80336c4:	f042 0201 	orr.w	r2, r2, #1
 80336c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80336ca:	68fb      	ldr	r3, [r7, #12]
 80336cc:	685b      	ldr	r3, [r3, #4]
 80336ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80336d2:	d107      	bne.n	80336e4 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80336d4:	68fb      	ldr	r3, [r7, #12]
 80336d6:	681b      	ldr	r3, [r3, #0]
 80336d8:	681a      	ldr	r2, [r3, #0]
 80336da:	68fb      	ldr	r3, [r7, #12]
 80336dc:	681b      	ldr	r3, [r3, #0]
 80336de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80336e2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80336e4:	68fb      	ldr	r3, [r7, #12]
 80336e6:	2200      	movs	r2, #0
 80336e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80336ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80336ee:	4618      	mov	r0, r3
 80336f0:	3718      	adds	r7, #24
 80336f2:	46bd      	mov	sp, r7
 80336f4:	bd80      	pop	{r7, pc}
 80336f6:	bf00      	nop
 80336f8:	0803427f 	.word	0x0803427f
 80336fc:	080341ad 	.word	0x080341ad
 8033700:	080342d3 	.word	0x080342d3
 8033704:	ffff0000 	.word	0xffff0000

08033708 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8033708:	b580      	push	{r7, lr}
 803370a:	b086      	sub	sp, #24
 803370c:	af00      	add	r7, sp, #0
 803370e:	60f8      	str	r0, [r7, #12]
 8033710:	60b9      	str	r1, [r7, #8]
 8033712:	4613      	mov	r3, r2
 8033714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033716:	2300      	movs	r3, #0
 8033718:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 803371a:	68fb      	ldr	r3, [r7, #12]
 803371c:	689b      	ldr	r3, [r3, #8]
 803371e:	2b00      	cmp	r3, #0
 8033720:	d110      	bne.n	8033744 <HAL_SPI_Receive_DMA+0x3c>
 8033722:	68fb      	ldr	r3, [r7, #12]
 8033724:	685b      	ldr	r3, [r3, #4]
 8033726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803372a:	d10b      	bne.n	8033744 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 803372c:	68fb      	ldr	r3, [r7, #12]
 803372e:	2204      	movs	r2, #4
 8033730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8033734:	88fb      	ldrh	r3, [r7, #6]
 8033736:	68ba      	ldr	r2, [r7, #8]
 8033738:	68b9      	ldr	r1, [r7, #8]
 803373a:	68f8      	ldr	r0, [r7, #12]
 803373c:	f000 f940 	bl	80339c0 <HAL_SPI_TransmitReceive_DMA>
 8033740:	4603      	mov	r3, r0
 8033742:	e130      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033744:	68fb      	ldr	r3, [r7, #12]
 8033746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803374a:	2b01      	cmp	r3, #1
 803374c:	d101      	bne.n	8033752 <HAL_SPI_Receive_DMA+0x4a>
 803374e:	2302      	movs	r3, #2
 8033750:	e129      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
 8033752:	68fb      	ldr	r3, [r7, #12]
 8033754:	2201      	movs	r2, #1
 8033756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 803375a:	68fb      	ldr	r3, [r7, #12]
 803375c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033760:	b2db      	uxtb	r3, r3
 8033762:	2b01      	cmp	r3, #1
 8033764:	d007      	beq.n	8033776 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8033766:	2302      	movs	r3, #2
 8033768:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803376a:	68fb      	ldr	r3, [r7, #12]
 803376c:	2200      	movs	r2, #0
 803376e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033772:	7dfb      	ldrb	r3, [r7, #23]
 8033774:	e117      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8033776:	68bb      	ldr	r3, [r7, #8]
 8033778:	2b00      	cmp	r3, #0
 803377a:	d002      	beq.n	8033782 <HAL_SPI_Receive_DMA+0x7a>
 803377c:	88fb      	ldrh	r3, [r7, #6]
 803377e:	2b00      	cmp	r3, #0
 8033780:	d107      	bne.n	8033792 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8033782:	2301      	movs	r3, #1
 8033784:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033786:	68fb      	ldr	r3, [r7, #12]
 8033788:	2200      	movs	r2, #0
 803378a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803378e:	7dfb      	ldrb	r3, [r7, #23]
 8033790:	e109      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8033792:	68fb      	ldr	r3, [r7, #12]
 8033794:	2204      	movs	r2, #4
 8033796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 803379a:	68fb      	ldr	r3, [r7, #12]
 803379c:	2200      	movs	r2, #0
 803379e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80337a2:	68fb      	ldr	r3, [r7, #12]
 80337a4:	68ba      	ldr	r2, [r7, #8]
 80337a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80337a8:	68fb      	ldr	r3, [r7, #12]
 80337aa:	88fa      	ldrh	r2, [r7, #6]
 80337ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80337b0:	68fb      	ldr	r3, [r7, #12]
 80337b2:	88fa      	ldrh	r2, [r7, #6]
 80337b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80337b8:	68fb      	ldr	r3, [r7, #12]
 80337ba:	2200      	movs	r2, #0
 80337bc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80337be:	68fb      	ldr	r3, [r7, #12]
 80337c0:	2200      	movs	r2, #0
 80337c2:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80337c4:	68fb      	ldr	r3, [r7, #12]
 80337c6:	2200      	movs	r2, #0
 80337c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80337cc:	68fb      	ldr	r3, [r7, #12]
 80337ce:	2200      	movs	r2, #0
 80337d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80337d4:	68fb      	ldr	r3, [r7, #12]
 80337d6:	689b      	ldr	r3, [r3, #8]
 80337d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80337dc:	d107      	bne.n	80337ee <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 80337de:	68fb      	ldr	r3, [r7, #12]
 80337e0:	681b      	ldr	r3, [r3, #0]
 80337e2:	681a      	ldr	r2, [r3, #0]
 80337e4:	68fb      	ldr	r3, [r7, #12]
 80337e6:	681b      	ldr	r3, [r3, #0]
 80337e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80337ec:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80337ee:	68fb      	ldr	r3, [r7, #12]
 80337f0:	68db      	ldr	r3, [r3, #12]
 80337f2:	2b0f      	cmp	r3, #15
 80337f4:	d905      	bls.n	8033802 <HAL_SPI_Receive_DMA+0xfa>
 80337f6:	68fb      	ldr	r3, [r7, #12]
 80337f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80337fa:	699b      	ldr	r3, [r3, #24]
 80337fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033800:	d10f      	bne.n	8033822 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033802:	68fb      	ldr	r3, [r7, #12]
 8033804:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033806:	2b07      	cmp	r3, #7
 8033808:	d913      	bls.n	8033832 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803380a:	68fb      	ldr	r3, [r7, #12]
 803380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803380e:	699b      	ldr	r3, [r3, #24]
 8033810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033814:	d00d      	beq.n	8033832 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033816:	68fb      	ldr	r3, [r7, #12]
 8033818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803381a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033820:	d007      	beq.n	8033832 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033822:	2301      	movs	r3, #1
 8033824:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033826:	68fb      	ldr	r3, [r7, #12]
 8033828:	2200      	movs	r2, #0
 803382a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803382e:	7dfb      	ldrb	r3, [r7, #23]
 8033830:	e0b9      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033832:	68fb      	ldr	r3, [r7, #12]
 8033834:	681b      	ldr	r3, [r3, #0]
 8033836:	689a      	ldr	r2, [r3, #8]
 8033838:	68fb      	ldr	r3, [r7, #12]
 803383a:	681b      	ldr	r3, [r3, #0]
 803383c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8033840:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033842:	68fb      	ldr	r3, [r7, #12]
 8033844:	68db      	ldr	r3, [r3, #12]
 8033846:	2b07      	cmp	r3, #7
 8033848:	d820      	bhi.n	803388c <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 803384a:	68fb      	ldr	r3, [r7, #12]
 803384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803384e:	699b      	ldr	r3, [r3, #24]
 8033850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033854:	d109      	bne.n	803386a <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033856:	68fb      	ldr	r3, [r7, #12]
 8033858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803385c:	b29b      	uxth	r3, r3
 803385e:	3301      	adds	r3, #1
 8033860:	105b      	asrs	r3, r3, #1
 8033862:	b29a      	uxth	r2, r3
 8033864:	68fb      	ldr	r3, [r7, #12]
 8033866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803386a:	68fb      	ldr	r3, [r7, #12]
 803386c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803386e:	699b      	ldr	r3, [r3, #24]
 8033870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033874:	d11e      	bne.n	80338b4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033876:	68fb      	ldr	r3, [r7, #12]
 8033878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803387c:	b29b      	uxth	r3, r3
 803387e:	3303      	adds	r3, #3
 8033880:	109b      	asrs	r3, r3, #2
 8033882:	b29a      	uxth	r2, r3
 8033884:	68fb      	ldr	r3, [r7, #12]
 8033886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 803388a:	e013      	b.n	80338b4 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 803388c:	68fb      	ldr	r3, [r7, #12]
 803388e:	68db      	ldr	r3, [r3, #12]
 8033890:	2b0f      	cmp	r3, #15
 8033892:	d80f      	bhi.n	80338b4 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033894:	68fb      	ldr	r3, [r7, #12]
 8033896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033898:	699b      	ldr	r3, [r3, #24]
 803389a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803389e:	d109      	bne.n	80338b4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80338a0:	68fb      	ldr	r3, [r7, #12]
 80338a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338a6:	b29b      	uxth	r3, r3
 80338a8:	3301      	adds	r3, #1
 80338aa:	105b      	asrs	r3, r3, #1
 80338ac:	b29a      	uxth	r2, r3
 80338ae:	68fb      	ldr	r3, [r7, #12]
 80338b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80338b4:	68fb      	ldr	r3, [r7, #12]
 80338b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338b8:	4a3d      	ldr	r2, [pc, #244]	; (80339b0 <HAL_SPI_Receive_DMA+0x2a8>)
 80338ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80338bc:	68fb      	ldr	r3, [r7, #12]
 80338be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338c0:	4a3c      	ldr	r2, [pc, #240]	; (80339b4 <HAL_SPI_Receive_DMA+0x2ac>)
 80338c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80338c4:	68fb      	ldr	r3, [r7, #12]
 80338c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338c8:	4a3b      	ldr	r2, [pc, #236]	; (80339b8 <HAL_SPI_Receive_DMA+0x2b0>)
 80338ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80338cc:	68fb      	ldr	r3, [r7, #12]
 80338ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338d0:	2200      	movs	r2, #0
 80338d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80338d4:	68fb      	ldr	r3, [r7, #12]
 80338d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80338d8:	68fb      	ldr	r3, [r7, #12]
 80338da:	681b      	ldr	r3, [r3, #0]
 80338dc:	3330      	adds	r3, #48	; 0x30
 80338de:	4619      	mov	r1, r3
 80338e0:	68fb      	ldr	r3, [r7, #12]
 80338e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80338e4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80338e6:	68fb      	ldr	r3, [r7, #12]
 80338e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80338ee:	f7f8 fa09 	bl	802bd04 <HAL_DMA_Start_IT>
 80338f2:	4603      	mov	r3, r0
 80338f4:	2b00      	cmp	r3, #0
 80338f6:	d013      	beq.n	8033920 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80338f8:	68fb      	ldr	r3, [r7, #12]
 80338fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80338fe:	f043 0210 	orr.w	r2, r3, #16
 8033902:	68fb      	ldr	r3, [r7, #12]
 8033904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033908:	68fb      	ldr	r3, [r7, #12]
 803390a:	2200      	movs	r2, #0
 803390c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033910:	68fb      	ldr	r3, [r7, #12]
 8033912:	2201      	movs	r2, #1
 8033914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033918:	2301      	movs	r3, #1
 803391a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 803391c:	7dfb      	ldrb	r3, [r7, #23]
 803391e:	e042      	b.n	80339a6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8033920:	68fb      	ldr	r3, [r7, #12]
 8033922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033924:	69db      	ldr	r3, [r3, #28]
 8033926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803392a:	d108      	bne.n	803393e <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 803392c:	68fb      	ldr	r3, [r7, #12]
 803392e:	681b      	ldr	r3, [r3, #0]
 8033930:	6859      	ldr	r1, [r3, #4]
 8033932:	68fb      	ldr	r3, [r7, #12]
 8033934:	681a      	ldr	r2, [r3, #0]
 8033936:	4b21      	ldr	r3, [pc, #132]	; (80339bc <HAL_SPI_Receive_DMA+0x2b4>)
 8033938:	400b      	ands	r3, r1
 803393a:	6053      	str	r3, [r2, #4]
 803393c:	e009      	b.n	8033952 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 803393e:	68fb      	ldr	r3, [r7, #12]
 8033940:	681b      	ldr	r3, [r3, #0]
 8033942:	685a      	ldr	r2, [r3, #4]
 8033944:	4b1d      	ldr	r3, [pc, #116]	; (80339bc <HAL_SPI_Receive_DMA+0x2b4>)
 8033946:	4013      	ands	r3, r2
 8033948:	88f9      	ldrh	r1, [r7, #6]
 803394a:	68fa      	ldr	r2, [r7, #12]
 803394c:	6812      	ldr	r2, [r2, #0]
 803394e:	430b      	orrs	r3, r1
 8033950:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033952:	68fb      	ldr	r3, [r7, #12]
 8033954:	681b      	ldr	r3, [r3, #0]
 8033956:	689a      	ldr	r2, [r3, #8]
 8033958:	68fb      	ldr	r3, [r7, #12]
 803395a:	681b      	ldr	r3, [r3, #0]
 803395c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033960:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8033962:	68fb      	ldr	r3, [r7, #12]
 8033964:	681b      	ldr	r3, [r3, #0]
 8033966:	691a      	ldr	r2, [r3, #16]
 8033968:	68fb      	ldr	r3, [r7, #12]
 803396a:	681b      	ldr	r3, [r3, #0]
 803396c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8033970:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033972:	68fb      	ldr	r3, [r7, #12]
 8033974:	681b      	ldr	r3, [r3, #0]
 8033976:	681a      	ldr	r2, [r3, #0]
 8033978:	68fb      	ldr	r3, [r7, #12]
 803397a:	681b      	ldr	r3, [r3, #0]
 803397c:	f042 0201 	orr.w	r2, r2, #1
 8033980:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033982:	68fb      	ldr	r3, [r7, #12]
 8033984:	685b      	ldr	r3, [r3, #4]
 8033986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803398a:	d107      	bne.n	803399c <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 803398c:	68fb      	ldr	r3, [r7, #12]
 803398e:	681b      	ldr	r3, [r3, #0]
 8033990:	681a      	ldr	r2, [r3, #0]
 8033992:	68fb      	ldr	r3, [r7, #12]
 8033994:	681b      	ldr	r3, [r3, #0]
 8033996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803399a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 803399c:	68fb      	ldr	r3, [r7, #12]
 803399e:	2200      	movs	r2, #0
 80339a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80339a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80339a6:	4618      	mov	r0, r3
 80339a8:	3718      	adds	r7, #24
 80339aa:	46bd      	mov	sp, r7
 80339ac:	bd80      	pop	{r7, pc}
 80339ae:	bf00      	nop
 80339b0:	0803429b 	.word	0x0803429b
 80339b4:	080341f3 	.word	0x080341f3
 80339b8:	080342d3 	.word	0x080342d3
 80339bc:	ffff0000 	.word	0xffff0000

080339c0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80339c0:	b580      	push	{r7, lr}
 80339c2:	b086      	sub	sp, #24
 80339c4:	af00      	add	r7, sp, #0
 80339c6:	60f8      	str	r0, [r7, #12]
 80339c8:	60b9      	str	r1, [r7, #8]
 80339ca:	607a      	str	r2, [r7, #4]
 80339cc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80339ce:	2300      	movs	r3, #0
 80339d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80339d2:	68fb      	ldr	r3, [r7, #12]
 80339d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80339d8:	2b01      	cmp	r3, #1
 80339da:	d101      	bne.n	80339e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80339dc:	2302      	movs	r3, #2
 80339de:	e1b4      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
 80339e0:	68fb      	ldr	r3, [r7, #12]
 80339e2:	2201      	movs	r2, #1
 80339e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 80339e8:	68fb      	ldr	r3, [r7, #12]
 80339ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80339ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 80339f0:	68fb      	ldr	r3, [r7, #12]
 80339f2:	685b      	ldr	r3, [r3, #4]
 80339f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80339f6:	7dbb      	ldrb	r3, [r7, #22]
 80339f8:	2b01      	cmp	r3, #1
 80339fa:	d012      	beq.n	8033a22 <HAL_SPI_TransmitReceive_DMA+0x62>
 80339fc:	693b      	ldr	r3, [r7, #16]
 80339fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033a02:	d106      	bne.n	8033a12 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a04:	68fb      	ldr	r3, [r7, #12]
 8033a06:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8033a08:	2b00      	cmp	r3, #0
 8033a0a:	d102      	bne.n	8033a12 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a0c:	7dbb      	ldrb	r3, [r7, #22]
 8033a0e:	2b04      	cmp	r3, #4
 8033a10:	d007      	beq.n	8033a22 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8033a12:	2302      	movs	r3, #2
 8033a14:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a16:	68fb      	ldr	r3, [r7, #12]
 8033a18:	2200      	movs	r2, #0
 8033a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a1e:	7dfb      	ldrb	r3, [r7, #23]
 8033a20:	e193      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8033a22:	68bb      	ldr	r3, [r7, #8]
 8033a24:	2b00      	cmp	r3, #0
 8033a26:	d005      	beq.n	8033a34 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a28:	687b      	ldr	r3, [r7, #4]
 8033a2a:	2b00      	cmp	r3, #0
 8033a2c:	d002      	beq.n	8033a34 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a2e:	887b      	ldrh	r3, [r7, #2]
 8033a30:	2b00      	cmp	r3, #0
 8033a32:	d107      	bne.n	8033a44 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8033a34:	2301      	movs	r3, #1
 8033a36:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a38:	68fb      	ldr	r3, [r7, #12]
 8033a3a:	2200      	movs	r2, #0
 8033a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a40:	7dfb      	ldrb	r3, [r7, #23]
 8033a42:	e182      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8033a44:	68fb      	ldr	r3, [r7, #12]
 8033a46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033a4a:	b2db      	uxtb	r3, r3
 8033a4c:	2b04      	cmp	r3, #4
 8033a4e:	d003      	beq.n	8033a58 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8033a50:	68fb      	ldr	r3, [r7, #12]
 8033a52:	2205      	movs	r2, #5
 8033a54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033a58:	68fb      	ldr	r3, [r7, #12]
 8033a5a:	2200      	movs	r2, #0
 8033a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8033a60:	68fb      	ldr	r3, [r7, #12]
 8033a62:	68ba      	ldr	r2, [r7, #8]
 8033a64:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8033a66:	68fb      	ldr	r3, [r7, #12]
 8033a68:	887a      	ldrh	r2, [r7, #2]
 8033a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033a6e:	68fb      	ldr	r3, [r7, #12]
 8033a70:	887a      	ldrh	r2, [r7, #2]
 8033a72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8033a76:	68fb      	ldr	r3, [r7, #12]
 8033a78:	687a      	ldr	r2, [r7, #4]
 8033a7a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8033a7c:	68fb      	ldr	r3, [r7, #12]
 8033a7e:	887a      	ldrh	r2, [r7, #2]
 8033a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8033a84:	68fb      	ldr	r3, [r7, #12]
 8033a86:	887a      	ldrh	r2, [r7, #2]
 8033a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8033a8c:	68fb      	ldr	r3, [r7, #12]
 8033a8e:	2200      	movs	r2, #0
 8033a90:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8033a92:	68fb      	ldr	r3, [r7, #12]
 8033a94:	2200      	movs	r2, #0
 8033a96:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8033a98:	68fb      	ldr	r3, [r7, #12]
 8033a9a:	681b      	ldr	r3, [r3, #0]
 8033a9c:	689a      	ldr	r2, [r3, #8]
 8033a9e:	68fb      	ldr	r3, [r7, #12]
 8033aa0:	681b      	ldr	r3, [r3, #0]
 8033aa2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033aa6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033aa8:	68fb      	ldr	r3, [r7, #12]
 8033aaa:	68db      	ldr	r3, [r3, #12]
 8033aac:	2b0f      	cmp	r3, #15
 8033aae:	d905      	bls.n	8033abc <HAL_SPI_TransmitReceive_DMA+0xfc>
 8033ab0:	68fb      	ldr	r3, [r7, #12]
 8033ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ab4:	699b      	ldr	r3, [r3, #24]
 8033ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033aba:	d10f      	bne.n	8033adc <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033abc:	68fb      	ldr	r3, [r7, #12]
 8033abe:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033ac0:	2b07      	cmp	r3, #7
 8033ac2:	d913      	bls.n	8033aec <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033ac4:	68fb      	ldr	r3, [r7, #12]
 8033ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ac8:	699b      	ldr	r3, [r3, #24]
 8033aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033ace:	d00d      	beq.n	8033aec <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033ad0:	68fb      	ldr	r3, [r7, #12]
 8033ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ad4:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033ada:	d007      	beq.n	8033aec <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033adc:	2301      	movs	r3, #1
 8033ade:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033ae0:	68fb      	ldr	r3, [r7, #12]
 8033ae2:	2200      	movs	r2, #0
 8033ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033ae8:	7dfb      	ldrb	r3, [r7, #23]
 8033aea:	e12e      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033aec:	68fb      	ldr	r3, [r7, #12]
 8033aee:	68db      	ldr	r3, [r3, #12]
 8033af0:	2b07      	cmp	r3, #7
 8033af2:	d840      	bhi.n	8033b76 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033af4:	68fb      	ldr	r3, [r7, #12]
 8033af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033af8:	699b      	ldr	r3, [r3, #24]
 8033afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033afe:	d109      	bne.n	8033b14 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b00:	68fb      	ldr	r3, [r7, #12]
 8033b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b06:	b29b      	uxth	r3, r3
 8033b08:	3301      	adds	r3, #1
 8033b0a:	105b      	asrs	r3, r3, #1
 8033b0c:	b29a      	uxth	r2, r3
 8033b0e:	68fb      	ldr	r3, [r7, #12]
 8033b10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b14:	68fb      	ldr	r3, [r7, #12]
 8033b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b18:	699b      	ldr	r3, [r3, #24]
 8033b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b1e:	d109      	bne.n	8033b34 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033b20:	68fb      	ldr	r3, [r7, #12]
 8033b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b26:	b29b      	uxth	r3, r3
 8033b28:	3303      	adds	r3, #3
 8033b2a:	109b      	asrs	r3, r3, #2
 8033b2c:	b29a      	uxth	r2, r3
 8033b2e:	68fb      	ldr	r3, [r7, #12]
 8033b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033b34:	68fb      	ldr	r3, [r7, #12]
 8033b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b38:	699b      	ldr	r3, [r3, #24]
 8033b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b3e:	d109      	bne.n	8033b54 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b40:	68fb      	ldr	r3, [r7, #12]
 8033b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b46:	b29b      	uxth	r3, r3
 8033b48:	3301      	adds	r3, #1
 8033b4a:	105b      	asrs	r3, r3, #1
 8033b4c:	b29a      	uxth	r2, r3
 8033b4e:	68fb      	ldr	r3, [r7, #12]
 8033b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b54:	68fb      	ldr	r3, [r7, #12]
 8033b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b58:	699b      	ldr	r3, [r3, #24]
 8033b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b5e:	d12e      	bne.n	8033bbe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033b60:	68fb      	ldr	r3, [r7, #12]
 8033b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b66:	b29b      	uxth	r3, r3
 8033b68:	3303      	adds	r3, #3
 8033b6a:	109b      	asrs	r3, r3, #2
 8033b6c:	b29a      	uxth	r2, r3
 8033b6e:	68fb      	ldr	r3, [r7, #12]
 8033b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8033b74:	e023      	b.n	8033bbe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8033b76:	68fb      	ldr	r3, [r7, #12]
 8033b78:	68db      	ldr	r3, [r3, #12]
 8033b7a:	2b0f      	cmp	r3, #15
 8033b7c:	d81f      	bhi.n	8033bbe <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b7e:	68fb      	ldr	r3, [r7, #12]
 8033b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b82:	699b      	ldr	r3, [r3, #24]
 8033b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b88:	d109      	bne.n	8033b9e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b8a:	68fb      	ldr	r3, [r7, #12]
 8033b8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b90:	b29b      	uxth	r3, r3
 8033b92:	3301      	adds	r3, #1
 8033b94:	105b      	asrs	r3, r3, #1
 8033b96:	b29a      	uxth	r2, r3
 8033b98:	68fb      	ldr	r3, [r7, #12]
 8033b9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b9e:	68fb      	ldr	r3, [r7, #12]
 8033ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ba2:	699b      	ldr	r3, [r3, #24]
 8033ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033ba8:	d109      	bne.n	8033bbe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033baa:	68fb      	ldr	r3, [r7, #12]
 8033bac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033bb0:	b29b      	uxth	r3, r3
 8033bb2:	3301      	adds	r3, #1
 8033bb4:	105b      	asrs	r3, r3, #1
 8033bb6:	b29a      	uxth	r2, r3
 8033bb8:	68fb      	ldr	r3, [r7, #12]
 8033bba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8033bbe:	68fb      	ldr	r3, [r7, #12]
 8033bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033bc4:	b2db      	uxtb	r3, r3
 8033bc6:	2b04      	cmp	r3, #4
 8033bc8:	d108      	bne.n	8033bdc <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8033bca:	68fb      	ldr	r3, [r7, #12]
 8033bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bce:	4a61      	ldr	r2, [pc, #388]	; (8033d54 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8033bd0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8033bd2:	68fb      	ldr	r3, [r7, #12]
 8033bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bd6:	4a60      	ldr	r2, [pc, #384]	; (8033d58 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8033bd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8033bda:	e007      	b.n	8033bec <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8033bdc:	68fb      	ldr	r3, [r7, #12]
 8033bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033be0:	4a5e      	ldr	r2, [pc, #376]	; (8033d5c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8033be2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8033be4:	68fb      	ldr	r3, [r7, #12]
 8033be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033be8:	4a5d      	ldr	r2, [pc, #372]	; (8033d60 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8033bea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033bec:	68fb      	ldr	r3, [r7, #12]
 8033bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bf0:	4a5c      	ldr	r2, [pc, #368]	; (8033d64 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8033bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033bf4:	68fb      	ldr	r3, [r7, #12]
 8033bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bf8:	2200      	movs	r2, #0
 8033bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033bfc:	68fb      	ldr	r3, [r7, #12]
 8033bfe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033c00:	68fb      	ldr	r3, [r7, #12]
 8033c02:	681b      	ldr	r3, [r3, #0]
 8033c04:	3330      	adds	r3, #48	; 0x30
 8033c06:	4619      	mov	r1, r3
 8033c08:	68fb      	ldr	r3, [r7, #12]
 8033c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033c0c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8033c0e:	68fb      	ldr	r3, [r7, #12]
 8033c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033c14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033c16:	f7f8 f875 	bl	802bd04 <HAL_DMA_Start_IT>
 8033c1a:	4603      	mov	r3, r0
 8033c1c:	2b00      	cmp	r3, #0
 8033c1e:	d013      	beq.n	8033c48 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033c20:	68fb      	ldr	r3, [r7, #12]
 8033c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033c26:	f043 0210 	orr.w	r2, r3, #16
 8033c2a:	68fb      	ldr	r3, [r7, #12]
 8033c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033c30:	68fb      	ldr	r3, [r7, #12]
 8033c32:	2200      	movs	r2, #0
 8033c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033c38:	68fb      	ldr	r3, [r7, #12]
 8033c3a:	2201      	movs	r2, #1
 8033c3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033c40:	2301      	movs	r3, #1
 8033c42:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033c44:	7dfb      	ldrb	r3, [r7, #23]
 8033c46:	e080      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033c48:	68fb      	ldr	r3, [r7, #12]
 8033c4a:	681b      	ldr	r3, [r3, #0]
 8033c4c:	689a      	ldr	r2, [r3, #8]
 8033c4e:	68fb      	ldr	r3, [r7, #12]
 8033c50:	681b      	ldr	r3, [r3, #0]
 8033c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033c56:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8033c58:	68fb      	ldr	r3, [r7, #12]
 8033c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c5c:	2200      	movs	r2, #0
 8033c5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8033c60:	68fb      	ldr	r3, [r7, #12]
 8033c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c64:	2200      	movs	r2, #0
 8033c66:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8033c68:	68fb      	ldr	r3, [r7, #12]
 8033c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c6c:	2200      	movs	r2, #0
 8033c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8033c70:	68fb      	ldr	r3, [r7, #12]
 8033c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c74:	2200      	movs	r2, #0
 8033c76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033c78:	68fb      	ldr	r3, [r7, #12]
 8033c7a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033c7c:	68fb      	ldr	r3, [r7, #12]
 8033c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033c80:	4619      	mov	r1, r3
 8033c82:	68fb      	ldr	r3, [r7, #12]
 8033c84:	681b      	ldr	r3, [r3, #0]
 8033c86:	3320      	adds	r3, #32
 8033c88:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033c8a:	68fb      	ldr	r3, [r7, #12]
 8033c8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033c90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033c92:	f7f8 f837 	bl	802bd04 <HAL_DMA_Start_IT>
 8033c96:	4603      	mov	r3, r0
 8033c98:	2b00      	cmp	r3, #0
 8033c9a:	d013      	beq.n	8033cc4 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033c9c:	68fb      	ldr	r3, [r7, #12]
 8033c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033ca2:	f043 0210 	orr.w	r2, r3, #16
 8033ca6:	68fb      	ldr	r3, [r7, #12]
 8033ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033cac:	68fb      	ldr	r3, [r7, #12]
 8033cae:	2200      	movs	r2, #0
 8033cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033cb4:	68fb      	ldr	r3, [r7, #12]
 8033cb6:	2201      	movs	r2, #1
 8033cb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033cbc:	2301      	movs	r3, #1
 8033cbe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033cc0:	7dfb      	ldrb	r3, [r7, #23]
 8033cc2:	e042      	b.n	8033d4a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033cc4:	68fb      	ldr	r3, [r7, #12]
 8033cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033cc8:	69db      	ldr	r3, [r3, #28]
 8033cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033cce:	d108      	bne.n	8033ce2 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033cd0:	68fb      	ldr	r3, [r7, #12]
 8033cd2:	681b      	ldr	r3, [r3, #0]
 8033cd4:	6859      	ldr	r1, [r3, #4]
 8033cd6:	68fb      	ldr	r3, [r7, #12]
 8033cd8:	681a      	ldr	r2, [r3, #0]
 8033cda:	4b23      	ldr	r3, [pc, #140]	; (8033d68 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033cdc:	400b      	ands	r3, r1
 8033cde:	6053      	str	r3, [r2, #4]
 8033ce0:	e009      	b.n	8033cf6 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033ce2:	68fb      	ldr	r3, [r7, #12]
 8033ce4:	681b      	ldr	r3, [r3, #0]
 8033ce6:	685a      	ldr	r2, [r3, #4]
 8033ce8:	4b1f      	ldr	r3, [pc, #124]	; (8033d68 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033cea:	4013      	ands	r3, r2
 8033cec:	8879      	ldrh	r1, [r7, #2]
 8033cee:	68fa      	ldr	r2, [r7, #12]
 8033cf0:	6812      	ldr	r2, [r2, #0]
 8033cf2:	430b      	orrs	r3, r1
 8033cf4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033cf6:	68fb      	ldr	r3, [r7, #12]
 8033cf8:	681b      	ldr	r3, [r3, #0]
 8033cfa:	689a      	ldr	r2, [r3, #8]
 8033cfc:	68fb      	ldr	r3, [r7, #12]
 8033cfe:	681b      	ldr	r3, [r3, #0]
 8033d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033d04:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033d06:	68fb      	ldr	r3, [r7, #12]
 8033d08:	681b      	ldr	r3, [r3, #0]
 8033d0a:	691a      	ldr	r2, [r3, #16]
 8033d0c:	68fb      	ldr	r3, [r7, #12]
 8033d0e:	681b      	ldr	r3, [r3, #0]
 8033d10:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8033d14:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033d16:	68fb      	ldr	r3, [r7, #12]
 8033d18:	681b      	ldr	r3, [r3, #0]
 8033d1a:	681a      	ldr	r2, [r3, #0]
 8033d1c:	68fb      	ldr	r3, [r7, #12]
 8033d1e:	681b      	ldr	r3, [r3, #0]
 8033d20:	f042 0201 	orr.w	r2, r2, #1
 8033d24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033d26:	68fb      	ldr	r3, [r7, #12]
 8033d28:	685b      	ldr	r3, [r3, #4]
 8033d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033d2e:	d107      	bne.n	8033d40 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033d30:	68fb      	ldr	r3, [r7, #12]
 8033d32:	681b      	ldr	r3, [r3, #0]
 8033d34:	681a      	ldr	r2, [r3, #0]
 8033d36:	68fb      	ldr	r3, [r7, #12]
 8033d38:	681b      	ldr	r3, [r3, #0]
 8033d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033d3e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033d40:	68fb      	ldr	r3, [r7, #12]
 8033d42:	2200      	movs	r2, #0
 8033d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8033d4a:	4618      	mov	r0, r3
 8033d4c:	3718      	adds	r7, #24
 8033d4e:	46bd      	mov	sp, r7
 8033d50:	bd80      	pop	{r7, pc}
 8033d52:	bf00      	nop
 8033d54:	0803429b 	.word	0x0803429b
 8033d58:	080341f3 	.word	0x080341f3
 8033d5c:	080342b7 	.word	0x080342b7
 8033d60:	08034239 	.word	0x08034239
 8033d64:	080342d3 	.word	0x080342d3
 8033d68:	ffff0000 	.word	0xffff0000

08033d6c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8033d6c:	b580      	push	{r7, lr}
 8033d6e:	b08a      	sub	sp, #40	; 0x28
 8033d70:	af00      	add	r7, sp, #0
 8033d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8033d74:	687b      	ldr	r3, [r7, #4]
 8033d76:	681b      	ldr	r3, [r3, #0]
 8033d78:	691b      	ldr	r3, [r3, #16]
 8033d7a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8033d7c:	687b      	ldr	r3, [r7, #4]
 8033d7e:	681b      	ldr	r3, [r3, #0]
 8033d80:	695b      	ldr	r3, [r3, #20]
 8033d82:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8033d84:	6a3a      	ldr	r2, [r7, #32]
 8033d86:	69fb      	ldr	r3, [r7, #28]
 8033d88:	4013      	ands	r3, r2
 8033d8a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8033d8c:	687b      	ldr	r3, [r7, #4]
 8033d8e:	681b      	ldr	r3, [r3, #0]
 8033d90:	689b      	ldr	r3, [r3, #8]
 8033d92:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8033d94:	2300      	movs	r3, #0
 8033d96:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8033d98:	687b      	ldr	r3, [r7, #4]
 8033d9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033d9e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8033da0:	687b      	ldr	r3, [r7, #4]
 8033da2:	681b      	ldr	r3, [r3, #0]
 8033da4:	3330      	adds	r3, #48	; 0x30
 8033da6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033da8:	69bb      	ldr	r3, [r7, #24]
 8033daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033dae:	2b00      	cmp	r3, #0
 8033db0:	d113      	bne.n	8033dda <HAL_SPI_IRQHandler+0x6e>
 8033db2:	69bb      	ldr	r3, [r7, #24]
 8033db4:	f003 0320 	and.w	r3, r3, #32
 8033db8:	2b00      	cmp	r3, #0
 8033dba:	d10e      	bne.n	8033dda <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8033dbc:	69bb      	ldr	r3, [r7, #24]
 8033dbe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033dc2:	2b00      	cmp	r3, #0
 8033dc4:	d009      	beq.n	8033dda <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8033dc6:	687b      	ldr	r3, [r7, #4]
 8033dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033dca:	6878      	ldr	r0, [r7, #4]
 8033dcc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8033dce:	687b      	ldr	r3, [r7, #4]
 8033dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033dd2:	6878      	ldr	r0, [r7, #4]
 8033dd4:	4798      	blx	r3
    handled = 1UL;
 8033dd6:	2301      	movs	r3, #1
 8033dd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033dda:	69bb      	ldr	r3, [r7, #24]
 8033ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033de0:	2b00      	cmp	r3, #0
 8033de2:	d10f      	bne.n	8033e04 <HAL_SPI_IRQHandler+0x98>
 8033de4:	69bb      	ldr	r3, [r7, #24]
 8033de6:	f003 0301 	and.w	r3, r3, #1
 8033dea:	2b00      	cmp	r3, #0
 8033dec:	d00a      	beq.n	8033e04 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033dee:	69bb      	ldr	r3, [r7, #24]
 8033df0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033df4:	2b00      	cmp	r3, #0
 8033df6:	d105      	bne.n	8033e04 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8033df8:	687b      	ldr	r3, [r7, #4]
 8033dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033dfc:	6878      	ldr	r0, [r7, #4]
 8033dfe:	4798      	blx	r3
    handled = 1UL;
 8033e00:	2301      	movs	r3, #1
 8033e02:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e04:	69bb      	ldr	r3, [r7, #24]
 8033e06:	f003 0320 	and.w	r3, r3, #32
 8033e0a:	2b00      	cmp	r3, #0
 8033e0c:	d10f      	bne.n	8033e2e <HAL_SPI_IRQHandler+0xc2>
 8033e0e:	69bb      	ldr	r3, [r7, #24]
 8033e10:	f003 0302 	and.w	r3, r3, #2
 8033e14:	2b00      	cmp	r3, #0
 8033e16:	d00a      	beq.n	8033e2e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033e18:	69bb      	ldr	r3, [r7, #24]
 8033e1a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e1e:	2b00      	cmp	r3, #0
 8033e20:	d105      	bne.n	8033e2e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8033e22:	687b      	ldr	r3, [r7, #4]
 8033e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033e26:	6878      	ldr	r0, [r7, #4]
 8033e28:	4798      	blx	r3
    handled = 1UL;
 8033e2a:	2301      	movs	r3, #1
 8033e2c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8033e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e30:	2b00      	cmp	r3, #0
 8033e32:	f040 815a 	bne.w	80340ea <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8033e36:	69bb      	ldr	r3, [r7, #24]
 8033e38:	f003 0308 	and.w	r3, r3, #8
 8033e3c:	2b00      	cmp	r3, #0
 8033e3e:	f000 808b 	beq.w	8033f58 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8033e42:	687b      	ldr	r3, [r7, #4]
 8033e44:	681b      	ldr	r3, [r3, #0]
 8033e46:	699a      	ldr	r2, [r3, #24]
 8033e48:	687b      	ldr	r3, [r7, #4]
 8033e4a:	681b      	ldr	r3, [r3, #0]
 8033e4c:	f042 0208 	orr.w	r2, r2, #8
 8033e50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8033e52:	687b      	ldr	r3, [r7, #4]
 8033e54:	681b      	ldr	r3, [r3, #0]
 8033e56:	699a      	ldr	r2, [r3, #24]
 8033e58:	687b      	ldr	r3, [r7, #4]
 8033e5a:	681b      	ldr	r3, [r3, #0]
 8033e5c:	f042 0210 	orr.w	r2, r2, #16
 8033e60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033e62:	687b      	ldr	r3, [r7, #4]
 8033e64:	681b      	ldr	r3, [r3, #0]
 8033e66:	699a      	ldr	r2, [r3, #24]
 8033e68:	687b      	ldr	r3, [r7, #4]
 8033e6a:	681b      	ldr	r3, [r3, #0]
 8033e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033e70:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8033e72:	687b      	ldr	r3, [r7, #4]
 8033e74:	681b      	ldr	r3, [r3, #0]
 8033e76:	691a      	ldr	r2, [r3, #16]
 8033e78:	687b      	ldr	r3, [r7, #4]
 8033e7a:	681b      	ldr	r3, [r3, #0]
 8033e7c:	f022 0208 	bic.w	r2, r2, #8
 8033e80:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033e82:	687b      	ldr	r3, [r7, #4]
 8033e84:	681b      	ldr	r3, [r3, #0]
 8033e86:	689b      	ldr	r3, [r3, #8]
 8033e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033e8c:	2b00      	cmp	r3, #0
 8033e8e:	d13d      	bne.n	8033f0c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8033e90:	e036      	b.n	8033f00 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8033e92:	687b      	ldr	r3, [r7, #4]
 8033e94:	68db      	ldr	r3, [r3, #12]
 8033e96:	2b0f      	cmp	r3, #15
 8033e98:	d90b      	bls.n	8033eb2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8033e9a:	687b      	ldr	r3, [r7, #4]
 8033e9c:	681a      	ldr	r2, [r3, #0]
 8033e9e:	687b      	ldr	r3, [r7, #4]
 8033ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8033ea4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8033ea6:	687b      	ldr	r3, [r7, #4]
 8033ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033eaa:	1d1a      	adds	r2, r3, #4
 8033eac:	687b      	ldr	r3, [r7, #4]
 8033eae:	665a      	str	r2, [r3, #100]	; 0x64
 8033eb0:	e01d      	b.n	8033eee <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8033eb2:	687b      	ldr	r3, [r7, #4]
 8033eb4:	68db      	ldr	r3, [r3, #12]
 8033eb6:	2b07      	cmp	r3, #7
 8033eb8:	d90b      	bls.n	8033ed2 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8033eba:	687b      	ldr	r3, [r7, #4]
 8033ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ebe:	68fa      	ldr	r2, [r7, #12]
 8033ec0:	8812      	ldrh	r2, [r2, #0]
 8033ec2:	b292      	uxth	r2, r2
 8033ec4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8033ec6:	687b      	ldr	r3, [r7, #4]
 8033ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033eca:	1c9a      	adds	r2, r3, #2
 8033ecc:	687b      	ldr	r3, [r7, #4]
 8033ece:	665a      	str	r2, [r3, #100]	; 0x64
 8033ed0:	e00d      	b.n	8033eee <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8033ed2:	687b      	ldr	r3, [r7, #4]
 8033ed4:	681b      	ldr	r3, [r3, #0]
 8033ed6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8033eda:	687b      	ldr	r3, [r7, #4]
 8033edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ede:	7812      	ldrb	r2, [r2, #0]
 8033ee0:	b2d2      	uxtb	r2, r2
 8033ee2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8033ee4:	687b      	ldr	r3, [r7, #4]
 8033ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ee8:	1c5a      	adds	r2, r3, #1
 8033eea:	687b      	ldr	r3, [r7, #4]
 8033eec:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8033eee:	687b      	ldr	r3, [r7, #4]
 8033ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033ef4:	b29b      	uxth	r3, r3
 8033ef6:	3b01      	subs	r3, #1
 8033ef8:	b29a      	uxth	r2, r3
 8033efa:	687b      	ldr	r3, [r7, #4]
 8033efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8033f00:	687b      	ldr	r3, [r7, #4]
 8033f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033f06:	b29b      	uxth	r3, r3
 8033f08:	2b00      	cmp	r3, #0
 8033f0a:	d1c2      	bne.n	8033e92 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8033f0c:	6878      	ldr	r0, [r7, #4]
 8033f0e:	f000 fa1d 	bl	803434c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8033f12:	687b      	ldr	r3, [r7, #4]
 8033f14:	2201      	movs	r2, #1
 8033f16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033f1a:	687b      	ldr	r3, [r7, #4]
 8033f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f20:	2b00      	cmp	r3, #0
 8033f22:	d003      	beq.n	8033f2c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8033f24:	6878      	ldr	r0, [r7, #4]
 8033f26:	f000 f929 	bl	803417c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8033f2a:	e0e3      	b.n	80340f4 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8033f2c:	7cfb      	ldrb	r3, [r7, #19]
 8033f2e:	2b05      	cmp	r3, #5
 8033f30:	d103      	bne.n	8033f3a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8033f32:	6878      	ldr	r0, [r7, #4]
 8033f34:	f000 f8fa 	bl	803412c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8033f38:	e0d9      	b.n	80340ee <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8033f3a:	7cfb      	ldrb	r3, [r7, #19]
 8033f3c:	2b04      	cmp	r3, #4
 8033f3e:	d103      	bne.n	8033f48 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8033f40:	6878      	ldr	r0, [r7, #4]
 8033f42:	f000 f8e9 	bl	8034118 <HAL_SPI_RxCpltCallback>
    return;
 8033f46:	e0d2      	b.n	80340ee <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8033f48:	7cfb      	ldrb	r3, [r7, #19]
 8033f4a:	2b03      	cmp	r3, #3
 8033f4c:	f040 80cf 	bne.w	80340ee <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8033f50:	6878      	ldr	r0, [r7, #4]
 8033f52:	f000 f8d7 	bl	8034104 <HAL_SPI_TxCpltCallback>
    return;
 8033f56:	e0ca      	b.n	80340ee <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8033f58:	69fb      	ldr	r3, [r7, #28]
 8033f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033f5e:	2b00      	cmp	r3, #0
 8033f60:	d00d      	beq.n	8033f7e <HAL_SPI_IRQHandler+0x212>
 8033f62:	6a3b      	ldr	r3, [r7, #32]
 8033f64:	f003 0308 	and.w	r3, r3, #8
 8033f68:	2b00      	cmp	r3, #0
 8033f6a:	d008      	beq.n	8033f7e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033f6c:	687b      	ldr	r3, [r7, #4]
 8033f6e:	681b      	ldr	r3, [r3, #0]
 8033f70:	699a      	ldr	r2, [r3, #24]
 8033f72:	687b      	ldr	r3, [r7, #4]
 8033f74:	681b      	ldr	r3, [r3, #0]
 8033f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033f7a:	619a      	str	r2, [r3, #24]

    return;
 8033f7c:	e0ba      	b.n	80340f4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8033f7e:	69bb      	ldr	r3, [r7, #24]
 8033f80:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8033f84:	2b00      	cmp	r3, #0
 8033f86:	f000 80b5 	beq.w	80340f4 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8033f8a:	69bb      	ldr	r3, [r7, #24]
 8033f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033f90:	2b00      	cmp	r3, #0
 8033f92:	d00f      	beq.n	8033fb4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8033f94:	687b      	ldr	r3, [r7, #4]
 8033f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f9a:	f043 0204 	orr.w	r2, r3, #4
 8033f9e:	687b      	ldr	r3, [r7, #4]
 8033fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8033fa4:	687b      	ldr	r3, [r7, #4]
 8033fa6:	681b      	ldr	r3, [r3, #0]
 8033fa8:	699a      	ldr	r2, [r3, #24]
 8033faa:	687b      	ldr	r3, [r7, #4]
 8033fac:	681b      	ldr	r3, [r3, #0]
 8033fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8033fb2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8033fb4:	69bb      	ldr	r3, [r7, #24]
 8033fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8033fba:	2b00      	cmp	r3, #0
 8033fbc:	d00f      	beq.n	8033fde <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8033fbe:	687b      	ldr	r3, [r7, #4]
 8033fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033fc4:	f043 0201 	orr.w	r2, r3, #1
 8033fc8:	687b      	ldr	r3, [r7, #4]
 8033fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8033fce:	687b      	ldr	r3, [r7, #4]
 8033fd0:	681b      	ldr	r3, [r3, #0]
 8033fd2:	699a      	ldr	r2, [r3, #24]
 8033fd4:	687b      	ldr	r3, [r7, #4]
 8033fd6:	681b      	ldr	r3, [r3, #0]
 8033fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033fdc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8033fde:	69bb      	ldr	r3, [r7, #24]
 8033fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033fe4:	2b00      	cmp	r3, #0
 8033fe6:	d00f      	beq.n	8034008 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8033fe8:	687b      	ldr	r3, [r7, #4]
 8033fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033fee:	f043 0208 	orr.w	r2, r3, #8
 8033ff2:	687b      	ldr	r3, [r7, #4]
 8033ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8033ff8:	687b      	ldr	r3, [r7, #4]
 8033ffa:	681b      	ldr	r3, [r3, #0]
 8033ffc:	699a      	ldr	r2, [r3, #24]
 8033ffe:	687b      	ldr	r3, [r7, #4]
 8034000:	681b      	ldr	r3, [r3, #0]
 8034002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8034006:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8034008:	69bb      	ldr	r3, [r7, #24]
 803400a:	f003 0320 	and.w	r3, r3, #32
 803400e:	2b00      	cmp	r3, #0
 8034010:	d00f      	beq.n	8034032 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8034012:	687b      	ldr	r3, [r7, #4]
 8034014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034018:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803401c:	687b      	ldr	r3, [r7, #4]
 803401e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8034022:	687b      	ldr	r3, [r7, #4]
 8034024:	681b      	ldr	r3, [r3, #0]
 8034026:	699a      	ldr	r2, [r3, #24]
 8034028:	687b      	ldr	r3, [r7, #4]
 803402a:	681b      	ldr	r3, [r3, #0]
 803402c:	f042 0220 	orr.w	r2, r2, #32
 8034030:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8034032:	687b      	ldr	r3, [r7, #4]
 8034034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034038:	2b00      	cmp	r3, #0
 803403a:	d05a      	beq.n	80340f2 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 803403c:	687b      	ldr	r3, [r7, #4]
 803403e:	681b      	ldr	r3, [r3, #0]
 8034040:	681a      	ldr	r2, [r3, #0]
 8034042:	687b      	ldr	r3, [r7, #4]
 8034044:	681b      	ldr	r3, [r3, #0]
 8034046:	f022 0201 	bic.w	r2, r2, #1
 803404a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 803404c:	687b      	ldr	r3, [r7, #4]
 803404e:	681b      	ldr	r3, [r3, #0]
 8034050:	6919      	ldr	r1, [r3, #16]
 8034052:	687b      	ldr	r3, [r7, #4]
 8034054:	681a      	ldr	r2, [r3, #0]
 8034056:	4b29      	ldr	r3, [pc, #164]	; (80340fc <HAL_SPI_IRQHandler+0x390>)
 8034058:	400b      	ands	r3, r1
 803405a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 803405c:	697b      	ldr	r3, [r7, #20]
 803405e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8034062:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8034066:	d138      	bne.n	80340da <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8034068:	687b      	ldr	r3, [r7, #4]
 803406a:	681b      	ldr	r3, [r3, #0]
 803406c:	689a      	ldr	r2, [r3, #8]
 803406e:	687b      	ldr	r3, [r7, #4]
 8034070:	681b      	ldr	r3, [r3, #0]
 8034072:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8034076:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8034078:	687b      	ldr	r3, [r7, #4]
 803407a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803407c:	2b00      	cmp	r3, #0
 803407e:	d013      	beq.n	80340a8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8034080:	687b      	ldr	r3, [r7, #4]
 8034082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034084:	4a1e      	ldr	r2, [pc, #120]	; (8034100 <HAL_SPI_IRQHandler+0x394>)
 8034086:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8034088:	687b      	ldr	r3, [r7, #4]
 803408a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803408c:	4618      	mov	r0, r3
 803408e:	f7f8 fbc1 	bl	802c814 <HAL_DMA_Abort_IT>
 8034092:	4603      	mov	r3, r0
 8034094:	2b00      	cmp	r3, #0
 8034096:	d007      	beq.n	80340a8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8034098:	687b      	ldr	r3, [r7, #4]
 803409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803409e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80340a2:	687b      	ldr	r3, [r7, #4]
 80340a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80340a8:	687b      	ldr	r3, [r7, #4]
 80340aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340ac:	2b00      	cmp	r3, #0
 80340ae:	d020      	beq.n	80340f2 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80340b0:	687b      	ldr	r3, [r7, #4]
 80340b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340b4:	4a12      	ldr	r2, [pc, #72]	; (8034100 <HAL_SPI_IRQHandler+0x394>)
 80340b6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80340b8:	687b      	ldr	r3, [r7, #4]
 80340ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340bc:	4618      	mov	r0, r3
 80340be:	f7f8 fba9 	bl	802c814 <HAL_DMA_Abort_IT>
 80340c2:	4603      	mov	r3, r0
 80340c4:	2b00      	cmp	r3, #0
 80340c6:	d014      	beq.n	80340f2 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80340c8:	687b      	ldr	r3, [r7, #4]
 80340ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80340ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80340d2:	687b      	ldr	r3, [r7, #4]
 80340d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80340d8:	e00b      	b.n	80340f2 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80340da:	687b      	ldr	r3, [r7, #4]
 80340dc:	2201      	movs	r2, #1
 80340de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80340e2:	6878      	ldr	r0, [r7, #4]
 80340e4:	f000 f84a 	bl	803417c <HAL_SPI_ErrorCallback>
    return;
 80340e8:	e003      	b.n	80340f2 <HAL_SPI_IRQHandler+0x386>
    return;
 80340ea:	bf00      	nop
 80340ec:	e002      	b.n	80340f4 <HAL_SPI_IRQHandler+0x388>
    return;
 80340ee:	bf00      	nop
 80340f0:	e000      	b.n	80340f4 <HAL_SPI_IRQHandler+0x388>
    return;
 80340f2:	bf00      	nop
  }
}
 80340f4:	3728      	adds	r7, #40	; 0x28
 80340f6:	46bd      	mov	sp, r7
 80340f8:	bd80      	pop	{r7, pc}
 80340fa:	bf00      	nop
 80340fc:	fffffc94 	.word	0xfffffc94
 8034100:	08034319 	.word	0x08034319

08034104 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034104:	b480      	push	{r7}
 8034106:	b083      	sub	sp, #12
 8034108:	af00      	add	r7, sp, #0
 803410a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 803410c:	bf00      	nop
 803410e:	370c      	adds	r7, #12
 8034110:	46bd      	mov	sp, r7
 8034112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034116:	4770      	bx	lr

08034118 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034118:	b480      	push	{r7}
 803411a:	b083      	sub	sp, #12
 803411c:	af00      	add	r7, sp, #0
 803411e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8034120:	bf00      	nop
 8034122:	370c      	adds	r7, #12
 8034124:	46bd      	mov	sp, r7
 8034126:	f85d 7b04 	ldr.w	r7, [sp], #4
 803412a:	4770      	bx	lr

0803412c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 803412c:	b480      	push	{r7}
 803412e:	b083      	sub	sp, #12
 8034130:	af00      	add	r7, sp, #0
 8034132:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8034134:	bf00      	nop
 8034136:	370c      	adds	r7, #12
 8034138:	46bd      	mov	sp, r7
 803413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803413e:	4770      	bx	lr

08034140 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034140:	b480      	push	{r7}
 8034142:	b083      	sub	sp, #12
 8034144:	af00      	add	r7, sp, #0
 8034146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8034148:	bf00      	nop
 803414a:	370c      	adds	r7, #12
 803414c:	46bd      	mov	sp, r7
 803414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034152:	4770      	bx	lr

08034154 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034154:	b480      	push	{r7}
 8034156:	b083      	sub	sp, #12
 8034158:	af00      	add	r7, sp, #0
 803415a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 803415c:	bf00      	nop
 803415e:	370c      	adds	r7, #12
 8034160:	46bd      	mov	sp, r7
 8034162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034166:	4770      	bx	lr

08034168 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034168:	b480      	push	{r7}
 803416a:	b083      	sub	sp, #12
 803416c:	af00      	add	r7, sp, #0
 803416e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8034170:	bf00      	nop
 8034172:	370c      	adds	r7, #12
 8034174:	46bd      	mov	sp, r7
 8034176:	f85d 7b04 	ldr.w	r7, [sp], #4
 803417a:	4770      	bx	lr

0803417c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 803417c:	b480      	push	{r7}
 803417e:	b083      	sub	sp, #12
 8034180:	af00      	add	r7, sp, #0
 8034182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8034184:	bf00      	nop
 8034186:	370c      	adds	r7, #12
 8034188:	46bd      	mov	sp, r7
 803418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803418e:	4770      	bx	lr

08034190 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8034190:	b480      	push	{r7}
 8034192:	b083      	sub	sp, #12
 8034194:	af00      	add	r7, sp, #0
 8034196:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8034198:	687b      	ldr	r3, [r7, #4]
 803419a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803419e:	b2db      	uxtb	r3, r3
}
 80341a0:	4618      	mov	r0, r3
 80341a2:	370c      	adds	r7, #12
 80341a4:	46bd      	mov	sp, r7
 80341a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341aa:	4770      	bx	lr

080341ac <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80341ac:	b580      	push	{r7, lr}
 80341ae:	b084      	sub	sp, #16
 80341b0:	af00      	add	r7, sp, #0
 80341b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80341b4:	687b      	ldr	r3, [r7, #4]
 80341b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80341b8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80341ba:	68fb      	ldr	r3, [r7, #12]
 80341bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341c0:	b2db      	uxtb	r3, r3
 80341c2:	2b07      	cmp	r3, #7
 80341c4:	d011      	beq.n	80341ea <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80341c6:	68fb      	ldr	r3, [r7, #12]
 80341c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80341ca:	69db      	ldr	r3, [r3, #28]
 80341cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80341d0:	d103      	bne.n	80341da <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80341d2:	68f8      	ldr	r0, [r7, #12]
 80341d4:	f7ff ff96 	bl	8034104 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80341d8:	e007      	b.n	80341ea <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80341da:	68fb      	ldr	r3, [r7, #12]
 80341dc:	681b      	ldr	r3, [r3, #0]
 80341de:	691a      	ldr	r2, [r3, #16]
 80341e0:	68fb      	ldr	r3, [r7, #12]
 80341e2:	681b      	ldr	r3, [r3, #0]
 80341e4:	f042 0208 	orr.w	r2, r2, #8
 80341e8:	611a      	str	r2, [r3, #16]
}
 80341ea:	bf00      	nop
 80341ec:	3710      	adds	r7, #16
 80341ee:	46bd      	mov	sp, r7
 80341f0:	bd80      	pop	{r7, pc}

080341f2 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80341f2:	b580      	push	{r7, lr}
 80341f4:	b084      	sub	sp, #16
 80341f6:	af00      	add	r7, sp, #0
 80341f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80341fa:	687b      	ldr	r3, [r7, #4]
 80341fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80341fe:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034200:	68fb      	ldr	r3, [r7, #12]
 8034202:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034206:	b2db      	uxtb	r3, r3
 8034208:	2b07      	cmp	r3, #7
 803420a:	d011      	beq.n	8034230 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 803420c:	68fb      	ldr	r3, [r7, #12]
 803420e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034210:	69db      	ldr	r3, [r3, #28]
 8034212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034216:	d103      	bne.n	8034220 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8034218:	68f8      	ldr	r0, [r7, #12]
 803421a:	f7ff ff7d 	bl	8034118 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803421e:	e007      	b.n	8034230 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034220:	68fb      	ldr	r3, [r7, #12]
 8034222:	681b      	ldr	r3, [r3, #0]
 8034224:	691a      	ldr	r2, [r3, #16]
 8034226:	68fb      	ldr	r3, [r7, #12]
 8034228:	681b      	ldr	r3, [r3, #0]
 803422a:	f042 0208 	orr.w	r2, r2, #8
 803422e:	611a      	str	r2, [r3, #16]
}
 8034230:	bf00      	nop
 8034232:	3710      	adds	r7, #16
 8034234:	46bd      	mov	sp, r7
 8034236:	bd80      	pop	{r7, pc}

08034238 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8034238:	b580      	push	{r7, lr}
 803423a:	b084      	sub	sp, #16
 803423c:	af00      	add	r7, sp, #0
 803423e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034240:	687b      	ldr	r3, [r7, #4]
 8034242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034244:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034246:	68fb      	ldr	r3, [r7, #12]
 8034248:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803424c:	b2db      	uxtb	r3, r3
 803424e:	2b07      	cmp	r3, #7
 8034250:	d011      	beq.n	8034276 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8034252:	68fb      	ldr	r3, [r7, #12]
 8034254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034256:	69db      	ldr	r3, [r3, #28]
 8034258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803425c:	d103      	bne.n	8034266 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 803425e:	68f8      	ldr	r0, [r7, #12]
 8034260:	f7ff ff64 	bl	803412c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034264:	e007      	b.n	8034276 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034266:	68fb      	ldr	r3, [r7, #12]
 8034268:	681b      	ldr	r3, [r3, #0]
 803426a:	691a      	ldr	r2, [r3, #16]
 803426c:	68fb      	ldr	r3, [r7, #12]
 803426e:	681b      	ldr	r3, [r3, #0]
 8034270:	f042 0208 	orr.w	r2, r2, #8
 8034274:	611a      	str	r2, [r3, #16]
}
 8034276:	bf00      	nop
 8034278:	3710      	adds	r7, #16
 803427a:	46bd      	mov	sp, r7
 803427c:	bd80      	pop	{r7, pc}

0803427e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 803427e:	b580      	push	{r7, lr}
 8034280:	b084      	sub	sp, #16
 8034282:	af00      	add	r7, sp, #0
 8034284:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034286:	687b      	ldr	r3, [r7, #4]
 8034288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803428a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 803428c:	68f8      	ldr	r0, [r7, #12]
 803428e:	f7ff ff57 	bl	8034140 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034292:	bf00      	nop
 8034294:	3710      	adds	r7, #16
 8034296:	46bd      	mov	sp, r7
 8034298:	bd80      	pop	{r7, pc}

0803429a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803429a:	b580      	push	{r7, lr}
 803429c:	b084      	sub	sp, #16
 803429e:	af00      	add	r7, sp, #0
 80342a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342a2:	687b      	ldr	r3, [r7, #4]
 80342a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342a6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80342a8:	68f8      	ldr	r0, [r7, #12]
 80342aa:	f7ff ff53 	bl	8034154 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342ae:	bf00      	nop
 80342b0:	3710      	adds	r7, #16
 80342b2:	46bd      	mov	sp, r7
 80342b4:	bd80      	pop	{r7, pc}

080342b6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80342b6:	b580      	push	{r7, lr}
 80342b8:	b084      	sub	sp, #16
 80342ba:	af00      	add	r7, sp, #0
 80342bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342be:	687b      	ldr	r3, [r7, #4]
 80342c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342c2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80342c4:	68f8      	ldr	r0, [r7, #12]
 80342c6:	f7ff ff4f 	bl	8034168 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342ca:	bf00      	nop
 80342cc:	3710      	adds	r7, #16
 80342ce:	46bd      	mov	sp, r7
 80342d0:	bd80      	pop	{r7, pc}

080342d2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80342d2:	b580      	push	{r7, lr}
 80342d4:	b084      	sub	sp, #16
 80342d6:	af00      	add	r7, sp, #0
 80342d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342da:	687b      	ldr	r3, [r7, #4]
 80342dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342de:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80342e0:	6878      	ldr	r0, [r7, #4]
 80342e2:	f7f9 fc15 	bl	802db10 <HAL_DMA_GetError>
 80342e6:	4603      	mov	r3, r0
 80342e8:	2b02      	cmp	r3, #2
 80342ea:	d011      	beq.n	8034310 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80342ec:	68f8      	ldr	r0, [r7, #12]
 80342ee:	f000 f82d 	bl	803434c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80342f2:	68fb      	ldr	r3, [r7, #12]
 80342f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80342f8:	f043 0210 	orr.w	r2, r3, #16
 80342fc:	68fb      	ldr	r3, [r7, #12]
 80342fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8034302:	68fb      	ldr	r3, [r7, #12]
 8034304:	2201      	movs	r2, #1
 8034306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 803430a:	68f8      	ldr	r0, [r7, #12]
 803430c:	f7ff ff36 	bl	803417c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8034310:	bf00      	nop
 8034312:	3710      	adds	r7, #16
 8034314:	46bd      	mov	sp, r7
 8034316:	bd80      	pop	{r7, pc}

08034318 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8034318:	b580      	push	{r7, lr}
 803431a:	b084      	sub	sp, #16
 803431c:	af00      	add	r7, sp, #0
 803431e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034320:	687b      	ldr	r3, [r7, #4]
 8034322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034324:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8034326:	68fb      	ldr	r3, [r7, #12]
 8034328:	2200      	movs	r2, #0
 803432a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 803432e:	68fb      	ldr	r3, [r7, #12]
 8034330:	2200      	movs	r2, #0
 8034332:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8034336:	68fb      	ldr	r3, [r7, #12]
 8034338:	2201      	movs	r2, #1
 803433a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 803433e:	68f8      	ldr	r0, [r7, #12]
 8034340:	f7ff ff1c 	bl	803417c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034344:	bf00      	nop
 8034346:	3710      	adds	r7, #16
 8034348:	46bd      	mov	sp, r7
 803434a:	bd80      	pop	{r7, pc}

0803434c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 803434c:	b480      	push	{r7}
 803434e:	b085      	sub	sp, #20
 8034350:	af00      	add	r7, sp, #0
 8034352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8034354:	687b      	ldr	r3, [r7, #4]
 8034356:	681b      	ldr	r3, [r3, #0]
 8034358:	695b      	ldr	r3, [r3, #20]
 803435a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 803435c:	687b      	ldr	r3, [r7, #4]
 803435e:	681b      	ldr	r3, [r3, #0]
 8034360:	699a      	ldr	r2, [r3, #24]
 8034362:	687b      	ldr	r3, [r7, #4]
 8034364:	681b      	ldr	r3, [r3, #0]
 8034366:	f042 0208 	orr.w	r2, r2, #8
 803436a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 803436c:	687b      	ldr	r3, [r7, #4]
 803436e:	681b      	ldr	r3, [r3, #0]
 8034370:	699a      	ldr	r2, [r3, #24]
 8034372:	687b      	ldr	r3, [r7, #4]
 8034374:	681b      	ldr	r3, [r3, #0]
 8034376:	f042 0210 	orr.w	r2, r2, #16
 803437a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 803437c:	687b      	ldr	r3, [r7, #4]
 803437e:	681b      	ldr	r3, [r3, #0]
 8034380:	681a      	ldr	r2, [r3, #0]
 8034382:	687b      	ldr	r3, [r7, #4]
 8034384:	681b      	ldr	r3, [r3, #0]
 8034386:	f022 0201 	bic.w	r2, r2, #1
 803438a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 803438c:	687b      	ldr	r3, [r7, #4]
 803438e:	681b      	ldr	r3, [r3, #0]
 8034390:	6919      	ldr	r1, [r3, #16]
 8034392:	687b      	ldr	r3, [r7, #4]
 8034394:	681a      	ldr	r2, [r3, #0]
 8034396:	4b3c      	ldr	r3, [pc, #240]	; (8034488 <SPI_CloseTransfer+0x13c>)
 8034398:	400b      	ands	r3, r1
 803439a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 803439c:	687b      	ldr	r3, [r7, #4]
 803439e:	681b      	ldr	r3, [r3, #0]
 80343a0:	689a      	ldr	r2, [r3, #8]
 80343a2:	687b      	ldr	r3, [r7, #4]
 80343a4:	681b      	ldr	r3, [r3, #0]
 80343a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80343aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80343ac:	687b      	ldr	r3, [r7, #4]
 80343ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80343b2:	b2db      	uxtb	r3, r3
 80343b4:	2b04      	cmp	r3, #4
 80343b6:	d014      	beq.n	80343e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80343b8:	68fb      	ldr	r3, [r7, #12]
 80343ba:	f003 0320 	and.w	r3, r3, #32
 80343be:	2b00      	cmp	r3, #0
 80343c0:	d00f      	beq.n	80343e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80343c2:	687b      	ldr	r3, [r7, #4]
 80343c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80343c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80343d2:	687b      	ldr	r3, [r7, #4]
 80343d4:	681b      	ldr	r3, [r3, #0]
 80343d6:	699a      	ldr	r2, [r3, #24]
 80343d8:	687b      	ldr	r3, [r7, #4]
 80343da:	681b      	ldr	r3, [r3, #0]
 80343dc:	f042 0220 	orr.w	r2, r2, #32
 80343e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80343e2:	687b      	ldr	r3, [r7, #4]
 80343e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80343e8:	b2db      	uxtb	r3, r3
 80343ea:	2b03      	cmp	r3, #3
 80343ec:	d014      	beq.n	8034418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80343ee:	68fb      	ldr	r3, [r7, #12]
 80343f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80343f4:	2b00      	cmp	r3, #0
 80343f6:	d00f      	beq.n	8034418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80343f8:	687b      	ldr	r3, [r7, #4]
 80343fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80343fe:	f043 0204 	orr.w	r2, r3, #4
 8034402:	687b      	ldr	r3, [r7, #4]
 8034404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8034408:	687b      	ldr	r3, [r7, #4]
 803440a:	681b      	ldr	r3, [r3, #0]
 803440c:	699a      	ldr	r2, [r3, #24]
 803440e:	687b      	ldr	r3, [r7, #4]
 8034410:	681b      	ldr	r3, [r3, #0]
 8034412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8034416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8034418:	68fb      	ldr	r3, [r7, #12]
 803441a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 803441e:	2b00      	cmp	r3, #0
 8034420:	d00f      	beq.n	8034442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8034422:	687b      	ldr	r3, [r7, #4]
 8034424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034428:	f043 0201 	orr.w	r2, r3, #1
 803442c:	687b      	ldr	r3, [r7, #4]
 803442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034432:	687b      	ldr	r3, [r7, #4]
 8034434:	681b      	ldr	r3, [r3, #0]
 8034436:	699a      	ldr	r2, [r3, #24]
 8034438:	687b      	ldr	r3, [r7, #4]
 803443a:	681b      	ldr	r3, [r3, #0]
 803443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8034442:	68fb      	ldr	r3, [r7, #12]
 8034444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034448:	2b00      	cmp	r3, #0
 803444a:	d00f      	beq.n	803446c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 803444c:	687b      	ldr	r3, [r7, #4]
 803444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034452:	f043 0208 	orr.w	r2, r3, #8
 8034456:	687b      	ldr	r3, [r7, #4]
 8034458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 803445c:	687b      	ldr	r3, [r7, #4]
 803445e:	681b      	ldr	r3, [r3, #0]
 8034460:	699a      	ldr	r2, [r3, #24]
 8034462:	687b      	ldr	r3, [r7, #4]
 8034464:	681b      	ldr	r3, [r3, #0]
 8034466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803446a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 803446c:	687b      	ldr	r3, [r7, #4]
 803446e:	2200      	movs	r2, #0
 8034470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8034474:	687b      	ldr	r3, [r7, #4]
 8034476:	2200      	movs	r2, #0
 8034478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 803447c:	bf00      	nop
 803447e:	3714      	adds	r7, #20
 8034480:	46bd      	mov	sp, r7
 8034482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034486:	4770      	bx	lr
 8034488:	fffffc90 	.word	0xfffffc90

0803448c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 803448c:	b480      	push	{r7}
 803448e:	b085      	sub	sp, #20
 8034490:	af00      	add	r7, sp, #0
 8034492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8034494:	687b      	ldr	r3, [r7, #4]
 8034496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034498:	095b      	lsrs	r3, r3, #5
 803449a:	3301      	adds	r3, #1
 803449c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 803449e:	687b      	ldr	r3, [r7, #4]
 80344a0:	68db      	ldr	r3, [r3, #12]
 80344a2:	3301      	adds	r3, #1
 80344a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80344a6:	68bb      	ldr	r3, [r7, #8]
 80344a8:	3307      	adds	r3, #7
 80344aa:	08db      	lsrs	r3, r3, #3
 80344ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80344ae:	68bb      	ldr	r3, [r7, #8]
 80344b0:	68fa      	ldr	r2, [r7, #12]
 80344b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80344b6:	4618      	mov	r0, r3
 80344b8:	3714      	adds	r7, #20
 80344ba:	46bd      	mov	sp, r7
 80344bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344c0:	4770      	bx	lr

080344c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80344c2:	b580      	push	{r7, lr}
 80344c4:	b082      	sub	sp, #8
 80344c6:	af00      	add	r7, sp, #0
 80344c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80344ca:	687b      	ldr	r3, [r7, #4]
 80344cc:	2b00      	cmp	r3, #0
 80344ce:	d101      	bne.n	80344d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80344d0:	2301      	movs	r3, #1
 80344d2:	e049      	b.n	8034568 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80344d4:	687b      	ldr	r3, [r7, #4]
 80344d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80344da:	b2db      	uxtb	r3, r3
 80344dc:	2b00      	cmp	r3, #0
 80344de:	d106      	bne.n	80344ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80344e0:	687b      	ldr	r3, [r7, #4]
 80344e2:	2200      	movs	r2, #0
 80344e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80344e8:	6878      	ldr	r0, [r7, #4]
 80344ea:	f7f5 ff5b 	bl	802a3a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80344ee:	687b      	ldr	r3, [r7, #4]
 80344f0:	2202      	movs	r2, #2
 80344f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80344f6:	687b      	ldr	r3, [r7, #4]
 80344f8:	681a      	ldr	r2, [r3, #0]
 80344fa:	687b      	ldr	r3, [r7, #4]
 80344fc:	3304      	adds	r3, #4
 80344fe:	4619      	mov	r1, r3
 8034500:	4610      	mov	r0, r2
 8034502:	f000 faed 	bl	8034ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8034506:	687b      	ldr	r3, [r7, #4]
 8034508:	2201      	movs	r2, #1
 803450a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 803450e:	687b      	ldr	r3, [r7, #4]
 8034510:	2201      	movs	r2, #1
 8034512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8034516:	687b      	ldr	r3, [r7, #4]
 8034518:	2201      	movs	r2, #1
 803451a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 803451e:	687b      	ldr	r3, [r7, #4]
 8034520:	2201      	movs	r2, #1
 8034522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8034526:	687b      	ldr	r3, [r7, #4]
 8034528:	2201      	movs	r2, #1
 803452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 803452e:	687b      	ldr	r3, [r7, #4]
 8034530:	2201      	movs	r2, #1
 8034532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8034536:	687b      	ldr	r3, [r7, #4]
 8034538:	2201      	movs	r2, #1
 803453a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 803453e:	687b      	ldr	r3, [r7, #4]
 8034540:	2201      	movs	r2, #1
 8034542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8034546:	687b      	ldr	r3, [r7, #4]
 8034548:	2201      	movs	r2, #1
 803454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 803454e:	687b      	ldr	r3, [r7, #4]
 8034550:	2201      	movs	r2, #1
 8034552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8034556:	687b      	ldr	r3, [r7, #4]
 8034558:	2201      	movs	r2, #1
 803455a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 803455e:	687b      	ldr	r3, [r7, #4]
 8034560:	2201      	movs	r2, #1
 8034562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8034566:	2300      	movs	r3, #0
}
 8034568:	4618      	mov	r0, r3
 803456a:	3708      	adds	r7, #8
 803456c:	46bd      	mov	sp, r7
 803456e:	bd80      	pop	{r7, pc}

08034570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8034570:	b480      	push	{r7}
 8034572:	b085      	sub	sp, #20
 8034574:	af00      	add	r7, sp, #0
 8034576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8034578:	687b      	ldr	r3, [r7, #4]
 803457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803457e:	b2db      	uxtb	r3, r3
 8034580:	2b01      	cmp	r3, #1
 8034582:	d001      	beq.n	8034588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8034584:	2301      	movs	r3, #1
 8034586:	e054      	b.n	8034632 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034588:	687b      	ldr	r3, [r7, #4]
 803458a:	2202      	movs	r2, #2
 803458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8034590:	687b      	ldr	r3, [r7, #4]
 8034592:	681b      	ldr	r3, [r3, #0]
 8034594:	68da      	ldr	r2, [r3, #12]
 8034596:	687b      	ldr	r3, [r7, #4]
 8034598:	681b      	ldr	r3, [r3, #0]
 803459a:	f042 0201 	orr.w	r2, r2, #1
 803459e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80345a0:	687b      	ldr	r3, [r7, #4]
 80345a2:	681b      	ldr	r3, [r3, #0]
 80345a4:	4a26      	ldr	r2, [pc, #152]	; (8034640 <HAL_TIM_Base_Start_IT+0xd0>)
 80345a6:	4293      	cmp	r3, r2
 80345a8:	d022      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345aa:	687b      	ldr	r3, [r7, #4]
 80345ac:	681b      	ldr	r3, [r3, #0]
 80345ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80345b2:	d01d      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345b4:	687b      	ldr	r3, [r7, #4]
 80345b6:	681b      	ldr	r3, [r3, #0]
 80345b8:	4a22      	ldr	r2, [pc, #136]	; (8034644 <HAL_TIM_Base_Start_IT+0xd4>)
 80345ba:	4293      	cmp	r3, r2
 80345bc:	d018      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345be:	687b      	ldr	r3, [r7, #4]
 80345c0:	681b      	ldr	r3, [r3, #0]
 80345c2:	4a21      	ldr	r2, [pc, #132]	; (8034648 <HAL_TIM_Base_Start_IT+0xd8>)
 80345c4:	4293      	cmp	r3, r2
 80345c6:	d013      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345c8:	687b      	ldr	r3, [r7, #4]
 80345ca:	681b      	ldr	r3, [r3, #0]
 80345cc:	4a1f      	ldr	r2, [pc, #124]	; (803464c <HAL_TIM_Base_Start_IT+0xdc>)
 80345ce:	4293      	cmp	r3, r2
 80345d0:	d00e      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345d2:	687b      	ldr	r3, [r7, #4]
 80345d4:	681b      	ldr	r3, [r3, #0]
 80345d6:	4a1e      	ldr	r2, [pc, #120]	; (8034650 <HAL_TIM_Base_Start_IT+0xe0>)
 80345d8:	4293      	cmp	r3, r2
 80345da:	d009      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345dc:	687b      	ldr	r3, [r7, #4]
 80345de:	681b      	ldr	r3, [r3, #0]
 80345e0:	4a1c      	ldr	r2, [pc, #112]	; (8034654 <HAL_TIM_Base_Start_IT+0xe4>)
 80345e2:	4293      	cmp	r3, r2
 80345e4:	d004      	beq.n	80345f0 <HAL_TIM_Base_Start_IT+0x80>
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	681b      	ldr	r3, [r3, #0]
 80345ea:	4a1b      	ldr	r2, [pc, #108]	; (8034658 <HAL_TIM_Base_Start_IT+0xe8>)
 80345ec:	4293      	cmp	r3, r2
 80345ee:	d115      	bne.n	803461c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80345f0:	687b      	ldr	r3, [r7, #4]
 80345f2:	681b      	ldr	r3, [r3, #0]
 80345f4:	689a      	ldr	r2, [r3, #8]
 80345f6:	4b19      	ldr	r3, [pc, #100]	; (803465c <HAL_TIM_Base_Start_IT+0xec>)
 80345f8:	4013      	ands	r3, r2
 80345fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80345fc:	68fb      	ldr	r3, [r7, #12]
 80345fe:	2b06      	cmp	r3, #6
 8034600:	d015      	beq.n	803462e <HAL_TIM_Base_Start_IT+0xbe>
 8034602:	68fb      	ldr	r3, [r7, #12]
 8034604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034608:	d011      	beq.n	803462e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 803460a:	687b      	ldr	r3, [r7, #4]
 803460c:	681b      	ldr	r3, [r3, #0]
 803460e:	681a      	ldr	r2, [r3, #0]
 8034610:	687b      	ldr	r3, [r7, #4]
 8034612:	681b      	ldr	r3, [r3, #0]
 8034614:	f042 0201 	orr.w	r2, r2, #1
 8034618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803461a:	e008      	b.n	803462e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 803461c:	687b      	ldr	r3, [r7, #4]
 803461e:	681b      	ldr	r3, [r3, #0]
 8034620:	681a      	ldr	r2, [r3, #0]
 8034622:	687b      	ldr	r3, [r7, #4]
 8034624:	681b      	ldr	r3, [r3, #0]
 8034626:	f042 0201 	orr.w	r2, r2, #1
 803462a:	601a      	str	r2, [r3, #0]
 803462c:	e000      	b.n	8034630 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803462e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8034630:	2300      	movs	r3, #0
}
 8034632:	4618      	mov	r0, r3
 8034634:	3714      	adds	r7, #20
 8034636:	46bd      	mov	sp, r7
 8034638:	f85d 7b04 	ldr.w	r7, [sp], #4
 803463c:	4770      	bx	lr
 803463e:	bf00      	nop
 8034640:	40010000 	.word	0x40010000
 8034644:	40000400 	.word	0x40000400
 8034648:	40000800 	.word	0x40000800
 803464c:	40000c00 	.word	0x40000c00
 8034650:	40010400 	.word	0x40010400
 8034654:	40001800 	.word	0x40001800
 8034658:	40014000 	.word	0x40014000
 803465c:	00010007 	.word	0x00010007

08034660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8034660:	b580      	push	{r7, lr}
 8034662:	b082      	sub	sp, #8
 8034664:	af00      	add	r7, sp, #0
 8034666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8034668:	687b      	ldr	r3, [r7, #4]
 803466a:	681b      	ldr	r3, [r3, #0]
 803466c:	691b      	ldr	r3, [r3, #16]
 803466e:	f003 0302 	and.w	r3, r3, #2
 8034672:	2b02      	cmp	r3, #2
 8034674:	d122      	bne.n	80346bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8034676:	687b      	ldr	r3, [r7, #4]
 8034678:	681b      	ldr	r3, [r3, #0]
 803467a:	68db      	ldr	r3, [r3, #12]
 803467c:	f003 0302 	and.w	r3, r3, #2
 8034680:	2b02      	cmp	r3, #2
 8034682:	d11b      	bne.n	80346bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8034684:	687b      	ldr	r3, [r7, #4]
 8034686:	681b      	ldr	r3, [r3, #0]
 8034688:	f06f 0202 	mvn.w	r2, #2
 803468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 803468e:	687b      	ldr	r3, [r7, #4]
 8034690:	2201      	movs	r2, #1
 8034692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8034694:	687b      	ldr	r3, [r7, #4]
 8034696:	681b      	ldr	r3, [r3, #0]
 8034698:	699b      	ldr	r3, [r3, #24]
 803469a:	f003 0303 	and.w	r3, r3, #3
 803469e:	2b00      	cmp	r3, #0
 80346a0:	d003      	beq.n	80346aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80346a2:	6878      	ldr	r0, [r7, #4]
 80346a4:	f000 f9fe 	bl	8034aa4 <HAL_TIM_IC_CaptureCallback>
 80346a8:	e005      	b.n	80346b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80346aa:	6878      	ldr	r0, [r7, #4]
 80346ac:	f000 f9f0 	bl	8034a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80346b0:	6878      	ldr	r0, [r7, #4]
 80346b2:	f000 fa01 	bl	8034ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80346b6:	687b      	ldr	r3, [r7, #4]
 80346b8:	2200      	movs	r2, #0
 80346ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80346bc:	687b      	ldr	r3, [r7, #4]
 80346be:	681b      	ldr	r3, [r3, #0]
 80346c0:	691b      	ldr	r3, [r3, #16]
 80346c2:	f003 0304 	and.w	r3, r3, #4
 80346c6:	2b04      	cmp	r3, #4
 80346c8:	d122      	bne.n	8034710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80346ca:	687b      	ldr	r3, [r7, #4]
 80346cc:	681b      	ldr	r3, [r3, #0]
 80346ce:	68db      	ldr	r3, [r3, #12]
 80346d0:	f003 0304 	and.w	r3, r3, #4
 80346d4:	2b04      	cmp	r3, #4
 80346d6:	d11b      	bne.n	8034710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80346d8:	687b      	ldr	r3, [r7, #4]
 80346da:	681b      	ldr	r3, [r3, #0]
 80346dc:	f06f 0204 	mvn.w	r2, #4
 80346e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80346e2:	687b      	ldr	r3, [r7, #4]
 80346e4:	2202      	movs	r2, #2
 80346e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80346e8:	687b      	ldr	r3, [r7, #4]
 80346ea:	681b      	ldr	r3, [r3, #0]
 80346ec:	699b      	ldr	r3, [r3, #24]
 80346ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80346f2:	2b00      	cmp	r3, #0
 80346f4:	d003      	beq.n	80346fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80346f6:	6878      	ldr	r0, [r7, #4]
 80346f8:	f000 f9d4 	bl	8034aa4 <HAL_TIM_IC_CaptureCallback>
 80346fc:	e005      	b.n	803470a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80346fe:	6878      	ldr	r0, [r7, #4]
 8034700:	f000 f9c6 	bl	8034a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034704:	6878      	ldr	r0, [r7, #4]
 8034706:	f000 f9d7 	bl	8034ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803470a:	687b      	ldr	r3, [r7, #4]
 803470c:	2200      	movs	r2, #0
 803470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8034710:	687b      	ldr	r3, [r7, #4]
 8034712:	681b      	ldr	r3, [r3, #0]
 8034714:	691b      	ldr	r3, [r3, #16]
 8034716:	f003 0308 	and.w	r3, r3, #8
 803471a:	2b08      	cmp	r3, #8
 803471c:	d122      	bne.n	8034764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 803471e:	687b      	ldr	r3, [r7, #4]
 8034720:	681b      	ldr	r3, [r3, #0]
 8034722:	68db      	ldr	r3, [r3, #12]
 8034724:	f003 0308 	and.w	r3, r3, #8
 8034728:	2b08      	cmp	r3, #8
 803472a:	d11b      	bne.n	8034764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 803472c:	687b      	ldr	r3, [r7, #4]
 803472e:	681b      	ldr	r3, [r3, #0]
 8034730:	f06f 0208 	mvn.w	r2, #8
 8034734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8034736:	687b      	ldr	r3, [r7, #4]
 8034738:	2204      	movs	r2, #4
 803473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 803473c:	687b      	ldr	r3, [r7, #4]
 803473e:	681b      	ldr	r3, [r3, #0]
 8034740:	69db      	ldr	r3, [r3, #28]
 8034742:	f003 0303 	and.w	r3, r3, #3
 8034746:	2b00      	cmp	r3, #0
 8034748:	d003      	beq.n	8034752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803474a:	6878      	ldr	r0, [r7, #4]
 803474c:	f000 f9aa 	bl	8034aa4 <HAL_TIM_IC_CaptureCallback>
 8034750:	e005      	b.n	803475e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034752:	6878      	ldr	r0, [r7, #4]
 8034754:	f000 f99c 	bl	8034a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034758:	6878      	ldr	r0, [r7, #4]
 803475a:	f000 f9ad 	bl	8034ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803475e:	687b      	ldr	r3, [r7, #4]
 8034760:	2200      	movs	r2, #0
 8034762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	681b      	ldr	r3, [r3, #0]
 8034768:	691b      	ldr	r3, [r3, #16]
 803476a:	f003 0310 	and.w	r3, r3, #16
 803476e:	2b10      	cmp	r3, #16
 8034770:	d122      	bne.n	80347b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8034772:	687b      	ldr	r3, [r7, #4]
 8034774:	681b      	ldr	r3, [r3, #0]
 8034776:	68db      	ldr	r3, [r3, #12]
 8034778:	f003 0310 	and.w	r3, r3, #16
 803477c:	2b10      	cmp	r3, #16
 803477e:	d11b      	bne.n	80347b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8034780:	687b      	ldr	r3, [r7, #4]
 8034782:	681b      	ldr	r3, [r3, #0]
 8034784:	f06f 0210 	mvn.w	r2, #16
 8034788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 803478a:	687b      	ldr	r3, [r7, #4]
 803478c:	2208      	movs	r2, #8
 803478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8034790:	687b      	ldr	r3, [r7, #4]
 8034792:	681b      	ldr	r3, [r3, #0]
 8034794:	69db      	ldr	r3, [r3, #28]
 8034796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803479a:	2b00      	cmp	r3, #0
 803479c:	d003      	beq.n	80347a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803479e:	6878      	ldr	r0, [r7, #4]
 80347a0:	f000 f980 	bl	8034aa4 <HAL_TIM_IC_CaptureCallback>
 80347a4:	e005      	b.n	80347b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80347a6:	6878      	ldr	r0, [r7, #4]
 80347a8:	f000 f972 	bl	8034a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80347ac:	6878      	ldr	r0, [r7, #4]
 80347ae:	f000 f983 	bl	8034ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80347b2:	687b      	ldr	r3, [r7, #4]
 80347b4:	2200      	movs	r2, #0
 80347b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80347b8:	687b      	ldr	r3, [r7, #4]
 80347ba:	681b      	ldr	r3, [r3, #0]
 80347bc:	691b      	ldr	r3, [r3, #16]
 80347be:	f003 0301 	and.w	r3, r3, #1
 80347c2:	2b01      	cmp	r3, #1
 80347c4:	d10e      	bne.n	80347e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80347c6:	687b      	ldr	r3, [r7, #4]
 80347c8:	681b      	ldr	r3, [r3, #0]
 80347ca:	68db      	ldr	r3, [r3, #12]
 80347cc:	f003 0301 	and.w	r3, r3, #1
 80347d0:	2b01      	cmp	r3, #1
 80347d2:	d107      	bne.n	80347e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80347d4:	687b      	ldr	r3, [r7, #4]
 80347d6:	681b      	ldr	r3, [r3, #0]
 80347d8:	f06f 0201 	mvn.w	r2, #1
 80347dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80347de:	6878      	ldr	r0, [r7, #4]
 80347e0:	f7f5 f96a 	bl	8029ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80347e4:	687b      	ldr	r3, [r7, #4]
 80347e6:	681b      	ldr	r3, [r3, #0]
 80347e8:	691b      	ldr	r3, [r3, #16]
 80347ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80347ee:	2b80      	cmp	r3, #128	; 0x80
 80347f0:	d10e      	bne.n	8034810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80347f2:	687b      	ldr	r3, [r7, #4]
 80347f4:	681b      	ldr	r3, [r3, #0]
 80347f6:	68db      	ldr	r3, [r3, #12]
 80347f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80347fc:	2b80      	cmp	r3, #128	; 0x80
 80347fe:	d107      	bne.n	8034810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8034800:	687b      	ldr	r3, [r7, #4]
 8034802:	681b      	ldr	r3, [r3, #0]
 8034804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8034808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 803480a:	6878      	ldr	r0, [r7, #4]
 803480c:	f000 fb38 	bl	8034e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8034810:	687b      	ldr	r3, [r7, #4]
 8034812:	681b      	ldr	r3, [r3, #0]
 8034814:	691b      	ldr	r3, [r3, #16]
 8034816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803481e:	d10e      	bne.n	803483e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034820:	687b      	ldr	r3, [r7, #4]
 8034822:	681b      	ldr	r3, [r3, #0]
 8034824:	68db      	ldr	r3, [r3, #12]
 8034826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803482a:	2b80      	cmp	r3, #128	; 0x80
 803482c:	d107      	bne.n	803483e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 803482e:	687b      	ldr	r3, [r7, #4]
 8034830:	681b      	ldr	r3, [r3, #0]
 8034832:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8034836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8034838:	6878      	ldr	r0, [r7, #4]
 803483a:	f000 fb2b 	bl	8034e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 803483e:	687b      	ldr	r3, [r7, #4]
 8034840:	681b      	ldr	r3, [r3, #0]
 8034842:	691b      	ldr	r3, [r3, #16]
 8034844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034848:	2b40      	cmp	r3, #64	; 0x40
 803484a:	d10e      	bne.n	803486a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 803484c:	687b      	ldr	r3, [r7, #4]
 803484e:	681b      	ldr	r3, [r3, #0]
 8034850:	68db      	ldr	r3, [r3, #12]
 8034852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034856:	2b40      	cmp	r3, #64	; 0x40
 8034858:	d107      	bne.n	803486a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 803485a:	687b      	ldr	r3, [r7, #4]
 803485c:	681b      	ldr	r3, [r3, #0]
 803485e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8034862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8034864:	6878      	ldr	r0, [r7, #4]
 8034866:	f000 f931 	bl	8034acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 803486a:	687b      	ldr	r3, [r7, #4]
 803486c:	681b      	ldr	r3, [r3, #0]
 803486e:	691b      	ldr	r3, [r3, #16]
 8034870:	f003 0320 	and.w	r3, r3, #32
 8034874:	2b20      	cmp	r3, #32
 8034876:	d10e      	bne.n	8034896 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8034878:	687b      	ldr	r3, [r7, #4]
 803487a:	681b      	ldr	r3, [r3, #0]
 803487c:	68db      	ldr	r3, [r3, #12]
 803487e:	f003 0320 	and.w	r3, r3, #32
 8034882:	2b20      	cmp	r3, #32
 8034884:	d107      	bne.n	8034896 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8034886:	687b      	ldr	r3, [r7, #4]
 8034888:	681b      	ldr	r3, [r3, #0]
 803488a:	f06f 0220 	mvn.w	r2, #32
 803488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8034890:	6878      	ldr	r0, [r7, #4]
 8034892:	f000 faeb 	bl	8034e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8034896:	bf00      	nop
 8034898:	3708      	adds	r7, #8
 803489a:	46bd      	mov	sp, r7
 803489c:	bd80      	pop	{r7, pc}
	...

080348a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80348a0:	b580      	push	{r7, lr}
 80348a2:	b084      	sub	sp, #16
 80348a4:	af00      	add	r7, sp, #0
 80348a6:	6078      	str	r0, [r7, #4]
 80348a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80348aa:	2300      	movs	r3, #0
 80348ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80348ae:	687b      	ldr	r3, [r7, #4]
 80348b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80348b4:	2b01      	cmp	r3, #1
 80348b6:	d101      	bne.n	80348bc <HAL_TIM_ConfigClockSource+0x1c>
 80348b8:	2302      	movs	r3, #2
 80348ba:	e0dc      	b.n	8034a76 <HAL_TIM_ConfigClockSource+0x1d6>
 80348bc:	687b      	ldr	r3, [r7, #4]
 80348be:	2201      	movs	r2, #1
 80348c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80348c4:	687b      	ldr	r3, [r7, #4]
 80348c6:	2202      	movs	r2, #2
 80348c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80348cc:	687b      	ldr	r3, [r7, #4]
 80348ce:	681b      	ldr	r3, [r3, #0]
 80348d0:	689b      	ldr	r3, [r3, #8]
 80348d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80348d4:	68ba      	ldr	r2, [r7, #8]
 80348d6:	4b6a      	ldr	r3, [pc, #424]	; (8034a80 <HAL_TIM_ConfigClockSource+0x1e0>)
 80348d8:	4013      	ands	r3, r2
 80348da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80348dc:	68bb      	ldr	r3, [r7, #8]
 80348de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80348e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80348e4:	687b      	ldr	r3, [r7, #4]
 80348e6:	681b      	ldr	r3, [r3, #0]
 80348e8:	68ba      	ldr	r2, [r7, #8]
 80348ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80348ec:	683b      	ldr	r3, [r7, #0]
 80348ee:	681b      	ldr	r3, [r3, #0]
 80348f0:	4a64      	ldr	r2, [pc, #400]	; (8034a84 <HAL_TIM_ConfigClockSource+0x1e4>)
 80348f2:	4293      	cmp	r3, r2
 80348f4:	f000 80a9 	beq.w	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 80348f8:	4a62      	ldr	r2, [pc, #392]	; (8034a84 <HAL_TIM_ConfigClockSource+0x1e4>)
 80348fa:	4293      	cmp	r3, r2
 80348fc:	f200 80ae 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034900:	4a61      	ldr	r2, [pc, #388]	; (8034a88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8034902:	4293      	cmp	r3, r2
 8034904:	f000 80a1 	beq.w	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034908:	4a5f      	ldr	r2, [pc, #380]	; (8034a88 <HAL_TIM_ConfigClockSource+0x1e8>)
 803490a:	4293      	cmp	r3, r2
 803490c:	f200 80a6 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034910:	4a5e      	ldr	r2, [pc, #376]	; (8034a8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8034912:	4293      	cmp	r3, r2
 8034914:	f000 8099 	beq.w	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034918:	4a5c      	ldr	r2, [pc, #368]	; (8034a8c <HAL_TIM_ConfigClockSource+0x1ec>)
 803491a:	4293      	cmp	r3, r2
 803491c:	f200 809e 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034920:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034924:	f000 8091 	beq.w	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034928:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 803492c:	f200 8096 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034934:	f000 8089 	beq.w	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803493c:	f200 808e 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034944:	d03e      	beq.n	80349c4 <HAL_TIM_ConfigClockSource+0x124>
 8034946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803494a:	f200 8087 	bhi.w	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 803494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034952:	f000 8086 	beq.w	8034a62 <HAL_TIM_ConfigClockSource+0x1c2>
 8034956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803495a:	d87f      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 803495c:	2b70      	cmp	r3, #112	; 0x70
 803495e:	d01a      	beq.n	8034996 <HAL_TIM_ConfigClockSource+0xf6>
 8034960:	2b70      	cmp	r3, #112	; 0x70
 8034962:	d87b      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034964:	2b60      	cmp	r3, #96	; 0x60
 8034966:	d050      	beq.n	8034a0a <HAL_TIM_ConfigClockSource+0x16a>
 8034968:	2b60      	cmp	r3, #96	; 0x60
 803496a:	d877      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 803496c:	2b50      	cmp	r3, #80	; 0x50
 803496e:	d03c      	beq.n	80349ea <HAL_TIM_ConfigClockSource+0x14a>
 8034970:	2b50      	cmp	r3, #80	; 0x50
 8034972:	d873      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034974:	2b40      	cmp	r3, #64	; 0x40
 8034976:	d058      	beq.n	8034a2a <HAL_TIM_ConfigClockSource+0x18a>
 8034978:	2b40      	cmp	r3, #64	; 0x40
 803497a:	d86f      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 803497c:	2b30      	cmp	r3, #48	; 0x30
 803497e:	d064      	beq.n	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034980:	2b30      	cmp	r3, #48	; 0x30
 8034982:	d86b      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 8034984:	2b20      	cmp	r3, #32
 8034986:	d060      	beq.n	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034988:	2b20      	cmp	r3, #32
 803498a:	d867      	bhi.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
 803498c:	2b00      	cmp	r3, #0
 803498e:	d05c      	beq.n	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034990:	2b10      	cmp	r3, #16
 8034992:	d05a      	beq.n	8034a4a <HAL_TIM_ConfigClockSource+0x1aa>
 8034994:	e062      	b.n	8034a5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8034996:	687b      	ldr	r3, [r7, #4]
 8034998:	6818      	ldr	r0, [r3, #0]
 803499a:	683b      	ldr	r3, [r7, #0]
 803499c:	6899      	ldr	r1, [r3, #8]
 803499e:	683b      	ldr	r3, [r7, #0]
 80349a0:	685a      	ldr	r2, [r3, #4]
 80349a2:	683b      	ldr	r3, [r7, #0]
 80349a4:	68db      	ldr	r3, [r3, #12]
 80349a6:	f000 f9b3 	bl	8034d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80349aa:	687b      	ldr	r3, [r7, #4]
 80349ac:	681b      	ldr	r3, [r3, #0]
 80349ae:	689b      	ldr	r3, [r3, #8]
 80349b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80349b2:	68bb      	ldr	r3, [r7, #8]
 80349b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80349b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80349ba:	687b      	ldr	r3, [r7, #4]
 80349bc:	681b      	ldr	r3, [r3, #0]
 80349be:	68ba      	ldr	r2, [r7, #8]
 80349c0:	609a      	str	r2, [r3, #8]
      break;
 80349c2:	e04f      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80349c4:	687b      	ldr	r3, [r7, #4]
 80349c6:	6818      	ldr	r0, [r3, #0]
 80349c8:	683b      	ldr	r3, [r7, #0]
 80349ca:	6899      	ldr	r1, [r3, #8]
 80349cc:	683b      	ldr	r3, [r7, #0]
 80349ce:	685a      	ldr	r2, [r3, #4]
 80349d0:	683b      	ldr	r3, [r7, #0]
 80349d2:	68db      	ldr	r3, [r3, #12]
 80349d4:	f000 f99c 	bl	8034d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80349d8:	687b      	ldr	r3, [r7, #4]
 80349da:	681b      	ldr	r3, [r3, #0]
 80349dc:	689a      	ldr	r2, [r3, #8]
 80349de:	687b      	ldr	r3, [r7, #4]
 80349e0:	681b      	ldr	r3, [r3, #0]
 80349e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80349e6:	609a      	str	r2, [r3, #8]
      break;
 80349e8:	e03c      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80349ea:	687b      	ldr	r3, [r7, #4]
 80349ec:	6818      	ldr	r0, [r3, #0]
 80349ee:	683b      	ldr	r3, [r7, #0]
 80349f0:	6859      	ldr	r1, [r3, #4]
 80349f2:	683b      	ldr	r3, [r7, #0]
 80349f4:	68db      	ldr	r3, [r3, #12]
 80349f6:	461a      	mov	r2, r3
 80349f8:	f000 f90c 	bl	8034c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80349fc:	687b      	ldr	r3, [r7, #4]
 80349fe:	681b      	ldr	r3, [r3, #0]
 8034a00:	2150      	movs	r1, #80	; 0x50
 8034a02:	4618      	mov	r0, r3
 8034a04:	f000 f966 	bl	8034cd4 <TIM_ITRx_SetConfig>
      break;
 8034a08:	e02c      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8034a0a:	687b      	ldr	r3, [r7, #4]
 8034a0c:	6818      	ldr	r0, [r3, #0]
 8034a0e:	683b      	ldr	r3, [r7, #0]
 8034a10:	6859      	ldr	r1, [r3, #4]
 8034a12:	683b      	ldr	r3, [r7, #0]
 8034a14:	68db      	ldr	r3, [r3, #12]
 8034a16:	461a      	mov	r2, r3
 8034a18:	f000 f92b 	bl	8034c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034a1c:	687b      	ldr	r3, [r7, #4]
 8034a1e:	681b      	ldr	r3, [r3, #0]
 8034a20:	2160      	movs	r1, #96	; 0x60
 8034a22:	4618      	mov	r0, r3
 8034a24:	f000 f956 	bl	8034cd4 <TIM_ITRx_SetConfig>
      break;
 8034a28:	e01c      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034a2a:	687b      	ldr	r3, [r7, #4]
 8034a2c:	6818      	ldr	r0, [r3, #0]
 8034a2e:	683b      	ldr	r3, [r7, #0]
 8034a30:	6859      	ldr	r1, [r3, #4]
 8034a32:	683b      	ldr	r3, [r7, #0]
 8034a34:	68db      	ldr	r3, [r3, #12]
 8034a36:	461a      	mov	r2, r3
 8034a38:	f000 f8ec 	bl	8034c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8034a3c:	687b      	ldr	r3, [r7, #4]
 8034a3e:	681b      	ldr	r3, [r3, #0]
 8034a40:	2140      	movs	r1, #64	; 0x40
 8034a42:	4618      	mov	r0, r3
 8034a44:	f000 f946 	bl	8034cd4 <TIM_ITRx_SetConfig>
      break;
 8034a48:	e00c      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8034a4a:	687b      	ldr	r3, [r7, #4]
 8034a4c:	681a      	ldr	r2, [r3, #0]
 8034a4e:	683b      	ldr	r3, [r7, #0]
 8034a50:	681b      	ldr	r3, [r3, #0]
 8034a52:	4619      	mov	r1, r3
 8034a54:	4610      	mov	r0, r2
 8034a56:	f000 f93d 	bl	8034cd4 <TIM_ITRx_SetConfig>
      break;
 8034a5a:	e003      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8034a5c:	2301      	movs	r3, #1
 8034a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8034a60:	e000      	b.n	8034a64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8034a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8034a64:	687b      	ldr	r3, [r7, #4]
 8034a66:	2201      	movs	r2, #1
 8034a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034a6c:	687b      	ldr	r3, [r7, #4]
 8034a6e:	2200      	movs	r2, #0
 8034a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8034a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8034a76:	4618      	mov	r0, r3
 8034a78:	3710      	adds	r7, #16
 8034a7a:	46bd      	mov	sp, r7
 8034a7c:	bd80      	pop	{r7, pc}
 8034a7e:	bf00      	nop
 8034a80:	ffceff88 	.word	0xffceff88
 8034a84:	00100040 	.word	0x00100040
 8034a88:	00100030 	.word	0x00100030
 8034a8c:	00100020 	.word	0x00100020

08034a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8034a90:	b480      	push	{r7}
 8034a92:	b083      	sub	sp, #12
 8034a94:	af00      	add	r7, sp, #0
 8034a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8034a98:	bf00      	nop
 8034a9a:	370c      	adds	r7, #12
 8034a9c:	46bd      	mov	sp, r7
 8034a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa2:	4770      	bx	lr

08034aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8034aa4:	b480      	push	{r7}
 8034aa6:	b083      	sub	sp, #12
 8034aa8:	af00      	add	r7, sp, #0
 8034aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8034aac:	bf00      	nop
 8034aae:	370c      	adds	r7, #12
 8034ab0:	46bd      	mov	sp, r7
 8034ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ab6:	4770      	bx	lr

08034ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8034ab8:	b480      	push	{r7}
 8034aba:	b083      	sub	sp, #12
 8034abc:	af00      	add	r7, sp, #0
 8034abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8034ac0:	bf00      	nop
 8034ac2:	370c      	adds	r7, #12
 8034ac4:	46bd      	mov	sp, r7
 8034ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aca:	4770      	bx	lr

08034acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8034acc:	b480      	push	{r7}
 8034ace:	b083      	sub	sp, #12
 8034ad0:	af00      	add	r7, sp, #0
 8034ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034ad4:	bf00      	nop
 8034ad6:	370c      	adds	r7, #12
 8034ad8:	46bd      	mov	sp, r7
 8034ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ade:	4770      	bx	lr

08034ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8034ae0:	b480      	push	{r7}
 8034ae2:	b085      	sub	sp, #20
 8034ae4:	af00      	add	r7, sp, #0
 8034ae6:	6078      	str	r0, [r7, #4]
 8034ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8034aea:	687b      	ldr	r3, [r7, #4]
 8034aec:	681b      	ldr	r3, [r3, #0]
 8034aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034af0:	687b      	ldr	r3, [r7, #4]
 8034af2:	4a40      	ldr	r2, [pc, #256]	; (8034bf4 <TIM_Base_SetConfig+0x114>)
 8034af4:	4293      	cmp	r3, r2
 8034af6:	d013      	beq.n	8034b20 <TIM_Base_SetConfig+0x40>
 8034af8:	687b      	ldr	r3, [r7, #4]
 8034afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034afe:	d00f      	beq.n	8034b20 <TIM_Base_SetConfig+0x40>
 8034b00:	687b      	ldr	r3, [r7, #4]
 8034b02:	4a3d      	ldr	r2, [pc, #244]	; (8034bf8 <TIM_Base_SetConfig+0x118>)
 8034b04:	4293      	cmp	r3, r2
 8034b06:	d00b      	beq.n	8034b20 <TIM_Base_SetConfig+0x40>
 8034b08:	687b      	ldr	r3, [r7, #4]
 8034b0a:	4a3c      	ldr	r2, [pc, #240]	; (8034bfc <TIM_Base_SetConfig+0x11c>)
 8034b0c:	4293      	cmp	r3, r2
 8034b0e:	d007      	beq.n	8034b20 <TIM_Base_SetConfig+0x40>
 8034b10:	687b      	ldr	r3, [r7, #4]
 8034b12:	4a3b      	ldr	r2, [pc, #236]	; (8034c00 <TIM_Base_SetConfig+0x120>)
 8034b14:	4293      	cmp	r3, r2
 8034b16:	d003      	beq.n	8034b20 <TIM_Base_SetConfig+0x40>
 8034b18:	687b      	ldr	r3, [r7, #4]
 8034b1a:	4a3a      	ldr	r2, [pc, #232]	; (8034c04 <TIM_Base_SetConfig+0x124>)
 8034b1c:	4293      	cmp	r3, r2
 8034b1e:	d108      	bne.n	8034b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034b20:	68fb      	ldr	r3, [r7, #12]
 8034b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8034b28:	683b      	ldr	r3, [r7, #0]
 8034b2a:	685b      	ldr	r3, [r3, #4]
 8034b2c:	68fa      	ldr	r2, [r7, #12]
 8034b2e:	4313      	orrs	r3, r2
 8034b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034b32:	687b      	ldr	r3, [r7, #4]
 8034b34:	4a2f      	ldr	r2, [pc, #188]	; (8034bf4 <TIM_Base_SetConfig+0x114>)
 8034b36:	4293      	cmp	r3, r2
 8034b38:	d01f      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b3a:	687b      	ldr	r3, [r7, #4]
 8034b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b40:	d01b      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b42:	687b      	ldr	r3, [r7, #4]
 8034b44:	4a2c      	ldr	r2, [pc, #176]	; (8034bf8 <TIM_Base_SetConfig+0x118>)
 8034b46:	4293      	cmp	r3, r2
 8034b48:	d017      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b4a:	687b      	ldr	r3, [r7, #4]
 8034b4c:	4a2b      	ldr	r2, [pc, #172]	; (8034bfc <TIM_Base_SetConfig+0x11c>)
 8034b4e:	4293      	cmp	r3, r2
 8034b50:	d013      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b52:	687b      	ldr	r3, [r7, #4]
 8034b54:	4a2a      	ldr	r2, [pc, #168]	; (8034c00 <TIM_Base_SetConfig+0x120>)
 8034b56:	4293      	cmp	r3, r2
 8034b58:	d00f      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b5a:	687b      	ldr	r3, [r7, #4]
 8034b5c:	4a29      	ldr	r2, [pc, #164]	; (8034c04 <TIM_Base_SetConfig+0x124>)
 8034b5e:	4293      	cmp	r3, r2
 8034b60:	d00b      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b62:	687b      	ldr	r3, [r7, #4]
 8034b64:	4a28      	ldr	r2, [pc, #160]	; (8034c08 <TIM_Base_SetConfig+0x128>)
 8034b66:	4293      	cmp	r3, r2
 8034b68:	d007      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b6a:	687b      	ldr	r3, [r7, #4]
 8034b6c:	4a27      	ldr	r2, [pc, #156]	; (8034c0c <TIM_Base_SetConfig+0x12c>)
 8034b6e:	4293      	cmp	r3, r2
 8034b70:	d003      	beq.n	8034b7a <TIM_Base_SetConfig+0x9a>
 8034b72:	687b      	ldr	r3, [r7, #4]
 8034b74:	4a26      	ldr	r2, [pc, #152]	; (8034c10 <TIM_Base_SetConfig+0x130>)
 8034b76:	4293      	cmp	r3, r2
 8034b78:	d108      	bne.n	8034b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8034b7a:	68fb      	ldr	r3, [r7, #12]
 8034b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8034b82:	683b      	ldr	r3, [r7, #0]
 8034b84:	68db      	ldr	r3, [r3, #12]
 8034b86:	68fa      	ldr	r2, [r7, #12]
 8034b88:	4313      	orrs	r3, r2
 8034b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8034b8c:	68fb      	ldr	r3, [r7, #12]
 8034b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8034b92:	683b      	ldr	r3, [r7, #0]
 8034b94:	695b      	ldr	r3, [r3, #20]
 8034b96:	4313      	orrs	r3, r2
 8034b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8034b9a:	687b      	ldr	r3, [r7, #4]
 8034b9c:	68fa      	ldr	r2, [r7, #12]
 8034b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034ba0:	683b      	ldr	r3, [r7, #0]
 8034ba2:	689a      	ldr	r2, [r3, #8]
 8034ba4:	687b      	ldr	r3, [r7, #4]
 8034ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8034ba8:	683b      	ldr	r3, [r7, #0]
 8034baa:	681a      	ldr	r2, [r3, #0]
 8034bac:	687b      	ldr	r3, [r7, #4]
 8034bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034bb0:	687b      	ldr	r3, [r7, #4]
 8034bb2:	4a10      	ldr	r2, [pc, #64]	; (8034bf4 <TIM_Base_SetConfig+0x114>)
 8034bb4:	4293      	cmp	r3, r2
 8034bb6:	d00f      	beq.n	8034bd8 <TIM_Base_SetConfig+0xf8>
 8034bb8:	687b      	ldr	r3, [r7, #4]
 8034bba:	4a12      	ldr	r2, [pc, #72]	; (8034c04 <TIM_Base_SetConfig+0x124>)
 8034bbc:	4293      	cmp	r3, r2
 8034bbe:	d00b      	beq.n	8034bd8 <TIM_Base_SetConfig+0xf8>
 8034bc0:	687b      	ldr	r3, [r7, #4]
 8034bc2:	4a11      	ldr	r2, [pc, #68]	; (8034c08 <TIM_Base_SetConfig+0x128>)
 8034bc4:	4293      	cmp	r3, r2
 8034bc6:	d007      	beq.n	8034bd8 <TIM_Base_SetConfig+0xf8>
 8034bc8:	687b      	ldr	r3, [r7, #4]
 8034bca:	4a10      	ldr	r2, [pc, #64]	; (8034c0c <TIM_Base_SetConfig+0x12c>)
 8034bcc:	4293      	cmp	r3, r2
 8034bce:	d003      	beq.n	8034bd8 <TIM_Base_SetConfig+0xf8>
 8034bd0:	687b      	ldr	r3, [r7, #4]
 8034bd2:	4a0f      	ldr	r2, [pc, #60]	; (8034c10 <TIM_Base_SetConfig+0x130>)
 8034bd4:	4293      	cmp	r3, r2
 8034bd6:	d103      	bne.n	8034be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034bd8:	683b      	ldr	r3, [r7, #0]
 8034bda:	691a      	ldr	r2, [r3, #16]
 8034bdc:	687b      	ldr	r3, [r7, #4]
 8034bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034be0:	687b      	ldr	r3, [r7, #4]
 8034be2:	2201      	movs	r2, #1
 8034be4:	615a      	str	r2, [r3, #20]
}
 8034be6:	bf00      	nop
 8034be8:	3714      	adds	r7, #20
 8034bea:	46bd      	mov	sp, r7
 8034bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034bf0:	4770      	bx	lr
 8034bf2:	bf00      	nop
 8034bf4:	40010000 	.word	0x40010000
 8034bf8:	40000400 	.word	0x40000400
 8034bfc:	40000800 	.word	0x40000800
 8034c00:	40000c00 	.word	0x40000c00
 8034c04:	40010400 	.word	0x40010400
 8034c08:	40014000 	.word	0x40014000
 8034c0c:	40014400 	.word	0x40014400
 8034c10:	40014800 	.word	0x40014800

08034c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034c14:	b480      	push	{r7}
 8034c16:	b087      	sub	sp, #28
 8034c18:	af00      	add	r7, sp, #0
 8034c1a:	60f8      	str	r0, [r7, #12]
 8034c1c:	60b9      	str	r1, [r7, #8]
 8034c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034c20:	68fb      	ldr	r3, [r7, #12]
 8034c22:	6a1b      	ldr	r3, [r3, #32]
 8034c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8034c26:	68fb      	ldr	r3, [r7, #12]
 8034c28:	6a1b      	ldr	r3, [r3, #32]
 8034c2a:	f023 0201 	bic.w	r2, r3, #1
 8034c2e:	68fb      	ldr	r3, [r7, #12]
 8034c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034c32:	68fb      	ldr	r3, [r7, #12]
 8034c34:	699b      	ldr	r3, [r3, #24]
 8034c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034c38:	693b      	ldr	r3, [r7, #16]
 8034c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034c40:	687b      	ldr	r3, [r7, #4]
 8034c42:	011b      	lsls	r3, r3, #4
 8034c44:	693a      	ldr	r2, [r7, #16]
 8034c46:	4313      	orrs	r3, r2
 8034c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034c4a:	697b      	ldr	r3, [r7, #20]
 8034c4c:	f023 030a 	bic.w	r3, r3, #10
 8034c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034c52:	697a      	ldr	r2, [r7, #20]
 8034c54:	68bb      	ldr	r3, [r7, #8]
 8034c56:	4313      	orrs	r3, r2
 8034c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034c5a:	68fb      	ldr	r3, [r7, #12]
 8034c5c:	693a      	ldr	r2, [r7, #16]
 8034c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034c60:	68fb      	ldr	r3, [r7, #12]
 8034c62:	697a      	ldr	r2, [r7, #20]
 8034c64:	621a      	str	r2, [r3, #32]
}
 8034c66:	bf00      	nop
 8034c68:	371c      	adds	r7, #28
 8034c6a:	46bd      	mov	sp, r7
 8034c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c70:	4770      	bx	lr

08034c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034c72:	b480      	push	{r7}
 8034c74:	b087      	sub	sp, #28
 8034c76:	af00      	add	r7, sp, #0
 8034c78:	60f8      	str	r0, [r7, #12]
 8034c7a:	60b9      	str	r1, [r7, #8]
 8034c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034c7e:	68fb      	ldr	r3, [r7, #12]
 8034c80:	6a1b      	ldr	r3, [r3, #32]
 8034c82:	f023 0210 	bic.w	r2, r3, #16
 8034c86:	68fb      	ldr	r3, [r7, #12]
 8034c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034c8a:	68fb      	ldr	r3, [r7, #12]
 8034c8c:	699b      	ldr	r3, [r3, #24]
 8034c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034c90:	68fb      	ldr	r3, [r7, #12]
 8034c92:	6a1b      	ldr	r3, [r3, #32]
 8034c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034c96:	697b      	ldr	r3, [r7, #20]
 8034c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034c9e:	687b      	ldr	r3, [r7, #4]
 8034ca0:	031b      	lsls	r3, r3, #12
 8034ca2:	697a      	ldr	r2, [r7, #20]
 8034ca4:	4313      	orrs	r3, r2
 8034ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034ca8:	693b      	ldr	r3, [r7, #16]
 8034caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034cb0:	68bb      	ldr	r3, [r7, #8]
 8034cb2:	011b      	lsls	r3, r3, #4
 8034cb4:	693a      	ldr	r2, [r7, #16]
 8034cb6:	4313      	orrs	r3, r2
 8034cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034cba:	68fb      	ldr	r3, [r7, #12]
 8034cbc:	697a      	ldr	r2, [r7, #20]
 8034cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034cc0:	68fb      	ldr	r3, [r7, #12]
 8034cc2:	693a      	ldr	r2, [r7, #16]
 8034cc4:	621a      	str	r2, [r3, #32]
}
 8034cc6:	bf00      	nop
 8034cc8:	371c      	adds	r7, #28
 8034cca:	46bd      	mov	sp, r7
 8034ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cd0:	4770      	bx	lr
	...

08034cd4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034cd4:	b480      	push	{r7}
 8034cd6:	b085      	sub	sp, #20
 8034cd8:	af00      	add	r7, sp, #0
 8034cda:	6078      	str	r0, [r7, #4]
 8034cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034cde:	687b      	ldr	r3, [r7, #4]
 8034ce0:	689b      	ldr	r3, [r3, #8]
 8034ce2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034ce4:	68fa      	ldr	r2, [r7, #12]
 8034ce6:	4b09      	ldr	r3, [pc, #36]	; (8034d0c <TIM_ITRx_SetConfig+0x38>)
 8034ce8:	4013      	ands	r3, r2
 8034cea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034cec:	683a      	ldr	r2, [r7, #0]
 8034cee:	68fb      	ldr	r3, [r7, #12]
 8034cf0:	4313      	orrs	r3, r2
 8034cf2:	f043 0307 	orr.w	r3, r3, #7
 8034cf6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034cf8:	687b      	ldr	r3, [r7, #4]
 8034cfa:	68fa      	ldr	r2, [r7, #12]
 8034cfc:	609a      	str	r2, [r3, #8]
}
 8034cfe:	bf00      	nop
 8034d00:	3714      	adds	r7, #20
 8034d02:	46bd      	mov	sp, r7
 8034d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d08:	4770      	bx	lr
 8034d0a:	bf00      	nop
 8034d0c:	ffcfff8f 	.word	0xffcfff8f

08034d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034d10:	b480      	push	{r7}
 8034d12:	b087      	sub	sp, #28
 8034d14:	af00      	add	r7, sp, #0
 8034d16:	60f8      	str	r0, [r7, #12]
 8034d18:	60b9      	str	r1, [r7, #8]
 8034d1a:	607a      	str	r2, [r7, #4]
 8034d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034d1e:	68fb      	ldr	r3, [r7, #12]
 8034d20:	689b      	ldr	r3, [r3, #8]
 8034d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034d24:	697b      	ldr	r3, [r7, #20]
 8034d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034d2c:	683b      	ldr	r3, [r7, #0]
 8034d2e:	021a      	lsls	r2, r3, #8
 8034d30:	687b      	ldr	r3, [r7, #4]
 8034d32:	431a      	orrs	r2, r3
 8034d34:	68bb      	ldr	r3, [r7, #8]
 8034d36:	4313      	orrs	r3, r2
 8034d38:	697a      	ldr	r2, [r7, #20]
 8034d3a:	4313      	orrs	r3, r2
 8034d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034d3e:	68fb      	ldr	r3, [r7, #12]
 8034d40:	697a      	ldr	r2, [r7, #20]
 8034d42:	609a      	str	r2, [r3, #8]
}
 8034d44:	bf00      	nop
 8034d46:	371c      	adds	r7, #28
 8034d48:	46bd      	mov	sp, r7
 8034d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d4e:	4770      	bx	lr

08034d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034d50:	b480      	push	{r7}
 8034d52:	b085      	sub	sp, #20
 8034d54:	af00      	add	r7, sp, #0
 8034d56:	6078      	str	r0, [r7, #4]
 8034d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034d5a:	687b      	ldr	r3, [r7, #4]
 8034d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034d60:	2b01      	cmp	r3, #1
 8034d62:	d101      	bne.n	8034d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034d64:	2302      	movs	r3, #2
 8034d66:	e06d      	b.n	8034e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8034d68:	687b      	ldr	r3, [r7, #4]
 8034d6a:	2201      	movs	r2, #1
 8034d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034d70:	687b      	ldr	r3, [r7, #4]
 8034d72:	2202      	movs	r2, #2
 8034d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034d78:	687b      	ldr	r3, [r7, #4]
 8034d7a:	681b      	ldr	r3, [r3, #0]
 8034d7c:	685b      	ldr	r3, [r3, #4]
 8034d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034d80:	687b      	ldr	r3, [r7, #4]
 8034d82:	681b      	ldr	r3, [r3, #0]
 8034d84:	689b      	ldr	r3, [r3, #8]
 8034d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8034d88:	687b      	ldr	r3, [r7, #4]
 8034d8a:	681b      	ldr	r3, [r3, #0]
 8034d8c:	4a30      	ldr	r2, [pc, #192]	; (8034e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034d8e:	4293      	cmp	r3, r2
 8034d90:	d004      	beq.n	8034d9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8034d92:	687b      	ldr	r3, [r7, #4]
 8034d94:	681b      	ldr	r3, [r3, #0]
 8034d96:	4a2f      	ldr	r2, [pc, #188]	; (8034e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034d98:	4293      	cmp	r3, r2
 8034d9a:	d108      	bne.n	8034dae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8034d9c:	68fb      	ldr	r3, [r7, #12]
 8034d9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8034da2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8034da4:	683b      	ldr	r3, [r7, #0]
 8034da6:	685b      	ldr	r3, [r3, #4]
 8034da8:	68fa      	ldr	r2, [r7, #12]
 8034daa:	4313      	orrs	r3, r2
 8034dac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034dae:	68fb      	ldr	r3, [r7, #12]
 8034db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034db4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034db6:	683b      	ldr	r3, [r7, #0]
 8034db8:	681b      	ldr	r3, [r3, #0]
 8034dba:	68fa      	ldr	r2, [r7, #12]
 8034dbc:	4313      	orrs	r3, r2
 8034dbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034dc0:	687b      	ldr	r3, [r7, #4]
 8034dc2:	681b      	ldr	r3, [r3, #0]
 8034dc4:	68fa      	ldr	r2, [r7, #12]
 8034dc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034dc8:	687b      	ldr	r3, [r7, #4]
 8034dca:	681b      	ldr	r3, [r3, #0]
 8034dcc:	4a20      	ldr	r2, [pc, #128]	; (8034e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034dce:	4293      	cmp	r3, r2
 8034dd0:	d022      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034dd2:	687b      	ldr	r3, [r7, #4]
 8034dd4:	681b      	ldr	r3, [r3, #0]
 8034dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034dda:	d01d      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034ddc:	687b      	ldr	r3, [r7, #4]
 8034dde:	681b      	ldr	r3, [r3, #0]
 8034de0:	4a1d      	ldr	r2, [pc, #116]	; (8034e58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8034de2:	4293      	cmp	r3, r2
 8034de4:	d018      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034de6:	687b      	ldr	r3, [r7, #4]
 8034de8:	681b      	ldr	r3, [r3, #0]
 8034dea:	4a1c      	ldr	r2, [pc, #112]	; (8034e5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8034dec:	4293      	cmp	r3, r2
 8034dee:	d013      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034df0:	687b      	ldr	r3, [r7, #4]
 8034df2:	681b      	ldr	r3, [r3, #0]
 8034df4:	4a1a      	ldr	r2, [pc, #104]	; (8034e60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8034df6:	4293      	cmp	r3, r2
 8034df8:	d00e      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034dfa:	687b      	ldr	r3, [r7, #4]
 8034dfc:	681b      	ldr	r3, [r3, #0]
 8034dfe:	4a15      	ldr	r2, [pc, #84]	; (8034e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034e00:	4293      	cmp	r3, r2
 8034e02:	d009      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e04:	687b      	ldr	r3, [r7, #4]
 8034e06:	681b      	ldr	r3, [r3, #0]
 8034e08:	4a16      	ldr	r2, [pc, #88]	; (8034e64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8034e0a:	4293      	cmp	r3, r2
 8034e0c:	d004      	beq.n	8034e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e0e:	687b      	ldr	r3, [r7, #4]
 8034e10:	681b      	ldr	r3, [r3, #0]
 8034e12:	4a15      	ldr	r2, [pc, #84]	; (8034e68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8034e14:	4293      	cmp	r3, r2
 8034e16:	d10c      	bne.n	8034e32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034e18:	68bb      	ldr	r3, [r7, #8]
 8034e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034e20:	683b      	ldr	r3, [r7, #0]
 8034e22:	689b      	ldr	r3, [r3, #8]
 8034e24:	68ba      	ldr	r2, [r7, #8]
 8034e26:	4313      	orrs	r3, r2
 8034e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034e2a:	687b      	ldr	r3, [r7, #4]
 8034e2c:	681b      	ldr	r3, [r3, #0]
 8034e2e:	68ba      	ldr	r2, [r7, #8]
 8034e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034e32:	687b      	ldr	r3, [r7, #4]
 8034e34:	2201      	movs	r2, #1
 8034e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034e3a:	687b      	ldr	r3, [r7, #4]
 8034e3c:	2200      	movs	r2, #0
 8034e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034e42:	2300      	movs	r3, #0
}
 8034e44:	4618      	mov	r0, r3
 8034e46:	3714      	adds	r7, #20
 8034e48:	46bd      	mov	sp, r7
 8034e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e4e:	4770      	bx	lr
 8034e50:	40010000 	.word	0x40010000
 8034e54:	40010400 	.word	0x40010400
 8034e58:	40000400 	.word	0x40000400
 8034e5c:	40000800 	.word	0x40000800
 8034e60:	40000c00 	.word	0x40000c00
 8034e64:	40001800 	.word	0x40001800
 8034e68:	40014000 	.word	0x40014000

08034e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8034e6c:	b480      	push	{r7}
 8034e6e:	b083      	sub	sp, #12
 8034e70:	af00      	add	r7, sp, #0
 8034e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8034e74:	bf00      	nop
 8034e76:	370c      	adds	r7, #12
 8034e78:	46bd      	mov	sp, r7
 8034e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e7e:	4770      	bx	lr

08034e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8034e80:	b480      	push	{r7}
 8034e82:	b083      	sub	sp, #12
 8034e84:	af00      	add	r7, sp, #0
 8034e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8034e88:	bf00      	nop
 8034e8a:	370c      	adds	r7, #12
 8034e8c:	46bd      	mov	sp, r7
 8034e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e92:	4770      	bx	lr

08034e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8034e94:	b480      	push	{r7}
 8034e96:	b083      	sub	sp, #12
 8034e98:	af00      	add	r7, sp, #0
 8034e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8034e9c:	bf00      	nop
 8034e9e:	370c      	adds	r7, #12
 8034ea0:	46bd      	mov	sp, r7
 8034ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ea6:	4770      	bx	lr

08034ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034ea8:	b580      	push	{r7, lr}
 8034eaa:	b082      	sub	sp, #8
 8034eac:	af00      	add	r7, sp, #0
 8034eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034eb0:	687b      	ldr	r3, [r7, #4]
 8034eb2:	2b00      	cmp	r3, #0
 8034eb4:	d101      	bne.n	8034eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034eb6:	2301      	movs	r3, #1
 8034eb8:	e042      	b.n	8034f40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8034eba:	687b      	ldr	r3, [r7, #4]
 8034ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034ec0:	2b00      	cmp	r3, #0
 8034ec2:	d106      	bne.n	8034ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034ec4:	687b      	ldr	r3, [r7, #4]
 8034ec6:	2200      	movs	r2, #0
 8034ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034ecc:	6878      	ldr	r0, [r7, #4]
 8034ece:	f7f5 fc65 	bl	802a79c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034ed2:	687b      	ldr	r3, [r7, #4]
 8034ed4:	2224      	movs	r2, #36	; 0x24
 8034ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8034eda:	687b      	ldr	r3, [r7, #4]
 8034edc:	681b      	ldr	r3, [r3, #0]
 8034ede:	681a      	ldr	r2, [r3, #0]
 8034ee0:	687b      	ldr	r3, [r7, #4]
 8034ee2:	681b      	ldr	r3, [r3, #0]
 8034ee4:	f022 0201 	bic.w	r2, r2, #1
 8034ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8034eea:	6878      	ldr	r0, [r7, #4]
 8034eec:	f000 fdb2 	bl	8035a54 <UART_SetConfig>
 8034ef0:	4603      	mov	r3, r0
 8034ef2:	2b01      	cmp	r3, #1
 8034ef4:	d101      	bne.n	8034efa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8034ef6:	2301      	movs	r3, #1
 8034ef8:	e022      	b.n	8034f40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8034efa:	687b      	ldr	r3, [r7, #4]
 8034efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034efe:	2b00      	cmp	r3, #0
 8034f00:	d002      	beq.n	8034f08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8034f02:	6878      	ldr	r0, [r7, #4]
 8034f04:	f001 fb0e 	bl	8036524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034f08:	687b      	ldr	r3, [r7, #4]
 8034f0a:	681b      	ldr	r3, [r3, #0]
 8034f0c:	685a      	ldr	r2, [r3, #4]
 8034f0e:	687b      	ldr	r3, [r7, #4]
 8034f10:	681b      	ldr	r3, [r3, #0]
 8034f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034f18:	687b      	ldr	r3, [r7, #4]
 8034f1a:	681b      	ldr	r3, [r3, #0]
 8034f1c:	689a      	ldr	r2, [r3, #8]
 8034f1e:	687b      	ldr	r3, [r7, #4]
 8034f20:	681b      	ldr	r3, [r3, #0]
 8034f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8034f28:	687b      	ldr	r3, [r7, #4]
 8034f2a:	681b      	ldr	r3, [r3, #0]
 8034f2c:	681a      	ldr	r2, [r3, #0]
 8034f2e:	687b      	ldr	r3, [r7, #4]
 8034f30:	681b      	ldr	r3, [r3, #0]
 8034f32:	f042 0201 	orr.w	r2, r2, #1
 8034f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8034f38:	6878      	ldr	r0, [r7, #4]
 8034f3a:	f001 fb95 	bl	8036668 <UART_CheckIdleState>
 8034f3e:	4603      	mov	r3, r0
}
 8034f40:	4618      	mov	r0, r3
 8034f42:	3708      	adds	r7, #8
 8034f44:	46bd      	mov	sp, r7
 8034f46:	bd80      	pop	{r7, pc}

08034f48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034f48:	b580      	push	{r7, lr}
 8034f4a:	b08a      	sub	sp, #40	; 0x28
 8034f4c:	af02      	add	r7, sp, #8
 8034f4e:	60f8      	str	r0, [r7, #12]
 8034f50:	60b9      	str	r1, [r7, #8]
 8034f52:	603b      	str	r3, [r7, #0]
 8034f54:	4613      	mov	r3, r2
 8034f56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034f58:	68fb      	ldr	r3, [r7, #12]
 8034f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034f5e:	2b20      	cmp	r3, #32
 8034f60:	f040 80c0 	bne.w	80350e4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8034f64:	68bb      	ldr	r3, [r7, #8]
 8034f66:	2b00      	cmp	r3, #0
 8034f68:	d002      	beq.n	8034f70 <HAL_UART_Receive+0x28>
 8034f6a:	88fb      	ldrh	r3, [r7, #6]
 8034f6c:	2b00      	cmp	r3, #0
 8034f6e:	d101      	bne.n	8034f74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8034f70:	2301      	movs	r3, #1
 8034f72:	e0b8      	b.n	80350e6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8034f74:	68fb      	ldr	r3, [r7, #12]
 8034f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034f7a:	2b01      	cmp	r3, #1
 8034f7c:	d101      	bne.n	8034f82 <HAL_UART_Receive+0x3a>
 8034f7e:	2302      	movs	r3, #2
 8034f80:	e0b1      	b.n	80350e6 <HAL_UART_Receive+0x19e>
 8034f82:	68fb      	ldr	r3, [r7, #12]
 8034f84:	2201      	movs	r2, #1
 8034f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034f8a:	68fb      	ldr	r3, [r7, #12]
 8034f8c:	2200      	movs	r2, #0
 8034f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034f92:	68fb      	ldr	r3, [r7, #12]
 8034f94:	2222      	movs	r2, #34	; 0x22
 8034f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034f9a:	68fb      	ldr	r3, [r7, #12]
 8034f9c:	2200      	movs	r2, #0
 8034f9e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034fa0:	f7f5 fe58 	bl	802ac54 <HAL_GetTick>
 8034fa4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8034fa6:	68fb      	ldr	r3, [r7, #12]
 8034fa8:	88fa      	ldrh	r2, [r7, #6]
 8034faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8034fae:	68fb      	ldr	r3, [r7, #12]
 8034fb0:	88fa      	ldrh	r2, [r7, #6]
 8034fb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8034fb6:	68fb      	ldr	r3, [r7, #12]
 8034fb8:	689b      	ldr	r3, [r3, #8]
 8034fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034fbe:	d10e      	bne.n	8034fde <HAL_UART_Receive+0x96>
 8034fc0:	68fb      	ldr	r3, [r7, #12]
 8034fc2:	691b      	ldr	r3, [r3, #16]
 8034fc4:	2b00      	cmp	r3, #0
 8034fc6:	d105      	bne.n	8034fd4 <HAL_UART_Receive+0x8c>
 8034fc8:	68fb      	ldr	r3, [r7, #12]
 8034fca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8034fce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034fd2:	e02d      	b.n	8035030 <HAL_UART_Receive+0xe8>
 8034fd4:	68fb      	ldr	r3, [r7, #12]
 8034fd6:	22ff      	movs	r2, #255	; 0xff
 8034fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034fdc:	e028      	b.n	8035030 <HAL_UART_Receive+0xe8>
 8034fde:	68fb      	ldr	r3, [r7, #12]
 8034fe0:	689b      	ldr	r3, [r3, #8]
 8034fe2:	2b00      	cmp	r3, #0
 8034fe4:	d10d      	bne.n	8035002 <HAL_UART_Receive+0xba>
 8034fe6:	68fb      	ldr	r3, [r7, #12]
 8034fe8:	691b      	ldr	r3, [r3, #16]
 8034fea:	2b00      	cmp	r3, #0
 8034fec:	d104      	bne.n	8034ff8 <HAL_UART_Receive+0xb0>
 8034fee:	68fb      	ldr	r3, [r7, #12]
 8034ff0:	22ff      	movs	r2, #255	; 0xff
 8034ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034ff6:	e01b      	b.n	8035030 <HAL_UART_Receive+0xe8>
 8034ff8:	68fb      	ldr	r3, [r7, #12]
 8034ffa:	227f      	movs	r2, #127	; 0x7f
 8034ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035000:	e016      	b.n	8035030 <HAL_UART_Receive+0xe8>
 8035002:	68fb      	ldr	r3, [r7, #12]
 8035004:	689b      	ldr	r3, [r3, #8]
 8035006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803500a:	d10d      	bne.n	8035028 <HAL_UART_Receive+0xe0>
 803500c:	68fb      	ldr	r3, [r7, #12]
 803500e:	691b      	ldr	r3, [r3, #16]
 8035010:	2b00      	cmp	r3, #0
 8035012:	d104      	bne.n	803501e <HAL_UART_Receive+0xd6>
 8035014:	68fb      	ldr	r3, [r7, #12]
 8035016:	227f      	movs	r2, #127	; 0x7f
 8035018:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803501c:	e008      	b.n	8035030 <HAL_UART_Receive+0xe8>
 803501e:	68fb      	ldr	r3, [r7, #12]
 8035020:	223f      	movs	r2, #63	; 0x3f
 8035022:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035026:	e003      	b.n	8035030 <HAL_UART_Receive+0xe8>
 8035028:	68fb      	ldr	r3, [r7, #12]
 803502a:	2200      	movs	r2, #0
 803502c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8035030:	68fb      	ldr	r3, [r7, #12]
 8035032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8035036:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035038:	68fb      	ldr	r3, [r7, #12]
 803503a:	689b      	ldr	r3, [r3, #8]
 803503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035040:	d108      	bne.n	8035054 <HAL_UART_Receive+0x10c>
 8035042:	68fb      	ldr	r3, [r7, #12]
 8035044:	691b      	ldr	r3, [r3, #16]
 8035046:	2b00      	cmp	r3, #0
 8035048:	d104      	bne.n	8035054 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 803504a:	2300      	movs	r3, #0
 803504c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 803504e:	68bb      	ldr	r3, [r7, #8]
 8035050:	61bb      	str	r3, [r7, #24]
 8035052:	e003      	b.n	803505c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8035054:	68bb      	ldr	r3, [r7, #8]
 8035056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8035058:	2300      	movs	r3, #0
 803505a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 803505c:	68fb      	ldr	r3, [r7, #12]
 803505e:	2200      	movs	r2, #0
 8035060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8035064:	e032      	b.n	80350cc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8035066:	683b      	ldr	r3, [r7, #0]
 8035068:	9300      	str	r3, [sp, #0]
 803506a:	697b      	ldr	r3, [r7, #20]
 803506c:	2200      	movs	r2, #0
 803506e:	2120      	movs	r1, #32
 8035070:	68f8      	ldr	r0, [r7, #12]
 8035072:	f001 fb44 	bl	80366fe <UART_WaitOnFlagUntilTimeout>
 8035076:	4603      	mov	r3, r0
 8035078:	2b00      	cmp	r3, #0
 803507a:	d001      	beq.n	8035080 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 803507c:	2303      	movs	r3, #3
 803507e:	e032      	b.n	80350e6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8035080:	69fb      	ldr	r3, [r7, #28]
 8035082:	2b00      	cmp	r3, #0
 8035084:	d10c      	bne.n	80350a0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8035086:	68fb      	ldr	r3, [r7, #12]
 8035088:	681b      	ldr	r3, [r3, #0]
 803508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803508c:	b29a      	uxth	r2, r3
 803508e:	8a7b      	ldrh	r3, [r7, #18]
 8035090:	4013      	ands	r3, r2
 8035092:	b29a      	uxth	r2, r3
 8035094:	69bb      	ldr	r3, [r7, #24]
 8035096:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8035098:	69bb      	ldr	r3, [r7, #24]
 803509a:	3302      	adds	r3, #2
 803509c:	61bb      	str	r3, [r7, #24]
 803509e:	e00c      	b.n	80350ba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80350a0:	68fb      	ldr	r3, [r7, #12]
 80350a2:	681b      	ldr	r3, [r3, #0]
 80350a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350a6:	b2da      	uxtb	r2, r3
 80350a8:	8a7b      	ldrh	r3, [r7, #18]
 80350aa:	b2db      	uxtb	r3, r3
 80350ac:	4013      	ands	r3, r2
 80350ae:	b2da      	uxtb	r2, r3
 80350b0:	69fb      	ldr	r3, [r7, #28]
 80350b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80350b4:	69fb      	ldr	r3, [r7, #28]
 80350b6:	3301      	adds	r3, #1
 80350b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80350ba:	68fb      	ldr	r3, [r7, #12]
 80350bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80350c0:	b29b      	uxth	r3, r3
 80350c2:	3b01      	subs	r3, #1
 80350c4:	b29a      	uxth	r2, r3
 80350c6:	68fb      	ldr	r3, [r7, #12]
 80350c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80350cc:	68fb      	ldr	r3, [r7, #12]
 80350ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80350d2:	b29b      	uxth	r3, r3
 80350d4:	2b00      	cmp	r3, #0
 80350d6:	d1c6      	bne.n	8035066 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80350d8:	68fb      	ldr	r3, [r7, #12]
 80350da:	2220      	movs	r2, #32
 80350dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80350e0:	2300      	movs	r3, #0
 80350e2:	e000      	b.n	80350e6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80350e4:	2302      	movs	r3, #2
  }
}
 80350e6:	4618      	mov	r0, r3
 80350e8:	3720      	adds	r7, #32
 80350ea:	46bd      	mov	sp, r7
 80350ec:	bd80      	pop	{r7, pc}
	...

080350f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80350f0:	b480      	push	{r7}
 80350f2:	b091      	sub	sp, #68	; 0x44
 80350f4:	af00      	add	r7, sp, #0
 80350f6:	60f8      	str	r0, [r7, #12]
 80350f8:	60b9      	str	r1, [r7, #8]
 80350fa:	4613      	mov	r3, r2
 80350fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80350fe:	68fb      	ldr	r3, [r7, #12]
 8035100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035104:	2b20      	cmp	r3, #32
 8035106:	f040 808c 	bne.w	8035222 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 803510a:	68bb      	ldr	r3, [r7, #8]
 803510c:	2b00      	cmp	r3, #0
 803510e:	d002      	beq.n	8035116 <HAL_UART_Transmit_IT+0x26>
 8035110:	88fb      	ldrh	r3, [r7, #6]
 8035112:	2b00      	cmp	r3, #0
 8035114:	d101      	bne.n	803511a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8035116:	2301      	movs	r3, #1
 8035118:	e084      	b.n	8035224 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 803511a:	68fb      	ldr	r3, [r7, #12]
 803511c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8035120:	2b01      	cmp	r3, #1
 8035122:	d101      	bne.n	8035128 <HAL_UART_Transmit_IT+0x38>
 8035124:	2302      	movs	r3, #2
 8035126:	e07d      	b.n	8035224 <HAL_UART_Transmit_IT+0x134>
 8035128:	68fb      	ldr	r3, [r7, #12]
 803512a:	2201      	movs	r2, #1
 803512c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8035130:	68fb      	ldr	r3, [r7, #12]
 8035132:	68ba      	ldr	r2, [r7, #8]
 8035134:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8035136:	68fb      	ldr	r3, [r7, #12]
 8035138:	88fa      	ldrh	r2, [r7, #6]
 803513a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 803513e:	68fb      	ldr	r3, [r7, #12]
 8035140:	88fa      	ldrh	r2, [r7, #6]
 8035142:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8035146:	68fb      	ldr	r3, [r7, #12]
 8035148:	2200      	movs	r2, #0
 803514a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 803514c:	68fb      	ldr	r3, [r7, #12]
 803514e:	2200      	movs	r2, #0
 8035150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8035154:	68fb      	ldr	r3, [r7, #12]
 8035156:	2221      	movs	r2, #33	; 0x21
 8035158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 803515c:	68fb      	ldr	r3, [r7, #12]
 803515e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035164:	d12e      	bne.n	80351c4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035166:	68fb      	ldr	r3, [r7, #12]
 8035168:	689b      	ldr	r3, [r3, #8]
 803516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803516e:	d107      	bne.n	8035180 <HAL_UART_Transmit_IT+0x90>
 8035170:	68fb      	ldr	r3, [r7, #12]
 8035172:	691b      	ldr	r3, [r3, #16]
 8035174:	2b00      	cmp	r3, #0
 8035176:	d103      	bne.n	8035180 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8035178:	68fb      	ldr	r3, [r7, #12]
 803517a:	4a2d      	ldr	r2, [pc, #180]	; (8035230 <HAL_UART_Transmit_IT+0x140>)
 803517c:	675a      	str	r2, [r3, #116]	; 0x74
 803517e:	e002      	b.n	8035186 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8035180:	68fb      	ldr	r3, [r7, #12]
 8035182:	4a2c      	ldr	r2, [pc, #176]	; (8035234 <HAL_UART_Transmit_IT+0x144>)
 8035184:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8035186:	68fb      	ldr	r3, [r7, #12]
 8035188:	2200      	movs	r2, #0
 803518a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803518e:	68fb      	ldr	r3, [r7, #12]
 8035190:	681b      	ldr	r3, [r3, #0]
 8035192:	3308      	adds	r3, #8
 8035194:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035198:	e853 3f00 	ldrex	r3, [r3]
 803519c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80351a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80351a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80351a6:	68fb      	ldr	r3, [r7, #12]
 80351a8:	681b      	ldr	r3, [r3, #0]
 80351aa:	3308      	adds	r3, #8
 80351ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80351ae:	637a      	str	r2, [r7, #52]	; 0x34
 80351b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80351b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80351b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80351b6:	e841 2300 	strex	r3, r2, [r1]
 80351ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80351bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80351be:	2b00      	cmp	r3, #0
 80351c0:	d1e5      	bne.n	803518e <HAL_UART_Transmit_IT+0x9e>
 80351c2:	e02c      	b.n	803521e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80351c4:	68fb      	ldr	r3, [r7, #12]
 80351c6:	689b      	ldr	r3, [r3, #8]
 80351c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80351cc:	d107      	bne.n	80351de <HAL_UART_Transmit_IT+0xee>
 80351ce:	68fb      	ldr	r3, [r7, #12]
 80351d0:	691b      	ldr	r3, [r3, #16]
 80351d2:	2b00      	cmp	r3, #0
 80351d4:	d103      	bne.n	80351de <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80351d6:	68fb      	ldr	r3, [r7, #12]
 80351d8:	4a17      	ldr	r2, [pc, #92]	; (8035238 <HAL_UART_Transmit_IT+0x148>)
 80351da:	675a      	str	r2, [r3, #116]	; 0x74
 80351dc:	e002      	b.n	80351e4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80351de:	68fb      	ldr	r3, [r7, #12]
 80351e0:	4a16      	ldr	r2, [pc, #88]	; (803523c <HAL_UART_Transmit_IT+0x14c>)
 80351e2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80351e4:	68fb      	ldr	r3, [r7, #12]
 80351e6:	2200      	movs	r2, #0
 80351e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80351ec:	68fb      	ldr	r3, [r7, #12]
 80351ee:	681b      	ldr	r3, [r3, #0]
 80351f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80351f2:	697b      	ldr	r3, [r7, #20]
 80351f4:	e853 3f00 	ldrex	r3, [r3]
 80351f8:	613b      	str	r3, [r7, #16]
   return(result);
 80351fa:	693b      	ldr	r3, [r7, #16]
 80351fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035202:	68fb      	ldr	r3, [r7, #12]
 8035204:	681b      	ldr	r3, [r3, #0]
 8035206:	461a      	mov	r2, r3
 8035208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803520a:	623b      	str	r3, [r7, #32]
 803520c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803520e:	69f9      	ldr	r1, [r7, #28]
 8035210:	6a3a      	ldr	r2, [r7, #32]
 8035212:	e841 2300 	strex	r3, r2, [r1]
 8035216:	61bb      	str	r3, [r7, #24]
   return(result);
 8035218:	69bb      	ldr	r3, [r7, #24]
 803521a:	2b00      	cmp	r3, #0
 803521c:	d1e6      	bne.n	80351ec <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 803521e:	2300      	movs	r3, #0
 8035220:	e000      	b.n	8035224 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8035222:	2302      	movs	r3, #2
  }
}
 8035224:	4618      	mov	r0, r3
 8035226:	3744      	adds	r7, #68	; 0x44
 8035228:	46bd      	mov	sp, r7
 803522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803522e:	4770      	bx	lr
 8035230:	08036e37 	.word	0x08036e37
 8035234:	08036d57 	.word	0x08036d57
 8035238:	08036c95 	.word	0x08036c95
 803523c:	08036bdd 	.word	0x08036bdd

08035240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8035240:	b580      	push	{r7, lr}
 8035242:	b08a      	sub	sp, #40	; 0x28
 8035244:	af00      	add	r7, sp, #0
 8035246:	60f8      	str	r0, [r7, #12]
 8035248:	60b9      	str	r1, [r7, #8]
 803524a:	4613      	mov	r3, r2
 803524c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803524e:	68fb      	ldr	r3, [r7, #12]
 8035250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8035254:	2b20      	cmp	r3, #32
 8035256:	d142      	bne.n	80352de <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8035258:	68bb      	ldr	r3, [r7, #8]
 803525a:	2b00      	cmp	r3, #0
 803525c:	d002      	beq.n	8035264 <HAL_UART_Receive_IT+0x24>
 803525e:	88fb      	ldrh	r3, [r7, #6]
 8035260:	2b00      	cmp	r3, #0
 8035262:	d101      	bne.n	8035268 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8035264:	2301      	movs	r3, #1
 8035266:	e03b      	b.n	80352e0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8035268:	68fb      	ldr	r3, [r7, #12]
 803526a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803526e:	2b01      	cmp	r3, #1
 8035270:	d101      	bne.n	8035276 <HAL_UART_Receive_IT+0x36>
 8035272:	2302      	movs	r3, #2
 8035274:	e034      	b.n	80352e0 <HAL_UART_Receive_IT+0xa0>
 8035276:	68fb      	ldr	r3, [r7, #12]
 8035278:	2201      	movs	r2, #1
 803527a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803527e:	68fb      	ldr	r3, [r7, #12]
 8035280:	2200      	movs	r2, #0
 8035282:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8035284:	68fb      	ldr	r3, [r7, #12]
 8035286:	681b      	ldr	r3, [r3, #0]
 8035288:	4a17      	ldr	r2, [pc, #92]	; (80352e8 <HAL_UART_Receive_IT+0xa8>)
 803528a:	4293      	cmp	r3, r2
 803528c:	d01f      	beq.n	80352ce <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 803528e:	68fb      	ldr	r3, [r7, #12]
 8035290:	681b      	ldr	r3, [r3, #0]
 8035292:	685b      	ldr	r3, [r3, #4]
 8035294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8035298:	2b00      	cmp	r3, #0
 803529a:	d018      	beq.n	80352ce <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 803529c:	68fb      	ldr	r3, [r7, #12]
 803529e:	681b      	ldr	r3, [r3, #0]
 80352a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80352a2:	697b      	ldr	r3, [r7, #20]
 80352a4:	e853 3f00 	ldrex	r3, [r3]
 80352a8:	613b      	str	r3, [r7, #16]
   return(result);
 80352aa:	693b      	ldr	r3, [r7, #16]
 80352ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80352b0:	627b      	str	r3, [r7, #36]	; 0x24
 80352b2:	68fb      	ldr	r3, [r7, #12]
 80352b4:	681b      	ldr	r3, [r3, #0]
 80352b6:	461a      	mov	r2, r3
 80352b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80352ba:	623b      	str	r3, [r7, #32]
 80352bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80352be:	69f9      	ldr	r1, [r7, #28]
 80352c0:	6a3a      	ldr	r2, [r7, #32]
 80352c2:	e841 2300 	strex	r3, r2, [r1]
 80352c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80352c8:	69bb      	ldr	r3, [r7, #24]
 80352ca:	2b00      	cmp	r3, #0
 80352cc:	d1e6      	bne.n	803529c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80352ce:	88fb      	ldrh	r3, [r7, #6]
 80352d0:	461a      	mov	r2, r3
 80352d2:	68b9      	ldr	r1, [r7, #8]
 80352d4:	68f8      	ldr	r0, [r7, #12]
 80352d6:	f001 fadb 	bl	8036890 <UART_Start_Receive_IT>
 80352da:	4603      	mov	r3, r0
 80352dc:	e000      	b.n	80352e0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80352de:	2302      	movs	r3, #2
  }
}
 80352e0:	4618      	mov	r0, r3
 80352e2:	3728      	adds	r7, #40	; 0x28
 80352e4:	46bd      	mov	sp, r7
 80352e6:	bd80      	pop	{r7, pc}
 80352e8:	58000c00 	.word	0x58000c00

080352ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80352ec:	b580      	push	{r7, lr}
 80352ee:	b0ba      	sub	sp, #232	; 0xe8
 80352f0:	af00      	add	r7, sp, #0
 80352f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80352f4:	687b      	ldr	r3, [r7, #4]
 80352f6:	681b      	ldr	r3, [r3, #0]
 80352f8:	69db      	ldr	r3, [r3, #28]
 80352fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80352fe:	687b      	ldr	r3, [r7, #4]
 8035300:	681b      	ldr	r3, [r3, #0]
 8035302:	681b      	ldr	r3, [r3, #0]
 8035304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8035308:	687b      	ldr	r3, [r7, #4]
 803530a:	681b      	ldr	r3, [r3, #0]
 803530c:	689b      	ldr	r3, [r3, #8]
 803530e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8035312:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8035316:	f640 030f 	movw	r3, #2063	; 0x80f
 803531a:	4013      	ands	r3, r2
 803531c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8035320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035324:	2b00      	cmp	r3, #0
 8035326:	d11b      	bne.n	8035360 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8035328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803532c:	f003 0320 	and.w	r3, r3, #32
 8035330:	2b00      	cmp	r3, #0
 8035332:	d015      	beq.n	8035360 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8035334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035338:	f003 0320 	and.w	r3, r3, #32
 803533c:	2b00      	cmp	r3, #0
 803533e:	d105      	bne.n	803534c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8035340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8035348:	2b00      	cmp	r3, #0
 803534a:	d009      	beq.n	8035360 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 803534c:	687b      	ldr	r3, [r7, #4]
 803534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035350:	2b00      	cmp	r3, #0
 8035352:	f000 835a 	beq.w	8035a0a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8035356:	687b      	ldr	r3, [r7, #4]
 8035358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803535a:	6878      	ldr	r0, [r7, #4]
 803535c:	4798      	blx	r3
      }
      return;
 803535e:	e354      	b.n	8035a0a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8035360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035364:	2b00      	cmp	r3, #0
 8035366:	f000 811f 	beq.w	80355a8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 803536a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 803536e:	4b8b      	ldr	r3, [pc, #556]	; (803559c <HAL_UART_IRQHandler+0x2b0>)
 8035370:	4013      	ands	r3, r2
 8035372:	2b00      	cmp	r3, #0
 8035374:	d106      	bne.n	8035384 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8035376:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 803537a:	4b89      	ldr	r3, [pc, #548]	; (80355a0 <HAL_UART_IRQHandler+0x2b4>)
 803537c:	4013      	ands	r3, r2
 803537e:	2b00      	cmp	r3, #0
 8035380:	f000 8112 	beq.w	80355a8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8035384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035388:	f003 0301 	and.w	r3, r3, #1
 803538c:	2b00      	cmp	r3, #0
 803538e:	d011      	beq.n	80353b4 <HAL_UART_IRQHandler+0xc8>
 8035390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035398:	2b00      	cmp	r3, #0
 803539a:	d00b      	beq.n	80353b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803539c:	687b      	ldr	r3, [r7, #4]
 803539e:	681b      	ldr	r3, [r3, #0]
 80353a0:	2201      	movs	r2, #1
 80353a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80353a4:	687b      	ldr	r3, [r7, #4]
 80353a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353aa:	f043 0201 	orr.w	r2, r3, #1
 80353ae:	687b      	ldr	r3, [r7, #4]
 80353b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80353b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353b8:	f003 0302 	and.w	r3, r3, #2
 80353bc:	2b00      	cmp	r3, #0
 80353be:	d011      	beq.n	80353e4 <HAL_UART_IRQHandler+0xf8>
 80353c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80353c4:	f003 0301 	and.w	r3, r3, #1
 80353c8:	2b00      	cmp	r3, #0
 80353ca:	d00b      	beq.n	80353e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80353cc:	687b      	ldr	r3, [r7, #4]
 80353ce:	681b      	ldr	r3, [r3, #0]
 80353d0:	2202      	movs	r2, #2
 80353d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80353d4:	687b      	ldr	r3, [r7, #4]
 80353d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353da:	f043 0204 	orr.w	r2, r3, #4
 80353de:	687b      	ldr	r3, [r7, #4]
 80353e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80353e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353e8:	f003 0304 	and.w	r3, r3, #4
 80353ec:	2b00      	cmp	r3, #0
 80353ee:	d011      	beq.n	8035414 <HAL_UART_IRQHandler+0x128>
 80353f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80353f4:	f003 0301 	and.w	r3, r3, #1
 80353f8:	2b00      	cmp	r3, #0
 80353fa:	d00b      	beq.n	8035414 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80353fc:	687b      	ldr	r3, [r7, #4]
 80353fe:	681b      	ldr	r3, [r3, #0]
 8035400:	2204      	movs	r2, #4
 8035402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8035404:	687b      	ldr	r3, [r7, #4]
 8035406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803540a:	f043 0202 	orr.w	r2, r3, #2
 803540e:	687b      	ldr	r3, [r7, #4]
 8035410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8035414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035418:	f003 0308 	and.w	r3, r3, #8
 803541c:	2b00      	cmp	r3, #0
 803541e:	d017      	beq.n	8035450 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035424:	f003 0320 	and.w	r3, r3, #32
 8035428:	2b00      	cmp	r3, #0
 803542a:	d105      	bne.n	8035438 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 803542c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8035430:	4b5a      	ldr	r3, [pc, #360]	; (803559c <HAL_UART_IRQHandler+0x2b0>)
 8035432:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035434:	2b00      	cmp	r3, #0
 8035436:	d00b      	beq.n	8035450 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8035438:	687b      	ldr	r3, [r7, #4]
 803543a:	681b      	ldr	r3, [r3, #0]
 803543c:	2208      	movs	r2, #8
 803543e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035440:	687b      	ldr	r3, [r7, #4]
 8035442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035446:	f043 0208 	orr.w	r2, r3, #8
 803544a:	687b      	ldr	r3, [r7, #4]
 803544c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8035450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8035458:	2b00      	cmp	r3, #0
 803545a:	d012      	beq.n	8035482 <HAL_UART_IRQHandler+0x196>
 803545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8035464:	2b00      	cmp	r3, #0
 8035466:	d00c      	beq.n	8035482 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8035468:	687b      	ldr	r3, [r7, #4]
 803546a:	681b      	ldr	r3, [r3, #0]
 803546c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8035470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8035472:	687b      	ldr	r3, [r7, #4]
 8035474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035478:	f043 0220 	orr.w	r2, r3, #32
 803547c:	687b      	ldr	r3, [r7, #4]
 803547e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8035482:	687b      	ldr	r3, [r7, #4]
 8035484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035488:	2b00      	cmp	r3, #0
 803548a:	f000 82c0 	beq.w	8035a0e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035492:	f003 0320 	and.w	r3, r3, #32
 8035496:	2b00      	cmp	r3, #0
 8035498:	d013      	beq.n	80354c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 803549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803549e:	f003 0320 	and.w	r3, r3, #32
 80354a2:	2b00      	cmp	r3, #0
 80354a4:	d105      	bne.n	80354b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80354a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80354aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80354ae:	2b00      	cmp	r3, #0
 80354b0:	d007      	beq.n	80354c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80354b2:	687b      	ldr	r3, [r7, #4]
 80354b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80354b6:	2b00      	cmp	r3, #0
 80354b8:	d003      	beq.n	80354c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80354ba:	687b      	ldr	r3, [r7, #4]
 80354bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80354be:	6878      	ldr	r0, [r7, #4]
 80354c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80354c2:	687b      	ldr	r3, [r7, #4]
 80354c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80354cc:	687b      	ldr	r3, [r7, #4]
 80354ce:	681b      	ldr	r3, [r3, #0]
 80354d0:	689b      	ldr	r3, [r3, #8]
 80354d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80354d6:	2b40      	cmp	r3, #64	; 0x40
 80354d8:	d005      	beq.n	80354e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80354da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80354de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80354e2:	2b00      	cmp	r3, #0
 80354e4:	d04f      	beq.n	8035586 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80354e6:	6878      	ldr	r0, [r7, #4]
 80354e8:	f001 fafc 	bl	8036ae4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80354ec:	687b      	ldr	r3, [r7, #4]
 80354ee:	681b      	ldr	r3, [r3, #0]
 80354f0:	689b      	ldr	r3, [r3, #8]
 80354f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80354f6:	2b40      	cmp	r3, #64	; 0x40
 80354f8:	d141      	bne.n	803557e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80354fa:	687b      	ldr	r3, [r7, #4]
 80354fc:	681b      	ldr	r3, [r3, #0]
 80354fe:	3308      	adds	r3, #8
 8035500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8035508:	e853 3f00 	ldrex	r3, [r3]
 803550c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8035518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 803551c:	687b      	ldr	r3, [r7, #4]
 803551e:	681b      	ldr	r3, [r3, #0]
 8035520:	3308      	adds	r3, #8
 8035522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8035526:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803552a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803552e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8035532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8035536:	e841 2300 	strex	r3, r2, [r1]
 803553a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 803553e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8035542:	2b00      	cmp	r3, #0
 8035544:	d1d9      	bne.n	80354fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8035546:	687b      	ldr	r3, [r7, #4]
 8035548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803554a:	2b00      	cmp	r3, #0
 803554c:	d013      	beq.n	8035576 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 803554e:	687b      	ldr	r3, [r7, #4]
 8035550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035552:	4a14      	ldr	r2, [pc, #80]	; (80355a4 <HAL_UART_IRQHandler+0x2b8>)
 8035554:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8035556:	687b      	ldr	r3, [r7, #4]
 8035558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803555a:	4618      	mov	r0, r3
 803555c:	f7f7 f95a 	bl	802c814 <HAL_DMA_Abort_IT>
 8035560:	4603      	mov	r3, r0
 8035562:	2b00      	cmp	r3, #0
 8035564:	d017      	beq.n	8035596 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8035566:	687b      	ldr	r3, [r7, #4]
 8035568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803556c:	687a      	ldr	r2, [r7, #4]
 803556e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8035570:	4610      	mov	r0, r2
 8035572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035574:	e00f      	b.n	8035596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8035576:	6878      	ldr	r0, [r7, #4]
 8035578:	f000 fa56 	bl	8035a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803557c:	e00b      	b.n	8035596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803557e:	6878      	ldr	r0, [r7, #4]
 8035580:	f000 fa52 	bl	8035a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035584:	e007      	b.n	8035596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8035586:	6878      	ldr	r0, [r7, #4]
 8035588:	f000 fa4e 	bl	8035a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 803558c:	687b      	ldr	r3, [r7, #4]
 803558e:	2200      	movs	r2, #0
 8035590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8035594:	e23b      	b.n	8035a0e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035596:	bf00      	nop
    return;
 8035598:	e239      	b.n	8035a0e <HAL_UART_IRQHandler+0x722>
 803559a:	bf00      	nop
 803559c:	10000001 	.word	0x10000001
 80355a0:	04000120 	.word	0x04000120
 80355a4:	08036bb1 	.word	0x08036bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80355a8:	687b      	ldr	r3, [r7, #4]
 80355aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80355ac:	2b01      	cmp	r3, #1
 80355ae:	f040 81ce 	bne.w	803594e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80355b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80355b6:	f003 0310 	and.w	r3, r3, #16
 80355ba:	2b00      	cmp	r3, #0
 80355bc:	f000 81c7 	beq.w	803594e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80355c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80355c4:	f003 0310 	and.w	r3, r3, #16
 80355c8:	2b00      	cmp	r3, #0
 80355ca:	f000 81c0 	beq.w	803594e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80355ce:	687b      	ldr	r3, [r7, #4]
 80355d0:	681b      	ldr	r3, [r3, #0]
 80355d2:	2210      	movs	r2, #16
 80355d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355d6:	687b      	ldr	r3, [r7, #4]
 80355d8:	681b      	ldr	r3, [r3, #0]
 80355da:	689b      	ldr	r3, [r3, #8]
 80355dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80355e0:	2b40      	cmp	r3, #64	; 0x40
 80355e2:	f040 813b 	bne.w	803585c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80355e6:	687b      	ldr	r3, [r7, #4]
 80355e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355ea:	681b      	ldr	r3, [r3, #0]
 80355ec:	4a8b      	ldr	r2, [pc, #556]	; (803581c <HAL_UART_IRQHandler+0x530>)
 80355ee:	4293      	cmp	r3, r2
 80355f0:	d059      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 80355f2:	687b      	ldr	r3, [r7, #4]
 80355f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80355f6:	681b      	ldr	r3, [r3, #0]
 80355f8:	4a89      	ldr	r2, [pc, #548]	; (8035820 <HAL_UART_IRQHandler+0x534>)
 80355fa:	4293      	cmp	r3, r2
 80355fc:	d053      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 80355fe:	687b      	ldr	r3, [r7, #4]
 8035600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035602:	681b      	ldr	r3, [r3, #0]
 8035604:	4a87      	ldr	r2, [pc, #540]	; (8035824 <HAL_UART_IRQHandler+0x538>)
 8035606:	4293      	cmp	r3, r2
 8035608:	d04d      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803560a:	687b      	ldr	r3, [r7, #4]
 803560c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803560e:	681b      	ldr	r3, [r3, #0]
 8035610:	4a85      	ldr	r2, [pc, #532]	; (8035828 <HAL_UART_IRQHandler+0x53c>)
 8035612:	4293      	cmp	r3, r2
 8035614:	d047      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035616:	687b      	ldr	r3, [r7, #4]
 8035618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803561a:	681b      	ldr	r3, [r3, #0]
 803561c:	4a83      	ldr	r2, [pc, #524]	; (803582c <HAL_UART_IRQHandler+0x540>)
 803561e:	4293      	cmp	r3, r2
 8035620:	d041      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035622:	687b      	ldr	r3, [r7, #4]
 8035624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035626:	681b      	ldr	r3, [r3, #0]
 8035628:	4a81      	ldr	r2, [pc, #516]	; (8035830 <HAL_UART_IRQHandler+0x544>)
 803562a:	4293      	cmp	r3, r2
 803562c:	d03b      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803562e:	687b      	ldr	r3, [r7, #4]
 8035630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035632:	681b      	ldr	r3, [r3, #0]
 8035634:	4a7f      	ldr	r2, [pc, #508]	; (8035834 <HAL_UART_IRQHandler+0x548>)
 8035636:	4293      	cmp	r3, r2
 8035638:	d035      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803563a:	687b      	ldr	r3, [r7, #4]
 803563c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803563e:	681b      	ldr	r3, [r3, #0]
 8035640:	4a7d      	ldr	r2, [pc, #500]	; (8035838 <HAL_UART_IRQHandler+0x54c>)
 8035642:	4293      	cmp	r3, r2
 8035644:	d02f      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035646:	687b      	ldr	r3, [r7, #4]
 8035648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803564a:	681b      	ldr	r3, [r3, #0]
 803564c:	4a7b      	ldr	r2, [pc, #492]	; (803583c <HAL_UART_IRQHandler+0x550>)
 803564e:	4293      	cmp	r3, r2
 8035650:	d029      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035652:	687b      	ldr	r3, [r7, #4]
 8035654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035656:	681b      	ldr	r3, [r3, #0]
 8035658:	4a79      	ldr	r2, [pc, #484]	; (8035840 <HAL_UART_IRQHandler+0x554>)
 803565a:	4293      	cmp	r3, r2
 803565c:	d023      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803565e:	687b      	ldr	r3, [r7, #4]
 8035660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035662:	681b      	ldr	r3, [r3, #0]
 8035664:	4a77      	ldr	r2, [pc, #476]	; (8035844 <HAL_UART_IRQHandler+0x558>)
 8035666:	4293      	cmp	r3, r2
 8035668:	d01d      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803566a:	687b      	ldr	r3, [r7, #4]
 803566c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803566e:	681b      	ldr	r3, [r3, #0]
 8035670:	4a75      	ldr	r2, [pc, #468]	; (8035848 <HAL_UART_IRQHandler+0x55c>)
 8035672:	4293      	cmp	r3, r2
 8035674:	d017      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035676:	687b      	ldr	r3, [r7, #4]
 8035678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803567a:	681b      	ldr	r3, [r3, #0]
 803567c:	4a73      	ldr	r2, [pc, #460]	; (803584c <HAL_UART_IRQHandler+0x560>)
 803567e:	4293      	cmp	r3, r2
 8035680:	d011      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 8035682:	687b      	ldr	r3, [r7, #4]
 8035684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035686:	681b      	ldr	r3, [r3, #0]
 8035688:	4a71      	ldr	r2, [pc, #452]	; (8035850 <HAL_UART_IRQHandler+0x564>)
 803568a:	4293      	cmp	r3, r2
 803568c:	d00b      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803568e:	687b      	ldr	r3, [r7, #4]
 8035690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035692:	681b      	ldr	r3, [r3, #0]
 8035694:	4a6f      	ldr	r2, [pc, #444]	; (8035854 <HAL_UART_IRQHandler+0x568>)
 8035696:	4293      	cmp	r3, r2
 8035698:	d005      	beq.n	80356a6 <HAL_UART_IRQHandler+0x3ba>
 803569a:	687b      	ldr	r3, [r7, #4]
 803569c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803569e:	681b      	ldr	r3, [r3, #0]
 80356a0:	4a6d      	ldr	r2, [pc, #436]	; (8035858 <HAL_UART_IRQHandler+0x56c>)
 80356a2:	4293      	cmp	r3, r2
 80356a4:	d105      	bne.n	80356b2 <HAL_UART_IRQHandler+0x3c6>
 80356a6:	687b      	ldr	r3, [r7, #4]
 80356a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356aa:	681b      	ldr	r3, [r3, #0]
 80356ac:	685b      	ldr	r3, [r3, #4]
 80356ae:	b29b      	uxth	r3, r3
 80356b0:	e004      	b.n	80356bc <HAL_UART_IRQHandler+0x3d0>
 80356b2:	687b      	ldr	r3, [r7, #4]
 80356b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356b6:	681b      	ldr	r3, [r3, #0]
 80356b8:	685b      	ldr	r3, [r3, #4]
 80356ba:	b29b      	uxth	r3, r3
 80356bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80356c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80356c4:	2b00      	cmp	r3, #0
 80356c6:	f000 81a4 	beq.w	8035a12 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80356ca:	687b      	ldr	r3, [r7, #4]
 80356cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80356d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80356d4:	429a      	cmp	r2, r3
 80356d6:	f080 819c 	bcs.w	8035a12 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80356da:	687b      	ldr	r3, [r7, #4]
 80356dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80356e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80356e4:	687b      	ldr	r3, [r7, #4]
 80356e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356e8:	69db      	ldr	r3, [r3, #28]
 80356ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80356ee:	f000 8086 	beq.w	80357fe <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80356f2:	687b      	ldr	r3, [r7, #4]
 80356f4:	681b      	ldr	r3, [r3, #0]
 80356f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80356fe:	e853 3f00 	ldrex	r3, [r3]
 8035702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8035706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803570a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803570e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035712:	687b      	ldr	r3, [r7, #4]
 8035714:	681b      	ldr	r3, [r3, #0]
 8035716:	461a      	mov	r2, r3
 8035718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803571c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8035720:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035724:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8035728:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 803572c:	e841 2300 	strex	r3, r2, [r1]
 8035730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8035734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8035738:	2b00      	cmp	r3, #0
 803573a:	d1da      	bne.n	80356f2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803573c:	687b      	ldr	r3, [r7, #4]
 803573e:	681b      	ldr	r3, [r3, #0]
 8035740:	3308      	adds	r3, #8
 8035742:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035746:	e853 3f00 	ldrex	r3, [r3]
 803574a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 803574c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803574e:	f023 0301 	bic.w	r3, r3, #1
 8035752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8035756:	687b      	ldr	r3, [r7, #4]
 8035758:	681b      	ldr	r3, [r3, #0]
 803575a:	3308      	adds	r3, #8
 803575c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8035760:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8035764:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035766:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8035768:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803576c:	e841 2300 	strex	r3, r2, [r1]
 8035770:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8035772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8035774:	2b00      	cmp	r3, #0
 8035776:	d1e1      	bne.n	803573c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8035778:	687b      	ldr	r3, [r7, #4]
 803577a:	681b      	ldr	r3, [r3, #0]
 803577c:	3308      	adds	r3, #8
 803577e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035782:	e853 3f00 	ldrex	r3, [r3]
 8035786:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8035788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803578a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803578e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8035792:	687b      	ldr	r3, [r7, #4]
 8035794:	681b      	ldr	r3, [r3, #0]
 8035796:	3308      	adds	r3, #8
 8035798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 803579c:	66fa      	str	r2, [r7, #108]	; 0x6c
 803579e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80357a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80357a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80357a4:	e841 2300 	strex	r3, r2, [r1]
 80357a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80357aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80357ac:	2b00      	cmp	r3, #0
 80357ae:	d1e3      	bne.n	8035778 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80357b0:	687b      	ldr	r3, [r7, #4]
 80357b2:	2220      	movs	r2, #32
 80357b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80357b8:	687b      	ldr	r3, [r7, #4]
 80357ba:	2200      	movs	r2, #0
 80357bc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80357be:	687b      	ldr	r3, [r7, #4]
 80357c0:	681b      	ldr	r3, [r3, #0]
 80357c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80357c6:	e853 3f00 	ldrex	r3, [r3]
 80357ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80357cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80357ce:	f023 0310 	bic.w	r3, r3, #16
 80357d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80357d6:	687b      	ldr	r3, [r7, #4]
 80357d8:	681b      	ldr	r3, [r3, #0]
 80357da:	461a      	mov	r2, r3
 80357dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80357e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80357e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80357e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80357e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80357e8:	e841 2300 	strex	r3, r2, [r1]
 80357ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80357ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80357f0:	2b00      	cmp	r3, #0
 80357f2:	d1e4      	bne.n	80357be <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80357f4:	687b      	ldr	r3, [r7, #4]
 80357f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80357f8:	4618      	mov	r0, r3
 80357fa:	f7f6 fced 	bl	802c1d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80357fe:	687b      	ldr	r3, [r7, #4]
 8035800:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035804:	687b      	ldr	r3, [r7, #4]
 8035806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803580a:	b29b      	uxth	r3, r3
 803580c:	1ad3      	subs	r3, r2, r3
 803580e:	b29b      	uxth	r3, r3
 8035810:	4619      	mov	r1, r3
 8035812:	6878      	ldr	r0, [r7, #4]
 8035814:	f000 f912 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8035818:	e0fb      	b.n	8035a12 <HAL_UART_IRQHandler+0x726>
 803581a:	bf00      	nop
 803581c:	40020010 	.word	0x40020010
 8035820:	40020028 	.word	0x40020028
 8035824:	40020040 	.word	0x40020040
 8035828:	40020058 	.word	0x40020058
 803582c:	40020070 	.word	0x40020070
 8035830:	40020088 	.word	0x40020088
 8035834:	400200a0 	.word	0x400200a0
 8035838:	400200b8 	.word	0x400200b8
 803583c:	40020410 	.word	0x40020410
 8035840:	40020428 	.word	0x40020428
 8035844:	40020440 	.word	0x40020440
 8035848:	40020458 	.word	0x40020458
 803584c:	40020470 	.word	0x40020470
 8035850:	40020488 	.word	0x40020488
 8035854:	400204a0 	.word	0x400204a0
 8035858:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 803585c:	687b      	ldr	r3, [r7, #4]
 803585e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035862:	687b      	ldr	r3, [r7, #4]
 8035864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035868:	b29b      	uxth	r3, r3
 803586a:	1ad3      	subs	r3, r2, r3
 803586c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8035870:	687b      	ldr	r3, [r7, #4]
 8035872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035876:	b29b      	uxth	r3, r3
 8035878:	2b00      	cmp	r3, #0
 803587a:	f000 80cc 	beq.w	8035a16 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 803587e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8035882:	2b00      	cmp	r3, #0
 8035884:	f000 80c7 	beq.w	8035a16 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8035888:	687b      	ldr	r3, [r7, #4]
 803588a:	681b      	ldr	r3, [r3, #0]
 803588c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035890:	e853 3f00 	ldrex	r3, [r3]
 8035894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8035896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8035898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803589c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80358a0:	687b      	ldr	r3, [r7, #4]
 80358a2:	681b      	ldr	r3, [r3, #0]
 80358a4:	461a      	mov	r2, r3
 80358a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80358aa:	647b      	str	r3, [r7, #68]	; 0x44
 80358ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80358ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80358b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80358b2:	e841 2300 	strex	r3, r2, [r1]
 80358b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80358b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80358ba:	2b00      	cmp	r3, #0
 80358bc:	d1e4      	bne.n	8035888 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80358be:	687b      	ldr	r3, [r7, #4]
 80358c0:	681b      	ldr	r3, [r3, #0]
 80358c2:	3308      	adds	r3, #8
 80358c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80358c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80358c8:	e853 3f00 	ldrex	r3, [r3]
 80358cc:	623b      	str	r3, [r7, #32]
   return(result);
 80358ce:	6a3a      	ldr	r2, [r7, #32]
 80358d0:	4b54      	ldr	r3, [pc, #336]	; (8035a24 <HAL_UART_IRQHandler+0x738>)
 80358d2:	4013      	ands	r3, r2
 80358d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80358d8:	687b      	ldr	r3, [r7, #4]
 80358da:	681b      	ldr	r3, [r3, #0]
 80358dc:	3308      	adds	r3, #8
 80358de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80358e2:	633a      	str	r2, [r7, #48]	; 0x30
 80358e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80358e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80358e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80358ea:	e841 2300 	strex	r3, r2, [r1]
 80358ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80358f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80358f2:	2b00      	cmp	r3, #0
 80358f4:	d1e3      	bne.n	80358be <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80358f6:	687b      	ldr	r3, [r7, #4]
 80358f8:	2220      	movs	r2, #32
 80358fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80358fe:	687b      	ldr	r3, [r7, #4]
 8035900:	2200      	movs	r2, #0
 8035902:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8035904:	687b      	ldr	r3, [r7, #4]
 8035906:	2200      	movs	r2, #0
 8035908:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803590a:	687b      	ldr	r3, [r7, #4]
 803590c:	681b      	ldr	r3, [r3, #0]
 803590e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035910:	693b      	ldr	r3, [r7, #16]
 8035912:	e853 3f00 	ldrex	r3, [r3]
 8035916:	60fb      	str	r3, [r7, #12]
   return(result);
 8035918:	68fb      	ldr	r3, [r7, #12]
 803591a:	f023 0310 	bic.w	r3, r3, #16
 803591e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8035922:	687b      	ldr	r3, [r7, #4]
 8035924:	681b      	ldr	r3, [r3, #0]
 8035926:	461a      	mov	r2, r3
 8035928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 803592c:	61fb      	str	r3, [r7, #28]
 803592e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035930:	69b9      	ldr	r1, [r7, #24]
 8035932:	69fa      	ldr	r2, [r7, #28]
 8035934:	e841 2300 	strex	r3, r2, [r1]
 8035938:	617b      	str	r3, [r7, #20]
   return(result);
 803593a:	697b      	ldr	r3, [r7, #20]
 803593c:	2b00      	cmp	r3, #0
 803593e:	d1e4      	bne.n	803590a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8035940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8035944:	4619      	mov	r1, r3
 8035946:	6878      	ldr	r0, [r7, #4]
 8035948:	f000 f878 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 803594c:	e063      	b.n	8035a16 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 803594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8035956:	2b00      	cmp	r3, #0
 8035958:	d00e      	beq.n	8035978 <HAL_UART_IRQHandler+0x68c>
 803595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8035962:	2b00      	cmp	r3, #0
 8035964:	d008      	beq.n	8035978 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8035966:	687b      	ldr	r3, [r7, #4]
 8035968:	681b      	ldr	r3, [r3, #0]
 803596a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 803596e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8035970:	6878      	ldr	r0, [r7, #4]
 8035972:	f001 ff5d 	bl	8037830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035976:	e051      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8035978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035980:	2b00      	cmp	r3, #0
 8035982:	d014      	beq.n	80359ae <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8035984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803598c:	2b00      	cmp	r3, #0
 803598e:	d105      	bne.n	803599c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8035990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8035998:	2b00      	cmp	r3, #0
 803599a:	d008      	beq.n	80359ae <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 803599c:	687b      	ldr	r3, [r7, #4]
 803599e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80359a0:	2b00      	cmp	r3, #0
 80359a2:	d03a      	beq.n	8035a1a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80359a4:	687b      	ldr	r3, [r7, #4]
 80359a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80359a8:	6878      	ldr	r0, [r7, #4]
 80359aa:	4798      	blx	r3
    }
    return;
 80359ac:	e035      	b.n	8035a1a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80359ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80359b6:	2b00      	cmp	r3, #0
 80359b8:	d009      	beq.n	80359ce <HAL_UART_IRQHandler+0x6e2>
 80359ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80359c2:	2b00      	cmp	r3, #0
 80359c4:	d003      	beq.n	80359ce <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80359c6:	6878      	ldr	r0, [r7, #4]
 80359c8:	f001 faaa 	bl	8036f20 <UART_EndTransmit_IT>
    return;
 80359cc:	e026      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80359ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80359d6:	2b00      	cmp	r3, #0
 80359d8:	d009      	beq.n	80359ee <HAL_UART_IRQHandler+0x702>
 80359da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80359e2:	2b00      	cmp	r3, #0
 80359e4:	d003      	beq.n	80359ee <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80359e6:	6878      	ldr	r0, [r7, #4]
 80359e8:	f001 ff36 	bl	8037858 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80359ec:	e016      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80359ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80359f6:	2b00      	cmp	r3, #0
 80359f8:	d010      	beq.n	8035a1c <HAL_UART_IRQHandler+0x730>
 80359fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359fe:	2b00      	cmp	r3, #0
 8035a00:	da0c      	bge.n	8035a1c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8035a02:	6878      	ldr	r0, [r7, #4]
 8035a04:	f001 ff1e 	bl	8037844 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035a08:	e008      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
      return;
 8035a0a:	bf00      	nop
 8035a0c:	e006      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
    return;
 8035a0e:	bf00      	nop
 8035a10:	e004      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
      return;
 8035a12:	bf00      	nop
 8035a14:	e002      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
      return;
 8035a16:	bf00      	nop
 8035a18:	e000      	b.n	8035a1c <HAL_UART_IRQHandler+0x730>
    return;
 8035a1a:	bf00      	nop
  }
}
 8035a1c:	37e8      	adds	r7, #232	; 0xe8
 8035a1e:	46bd      	mov	sp, r7
 8035a20:	bd80      	pop	{r7, pc}
 8035a22:	bf00      	nop
 8035a24:	effffffe 	.word	0xeffffffe

08035a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8035a28:	b480      	push	{r7}
 8035a2a:	b083      	sub	sp, #12
 8035a2c:	af00      	add	r7, sp, #0
 8035a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8035a30:	bf00      	nop
 8035a32:	370c      	adds	r7, #12
 8035a34:	46bd      	mov	sp, r7
 8035a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a3a:	4770      	bx	lr

08035a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8035a3c:	b480      	push	{r7}
 8035a3e:	b083      	sub	sp, #12
 8035a40:	af00      	add	r7, sp, #0
 8035a42:	6078      	str	r0, [r7, #4]
 8035a44:	460b      	mov	r3, r1
 8035a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8035a48:	bf00      	nop
 8035a4a:	370c      	adds	r7, #12
 8035a4c:	46bd      	mov	sp, r7
 8035a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a52:	4770      	bx	lr

08035a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8035a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8035a58:	b092      	sub	sp, #72	; 0x48
 8035a5a:	af00      	add	r7, sp, #0
 8035a5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8035a5e:	2300      	movs	r3, #0
 8035a60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8035a64:	697b      	ldr	r3, [r7, #20]
 8035a66:	689a      	ldr	r2, [r3, #8]
 8035a68:	697b      	ldr	r3, [r7, #20]
 8035a6a:	691b      	ldr	r3, [r3, #16]
 8035a6c:	431a      	orrs	r2, r3
 8035a6e:	697b      	ldr	r3, [r7, #20]
 8035a70:	695b      	ldr	r3, [r3, #20]
 8035a72:	431a      	orrs	r2, r3
 8035a74:	697b      	ldr	r3, [r7, #20]
 8035a76:	69db      	ldr	r3, [r3, #28]
 8035a78:	4313      	orrs	r3, r2
 8035a7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8035a7c:	697b      	ldr	r3, [r7, #20]
 8035a7e:	681b      	ldr	r3, [r3, #0]
 8035a80:	681a      	ldr	r2, [r3, #0]
 8035a82:	4bbe      	ldr	r3, [pc, #760]	; (8035d7c <UART_SetConfig+0x328>)
 8035a84:	4013      	ands	r3, r2
 8035a86:	697a      	ldr	r2, [r7, #20]
 8035a88:	6812      	ldr	r2, [r2, #0]
 8035a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035a8c:	430b      	orrs	r3, r1
 8035a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8035a90:	697b      	ldr	r3, [r7, #20]
 8035a92:	681b      	ldr	r3, [r3, #0]
 8035a94:	685b      	ldr	r3, [r3, #4]
 8035a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8035a9a:	697b      	ldr	r3, [r7, #20]
 8035a9c:	68da      	ldr	r2, [r3, #12]
 8035a9e:	697b      	ldr	r3, [r7, #20]
 8035aa0:	681b      	ldr	r3, [r3, #0]
 8035aa2:	430a      	orrs	r2, r1
 8035aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8035aa6:	697b      	ldr	r3, [r7, #20]
 8035aa8:	699b      	ldr	r3, [r3, #24]
 8035aaa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8035aac:	697b      	ldr	r3, [r7, #20]
 8035aae:	681b      	ldr	r3, [r3, #0]
 8035ab0:	4ab3      	ldr	r2, [pc, #716]	; (8035d80 <UART_SetConfig+0x32c>)
 8035ab2:	4293      	cmp	r3, r2
 8035ab4:	d004      	beq.n	8035ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8035ab6:	697b      	ldr	r3, [r7, #20]
 8035ab8:	6a1b      	ldr	r3, [r3, #32]
 8035aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035abc:	4313      	orrs	r3, r2
 8035abe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8035ac0:	697b      	ldr	r3, [r7, #20]
 8035ac2:	681b      	ldr	r3, [r3, #0]
 8035ac4:	689a      	ldr	r2, [r3, #8]
 8035ac6:	4baf      	ldr	r3, [pc, #700]	; (8035d84 <UART_SetConfig+0x330>)
 8035ac8:	4013      	ands	r3, r2
 8035aca:	697a      	ldr	r2, [r7, #20]
 8035acc:	6812      	ldr	r2, [r2, #0]
 8035ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035ad0:	430b      	orrs	r3, r1
 8035ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8035ad4:	697b      	ldr	r3, [r7, #20]
 8035ad6:	681b      	ldr	r3, [r3, #0]
 8035ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035ada:	f023 010f 	bic.w	r1, r3, #15
 8035ade:	697b      	ldr	r3, [r7, #20]
 8035ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035ae2:	697b      	ldr	r3, [r7, #20]
 8035ae4:	681b      	ldr	r3, [r3, #0]
 8035ae6:	430a      	orrs	r2, r1
 8035ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8035aea:	697b      	ldr	r3, [r7, #20]
 8035aec:	681b      	ldr	r3, [r3, #0]
 8035aee:	4aa6      	ldr	r2, [pc, #664]	; (8035d88 <UART_SetConfig+0x334>)
 8035af0:	4293      	cmp	r3, r2
 8035af2:	d177      	bne.n	8035be4 <UART_SetConfig+0x190>
 8035af4:	4ba5      	ldr	r3, [pc, #660]	; (8035d8c <UART_SetConfig+0x338>)
 8035af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035afc:	2b28      	cmp	r3, #40	; 0x28
 8035afe:	d86d      	bhi.n	8035bdc <UART_SetConfig+0x188>
 8035b00:	a201      	add	r2, pc, #4	; (adr r2, 8035b08 <UART_SetConfig+0xb4>)
 8035b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b06:	bf00      	nop
 8035b08:	08035bad 	.word	0x08035bad
 8035b0c:	08035bdd 	.word	0x08035bdd
 8035b10:	08035bdd 	.word	0x08035bdd
 8035b14:	08035bdd 	.word	0x08035bdd
 8035b18:	08035bdd 	.word	0x08035bdd
 8035b1c:	08035bdd 	.word	0x08035bdd
 8035b20:	08035bdd 	.word	0x08035bdd
 8035b24:	08035bdd 	.word	0x08035bdd
 8035b28:	08035bb5 	.word	0x08035bb5
 8035b2c:	08035bdd 	.word	0x08035bdd
 8035b30:	08035bdd 	.word	0x08035bdd
 8035b34:	08035bdd 	.word	0x08035bdd
 8035b38:	08035bdd 	.word	0x08035bdd
 8035b3c:	08035bdd 	.word	0x08035bdd
 8035b40:	08035bdd 	.word	0x08035bdd
 8035b44:	08035bdd 	.word	0x08035bdd
 8035b48:	08035bbd 	.word	0x08035bbd
 8035b4c:	08035bdd 	.word	0x08035bdd
 8035b50:	08035bdd 	.word	0x08035bdd
 8035b54:	08035bdd 	.word	0x08035bdd
 8035b58:	08035bdd 	.word	0x08035bdd
 8035b5c:	08035bdd 	.word	0x08035bdd
 8035b60:	08035bdd 	.word	0x08035bdd
 8035b64:	08035bdd 	.word	0x08035bdd
 8035b68:	08035bc5 	.word	0x08035bc5
 8035b6c:	08035bdd 	.word	0x08035bdd
 8035b70:	08035bdd 	.word	0x08035bdd
 8035b74:	08035bdd 	.word	0x08035bdd
 8035b78:	08035bdd 	.word	0x08035bdd
 8035b7c:	08035bdd 	.word	0x08035bdd
 8035b80:	08035bdd 	.word	0x08035bdd
 8035b84:	08035bdd 	.word	0x08035bdd
 8035b88:	08035bcd 	.word	0x08035bcd
 8035b8c:	08035bdd 	.word	0x08035bdd
 8035b90:	08035bdd 	.word	0x08035bdd
 8035b94:	08035bdd 	.word	0x08035bdd
 8035b98:	08035bdd 	.word	0x08035bdd
 8035b9c:	08035bdd 	.word	0x08035bdd
 8035ba0:	08035bdd 	.word	0x08035bdd
 8035ba4:	08035bdd 	.word	0x08035bdd
 8035ba8:	08035bd5 	.word	0x08035bd5
 8035bac:	2301      	movs	r3, #1
 8035bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bb2:	e222      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bb4:	2304      	movs	r3, #4
 8035bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bba:	e21e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bbc:	2308      	movs	r3, #8
 8035bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bc2:	e21a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bc4:	2310      	movs	r3, #16
 8035bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bca:	e216      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bcc:	2320      	movs	r3, #32
 8035bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bd2:	e212      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bd4:	2340      	movs	r3, #64	; 0x40
 8035bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bda:	e20e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035bdc:	2380      	movs	r3, #128	; 0x80
 8035bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035be2:	e20a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035be4:	697b      	ldr	r3, [r7, #20]
 8035be6:	681b      	ldr	r3, [r3, #0]
 8035be8:	4a69      	ldr	r2, [pc, #420]	; (8035d90 <UART_SetConfig+0x33c>)
 8035bea:	4293      	cmp	r3, r2
 8035bec:	d130      	bne.n	8035c50 <UART_SetConfig+0x1fc>
 8035bee:	4b67      	ldr	r3, [pc, #412]	; (8035d8c <UART_SetConfig+0x338>)
 8035bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035bf2:	f003 0307 	and.w	r3, r3, #7
 8035bf6:	2b05      	cmp	r3, #5
 8035bf8:	d826      	bhi.n	8035c48 <UART_SetConfig+0x1f4>
 8035bfa:	a201      	add	r2, pc, #4	; (adr r2, 8035c00 <UART_SetConfig+0x1ac>)
 8035bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c00:	08035c19 	.word	0x08035c19
 8035c04:	08035c21 	.word	0x08035c21
 8035c08:	08035c29 	.word	0x08035c29
 8035c0c:	08035c31 	.word	0x08035c31
 8035c10:	08035c39 	.word	0x08035c39
 8035c14:	08035c41 	.word	0x08035c41
 8035c18:	2300      	movs	r3, #0
 8035c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c1e:	e1ec      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c20:	2304      	movs	r3, #4
 8035c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c26:	e1e8      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c28:	2308      	movs	r3, #8
 8035c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c2e:	e1e4      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c30:	2310      	movs	r3, #16
 8035c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c36:	e1e0      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c38:	2320      	movs	r3, #32
 8035c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c3e:	e1dc      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c40:	2340      	movs	r3, #64	; 0x40
 8035c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c46:	e1d8      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c48:	2380      	movs	r3, #128	; 0x80
 8035c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c4e:	e1d4      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c50:	697b      	ldr	r3, [r7, #20]
 8035c52:	681b      	ldr	r3, [r3, #0]
 8035c54:	4a4f      	ldr	r2, [pc, #316]	; (8035d94 <UART_SetConfig+0x340>)
 8035c56:	4293      	cmp	r3, r2
 8035c58:	d130      	bne.n	8035cbc <UART_SetConfig+0x268>
 8035c5a:	4b4c      	ldr	r3, [pc, #304]	; (8035d8c <UART_SetConfig+0x338>)
 8035c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c5e:	f003 0307 	and.w	r3, r3, #7
 8035c62:	2b05      	cmp	r3, #5
 8035c64:	d826      	bhi.n	8035cb4 <UART_SetConfig+0x260>
 8035c66:	a201      	add	r2, pc, #4	; (adr r2, 8035c6c <UART_SetConfig+0x218>)
 8035c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c6c:	08035c85 	.word	0x08035c85
 8035c70:	08035c8d 	.word	0x08035c8d
 8035c74:	08035c95 	.word	0x08035c95
 8035c78:	08035c9d 	.word	0x08035c9d
 8035c7c:	08035ca5 	.word	0x08035ca5
 8035c80:	08035cad 	.word	0x08035cad
 8035c84:	2300      	movs	r3, #0
 8035c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c8a:	e1b6      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c8c:	2304      	movs	r3, #4
 8035c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c92:	e1b2      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c94:	2308      	movs	r3, #8
 8035c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c9a:	e1ae      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035c9c:	2310      	movs	r3, #16
 8035c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ca2:	e1aa      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035ca4:	2320      	movs	r3, #32
 8035ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035caa:	e1a6      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035cac:	2340      	movs	r3, #64	; 0x40
 8035cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cb2:	e1a2      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035cb4:	2380      	movs	r3, #128	; 0x80
 8035cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cba:	e19e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035cbc:	697b      	ldr	r3, [r7, #20]
 8035cbe:	681b      	ldr	r3, [r3, #0]
 8035cc0:	4a35      	ldr	r2, [pc, #212]	; (8035d98 <UART_SetConfig+0x344>)
 8035cc2:	4293      	cmp	r3, r2
 8035cc4:	d130      	bne.n	8035d28 <UART_SetConfig+0x2d4>
 8035cc6:	4b31      	ldr	r3, [pc, #196]	; (8035d8c <UART_SetConfig+0x338>)
 8035cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035cca:	f003 0307 	and.w	r3, r3, #7
 8035cce:	2b05      	cmp	r3, #5
 8035cd0:	d826      	bhi.n	8035d20 <UART_SetConfig+0x2cc>
 8035cd2:	a201      	add	r2, pc, #4	; (adr r2, 8035cd8 <UART_SetConfig+0x284>)
 8035cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035cd8:	08035cf1 	.word	0x08035cf1
 8035cdc:	08035cf9 	.word	0x08035cf9
 8035ce0:	08035d01 	.word	0x08035d01
 8035ce4:	08035d09 	.word	0x08035d09
 8035ce8:	08035d11 	.word	0x08035d11
 8035cec:	08035d19 	.word	0x08035d19
 8035cf0:	2300      	movs	r3, #0
 8035cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cf6:	e180      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035cf8:	2304      	movs	r3, #4
 8035cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cfe:	e17c      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d00:	2308      	movs	r3, #8
 8035d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d06:	e178      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d08:	2310      	movs	r3, #16
 8035d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d0e:	e174      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d10:	2320      	movs	r3, #32
 8035d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d16:	e170      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d18:	2340      	movs	r3, #64	; 0x40
 8035d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d1e:	e16c      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d20:	2380      	movs	r3, #128	; 0x80
 8035d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d26:	e168      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d28:	697b      	ldr	r3, [r7, #20]
 8035d2a:	681b      	ldr	r3, [r3, #0]
 8035d2c:	4a1b      	ldr	r2, [pc, #108]	; (8035d9c <UART_SetConfig+0x348>)
 8035d2e:	4293      	cmp	r3, r2
 8035d30:	d142      	bne.n	8035db8 <UART_SetConfig+0x364>
 8035d32:	4b16      	ldr	r3, [pc, #88]	; (8035d8c <UART_SetConfig+0x338>)
 8035d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d36:	f003 0307 	and.w	r3, r3, #7
 8035d3a:	2b05      	cmp	r3, #5
 8035d3c:	d838      	bhi.n	8035db0 <UART_SetConfig+0x35c>
 8035d3e:	a201      	add	r2, pc, #4	; (adr r2, 8035d44 <UART_SetConfig+0x2f0>)
 8035d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d44:	08035d5d 	.word	0x08035d5d
 8035d48:	08035d65 	.word	0x08035d65
 8035d4c:	08035d6d 	.word	0x08035d6d
 8035d50:	08035d75 	.word	0x08035d75
 8035d54:	08035da1 	.word	0x08035da1
 8035d58:	08035da9 	.word	0x08035da9
 8035d5c:	2300      	movs	r3, #0
 8035d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d62:	e14a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d64:	2304      	movs	r3, #4
 8035d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d6a:	e146      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d6c:	2308      	movs	r3, #8
 8035d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d72:	e142      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d74:	2310      	movs	r3, #16
 8035d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d7a:	e13e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035d7c:	cfff69f3 	.word	0xcfff69f3
 8035d80:	58000c00 	.word	0x58000c00
 8035d84:	11fff4ff 	.word	0x11fff4ff
 8035d88:	40011000 	.word	0x40011000
 8035d8c:	58024400 	.word	0x58024400
 8035d90:	40004400 	.word	0x40004400
 8035d94:	40004800 	.word	0x40004800
 8035d98:	40004c00 	.word	0x40004c00
 8035d9c:	40005000 	.word	0x40005000
 8035da0:	2320      	movs	r3, #32
 8035da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035da6:	e128      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035da8:	2340      	movs	r3, #64	; 0x40
 8035daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dae:	e124      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035db0:	2380      	movs	r3, #128	; 0x80
 8035db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035db6:	e120      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035db8:	697b      	ldr	r3, [r7, #20]
 8035dba:	681b      	ldr	r3, [r3, #0]
 8035dbc:	4acb      	ldr	r2, [pc, #812]	; (80360ec <UART_SetConfig+0x698>)
 8035dbe:	4293      	cmp	r3, r2
 8035dc0:	d176      	bne.n	8035eb0 <UART_SetConfig+0x45c>
 8035dc2:	4bcb      	ldr	r3, [pc, #812]	; (80360f0 <UART_SetConfig+0x69c>)
 8035dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035dca:	2b28      	cmp	r3, #40	; 0x28
 8035dcc:	d86c      	bhi.n	8035ea8 <UART_SetConfig+0x454>
 8035dce:	a201      	add	r2, pc, #4	; (adr r2, 8035dd4 <UART_SetConfig+0x380>)
 8035dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035dd4:	08035e79 	.word	0x08035e79
 8035dd8:	08035ea9 	.word	0x08035ea9
 8035ddc:	08035ea9 	.word	0x08035ea9
 8035de0:	08035ea9 	.word	0x08035ea9
 8035de4:	08035ea9 	.word	0x08035ea9
 8035de8:	08035ea9 	.word	0x08035ea9
 8035dec:	08035ea9 	.word	0x08035ea9
 8035df0:	08035ea9 	.word	0x08035ea9
 8035df4:	08035e81 	.word	0x08035e81
 8035df8:	08035ea9 	.word	0x08035ea9
 8035dfc:	08035ea9 	.word	0x08035ea9
 8035e00:	08035ea9 	.word	0x08035ea9
 8035e04:	08035ea9 	.word	0x08035ea9
 8035e08:	08035ea9 	.word	0x08035ea9
 8035e0c:	08035ea9 	.word	0x08035ea9
 8035e10:	08035ea9 	.word	0x08035ea9
 8035e14:	08035e89 	.word	0x08035e89
 8035e18:	08035ea9 	.word	0x08035ea9
 8035e1c:	08035ea9 	.word	0x08035ea9
 8035e20:	08035ea9 	.word	0x08035ea9
 8035e24:	08035ea9 	.word	0x08035ea9
 8035e28:	08035ea9 	.word	0x08035ea9
 8035e2c:	08035ea9 	.word	0x08035ea9
 8035e30:	08035ea9 	.word	0x08035ea9
 8035e34:	08035e91 	.word	0x08035e91
 8035e38:	08035ea9 	.word	0x08035ea9
 8035e3c:	08035ea9 	.word	0x08035ea9
 8035e40:	08035ea9 	.word	0x08035ea9
 8035e44:	08035ea9 	.word	0x08035ea9
 8035e48:	08035ea9 	.word	0x08035ea9
 8035e4c:	08035ea9 	.word	0x08035ea9
 8035e50:	08035ea9 	.word	0x08035ea9
 8035e54:	08035e99 	.word	0x08035e99
 8035e58:	08035ea9 	.word	0x08035ea9
 8035e5c:	08035ea9 	.word	0x08035ea9
 8035e60:	08035ea9 	.word	0x08035ea9
 8035e64:	08035ea9 	.word	0x08035ea9
 8035e68:	08035ea9 	.word	0x08035ea9
 8035e6c:	08035ea9 	.word	0x08035ea9
 8035e70:	08035ea9 	.word	0x08035ea9
 8035e74:	08035ea1 	.word	0x08035ea1
 8035e78:	2301      	movs	r3, #1
 8035e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e7e:	e0bc      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035e80:	2304      	movs	r3, #4
 8035e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e86:	e0b8      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035e88:	2308      	movs	r3, #8
 8035e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e8e:	e0b4      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035e90:	2310      	movs	r3, #16
 8035e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e96:	e0b0      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035e98:	2320      	movs	r3, #32
 8035e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e9e:	e0ac      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035ea0:	2340      	movs	r3, #64	; 0x40
 8035ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ea6:	e0a8      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035ea8:	2380      	movs	r3, #128	; 0x80
 8035eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eae:	e0a4      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035eb0:	697b      	ldr	r3, [r7, #20]
 8035eb2:	681b      	ldr	r3, [r3, #0]
 8035eb4:	4a8f      	ldr	r2, [pc, #572]	; (80360f4 <UART_SetConfig+0x6a0>)
 8035eb6:	4293      	cmp	r3, r2
 8035eb8:	d130      	bne.n	8035f1c <UART_SetConfig+0x4c8>
 8035eba:	4b8d      	ldr	r3, [pc, #564]	; (80360f0 <UART_SetConfig+0x69c>)
 8035ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035ebe:	f003 0307 	and.w	r3, r3, #7
 8035ec2:	2b05      	cmp	r3, #5
 8035ec4:	d826      	bhi.n	8035f14 <UART_SetConfig+0x4c0>
 8035ec6:	a201      	add	r2, pc, #4	; (adr r2, 8035ecc <UART_SetConfig+0x478>)
 8035ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035ecc:	08035ee5 	.word	0x08035ee5
 8035ed0:	08035eed 	.word	0x08035eed
 8035ed4:	08035ef5 	.word	0x08035ef5
 8035ed8:	08035efd 	.word	0x08035efd
 8035edc:	08035f05 	.word	0x08035f05
 8035ee0:	08035f0d 	.word	0x08035f0d
 8035ee4:	2300      	movs	r3, #0
 8035ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eea:	e086      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035eec:	2304      	movs	r3, #4
 8035eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ef2:	e082      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035ef4:	2308      	movs	r3, #8
 8035ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035efa:	e07e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035efc:	2310      	movs	r3, #16
 8035efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f02:	e07a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f04:	2320      	movs	r3, #32
 8035f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f0a:	e076      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f0c:	2340      	movs	r3, #64	; 0x40
 8035f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f12:	e072      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f14:	2380      	movs	r3, #128	; 0x80
 8035f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f1a:	e06e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f1c:	697b      	ldr	r3, [r7, #20]
 8035f1e:	681b      	ldr	r3, [r3, #0]
 8035f20:	4a75      	ldr	r2, [pc, #468]	; (80360f8 <UART_SetConfig+0x6a4>)
 8035f22:	4293      	cmp	r3, r2
 8035f24:	d130      	bne.n	8035f88 <UART_SetConfig+0x534>
 8035f26:	4b72      	ldr	r3, [pc, #456]	; (80360f0 <UART_SetConfig+0x69c>)
 8035f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035f2a:	f003 0307 	and.w	r3, r3, #7
 8035f2e:	2b05      	cmp	r3, #5
 8035f30:	d826      	bhi.n	8035f80 <UART_SetConfig+0x52c>
 8035f32:	a201      	add	r2, pc, #4	; (adr r2, 8035f38 <UART_SetConfig+0x4e4>)
 8035f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f38:	08035f51 	.word	0x08035f51
 8035f3c:	08035f59 	.word	0x08035f59
 8035f40:	08035f61 	.word	0x08035f61
 8035f44:	08035f69 	.word	0x08035f69
 8035f48:	08035f71 	.word	0x08035f71
 8035f4c:	08035f79 	.word	0x08035f79
 8035f50:	2300      	movs	r3, #0
 8035f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f56:	e050      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f58:	2304      	movs	r3, #4
 8035f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f5e:	e04c      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f60:	2308      	movs	r3, #8
 8035f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f66:	e048      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f68:	2310      	movs	r3, #16
 8035f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f6e:	e044      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f70:	2320      	movs	r3, #32
 8035f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f76:	e040      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f78:	2340      	movs	r3, #64	; 0x40
 8035f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f7e:	e03c      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f80:	2380      	movs	r3, #128	; 0x80
 8035f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f86:	e038      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035f88:	697b      	ldr	r3, [r7, #20]
 8035f8a:	681b      	ldr	r3, [r3, #0]
 8035f8c:	4a5b      	ldr	r2, [pc, #364]	; (80360fc <UART_SetConfig+0x6a8>)
 8035f8e:	4293      	cmp	r3, r2
 8035f90:	d130      	bne.n	8035ff4 <UART_SetConfig+0x5a0>
 8035f92:	4b57      	ldr	r3, [pc, #348]	; (80360f0 <UART_SetConfig+0x69c>)
 8035f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035f96:	f003 0307 	and.w	r3, r3, #7
 8035f9a:	2b05      	cmp	r3, #5
 8035f9c:	d826      	bhi.n	8035fec <UART_SetConfig+0x598>
 8035f9e:	a201      	add	r2, pc, #4	; (adr r2, 8035fa4 <UART_SetConfig+0x550>)
 8035fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035fa4:	08035fbd 	.word	0x08035fbd
 8035fa8:	08035fc5 	.word	0x08035fc5
 8035fac:	08035fcd 	.word	0x08035fcd
 8035fb0:	08035fd5 	.word	0x08035fd5
 8035fb4:	08035fdd 	.word	0x08035fdd
 8035fb8:	08035fe5 	.word	0x08035fe5
 8035fbc:	2302      	movs	r3, #2
 8035fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fc2:	e01a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fc4:	2304      	movs	r3, #4
 8035fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fca:	e016      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fcc:	2308      	movs	r3, #8
 8035fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fd2:	e012      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fd4:	2310      	movs	r3, #16
 8035fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fda:	e00e      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fdc:	2320      	movs	r3, #32
 8035fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fe2:	e00a      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fe4:	2340      	movs	r3, #64	; 0x40
 8035fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fea:	e006      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035fec:	2380      	movs	r3, #128	; 0x80
 8035fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ff2:	e002      	b.n	8035ffa <UART_SetConfig+0x5a6>
 8035ff4:	2380      	movs	r3, #128	; 0x80
 8035ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8035ffa:	697b      	ldr	r3, [r7, #20]
 8035ffc:	681b      	ldr	r3, [r3, #0]
 8035ffe:	4a3f      	ldr	r2, [pc, #252]	; (80360fc <UART_SetConfig+0x6a8>)
 8036000:	4293      	cmp	r3, r2
 8036002:	f040 80f8 	bne.w	80361f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8036006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803600a:	2b20      	cmp	r3, #32
 803600c:	dc46      	bgt.n	803609c <UART_SetConfig+0x648>
 803600e:	2b02      	cmp	r3, #2
 8036010:	f2c0 8082 	blt.w	8036118 <UART_SetConfig+0x6c4>
 8036014:	3b02      	subs	r3, #2
 8036016:	2b1e      	cmp	r3, #30
 8036018:	d87e      	bhi.n	8036118 <UART_SetConfig+0x6c4>
 803601a:	a201      	add	r2, pc, #4	; (adr r2, 8036020 <UART_SetConfig+0x5cc>)
 803601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036020:	080360a3 	.word	0x080360a3
 8036024:	08036119 	.word	0x08036119
 8036028:	080360ab 	.word	0x080360ab
 803602c:	08036119 	.word	0x08036119
 8036030:	08036119 	.word	0x08036119
 8036034:	08036119 	.word	0x08036119
 8036038:	080360bb 	.word	0x080360bb
 803603c:	08036119 	.word	0x08036119
 8036040:	08036119 	.word	0x08036119
 8036044:	08036119 	.word	0x08036119
 8036048:	08036119 	.word	0x08036119
 803604c:	08036119 	.word	0x08036119
 8036050:	08036119 	.word	0x08036119
 8036054:	08036119 	.word	0x08036119
 8036058:	080360cb 	.word	0x080360cb
 803605c:	08036119 	.word	0x08036119
 8036060:	08036119 	.word	0x08036119
 8036064:	08036119 	.word	0x08036119
 8036068:	08036119 	.word	0x08036119
 803606c:	08036119 	.word	0x08036119
 8036070:	08036119 	.word	0x08036119
 8036074:	08036119 	.word	0x08036119
 8036078:	08036119 	.word	0x08036119
 803607c:	08036119 	.word	0x08036119
 8036080:	08036119 	.word	0x08036119
 8036084:	08036119 	.word	0x08036119
 8036088:	08036119 	.word	0x08036119
 803608c:	08036119 	.word	0x08036119
 8036090:	08036119 	.word	0x08036119
 8036094:	08036119 	.word	0x08036119
 8036098:	0803610b 	.word	0x0803610b
 803609c:	2b40      	cmp	r3, #64	; 0x40
 803609e:	d037      	beq.n	8036110 <UART_SetConfig+0x6bc>
 80360a0:	e03a      	b.n	8036118 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80360a2:	f7fc fcbf 	bl	8032a24 <HAL_RCCEx_GetD3PCLK1Freq>
 80360a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80360a8:	e03c      	b.n	8036124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80360aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80360ae:	4618      	mov	r0, r3
 80360b0:	f7fc fcce 	bl	8032a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80360b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80360b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80360b8:	e034      	b.n	8036124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80360ba:	f107 0318 	add.w	r3, r7, #24
 80360be:	4618      	mov	r0, r3
 80360c0:	f7fc fe1a 	bl	8032cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80360c4:	69fb      	ldr	r3, [r7, #28]
 80360c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80360c8:	e02c      	b.n	8036124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80360ca:	4b09      	ldr	r3, [pc, #36]	; (80360f0 <UART_SetConfig+0x69c>)
 80360cc:	681b      	ldr	r3, [r3, #0]
 80360ce:	f003 0320 	and.w	r3, r3, #32
 80360d2:	2b00      	cmp	r3, #0
 80360d4:	d016      	beq.n	8036104 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80360d6:	4b06      	ldr	r3, [pc, #24]	; (80360f0 <UART_SetConfig+0x69c>)
 80360d8:	681b      	ldr	r3, [r3, #0]
 80360da:	08db      	lsrs	r3, r3, #3
 80360dc:	f003 0303 	and.w	r3, r3, #3
 80360e0:	4a07      	ldr	r2, [pc, #28]	; (8036100 <UART_SetConfig+0x6ac>)
 80360e2:	fa22 f303 	lsr.w	r3, r2, r3
 80360e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80360e8:	e01c      	b.n	8036124 <UART_SetConfig+0x6d0>
 80360ea:	bf00      	nop
 80360ec:	40011400 	.word	0x40011400
 80360f0:	58024400 	.word	0x58024400
 80360f4:	40007800 	.word	0x40007800
 80360f8:	40007c00 	.word	0x40007c00
 80360fc:	58000c00 	.word	0x58000c00
 8036100:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8036104:	4b9d      	ldr	r3, [pc, #628]	; (803637c <UART_SetConfig+0x928>)
 8036106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036108:	e00c      	b.n	8036124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803610a:	4b9d      	ldr	r3, [pc, #628]	; (8036380 <UART_SetConfig+0x92c>)
 803610c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803610e:	e009      	b.n	8036124 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036116:	e005      	b.n	8036124 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8036118:	2300      	movs	r3, #0
 803611a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803611c:	2301      	movs	r3, #1
 803611e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036122:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8036124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036126:	2b00      	cmp	r3, #0
 8036128:	f000 81de 	beq.w	80364e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 803612c:	697b      	ldr	r3, [r7, #20]
 803612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036130:	4a94      	ldr	r2, [pc, #592]	; (8036384 <UART_SetConfig+0x930>)
 8036132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036136:	461a      	mov	r2, r3
 8036138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803613a:	fbb3 f3f2 	udiv	r3, r3, r2
 803613e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8036140:	697b      	ldr	r3, [r7, #20]
 8036142:	685a      	ldr	r2, [r3, #4]
 8036144:	4613      	mov	r3, r2
 8036146:	005b      	lsls	r3, r3, #1
 8036148:	4413      	add	r3, r2
 803614a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803614c:	429a      	cmp	r2, r3
 803614e:	d305      	bcc.n	803615c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8036150:	697b      	ldr	r3, [r7, #20]
 8036152:	685b      	ldr	r3, [r3, #4]
 8036154:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8036156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036158:	429a      	cmp	r2, r3
 803615a:	d903      	bls.n	8036164 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 803615c:	2301      	movs	r3, #1
 803615e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8036162:	e1c1      	b.n	80364e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8036164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036166:	2200      	movs	r2, #0
 8036168:	60bb      	str	r3, [r7, #8]
 803616a:	60fa      	str	r2, [r7, #12]
 803616c:	697b      	ldr	r3, [r7, #20]
 803616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036170:	4a84      	ldr	r2, [pc, #528]	; (8036384 <UART_SetConfig+0x930>)
 8036172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036176:	b29b      	uxth	r3, r3
 8036178:	2200      	movs	r2, #0
 803617a:	603b      	str	r3, [r7, #0]
 803617c:	607a      	str	r2, [r7, #4]
 803617e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8036182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8036186:	f7ea f8fb 	bl	8020380 <__aeabi_uldivmod>
 803618a:	4602      	mov	r2, r0
 803618c:	460b      	mov	r3, r1
 803618e:	4610      	mov	r0, r2
 8036190:	4619      	mov	r1, r3
 8036192:	f04f 0200 	mov.w	r2, #0
 8036196:	f04f 0300 	mov.w	r3, #0
 803619a:	020b      	lsls	r3, r1, #8
 803619c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80361a0:	0202      	lsls	r2, r0, #8
 80361a2:	6979      	ldr	r1, [r7, #20]
 80361a4:	6849      	ldr	r1, [r1, #4]
 80361a6:	0849      	lsrs	r1, r1, #1
 80361a8:	2000      	movs	r0, #0
 80361aa:	460c      	mov	r4, r1
 80361ac:	4605      	mov	r5, r0
 80361ae:	eb12 0804 	adds.w	r8, r2, r4
 80361b2:	eb43 0905 	adc.w	r9, r3, r5
 80361b6:	697b      	ldr	r3, [r7, #20]
 80361b8:	685b      	ldr	r3, [r3, #4]
 80361ba:	2200      	movs	r2, #0
 80361bc:	469a      	mov	sl, r3
 80361be:	4693      	mov	fp, r2
 80361c0:	4652      	mov	r2, sl
 80361c2:	465b      	mov	r3, fp
 80361c4:	4640      	mov	r0, r8
 80361c6:	4649      	mov	r1, r9
 80361c8:	f7ea f8da 	bl	8020380 <__aeabi_uldivmod>
 80361cc:	4602      	mov	r2, r0
 80361ce:	460b      	mov	r3, r1
 80361d0:	4613      	mov	r3, r2
 80361d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80361d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80361d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80361da:	d308      	bcc.n	80361ee <UART_SetConfig+0x79a>
 80361dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80361de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80361e2:	d204      	bcs.n	80361ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80361e4:	697b      	ldr	r3, [r7, #20]
 80361e6:	681b      	ldr	r3, [r3, #0]
 80361e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80361ea:	60da      	str	r2, [r3, #12]
 80361ec:	e17c      	b.n	80364e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80361ee:	2301      	movs	r3, #1
 80361f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80361f4:	e178      	b.n	80364e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80361f6:	697b      	ldr	r3, [r7, #20]
 80361f8:	69db      	ldr	r3, [r3, #28]
 80361fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80361fe:	f040 80c5 	bne.w	803638c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8036202:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8036206:	2b20      	cmp	r3, #32
 8036208:	dc48      	bgt.n	803629c <UART_SetConfig+0x848>
 803620a:	2b00      	cmp	r3, #0
 803620c:	db7b      	blt.n	8036306 <UART_SetConfig+0x8b2>
 803620e:	2b20      	cmp	r3, #32
 8036210:	d879      	bhi.n	8036306 <UART_SetConfig+0x8b2>
 8036212:	a201      	add	r2, pc, #4	; (adr r2, 8036218 <UART_SetConfig+0x7c4>)
 8036214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036218:	080362a3 	.word	0x080362a3
 803621c:	080362ab 	.word	0x080362ab
 8036220:	08036307 	.word	0x08036307
 8036224:	08036307 	.word	0x08036307
 8036228:	080362b3 	.word	0x080362b3
 803622c:	08036307 	.word	0x08036307
 8036230:	08036307 	.word	0x08036307
 8036234:	08036307 	.word	0x08036307
 8036238:	080362c3 	.word	0x080362c3
 803623c:	08036307 	.word	0x08036307
 8036240:	08036307 	.word	0x08036307
 8036244:	08036307 	.word	0x08036307
 8036248:	08036307 	.word	0x08036307
 803624c:	08036307 	.word	0x08036307
 8036250:	08036307 	.word	0x08036307
 8036254:	08036307 	.word	0x08036307
 8036258:	080362d3 	.word	0x080362d3
 803625c:	08036307 	.word	0x08036307
 8036260:	08036307 	.word	0x08036307
 8036264:	08036307 	.word	0x08036307
 8036268:	08036307 	.word	0x08036307
 803626c:	08036307 	.word	0x08036307
 8036270:	08036307 	.word	0x08036307
 8036274:	08036307 	.word	0x08036307
 8036278:	08036307 	.word	0x08036307
 803627c:	08036307 	.word	0x08036307
 8036280:	08036307 	.word	0x08036307
 8036284:	08036307 	.word	0x08036307
 8036288:	08036307 	.word	0x08036307
 803628c:	08036307 	.word	0x08036307
 8036290:	08036307 	.word	0x08036307
 8036294:	08036307 	.word	0x08036307
 8036298:	080362f9 	.word	0x080362f9
 803629c:	2b40      	cmp	r3, #64	; 0x40
 803629e:	d02e      	beq.n	80362fe <UART_SetConfig+0x8aa>
 80362a0:	e031      	b.n	8036306 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80362a2:	f7fb fc4d 	bl	8031b40 <HAL_RCC_GetPCLK1Freq>
 80362a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80362a8:	e033      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80362aa:	f7fb fc5f 	bl	8031b6c <HAL_RCC_GetPCLK2Freq>
 80362ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80362b0:	e02f      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80362b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80362b6:	4618      	mov	r0, r3
 80362b8:	f7fc fbca 	bl	8032a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80362bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80362be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362c0:	e027      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80362c2:	f107 0318 	add.w	r3, r7, #24
 80362c6:	4618      	mov	r0, r3
 80362c8:	f7fc fd16 	bl	8032cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80362cc:	69fb      	ldr	r3, [r7, #28]
 80362ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362d0:	e01f      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80362d2:	4b2d      	ldr	r3, [pc, #180]	; (8036388 <UART_SetConfig+0x934>)
 80362d4:	681b      	ldr	r3, [r3, #0]
 80362d6:	f003 0320 	and.w	r3, r3, #32
 80362da:	2b00      	cmp	r3, #0
 80362dc:	d009      	beq.n	80362f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80362de:	4b2a      	ldr	r3, [pc, #168]	; (8036388 <UART_SetConfig+0x934>)
 80362e0:	681b      	ldr	r3, [r3, #0]
 80362e2:	08db      	lsrs	r3, r3, #3
 80362e4:	f003 0303 	and.w	r3, r3, #3
 80362e8:	4a24      	ldr	r2, [pc, #144]	; (803637c <UART_SetConfig+0x928>)
 80362ea:	fa22 f303 	lsr.w	r3, r2, r3
 80362ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80362f0:	e00f      	b.n	8036312 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80362f2:	4b22      	ldr	r3, [pc, #136]	; (803637c <UART_SetConfig+0x928>)
 80362f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362f6:	e00c      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80362f8:	4b21      	ldr	r3, [pc, #132]	; (8036380 <UART_SetConfig+0x92c>)
 80362fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362fc:	e009      	b.n	8036312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80362fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036304:	e005      	b.n	8036312 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8036306:	2300      	movs	r3, #0
 8036308:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803630a:	2301      	movs	r3, #1
 803630c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8036312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036314:	2b00      	cmp	r3, #0
 8036316:	f000 80e7 	beq.w	80364e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803631a:	697b      	ldr	r3, [r7, #20]
 803631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803631e:	4a19      	ldr	r2, [pc, #100]	; (8036384 <UART_SetConfig+0x930>)
 8036320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036324:	461a      	mov	r2, r3
 8036326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036328:	fbb3 f3f2 	udiv	r3, r3, r2
 803632c:	005a      	lsls	r2, r3, #1
 803632e:	697b      	ldr	r3, [r7, #20]
 8036330:	685b      	ldr	r3, [r3, #4]
 8036332:	085b      	lsrs	r3, r3, #1
 8036334:	441a      	add	r2, r3
 8036336:	697b      	ldr	r3, [r7, #20]
 8036338:	685b      	ldr	r3, [r3, #4]
 803633a:	fbb2 f3f3 	udiv	r3, r2, r3
 803633e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8036340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036342:	2b0f      	cmp	r3, #15
 8036344:	d916      	bls.n	8036374 <UART_SetConfig+0x920>
 8036346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803634c:	d212      	bcs.n	8036374 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 803634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036350:	b29b      	uxth	r3, r3
 8036352:	f023 030f 	bic.w	r3, r3, #15
 8036356:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8036358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803635a:	085b      	lsrs	r3, r3, #1
 803635c:	b29b      	uxth	r3, r3
 803635e:	f003 0307 	and.w	r3, r3, #7
 8036362:	b29a      	uxth	r2, r3
 8036364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8036366:	4313      	orrs	r3, r2
 8036368:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 803636a:	697b      	ldr	r3, [r7, #20]
 803636c:	681b      	ldr	r3, [r3, #0]
 803636e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8036370:	60da      	str	r2, [r3, #12]
 8036372:	e0b9      	b.n	80364e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8036374:	2301      	movs	r3, #1
 8036376:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803637a:	e0b5      	b.n	80364e8 <UART_SetConfig+0xa94>
 803637c:	03d09000 	.word	0x03d09000
 8036380:	003d0900 	.word	0x003d0900
 8036384:	08058520 	.word	0x08058520
 8036388:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 803638c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8036390:	2b20      	cmp	r3, #32
 8036392:	dc49      	bgt.n	8036428 <UART_SetConfig+0x9d4>
 8036394:	2b00      	cmp	r3, #0
 8036396:	db7c      	blt.n	8036492 <UART_SetConfig+0xa3e>
 8036398:	2b20      	cmp	r3, #32
 803639a:	d87a      	bhi.n	8036492 <UART_SetConfig+0xa3e>
 803639c:	a201      	add	r2, pc, #4	; (adr r2, 80363a4 <UART_SetConfig+0x950>)
 803639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80363a2:	bf00      	nop
 80363a4:	0803642f 	.word	0x0803642f
 80363a8:	08036437 	.word	0x08036437
 80363ac:	08036493 	.word	0x08036493
 80363b0:	08036493 	.word	0x08036493
 80363b4:	0803643f 	.word	0x0803643f
 80363b8:	08036493 	.word	0x08036493
 80363bc:	08036493 	.word	0x08036493
 80363c0:	08036493 	.word	0x08036493
 80363c4:	0803644f 	.word	0x0803644f
 80363c8:	08036493 	.word	0x08036493
 80363cc:	08036493 	.word	0x08036493
 80363d0:	08036493 	.word	0x08036493
 80363d4:	08036493 	.word	0x08036493
 80363d8:	08036493 	.word	0x08036493
 80363dc:	08036493 	.word	0x08036493
 80363e0:	08036493 	.word	0x08036493
 80363e4:	0803645f 	.word	0x0803645f
 80363e8:	08036493 	.word	0x08036493
 80363ec:	08036493 	.word	0x08036493
 80363f0:	08036493 	.word	0x08036493
 80363f4:	08036493 	.word	0x08036493
 80363f8:	08036493 	.word	0x08036493
 80363fc:	08036493 	.word	0x08036493
 8036400:	08036493 	.word	0x08036493
 8036404:	08036493 	.word	0x08036493
 8036408:	08036493 	.word	0x08036493
 803640c:	08036493 	.word	0x08036493
 8036410:	08036493 	.word	0x08036493
 8036414:	08036493 	.word	0x08036493
 8036418:	08036493 	.word	0x08036493
 803641c:	08036493 	.word	0x08036493
 8036420:	08036493 	.word	0x08036493
 8036424:	08036485 	.word	0x08036485
 8036428:	2b40      	cmp	r3, #64	; 0x40
 803642a:	d02e      	beq.n	803648a <UART_SetConfig+0xa36>
 803642c:	e031      	b.n	8036492 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803642e:	f7fb fb87 	bl	8031b40 <HAL_RCC_GetPCLK1Freq>
 8036432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036434:	e033      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8036436:	f7fb fb99 	bl	8031b6c <HAL_RCC_GetPCLK2Freq>
 803643a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803643c:	e02f      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803643e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8036442:	4618      	mov	r0, r3
 8036444:	f7fc fb04 	bl	8032a50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8036448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803644c:	e027      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803644e:	f107 0318 	add.w	r3, r7, #24
 8036452:	4618      	mov	r0, r3
 8036454:	f7fc fc50 	bl	8032cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036458:	69fb      	ldr	r3, [r7, #28]
 803645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803645c:	e01f      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803645e:	4b2d      	ldr	r3, [pc, #180]	; (8036514 <UART_SetConfig+0xac0>)
 8036460:	681b      	ldr	r3, [r3, #0]
 8036462:	f003 0320 	and.w	r3, r3, #32
 8036466:	2b00      	cmp	r3, #0
 8036468:	d009      	beq.n	803647e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803646a:	4b2a      	ldr	r3, [pc, #168]	; (8036514 <UART_SetConfig+0xac0>)
 803646c:	681b      	ldr	r3, [r3, #0]
 803646e:	08db      	lsrs	r3, r3, #3
 8036470:	f003 0303 	and.w	r3, r3, #3
 8036474:	4a28      	ldr	r2, [pc, #160]	; (8036518 <UART_SetConfig+0xac4>)
 8036476:	fa22 f303 	lsr.w	r3, r2, r3
 803647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803647c:	e00f      	b.n	803649e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 803647e:	4b26      	ldr	r3, [pc, #152]	; (8036518 <UART_SetConfig+0xac4>)
 8036480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036482:	e00c      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8036484:	4b25      	ldr	r3, [pc, #148]	; (803651c <UART_SetConfig+0xac8>)
 8036486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036488:	e009      	b.n	803649e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036490:	e005      	b.n	803649e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8036492:	2300      	movs	r3, #0
 8036494:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8036496:	2301      	movs	r3, #1
 8036498:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803649c:	bf00      	nop
    }

    if (pclk != 0U)
 803649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80364a0:	2b00      	cmp	r3, #0
 80364a2:	d021      	beq.n	80364e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80364a4:	697b      	ldr	r3, [r7, #20]
 80364a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80364a8:	4a1d      	ldr	r2, [pc, #116]	; (8036520 <UART_SetConfig+0xacc>)
 80364aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80364ae:	461a      	mov	r2, r3
 80364b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80364b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80364b6:	697b      	ldr	r3, [r7, #20]
 80364b8:	685b      	ldr	r3, [r3, #4]
 80364ba:	085b      	lsrs	r3, r3, #1
 80364bc:	441a      	add	r2, r3
 80364be:	697b      	ldr	r3, [r7, #20]
 80364c0:	685b      	ldr	r3, [r3, #4]
 80364c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80364c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80364c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80364ca:	2b0f      	cmp	r3, #15
 80364cc:	d909      	bls.n	80364e2 <UART_SetConfig+0xa8e>
 80364ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80364d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80364d4:	d205      	bcs.n	80364e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80364d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80364d8:	b29a      	uxth	r2, r3
 80364da:	697b      	ldr	r3, [r7, #20]
 80364dc:	681b      	ldr	r3, [r3, #0]
 80364de:	60da      	str	r2, [r3, #12]
 80364e0:	e002      	b.n	80364e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80364e2:	2301      	movs	r3, #1
 80364e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80364e8:	697b      	ldr	r3, [r7, #20]
 80364ea:	2201      	movs	r2, #1
 80364ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80364f0:	697b      	ldr	r3, [r7, #20]
 80364f2:	2201      	movs	r2, #1
 80364f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80364f8:	697b      	ldr	r3, [r7, #20]
 80364fa:	2200      	movs	r2, #0
 80364fc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80364fe:	697b      	ldr	r3, [r7, #20]
 8036500:	2200      	movs	r2, #0
 8036502:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8036504:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8036508:	4618      	mov	r0, r3
 803650a:	3748      	adds	r7, #72	; 0x48
 803650c:	46bd      	mov	sp, r7
 803650e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8036512:	bf00      	nop
 8036514:	58024400 	.word	0x58024400
 8036518:	03d09000 	.word	0x03d09000
 803651c:	003d0900 	.word	0x003d0900
 8036520:	08058520 	.word	0x08058520

08036524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8036524:	b480      	push	{r7}
 8036526:	b083      	sub	sp, #12
 8036528:	af00      	add	r7, sp, #0
 803652a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 803652c:	687b      	ldr	r3, [r7, #4]
 803652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036530:	f003 0301 	and.w	r3, r3, #1
 8036534:	2b00      	cmp	r3, #0
 8036536:	d00a      	beq.n	803654e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8036538:	687b      	ldr	r3, [r7, #4]
 803653a:	681b      	ldr	r3, [r3, #0]
 803653c:	685b      	ldr	r3, [r3, #4]
 803653e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8036542:	687b      	ldr	r3, [r7, #4]
 8036544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8036546:	687b      	ldr	r3, [r7, #4]
 8036548:	681b      	ldr	r3, [r3, #0]
 803654a:	430a      	orrs	r2, r1
 803654c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 803654e:	687b      	ldr	r3, [r7, #4]
 8036550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036552:	f003 0302 	and.w	r3, r3, #2
 8036556:	2b00      	cmp	r3, #0
 8036558:	d00a      	beq.n	8036570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 803655a:	687b      	ldr	r3, [r7, #4]
 803655c:	681b      	ldr	r3, [r3, #0]
 803655e:	685b      	ldr	r3, [r3, #4]
 8036560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8036564:	687b      	ldr	r3, [r7, #4]
 8036566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8036568:	687b      	ldr	r3, [r7, #4]
 803656a:	681b      	ldr	r3, [r3, #0]
 803656c:	430a      	orrs	r2, r1
 803656e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8036570:	687b      	ldr	r3, [r7, #4]
 8036572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036574:	f003 0304 	and.w	r3, r3, #4
 8036578:	2b00      	cmp	r3, #0
 803657a:	d00a      	beq.n	8036592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 803657c:	687b      	ldr	r3, [r7, #4]
 803657e:	681b      	ldr	r3, [r3, #0]
 8036580:	685b      	ldr	r3, [r3, #4]
 8036582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8036586:	687b      	ldr	r3, [r7, #4]
 8036588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803658a:	687b      	ldr	r3, [r7, #4]
 803658c:	681b      	ldr	r3, [r3, #0]
 803658e:	430a      	orrs	r2, r1
 8036590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8036592:	687b      	ldr	r3, [r7, #4]
 8036594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036596:	f003 0308 	and.w	r3, r3, #8
 803659a:	2b00      	cmp	r3, #0
 803659c:	d00a      	beq.n	80365b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 803659e:	687b      	ldr	r3, [r7, #4]
 80365a0:	681b      	ldr	r3, [r3, #0]
 80365a2:	685b      	ldr	r3, [r3, #4]
 80365a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80365a8:	687b      	ldr	r3, [r7, #4]
 80365aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80365ac:	687b      	ldr	r3, [r7, #4]
 80365ae:	681b      	ldr	r3, [r3, #0]
 80365b0:	430a      	orrs	r2, r1
 80365b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80365b4:	687b      	ldr	r3, [r7, #4]
 80365b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365b8:	f003 0310 	and.w	r3, r3, #16
 80365bc:	2b00      	cmp	r3, #0
 80365be:	d00a      	beq.n	80365d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80365c0:	687b      	ldr	r3, [r7, #4]
 80365c2:	681b      	ldr	r3, [r3, #0]
 80365c4:	689b      	ldr	r3, [r3, #8]
 80365c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80365ca:	687b      	ldr	r3, [r7, #4]
 80365cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80365ce:	687b      	ldr	r3, [r7, #4]
 80365d0:	681b      	ldr	r3, [r3, #0]
 80365d2:	430a      	orrs	r2, r1
 80365d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80365d6:	687b      	ldr	r3, [r7, #4]
 80365d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365da:	f003 0320 	and.w	r3, r3, #32
 80365de:	2b00      	cmp	r3, #0
 80365e0:	d00a      	beq.n	80365f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80365e2:	687b      	ldr	r3, [r7, #4]
 80365e4:	681b      	ldr	r3, [r3, #0]
 80365e6:	689b      	ldr	r3, [r3, #8]
 80365e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80365ec:	687b      	ldr	r3, [r7, #4]
 80365ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80365f0:	687b      	ldr	r3, [r7, #4]
 80365f2:	681b      	ldr	r3, [r3, #0]
 80365f4:	430a      	orrs	r2, r1
 80365f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80365f8:	687b      	ldr	r3, [r7, #4]
 80365fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036600:	2b00      	cmp	r3, #0
 8036602:	d01a      	beq.n	803663a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8036604:	687b      	ldr	r3, [r7, #4]
 8036606:	681b      	ldr	r3, [r3, #0]
 8036608:	685b      	ldr	r3, [r3, #4]
 803660a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 803660e:	687b      	ldr	r3, [r7, #4]
 8036610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8036612:	687b      	ldr	r3, [r7, #4]
 8036614:	681b      	ldr	r3, [r3, #0]
 8036616:	430a      	orrs	r2, r1
 8036618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 803661a:	687b      	ldr	r3, [r7, #4]
 803661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803661e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036622:	d10a      	bne.n	803663a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8036624:	687b      	ldr	r3, [r7, #4]
 8036626:	681b      	ldr	r3, [r3, #0]
 8036628:	685b      	ldr	r3, [r3, #4]
 803662a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 803662e:	687b      	ldr	r3, [r7, #4]
 8036630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8036632:	687b      	ldr	r3, [r7, #4]
 8036634:	681b      	ldr	r3, [r3, #0]
 8036636:	430a      	orrs	r2, r1
 8036638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 803663a:	687b      	ldr	r3, [r7, #4]
 803663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036642:	2b00      	cmp	r3, #0
 8036644:	d00a      	beq.n	803665c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8036646:	687b      	ldr	r3, [r7, #4]
 8036648:	681b      	ldr	r3, [r3, #0]
 803664a:	685b      	ldr	r3, [r3, #4]
 803664c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8036650:	687b      	ldr	r3, [r7, #4]
 8036652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8036654:	687b      	ldr	r3, [r7, #4]
 8036656:	681b      	ldr	r3, [r3, #0]
 8036658:	430a      	orrs	r2, r1
 803665a:	605a      	str	r2, [r3, #4]
  }
}
 803665c:	bf00      	nop
 803665e:	370c      	adds	r7, #12
 8036660:	46bd      	mov	sp, r7
 8036662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036666:	4770      	bx	lr

08036668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8036668:	b580      	push	{r7, lr}
 803666a:	b086      	sub	sp, #24
 803666c:	af02      	add	r7, sp, #8
 803666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036670:	687b      	ldr	r3, [r7, #4]
 8036672:	2200      	movs	r2, #0
 8036674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8036678:	f7f4 faec 	bl	802ac54 <HAL_GetTick>
 803667c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 803667e:	687b      	ldr	r3, [r7, #4]
 8036680:	681b      	ldr	r3, [r3, #0]
 8036682:	681b      	ldr	r3, [r3, #0]
 8036684:	f003 0308 	and.w	r3, r3, #8
 8036688:	2b08      	cmp	r3, #8
 803668a:	d10e      	bne.n	80366aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 803668c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8036690:	9300      	str	r3, [sp, #0]
 8036692:	68fb      	ldr	r3, [r7, #12]
 8036694:	2200      	movs	r2, #0
 8036696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 803669a:	6878      	ldr	r0, [r7, #4]
 803669c:	f000 f82f 	bl	80366fe <UART_WaitOnFlagUntilTimeout>
 80366a0:	4603      	mov	r3, r0
 80366a2:	2b00      	cmp	r3, #0
 80366a4:	d001      	beq.n	80366aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80366a6:	2303      	movs	r3, #3
 80366a8:	e025      	b.n	80366f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80366aa:	687b      	ldr	r3, [r7, #4]
 80366ac:	681b      	ldr	r3, [r3, #0]
 80366ae:	681b      	ldr	r3, [r3, #0]
 80366b0:	f003 0304 	and.w	r3, r3, #4
 80366b4:	2b04      	cmp	r3, #4
 80366b6:	d10e      	bne.n	80366d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80366b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80366bc:	9300      	str	r3, [sp, #0]
 80366be:	68fb      	ldr	r3, [r7, #12]
 80366c0:	2200      	movs	r2, #0
 80366c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80366c6:	6878      	ldr	r0, [r7, #4]
 80366c8:	f000 f819 	bl	80366fe <UART_WaitOnFlagUntilTimeout>
 80366cc:	4603      	mov	r3, r0
 80366ce:	2b00      	cmp	r3, #0
 80366d0:	d001      	beq.n	80366d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80366d2:	2303      	movs	r3, #3
 80366d4:	e00f      	b.n	80366f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80366d6:	687b      	ldr	r3, [r7, #4]
 80366d8:	2220      	movs	r2, #32
 80366da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80366de:	687b      	ldr	r3, [r7, #4]
 80366e0:	2220      	movs	r2, #32
 80366e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80366e6:	687b      	ldr	r3, [r7, #4]
 80366e8:	2200      	movs	r2, #0
 80366ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80366ec:	687b      	ldr	r3, [r7, #4]
 80366ee:	2200      	movs	r2, #0
 80366f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80366f4:	2300      	movs	r3, #0
}
 80366f6:	4618      	mov	r0, r3
 80366f8:	3710      	adds	r7, #16
 80366fa:	46bd      	mov	sp, r7
 80366fc:	bd80      	pop	{r7, pc}

080366fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80366fe:	b580      	push	{r7, lr}
 8036700:	b09c      	sub	sp, #112	; 0x70
 8036702:	af00      	add	r7, sp, #0
 8036704:	60f8      	str	r0, [r7, #12]
 8036706:	60b9      	str	r1, [r7, #8]
 8036708:	603b      	str	r3, [r7, #0]
 803670a:	4613      	mov	r3, r2
 803670c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 803670e:	e0a9      	b.n	8036864 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8036716:	f000 80a5 	beq.w	8036864 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803671a:	f7f4 fa9b 	bl	802ac54 <HAL_GetTick>
 803671e:	4602      	mov	r2, r0
 8036720:	683b      	ldr	r3, [r7, #0]
 8036722:	1ad3      	subs	r3, r2, r3
 8036724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8036726:	429a      	cmp	r2, r3
 8036728:	d302      	bcc.n	8036730 <UART_WaitOnFlagUntilTimeout+0x32>
 803672a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803672c:	2b00      	cmp	r3, #0
 803672e:	d140      	bne.n	80367b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036730:	68fb      	ldr	r3, [r7, #12]
 8036732:	681b      	ldr	r3, [r3, #0]
 8036734:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036738:	e853 3f00 	ldrex	r3, [r3]
 803673c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036744:	667b      	str	r3, [r7, #100]	; 0x64
 8036746:	68fb      	ldr	r3, [r7, #12]
 8036748:	681b      	ldr	r3, [r3, #0]
 803674a:	461a      	mov	r2, r3
 803674c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803674e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8036750:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8036754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8036756:	e841 2300 	strex	r3, r2, [r1]
 803675a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 803675c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803675e:	2b00      	cmp	r3, #0
 8036760:	d1e6      	bne.n	8036730 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036762:	68fb      	ldr	r3, [r7, #12]
 8036764:	681b      	ldr	r3, [r3, #0]
 8036766:	3308      	adds	r3, #8
 8036768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803676a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803676c:	e853 3f00 	ldrex	r3, [r3]
 8036770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036774:	f023 0301 	bic.w	r3, r3, #1
 8036778:	663b      	str	r3, [r7, #96]	; 0x60
 803677a:	68fb      	ldr	r3, [r7, #12]
 803677c:	681b      	ldr	r3, [r3, #0]
 803677e:	3308      	adds	r3, #8
 8036780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8036782:	64ba      	str	r2, [r7, #72]	; 0x48
 8036784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803678a:	e841 2300 	strex	r3, r2, [r1]
 803678e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8036790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8036792:	2b00      	cmp	r3, #0
 8036794:	d1e5      	bne.n	8036762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8036796:	68fb      	ldr	r3, [r7, #12]
 8036798:	2220      	movs	r2, #32
 803679a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 803679e:	68fb      	ldr	r3, [r7, #12]
 80367a0:	2220      	movs	r2, #32
 80367a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80367a6:	68fb      	ldr	r3, [r7, #12]
 80367a8:	2200      	movs	r2, #0
 80367aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80367ae:	2303      	movs	r3, #3
 80367b0:	e069      	b.n	8036886 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80367b2:	68fb      	ldr	r3, [r7, #12]
 80367b4:	681b      	ldr	r3, [r3, #0]
 80367b6:	681b      	ldr	r3, [r3, #0]
 80367b8:	f003 0304 	and.w	r3, r3, #4
 80367bc:	2b00      	cmp	r3, #0
 80367be:	d051      	beq.n	8036864 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80367c0:	68fb      	ldr	r3, [r7, #12]
 80367c2:	681b      	ldr	r3, [r3, #0]
 80367c4:	69db      	ldr	r3, [r3, #28]
 80367c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80367ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80367ce:	d149      	bne.n	8036864 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80367d0:	68fb      	ldr	r3, [r7, #12]
 80367d2:	681b      	ldr	r3, [r3, #0]
 80367d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80367d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80367da:	68fb      	ldr	r3, [r7, #12]
 80367dc:	681b      	ldr	r3, [r3, #0]
 80367de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80367e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80367e2:	e853 3f00 	ldrex	r3, [r3]
 80367e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80367e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80367ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80367ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80367f0:	68fb      	ldr	r3, [r7, #12]
 80367f2:	681b      	ldr	r3, [r3, #0]
 80367f4:	461a      	mov	r2, r3
 80367f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80367f8:	637b      	str	r3, [r7, #52]	; 0x34
 80367fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80367fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80367fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036800:	e841 2300 	strex	r3, r2, [r1]
 8036804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8036806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036808:	2b00      	cmp	r3, #0
 803680a:	d1e6      	bne.n	80367da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803680c:	68fb      	ldr	r3, [r7, #12]
 803680e:	681b      	ldr	r3, [r3, #0]
 8036810:	3308      	adds	r3, #8
 8036812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036814:	697b      	ldr	r3, [r7, #20]
 8036816:	e853 3f00 	ldrex	r3, [r3]
 803681a:	613b      	str	r3, [r7, #16]
   return(result);
 803681c:	693b      	ldr	r3, [r7, #16]
 803681e:	f023 0301 	bic.w	r3, r3, #1
 8036822:	66bb      	str	r3, [r7, #104]	; 0x68
 8036824:	68fb      	ldr	r3, [r7, #12]
 8036826:	681b      	ldr	r3, [r3, #0]
 8036828:	3308      	adds	r3, #8
 803682a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 803682c:	623a      	str	r2, [r7, #32]
 803682e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036830:	69f9      	ldr	r1, [r7, #28]
 8036832:	6a3a      	ldr	r2, [r7, #32]
 8036834:	e841 2300 	strex	r3, r2, [r1]
 8036838:	61bb      	str	r3, [r7, #24]
   return(result);
 803683a:	69bb      	ldr	r3, [r7, #24]
 803683c:	2b00      	cmp	r3, #0
 803683e:	d1e5      	bne.n	803680c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8036840:	68fb      	ldr	r3, [r7, #12]
 8036842:	2220      	movs	r2, #32
 8036844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8036848:	68fb      	ldr	r3, [r7, #12]
 803684a:	2220      	movs	r2, #32
 803684c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8036850:	68fb      	ldr	r3, [r7, #12]
 8036852:	2220      	movs	r2, #32
 8036854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8036858:	68fb      	ldr	r3, [r7, #12]
 803685a:	2200      	movs	r2, #0
 803685c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8036860:	2303      	movs	r3, #3
 8036862:	e010      	b.n	8036886 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036864:	68fb      	ldr	r3, [r7, #12]
 8036866:	681b      	ldr	r3, [r3, #0]
 8036868:	69da      	ldr	r2, [r3, #28]
 803686a:	68bb      	ldr	r3, [r7, #8]
 803686c:	4013      	ands	r3, r2
 803686e:	68ba      	ldr	r2, [r7, #8]
 8036870:	429a      	cmp	r2, r3
 8036872:	bf0c      	ite	eq
 8036874:	2301      	moveq	r3, #1
 8036876:	2300      	movne	r3, #0
 8036878:	b2db      	uxtb	r3, r3
 803687a:	461a      	mov	r2, r3
 803687c:	79fb      	ldrb	r3, [r7, #7]
 803687e:	429a      	cmp	r2, r3
 8036880:	f43f af46 	beq.w	8036710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8036884:	2300      	movs	r3, #0
}
 8036886:	4618      	mov	r0, r3
 8036888:	3770      	adds	r7, #112	; 0x70
 803688a:	46bd      	mov	sp, r7
 803688c:	bd80      	pop	{r7, pc}
	...

08036890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8036890:	b480      	push	{r7}
 8036892:	b0a3      	sub	sp, #140	; 0x8c
 8036894:	af00      	add	r7, sp, #0
 8036896:	60f8      	str	r0, [r7, #12]
 8036898:	60b9      	str	r1, [r7, #8]
 803689a:	4613      	mov	r3, r2
 803689c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 803689e:	68fb      	ldr	r3, [r7, #12]
 80368a0:	68ba      	ldr	r2, [r7, #8]
 80368a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80368a4:	68fb      	ldr	r3, [r7, #12]
 80368a6:	88fa      	ldrh	r2, [r7, #6]
 80368a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80368ac:	68fb      	ldr	r3, [r7, #12]
 80368ae:	88fa      	ldrh	r2, [r7, #6]
 80368b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80368b4:	68fb      	ldr	r3, [r7, #12]
 80368b6:	2200      	movs	r2, #0
 80368b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80368ba:	68fb      	ldr	r3, [r7, #12]
 80368bc:	689b      	ldr	r3, [r3, #8]
 80368be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80368c2:	d10e      	bne.n	80368e2 <UART_Start_Receive_IT+0x52>
 80368c4:	68fb      	ldr	r3, [r7, #12]
 80368c6:	691b      	ldr	r3, [r3, #16]
 80368c8:	2b00      	cmp	r3, #0
 80368ca:	d105      	bne.n	80368d8 <UART_Start_Receive_IT+0x48>
 80368cc:	68fb      	ldr	r3, [r7, #12]
 80368ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80368d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80368d6:	e02d      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 80368d8:	68fb      	ldr	r3, [r7, #12]
 80368da:	22ff      	movs	r2, #255	; 0xff
 80368dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80368e0:	e028      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 80368e2:	68fb      	ldr	r3, [r7, #12]
 80368e4:	689b      	ldr	r3, [r3, #8]
 80368e6:	2b00      	cmp	r3, #0
 80368e8:	d10d      	bne.n	8036906 <UART_Start_Receive_IT+0x76>
 80368ea:	68fb      	ldr	r3, [r7, #12]
 80368ec:	691b      	ldr	r3, [r3, #16]
 80368ee:	2b00      	cmp	r3, #0
 80368f0:	d104      	bne.n	80368fc <UART_Start_Receive_IT+0x6c>
 80368f2:	68fb      	ldr	r3, [r7, #12]
 80368f4:	22ff      	movs	r2, #255	; 0xff
 80368f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80368fa:	e01b      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 80368fc:	68fb      	ldr	r3, [r7, #12]
 80368fe:	227f      	movs	r2, #127	; 0x7f
 8036900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036904:	e016      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 8036906:	68fb      	ldr	r3, [r7, #12]
 8036908:	689b      	ldr	r3, [r3, #8]
 803690a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803690e:	d10d      	bne.n	803692c <UART_Start_Receive_IT+0x9c>
 8036910:	68fb      	ldr	r3, [r7, #12]
 8036912:	691b      	ldr	r3, [r3, #16]
 8036914:	2b00      	cmp	r3, #0
 8036916:	d104      	bne.n	8036922 <UART_Start_Receive_IT+0x92>
 8036918:	68fb      	ldr	r3, [r7, #12]
 803691a:	227f      	movs	r2, #127	; 0x7f
 803691c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036920:	e008      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 8036922:	68fb      	ldr	r3, [r7, #12]
 8036924:	223f      	movs	r2, #63	; 0x3f
 8036926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803692a:	e003      	b.n	8036934 <UART_Start_Receive_IT+0xa4>
 803692c:	68fb      	ldr	r3, [r7, #12]
 803692e:	2200      	movs	r2, #0
 8036930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036934:	68fb      	ldr	r3, [r7, #12]
 8036936:	2200      	movs	r2, #0
 8036938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 803693c:	68fb      	ldr	r3, [r7, #12]
 803693e:	2222      	movs	r2, #34	; 0x22
 8036940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036944:	68fb      	ldr	r3, [r7, #12]
 8036946:	681b      	ldr	r3, [r3, #0]
 8036948:	3308      	adds	r3, #8
 803694a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803694c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803694e:	e853 3f00 	ldrex	r3, [r3]
 8036952:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8036954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8036956:	f043 0301 	orr.w	r3, r3, #1
 803695a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803695e:	68fb      	ldr	r3, [r7, #12]
 8036960:	681b      	ldr	r3, [r3, #0]
 8036962:	3308      	adds	r3, #8
 8036964:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8036968:	673a      	str	r2, [r7, #112]	; 0x70
 803696a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803696c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 803696e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8036970:	e841 2300 	strex	r3, r2, [r1]
 8036974:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8036976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8036978:	2b00      	cmp	r3, #0
 803697a:	d1e3      	bne.n	8036944 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 803697c:	68fb      	ldr	r3, [r7, #12]
 803697e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8036980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8036984:	d153      	bne.n	8036a2e <UART_Start_Receive_IT+0x19e>
 8036986:	68fb      	ldr	r3, [r7, #12]
 8036988:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803698c:	88fa      	ldrh	r2, [r7, #6]
 803698e:	429a      	cmp	r2, r3
 8036990:	d34d      	bcc.n	8036a2e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036992:	68fb      	ldr	r3, [r7, #12]
 8036994:	689b      	ldr	r3, [r3, #8]
 8036996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803699a:	d107      	bne.n	80369ac <UART_Start_Receive_IT+0x11c>
 803699c:	68fb      	ldr	r3, [r7, #12]
 803699e:	691b      	ldr	r3, [r3, #16]
 80369a0:	2b00      	cmp	r3, #0
 80369a2:	d103      	bne.n	80369ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80369a4:	68fb      	ldr	r3, [r7, #12]
 80369a6:	4a4b      	ldr	r2, [pc, #300]	; (8036ad4 <UART_Start_Receive_IT+0x244>)
 80369a8:	671a      	str	r2, [r3, #112]	; 0x70
 80369aa:	e002      	b.n	80369b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80369ac:	68fb      	ldr	r3, [r7, #12]
 80369ae:	4a4a      	ldr	r2, [pc, #296]	; (8036ad8 <UART_Start_Receive_IT+0x248>)
 80369b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80369b2:	68fb      	ldr	r3, [r7, #12]
 80369b4:	2200      	movs	r2, #0
 80369b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80369ba:	68fb      	ldr	r3, [r7, #12]
 80369bc:	691b      	ldr	r3, [r3, #16]
 80369be:	2b00      	cmp	r3, #0
 80369c0:	d01a      	beq.n	80369f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80369c2:	68fb      	ldr	r3, [r7, #12]
 80369c4:	681b      	ldr	r3, [r3, #0]
 80369c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80369ca:	e853 3f00 	ldrex	r3, [r3]
 80369ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80369d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80369d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80369d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80369da:	68fb      	ldr	r3, [r7, #12]
 80369dc:	681b      	ldr	r3, [r3, #0]
 80369de:	461a      	mov	r2, r3
 80369e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80369e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80369e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80369ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80369ec:	e841 2300 	strex	r3, r2, [r1]
 80369f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80369f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80369f4:	2b00      	cmp	r3, #0
 80369f6:	d1e4      	bne.n	80369c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80369f8:	68fb      	ldr	r3, [r7, #12]
 80369fa:	681b      	ldr	r3, [r3, #0]
 80369fc:	3308      	adds	r3, #8
 80369fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036a02:	e853 3f00 	ldrex	r3, [r3]
 8036a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8036a10:	68fb      	ldr	r3, [r7, #12]
 8036a12:	681b      	ldr	r3, [r3, #0]
 8036a14:	3308      	adds	r3, #8
 8036a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8036a18:	64ba      	str	r2, [r7, #72]	; 0x48
 8036a1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036a20:	e841 2300 	strex	r3, r2, [r1]
 8036a24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8036a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8036a28:	2b00      	cmp	r3, #0
 8036a2a:	d1e5      	bne.n	80369f8 <UART_Start_Receive_IT+0x168>
 8036a2c:	e04a      	b.n	8036ac4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036a2e:	68fb      	ldr	r3, [r7, #12]
 8036a30:	689b      	ldr	r3, [r3, #8]
 8036a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a36:	d107      	bne.n	8036a48 <UART_Start_Receive_IT+0x1b8>
 8036a38:	68fb      	ldr	r3, [r7, #12]
 8036a3a:	691b      	ldr	r3, [r3, #16]
 8036a3c:	2b00      	cmp	r3, #0
 8036a3e:	d103      	bne.n	8036a48 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8036a40:	68fb      	ldr	r3, [r7, #12]
 8036a42:	4a26      	ldr	r2, [pc, #152]	; (8036adc <UART_Start_Receive_IT+0x24c>)
 8036a44:	671a      	str	r2, [r3, #112]	; 0x70
 8036a46:	e002      	b.n	8036a4e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8036a48:	68fb      	ldr	r3, [r7, #12]
 8036a4a:	4a25      	ldr	r2, [pc, #148]	; (8036ae0 <UART_Start_Receive_IT+0x250>)
 8036a4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036a4e:	68fb      	ldr	r3, [r7, #12]
 8036a50:	2200      	movs	r2, #0
 8036a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8036a56:	68fb      	ldr	r3, [r7, #12]
 8036a58:	691b      	ldr	r3, [r3, #16]
 8036a5a:	2b00      	cmp	r3, #0
 8036a5c:	d019      	beq.n	8036a92 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8036a5e:	68fb      	ldr	r3, [r7, #12]
 8036a60:	681b      	ldr	r3, [r3, #0]
 8036a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036a66:	e853 3f00 	ldrex	r3, [r3]
 8036a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036a6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8036a72:	677b      	str	r3, [r7, #116]	; 0x74
 8036a74:	68fb      	ldr	r3, [r7, #12]
 8036a76:	681b      	ldr	r3, [r3, #0]
 8036a78:	461a      	mov	r2, r3
 8036a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8036a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8036a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036a84:	e841 2300 	strex	r3, r2, [r1]
 8036a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8036a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036a8c:	2b00      	cmp	r3, #0
 8036a8e:	d1e6      	bne.n	8036a5e <UART_Start_Receive_IT+0x1ce>
 8036a90:	e018      	b.n	8036ac4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8036a92:	68fb      	ldr	r3, [r7, #12]
 8036a94:	681b      	ldr	r3, [r3, #0]
 8036a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a98:	697b      	ldr	r3, [r7, #20]
 8036a9a:	e853 3f00 	ldrex	r3, [r3]
 8036a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8036aa0:	693b      	ldr	r3, [r7, #16]
 8036aa2:	f043 0320 	orr.w	r3, r3, #32
 8036aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8036aa8:	68fb      	ldr	r3, [r7, #12]
 8036aaa:	681b      	ldr	r3, [r3, #0]
 8036aac:	461a      	mov	r2, r3
 8036aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036ab0:	623b      	str	r3, [r7, #32]
 8036ab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ab4:	69f9      	ldr	r1, [r7, #28]
 8036ab6:	6a3a      	ldr	r2, [r7, #32]
 8036ab8:	e841 2300 	strex	r3, r2, [r1]
 8036abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8036abe:	69bb      	ldr	r3, [r7, #24]
 8036ac0:	2b00      	cmp	r3, #0
 8036ac2:	d1e6      	bne.n	8036a92 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8036ac4:	2300      	movs	r3, #0
}
 8036ac6:	4618      	mov	r0, r3
 8036ac8:	378c      	adds	r7, #140	; 0x8c
 8036aca:	46bd      	mov	sp, r7
 8036acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ad0:	4770      	bx	lr
 8036ad2:	bf00      	nop
 8036ad4:	08037531 	.word	0x08037531
 8036ad8:	08037239 	.word	0x08037239
 8036adc:	080370d7 	.word	0x080370d7
 8036ae0:	08036f77 	.word	0x08036f77

08036ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036ae4:	b480      	push	{r7}
 8036ae6:	b095      	sub	sp, #84	; 0x54
 8036ae8:	af00      	add	r7, sp, #0
 8036aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036aec:	687b      	ldr	r3, [r7, #4]
 8036aee:	681b      	ldr	r3, [r3, #0]
 8036af0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036af4:	e853 3f00 	ldrex	r3, [r3]
 8036af8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036b02:	687b      	ldr	r3, [r7, #4]
 8036b04:	681b      	ldr	r3, [r3, #0]
 8036b06:	461a      	mov	r2, r3
 8036b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8036b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036b12:	e841 2300 	strex	r3, r2, [r1]
 8036b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b1a:	2b00      	cmp	r3, #0
 8036b1c:	d1e6      	bne.n	8036aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036b1e:	687b      	ldr	r3, [r7, #4]
 8036b20:	681b      	ldr	r3, [r3, #0]
 8036b22:	3308      	adds	r3, #8
 8036b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b26:	6a3b      	ldr	r3, [r7, #32]
 8036b28:	e853 3f00 	ldrex	r3, [r3]
 8036b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8036b2e:	69fa      	ldr	r2, [r7, #28]
 8036b30:	4b1e      	ldr	r3, [pc, #120]	; (8036bac <UART_EndRxTransfer+0xc8>)
 8036b32:	4013      	ands	r3, r2
 8036b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8036b36:	687b      	ldr	r3, [r7, #4]
 8036b38:	681b      	ldr	r3, [r3, #0]
 8036b3a:	3308      	adds	r3, #8
 8036b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036b46:	e841 2300 	strex	r3, r2, [r1]
 8036b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036b4e:	2b00      	cmp	r3, #0
 8036b50:	d1e5      	bne.n	8036b1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036b52:	687b      	ldr	r3, [r7, #4]
 8036b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036b56:	2b01      	cmp	r3, #1
 8036b58:	d118      	bne.n	8036b8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036b5a:	687b      	ldr	r3, [r7, #4]
 8036b5c:	681b      	ldr	r3, [r3, #0]
 8036b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b60:	68fb      	ldr	r3, [r7, #12]
 8036b62:	e853 3f00 	ldrex	r3, [r3]
 8036b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8036b68:	68bb      	ldr	r3, [r7, #8]
 8036b6a:	f023 0310 	bic.w	r3, r3, #16
 8036b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8036b70:	687b      	ldr	r3, [r7, #4]
 8036b72:	681b      	ldr	r3, [r3, #0]
 8036b74:	461a      	mov	r2, r3
 8036b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8036b78:	61bb      	str	r3, [r7, #24]
 8036b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b7c:	6979      	ldr	r1, [r7, #20]
 8036b7e:	69ba      	ldr	r2, [r7, #24]
 8036b80:	e841 2300 	strex	r3, r2, [r1]
 8036b84:	613b      	str	r3, [r7, #16]
   return(result);
 8036b86:	693b      	ldr	r3, [r7, #16]
 8036b88:	2b00      	cmp	r3, #0
 8036b8a:	d1e6      	bne.n	8036b5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036b8c:	687b      	ldr	r3, [r7, #4]
 8036b8e:	2220      	movs	r2, #32
 8036b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036b94:	687b      	ldr	r3, [r7, #4]
 8036b96:	2200      	movs	r2, #0
 8036b98:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8036b9a:	687b      	ldr	r3, [r7, #4]
 8036b9c:	2200      	movs	r2, #0
 8036b9e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8036ba0:	bf00      	nop
 8036ba2:	3754      	adds	r7, #84	; 0x54
 8036ba4:	46bd      	mov	sp, r7
 8036ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036baa:	4770      	bx	lr
 8036bac:	effffffe 	.word	0xeffffffe

08036bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036bb0:	b580      	push	{r7, lr}
 8036bb2:	b084      	sub	sp, #16
 8036bb4:	af00      	add	r7, sp, #0
 8036bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8036bb8:	687b      	ldr	r3, [r7, #4]
 8036bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8036bbe:	68fb      	ldr	r3, [r7, #12]
 8036bc0:	2200      	movs	r2, #0
 8036bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8036bc6:	68fb      	ldr	r3, [r7, #12]
 8036bc8:	2200      	movs	r2, #0
 8036bca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036bce:	68f8      	ldr	r0, [r7, #12]
 8036bd0:	f7fe ff2a 	bl	8035a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036bd4:	bf00      	nop
 8036bd6:	3710      	adds	r7, #16
 8036bd8:	46bd      	mov	sp, r7
 8036bda:	bd80      	pop	{r7, pc}

08036bdc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036bdc:	b480      	push	{r7}
 8036bde:	b08f      	sub	sp, #60	; 0x3c
 8036be0:	af00      	add	r7, sp, #0
 8036be2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036be4:	687b      	ldr	r3, [r7, #4]
 8036be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036bea:	2b21      	cmp	r3, #33	; 0x21
 8036bec:	d14c      	bne.n	8036c88 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8036bee:	687b      	ldr	r3, [r7, #4]
 8036bf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036bf4:	b29b      	uxth	r3, r3
 8036bf6:	2b00      	cmp	r3, #0
 8036bf8:	d132      	bne.n	8036c60 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036bfa:	687b      	ldr	r3, [r7, #4]
 8036bfc:	681b      	ldr	r3, [r3, #0]
 8036bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c00:	6a3b      	ldr	r3, [r7, #32]
 8036c02:	e853 3f00 	ldrex	r3, [r3]
 8036c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8036c08:	69fb      	ldr	r3, [r7, #28]
 8036c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8036c10:	687b      	ldr	r3, [r7, #4]
 8036c12:	681b      	ldr	r3, [r3, #0]
 8036c14:	461a      	mov	r2, r3
 8036c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036c1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036c20:	e841 2300 	strex	r3, r2, [r1]
 8036c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036c28:	2b00      	cmp	r3, #0
 8036c2a:	d1e6      	bne.n	8036bfa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036c2c:	687b      	ldr	r3, [r7, #4]
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c32:	68fb      	ldr	r3, [r7, #12]
 8036c34:	e853 3f00 	ldrex	r3, [r3]
 8036c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8036c3a:	68bb      	ldr	r3, [r7, #8]
 8036c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036c40:	633b      	str	r3, [r7, #48]	; 0x30
 8036c42:	687b      	ldr	r3, [r7, #4]
 8036c44:	681b      	ldr	r3, [r3, #0]
 8036c46:	461a      	mov	r2, r3
 8036c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c4a:	61bb      	str	r3, [r7, #24]
 8036c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c4e:	6979      	ldr	r1, [r7, #20]
 8036c50:	69ba      	ldr	r2, [r7, #24]
 8036c52:	e841 2300 	strex	r3, r2, [r1]
 8036c56:	613b      	str	r3, [r7, #16]
   return(result);
 8036c58:	693b      	ldr	r3, [r7, #16]
 8036c5a:	2b00      	cmp	r3, #0
 8036c5c:	d1e6      	bne.n	8036c2c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8036c5e:	e013      	b.n	8036c88 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036c60:	687b      	ldr	r3, [r7, #4]
 8036c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c64:	781a      	ldrb	r2, [r3, #0]
 8036c66:	687b      	ldr	r3, [r7, #4]
 8036c68:	681b      	ldr	r3, [r3, #0]
 8036c6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8036c6c:	687b      	ldr	r3, [r7, #4]
 8036c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c70:	1c5a      	adds	r2, r3, #1
 8036c72:	687b      	ldr	r3, [r7, #4]
 8036c74:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036c76:	687b      	ldr	r3, [r7, #4]
 8036c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c7c:	b29b      	uxth	r3, r3
 8036c7e:	3b01      	subs	r3, #1
 8036c80:	b29a      	uxth	r2, r3
 8036c82:	687b      	ldr	r3, [r7, #4]
 8036c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036c88:	bf00      	nop
 8036c8a:	373c      	adds	r7, #60	; 0x3c
 8036c8c:	46bd      	mov	sp, r7
 8036c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c92:	4770      	bx	lr

08036c94 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036c94:	b480      	push	{r7}
 8036c96:	b091      	sub	sp, #68	; 0x44
 8036c98:	af00      	add	r7, sp, #0
 8036c9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036c9c:	687b      	ldr	r3, [r7, #4]
 8036c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036ca2:	2b21      	cmp	r3, #33	; 0x21
 8036ca4:	d151      	bne.n	8036d4a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8036ca6:	687b      	ldr	r3, [r7, #4]
 8036ca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036cac:	b29b      	uxth	r3, r3
 8036cae:	2b00      	cmp	r3, #0
 8036cb0:	d132      	bne.n	8036d18 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036cb2:	687b      	ldr	r3, [r7, #4]
 8036cb4:	681b      	ldr	r3, [r3, #0]
 8036cb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036cba:	e853 3f00 	ldrex	r3, [r3]
 8036cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8036cc0:	6a3b      	ldr	r3, [r7, #32]
 8036cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8036cc8:	687b      	ldr	r3, [r7, #4]
 8036cca:	681b      	ldr	r3, [r3, #0]
 8036ccc:	461a      	mov	r2, r3
 8036cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8036cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036cd8:	e841 2300 	strex	r3, r2, [r1]
 8036cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036ce0:	2b00      	cmp	r3, #0
 8036ce2:	d1e6      	bne.n	8036cb2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036ce4:	687b      	ldr	r3, [r7, #4]
 8036ce6:	681b      	ldr	r3, [r3, #0]
 8036ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036cea:	693b      	ldr	r3, [r7, #16]
 8036cec:	e853 3f00 	ldrex	r3, [r3]
 8036cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8036cf2:	68fb      	ldr	r3, [r7, #12]
 8036cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8036cfa:	687b      	ldr	r3, [r7, #4]
 8036cfc:	681b      	ldr	r3, [r3, #0]
 8036cfe:	461a      	mov	r2, r3
 8036d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d02:	61fb      	str	r3, [r7, #28]
 8036d04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d06:	69b9      	ldr	r1, [r7, #24]
 8036d08:	69fa      	ldr	r2, [r7, #28]
 8036d0a:	e841 2300 	strex	r3, r2, [r1]
 8036d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8036d10:	697b      	ldr	r3, [r7, #20]
 8036d12:	2b00      	cmp	r3, #0
 8036d14:	d1e6      	bne.n	8036ce4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8036d16:	e018      	b.n	8036d4a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036d18:	687b      	ldr	r3, [r7, #4]
 8036d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036d20:	881b      	ldrh	r3, [r3, #0]
 8036d22:	461a      	mov	r2, r3
 8036d24:	687b      	ldr	r3, [r7, #4]
 8036d26:	681b      	ldr	r3, [r3, #0]
 8036d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036d2c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8036d2e:	687b      	ldr	r3, [r7, #4]
 8036d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d32:	1c9a      	adds	r2, r3, #2
 8036d34:	687b      	ldr	r3, [r7, #4]
 8036d36:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036d38:	687b      	ldr	r3, [r7, #4]
 8036d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d3e:	b29b      	uxth	r3, r3
 8036d40:	3b01      	subs	r3, #1
 8036d42:	b29a      	uxth	r2, r3
 8036d44:	687b      	ldr	r3, [r7, #4]
 8036d46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036d4a:	bf00      	nop
 8036d4c:	3744      	adds	r7, #68	; 0x44
 8036d4e:	46bd      	mov	sp, r7
 8036d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d54:	4770      	bx	lr

08036d56 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036d56:	b480      	push	{r7}
 8036d58:	b091      	sub	sp, #68	; 0x44
 8036d5a:	af00      	add	r7, sp, #0
 8036d5c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036d5e:	687b      	ldr	r3, [r7, #4]
 8036d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036d64:	2b21      	cmp	r3, #33	; 0x21
 8036d66:	d160      	bne.n	8036e2a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036d68:	687b      	ldr	r3, [r7, #4]
 8036d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036d6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036d70:	e057      	b.n	8036e22 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8036d72:	687b      	ldr	r3, [r7, #4]
 8036d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d78:	b29b      	uxth	r3, r3
 8036d7a:	2b00      	cmp	r3, #0
 8036d7c:	d133      	bne.n	8036de6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036d7e:	687b      	ldr	r3, [r7, #4]
 8036d80:	681b      	ldr	r3, [r3, #0]
 8036d82:	3308      	adds	r3, #8
 8036d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036d88:	e853 3f00 	ldrex	r3, [r3]
 8036d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8036d8e:	6a3b      	ldr	r3, [r7, #32]
 8036d90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8036d96:	687b      	ldr	r3, [r7, #4]
 8036d98:	681b      	ldr	r3, [r3, #0]
 8036d9a:	3308      	adds	r3, #8
 8036d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036d9e:	633a      	str	r2, [r7, #48]	; 0x30
 8036da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036da6:	e841 2300 	strex	r3, r2, [r1]
 8036daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036dae:	2b00      	cmp	r3, #0
 8036db0:	d1e5      	bne.n	8036d7e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036db2:	687b      	ldr	r3, [r7, #4]
 8036db4:	681b      	ldr	r3, [r3, #0]
 8036db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036db8:	693b      	ldr	r3, [r7, #16]
 8036dba:	e853 3f00 	ldrex	r3, [r3]
 8036dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8036dc0:	68fb      	ldr	r3, [r7, #12]
 8036dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8036dc8:	687b      	ldr	r3, [r7, #4]
 8036dca:	681b      	ldr	r3, [r3, #0]
 8036dcc:	461a      	mov	r2, r3
 8036dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036dd0:	61fb      	str	r3, [r7, #28]
 8036dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036dd4:	69b9      	ldr	r1, [r7, #24]
 8036dd6:	69fa      	ldr	r2, [r7, #28]
 8036dd8:	e841 2300 	strex	r3, r2, [r1]
 8036ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8036dde:	697b      	ldr	r3, [r7, #20]
 8036de0:	2b00      	cmp	r3, #0
 8036de2:	d1e6      	bne.n	8036db2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036de4:	e021      	b.n	8036e2a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036de6:	687b      	ldr	r3, [r7, #4]
 8036de8:	681b      	ldr	r3, [r3, #0]
 8036dea:	69db      	ldr	r3, [r3, #28]
 8036dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036df0:	2b00      	cmp	r3, #0
 8036df2:	d013      	beq.n	8036e1c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036df4:	687b      	ldr	r3, [r7, #4]
 8036df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036df8:	781a      	ldrb	r2, [r3, #0]
 8036dfa:	687b      	ldr	r3, [r7, #4]
 8036dfc:	681b      	ldr	r3, [r3, #0]
 8036dfe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8036e00:	687b      	ldr	r3, [r7, #4]
 8036e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e04:	1c5a      	adds	r2, r3, #1
 8036e06:	687b      	ldr	r3, [r7, #4]
 8036e08:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036e0a:	687b      	ldr	r3, [r7, #4]
 8036e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e10:	b29b      	uxth	r3, r3
 8036e12:	3b01      	subs	r3, #1
 8036e14:	b29a      	uxth	r2, r3
 8036e16:	687b      	ldr	r3, [r7, #4]
 8036e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e1e:	3b01      	subs	r3, #1
 8036e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e24:	2b00      	cmp	r3, #0
 8036e26:	d1a4      	bne.n	8036d72 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036e28:	e7ff      	b.n	8036e2a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8036e2a:	bf00      	nop
 8036e2c:	3744      	adds	r7, #68	; 0x44
 8036e2e:	46bd      	mov	sp, r7
 8036e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e34:	4770      	bx	lr

08036e36 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036e36:	b480      	push	{r7}
 8036e38:	b091      	sub	sp, #68	; 0x44
 8036e3a:	af00      	add	r7, sp, #0
 8036e3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036e3e:	687b      	ldr	r3, [r7, #4]
 8036e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036e44:	2b21      	cmp	r3, #33	; 0x21
 8036e46:	d165      	bne.n	8036f14 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e48:	687b      	ldr	r3, [r7, #4]
 8036e4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036e4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e50:	e05c      	b.n	8036f0c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8036e52:	687b      	ldr	r3, [r7, #4]
 8036e54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e58:	b29b      	uxth	r3, r3
 8036e5a:	2b00      	cmp	r3, #0
 8036e5c:	d133      	bne.n	8036ec6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036e5e:	687b      	ldr	r3, [r7, #4]
 8036e60:	681b      	ldr	r3, [r3, #0]
 8036e62:	3308      	adds	r3, #8
 8036e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e66:	6a3b      	ldr	r3, [r7, #32]
 8036e68:	e853 3f00 	ldrex	r3, [r3]
 8036e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8036e6e:	69fb      	ldr	r3, [r7, #28]
 8036e70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036e74:	637b      	str	r3, [r7, #52]	; 0x34
 8036e76:	687b      	ldr	r3, [r7, #4]
 8036e78:	681b      	ldr	r3, [r3, #0]
 8036e7a:	3308      	adds	r3, #8
 8036e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036e86:	e841 2300 	strex	r3, r2, [r1]
 8036e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036e8e:	2b00      	cmp	r3, #0
 8036e90:	d1e5      	bne.n	8036e5e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036e92:	687b      	ldr	r3, [r7, #4]
 8036e94:	681b      	ldr	r3, [r3, #0]
 8036e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e98:	68fb      	ldr	r3, [r7, #12]
 8036e9a:	e853 3f00 	ldrex	r3, [r3]
 8036e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8036ea0:	68bb      	ldr	r3, [r7, #8]
 8036ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8036ea8:	687b      	ldr	r3, [r7, #4]
 8036eaa:	681b      	ldr	r3, [r3, #0]
 8036eac:	461a      	mov	r2, r3
 8036eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036eb0:	61bb      	str	r3, [r7, #24]
 8036eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036eb4:	6979      	ldr	r1, [r7, #20]
 8036eb6:	69ba      	ldr	r2, [r7, #24]
 8036eb8:	e841 2300 	strex	r3, r2, [r1]
 8036ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8036ebe:	693b      	ldr	r3, [r7, #16]
 8036ec0:	2b00      	cmp	r3, #0
 8036ec2:	d1e6      	bne.n	8036e92 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036ec4:	e026      	b.n	8036f14 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036ec6:	687b      	ldr	r3, [r7, #4]
 8036ec8:	681b      	ldr	r3, [r3, #0]
 8036eca:	69db      	ldr	r3, [r3, #28]
 8036ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036ed0:	2b00      	cmp	r3, #0
 8036ed2:	d018      	beq.n	8036f06 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036ed4:	687b      	ldr	r3, [r7, #4]
 8036ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036ed8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036edc:	881b      	ldrh	r3, [r3, #0]
 8036ede:	461a      	mov	r2, r3
 8036ee0:	687b      	ldr	r3, [r7, #4]
 8036ee2:	681b      	ldr	r3, [r3, #0]
 8036ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036ee8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8036eea:	687b      	ldr	r3, [r7, #4]
 8036eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036eee:	1c9a      	adds	r2, r3, #2
 8036ef0:	687b      	ldr	r3, [r7, #4]
 8036ef2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036ef4:	687b      	ldr	r3, [r7, #4]
 8036ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036efa:	b29b      	uxth	r3, r3
 8036efc:	3b01      	subs	r3, #1
 8036efe:	b29a      	uxth	r2, r3
 8036f00:	687b      	ldr	r3, [r7, #4]
 8036f02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036f06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f08:	3b01      	subs	r3, #1
 8036f0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036f0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f0e:	2b00      	cmp	r3, #0
 8036f10:	d19f      	bne.n	8036e52 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036f12:	e7ff      	b.n	8036f14 <UART_TxISR_16BIT_FIFOEN+0xde>
 8036f14:	bf00      	nop
 8036f16:	3744      	adds	r7, #68	; 0x44
 8036f18:	46bd      	mov	sp, r7
 8036f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f1e:	4770      	bx	lr

08036f20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036f20:	b580      	push	{r7, lr}
 8036f22:	b088      	sub	sp, #32
 8036f24:	af00      	add	r7, sp, #0
 8036f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036f28:	687b      	ldr	r3, [r7, #4]
 8036f2a:	681b      	ldr	r3, [r3, #0]
 8036f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f2e:	68fb      	ldr	r3, [r7, #12]
 8036f30:	e853 3f00 	ldrex	r3, [r3]
 8036f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8036f36:	68bb      	ldr	r3, [r7, #8]
 8036f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036f3c:	61fb      	str	r3, [r7, #28]
 8036f3e:	687b      	ldr	r3, [r7, #4]
 8036f40:	681b      	ldr	r3, [r3, #0]
 8036f42:	461a      	mov	r2, r3
 8036f44:	69fb      	ldr	r3, [r7, #28]
 8036f46:	61bb      	str	r3, [r7, #24]
 8036f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f4a:	6979      	ldr	r1, [r7, #20]
 8036f4c:	69ba      	ldr	r2, [r7, #24]
 8036f4e:	e841 2300 	strex	r3, r2, [r1]
 8036f52:	613b      	str	r3, [r7, #16]
   return(result);
 8036f54:	693b      	ldr	r3, [r7, #16]
 8036f56:	2b00      	cmp	r3, #0
 8036f58:	d1e6      	bne.n	8036f28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036f5a:	687b      	ldr	r3, [r7, #4]
 8036f5c:	2220      	movs	r2, #32
 8036f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8036f62:	687b      	ldr	r3, [r7, #4]
 8036f64:	2200      	movs	r2, #0
 8036f66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036f68:	6878      	ldr	r0, [r7, #4]
 8036f6a:	f7f2 fd81 	bl	8029a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036f6e:	bf00      	nop
 8036f70:	3720      	adds	r7, #32
 8036f72:	46bd      	mov	sp, r7
 8036f74:	bd80      	pop	{r7, pc}

08036f76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036f76:	b580      	push	{r7, lr}
 8036f78:	b096      	sub	sp, #88	; 0x58
 8036f7a:	af00      	add	r7, sp, #0
 8036f7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8036f7e:	687b      	ldr	r3, [r7, #4]
 8036f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036f84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036f88:	687b      	ldr	r3, [r7, #4]
 8036f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036f8e:	2b22      	cmp	r3, #34	; 0x22
 8036f90:	f040 8095 	bne.w	80370be <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036f94:	687b      	ldr	r3, [r7, #4]
 8036f96:	681b      	ldr	r3, [r3, #0]
 8036f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036f9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8036f9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8036fa2:	b2d9      	uxtb	r1, r3
 8036fa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8036fa8:	b2da      	uxtb	r2, r3
 8036faa:	687b      	ldr	r3, [r7, #4]
 8036fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036fae:	400a      	ands	r2, r1
 8036fb0:	b2d2      	uxtb	r2, r2
 8036fb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8036fb4:	687b      	ldr	r3, [r7, #4]
 8036fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036fb8:	1c5a      	adds	r2, r3, #1
 8036fba:	687b      	ldr	r3, [r7, #4]
 8036fbc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8036fbe:	687b      	ldr	r3, [r7, #4]
 8036fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036fc4:	b29b      	uxth	r3, r3
 8036fc6:	3b01      	subs	r3, #1
 8036fc8:	b29a      	uxth	r2, r3
 8036fca:	687b      	ldr	r3, [r7, #4]
 8036fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8036fd0:	687b      	ldr	r3, [r7, #4]
 8036fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036fd6:	b29b      	uxth	r3, r3
 8036fd8:	2b00      	cmp	r3, #0
 8036fda:	d178      	bne.n	80370ce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036fdc:	687b      	ldr	r3, [r7, #4]
 8036fde:	681b      	ldr	r3, [r3, #0]
 8036fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036fe4:	e853 3f00 	ldrex	r3, [r3]
 8036fe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8036ff2:	687b      	ldr	r3, [r7, #4]
 8036ff4:	681b      	ldr	r3, [r3, #0]
 8036ff6:	461a      	mov	r2, r3
 8036ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8036ffc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037002:	e841 2300 	strex	r3, r2, [r1]
 8037006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8037008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803700a:	2b00      	cmp	r3, #0
 803700c:	d1e6      	bne.n	8036fdc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803700e:	687b      	ldr	r3, [r7, #4]
 8037010:	681b      	ldr	r3, [r3, #0]
 8037012:	3308      	adds	r3, #8
 8037014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037018:	e853 3f00 	ldrex	r3, [r3]
 803701c:	623b      	str	r3, [r7, #32]
   return(result);
 803701e:	6a3b      	ldr	r3, [r7, #32]
 8037020:	f023 0301 	bic.w	r3, r3, #1
 8037024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037026:	687b      	ldr	r3, [r7, #4]
 8037028:	681b      	ldr	r3, [r3, #0]
 803702a:	3308      	adds	r3, #8
 803702c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803702e:	633a      	str	r2, [r7, #48]	; 0x30
 8037030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037036:	e841 2300 	strex	r3, r2, [r1]
 803703a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803703e:	2b00      	cmp	r3, #0
 8037040:	d1e5      	bne.n	803700e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8037042:	687b      	ldr	r3, [r7, #4]
 8037044:	2220      	movs	r2, #32
 8037046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803704a:	687b      	ldr	r3, [r7, #4]
 803704c:	2200      	movs	r2, #0
 803704e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037050:	687b      	ldr	r3, [r7, #4]
 8037052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037054:	2b01      	cmp	r3, #1
 8037056:	d12e      	bne.n	80370b6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037058:	687b      	ldr	r3, [r7, #4]
 803705a:	2200      	movs	r2, #0
 803705c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803705e:	687b      	ldr	r3, [r7, #4]
 8037060:	681b      	ldr	r3, [r3, #0]
 8037062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037064:	693b      	ldr	r3, [r7, #16]
 8037066:	e853 3f00 	ldrex	r3, [r3]
 803706a:	60fb      	str	r3, [r7, #12]
   return(result);
 803706c:	68fb      	ldr	r3, [r7, #12]
 803706e:	f023 0310 	bic.w	r3, r3, #16
 8037072:	64bb      	str	r3, [r7, #72]	; 0x48
 8037074:	687b      	ldr	r3, [r7, #4]
 8037076:	681b      	ldr	r3, [r3, #0]
 8037078:	461a      	mov	r2, r3
 803707a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803707c:	61fb      	str	r3, [r7, #28]
 803707e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037080:	69b9      	ldr	r1, [r7, #24]
 8037082:	69fa      	ldr	r2, [r7, #28]
 8037084:	e841 2300 	strex	r3, r2, [r1]
 8037088:	617b      	str	r3, [r7, #20]
   return(result);
 803708a:	697b      	ldr	r3, [r7, #20]
 803708c:	2b00      	cmp	r3, #0
 803708e:	d1e6      	bne.n	803705e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037090:	687b      	ldr	r3, [r7, #4]
 8037092:	681b      	ldr	r3, [r3, #0]
 8037094:	69db      	ldr	r3, [r3, #28]
 8037096:	f003 0310 	and.w	r3, r3, #16
 803709a:	2b10      	cmp	r3, #16
 803709c:	d103      	bne.n	80370a6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803709e:	687b      	ldr	r3, [r7, #4]
 80370a0:	681b      	ldr	r3, [r3, #0]
 80370a2:	2210      	movs	r2, #16
 80370a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80370a6:	687b      	ldr	r3, [r7, #4]
 80370a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80370ac:	4619      	mov	r1, r3
 80370ae:	6878      	ldr	r0, [r7, #4]
 80370b0:	f7fe fcc4 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80370b4:	e00b      	b.n	80370ce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80370b6:	6878      	ldr	r0, [r7, #4]
 80370b8:	f7f2 fcb6 	bl	8029a28 <HAL_UART_RxCpltCallback>
}
 80370bc:	e007      	b.n	80370ce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80370be:	687b      	ldr	r3, [r7, #4]
 80370c0:	681b      	ldr	r3, [r3, #0]
 80370c2:	699a      	ldr	r2, [r3, #24]
 80370c4:	687b      	ldr	r3, [r7, #4]
 80370c6:	681b      	ldr	r3, [r3, #0]
 80370c8:	f042 0208 	orr.w	r2, r2, #8
 80370cc:	619a      	str	r2, [r3, #24]
}
 80370ce:	bf00      	nop
 80370d0:	3758      	adds	r7, #88	; 0x58
 80370d2:	46bd      	mov	sp, r7
 80370d4:	bd80      	pop	{r7, pc}

080370d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80370d6:	b580      	push	{r7, lr}
 80370d8:	b096      	sub	sp, #88	; 0x58
 80370da:	af00      	add	r7, sp, #0
 80370dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80370de:	687b      	ldr	r3, [r7, #4]
 80370e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80370e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80370e8:	687b      	ldr	r3, [r7, #4]
 80370ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80370ee:	2b22      	cmp	r3, #34	; 0x22
 80370f0:	f040 8095 	bne.w	803721e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80370f4:	687b      	ldr	r3, [r7, #4]
 80370f6:	681b      	ldr	r3, [r3, #0]
 80370f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80370fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80370fe:	687b      	ldr	r3, [r7, #4]
 8037100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037102:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8037104:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8037108:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803710c:	4013      	ands	r3, r2
 803710e:	b29a      	uxth	r2, r3
 8037110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037112:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8037114:	687b      	ldr	r3, [r7, #4]
 8037116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037118:	1c9a      	adds	r2, r3, #2
 803711a:	687b      	ldr	r3, [r7, #4]
 803711c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803711e:	687b      	ldr	r3, [r7, #4]
 8037120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037124:	b29b      	uxth	r3, r3
 8037126:	3b01      	subs	r3, #1
 8037128:	b29a      	uxth	r2, r3
 803712a:	687b      	ldr	r3, [r7, #4]
 803712c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037130:	687b      	ldr	r3, [r7, #4]
 8037132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037136:	b29b      	uxth	r3, r3
 8037138:	2b00      	cmp	r3, #0
 803713a:	d178      	bne.n	803722e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803713c:	687b      	ldr	r3, [r7, #4]
 803713e:	681b      	ldr	r3, [r3, #0]
 8037140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037144:	e853 3f00 	ldrex	r3, [r3]
 8037148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803714c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8037150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037152:	687b      	ldr	r3, [r7, #4]
 8037154:	681b      	ldr	r3, [r3, #0]
 8037156:	461a      	mov	r2, r3
 8037158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803715a:	643b      	str	r3, [r7, #64]	; 0x40
 803715c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803715e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037162:	e841 2300 	strex	r3, r2, [r1]
 8037166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803716a:	2b00      	cmp	r3, #0
 803716c:	d1e6      	bne.n	803713c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803716e:	687b      	ldr	r3, [r7, #4]
 8037170:	681b      	ldr	r3, [r3, #0]
 8037172:	3308      	adds	r3, #8
 8037174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037176:	6a3b      	ldr	r3, [r7, #32]
 8037178:	e853 3f00 	ldrex	r3, [r3]
 803717c:	61fb      	str	r3, [r7, #28]
   return(result);
 803717e:	69fb      	ldr	r3, [r7, #28]
 8037180:	f023 0301 	bic.w	r3, r3, #1
 8037184:	64bb      	str	r3, [r7, #72]	; 0x48
 8037186:	687b      	ldr	r3, [r7, #4]
 8037188:	681b      	ldr	r3, [r3, #0]
 803718a:	3308      	adds	r3, #8
 803718c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803718e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8037190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8037194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8037196:	e841 2300 	strex	r3, r2, [r1]
 803719a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803719e:	2b00      	cmp	r3, #0
 80371a0:	d1e5      	bne.n	803716e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80371a2:	687b      	ldr	r3, [r7, #4]
 80371a4:	2220      	movs	r2, #32
 80371a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80371aa:	687b      	ldr	r3, [r7, #4]
 80371ac:	2200      	movs	r2, #0
 80371ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80371b0:	687b      	ldr	r3, [r7, #4]
 80371b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80371b4:	2b01      	cmp	r3, #1
 80371b6:	d12e      	bne.n	8037216 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80371b8:	687b      	ldr	r3, [r7, #4]
 80371ba:	2200      	movs	r2, #0
 80371bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80371be:	687b      	ldr	r3, [r7, #4]
 80371c0:	681b      	ldr	r3, [r3, #0]
 80371c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371c4:	68fb      	ldr	r3, [r7, #12]
 80371c6:	e853 3f00 	ldrex	r3, [r3]
 80371ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80371cc:	68bb      	ldr	r3, [r7, #8]
 80371ce:	f023 0310 	bic.w	r3, r3, #16
 80371d2:	647b      	str	r3, [r7, #68]	; 0x44
 80371d4:	687b      	ldr	r3, [r7, #4]
 80371d6:	681b      	ldr	r3, [r3, #0]
 80371d8:	461a      	mov	r2, r3
 80371da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80371dc:	61bb      	str	r3, [r7, #24]
 80371de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80371e0:	6979      	ldr	r1, [r7, #20]
 80371e2:	69ba      	ldr	r2, [r7, #24]
 80371e4:	e841 2300 	strex	r3, r2, [r1]
 80371e8:	613b      	str	r3, [r7, #16]
   return(result);
 80371ea:	693b      	ldr	r3, [r7, #16]
 80371ec:	2b00      	cmp	r3, #0
 80371ee:	d1e6      	bne.n	80371be <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80371f0:	687b      	ldr	r3, [r7, #4]
 80371f2:	681b      	ldr	r3, [r3, #0]
 80371f4:	69db      	ldr	r3, [r3, #28]
 80371f6:	f003 0310 	and.w	r3, r3, #16
 80371fa:	2b10      	cmp	r3, #16
 80371fc:	d103      	bne.n	8037206 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80371fe:	687b      	ldr	r3, [r7, #4]
 8037200:	681b      	ldr	r3, [r3, #0]
 8037202:	2210      	movs	r2, #16
 8037204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037206:	687b      	ldr	r3, [r7, #4]
 8037208:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803720c:	4619      	mov	r1, r3
 803720e:	6878      	ldr	r0, [r7, #4]
 8037210:	f7fe fc14 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037214:	e00b      	b.n	803722e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8037216:	6878      	ldr	r0, [r7, #4]
 8037218:	f7f2 fc06 	bl	8029a28 <HAL_UART_RxCpltCallback>
}
 803721c:	e007      	b.n	803722e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803721e:	687b      	ldr	r3, [r7, #4]
 8037220:	681b      	ldr	r3, [r3, #0]
 8037222:	699a      	ldr	r2, [r3, #24]
 8037224:	687b      	ldr	r3, [r7, #4]
 8037226:	681b      	ldr	r3, [r3, #0]
 8037228:	f042 0208 	orr.w	r2, r2, #8
 803722c:	619a      	str	r2, [r3, #24]
}
 803722e:	bf00      	nop
 8037230:	3758      	adds	r7, #88	; 0x58
 8037232:	46bd      	mov	sp, r7
 8037234:	bd80      	pop	{r7, pc}
	...

08037238 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037238:	b580      	push	{r7, lr}
 803723a:	b0a6      	sub	sp, #152	; 0x98
 803723c:	af00      	add	r7, sp, #0
 803723e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8037240:	687b      	ldr	r3, [r7, #4]
 8037242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037246:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803724a:	687b      	ldr	r3, [r7, #4]
 803724c:	681b      	ldr	r3, [r3, #0]
 803724e:	69db      	ldr	r3, [r3, #28]
 8037250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8037254:	687b      	ldr	r3, [r7, #4]
 8037256:	681b      	ldr	r3, [r3, #0]
 8037258:	681b      	ldr	r3, [r3, #0]
 803725a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803725e:	687b      	ldr	r3, [r7, #4]
 8037260:	681b      	ldr	r3, [r3, #0]
 8037262:	689b      	ldr	r3, [r3, #8]
 8037264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8037268:	687b      	ldr	r3, [r7, #4]
 803726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803726e:	2b22      	cmp	r3, #34	; 0x22
 8037270:	f040 814d 	bne.w	803750e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8037274:	687b      	ldr	r3, [r7, #4]
 8037276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803727a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803727e:	e0f4      	b.n	803746a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8037280:	687b      	ldr	r3, [r7, #4]
 8037282:	681b      	ldr	r3, [r3, #0]
 8037284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037286:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803728a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 803728e:	b2d9      	uxtb	r1, r3
 8037290:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8037294:	b2da      	uxtb	r2, r3
 8037296:	687b      	ldr	r3, [r7, #4]
 8037298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803729a:	400a      	ands	r2, r1
 803729c:	b2d2      	uxtb	r2, r2
 803729e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80372a0:	687b      	ldr	r3, [r7, #4]
 80372a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80372a4:	1c5a      	adds	r2, r3, #1
 80372a6:	687b      	ldr	r3, [r7, #4]
 80372a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80372aa:	687b      	ldr	r3, [r7, #4]
 80372ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80372b0:	b29b      	uxth	r3, r3
 80372b2:	3b01      	subs	r3, #1
 80372b4:	b29a      	uxth	r2, r3
 80372b6:	687b      	ldr	r3, [r7, #4]
 80372b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80372bc:	687b      	ldr	r3, [r7, #4]
 80372be:	681b      	ldr	r3, [r3, #0]
 80372c0:	69db      	ldr	r3, [r3, #28]
 80372c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80372c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80372ca:	f003 0307 	and.w	r3, r3, #7
 80372ce:	2b00      	cmp	r3, #0
 80372d0:	d053      	beq.n	803737a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80372d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80372d6:	f003 0301 	and.w	r3, r3, #1
 80372da:	2b00      	cmp	r3, #0
 80372dc:	d011      	beq.n	8037302 <UART_RxISR_8BIT_FIFOEN+0xca>
 80372de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80372e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80372e6:	2b00      	cmp	r3, #0
 80372e8:	d00b      	beq.n	8037302 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80372ea:	687b      	ldr	r3, [r7, #4]
 80372ec:	681b      	ldr	r3, [r3, #0]
 80372ee:	2201      	movs	r2, #1
 80372f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80372f2:	687b      	ldr	r3, [r7, #4]
 80372f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80372f8:	f043 0201 	orr.w	r2, r3, #1
 80372fc:	687b      	ldr	r3, [r7, #4]
 80372fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037302:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037306:	f003 0302 	and.w	r3, r3, #2
 803730a:	2b00      	cmp	r3, #0
 803730c:	d011      	beq.n	8037332 <UART_RxISR_8BIT_FIFOEN+0xfa>
 803730e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037312:	f003 0301 	and.w	r3, r3, #1
 8037316:	2b00      	cmp	r3, #0
 8037318:	d00b      	beq.n	8037332 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803731a:	687b      	ldr	r3, [r7, #4]
 803731c:	681b      	ldr	r3, [r3, #0]
 803731e:	2202      	movs	r2, #2
 8037320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037322:	687b      	ldr	r3, [r7, #4]
 8037324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037328:	f043 0204 	orr.w	r2, r3, #4
 803732c:	687b      	ldr	r3, [r7, #4]
 803732e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037336:	f003 0304 	and.w	r3, r3, #4
 803733a:	2b00      	cmp	r3, #0
 803733c:	d011      	beq.n	8037362 <UART_RxISR_8BIT_FIFOEN+0x12a>
 803733e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037342:	f003 0301 	and.w	r3, r3, #1
 8037346:	2b00      	cmp	r3, #0
 8037348:	d00b      	beq.n	8037362 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803734a:	687b      	ldr	r3, [r7, #4]
 803734c:	681b      	ldr	r3, [r3, #0]
 803734e:	2204      	movs	r2, #4
 8037350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8037352:	687b      	ldr	r3, [r7, #4]
 8037354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037358:	f043 0202 	orr.w	r2, r3, #2
 803735c:	687b      	ldr	r3, [r7, #4]
 803735e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8037362:	687b      	ldr	r3, [r7, #4]
 8037364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037368:	2b00      	cmp	r3, #0
 803736a:	d006      	beq.n	803737a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803736c:	6878      	ldr	r0, [r7, #4]
 803736e:	f7fe fb5b 	bl	8035a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8037372:	687b      	ldr	r3, [r7, #4]
 8037374:	2200      	movs	r2, #0
 8037376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803737a:	687b      	ldr	r3, [r7, #4]
 803737c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037380:	b29b      	uxth	r3, r3
 8037382:	2b00      	cmp	r3, #0
 8037384:	d171      	bne.n	803746a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8037386:	687b      	ldr	r3, [r7, #4]
 8037388:	681b      	ldr	r3, [r3, #0]
 803738a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803738c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803738e:	e853 3f00 	ldrex	r3, [r3]
 8037392:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8037394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8037396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803739a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803739e:	687b      	ldr	r3, [r7, #4]
 80373a0:	681b      	ldr	r3, [r3, #0]
 80373a2:	461a      	mov	r2, r3
 80373a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80373a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80373aa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80373ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80373ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80373b0:	e841 2300 	strex	r3, r2, [r1]
 80373b4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80373b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80373b8:	2b00      	cmp	r3, #0
 80373ba:	d1e4      	bne.n	8037386 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80373bc:	687b      	ldr	r3, [r7, #4]
 80373be:	681b      	ldr	r3, [r3, #0]
 80373c0:	3308      	adds	r3, #8
 80373c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80373c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80373c6:	e853 3f00 	ldrex	r3, [r3]
 80373ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80373cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80373ce:	4b56      	ldr	r3, [pc, #344]	; (8037528 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80373d0:	4013      	ands	r3, r2
 80373d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80373d4:	687b      	ldr	r3, [r7, #4]
 80373d6:	681b      	ldr	r3, [r3, #0]
 80373d8:	3308      	adds	r3, #8
 80373da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80373dc:	657a      	str	r2, [r7, #84]	; 0x54
 80373de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80373e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80373e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80373e4:	e841 2300 	strex	r3, r2, [r1]
 80373e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80373ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80373ec:	2b00      	cmp	r3, #0
 80373ee:	d1e5      	bne.n	80373bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80373f0:	687b      	ldr	r3, [r7, #4]
 80373f2:	2220      	movs	r2, #32
 80373f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80373f8:	687b      	ldr	r3, [r7, #4]
 80373fa:	2200      	movs	r2, #0
 80373fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80373fe:	687b      	ldr	r3, [r7, #4]
 8037400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037402:	2b01      	cmp	r3, #1
 8037404:	d12e      	bne.n	8037464 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037406:	687b      	ldr	r3, [r7, #4]
 8037408:	2200      	movs	r2, #0
 803740a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803740c:	687b      	ldr	r3, [r7, #4]
 803740e:	681b      	ldr	r3, [r3, #0]
 8037410:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037414:	e853 3f00 	ldrex	r3, [r3]
 8037418:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803741c:	f023 0310 	bic.w	r3, r3, #16
 8037420:	67bb      	str	r3, [r7, #120]	; 0x78
 8037422:	687b      	ldr	r3, [r7, #4]
 8037424:	681b      	ldr	r3, [r3, #0]
 8037426:	461a      	mov	r2, r3
 8037428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803742a:	643b      	str	r3, [r7, #64]	; 0x40
 803742c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803742e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037432:	e841 2300 	strex	r3, r2, [r1]
 8037436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803743a:	2b00      	cmp	r3, #0
 803743c:	d1e6      	bne.n	803740c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803743e:	687b      	ldr	r3, [r7, #4]
 8037440:	681b      	ldr	r3, [r3, #0]
 8037442:	69db      	ldr	r3, [r3, #28]
 8037444:	f003 0310 	and.w	r3, r3, #16
 8037448:	2b10      	cmp	r3, #16
 803744a:	d103      	bne.n	8037454 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803744c:	687b      	ldr	r3, [r7, #4]
 803744e:	681b      	ldr	r3, [r3, #0]
 8037450:	2210      	movs	r2, #16
 8037452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037454:	687b      	ldr	r3, [r7, #4]
 8037456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803745a:	4619      	mov	r1, r3
 803745c:	6878      	ldr	r0, [r7, #4]
 803745e:	f7fe faed 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
 8037462:	e002      	b.n	803746a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037464:	6878      	ldr	r0, [r7, #4]
 8037466:	f7f2 fadf 	bl	8029a28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803746a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 803746e:	2b00      	cmp	r3, #0
 8037470:	d006      	beq.n	8037480 <UART_RxISR_8BIT_FIFOEN+0x248>
 8037472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037476:	f003 0320 	and.w	r3, r3, #32
 803747a:	2b00      	cmp	r3, #0
 803747c:	f47f af00 	bne.w	8037280 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8037480:	687b      	ldr	r3, [r7, #4]
 8037482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037486:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803748a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 803748e:	2b00      	cmp	r3, #0
 8037490:	d045      	beq.n	803751e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8037492:	687b      	ldr	r3, [r7, #4]
 8037494:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8037498:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 803749c:	429a      	cmp	r2, r3
 803749e:	d23e      	bcs.n	803751e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80374a0:	687b      	ldr	r3, [r7, #4]
 80374a2:	681b      	ldr	r3, [r3, #0]
 80374a4:	3308      	adds	r3, #8
 80374a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80374a8:	6a3b      	ldr	r3, [r7, #32]
 80374aa:	e853 3f00 	ldrex	r3, [r3]
 80374ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80374b0:	69fb      	ldr	r3, [r7, #28]
 80374b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80374b6:	673b      	str	r3, [r7, #112]	; 0x70
 80374b8:	687b      	ldr	r3, [r7, #4]
 80374ba:	681b      	ldr	r3, [r3, #0]
 80374bc:	3308      	adds	r3, #8
 80374be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80374c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80374c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80374c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80374c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80374c8:	e841 2300 	strex	r3, r2, [r1]
 80374cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80374ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80374d0:	2b00      	cmp	r3, #0
 80374d2:	d1e5      	bne.n	80374a0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80374d4:	687b      	ldr	r3, [r7, #4]
 80374d6:	4a15      	ldr	r2, [pc, #84]	; (803752c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80374d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80374da:	687b      	ldr	r3, [r7, #4]
 80374dc:	681b      	ldr	r3, [r3, #0]
 80374de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80374e0:	68fb      	ldr	r3, [r7, #12]
 80374e2:	e853 3f00 	ldrex	r3, [r3]
 80374e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80374e8:	68bb      	ldr	r3, [r7, #8]
 80374ea:	f043 0320 	orr.w	r3, r3, #32
 80374ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80374f0:	687b      	ldr	r3, [r7, #4]
 80374f2:	681b      	ldr	r3, [r3, #0]
 80374f4:	461a      	mov	r2, r3
 80374f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80374f8:	61bb      	str	r3, [r7, #24]
 80374fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80374fc:	6979      	ldr	r1, [r7, #20]
 80374fe:	69ba      	ldr	r2, [r7, #24]
 8037500:	e841 2300 	strex	r3, r2, [r1]
 8037504:	613b      	str	r3, [r7, #16]
   return(result);
 8037506:	693b      	ldr	r3, [r7, #16]
 8037508:	2b00      	cmp	r3, #0
 803750a:	d1e6      	bne.n	80374da <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803750c:	e007      	b.n	803751e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803750e:	687b      	ldr	r3, [r7, #4]
 8037510:	681b      	ldr	r3, [r3, #0]
 8037512:	699a      	ldr	r2, [r3, #24]
 8037514:	687b      	ldr	r3, [r7, #4]
 8037516:	681b      	ldr	r3, [r3, #0]
 8037518:	f042 0208 	orr.w	r2, r2, #8
 803751c:	619a      	str	r2, [r3, #24]
}
 803751e:	bf00      	nop
 8037520:	3798      	adds	r7, #152	; 0x98
 8037522:	46bd      	mov	sp, r7
 8037524:	bd80      	pop	{r7, pc}
 8037526:	bf00      	nop
 8037528:	effffffe 	.word	0xeffffffe
 803752c:	08036f77 	.word	0x08036f77

08037530 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037530:	b580      	push	{r7, lr}
 8037532:	b0a8      	sub	sp, #160	; 0xa0
 8037534:	af00      	add	r7, sp, #0
 8037536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8037538:	687b      	ldr	r3, [r7, #4]
 803753a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803753e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8037542:	687b      	ldr	r3, [r7, #4]
 8037544:	681b      	ldr	r3, [r3, #0]
 8037546:	69db      	ldr	r3, [r3, #28]
 8037548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803754c:	687b      	ldr	r3, [r7, #4]
 803754e:	681b      	ldr	r3, [r3, #0]
 8037550:	681b      	ldr	r3, [r3, #0]
 8037552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8037556:	687b      	ldr	r3, [r7, #4]
 8037558:	681b      	ldr	r3, [r3, #0]
 803755a:	689b      	ldr	r3, [r3, #8]
 803755c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8037560:	687b      	ldr	r3, [r7, #4]
 8037562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8037566:	2b22      	cmp	r3, #34	; 0x22
 8037568:	f040 8151 	bne.w	803780e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803756c:	687b      	ldr	r3, [r7, #4]
 803756e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8037572:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8037576:	e0f8      	b.n	803776a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8037578:	687b      	ldr	r3, [r7, #4]
 803757a:	681b      	ldr	r3, [r3, #0]
 803757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803757e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8037582:	687b      	ldr	r3, [r7, #4]
 8037584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 803758a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 803758e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8037592:	4013      	ands	r3, r2
 8037594:	b29a      	uxth	r2, r3
 8037596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803759a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 803759c:	687b      	ldr	r3, [r7, #4]
 803759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80375a0:	1c9a      	adds	r2, r3, #2
 80375a2:	687b      	ldr	r3, [r7, #4]
 80375a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80375a6:	687b      	ldr	r3, [r7, #4]
 80375a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80375ac:	b29b      	uxth	r3, r3
 80375ae:	3b01      	subs	r3, #1
 80375b0:	b29a      	uxth	r2, r3
 80375b2:	687b      	ldr	r3, [r7, #4]
 80375b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80375b8:	687b      	ldr	r3, [r7, #4]
 80375ba:	681b      	ldr	r3, [r3, #0]
 80375bc:	69db      	ldr	r3, [r3, #28]
 80375be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80375c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80375c6:	f003 0307 	and.w	r3, r3, #7
 80375ca:	2b00      	cmp	r3, #0
 80375cc:	d053      	beq.n	8037676 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80375ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80375d2:	f003 0301 	and.w	r3, r3, #1
 80375d6:	2b00      	cmp	r3, #0
 80375d8:	d011      	beq.n	80375fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80375da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80375de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80375e2:	2b00      	cmp	r3, #0
 80375e4:	d00b      	beq.n	80375fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80375e6:	687b      	ldr	r3, [r7, #4]
 80375e8:	681b      	ldr	r3, [r3, #0]
 80375ea:	2201      	movs	r2, #1
 80375ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80375ee:	687b      	ldr	r3, [r7, #4]
 80375f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80375f4:	f043 0201 	orr.w	r2, r3, #1
 80375f8:	687b      	ldr	r3, [r7, #4]
 80375fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80375fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037602:	f003 0302 	and.w	r3, r3, #2
 8037606:	2b00      	cmp	r3, #0
 8037608:	d011      	beq.n	803762e <UART_RxISR_16BIT_FIFOEN+0xfe>
 803760a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803760e:	f003 0301 	and.w	r3, r3, #1
 8037612:	2b00      	cmp	r3, #0
 8037614:	d00b      	beq.n	803762e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8037616:	687b      	ldr	r3, [r7, #4]
 8037618:	681b      	ldr	r3, [r3, #0]
 803761a:	2202      	movs	r2, #2
 803761c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803761e:	687b      	ldr	r3, [r7, #4]
 8037620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037624:	f043 0204 	orr.w	r2, r3, #4
 8037628:	687b      	ldr	r3, [r7, #4]
 803762a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803762e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037632:	f003 0304 	and.w	r3, r3, #4
 8037636:	2b00      	cmp	r3, #0
 8037638:	d011      	beq.n	803765e <UART_RxISR_16BIT_FIFOEN+0x12e>
 803763a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803763e:	f003 0301 	and.w	r3, r3, #1
 8037642:	2b00      	cmp	r3, #0
 8037644:	d00b      	beq.n	803765e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8037646:	687b      	ldr	r3, [r7, #4]
 8037648:	681b      	ldr	r3, [r3, #0]
 803764a:	2204      	movs	r2, #4
 803764c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803764e:	687b      	ldr	r3, [r7, #4]
 8037650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037654:	f043 0202 	orr.w	r2, r3, #2
 8037658:	687b      	ldr	r3, [r7, #4]
 803765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803765e:	687b      	ldr	r3, [r7, #4]
 8037660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037664:	2b00      	cmp	r3, #0
 8037666:	d006      	beq.n	8037676 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8037668:	6878      	ldr	r0, [r7, #4]
 803766a:	f7fe f9dd 	bl	8035a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803766e:	687b      	ldr	r3, [r7, #4]
 8037670:	2200      	movs	r2, #0
 8037672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8037676:	687b      	ldr	r3, [r7, #4]
 8037678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803767c:	b29b      	uxth	r3, r3
 803767e:	2b00      	cmp	r3, #0
 8037680:	d173      	bne.n	803776a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8037682:	687b      	ldr	r3, [r7, #4]
 8037684:	681b      	ldr	r3, [r3, #0]
 8037686:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803768a:	e853 3f00 	ldrex	r3, [r3]
 803768e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8037690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8037692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8037696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803769a:	687b      	ldr	r3, [r7, #4]
 803769c:	681b      	ldr	r3, [r3, #0]
 803769e:	461a      	mov	r2, r3
 80376a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80376a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80376a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80376a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80376aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80376ac:	e841 2300 	strex	r3, r2, [r1]
 80376b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80376b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80376b4:	2b00      	cmp	r3, #0
 80376b6:	d1e4      	bne.n	8037682 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80376b8:	687b      	ldr	r3, [r7, #4]
 80376ba:	681b      	ldr	r3, [r3, #0]
 80376bc:	3308      	adds	r3, #8
 80376be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80376c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80376c2:	e853 3f00 	ldrex	r3, [r3]
 80376c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80376c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80376ca:	4b57      	ldr	r3, [pc, #348]	; (8037828 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80376cc:	4013      	ands	r3, r2
 80376ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80376d2:	687b      	ldr	r3, [r7, #4]
 80376d4:	681b      	ldr	r3, [r3, #0]
 80376d6:	3308      	adds	r3, #8
 80376d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80376dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80376de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80376e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80376e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80376e4:	e841 2300 	strex	r3, r2, [r1]
 80376e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80376ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80376ec:	2b00      	cmp	r3, #0
 80376ee:	d1e3      	bne.n	80376b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80376f0:	687b      	ldr	r3, [r7, #4]
 80376f2:	2220      	movs	r2, #32
 80376f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80376f8:	687b      	ldr	r3, [r7, #4]
 80376fa:	2200      	movs	r2, #0
 80376fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80376fe:	687b      	ldr	r3, [r7, #4]
 8037700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037702:	2b01      	cmp	r3, #1
 8037704:	d12e      	bne.n	8037764 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037706:	687b      	ldr	r3, [r7, #4]
 8037708:	2200      	movs	r2, #0
 803770a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803770c:	687b      	ldr	r3, [r7, #4]
 803770e:	681b      	ldr	r3, [r3, #0]
 8037710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037714:	e853 3f00 	ldrex	r3, [r3]
 8037718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803771c:	f023 0310 	bic.w	r3, r3, #16
 8037720:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037722:	687b      	ldr	r3, [r7, #4]
 8037724:	681b      	ldr	r3, [r3, #0]
 8037726:	461a      	mov	r2, r3
 8037728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803772a:	647b      	str	r3, [r7, #68]	; 0x44
 803772c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803772e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037732:	e841 2300 	strex	r3, r2, [r1]
 8037736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8037738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803773a:	2b00      	cmp	r3, #0
 803773c:	d1e6      	bne.n	803770c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803773e:	687b      	ldr	r3, [r7, #4]
 8037740:	681b      	ldr	r3, [r3, #0]
 8037742:	69db      	ldr	r3, [r3, #28]
 8037744:	f003 0310 	and.w	r3, r3, #16
 8037748:	2b10      	cmp	r3, #16
 803774a:	d103      	bne.n	8037754 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803774c:	687b      	ldr	r3, [r7, #4]
 803774e:	681b      	ldr	r3, [r3, #0]
 8037750:	2210      	movs	r2, #16
 8037752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037754:	687b      	ldr	r3, [r7, #4]
 8037756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803775a:	4619      	mov	r1, r3
 803775c:	6878      	ldr	r0, [r7, #4]
 803775e:	f7fe f96d 	bl	8035a3c <HAL_UARTEx_RxEventCallback>
 8037762:	e002      	b.n	803776a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037764:	6878      	ldr	r0, [r7, #4]
 8037766:	f7f2 f95f 	bl	8029a28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803776a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 803776e:	2b00      	cmp	r3, #0
 8037770:	d006      	beq.n	8037780 <UART_RxISR_16BIT_FIFOEN+0x250>
 8037772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037776:	f003 0320 	and.w	r3, r3, #32
 803777a:	2b00      	cmp	r3, #0
 803777c:	f47f aefc 	bne.w	8037578 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8037780:	687b      	ldr	r3, [r7, #4]
 8037782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037786:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803778a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 803778e:	2b00      	cmp	r3, #0
 8037790:	d045      	beq.n	803781e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8037792:	687b      	ldr	r3, [r7, #4]
 8037794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8037798:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 803779c:	429a      	cmp	r2, r3
 803779e:	d23e      	bcs.n	803781e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80377a0:	687b      	ldr	r3, [r7, #4]
 80377a2:	681b      	ldr	r3, [r3, #0]
 80377a4:	3308      	adds	r3, #8
 80377a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80377a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80377aa:	e853 3f00 	ldrex	r3, [r3]
 80377ae:	623b      	str	r3, [r7, #32]
   return(result);
 80377b0:	6a3b      	ldr	r3, [r7, #32]
 80377b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80377b6:	677b      	str	r3, [r7, #116]	; 0x74
 80377b8:	687b      	ldr	r3, [r7, #4]
 80377ba:	681b      	ldr	r3, [r3, #0]
 80377bc:	3308      	adds	r3, #8
 80377be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80377c0:	633a      	str	r2, [r7, #48]	; 0x30
 80377c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80377c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80377c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80377c8:	e841 2300 	strex	r3, r2, [r1]
 80377cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80377ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80377d0:	2b00      	cmp	r3, #0
 80377d2:	d1e5      	bne.n	80377a0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80377d4:	687b      	ldr	r3, [r7, #4]
 80377d6:	4a15      	ldr	r2, [pc, #84]	; (803782c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80377d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80377da:	687b      	ldr	r3, [r7, #4]
 80377dc:	681b      	ldr	r3, [r3, #0]
 80377de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80377e0:	693b      	ldr	r3, [r7, #16]
 80377e2:	e853 3f00 	ldrex	r3, [r3]
 80377e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80377e8:	68fb      	ldr	r3, [r7, #12]
 80377ea:	f043 0320 	orr.w	r3, r3, #32
 80377ee:	673b      	str	r3, [r7, #112]	; 0x70
 80377f0:	687b      	ldr	r3, [r7, #4]
 80377f2:	681b      	ldr	r3, [r3, #0]
 80377f4:	461a      	mov	r2, r3
 80377f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80377f8:	61fb      	str	r3, [r7, #28]
 80377fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80377fc:	69b9      	ldr	r1, [r7, #24]
 80377fe:	69fa      	ldr	r2, [r7, #28]
 8037800:	e841 2300 	strex	r3, r2, [r1]
 8037804:	617b      	str	r3, [r7, #20]
   return(result);
 8037806:	697b      	ldr	r3, [r7, #20]
 8037808:	2b00      	cmp	r3, #0
 803780a:	d1e6      	bne.n	80377da <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803780c:	e007      	b.n	803781e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803780e:	687b      	ldr	r3, [r7, #4]
 8037810:	681b      	ldr	r3, [r3, #0]
 8037812:	699a      	ldr	r2, [r3, #24]
 8037814:	687b      	ldr	r3, [r7, #4]
 8037816:	681b      	ldr	r3, [r3, #0]
 8037818:	f042 0208 	orr.w	r2, r2, #8
 803781c:	619a      	str	r2, [r3, #24]
}
 803781e:	bf00      	nop
 8037820:	37a0      	adds	r7, #160	; 0xa0
 8037822:	46bd      	mov	sp, r7
 8037824:	bd80      	pop	{r7, pc}
 8037826:	bf00      	nop
 8037828:	effffffe 	.word	0xeffffffe
 803782c:	080370d7 	.word	0x080370d7

08037830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8037830:	b480      	push	{r7}
 8037832:	b083      	sub	sp, #12
 8037834:	af00      	add	r7, sp, #0
 8037836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8037838:	bf00      	nop
 803783a:	370c      	adds	r7, #12
 803783c:	46bd      	mov	sp, r7
 803783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037842:	4770      	bx	lr

08037844 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8037844:	b480      	push	{r7}
 8037846:	b083      	sub	sp, #12
 8037848:	af00      	add	r7, sp, #0
 803784a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 803784c:	bf00      	nop
 803784e:	370c      	adds	r7, #12
 8037850:	46bd      	mov	sp, r7
 8037852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037856:	4770      	bx	lr

08037858 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8037858:	b480      	push	{r7}
 803785a:	b083      	sub	sp, #12
 803785c:	af00      	add	r7, sp, #0
 803785e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8037860:	bf00      	nop
 8037862:	370c      	adds	r7, #12
 8037864:	46bd      	mov	sp, r7
 8037866:	f85d 7b04 	ldr.w	r7, [sp], #4
 803786a:	4770      	bx	lr

0803786c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 803786c:	b580      	push	{r7, lr}
 803786e:	b084      	sub	sp, #16
 8037870:	af00      	add	r7, sp, #0
 8037872:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037874:	687b      	ldr	r3, [r7, #4]
 8037876:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803787a:	2b01      	cmp	r3, #1
 803787c:	d101      	bne.n	8037882 <HAL_UARTEx_EnableFifoMode+0x16>
 803787e:	2302      	movs	r3, #2
 8037880:	e02b      	b.n	80378da <HAL_UARTEx_EnableFifoMode+0x6e>
 8037882:	687b      	ldr	r3, [r7, #4]
 8037884:	2201      	movs	r2, #1
 8037886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803788a:	687b      	ldr	r3, [r7, #4]
 803788c:	2224      	movs	r2, #36	; 0x24
 803788e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8037892:	687b      	ldr	r3, [r7, #4]
 8037894:	681b      	ldr	r3, [r3, #0]
 8037896:	681b      	ldr	r3, [r3, #0]
 8037898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803789a:	687b      	ldr	r3, [r7, #4]
 803789c:	681b      	ldr	r3, [r3, #0]
 803789e:	681a      	ldr	r2, [r3, #0]
 80378a0:	687b      	ldr	r3, [r7, #4]
 80378a2:	681b      	ldr	r3, [r3, #0]
 80378a4:	f022 0201 	bic.w	r2, r2, #1
 80378a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80378aa:	68fb      	ldr	r3, [r7, #12]
 80378ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80378b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80378b2:	687b      	ldr	r3, [r7, #4]
 80378b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80378b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80378ba:	687b      	ldr	r3, [r7, #4]
 80378bc:	681b      	ldr	r3, [r3, #0]
 80378be:	68fa      	ldr	r2, [r7, #12]
 80378c0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80378c2:	6878      	ldr	r0, [r7, #4]
 80378c4:	f000 f8c2 	bl	8037a4c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80378c8:	687b      	ldr	r3, [r7, #4]
 80378ca:	2220      	movs	r2, #32
 80378cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80378d0:	687b      	ldr	r3, [r7, #4]
 80378d2:	2200      	movs	r2, #0
 80378d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80378d8:	2300      	movs	r3, #0
}
 80378da:	4618      	mov	r0, r3
 80378dc:	3710      	adds	r7, #16
 80378de:	46bd      	mov	sp, r7
 80378e0:	bd80      	pop	{r7, pc}

080378e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80378e2:	b480      	push	{r7}
 80378e4:	b085      	sub	sp, #20
 80378e6:	af00      	add	r7, sp, #0
 80378e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80378ea:	687b      	ldr	r3, [r7, #4]
 80378ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80378f0:	2b01      	cmp	r3, #1
 80378f2:	d101      	bne.n	80378f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80378f4:	2302      	movs	r3, #2
 80378f6:	e027      	b.n	8037948 <HAL_UARTEx_DisableFifoMode+0x66>
 80378f8:	687b      	ldr	r3, [r7, #4]
 80378fa:	2201      	movs	r2, #1
 80378fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037900:	687b      	ldr	r3, [r7, #4]
 8037902:	2224      	movs	r2, #36	; 0x24
 8037904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8037908:	687b      	ldr	r3, [r7, #4]
 803790a:	681b      	ldr	r3, [r3, #0]
 803790c:	681b      	ldr	r3, [r3, #0]
 803790e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037910:	687b      	ldr	r3, [r7, #4]
 8037912:	681b      	ldr	r3, [r3, #0]
 8037914:	681a      	ldr	r2, [r3, #0]
 8037916:	687b      	ldr	r3, [r7, #4]
 8037918:	681b      	ldr	r3, [r3, #0]
 803791a:	f022 0201 	bic.w	r2, r2, #1
 803791e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037920:	68fb      	ldr	r3, [r7, #12]
 8037922:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8037926:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8037928:	687b      	ldr	r3, [r7, #4]
 803792a:	2200      	movs	r2, #0
 803792c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803792e:	687b      	ldr	r3, [r7, #4]
 8037930:	681b      	ldr	r3, [r3, #0]
 8037932:	68fa      	ldr	r2, [r7, #12]
 8037934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037936:	687b      	ldr	r3, [r7, #4]
 8037938:	2220      	movs	r2, #32
 803793a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803793e:	687b      	ldr	r3, [r7, #4]
 8037940:	2200      	movs	r2, #0
 8037942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037946:	2300      	movs	r3, #0
}
 8037948:	4618      	mov	r0, r3
 803794a:	3714      	adds	r7, #20
 803794c:	46bd      	mov	sp, r7
 803794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037952:	4770      	bx	lr

08037954 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037954:	b580      	push	{r7, lr}
 8037956:	b084      	sub	sp, #16
 8037958:	af00      	add	r7, sp, #0
 803795a:	6078      	str	r0, [r7, #4]
 803795c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803795e:	687b      	ldr	r3, [r7, #4]
 8037960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037964:	2b01      	cmp	r3, #1
 8037966:	d101      	bne.n	803796c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8037968:	2302      	movs	r3, #2
 803796a:	e02d      	b.n	80379c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803796c:	687b      	ldr	r3, [r7, #4]
 803796e:	2201      	movs	r2, #1
 8037970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037974:	687b      	ldr	r3, [r7, #4]
 8037976:	2224      	movs	r2, #36	; 0x24
 8037978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803797c:	687b      	ldr	r3, [r7, #4]
 803797e:	681b      	ldr	r3, [r3, #0]
 8037980:	681b      	ldr	r3, [r3, #0]
 8037982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037984:	687b      	ldr	r3, [r7, #4]
 8037986:	681b      	ldr	r3, [r3, #0]
 8037988:	681a      	ldr	r2, [r3, #0]
 803798a:	687b      	ldr	r3, [r7, #4]
 803798c:	681b      	ldr	r3, [r3, #0]
 803798e:	f022 0201 	bic.w	r2, r2, #1
 8037992:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8037994:	687b      	ldr	r3, [r7, #4]
 8037996:	681b      	ldr	r3, [r3, #0]
 8037998:	689b      	ldr	r3, [r3, #8]
 803799a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 803799e:	687b      	ldr	r3, [r7, #4]
 80379a0:	681b      	ldr	r3, [r3, #0]
 80379a2:	683a      	ldr	r2, [r7, #0]
 80379a4:	430a      	orrs	r2, r1
 80379a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80379a8:	6878      	ldr	r0, [r7, #4]
 80379aa:	f000 f84f 	bl	8037a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80379ae:	687b      	ldr	r3, [r7, #4]
 80379b0:	681b      	ldr	r3, [r3, #0]
 80379b2:	68fa      	ldr	r2, [r7, #12]
 80379b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80379b6:	687b      	ldr	r3, [r7, #4]
 80379b8:	2220      	movs	r2, #32
 80379ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80379be:	687b      	ldr	r3, [r7, #4]
 80379c0:	2200      	movs	r2, #0
 80379c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80379c6:	2300      	movs	r3, #0
}
 80379c8:	4618      	mov	r0, r3
 80379ca:	3710      	adds	r7, #16
 80379cc:	46bd      	mov	sp, r7
 80379ce:	bd80      	pop	{r7, pc}

080379d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80379d0:	b580      	push	{r7, lr}
 80379d2:	b084      	sub	sp, #16
 80379d4:	af00      	add	r7, sp, #0
 80379d6:	6078      	str	r0, [r7, #4]
 80379d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80379da:	687b      	ldr	r3, [r7, #4]
 80379dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80379e0:	2b01      	cmp	r3, #1
 80379e2:	d101      	bne.n	80379e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80379e4:	2302      	movs	r3, #2
 80379e6:	e02d      	b.n	8037a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80379e8:	687b      	ldr	r3, [r7, #4]
 80379ea:	2201      	movs	r2, #1
 80379ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80379f0:	687b      	ldr	r3, [r7, #4]
 80379f2:	2224      	movs	r2, #36	; 0x24
 80379f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80379f8:	687b      	ldr	r3, [r7, #4]
 80379fa:	681b      	ldr	r3, [r3, #0]
 80379fc:	681b      	ldr	r3, [r3, #0]
 80379fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037a00:	687b      	ldr	r3, [r7, #4]
 8037a02:	681b      	ldr	r3, [r3, #0]
 8037a04:	681a      	ldr	r2, [r3, #0]
 8037a06:	687b      	ldr	r3, [r7, #4]
 8037a08:	681b      	ldr	r3, [r3, #0]
 8037a0a:	f022 0201 	bic.w	r2, r2, #1
 8037a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8037a10:	687b      	ldr	r3, [r7, #4]
 8037a12:	681b      	ldr	r3, [r3, #0]
 8037a14:	689b      	ldr	r3, [r3, #8]
 8037a16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8037a1a:	687b      	ldr	r3, [r7, #4]
 8037a1c:	681b      	ldr	r3, [r3, #0]
 8037a1e:	683a      	ldr	r2, [r7, #0]
 8037a20:	430a      	orrs	r2, r1
 8037a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037a24:	6878      	ldr	r0, [r7, #4]
 8037a26:	f000 f811 	bl	8037a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037a2a:	687b      	ldr	r3, [r7, #4]
 8037a2c:	681b      	ldr	r3, [r3, #0]
 8037a2e:	68fa      	ldr	r2, [r7, #12]
 8037a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037a32:	687b      	ldr	r3, [r7, #4]
 8037a34:	2220      	movs	r2, #32
 8037a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037a3a:	687b      	ldr	r3, [r7, #4]
 8037a3c:	2200      	movs	r2, #0
 8037a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037a42:	2300      	movs	r3, #0
}
 8037a44:	4618      	mov	r0, r3
 8037a46:	3710      	adds	r7, #16
 8037a48:	46bd      	mov	sp, r7
 8037a4a:	bd80      	pop	{r7, pc}

08037a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8037a4c:	b480      	push	{r7}
 8037a4e:	b085      	sub	sp, #20
 8037a50:	af00      	add	r7, sp, #0
 8037a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8037a54:	687b      	ldr	r3, [r7, #4]
 8037a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037a58:	2b00      	cmp	r3, #0
 8037a5a:	d108      	bne.n	8037a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8037a5c:	687b      	ldr	r3, [r7, #4]
 8037a5e:	2201      	movs	r2, #1
 8037a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8037a64:	687b      	ldr	r3, [r7, #4]
 8037a66:	2201      	movs	r2, #1
 8037a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8037a6c:	e031      	b.n	8037ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8037a6e:	2310      	movs	r3, #16
 8037a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8037a72:	2310      	movs	r3, #16
 8037a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8037a76:	687b      	ldr	r3, [r7, #4]
 8037a78:	681b      	ldr	r3, [r3, #0]
 8037a7a:	689b      	ldr	r3, [r3, #8]
 8037a7c:	0e5b      	lsrs	r3, r3, #25
 8037a7e:	b2db      	uxtb	r3, r3
 8037a80:	f003 0307 	and.w	r3, r3, #7
 8037a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8037a86:	687b      	ldr	r3, [r7, #4]
 8037a88:	681b      	ldr	r3, [r3, #0]
 8037a8a:	689b      	ldr	r3, [r3, #8]
 8037a8c:	0f5b      	lsrs	r3, r3, #29
 8037a8e:	b2db      	uxtb	r3, r3
 8037a90:	f003 0307 	and.w	r3, r3, #7
 8037a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037a96:	7bbb      	ldrb	r3, [r7, #14]
 8037a98:	7b3a      	ldrb	r2, [r7, #12]
 8037a9a:	4911      	ldr	r1, [pc, #68]	; (8037ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8037a9c:	5c8a      	ldrb	r2, [r1, r2]
 8037a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8037aa2:	7b3a      	ldrb	r2, [r7, #12]
 8037aa4:	490f      	ldr	r1, [pc, #60]	; (8037ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8037aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8037aac:	b29a      	uxth	r2, r3
 8037aae:	687b      	ldr	r3, [r7, #4]
 8037ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037ab4:	7bfb      	ldrb	r3, [r7, #15]
 8037ab6:	7b7a      	ldrb	r2, [r7, #13]
 8037ab8:	4909      	ldr	r1, [pc, #36]	; (8037ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8037aba:	5c8a      	ldrb	r2, [r1, r2]
 8037abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8037ac0:	7b7a      	ldrb	r2, [r7, #13]
 8037ac2:	4908      	ldr	r1, [pc, #32]	; (8037ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8037ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8037aca:	b29a      	uxth	r2, r3
 8037acc:	687b      	ldr	r3, [r7, #4]
 8037ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8037ad2:	bf00      	nop
 8037ad4:	3714      	adds	r7, #20
 8037ad6:	46bd      	mov	sp, r7
 8037ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037adc:	4770      	bx	lr
 8037ade:	bf00      	nop
 8037ae0:	08058538 	.word	0x08058538
 8037ae4:	08058540 	.word	0x08058540

08037ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037ae8:	b084      	sub	sp, #16
 8037aea:	b580      	push	{r7, lr}
 8037aec:	b084      	sub	sp, #16
 8037aee:	af00      	add	r7, sp, #0
 8037af0:	6078      	str	r0, [r7, #4]
 8037af2:	f107 001c 	add.w	r0, r7, #28
 8037af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037afc:	2b01      	cmp	r3, #1
 8037afe:	d120      	bne.n	8037b42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037b00:	687b      	ldr	r3, [r7, #4]
 8037b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037b08:	687b      	ldr	r3, [r7, #4]
 8037b0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8037b0c:	687b      	ldr	r3, [r7, #4]
 8037b0e:	68da      	ldr	r2, [r3, #12]
 8037b10:	4b2a      	ldr	r3, [pc, #168]	; (8037bbc <USB_CoreInit+0xd4>)
 8037b12:	4013      	ands	r3, r2
 8037b14:	687a      	ldr	r2, [r7, #4]
 8037b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8037b18:	687b      	ldr	r3, [r7, #4]
 8037b1a:	68db      	ldr	r3, [r3, #12]
 8037b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8037b20:	687b      	ldr	r3, [r7, #4]
 8037b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8037b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037b26:	2b01      	cmp	r3, #1
 8037b28:	d105      	bne.n	8037b36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8037b2a:	687b      	ldr	r3, [r7, #4]
 8037b2c:	68db      	ldr	r3, [r3, #12]
 8037b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8037b32:	687b      	ldr	r3, [r7, #4]
 8037b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037b36:	6878      	ldr	r0, [r7, #4]
 8037b38:	f001 fc04 	bl	8039344 <USB_CoreReset>
 8037b3c:	4603      	mov	r3, r0
 8037b3e:	73fb      	strb	r3, [r7, #15]
 8037b40:	e01a      	b.n	8037b78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8037b42:	687b      	ldr	r3, [r7, #4]
 8037b44:	68db      	ldr	r3, [r3, #12]
 8037b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037b4a:	687b      	ldr	r3, [r7, #4]
 8037b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037b4e:	6878      	ldr	r0, [r7, #4]
 8037b50:	f001 fbf8 	bl	8039344 <USB_CoreReset>
 8037b54:	4603      	mov	r3, r0
 8037b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8037b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037b5a:	2b00      	cmp	r3, #0
 8037b5c:	d106      	bne.n	8037b6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8037b5e:	687b      	ldr	r3, [r7, #4]
 8037b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8037b66:	687b      	ldr	r3, [r7, #4]
 8037b68:	639a      	str	r2, [r3, #56]	; 0x38
 8037b6a:	e005      	b.n	8037b78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037b6c:	687b      	ldr	r3, [r7, #4]
 8037b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037b74:	687b      	ldr	r3, [r7, #4]
 8037b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8037b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037b7a:	2b01      	cmp	r3, #1
 8037b7c:	d116      	bne.n	8037bac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8037b7e:	687b      	ldr	r3, [r7, #4]
 8037b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8037b82:	b29a      	uxth	r2, r3
 8037b84:	687b      	ldr	r3, [r7, #4]
 8037b86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8037b88:	687b      	ldr	r3, [r7, #4]
 8037b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8037b8c:	4b0c      	ldr	r3, [pc, #48]	; (8037bc0 <USB_CoreInit+0xd8>)
 8037b8e:	4313      	orrs	r3, r2
 8037b90:	687a      	ldr	r2, [r7, #4]
 8037b92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8037b94:	687b      	ldr	r3, [r7, #4]
 8037b96:	689b      	ldr	r3, [r3, #8]
 8037b98:	f043 0206 	orr.w	r2, r3, #6
 8037b9c:	687b      	ldr	r3, [r7, #4]
 8037b9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8037ba0:	687b      	ldr	r3, [r7, #4]
 8037ba2:	689b      	ldr	r3, [r3, #8]
 8037ba4:	f043 0220 	orr.w	r2, r3, #32
 8037ba8:	687b      	ldr	r3, [r7, #4]
 8037baa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8037bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8037bae:	4618      	mov	r0, r3
 8037bb0:	3710      	adds	r7, #16
 8037bb2:	46bd      	mov	sp, r7
 8037bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037bb8:	b004      	add	sp, #16
 8037bba:	4770      	bx	lr
 8037bbc:	ffbdffbf 	.word	0xffbdffbf
 8037bc0:	03ee0000 	.word	0x03ee0000

08037bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8037bc4:	b480      	push	{r7}
 8037bc6:	b087      	sub	sp, #28
 8037bc8:	af00      	add	r7, sp, #0
 8037bca:	60f8      	str	r0, [r7, #12]
 8037bcc:	60b9      	str	r1, [r7, #8]
 8037bce:	4613      	mov	r3, r2
 8037bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8037bd2:	79fb      	ldrb	r3, [r7, #7]
 8037bd4:	2b02      	cmp	r3, #2
 8037bd6:	d165      	bne.n	8037ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8037bd8:	68bb      	ldr	r3, [r7, #8]
 8037bda:	4a41      	ldr	r2, [pc, #260]	; (8037ce0 <USB_SetTurnaroundTime+0x11c>)
 8037bdc:	4293      	cmp	r3, r2
 8037bde:	d906      	bls.n	8037bee <USB_SetTurnaroundTime+0x2a>
 8037be0:	68bb      	ldr	r3, [r7, #8]
 8037be2:	4a40      	ldr	r2, [pc, #256]	; (8037ce4 <USB_SetTurnaroundTime+0x120>)
 8037be4:	4293      	cmp	r3, r2
 8037be6:	d202      	bcs.n	8037bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8037be8:	230f      	movs	r3, #15
 8037bea:	617b      	str	r3, [r7, #20]
 8037bec:	e062      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8037bee:	68bb      	ldr	r3, [r7, #8]
 8037bf0:	4a3c      	ldr	r2, [pc, #240]	; (8037ce4 <USB_SetTurnaroundTime+0x120>)
 8037bf2:	4293      	cmp	r3, r2
 8037bf4:	d306      	bcc.n	8037c04 <USB_SetTurnaroundTime+0x40>
 8037bf6:	68bb      	ldr	r3, [r7, #8]
 8037bf8:	4a3b      	ldr	r2, [pc, #236]	; (8037ce8 <USB_SetTurnaroundTime+0x124>)
 8037bfa:	4293      	cmp	r3, r2
 8037bfc:	d202      	bcs.n	8037c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8037bfe:	230e      	movs	r3, #14
 8037c00:	617b      	str	r3, [r7, #20]
 8037c02:	e057      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8037c04:	68bb      	ldr	r3, [r7, #8]
 8037c06:	4a38      	ldr	r2, [pc, #224]	; (8037ce8 <USB_SetTurnaroundTime+0x124>)
 8037c08:	4293      	cmp	r3, r2
 8037c0a:	d306      	bcc.n	8037c1a <USB_SetTurnaroundTime+0x56>
 8037c0c:	68bb      	ldr	r3, [r7, #8]
 8037c0e:	4a37      	ldr	r2, [pc, #220]	; (8037cec <USB_SetTurnaroundTime+0x128>)
 8037c10:	4293      	cmp	r3, r2
 8037c12:	d202      	bcs.n	8037c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8037c14:	230d      	movs	r3, #13
 8037c16:	617b      	str	r3, [r7, #20]
 8037c18:	e04c      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8037c1a:	68bb      	ldr	r3, [r7, #8]
 8037c1c:	4a33      	ldr	r2, [pc, #204]	; (8037cec <USB_SetTurnaroundTime+0x128>)
 8037c1e:	4293      	cmp	r3, r2
 8037c20:	d306      	bcc.n	8037c30 <USB_SetTurnaroundTime+0x6c>
 8037c22:	68bb      	ldr	r3, [r7, #8]
 8037c24:	4a32      	ldr	r2, [pc, #200]	; (8037cf0 <USB_SetTurnaroundTime+0x12c>)
 8037c26:	4293      	cmp	r3, r2
 8037c28:	d802      	bhi.n	8037c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8037c2a:	230c      	movs	r3, #12
 8037c2c:	617b      	str	r3, [r7, #20]
 8037c2e:	e041      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8037c30:	68bb      	ldr	r3, [r7, #8]
 8037c32:	4a2f      	ldr	r2, [pc, #188]	; (8037cf0 <USB_SetTurnaroundTime+0x12c>)
 8037c34:	4293      	cmp	r3, r2
 8037c36:	d906      	bls.n	8037c46 <USB_SetTurnaroundTime+0x82>
 8037c38:	68bb      	ldr	r3, [r7, #8]
 8037c3a:	4a2e      	ldr	r2, [pc, #184]	; (8037cf4 <USB_SetTurnaroundTime+0x130>)
 8037c3c:	4293      	cmp	r3, r2
 8037c3e:	d802      	bhi.n	8037c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8037c40:	230b      	movs	r3, #11
 8037c42:	617b      	str	r3, [r7, #20]
 8037c44:	e036      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8037c46:	68bb      	ldr	r3, [r7, #8]
 8037c48:	4a2a      	ldr	r2, [pc, #168]	; (8037cf4 <USB_SetTurnaroundTime+0x130>)
 8037c4a:	4293      	cmp	r3, r2
 8037c4c:	d906      	bls.n	8037c5c <USB_SetTurnaroundTime+0x98>
 8037c4e:	68bb      	ldr	r3, [r7, #8]
 8037c50:	4a29      	ldr	r2, [pc, #164]	; (8037cf8 <USB_SetTurnaroundTime+0x134>)
 8037c52:	4293      	cmp	r3, r2
 8037c54:	d802      	bhi.n	8037c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8037c56:	230a      	movs	r3, #10
 8037c58:	617b      	str	r3, [r7, #20]
 8037c5a:	e02b      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8037c5c:	68bb      	ldr	r3, [r7, #8]
 8037c5e:	4a26      	ldr	r2, [pc, #152]	; (8037cf8 <USB_SetTurnaroundTime+0x134>)
 8037c60:	4293      	cmp	r3, r2
 8037c62:	d906      	bls.n	8037c72 <USB_SetTurnaroundTime+0xae>
 8037c64:	68bb      	ldr	r3, [r7, #8]
 8037c66:	4a25      	ldr	r2, [pc, #148]	; (8037cfc <USB_SetTurnaroundTime+0x138>)
 8037c68:	4293      	cmp	r3, r2
 8037c6a:	d202      	bcs.n	8037c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8037c6c:	2309      	movs	r3, #9
 8037c6e:	617b      	str	r3, [r7, #20]
 8037c70:	e020      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8037c72:	68bb      	ldr	r3, [r7, #8]
 8037c74:	4a21      	ldr	r2, [pc, #132]	; (8037cfc <USB_SetTurnaroundTime+0x138>)
 8037c76:	4293      	cmp	r3, r2
 8037c78:	d306      	bcc.n	8037c88 <USB_SetTurnaroundTime+0xc4>
 8037c7a:	68bb      	ldr	r3, [r7, #8]
 8037c7c:	4a20      	ldr	r2, [pc, #128]	; (8037d00 <USB_SetTurnaroundTime+0x13c>)
 8037c7e:	4293      	cmp	r3, r2
 8037c80:	d802      	bhi.n	8037c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8037c82:	2308      	movs	r3, #8
 8037c84:	617b      	str	r3, [r7, #20]
 8037c86:	e015      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8037c88:	68bb      	ldr	r3, [r7, #8]
 8037c8a:	4a1d      	ldr	r2, [pc, #116]	; (8037d00 <USB_SetTurnaroundTime+0x13c>)
 8037c8c:	4293      	cmp	r3, r2
 8037c8e:	d906      	bls.n	8037c9e <USB_SetTurnaroundTime+0xda>
 8037c90:	68bb      	ldr	r3, [r7, #8]
 8037c92:	4a1c      	ldr	r2, [pc, #112]	; (8037d04 <USB_SetTurnaroundTime+0x140>)
 8037c94:	4293      	cmp	r3, r2
 8037c96:	d202      	bcs.n	8037c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8037c98:	2307      	movs	r3, #7
 8037c9a:	617b      	str	r3, [r7, #20]
 8037c9c:	e00a      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8037c9e:	2306      	movs	r3, #6
 8037ca0:	617b      	str	r3, [r7, #20]
 8037ca2:	e007      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8037ca4:	79fb      	ldrb	r3, [r7, #7]
 8037ca6:	2b00      	cmp	r3, #0
 8037ca8:	d102      	bne.n	8037cb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8037caa:	2309      	movs	r3, #9
 8037cac:	617b      	str	r3, [r7, #20]
 8037cae:	e001      	b.n	8037cb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8037cb0:	2309      	movs	r3, #9
 8037cb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8037cb4:	68fb      	ldr	r3, [r7, #12]
 8037cb6:	68db      	ldr	r3, [r3, #12]
 8037cb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8037cbc:	68fb      	ldr	r3, [r7, #12]
 8037cbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8037cc0:	68fb      	ldr	r3, [r7, #12]
 8037cc2:	68da      	ldr	r2, [r3, #12]
 8037cc4:	697b      	ldr	r3, [r7, #20]
 8037cc6:	029b      	lsls	r3, r3, #10
 8037cc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8037ccc:	431a      	orrs	r2, r3
 8037cce:	68fb      	ldr	r3, [r7, #12]
 8037cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8037cd2:	2300      	movs	r3, #0
}
 8037cd4:	4618      	mov	r0, r3
 8037cd6:	371c      	adds	r7, #28
 8037cd8:	46bd      	mov	sp, r7
 8037cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cde:	4770      	bx	lr
 8037ce0:	00d8acbf 	.word	0x00d8acbf
 8037ce4:	00e4e1c0 	.word	0x00e4e1c0
 8037ce8:	00f42400 	.word	0x00f42400
 8037cec:	01067380 	.word	0x01067380
 8037cf0:	011a499f 	.word	0x011a499f
 8037cf4:	01312cff 	.word	0x01312cff
 8037cf8:	014ca43f 	.word	0x014ca43f
 8037cfc:	016e3600 	.word	0x016e3600
 8037d00:	01a6ab1f 	.word	0x01a6ab1f
 8037d04:	01e84800 	.word	0x01e84800

08037d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d08:	b480      	push	{r7}
 8037d0a:	b083      	sub	sp, #12
 8037d0c:	af00      	add	r7, sp, #0
 8037d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8037d10:	687b      	ldr	r3, [r7, #4]
 8037d12:	689b      	ldr	r3, [r3, #8]
 8037d14:	f043 0201 	orr.w	r2, r3, #1
 8037d18:	687b      	ldr	r3, [r7, #4]
 8037d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d1c:	2300      	movs	r3, #0
}
 8037d1e:	4618      	mov	r0, r3
 8037d20:	370c      	adds	r7, #12
 8037d22:	46bd      	mov	sp, r7
 8037d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d28:	4770      	bx	lr

08037d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d2a:	b480      	push	{r7}
 8037d2c:	b083      	sub	sp, #12
 8037d2e:	af00      	add	r7, sp, #0
 8037d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8037d32:	687b      	ldr	r3, [r7, #4]
 8037d34:	689b      	ldr	r3, [r3, #8]
 8037d36:	f023 0201 	bic.w	r2, r3, #1
 8037d3a:	687b      	ldr	r3, [r7, #4]
 8037d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d3e:	2300      	movs	r3, #0
}
 8037d40:	4618      	mov	r0, r3
 8037d42:	370c      	adds	r7, #12
 8037d44:	46bd      	mov	sp, r7
 8037d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d4a:	4770      	bx	lr

08037d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8037d4c:	b580      	push	{r7, lr}
 8037d4e:	b084      	sub	sp, #16
 8037d50:	af00      	add	r7, sp, #0
 8037d52:	6078      	str	r0, [r7, #4]
 8037d54:	460b      	mov	r3, r1
 8037d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8037d58:	2300      	movs	r3, #0
 8037d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8037d5c:	687b      	ldr	r3, [r7, #4]
 8037d5e:	68db      	ldr	r3, [r3, #12]
 8037d60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8037d64:	687b      	ldr	r3, [r7, #4]
 8037d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8037d68:	78fb      	ldrb	r3, [r7, #3]
 8037d6a:	2b01      	cmp	r3, #1
 8037d6c:	d115      	bne.n	8037d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8037d6e:	687b      	ldr	r3, [r7, #4]
 8037d70:	68db      	ldr	r3, [r3, #12]
 8037d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8037d76:	687b      	ldr	r3, [r7, #4]
 8037d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037d7a:	2001      	movs	r0, #1
 8037d7c:	f7f2 ff76 	bl	802ac6c <HAL_Delay>
      ms++;
 8037d80:	68fb      	ldr	r3, [r7, #12]
 8037d82:	3301      	adds	r3, #1
 8037d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8037d86:	6878      	ldr	r0, [r7, #4]
 8037d88:	f001 fa4b 	bl	8039222 <USB_GetMode>
 8037d8c:	4603      	mov	r3, r0
 8037d8e:	2b01      	cmp	r3, #1
 8037d90:	d01e      	beq.n	8037dd0 <USB_SetCurrentMode+0x84>
 8037d92:	68fb      	ldr	r3, [r7, #12]
 8037d94:	2b31      	cmp	r3, #49	; 0x31
 8037d96:	d9f0      	bls.n	8037d7a <USB_SetCurrentMode+0x2e>
 8037d98:	e01a      	b.n	8037dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8037d9a:	78fb      	ldrb	r3, [r7, #3]
 8037d9c:	2b00      	cmp	r3, #0
 8037d9e:	d115      	bne.n	8037dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8037da0:	687b      	ldr	r3, [r7, #4]
 8037da2:	68db      	ldr	r3, [r3, #12]
 8037da4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8037da8:	687b      	ldr	r3, [r7, #4]
 8037daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037dac:	2001      	movs	r0, #1
 8037dae:	f7f2 ff5d 	bl	802ac6c <HAL_Delay>
      ms++;
 8037db2:	68fb      	ldr	r3, [r7, #12]
 8037db4:	3301      	adds	r3, #1
 8037db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8037db8:	6878      	ldr	r0, [r7, #4]
 8037dba:	f001 fa32 	bl	8039222 <USB_GetMode>
 8037dbe:	4603      	mov	r3, r0
 8037dc0:	2b00      	cmp	r3, #0
 8037dc2:	d005      	beq.n	8037dd0 <USB_SetCurrentMode+0x84>
 8037dc4:	68fb      	ldr	r3, [r7, #12]
 8037dc6:	2b31      	cmp	r3, #49	; 0x31
 8037dc8:	d9f0      	bls.n	8037dac <USB_SetCurrentMode+0x60>
 8037dca:	e001      	b.n	8037dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8037dcc:	2301      	movs	r3, #1
 8037dce:	e005      	b.n	8037ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8037dd0:	68fb      	ldr	r3, [r7, #12]
 8037dd2:	2b32      	cmp	r3, #50	; 0x32
 8037dd4:	d101      	bne.n	8037dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8037dd6:	2301      	movs	r3, #1
 8037dd8:	e000      	b.n	8037ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8037dda:	2300      	movs	r3, #0
}
 8037ddc:	4618      	mov	r0, r3
 8037dde:	3710      	adds	r7, #16
 8037de0:	46bd      	mov	sp, r7
 8037de2:	bd80      	pop	{r7, pc}

08037de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037de4:	b084      	sub	sp, #16
 8037de6:	b580      	push	{r7, lr}
 8037de8:	b086      	sub	sp, #24
 8037dea:	af00      	add	r7, sp, #0
 8037dec:	6078      	str	r0, [r7, #4]
 8037dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8037df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8037df6:	2300      	movs	r3, #0
 8037df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037dfa:	687b      	ldr	r3, [r7, #4]
 8037dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8037dfe:	2300      	movs	r3, #0
 8037e00:	613b      	str	r3, [r7, #16]
 8037e02:	e009      	b.n	8037e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8037e04:	687a      	ldr	r2, [r7, #4]
 8037e06:	693b      	ldr	r3, [r7, #16]
 8037e08:	3340      	adds	r3, #64	; 0x40
 8037e0a:	009b      	lsls	r3, r3, #2
 8037e0c:	4413      	add	r3, r2
 8037e0e:	2200      	movs	r2, #0
 8037e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8037e12:	693b      	ldr	r3, [r7, #16]
 8037e14:	3301      	adds	r3, #1
 8037e16:	613b      	str	r3, [r7, #16]
 8037e18:	693b      	ldr	r3, [r7, #16]
 8037e1a:	2b0e      	cmp	r3, #14
 8037e1c:	d9f2      	bls.n	8037e04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8037e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037e20:	2b00      	cmp	r3, #0
 8037e22:	d11c      	bne.n	8037e5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8037e24:	68fb      	ldr	r3, [r7, #12]
 8037e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e2a:	685b      	ldr	r3, [r3, #4]
 8037e2c:	68fa      	ldr	r2, [r7, #12]
 8037e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037e32:	f043 0302 	orr.w	r3, r3, #2
 8037e36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8037e38:	687b      	ldr	r3, [r7, #4]
 8037e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037e3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8037e40:	687b      	ldr	r3, [r7, #4]
 8037e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8037e44:	687b      	ldr	r3, [r7, #4]
 8037e46:	681b      	ldr	r3, [r3, #0]
 8037e48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037e4c:	687b      	ldr	r3, [r7, #4]
 8037e4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8037e50:	687b      	ldr	r3, [r7, #4]
 8037e52:	681b      	ldr	r3, [r3, #0]
 8037e54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037e58:	687b      	ldr	r3, [r7, #4]
 8037e5a:	601a      	str	r2, [r3, #0]
 8037e5c:	e005      	b.n	8037e6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8037e5e:	687b      	ldr	r3, [r7, #4]
 8037e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037e62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8037e66:	687b      	ldr	r3, [r7, #4]
 8037e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8037e6a:	68fb      	ldr	r3, [r7, #12]
 8037e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8037e70:	461a      	mov	r2, r3
 8037e72:	2300      	movs	r3, #0
 8037e74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8037e76:	68fb      	ldr	r3, [r7, #12]
 8037e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e7c:	4619      	mov	r1, r3
 8037e7e:	68fb      	ldr	r3, [r7, #12]
 8037e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e84:	461a      	mov	r2, r3
 8037e86:	680b      	ldr	r3, [r1, #0]
 8037e88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037e8c:	2b01      	cmp	r3, #1
 8037e8e:	d10c      	bne.n	8037eaa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8037e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037e92:	2b00      	cmp	r3, #0
 8037e94:	d104      	bne.n	8037ea0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8037e96:	2100      	movs	r1, #0
 8037e98:	6878      	ldr	r0, [r7, #4]
 8037e9a:	f000 f965 	bl	8038168 <USB_SetDevSpeed>
 8037e9e:	e008      	b.n	8037eb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8037ea0:	2101      	movs	r1, #1
 8037ea2:	6878      	ldr	r0, [r7, #4]
 8037ea4:	f000 f960 	bl	8038168 <USB_SetDevSpeed>
 8037ea8:	e003      	b.n	8037eb2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8037eaa:	2103      	movs	r1, #3
 8037eac:	6878      	ldr	r0, [r7, #4]
 8037eae:	f000 f95b 	bl	8038168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8037eb2:	2110      	movs	r1, #16
 8037eb4:	6878      	ldr	r0, [r7, #4]
 8037eb6:	f000 f8f3 	bl	80380a0 <USB_FlushTxFifo>
 8037eba:	4603      	mov	r3, r0
 8037ebc:	2b00      	cmp	r3, #0
 8037ebe:	d001      	beq.n	8037ec4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8037ec0:	2301      	movs	r3, #1
 8037ec2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8037ec4:	6878      	ldr	r0, [r7, #4]
 8037ec6:	f000 f91f 	bl	8038108 <USB_FlushRxFifo>
 8037eca:	4603      	mov	r3, r0
 8037ecc:	2b00      	cmp	r3, #0
 8037ece:	d001      	beq.n	8037ed4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8037ed0:	2301      	movs	r3, #1
 8037ed2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8037ed4:	68fb      	ldr	r3, [r7, #12]
 8037ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037eda:	461a      	mov	r2, r3
 8037edc:	2300      	movs	r3, #0
 8037ede:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8037ee0:	68fb      	ldr	r3, [r7, #12]
 8037ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037ee6:	461a      	mov	r2, r3
 8037ee8:	2300      	movs	r3, #0
 8037eea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8037eec:	68fb      	ldr	r3, [r7, #12]
 8037eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037ef2:	461a      	mov	r2, r3
 8037ef4:	2300      	movs	r3, #0
 8037ef6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037ef8:	2300      	movs	r3, #0
 8037efa:	613b      	str	r3, [r7, #16]
 8037efc:	e043      	b.n	8037f86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8037efe:	693b      	ldr	r3, [r7, #16]
 8037f00:	015a      	lsls	r2, r3, #5
 8037f02:	68fb      	ldr	r3, [r7, #12]
 8037f04:	4413      	add	r3, r2
 8037f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f0a:	681b      	ldr	r3, [r3, #0]
 8037f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037f14:	d118      	bne.n	8037f48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8037f16:	693b      	ldr	r3, [r7, #16]
 8037f18:	2b00      	cmp	r3, #0
 8037f1a:	d10a      	bne.n	8037f32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8037f1c:	693b      	ldr	r3, [r7, #16]
 8037f1e:	015a      	lsls	r2, r3, #5
 8037f20:	68fb      	ldr	r3, [r7, #12]
 8037f22:	4413      	add	r3, r2
 8037f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f28:	461a      	mov	r2, r3
 8037f2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037f2e:	6013      	str	r3, [r2, #0]
 8037f30:	e013      	b.n	8037f5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8037f32:	693b      	ldr	r3, [r7, #16]
 8037f34:	015a      	lsls	r2, r3, #5
 8037f36:	68fb      	ldr	r3, [r7, #12]
 8037f38:	4413      	add	r3, r2
 8037f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f3e:	461a      	mov	r2, r3
 8037f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037f44:	6013      	str	r3, [r2, #0]
 8037f46:	e008      	b.n	8037f5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8037f48:	693b      	ldr	r3, [r7, #16]
 8037f4a:	015a      	lsls	r2, r3, #5
 8037f4c:	68fb      	ldr	r3, [r7, #12]
 8037f4e:	4413      	add	r3, r2
 8037f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f54:	461a      	mov	r2, r3
 8037f56:	2300      	movs	r3, #0
 8037f58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8037f5a:	693b      	ldr	r3, [r7, #16]
 8037f5c:	015a      	lsls	r2, r3, #5
 8037f5e:	68fb      	ldr	r3, [r7, #12]
 8037f60:	4413      	add	r3, r2
 8037f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f66:	461a      	mov	r2, r3
 8037f68:	2300      	movs	r3, #0
 8037f6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8037f6c:	693b      	ldr	r3, [r7, #16]
 8037f6e:	015a      	lsls	r2, r3, #5
 8037f70:	68fb      	ldr	r3, [r7, #12]
 8037f72:	4413      	add	r3, r2
 8037f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f78:	461a      	mov	r2, r3
 8037f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037f80:	693b      	ldr	r3, [r7, #16]
 8037f82:	3301      	adds	r3, #1
 8037f84:	613b      	str	r3, [r7, #16]
 8037f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037f88:	693a      	ldr	r2, [r7, #16]
 8037f8a:	429a      	cmp	r2, r3
 8037f8c:	d3b7      	bcc.n	8037efe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037f8e:	2300      	movs	r3, #0
 8037f90:	613b      	str	r3, [r7, #16]
 8037f92:	e043      	b.n	803801c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8037f94:	693b      	ldr	r3, [r7, #16]
 8037f96:	015a      	lsls	r2, r3, #5
 8037f98:	68fb      	ldr	r3, [r7, #12]
 8037f9a:	4413      	add	r3, r2
 8037f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037fa0:	681b      	ldr	r3, [r3, #0]
 8037fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037faa:	d118      	bne.n	8037fde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8037fac:	693b      	ldr	r3, [r7, #16]
 8037fae:	2b00      	cmp	r3, #0
 8037fb0:	d10a      	bne.n	8037fc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8037fb2:	693b      	ldr	r3, [r7, #16]
 8037fb4:	015a      	lsls	r2, r3, #5
 8037fb6:	68fb      	ldr	r3, [r7, #12]
 8037fb8:	4413      	add	r3, r2
 8037fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037fbe:	461a      	mov	r2, r3
 8037fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037fc4:	6013      	str	r3, [r2, #0]
 8037fc6:	e013      	b.n	8037ff0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8037fc8:	693b      	ldr	r3, [r7, #16]
 8037fca:	015a      	lsls	r2, r3, #5
 8037fcc:	68fb      	ldr	r3, [r7, #12]
 8037fce:	4413      	add	r3, r2
 8037fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037fd4:	461a      	mov	r2, r3
 8037fd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037fda:	6013      	str	r3, [r2, #0]
 8037fdc:	e008      	b.n	8037ff0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8037fde:	693b      	ldr	r3, [r7, #16]
 8037fe0:	015a      	lsls	r2, r3, #5
 8037fe2:	68fb      	ldr	r3, [r7, #12]
 8037fe4:	4413      	add	r3, r2
 8037fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037fea:	461a      	mov	r2, r3
 8037fec:	2300      	movs	r3, #0
 8037fee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8037ff0:	693b      	ldr	r3, [r7, #16]
 8037ff2:	015a      	lsls	r2, r3, #5
 8037ff4:	68fb      	ldr	r3, [r7, #12]
 8037ff6:	4413      	add	r3, r2
 8037ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037ffc:	461a      	mov	r2, r3
 8037ffe:	2300      	movs	r3, #0
 8038000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8038002:	693b      	ldr	r3, [r7, #16]
 8038004:	015a      	lsls	r2, r3, #5
 8038006:	68fb      	ldr	r3, [r7, #12]
 8038008:	4413      	add	r3, r2
 803800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803800e:	461a      	mov	r2, r3
 8038010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8038014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8038016:	693b      	ldr	r3, [r7, #16]
 8038018:	3301      	adds	r3, #1
 803801a:	613b      	str	r3, [r7, #16]
 803801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803801e:	693a      	ldr	r2, [r7, #16]
 8038020:	429a      	cmp	r2, r3
 8038022:	d3b7      	bcc.n	8037f94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8038024:	68fb      	ldr	r3, [r7, #12]
 8038026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803802a:	691b      	ldr	r3, [r3, #16]
 803802c:	68fa      	ldr	r2, [r7, #12]
 803802e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8038036:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8038038:	687b      	ldr	r3, [r7, #4]
 803803a:	2200      	movs	r2, #0
 803803c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 803803e:	687b      	ldr	r3, [r7, #4]
 8038040:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8038044:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8038046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038048:	2b00      	cmp	r3, #0
 803804a:	d105      	bne.n	8038058 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 803804c:	687b      	ldr	r3, [r7, #4]
 803804e:	699b      	ldr	r3, [r3, #24]
 8038050:	f043 0210 	orr.w	r2, r3, #16
 8038054:	687b      	ldr	r3, [r7, #4]
 8038056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8038058:	687b      	ldr	r3, [r7, #4]
 803805a:	699a      	ldr	r2, [r3, #24]
 803805c:	4b0e      	ldr	r3, [pc, #56]	; (8038098 <USB_DevInit+0x2b4>)
 803805e:	4313      	orrs	r3, r2
 8038060:	687a      	ldr	r2, [r7, #4]
 8038062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8038064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038066:	2b00      	cmp	r3, #0
 8038068:	d005      	beq.n	8038076 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 803806a:	687b      	ldr	r3, [r7, #4]
 803806c:	699b      	ldr	r3, [r3, #24]
 803806e:	f043 0208 	orr.w	r2, r3, #8
 8038072:	687b      	ldr	r3, [r7, #4]
 8038074:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8038076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038078:	2b01      	cmp	r3, #1
 803807a:	d105      	bne.n	8038088 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 803807c:	687b      	ldr	r3, [r7, #4]
 803807e:	699a      	ldr	r2, [r3, #24]
 8038080:	4b06      	ldr	r3, [pc, #24]	; (803809c <USB_DevInit+0x2b8>)
 8038082:	4313      	orrs	r3, r2
 8038084:	687a      	ldr	r2, [r7, #4]
 8038086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8038088:	7dfb      	ldrb	r3, [r7, #23]
}
 803808a:	4618      	mov	r0, r3
 803808c:	3718      	adds	r7, #24
 803808e:	46bd      	mov	sp, r7
 8038090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8038094:	b004      	add	sp, #16
 8038096:	4770      	bx	lr
 8038098:	803c3800 	.word	0x803c3800
 803809c:	40000004 	.word	0x40000004

080380a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80380a0:	b480      	push	{r7}
 80380a2:	b085      	sub	sp, #20
 80380a4:	af00      	add	r7, sp, #0
 80380a6:	6078      	str	r0, [r7, #4]
 80380a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80380aa:	2300      	movs	r3, #0
 80380ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80380ae:	68fb      	ldr	r3, [r7, #12]
 80380b0:	3301      	adds	r3, #1
 80380b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80380b4:	68fb      	ldr	r3, [r7, #12]
 80380b6:	4a13      	ldr	r2, [pc, #76]	; (8038104 <USB_FlushTxFifo+0x64>)
 80380b8:	4293      	cmp	r3, r2
 80380ba:	d901      	bls.n	80380c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80380bc:	2303      	movs	r3, #3
 80380be:	e01b      	b.n	80380f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80380c0:	687b      	ldr	r3, [r7, #4]
 80380c2:	691b      	ldr	r3, [r3, #16]
 80380c4:	2b00      	cmp	r3, #0
 80380c6:	daf2      	bge.n	80380ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80380c8:	2300      	movs	r3, #0
 80380ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80380cc:	683b      	ldr	r3, [r7, #0]
 80380ce:	019b      	lsls	r3, r3, #6
 80380d0:	f043 0220 	orr.w	r2, r3, #32
 80380d4:	687b      	ldr	r3, [r7, #4]
 80380d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80380d8:	68fb      	ldr	r3, [r7, #12]
 80380da:	3301      	adds	r3, #1
 80380dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80380de:	68fb      	ldr	r3, [r7, #12]
 80380e0:	4a08      	ldr	r2, [pc, #32]	; (8038104 <USB_FlushTxFifo+0x64>)
 80380e2:	4293      	cmp	r3, r2
 80380e4:	d901      	bls.n	80380ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80380e6:	2303      	movs	r3, #3
 80380e8:	e006      	b.n	80380f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80380ea:	687b      	ldr	r3, [r7, #4]
 80380ec:	691b      	ldr	r3, [r3, #16]
 80380ee:	f003 0320 	and.w	r3, r3, #32
 80380f2:	2b20      	cmp	r3, #32
 80380f4:	d0f0      	beq.n	80380d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80380f6:	2300      	movs	r3, #0
}
 80380f8:	4618      	mov	r0, r3
 80380fa:	3714      	adds	r7, #20
 80380fc:	46bd      	mov	sp, r7
 80380fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038102:	4770      	bx	lr
 8038104:	00030d40 	.word	0x00030d40

08038108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8038108:	b480      	push	{r7}
 803810a:	b085      	sub	sp, #20
 803810c:	af00      	add	r7, sp, #0
 803810e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8038110:	2300      	movs	r3, #0
 8038112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8038114:	68fb      	ldr	r3, [r7, #12]
 8038116:	3301      	adds	r3, #1
 8038118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803811a:	68fb      	ldr	r3, [r7, #12]
 803811c:	4a11      	ldr	r2, [pc, #68]	; (8038164 <USB_FlushRxFifo+0x5c>)
 803811e:	4293      	cmp	r3, r2
 8038120:	d901      	bls.n	8038126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8038122:	2303      	movs	r3, #3
 8038124:	e018      	b.n	8038158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8038126:	687b      	ldr	r3, [r7, #4]
 8038128:	691b      	ldr	r3, [r3, #16]
 803812a:	2b00      	cmp	r3, #0
 803812c:	daf2      	bge.n	8038114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 803812e:	2300      	movs	r3, #0
 8038130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8038132:	687b      	ldr	r3, [r7, #4]
 8038134:	2210      	movs	r2, #16
 8038136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8038138:	68fb      	ldr	r3, [r7, #12]
 803813a:	3301      	adds	r3, #1
 803813c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803813e:	68fb      	ldr	r3, [r7, #12]
 8038140:	4a08      	ldr	r2, [pc, #32]	; (8038164 <USB_FlushRxFifo+0x5c>)
 8038142:	4293      	cmp	r3, r2
 8038144:	d901      	bls.n	803814a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8038146:	2303      	movs	r3, #3
 8038148:	e006      	b.n	8038158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803814a:	687b      	ldr	r3, [r7, #4]
 803814c:	691b      	ldr	r3, [r3, #16]
 803814e:	f003 0310 	and.w	r3, r3, #16
 8038152:	2b10      	cmp	r3, #16
 8038154:	d0f0      	beq.n	8038138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8038156:	2300      	movs	r3, #0
}
 8038158:	4618      	mov	r0, r3
 803815a:	3714      	adds	r7, #20
 803815c:	46bd      	mov	sp, r7
 803815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038162:	4770      	bx	lr
 8038164:	00030d40 	.word	0x00030d40

08038168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8038168:	b480      	push	{r7}
 803816a:	b085      	sub	sp, #20
 803816c:	af00      	add	r7, sp, #0
 803816e:	6078      	str	r0, [r7, #4]
 8038170:	460b      	mov	r3, r1
 8038172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038174:	687b      	ldr	r3, [r7, #4]
 8038176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8038178:	68fb      	ldr	r3, [r7, #12]
 803817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803817e:	681a      	ldr	r2, [r3, #0]
 8038180:	78fb      	ldrb	r3, [r7, #3]
 8038182:	68f9      	ldr	r1, [r7, #12]
 8038184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038188:	4313      	orrs	r3, r2
 803818a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 803818c:	2300      	movs	r3, #0
}
 803818e:	4618      	mov	r0, r3
 8038190:	3714      	adds	r7, #20
 8038192:	46bd      	mov	sp, r7
 8038194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038198:	4770      	bx	lr

0803819a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 803819a:	b480      	push	{r7}
 803819c:	b087      	sub	sp, #28
 803819e:	af00      	add	r7, sp, #0
 80381a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381a2:	687b      	ldr	r3, [r7, #4]
 80381a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80381a6:	693b      	ldr	r3, [r7, #16]
 80381a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381ac:	689b      	ldr	r3, [r3, #8]
 80381ae:	f003 0306 	and.w	r3, r3, #6
 80381b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80381b4:	68fb      	ldr	r3, [r7, #12]
 80381b6:	2b00      	cmp	r3, #0
 80381b8:	d102      	bne.n	80381c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80381ba:	2300      	movs	r3, #0
 80381bc:	75fb      	strb	r3, [r7, #23]
 80381be:	e00a      	b.n	80381d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80381c0:	68fb      	ldr	r3, [r7, #12]
 80381c2:	2b02      	cmp	r3, #2
 80381c4:	d002      	beq.n	80381cc <USB_GetDevSpeed+0x32>
 80381c6:	68fb      	ldr	r3, [r7, #12]
 80381c8:	2b06      	cmp	r3, #6
 80381ca:	d102      	bne.n	80381d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80381cc:	2302      	movs	r3, #2
 80381ce:	75fb      	strb	r3, [r7, #23]
 80381d0:	e001      	b.n	80381d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80381d2:	230f      	movs	r3, #15
 80381d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80381d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80381d8:	4618      	mov	r0, r3
 80381da:	371c      	adds	r7, #28
 80381dc:	46bd      	mov	sp, r7
 80381de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381e2:	4770      	bx	lr

080381e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80381e4:	b480      	push	{r7}
 80381e6:	b085      	sub	sp, #20
 80381e8:	af00      	add	r7, sp, #0
 80381ea:	6078      	str	r0, [r7, #4]
 80381ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381ee:	687b      	ldr	r3, [r7, #4]
 80381f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80381f2:	683b      	ldr	r3, [r7, #0]
 80381f4:	781b      	ldrb	r3, [r3, #0]
 80381f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80381f8:	683b      	ldr	r3, [r7, #0]
 80381fa:	785b      	ldrb	r3, [r3, #1]
 80381fc:	2b01      	cmp	r3, #1
 80381fe:	d139      	bne.n	8038274 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8038200:	68fb      	ldr	r3, [r7, #12]
 8038202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038206:	69da      	ldr	r2, [r3, #28]
 8038208:	683b      	ldr	r3, [r7, #0]
 803820a:	781b      	ldrb	r3, [r3, #0]
 803820c:	f003 030f 	and.w	r3, r3, #15
 8038210:	2101      	movs	r1, #1
 8038212:	fa01 f303 	lsl.w	r3, r1, r3
 8038216:	b29b      	uxth	r3, r3
 8038218:	68f9      	ldr	r1, [r7, #12]
 803821a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803821e:	4313      	orrs	r3, r2
 8038220:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8038222:	68bb      	ldr	r3, [r7, #8]
 8038224:	015a      	lsls	r2, r3, #5
 8038226:	68fb      	ldr	r3, [r7, #12]
 8038228:	4413      	add	r3, r2
 803822a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803822e:	681b      	ldr	r3, [r3, #0]
 8038230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8038234:	2b00      	cmp	r3, #0
 8038236:	d153      	bne.n	80382e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038238:	68bb      	ldr	r3, [r7, #8]
 803823a:	015a      	lsls	r2, r3, #5
 803823c:	68fb      	ldr	r3, [r7, #12]
 803823e:	4413      	add	r3, r2
 8038240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038244:	681a      	ldr	r2, [r3, #0]
 8038246:	683b      	ldr	r3, [r7, #0]
 8038248:	68db      	ldr	r3, [r3, #12]
 803824a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803824e:	683b      	ldr	r3, [r7, #0]
 8038250:	791b      	ldrb	r3, [r3, #4]
 8038252:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038254:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8038256:	68bb      	ldr	r3, [r7, #8]
 8038258:	059b      	lsls	r3, r3, #22
 803825a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803825c:	431a      	orrs	r2, r3
 803825e:	68bb      	ldr	r3, [r7, #8]
 8038260:	0159      	lsls	r1, r3, #5
 8038262:	68fb      	ldr	r3, [r7, #12]
 8038264:	440b      	add	r3, r1
 8038266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803826a:	4619      	mov	r1, r3
 803826c:	4b20      	ldr	r3, [pc, #128]	; (80382f0 <USB_ActivateEndpoint+0x10c>)
 803826e:	4313      	orrs	r3, r2
 8038270:	600b      	str	r3, [r1, #0]
 8038272:	e035      	b.n	80382e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8038274:	68fb      	ldr	r3, [r7, #12]
 8038276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803827a:	69da      	ldr	r2, [r3, #28]
 803827c:	683b      	ldr	r3, [r7, #0]
 803827e:	781b      	ldrb	r3, [r3, #0]
 8038280:	f003 030f 	and.w	r3, r3, #15
 8038284:	2101      	movs	r1, #1
 8038286:	fa01 f303 	lsl.w	r3, r1, r3
 803828a:	041b      	lsls	r3, r3, #16
 803828c:	68f9      	ldr	r1, [r7, #12]
 803828e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038292:	4313      	orrs	r3, r2
 8038294:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8038296:	68bb      	ldr	r3, [r7, #8]
 8038298:	015a      	lsls	r2, r3, #5
 803829a:	68fb      	ldr	r3, [r7, #12]
 803829c:	4413      	add	r3, r2
 803829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382a2:	681b      	ldr	r3, [r3, #0]
 80382a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80382a8:	2b00      	cmp	r3, #0
 80382aa:	d119      	bne.n	80382e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80382ac:	68bb      	ldr	r3, [r7, #8]
 80382ae:	015a      	lsls	r2, r3, #5
 80382b0:	68fb      	ldr	r3, [r7, #12]
 80382b2:	4413      	add	r3, r2
 80382b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382b8:	681a      	ldr	r2, [r3, #0]
 80382ba:	683b      	ldr	r3, [r7, #0]
 80382bc:	68db      	ldr	r3, [r3, #12]
 80382be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80382c2:	683b      	ldr	r3, [r7, #0]
 80382c4:	791b      	ldrb	r3, [r3, #4]
 80382c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80382c8:	430b      	orrs	r3, r1
 80382ca:	431a      	orrs	r2, r3
 80382cc:	68bb      	ldr	r3, [r7, #8]
 80382ce:	0159      	lsls	r1, r3, #5
 80382d0:	68fb      	ldr	r3, [r7, #12]
 80382d2:	440b      	add	r3, r1
 80382d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382d8:	4619      	mov	r1, r3
 80382da:	4b05      	ldr	r3, [pc, #20]	; (80382f0 <USB_ActivateEndpoint+0x10c>)
 80382dc:	4313      	orrs	r3, r2
 80382de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80382e0:	2300      	movs	r3, #0
}
 80382e2:	4618      	mov	r0, r3
 80382e4:	3714      	adds	r7, #20
 80382e6:	46bd      	mov	sp, r7
 80382e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382ec:	4770      	bx	lr
 80382ee:	bf00      	nop
 80382f0:	10008000 	.word	0x10008000

080382f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80382f4:	b480      	push	{r7}
 80382f6:	b085      	sub	sp, #20
 80382f8:	af00      	add	r7, sp, #0
 80382fa:	6078      	str	r0, [r7, #4]
 80382fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80382fe:	687b      	ldr	r3, [r7, #4]
 8038300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038302:	683b      	ldr	r3, [r7, #0]
 8038304:	781b      	ldrb	r3, [r3, #0]
 8038306:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8038308:	683b      	ldr	r3, [r7, #0]
 803830a:	785b      	ldrb	r3, [r3, #1]
 803830c:	2b01      	cmp	r3, #1
 803830e:	d161      	bne.n	80383d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038310:	68bb      	ldr	r3, [r7, #8]
 8038312:	015a      	lsls	r2, r3, #5
 8038314:	68fb      	ldr	r3, [r7, #12]
 8038316:	4413      	add	r3, r2
 8038318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803831c:	681b      	ldr	r3, [r3, #0]
 803831e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038326:	d11f      	bne.n	8038368 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8038328:	68bb      	ldr	r3, [r7, #8]
 803832a:	015a      	lsls	r2, r3, #5
 803832c:	68fb      	ldr	r3, [r7, #12]
 803832e:	4413      	add	r3, r2
 8038330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038334:	681b      	ldr	r3, [r3, #0]
 8038336:	68ba      	ldr	r2, [r7, #8]
 8038338:	0151      	lsls	r1, r2, #5
 803833a:	68fa      	ldr	r2, [r7, #12]
 803833c:	440a      	add	r2, r1
 803833e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038346:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8038348:	68bb      	ldr	r3, [r7, #8]
 803834a:	015a      	lsls	r2, r3, #5
 803834c:	68fb      	ldr	r3, [r7, #12]
 803834e:	4413      	add	r3, r2
 8038350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038354:	681b      	ldr	r3, [r3, #0]
 8038356:	68ba      	ldr	r2, [r7, #8]
 8038358:	0151      	lsls	r1, r2, #5
 803835a:	68fa      	ldr	r2, [r7, #12]
 803835c:	440a      	add	r2, r1
 803835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8038368:	68fb      	ldr	r3, [r7, #12]
 803836a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803836e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8038370:	683b      	ldr	r3, [r7, #0]
 8038372:	781b      	ldrb	r3, [r3, #0]
 8038374:	f003 030f 	and.w	r3, r3, #15
 8038378:	2101      	movs	r1, #1
 803837a:	fa01 f303 	lsl.w	r3, r1, r3
 803837e:	b29b      	uxth	r3, r3
 8038380:	43db      	mvns	r3, r3
 8038382:	68f9      	ldr	r1, [r7, #12]
 8038384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038388:	4013      	ands	r3, r2
 803838a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803838c:	68fb      	ldr	r3, [r7, #12]
 803838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038392:	69da      	ldr	r2, [r3, #28]
 8038394:	683b      	ldr	r3, [r7, #0]
 8038396:	781b      	ldrb	r3, [r3, #0]
 8038398:	f003 030f 	and.w	r3, r3, #15
 803839c:	2101      	movs	r1, #1
 803839e:	fa01 f303 	lsl.w	r3, r1, r3
 80383a2:	b29b      	uxth	r3, r3
 80383a4:	43db      	mvns	r3, r3
 80383a6:	68f9      	ldr	r1, [r7, #12]
 80383a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383ac:	4013      	ands	r3, r2
 80383ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80383b0:	68bb      	ldr	r3, [r7, #8]
 80383b2:	015a      	lsls	r2, r3, #5
 80383b4:	68fb      	ldr	r3, [r7, #12]
 80383b6:	4413      	add	r3, r2
 80383b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383bc:	681a      	ldr	r2, [r3, #0]
 80383be:	68bb      	ldr	r3, [r7, #8]
 80383c0:	0159      	lsls	r1, r3, #5
 80383c2:	68fb      	ldr	r3, [r7, #12]
 80383c4:	440b      	add	r3, r1
 80383c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383ca:	4619      	mov	r1, r3
 80383cc:	4b35      	ldr	r3, [pc, #212]	; (80384a4 <USB_DeactivateEndpoint+0x1b0>)
 80383ce:	4013      	ands	r3, r2
 80383d0:	600b      	str	r3, [r1, #0]
 80383d2:	e060      	b.n	8038496 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80383d4:	68bb      	ldr	r3, [r7, #8]
 80383d6:	015a      	lsls	r2, r3, #5
 80383d8:	68fb      	ldr	r3, [r7, #12]
 80383da:	4413      	add	r3, r2
 80383dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80383e0:	681b      	ldr	r3, [r3, #0]
 80383e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80383e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80383ea:	d11f      	bne.n	803842c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80383ec:	68bb      	ldr	r3, [r7, #8]
 80383ee:	015a      	lsls	r2, r3, #5
 80383f0:	68fb      	ldr	r3, [r7, #12]
 80383f2:	4413      	add	r3, r2
 80383f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80383f8:	681b      	ldr	r3, [r3, #0]
 80383fa:	68ba      	ldr	r2, [r7, #8]
 80383fc:	0151      	lsls	r1, r2, #5
 80383fe:	68fa      	ldr	r2, [r7, #12]
 8038400:	440a      	add	r2, r1
 8038402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803840a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 803840c:	68bb      	ldr	r3, [r7, #8]
 803840e:	015a      	lsls	r2, r3, #5
 8038410:	68fb      	ldr	r3, [r7, #12]
 8038412:	4413      	add	r3, r2
 8038414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038418:	681b      	ldr	r3, [r3, #0]
 803841a:	68ba      	ldr	r2, [r7, #8]
 803841c:	0151      	lsls	r1, r2, #5
 803841e:	68fa      	ldr	r2, [r7, #12]
 8038420:	440a      	add	r2, r1
 8038422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803842a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803842c:	68fb      	ldr	r3, [r7, #12]
 803842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8038434:	683b      	ldr	r3, [r7, #0]
 8038436:	781b      	ldrb	r3, [r3, #0]
 8038438:	f003 030f 	and.w	r3, r3, #15
 803843c:	2101      	movs	r1, #1
 803843e:	fa01 f303 	lsl.w	r3, r1, r3
 8038442:	041b      	lsls	r3, r3, #16
 8038444:	43db      	mvns	r3, r3
 8038446:	68f9      	ldr	r1, [r7, #12]
 8038448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803844c:	4013      	ands	r3, r2
 803844e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038450:	68fb      	ldr	r3, [r7, #12]
 8038452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038456:	69da      	ldr	r2, [r3, #28]
 8038458:	683b      	ldr	r3, [r7, #0]
 803845a:	781b      	ldrb	r3, [r3, #0]
 803845c:	f003 030f 	and.w	r3, r3, #15
 8038460:	2101      	movs	r1, #1
 8038462:	fa01 f303 	lsl.w	r3, r1, r3
 8038466:	041b      	lsls	r3, r3, #16
 8038468:	43db      	mvns	r3, r3
 803846a:	68f9      	ldr	r1, [r7, #12]
 803846c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038470:	4013      	ands	r3, r2
 8038472:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8038474:	68bb      	ldr	r3, [r7, #8]
 8038476:	015a      	lsls	r2, r3, #5
 8038478:	68fb      	ldr	r3, [r7, #12]
 803847a:	4413      	add	r3, r2
 803847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038480:	681a      	ldr	r2, [r3, #0]
 8038482:	68bb      	ldr	r3, [r7, #8]
 8038484:	0159      	lsls	r1, r3, #5
 8038486:	68fb      	ldr	r3, [r7, #12]
 8038488:	440b      	add	r3, r1
 803848a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803848e:	4619      	mov	r1, r3
 8038490:	4b05      	ldr	r3, [pc, #20]	; (80384a8 <USB_DeactivateEndpoint+0x1b4>)
 8038492:	4013      	ands	r3, r2
 8038494:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8038496:	2300      	movs	r3, #0
}
 8038498:	4618      	mov	r0, r3
 803849a:	3714      	adds	r7, #20
 803849c:	46bd      	mov	sp, r7
 803849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384a2:	4770      	bx	lr
 80384a4:	ec337800 	.word	0xec337800
 80384a8:	eff37800 	.word	0xeff37800

080384ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80384ac:	b580      	push	{r7, lr}
 80384ae:	b08a      	sub	sp, #40	; 0x28
 80384b0:	af02      	add	r7, sp, #8
 80384b2:	60f8      	str	r0, [r7, #12]
 80384b4:	60b9      	str	r1, [r7, #8]
 80384b6:	4613      	mov	r3, r2
 80384b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80384ba:	68fb      	ldr	r3, [r7, #12]
 80384bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80384be:	68bb      	ldr	r3, [r7, #8]
 80384c0:	781b      	ldrb	r3, [r3, #0]
 80384c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80384c4:	68bb      	ldr	r3, [r7, #8]
 80384c6:	785b      	ldrb	r3, [r3, #1]
 80384c8:	2b01      	cmp	r3, #1
 80384ca:	f040 8163 	bne.w	8038794 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80384ce:	68bb      	ldr	r3, [r7, #8]
 80384d0:	699b      	ldr	r3, [r3, #24]
 80384d2:	2b00      	cmp	r3, #0
 80384d4:	d132      	bne.n	803853c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80384d6:	69bb      	ldr	r3, [r7, #24]
 80384d8:	015a      	lsls	r2, r3, #5
 80384da:	69fb      	ldr	r3, [r7, #28]
 80384dc:	4413      	add	r3, r2
 80384de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384e2:	691a      	ldr	r2, [r3, #16]
 80384e4:	69bb      	ldr	r3, [r7, #24]
 80384e6:	0159      	lsls	r1, r3, #5
 80384e8:	69fb      	ldr	r3, [r7, #28]
 80384ea:	440b      	add	r3, r1
 80384ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384f0:	4619      	mov	r1, r3
 80384f2:	4ba5      	ldr	r3, [pc, #660]	; (8038788 <USB_EPStartXfer+0x2dc>)
 80384f4:	4013      	ands	r3, r2
 80384f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80384f8:	69bb      	ldr	r3, [r7, #24]
 80384fa:	015a      	lsls	r2, r3, #5
 80384fc:	69fb      	ldr	r3, [r7, #28]
 80384fe:	4413      	add	r3, r2
 8038500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038504:	691b      	ldr	r3, [r3, #16]
 8038506:	69ba      	ldr	r2, [r7, #24]
 8038508:	0151      	lsls	r1, r2, #5
 803850a:	69fa      	ldr	r2, [r7, #28]
 803850c:	440a      	add	r2, r1
 803850e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038518:	69bb      	ldr	r3, [r7, #24]
 803851a:	015a      	lsls	r2, r3, #5
 803851c:	69fb      	ldr	r3, [r7, #28]
 803851e:	4413      	add	r3, r2
 8038520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038524:	691a      	ldr	r2, [r3, #16]
 8038526:	69bb      	ldr	r3, [r7, #24]
 8038528:	0159      	lsls	r1, r3, #5
 803852a:	69fb      	ldr	r3, [r7, #28]
 803852c:	440b      	add	r3, r1
 803852e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038532:	4619      	mov	r1, r3
 8038534:	4b95      	ldr	r3, [pc, #596]	; (803878c <USB_EPStartXfer+0x2e0>)
 8038536:	4013      	ands	r3, r2
 8038538:	610b      	str	r3, [r1, #16]
 803853a:	e074      	b.n	8038626 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803853c:	69bb      	ldr	r3, [r7, #24]
 803853e:	015a      	lsls	r2, r3, #5
 8038540:	69fb      	ldr	r3, [r7, #28]
 8038542:	4413      	add	r3, r2
 8038544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038548:	691a      	ldr	r2, [r3, #16]
 803854a:	69bb      	ldr	r3, [r7, #24]
 803854c:	0159      	lsls	r1, r3, #5
 803854e:	69fb      	ldr	r3, [r7, #28]
 8038550:	440b      	add	r3, r1
 8038552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038556:	4619      	mov	r1, r3
 8038558:	4b8c      	ldr	r3, [pc, #560]	; (803878c <USB_EPStartXfer+0x2e0>)
 803855a:	4013      	ands	r3, r2
 803855c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803855e:	69bb      	ldr	r3, [r7, #24]
 8038560:	015a      	lsls	r2, r3, #5
 8038562:	69fb      	ldr	r3, [r7, #28]
 8038564:	4413      	add	r3, r2
 8038566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803856a:	691a      	ldr	r2, [r3, #16]
 803856c:	69bb      	ldr	r3, [r7, #24]
 803856e:	0159      	lsls	r1, r3, #5
 8038570:	69fb      	ldr	r3, [r7, #28]
 8038572:	440b      	add	r3, r1
 8038574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038578:	4619      	mov	r1, r3
 803857a:	4b83      	ldr	r3, [pc, #524]	; (8038788 <USB_EPStartXfer+0x2dc>)
 803857c:	4013      	ands	r3, r2
 803857e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8038580:	69bb      	ldr	r3, [r7, #24]
 8038582:	015a      	lsls	r2, r3, #5
 8038584:	69fb      	ldr	r3, [r7, #28]
 8038586:	4413      	add	r3, r2
 8038588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803858c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 803858e:	68bb      	ldr	r3, [r7, #8]
 8038590:	6999      	ldr	r1, [r3, #24]
 8038592:	68bb      	ldr	r3, [r7, #8]
 8038594:	68db      	ldr	r3, [r3, #12]
 8038596:	440b      	add	r3, r1
 8038598:	1e59      	subs	r1, r3, #1
 803859a:	68bb      	ldr	r3, [r7, #8]
 803859c:	68db      	ldr	r3, [r3, #12]
 803859e:	fbb1 f3f3 	udiv	r3, r1, r3
 80385a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80385a4:	4b7a      	ldr	r3, [pc, #488]	; (8038790 <USB_EPStartXfer+0x2e4>)
 80385a6:	400b      	ands	r3, r1
 80385a8:	69b9      	ldr	r1, [r7, #24]
 80385aa:	0148      	lsls	r0, r1, #5
 80385ac:	69f9      	ldr	r1, [r7, #28]
 80385ae:	4401      	add	r1, r0
 80385b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80385b4:	4313      	orrs	r3, r2
 80385b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80385b8:	69bb      	ldr	r3, [r7, #24]
 80385ba:	015a      	lsls	r2, r3, #5
 80385bc:	69fb      	ldr	r3, [r7, #28]
 80385be:	4413      	add	r3, r2
 80385c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385c4:	691a      	ldr	r2, [r3, #16]
 80385c6:	68bb      	ldr	r3, [r7, #8]
 80385c8:	699b      	ldr	r3, [r3, #24]
 80385ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80385ce:	69b9      	ldr	r1, [r7, #24]
 80385d0:	0148      	lsls	r0, r1, #5
 80385d2:	69f9      	ldr	r1, [r7, #28]
 80385d4:	4401      	add	r1, r0
 80385d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80385da:	4313      	orrs	r3, r2
 80385dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80385de:	68bb      	ldr	r3, [r7, #8]
 80385e0:	791b      	ldrb	r3, [r3, #4]
 80385e2:	2b01      	cmp	r3, #1
 80385e4:	d11f      	bne.n	8038626 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80385e6:	69bb      	ldr	r3, [r7, #24]
 80385e8:	015a      	lsls	r2, r3, #5
 80385ea:	69fb      	ldr	r3, [r7, #28]
 80385ec:	4413      	add	r3, r2
 80385ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385f2:	691b      	ldr	r3, [r3, #16]
 80385f4:	69ba      	ldr	r2, [r7, #24]
 80385f6:	0151      	lsls	r1, r2, #5
 80385f8:	69fa      	ldr	r2, [r7, #28]
 80385fa:	440a      	add	r2, r1
 80385fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038600:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8038604:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8038606:	69bb      	ldr	r3, [r7, #24]
 8038608:	015a      	lsls	r2, r3, #5
 803860a:	69fb      	ldr	r3, [r7, #28]
 803860c:	4413      	add	r3, r2
 803860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038612:	691b      	ldr	r3, [r3, #16]
 8038614:	69ba      	ldr	r2, [r7, #24]
 8038616:	0151      	lsls	r1, r2, #5
 8038618:	69fa      	ldr	r2, [r7, #28]
 803861a:	440a      	add	r2, r1
 803861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038624:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8038626:	79fb      	ldrb	r3, [r7, #7]
 8038628:	2b01      	cmp	r3, #1
 803862a:	d14b      	bne.n	80386c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803862c:	68bb      	ldr	r3, [r7, #8]
 803862e:	695b      	ldr	r3, [r3, #20]
 8038630:	2b00      	cmp	r3, #0
 8038632:	d009      	beq.n	8038648 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038634:	69bb      	ldr	r3, [r7, #24]
 8038636:	015a      	lsls	r2, r3, #5
 8038638:	69fb      	ldr	r3, [r7, #28]
 803863a:	4413      	add	r3, r2
 803863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038640:	461a      	mov	r2, r3
 8038642:	68bb      	ldr	r3, [r7, #8]
 8038644:	695b      	ldr	r3, [r3, #20]
 8038646:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8038648:	68bb      	ldr	r3, [r7, #8]
 803864a:	791b      	ldrb	r3, [r3, #4]
 803864c:	2b01      	cmp	r3, #1
 803864e:	d128      	bne.n	80386a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038650:	69fb      	ldr	r3, [r7, #28]
 8038652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038656:	689b      	ldr	r3, [r3, #8]
 8038658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803865c:	2b00      	cmp	r3, #0
 803865e:	d110      	bne.n	8038682 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8038660:	69bb      	ldr	r3, [r7, #24]
 8038662:	015a      	lsls	r2, r3, #5
 8038664:	69fb      	ldr	r3, [r7, #28]
 8038666:	4413      	add	r3, r2
 8038668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803866c:	681b      	ldr	r3, [r3, #0]
 803866e:	69ba      	ldr	r2, [r7, #24]
 8038670:	0151      	lsls	r1, r2, #5
 8038672:	69fa      	ldr	r2, [r7, #28]
 8038674:	440a      	add	r2, r1
 8038676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803867a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803867e:	6013      	str	r3, [r2, #0]
 8038680:	e00f      	b.n	80386a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8038682:	69bb      	ldr	r3, [r7, #24]
 8038684:	015a      	lsls	r2, r3, #5
 8038686:	69fb      	ldr	r3, [r7, #28]
 8038688:	4413      	add	r3, r2
 803868a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803868e:	681b      	ldr	r3, [r3, #0]
 8038690:	69ba      	ldr	r2, [r7, #24]
 8038692:	0151      	lsls	r1, r2, #5
 8038694:	69fa      	ldr	r2, [r7, #28]
 8038696:	440a      	add	r2, r1
 8038698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803869c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80386a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80386a2:	69bb      	ldr	r3, [r7, #24]
 80386a4:	015a      	lsls	r2, r3, #5
 80386a6:	69fb      	ldr	r3, [r7, #28]
 80386a8:	4413      	add	r3, r2
 80386aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386ae:	681b      	ldr	r3, [r3, #0]
 80386b0:	69ba      	ldr	r2, [r7, #24]
 80386b2:	0151      	lsls	r1, r2, #5
 80386b4:	69fa      	ldr	r2, [r7, #28]
 80386b6:	440a      	add	r2, r1
 80386b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80386c0:	6013      	str	r3, [r2, #0]
 80386c2:	e137      	b.n	8038934 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80386c4:	69bb      	ldr	r3, [r7, #24]
 80386c6:	015a      	lsls	r2, r3, #5
 80386c8:	69fb      	ldr	r3, [r7, #28]
 80386ca:	4413      	add	r3, r2
 80386cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386d0:	681b      	ldr	r3, [r3, #0]
 80386d2:	69ba      	ldr	r2, [r7, #24]
 80386d4:	0151      	lsls	r1, r2, #5
 80386d6:	69fa      	ldr	r2, [r7, #28]
 80386d8:	440a      	add	r2, r1
 80386da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80386e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80386e4:	68bb      	ldr	r3, [r7, #8]
 80386e6:	791b      	ldrb	r3, [r3, #4]
 80386e8:	2b01      	cmp	r3, #1
 80386ea:	d015      	beq.n	8038718 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80386ec:	68bb      	ldr	r3, [r7, #8]
 80386ee:	699b      	ldr	r3, [r3, #24]
 80386f0:	2b00      	cmp	r3, #0
 80386f2:	f000 811f 	beq.w	8038934 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80386f6:	69fb      	ldr	r3, [r7, #28]
 80386f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80386fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80386fe:	68bb      	ldr	r3, [r7, #8]
 8038700:	781b      	ldrb	r3, [r3, #0]
 8038702:	f003 030f 	and.w	r3, r3, #15
 8038706:	2101      	movs	r1, #1
 8038708:	fa01 f303 	lsl.w	r3, r1, r3
 803870c:	69f9      	ldr	r1, [r7, #28]
 803870e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038712:	4313      	orrs	r3, r2
 8038714:	634b      	str	r3, [r1, #52]	; 0x34
 8038716:	e10d      	b.n	8038934 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038718:	69fb      	ldr	r3, [r7, #28]
 803871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803871e:	689b      	ldr	r3, [r3, #8]
 8038720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038724:	2b00      	cmp	r3, #0
 8038726:	d110      	bne.n	803874a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8038728:	69bb      	ldr	r3, [r7, #24]
 803872a:	015a      	lsls	r2, r3, #5
 803872c:	69fb      	ldr	r3, [r7, #28]
 803872e:	4413      	add	r3, r2
 8038730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038734:	681b      	ldr	r3, [r3, #0]
 8038736:	69ba      	ldr	r2, [r7, #24]
 8038738:	0151      	lsls	r1, r2, #5
 803873a:	69fa      	ldr	r2, [r7, #28]
 803873c:	440a      	add	r2, r1
 803873e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038746:	6013      	str	r3, [r2, #0]
 8038748:	e00f      	b.n	803876a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803874a:	69bb      	ldr	r3, [r7, #24]
 803874c:	015a      	lsls	r2, r3, #5
 803874e:	69fb      	ldr	r3, [r7, #28]
 8038750:	4413      	add	r3, r2
 8038752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038756:	681b      	ldr	r3, [r3, #0]
 8038758:	69ba      	ldr	r2, [r7, #24]
 803875a:	0151      	lsls	r1, r2, #5
 803875c:	69fa      	ldr	r2, [r7, #28]
 803875e:	440a      	add	r2, r1
 8038760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038768:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803876a:	68bb      	ldr	r3, [r7, #8]
 803876c:	6919      	ldr	r1, [r3, #16]
 803876e:	68bb      	ldr	r3, [r7, #8]
 8038770:	781a      	ldrb	r2, [r3, #0]
 8038772:	68bb      	ldr	r3, [r7, #8]
 8038774:	699b      	ldr	r3, [r3, #24]
 8038776:	b298      	uxth	r0, r3
 8038778:	79fb      	ldrb	r3, [r7, #7]
 803877a:	9300      	str	r3, [sp, #0]
 803877c:	4603      	mov	r3, r0
 803877e:	68f8      	ldr	r0, [r7, #12]
 8038780:	f000 faea 	bl	8038d58 <USB_WritePacket>
 8038784:	e0d6      	b.n	8038934 <USB_EPStartXfer+0x488>
 8038786:	bf00      	nop
 8038788:	e007ffff 	.word	0xe007ffff
 803878c:	fff80000 	.word	0xfff80000
 8038790:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8038794:	69bb      	ldr	r3, [r7, #24]
 8038796:	015a      	lsls	r2, r3, #5
 8038798:	69fb      	ldr	r3, [r7, #28]
 803879a:	4413      	add	r3, r2
 803879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387a0:	691a      	ldr	r2, [r3, #16]
 80387a2:	69bb      	ldr	r3, [r7, #24]
 80387a4:	0159      	lsls	r1, r3, #5
 80387a6:	69fb      	ldr	r3, [r7, #28]
 80387a8:	440b      	add	r3, r1
 80387aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387ae:	4619      	mov	r1, r3
 80387b0:	4b63      	ldr	r3, [pc, #396]	; (8038940 <USB_EPStartXfer+0x494>)
 80387b2:	4013      	ands	r3, r2
 80387b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80387b6:	69bb      	ldr	r3, [r7, #24]
 80387b8:	015a      	lsls	r2, r3, #5
 80387ba:	69fb      	ldr	r3, [r7, #28]
 80387bc:	4413      	add	r3, r2
 80387be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387c2:	691a      	ldr	r2, [r3, #16]
 80387c4:	69bb      	ldr	r3, [r7, #24]
 80387c6:	0159      	lsls	r1, r3, #5
 80387c8:	69fb      	ldr	r3, [r7, #28]
 80387ca:	440b      	add	r3, r1
 80387cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387d0:	4619      	mov	r1, r3
 80387d2:	4b5c      	ldr	r3, [pc, #368]	; (8038944 <USB_EPStartXfer+0x498>)
 80387d4:	4013      	ands	r3, r2
 80387d6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80387d8:	68bb      	ldr	r3, [r7, #8]
 80387da:	699b      	ldr	r3, [r3, #24]
 80387dc:	2b00      	cmp	r3, #0
 80387de:	d123      	bne.n	8038828 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80387e0:	69bb      	ldr	r3, [r7, #24]
 80387e2:	015a      	lsls	r2, r3, #5
 80387e4:	69fb      	ldr	r3, [r7, #28]
 80387e6:	4413      	add	r3, r2
 80387e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387ec:	691a      	ldr	r2, [r3, #16]
 80387ee:	68bb      	ldr	r3, [r7, #8]
 80387f0:	68db      	ldr	r3, [r3, #12]
 80387f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80387f6:	69b9      	ldr	r1, [r7, #24]
 80387f8:	0148      	lsls	r0, r1, #5
 80387fa:	69f9      	ldr	r1, [r7, #28]
 80387fc:	4401      	add	r1, r0
 80387fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038802:	4313      	orrs	r3, r2
 8038804:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8038806:	69bb      	ldr	r3, [r7, #24]
 8038808:	015a      	lsls	r2, r3, #5
 803880a:	69fb      	ldr	r3, [r7, #28]
 803880c:	4413      	add	r3, r2
 803880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038812:	691b      	ldr	r3, [r3, #16]
 8038814:	69ba      	ldr	r2, [r7, #24]
 8038816:	0151      	lsls	r1, r2, #5
 8038818:	69fa      	ldr	r2, [r7, #28]
 803881a:	440a      	add	r2, r1
 803881c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038824:	6113      	str	r3, [r2, #16]
 8038826:	e037      	b.n	8038898 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8038828:	68bb      	ldr	r3, [r7, #8]
 803882a:	699a      	ldr	r2, [r3, #24]
 803882c:	68bb      	ldr	r3, [r7, #8]
 803882e:	68db      	ldr	r3, [r3, #12]
 8038830:	4413      	add	r3, r2
 8038832:	1e5a      	subs	r2, r3, #1
 8038834:	68bb      	ldr	r3, [r7, #8]
 8038836:	68db      	ldr	r3, [r3, #12]
 8038838:	fbb2 f3f3 	udiv	r3, r2, r3
 803883c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 803883e:	68bb      	ldr	r3, [r7, #8]
 8038840:	68db      	ldr	r3, [r3, #12]
 8038842:	8afa      	ldrh	r2, [r7, #22]
 8038844:	fb03 f202 	mul.w	r2, r3, r2
 8038848:	68bb      	ldr	r3, [r7, #8]
 803884a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 803884c:	69bb      	ldr	r3, [r7, #24]
 803884e:	015a      	lsls	r2, r3, #5
 8038850:	69fb      	ldr	r3, [r7, #28]
 8038852:	4413      	add	r3, r2
 8038854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038858:	691a      	ldr	r2, [r3, #16]
 803885a:	8afb      	ldrh	r3, [r7, #22]
 803885c:	04d9      	lsls	r1, r3, #19
 803885e:	4b3a      	ldr	r3, [pc, #232]	; (8038948 <USB_EPStartXfer+0x49c>)
 8038860:	400b      	ands	r3, r1
 8038862:	69b9      	ldr	r1, [r7, #24]
 8038864:	0148      	lsls	r0, r1, #5
 8038866:	69f9      	ldr	r1, [r7, #28]
 8038868:	4401      	add	r1, r0
 803886a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803886e:	4313      	orrs	r3, r2
 8038870:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8038872:	69bb      	ldr	r3, [r7, #24]
 8038874:	015a      	lsls	r2, r3, #5
 8038876:	69fb      	ldr	r3, [r7, #28]
 8038878:	4413      	add	r3, r2
 803887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803887e:	691a      	ldr	r2, [r3, #16]
 8038880:	68bb      	ldr	r3, [r7, #8]
 8038882:	69db      	ldr	r3, [r3, #28]
 8038884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038888:	69b9      	ldr	r1, [r7, #24]
 803888a:	0148      	lsls	r0, r1, #5
 803888c:	69f9      	ldr	r1, [r7, #28]
 803888e:	4401      	add	r1, r0
 8038890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038894:	4313      	orrs	r3, r2
 8038896:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8038898:	79fb      	ldrb	r3, [r7, #7]
 803889a:	2b01      	cmp	r3, #1
 803889c:	d10d      	bne.n	80388ba <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803889e:	68bb      	ldr	r3, [r7, #8]
 80388a0:	691b      	ldr	r3, [r3, #16]
 80388a2:	2b00      	cmp	r3, #0
 80388a4:	d009      	beq.n	80388ba <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80388a6:	68bb      	ldr	r3, [r7, #8]
 80388a8:	6919      	ldr	r1, [r3, #16]
 80388aa:	69bb      	ldr	r3, [r7, #24]
 80388ac:	015a      	lsls	r2, r3, #5
 80388ae:	69fb      	ldr	r3, [r7, #28]
 80388b0:	4413      	add	r3, r2
 80388b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388b6:	460a      	mov	r2, r1
 80388b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80388ba:	68bb      	ldr	r3, [r7, #8]
 80388bc:	791b      	ldrb	r3, [r3, #4]
 80388be:	2b01      	cmp	r3, #1
 80388c0:	d128      	bne.n	8038914 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80388c2:	69fb      	ldr	r3, [r7, #28]
 80388c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80388c8:	689b      	ldr	r3, [r3, #8]
 80388ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80388ce:	2b00      	cmp	r3, #0
 80388d0:	d110      	bne.n	80388f4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80388d2:	69bb      	ldr	r3, [r7, #24]
 80388d4:	015a      	lsls	r2, r3, #5
 80388d6:	69fb      	ldr	r3, [r7, #28]
 80388d8:	4413      	add	r3, r2
 80388da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388de:	681b      	ldr	r3, [r3, #0]
 80388e0:	69ba      	ldr	r2, [r7, #24]
 80388e2:	0151      	lsls	r1, r2, #5
 80388e4:	69fa      	ldr	r2, [r7, #28]
 80388e6:	440a      	add	r2, r1
 80388e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80388ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80388f0:	6013      	str	r3, [r2, #0]
 80388f2:	e00f      	b.n	8038914 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80388f4:	69bb      	ldr	r3, [r7, #24]
 80388f6:	015a      	lsls	r2, r3, #5
 80388f8:	69fb      	ldr	r3, [r7, #28]
 80388fa:	4413      	add	r3, r2
 80388fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038900:	681b      	ldr	r3, [r3, #0]
 8038902:	69ba      	ldr	r2, [r7, #24]
 8038904:	0151      	lsls	r1, r2, #5
 8038906:	69fa      	ldr	r2, [r7, #28]
 8038908:	440a      	add	r2, r1
 803890a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803890e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038912:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038914:	69bb      	ldr	r3, [r7, #24]
 8038916:	015a      	lsls	r2, r3, #5
 8038918:	69fb      	ldr	r3, [r7, #28]
 803891a:	4413      	add	r3, r2
 803891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038920:	681b      	ldr	r3, [r3, #0]
 8038922:	69ba      	ldr	r2, [r7, #24]
 8038924:	0151      	lsls	r1, r2, #5
 8038926:	69fa      	ldr	r2, [r7, #28]
 8038928:	440a      	add	r2, r1
 803892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803892e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038934:	2300      	movs	r3, #0
}
 8038936:	4618      	mov	r0, r3
 8038938:	3720      	adds	r7, #32
 803893a:	46bd      	mov	sp, r7
 803893c:	bd80      	pop	{r7, pc}
 803893e:	bf00      	nop
 8038940:	fff80000 	.word	0xfff80000
 8038944:	e007ffff 	.word	0xe007ffff
 8038948:	1ff80000 	.word	0x1ff80000

0803894c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803894c:	b480      	push	{r7}
 803894e:	b087      	sub	sp, #28
 8038950:	af00      	add	r7, sp, #0
 8038952:	60f8      	str	r0, [r7, #12]
 8038954:	60b9      	str	r1, [r7, #8]
 8038956:	4613      	mov	r3, r2
 8038958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803895a:	68fb      	ldr	r3, [r7, #12]
 803895c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 803895e:	68bb      	ldr	r3, [r7, #8]
 8038960:	781b      	ldrb	r3, [r3, #0]
 8038962:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038964:	68bb      	ldr	r3, [r7, #8]
 8038966:	785b      	ldrb	r3, [r3, #1]
 8038968:	2b01      	cmp	r3, #1
 803896a:	f040 80ce 	bne.w	8038b0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803896e:	68bb      	ldr	r3, [r7, #8]
 8038970:	699b      	ldr	r3, [r3, #24]
 8038972:	2b00      	cmp	r3, #0
 8038974:	d132      	bne.n	80389dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038976:	693b      	ldr	r3, [r7, #16]
 8038978:	015a      	lsls	r2, r3, #5
 803897a:	697b      	ldr	r3, [r7, #20]
 803897c:	4413      	add	r3, r2
 803897e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038982:	691a      	ldr	r2, [r3, #16]
 8038984:	693b      	ldr	r3, [r7, #16]
 8038986:	0159      	lsls	r1, r3, #5
 8038988:	697b      	ldr	r3, [r7, #20]
 803898a:	440b      	add	r3, r1
 803898c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038990:	4619      	mov	r1, r3
 8038992:	4b9a      	ldr	r3, [pc, #616]	; (8038bfc <USB_EP0StartXfer+0x2b0>)
 8038994:	4013      	ands	r3, r2
 8038996:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038998:	693b      	ldr	r3, [r7, #16]
 803899a:	015a      	lsls	r2, r3, #5
 803899c:	697b      	ldr	r3, [r7, #20]
 803899e:	4413      	add	r3, r2
 80389a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389a4:	691b      	ldr	r3, [r3, #16]
 80389a6:	693a      	ldr	r2, [r7, #16]
 80389a8:	0151      	lsls	r1, r2, #5
 80389aa:	697a      	ldr	r2, [r7, #20]
 80389ac:	440a      	add	r2, r1
 80389ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80389b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80389b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80389b8:	693b      	ldr	r3, [r7, #16]
 80389ba:	015a      	lsls	r2, r3, #5
 80389bc:	697b      	ldr	r3, [r7, #20]
 80389be:	4413      	add	r3, r2
 80389c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389c4:	691a      	ldr	r2, [r3, #16]
 80389c6:	693b      	ldr	r3, [r7, #16]
 80389c8:	0159      	lsls	r1, r3, #5
 80389ca:	697b      	ldr	r3, [r7, #20]
 80389cc:	440b      	add	r3, r1
 80389ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389d2:	4619      	mov	r1, r3
 80389d4:	4b8a      	ldr	r3, [pc, #552]	; (8038c00 <USB_EP0StartXfer+0x2b4>)
 80389d6:	4013      	ands	r3, r2
 80389d8:	610b      	str	r3, [r1, #16]
 80389da:	e04e      	b.n	8038a7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80389dc:	693b      	ldr	r3, [r7, #16]
 80389de:	015a      	lsls	r2, r3, #5
 80389e0:	697b      	ldr	r3, [r7, #20]
 80389e2:	4413      	add	r3, r2
 80389e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389e8:	691a      	ldr	r2, [r3, #16]
 80389ea:	693b      	ldr	r3, [r7, #16]
 80389ec:	0159      	lsls	r1, r3, #5
 80389ee:	697b      	ldr	r3, [r7, #20]
 80389f0:	440b      	add	r3, r1
 80389f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389f6:	4619      	mov	r1, r3
 80389f8:	4b81      	ldr	r3, [pc, #516]	; (8038c00 <USB_EP0StartXfer+0x2b4>)
 80389fa:	4013      	ands	r3, r2
 80389fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80389fe:	693b      	ldr	r3, [r7, #16]
 8038a00:	015a      	lsls	r2, r3, #5
 8038a02:	697b      	ldr	r3, [r7, #20]
 8038a04:	4413      	add	r3, r2
 8038a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a0a:	691a      	ldr	r2, [r3, #16]
 8038a0c:	693b      	ldr	r3, [r7, #16]
 8038a0e:	0159      	lsls	r1, r3, #5
 8038a10:	697b      	ldr	r3, [r7, #20]
 8038a12:	440b      	add	r3, r1
 8038a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a18:	4619      	mov	r1, r3
 8038a1a:	4b78      	ldr	r3, [pc, #480]	; (8038bfc <USB_EP0StartXfer+0x2b0>)
 8038a1c:	4013      	ands	r3, r2
 8038a1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8038a20:	68bb      	ldr	r3, [r7, #8]
 8038a22:	699a      	ldr	r2, [r3, #24]
 8038a24:	68bb      	ldr	r3, [r7, #8]
 8038a26:	68db      	ldr	r3, [r3, #12]
 8038a28:	429a      	cmp	r2, r3
 8038a2a:	d903      	bls.n	8038a34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8038a2c:	68bb      	ldr	r3, [r7, #8]
 8038a2e:	68da      	ldr	r2, [r3, #12]
 8038a30:	68bb      	ldr	r3, [r7, #8]
 8038a32:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038a34:	693b      	ldr	r3, [r7, #16]
 8038a36:	015a      	lsls	r2, r3, #5
 8038a38:	697b      	ldr	r3, [r7, #20]
 8038a3a:	4413      	add	r3, r2
 8038a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a40:	691b      	ldr	r3, [r3, #16]
 8038a42:	693a      	ldr	r2, [r7, #16]
 8038a44:	0151      	lsls	r1, r2, #5
 8038a46:	697a      	ldr	r2, [r7, #20]
 8038a48:	440a      	add	r2, r1
 8038a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8038a54:	693b      	ldr	r3, [r7, #16]
 8038a56:	015a      	lsls	r2, r3, #5
 8038a58:	697b      	ldr	r3, [r7, #20]
 8038a5a:	4413      	add	r3, r2
 8038a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a60:	691a      	ldr	r2, [r3, #16]
 8038a62:	68bb      	ldr	r3, [r7, #8]
 8038a64:	699b      	ldr	r3, [r3, #24]
 8038a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038a6a:	6939      	ldr	r1, [r7, #16]
 8038a6c:	0148      	lsls	r0, r1, #5
 8038a6e:	6979      	ldr	r1, [r7, #20]
 8038a70:	4401      	add	r1, r0
 8038a72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8038a76:	4313      	orrs	r3, r2
 8038a78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8038a7a:	79fb      	ldrb	r3, [r7, #7]
 8038a7c:	2b01      	cmp	r3, #1
 8038a7e:	d11e      	bne.n	8038abe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038a80:	68bb      	ldr	r3, [r7, #8]
 8038a82:	695b      	ldr	r3, [r3, #20]
 8038a84:	2b00      	cmp	r3, #0
 8038a86:	d009      	beq.n	8038a9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038a88:	693b      	ldr	r3, [r7, #16]
 8038a8a:	015a      	lsls	r2, r3, #5
 8038a8c:	697b      	ldr	r3, [r7, #20]
 8038a8e:	4413      	add	r3, r2
 8038a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a94:	461a      	mov	r2, r3
 8038a96:	68bb      	ldr	r3, [r7, #8]
 8038a98:	695b      	ldr	r3, [r3, #20]
 8038a9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038a9c:	693b      	ldr	r3, [r7, #16]
 8038a9e:	015a      	lsls	r2, r3, #5
 8038aa0:	697b      	ldr	r3, [r7, #20]
 8038aa2:	4413      	add	r3, r2
 8038aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038aa8:	681b      	ldr	r3, [r3, #0]
 8038aaa:	693a      	ldr	r2, [r7, #16]
 8038aac:	0151      	lsls	r1, r2, #5
 8038aae:	697a      	ldr	r2, [r7, #20]
 8038ab0:	440a      	add	r2, r1
 8038ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038aba:	6013      	str	r3, [r2, #0]
 8038abc:	e097      	b.n	8038bee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038abe:	693b      	ldr	r3, [r7, #16]
 8038ac0:	015a      	lsls	r2, r3, #5
 8038ac2:	697b      	ldr	r3, [r7, #20]
 8038ac4:	4413      	add	r3, r2
 8038ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038aca:	681b      	ldr	r3, [r3, #0]
 8038acc:	693a      	ldr	r2, [r7, #16]
 8038ace:	0151      	lsls	r1, r2, #5
 8038ad0:	697a      	ldr	r2, [r7, #20]
 8038ad2:	440a      	add	r2, r1
 8038ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038adc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8038ade:	68bb      	ldr	r3, [r7, #8]
 8038ae0:	699b      	ldr	r3, [r3, #24]
 8038ae2:	2b00      	cmp	r3, #0
 8038ae4:	f000 8083 	beq.w	8038bee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8038ae8:	697b      	ldr	r3, [r7, #20]
 8038aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038af0:	68bb      	ldr	r3, [r7, #8]
 8038af2:	781b      	ldrb	r3, [r3, #0]
 8038af4:	f003 030f 	and.w	r3, r3, #15
 8038af8:	2101      	movs	r1, #1
 8038afa:	fa01 f303 	lsl.w	r3, r1, r3
 8038afe:	6979      	ldr	r1, [r7, #20]
 8038b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038b04:	4313      	orrs	r3, r2
 8038b06:	634b      	str	r3, [r1, #52]	; 0x34
 8038b08:	e071      	b.n	8038bee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8038b0a:	693b      	ldr	r3, [r7, #16]
 8038b0c:	015a      	lsls	r2, r3, #5
 8038b0e:	697b      	ldr	r3, [r7, #20]
 8038b10:	4413      	add	r3, r2
 8038b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b16:	691a      	ldr	r2, [r3, #16]
 8038b18:	693b      	ldr	r3, [r7, #16]
 8038b1a:	0159      	lsls	r1, r3, #5
 8038b1c:	697b      	ldr	r3, [r7, #20]
 8038b1e:	440b      	add	r3, r1
 8038b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b24:	4619      	mov	r1, r3
 8038b26:	4b36      	ldr	r3, [pc, #216]	; (8038c00 <USB_EP0StartXfer+0x2b4>)
 8038b28:	4013      	ands	r3, r2
 8038b2a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8038b2c:	693b      	ldr	r3, [r7, #16]
 8038b2e:	015a      	lsls	r2, r3, #5
 8038b30:	697b      	ldr	r3, [r7, #20]
 8038b32:	4413      	add	r3, r2
 8038b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b38:	691a      	ldr	r2, [r3, #16]
 8038b3a:	693b      	ldr	r3, [r7, #16]
 8038b3c:	0159      	lsls	r1, r3, #5
 8038b3e:	697b      	ldr	r3, [r7, #20]
 8038b40:	440b      	add	r3, r1
 8038b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b46:	4619      	mov	r1, r3
 8038b48:	4b2c      	ldr	r3, [pc, #176]	; (8038bfc <USB_EP0StartXfer+0x2b0>)
 8038b4a:	4013      	ands	r3, r2
 8038b4c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8038b4e:	68bb      	ldr	r3, [r7, #8]
 8038b50:	699b      	ldr	r3, [r3, #24]
 8038b52:	2b00      	cmp	r3, #0
 8038b54:	d003      	beq.n	8038b5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8038b56:	68bb      	ldr	r3, [r7, #8]
 8038b58:	68da      	ldr	r2, [r3, #12]
 8038b5a:	68bb      	ldr	r3, [r7, #8]
 8038b5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8038b5e:	68bb      	ldr	r3, [r7, #8]
 8038b60:	68da      	ldr	r2, [r3, #12]
 8038b62:	68bb      	ldr	r3, [r7, #8]
 8038b64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8038b66:	693b      	ldr	r3, [r7, #16]
 8038b68:	015a      	lsls	r2, r3, #5
 8038b6a:	697b      	ldr	r3, [r7, #20]
 8038b6c:	4413      	add	r3, r2
 8038b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b72:	691b      	ldr	r3, [r3, #16]
 8038b74:	693a      	ldr	r2, [r7, #16]
 8038b76:	0151      	lsls	r1, r2, #5
 8038b78:	697a      	ldr	r2, [r7, #20]
 8038b7a:	440a      	add	r2, r1
 8038b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8038b86:	693b      	ldr	r3, [r7, #16]
 8038b88:	015a      	lsls	r2, r3, #5
 8038b8a:	697b      	ldr	r3, [r7, #20]
 8038b8c:	4413      	add	r3, r2
 8038b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b92:	691a      	ldr	r2, [r3, #16]
 8038b94:	68bb      	ldr	r3, [r7, #8]
 8038b96:	69db      	ldr	r3, [r3, #28]
 8038b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038b9c:	6939      	ldr	r1, [r7, #16]
 8038b9e:	0148      	lsls	r0, r1, #5
 8038ba0:	6979      	ldr	r1, [r7, #20]
 8038ba2:	4401      	add	r1, r0
 8038ba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038ba8:	4313      	orrs	r3, r2
 8038baa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8038bac:	79fb      	ldrb	r3, [r7, #7]
 8038bae:	2b01      	cmp	r3, #1
 8038bb0:	d10d      	bne.n	8038bce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8038bb2:	68bb      	ldr	r3, [r7, #8]
 8038bb4:	691b      	ldr	r3, [r3, #16]
 8038bb6:	2b00      	cmp	r3, #0
 8038bb8:	d009      	beq.n	8038bce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8038bba:	68bb      	ldr	r3, [r7, #8]
 8038bbc:	6919      	ldr	r1, [r3, #16]
 8038bbe:	693b      	ldr	r3, [r7, #16]
 8038bc0:	015a      	lsls	r2, r3, #5
 8038bc2:	697b      	ldr	r3, [r7, #20]
 8038bc4:	4413      	add	r3, r2
 8038bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bca:	460a      	mov	r2, r1
 8038bcc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038bce:	693b      	ldr	r3, [r7, #16]
 8038bd0:	015a      	lsls	r2, r3, #5
 8038bd2:	697b      	ldr	r3, [r7, #20]
 8038bd4:	4413      	add	r3, r2
 8038bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bda:	681b      	ldr	r3, [r3, #0]
 8038bdc:	693a      	ldr	r2, [r7, #16]
 8038bde:	0151      	lsls	r1, r2, #5
 8038be0:	697a      	ldr	r2, [r7, #20]
 8038be2:	440a      	add	r2, r1
 8038be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038be8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038bec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038bee:	2300      	movs	r3, #0
}
 8038bf0:	4618      	mov	r0, r3
 8038bf2:	371c      	adds	r7, #28
 8038bf4:	46bd      	mov	sp, r7
 8038bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038bfa:	4770      	bx	lr
 8038bfc:	e007ffff 	.word	0xe007ffff
 8038c00:	fff80000 	.word	0xfff80000

08038c04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038c04:	b480      	push	{r7}
 8038c06:	b087      	sub	sp, #28
 8038c08:	af00      	add	r7, sp, #0
 8038c0a:	6078      	str	r0, [r7, #4]
 8038c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038c0e:	2300      	movs	r3, #0
 8038c10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8038c12:	2300      	movs	r3, #0
 8038c14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038c16:	687b      	ldr	r3, [r7, #4]
 8038c18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038c1a:	683b      	ldr	r3, [r7, #0]
 8038c1c:	785b      	ldrb	r3, [r3, #1]
 8038c1e:	2b01      	cmp	r3, #1
 8038c20:	d14a      	bne.n	8038cb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038c22:	683b      	ldr	r3, [r7, #0]
 8038c24:	781b      	ldrb	r3, [r3, #0]
 8038c26:	015a      	lsls	r2, r3, #5
 8038c28:	693b      	ldr	r3, [r7, #16]
 8038c2a:	4413      	add	r3, r2
 8038c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c30:	681b      	ldr	r3, [r3, #0]
 8038c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038c3a:	f040 8086 	bne.w	8038d4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8038c3e:	683b      	ldr	r3, [r7, #0]
 8038c40:	781b      	ldrb	r3, [r3, #0]
 8038c42:	015a      	lsls	r2, r3, #5
 8038c44:	693b      	ldr	r3, [r7, #16]
 8038c46:	4413      	add	r3, r2
 8038c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c4c:	681b      	ldr	r3, [r3, #0]
 8038c4e:	683a      	ldr	r2, [r7, #0]
 8038c50:	7812      	ldrb	r2, [r2, #0]
 8038c52:	0151      	lsls	r1, r2, #5
 8038c54:	693a      	ldr	r2, [r7, #16]
 8038c56:	440a      	add	r2, r1
 8038c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038c60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8038c62:	683b      	ldr	r3, [r7, #0]
 8038c64:	781b      	ldrb	r3, [r3, #0]
 8038c66:	015a      	lsls	r2, r3, #5
 8038c68:	693b      	ldr	r3, [r7, #16]
 8038c6a:	4413      	add	r3, r2
 8038c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c70:	681b      	ldr	r3, [r3, #0]
 8038c72:	683a      	ldr	r2, [r7, #0]
 8038c74:	7812      	ldrb	r2, [r2, #0]
 8038c76:	0151      	lsls	r1, r2, #5
 8038c78:	693a      	ldr	r2, [r7, #16]
 8038c7a:	440a      	add	r2, r1
 8038c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038c86:	68fb      	ldr	r3, [r7, #12]
 8038c88:	3301      	adds	r3, #1
 8038c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038c8c:	68fb      	ldr	r3, [r7, #12]
 8038c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8038c92:	4293      	cmp	r3, r2
 8038c94:	d902      	bls.n	8038c9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8038c96:	2301      	movs	r3, #1
 8038c98:	75fb      	strb	r3, [r7, #23]
          break;
 8038c9a:	e056      	b.n	8038d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8038c9c:	683b      	ldr	r3, [r7, #0]
 8038c9e:	781b      	ldrb	r3, [r3, #0]
 8038ca0:	015a      	lsls	r2, r3, #5
 8038ca2:	693b      	ldr	r3, [r7, #16]
 8038ca4:	4413      	add	r3, r2
 8038ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038caa:	681b      	ldr	r3, [r3, #0]
 8038cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038cb4:	d0e7      	beq.n	8038c86 <USB_EPStopXfer+0x82>
 8038cb6:	e048      	b.n	8038d4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038cb8:	683b      	ldr	r3, [r7, #0]
 8038cba:	781b      	ldrb	r3, [r3, #0]
 8038cbc:	015a      	lsls	r2, r3, #5
 8038cbe:	693b      	ldr	r3, [r7, #16]
 8038cc0:	4413      	add	r3, r2
 8038cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038cc6:	681b      	ldr	r3, [r3, #0]
 8038cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038cd0:	d13b      	bne.n	8038d4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8038cd2:	683b      	ldr	r3, [r7, #0]
 8038cd4:	781b      	ldrb	r3, [r3, #0]
 8038cd6:	015a      	lsls	r2, r3, #5
 8038cd8:	693b      	ldr	r3, [r7, #16]
 8038cda:	4413      	add	r3, r2
 8038cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038ce0:	681b      	ldr	r3, [r3, #0]
 8038ce2:	683a      	ldr	r2, [r7, #0]
 8038ce4:	7812      	ldrb	r2, [r2, #0]
 8038ce6:	0151      	lsls	r1, r2, #5
 8038ce8:	693a      	ldr	r2, [r7, #16]
 8038cea:	440a      	add	r2, r1
 8038cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038cf4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8038cf6:	683b      	ldr	r3, [r7, #0]
 8038cf8:	781b      	ldrb	r3, [r3, #0]
 8038cfa:	015a      	lsls	r2, r3, #5
 8038cfc:	693b      	ldr	r3, [r7, #16]
 8038cfe:	4413      	add	r3, r2
 8038d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d04:	681b      	ldr	r3, [r3, #0]
 8038d06:	683a      	ldr	r2, [r7, #0]
 8038d08:	7812      	ldrb	r2, [r2, #0]
 8038d0a:	0151      	lsls	r1, r2, #5
 8038d0c:	693a      	ldr	r2, [r7, #16]
 8038d0e:	440a      	add	r2, r1
 8038d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038d1a:	68fb      	ldr	r3, [r7, #12]
 8038d1c:	3301      	adds	r3, #1
 8038d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038d20:	68fb      	ldr	r3, [r7, #12]
 8038d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8038d26:	4293      	cmp	r3, r2
 8038d28:	d902      	bls.n	8038d30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8038d2a:	2301      	movs	r3, #1
 8038d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8038d2e:	e00c      	b.n	8038d4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8038d30:	683b      	ldr	r3, [r7, #0]
 8038d32:	781b      	ldrb	r3, [r3, #0]
 8038d34:	015a      	lsls	r2, r3, #5
 8038d36:	693b      	ldr	r3, [r7, #16]
 8038d38:	4413      	add	r3, r2
 8038d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d3e:	681b      	ldr	r3, [r3, #0]
 8038d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038d48:	d0e7      	beq.n	8038d1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8038d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8038d4c:	4618      	mov	r0, r3
 8038d4e:	371c      	adds	r7, #28
 8038d50:	46bd      	mov	sp, r7
 8038d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038d56:	4770      	bx	lr

08038d58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8038d58:	b480      	push	{r7}
 8038d5a:	b089      	sub	sp, #36	; 0x24
 8038d5c:	af00      	add	r7, sp, #0
 8038d5e:	60f8      	str	r0, [r7, #12]
 8038d60:	60b9      	str	r1, [r7, #8]
 8038d62:	4611      	mov	r1, r2
 8038d64:	461a      	mov	r2, r3
 8038d66:	460b      	mov	r3, r1
 8038d68:	71fb      	strb	r3, [r7, #7]
 8038d6a:	4613      	mov	r3, r2
 8038d6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038d6e:	68fb      	ldr	r3, [r7, #12]
 8038d70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8038d72:	68bb      	ldr	r3, [r7, #8]
 8038d74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8038d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8038d7a:	2b00      	cmp	r3, #0
 8038d7c:	d123      	bne.n	8038dc6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8038d7e:	88bb      	ldrh	r3, [r7, #4]
 8038d80:	3303      	adds	r3, #3
 8038d82:	089b      	lsrs	r3, r3, #2
 8038d84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8038d86:	2300      	movs	r3, #0
 8038d88:	61bb      	str	r3, [r7, #24]
 8038d8a:	e018      	b.n	8038dbe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8038d8c:	79fb      	ldrb	r3, [r7, #7]
 8038d8e:	031a      	lsls	r2, r3, #12
 8038d90:	697b      	ldr	r3, [r7, #20]
 8038d92:	4413      	add	r3, r2
 8038d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038d98:	461a      	mov	r2, r3
 8038d9a:	69fb      	ldr	r3, [r7, #28]
 8038d9c:	681b      	ldr	r3, [r3, #0]
 8038d9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8038da0:	69fb      	ldr	r3, [r7, #28]
 8038da2:	3301      	adds	r3, #1
 8038da4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038da6:	69fb      	ldr	r3, [r7, #28]
 8038da8:	3301      	adds	r3, #1
 8038daa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038dac:	69fb      	ldr	r3, [r7, #28]
 8038dae:	3301      	adds	r3, #1
 8038db0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038db2:	69fb      	ldr	r3, [r7, #28]
 8038db4:	3301      	adds	r3, #1
 8038db6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8038db8:	69bb      	ldr	r3, [r7, #24]
 8038dba:	3301      	adds	r3, #1
 8038dbc:	61bb      	str	r3, [r7, #24]
 8038dbe:	69ba      	ldr	r2, [r7, #24]
 8038dc0:	693b      	ldr	r3, [r7, #16]
 8038dc2:	429a      	cmp	r2, r3
 8038dc4:	d3e2      	bcc.n	8038d8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8038dc6:	2300      	movs	r3, #0
}
 8038dc8:	4618      	mov	r0, r3
 8038dca:	3724      	adds	r7, #36	; 0x24
 8038dcc:	46bd      	mov	sp, r7
 8038dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038dd2:	4770      	bx	lr

08038dd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8038dd4:	b480      	push	{r7}
 8038dd6:	b08b      	sub	sp, #44	; 0x2c
 8038dd8:	af00      	add	r7, sp, #0
 8038dda:	60f8      	str	r0, [r7, #12]
 8038ddc:	60b9      	str	r1, [r7, #8]
 8038dde:	4613      	mov	r3, r2
 8038de0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038de2:	68fb      	ldr	r3, [r7, #12]
 8038de4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8038de6:	68bb      	ldr	r3, [r7, #8]
 8038de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8038dea:	88fb      	ldrh	r3, [r7, #6]
 8038dec:	089b      	lsrs	r3, r3, #2
 8038dee:	b29b      	uxth	r3, r3
 8038df0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8038df2:	88fb      	ldrh	r3, [r7, #6]
 8038df4:	f003 0303 	and.w	r3, r3, #3
 8038df8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8038dfa:	2300      	movs	r3, #0
 8038dfc:	623b      	str	r3, [r7, #32]
 8038dfe:	e014      	b.n	8038e2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8038e00:	69bb      	ldr	r3, [r7, #24]
 8038e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e06:	681a      	ldr	r2, [r3, #0]
 8038e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8038e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e0e:	3301      	adds	r3, #1
 8038e10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e14:	3301      	adds	r3, #1
 8038e16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e1a:	3301      	adds	r3, #1
 8038e1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e20:	3301      	adds	r3, #1
 8038e22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8038e24:	6a3b      	ldr	r3, [r7, #32]
 8038e26:	3301      	adds	r3, #1
 8038e28:	623b      	str	r3, [r7, #32]
 8038e2a:	6a3a      	ldr	r2, [r7, #32]
 8038e2c:	697b      	ldr	r3, [r7, #20]
 8038e2e:	429a      	cmp	r2, r3
 8038e30:	d3e6      	bcc.n	8038e00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8038e32:	8bfb      	ldrh	r3, [r7, #30]
 8038e34:	2b00      	cmp	r3, #0
 8038e36:	d01e      	beq.n	8038e76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8038e38:	2300      	movs	r3, #0
 8038e3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8038e3c:	69bb      	ldr	r3, [r7, #24]
 8038e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e42:	461a      	mov	r2, r3
 8038e44:	f107 0310 	add.w	r3, r7, #16
 8038e48:	6812      	ldr	r2, [r2, #0]
 8038e4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8038e4c:	693a      	ldr	r2, [r7, #16]
 8038e4e:	6a3b      	ldr	r3, [r7, #32]
 8038e50:	b2db      	uxtb	r3, r3
 8038e52:	00db      	lsls	r3, r3, #3
 8038e54:	fa22 f303 	lsr.w	r3, r2, r3
 8038e58:	b2da      	uxtb	r2, r3
 8038e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e5c:	701a      	strb	r2, [r3, #0]
      i++;
 8038e5e:	6a3b      	ldr	r3, [r7, #32]
 8038e60:	3301      	adds	r3, #1
 8038e62:	623b      	str	r3, [r7, #32]
      pDest++;
 8038e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e66:	3301      	adds	r3, #1
 8038e68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8038e6a:	8bfb      	ldrh	r3, [r7, #30]
 8038e6c:	3b01      	subs	r3, #1
 8038e6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8038e70:	8bfb      	ldrh	r3, [r7, #30]
 8038e72:	2b00      	cmp	r3, #0
 8038e74:	d1ea      	bne.n	8038e4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8038e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038e78:	4618      	mov	r0, r3
 8038e7a:	372c      	adds	r7, #44	; 0x2c
 8038e7c:	46bd      	mov	sp, r7
 8038e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e82:	4770      	bx	lr

08038e84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038e84:	b480      	push	{r7}
 8038e86:	b085      	sub	sp, #20
 8038e88:	af00      	add	r7, sp, #0
 8038e8a:	6078      	str	r0, [r7, #4]
 8038e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038e8e:	687b      	ldr	r3, [r7, #4]
 8038e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038e92:	683b      	ldr	r3, [r7, #0]
 8038e94:	781b      	ldrb	r3, [r3, #0]
 8038e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038e98:	683b      	ldr	r3, [r7, #0]
 8038e9a:	785b      	ldrb	r3, [r3, #1]
 8038e9c:	2b01      	cmp	r3, #1
 8038e9e:	d12c      	bne.n	8038efa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038ea0:	68bb      	ldr	r3, [r7, #8]
 8038ea2:	015a      	lsls	r2, r3, #5
 8038ea4:	68fb      	ldr	r3, [r7, #12]
 8038ea6:	4413      	add	r3, r2
 8038ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038eac:	681b      	ldr	r3, [r3, #0]
 8038eae:	2b00      	cmp	r3, #0
 8038eb0:	db12      	blt.n	8038ed8 <USB_EPSetStall+0x54>
 8038eb2:	68bb      	ldr	r3, [r7, #8]
 8038eb4:	2b00      	cmp	r3, #0
 8038eb6:	d00f      	beq.n	8038ed8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8038eb8:	68bb      	ldr	r3, [r7, #8]
 8038eba:	015a      	lsls	r2, r3, #5
 8038ebc:	68fb      	ldr	r3, [r7, #12]
 8038ebe:	4413      	add	r3, r2
 8038ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ec4:	681b      	ldr	r3, [r3, #0]
 8038ec6:	68ba      	ldr	r2, [r7, #8]
 8038ec8:	0151      	lsls	r1, r2, #5
 8038eca:	68fa      	ldr	r2, [r7, #12]
 8038ecc:	440a      	add	r2, r1
 8038ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038ed6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8038ed8:	68bb      	ldr	r3, [r7, #8]
 8038eda:	015a      	lsls	r2, r3, #5
 8038edc:	68fb      	ldr	r3, [r7, #12]
 8038ede:	4413      	add	r3, r2
 8038ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ee4:	681b      	ldr	r3, [r3, #0]
 8038ee6:	68ba      	ldr	r2, [r7, #8]
 8038ee8:	0151      	lsls	r1, r2, #5
 8038eea:	68fa      	ldr	r2, [r7, #12]
 8038eec:	440a      	add	r2, r1
 8038eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038ef6:	6013      	str	r3, [r2, #0]
 8038ef8:	e02b      	b.n	8038f52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038efa:	68bb      	ldr	r3, [r7, #8]
 8038efc:	015a      	lsls	r2, r3, #5
 8038efe:	68fb      	ldr	r3, [r7, #12]
 8038f00:	4413      	add	r3, r2
 8038f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f06:	681b      	ldr	r3, [r3, #0]
 8038f08:	2b00      	cmp	r3, #0
 8038f0a:	db12      	blt.n	8038f32 <USB_EPSetStall+0xae>
 8038f0c:	68bb      	ldr	r3, [r7, #8]
 8038f0e:	2b00      	cmp	r3, #0
 8038f10:	d00f      	beq.n	8038f32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8038f12:	68bb      	ldr	r3, [r7, #8]
 8038f14:	015a      	lsls	r2, r3, #5
 8038f16:	68fb      	ldr	r3, [r7, #12]
 8038f18:	4413      	add	r3, r2
 8038f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f1e:	681b      	ldr	r3, [r3, #0]
 8038f20:	68ba      	ldr	r2, [r7, #8]
 8038f22:	0151      	lsls	r1, r2, #5
 8038f24:	68fa      	ldr	r2, [r7, #12]
 8038f26:	440a      	add	r2, r1
 8038f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038f30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8038f32:	68bb      	ldr	r3, [r7, #8]
 8038f34:	015a      	lsls	r2, r3, #5
 8038f36:	68fb      	ldr	r3, [r7, #12]
 8038f38:	4413      	add	r3, r2
 8038f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f3e:	681b      	ldr	r3, [r3, #0]
 8038f40:	68ba      	ldr	r2, [r7, #8]
 8038f42:	0151      	lsls	r1, r2, #5
 8038f44:	68fa      	ldr	r2, [r7, #12]
 8038f46:	440a      	add	r2, r1
 8038f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038f50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038f52:	2300      	movs	r3, #0
}
 8038f54:	4618      	mov	r0, r3
 8038f56:	3714      	adds	r7, #20
 8038f58:	46bd      	mov	sp, r7
 8038f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f5e:	4770      	bx	lr

08038f60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038f60:	b480      	push	{r7}
 8038f62:	b085      	sub	sp, #20
 8038f64:	af00      	add	r7, sp, #0
 8038f66:	6078      	str	r0, [r7, #4]
 8038f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f6a:	687b      	ldr	r3, [r7, #4]
 8038f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038f6e:	683b      	ldr	r3, [r7, #0]
 8038f70:	781b      	ldrb	r3, [r3, #0]
 8038f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038f74:	683b      	ldr	r3, [r7, #0]
 8038f76:	785b      	ldrb	r3, [r3, #1]
 8038f78:	2b01      	cmp	r3, #1
 8038f7a:	d128      	bne.n	8038fce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8038f7c:	68bb      	ldr	r3, [r7, #8]
 8038f7e:	015a      	lsls	r2, r3, #5
 8038f80:	68fb      	ldr	r3, [r7, #12]
 8038f82:	4413      	add	r3, r2
 8038f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f88:	681b      	ldr	r3, [r3, #0]
 8038f8a:	68ba      	ldr	r2, [r7, #8]
 8038f8c:	0151      	lsls	r1, r2, #5
 8038f8e:	68fa      	ldr	r2, [r7, #12]
 8038f90:	440a      	add	r2, r1
 8038f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038f9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038f9c:	683b      	ldr	r3, [r7, #0]
 8038f9e:	791b      	ldrb	r3, [r3, #4]
 8038fa0:	2b03      	cmp	r3, #3
 8038fa2:	d003      	beq.n	8038fac <USB_EPClearStall+0x4c>
 8038fa4:	683b      	ldr	r3, [r7, #0]
 8038fa6:	791b      	ldrb	r3, [r3, #4]
 8038fa8:	2b02      	cmp	r3, #2
 8038faa:	d138      	bne.n	803901e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038fac:	68bb      	ldr	r3, [r7, #8]
 8038fae:	015a      	lsls	r2, r3, #5
 8038fb0:	68fb      	ldr	r3, [r7, #12]
 8038fb2:	4413      	add	r3, r2
 8038fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038fb8:	681b      	ldr	r3, [r3, #0]
 8038fba:	68ba      	ldr	r2, [r7, #8]
 8038fbc:	0151      	lsls	r1, r2, #5
 8038fbe:	68fa      	ldr	r2, [r7, #12]
 8038fc0:	440a      	add	r2, r1
 8038fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038fca:	6013      	str	r3, [r2, #0]
 8038fcc:	e027      	b.n	803901e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8038fce:	68bb      	ldr	r3, [r7, #8]
 8038fd0:	015a      	lsls	r2, r3, #5
 8038fd2:	68fb      	ldr	r3, [r7, #12]
 8038fd4:	4413      	add	r3, r2
 8038fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038fda:	681b      	ldr	r3, [r3, #0]
 8038fdc:	68ba      	ldr	r2, [r7, #8]
 8038fde:	0151      	lsls	r1, r2, #5
 8038fe0:	68fa      	ldr	r2, [r7, #12]
 8038fe2:	440a      	add	r2, r1
 8038fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038fec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038fee:	683b      	ldr	r3, [r7, #0]
 8038ff0:	791b      	ldrb	r3, [r3, #4]
 8038ff2:	2b03      	cmp	r3, #3
 8038ff4:	d003      	beq.n	8038ffe <USB_EPClearStall+0x9e>
 8038ff6:	683b      	ldr	r3, [r7, #0]
 8038ff8:	791b      	ldrb	r3, [r3, #4]
 8038ffa:	2b02      	cmp	r3, #2
 8038ffc:	d10f      	bne.n	803901e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038ffe:	68bb      	ldr	r3, [r7, #8]
 8039000:	015a      	lsls	r2, r3, #5
 8039002:	68fb      	ldr	r3, [r7, #12]
 8039004:	4413      	add	r3, r2
 8039006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803900a:	681b      	ldr	r3, [r3, #0]
 803900c:	68ba      	ldr	r2, [r7, #8]
 803900e:	0151      	lsls	r1, r2, #5
 8039010:	68fa      	ldr	r2, [r7, #12]
 8039012:	440a      	add	r2, r1
 8039014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803901c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803901e:	2300      	movs	r3, #0
}
 8039020:	4618      	mov	r0, r3
 8039022:	3714      	adds	r7, #20
 8039024:	46bd      	mov	sp, r7
 8039026:	f85d 7b04 	ldr.w	r7, [sp], #4
 803902a:	4770      	bx	lr

0803902c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803902c:	b480      	push	{r7}
 803902e:	b085      	sub	sp, #20
 8039030:	af00      	add	r7, sp, #0
 8039032:	6078      	str	r0, [r7, #4]
 8039034:	460b      	mov	r3, r1
 8039036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039038:	687b      	ldr	r3, [r7, #4]
 803903a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803903c:	68fb      	ldr	r3, [r7, #12]
 803903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039042:	681b      	ldr	r3, [r3, #0]
 8039044:	68fa      	ldr	r2, [r7, #12]
 8039046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803904a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803904e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8039050:	68fb      	ldr	r3, [r7, #12]
 8039052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039056:	681a      	ldr	r2, [r3, #0]
 8039058:	78fb      	ldrb	r3, [r7, #3]
 803905a:	011b      	lsls	r3, r3, #4
 803905c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8039060:	68f9      	ldr	r1, [r7, #12]
 8039062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039066:	4313      	orrs	r3, r2
 8039068:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803906a:	2300      	movs	r3, #0
}
 803906c:	4618      	mov	r0, r3
 803906e:	3714      	adds	r7, #20
 8039070:	46bd      	mov	sp, r7
 8039072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039076:	4770      	bx	lr

08039078 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8039078:	b480      	push	{r7}
 803907a:	b085      	sub	sp, #20
 803907c:	af00      	add	r7, sp, #0
 803907e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039080:	687b      	ldr	r3, [r7, #4]
 8039082:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8039084:	68fb      	ldr	r3, [r7, #12]
 8039086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803908a:	681b      	ldr	r3, [r3, #0]
 803908c:	68fa      	ldr	r2, [r7, #12]
 803908e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8039092:	f023 0303 	bic.w	r3, r3, #3
 8039096:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8039098:	68fb      	ldr	r3, [r7, #12]
 803909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803909e:	685b      	ldr	r3, [r3, #4]
 80390a0:	68fa      	ldr	r2, [r7, #12]
 80390a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390a6:	f023 0302 	bic.w	r3, r3, #2
 80390aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80390ac:	2300      	movs	r3, #0
}
 80390ae:	4618      	mov	r0, r3
 80390b0:	3714      	adds	r7, #20
 80390b2:	46bd      	mov	sp, r7
 80390b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390b8:	4770      	bx	lr

080390ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80390ba:	b480      	push	{r7}
 80390bc:	b085      	sub	sp, #20
 80390be:	af00      	add	r7, sp, #0
 80390c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390c2:	687b      	ldr	r3, [r7, #4]
 80390c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80390c6:	68fb      	ldr	r3, [r7, #12]
 80390c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80390cc:	681b      	ldr	r3, [r3, #0]
 80390ce:	68fa      	ldr	r2, [r7, #12]
 80390d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80390d4:	f023 0303 	bic.w	r3, r3, #3
 80390d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80390da:	68fb      	ldr	r3, [r7, #12]
 80390dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390e0:	685b      	ldr	r3, [r3, #4]
 80390e2:	68fa      	ldr	r2, [r7, #12]
 80390e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390e8:	f043 0302 	orr.w	r3, r3, #2
 80390ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80390ee:	2300      	movs	r3, #0
}
 80390f0:	4618      	mov	r0, r3
 80390f2:	3714      	adds	r7, #20
 80390f4:	46bd      	mov	sp, r7
 80390f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390fa:	4770      	bx	lr

080390fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80390fc:	b480      	push	{r7}
 80390fe:	b085      	sub	sp, #20
 8039100:	af00      	add	r7, sp, #0
 8039102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8039104:	687b      	ldr	r3, [r7, #4]
 8039106:	695b      	ldr	r3, [r3, #20]
 8039108:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803910a:	687b      	ldr	r3, [r7, #4]
 803910c:	699b      	ldr	r3, [r3, #24]
 803910e:	68fa      	ldr	r2, [r7, #12]
 8039110:	4013      	ands	r3, r2
 8039112:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8039114:	68fb      	ldr	r3, [r7, #12]
}
 8039116:	4618      	mov	r0, r3
 8039118:	3714      	adds	r7, #20
 803911a:	46bd      	mov	sp, r7
 803911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039120:	4770      	bx	lr

08039122 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8039122:	b480      	push	{r7}
 8039124:	b085      	sub	sp, #20
 8039126:	af00      	add	r7, sp, #0
 8039128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803912a:	687b      	ldr	r3, [r7, #4]
 803912c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803912e:	68fb      	ldr	r3, [r7, #12]
 8039130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039134:	699b      	ldr	r3, [r3, #24]
 8039136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8039138:	68fb      	ldr	r3, [r7, #12]
 803913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803913e:	69db      	ldr	r3, [r3, #28]
 8039140:	68ba      	ldr	r2, [r7, #8]
 8039142:	4013      	ands	r3, r2
 8039144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8039146:	68bb      	ldr	r3, [r7, #8]
 8039148:	0c1b      	lsrs	r3, r3, #16
}
 803914a:	4618      	mov	r0, r3
 803914c:	3714      	adds	r7, #20
 803914e:	46bd      	mov	sp, r7
 8039150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039154:	4770      	bx	lr

08039156 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8039156:	b480      	push	{r7}
 8039158:	b085      	sub	sp, #20
 803915a:	af00      	add	r7, sp, #0
 803915c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803915e:	687b      	ldr	r3, [r7, #4]
 8039160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8039162:	68fb      	ldr	r3, [r7, #12]
 8039164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039168:	699b      	ldr	r3, [r3, #24]
 803916a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803916c:	68fb      	ldr	r3, [r7, #12]
 803916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039172:	69db      	ldr	r3, [r3, #28]
 8039174:	68ba      	ldr	r2, [r7, #8]
 8039176:	4013      	ands	r3, r2
 8039178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803917a:	68bb      	ldr	r3, [r7, #8]
 803917c:	b29b      	uxth	r3, r3
}
 803917e:	4618      	mov	r0, r3
 8039180:	3714      	adds	r7, #20
 8039182:	46bd      	mov	sp, r7
 8039184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039188:	4770      	bx	lr

0803918a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803918a:	b480      	push	{r7}
 803918c:	b085      	sub	sp, #20
 803918e:	af00      	add	r7, sp, #0
 8039190:	6078      	str	r0, [r7, #4]
 8039192:	460b      	mov	r3, r1
 8039194:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039196:	687b      	ldr	r3, [r7, #4]
 8039198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803919a:	78fb      	ldrb	r3, [r7, #3]
 803919c:	015a      	lsls	r2, r3, #5
 803919e:	68fb      	ldr	r3, [r7, #12]
 80391a0:	4413      	add	r3, r2
 80391a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80391a6:	689b      	ldr	r3, [r3, #8]
 80391a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80391aa:	68fb      	ldr	r3, [r7, #12]
 80391ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391b0:	695b      	ldr	r3, [r3, #20]
 80391b2:	68ba      	ldr	r2, [r7, #8]
 80391b4:	4013      	ands	r3, r2
 80391b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80391b8:	68bb      	ldr	r3, [r7, #8]
}
 80391ba:	4618      	mov	r0, r3
 80391bc:	3714      	adds	r7, #20
 80391be:	46bd      	mov	sp, r7
 80391c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391c4:	4770      	bx	lr

080391c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80391c6:	b480      	push	{r7}
 80391c8:	b087      	sub	sp, #28
 80391ca:	af00      	add	r7, sp, #0
 80391cc:	6078      	str	r0, [r7, #4]
 80391ce:	460b      	mov	r3, r1
 80391d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391d2:	687b      	ldr	r3, [r7, #4]
 80391d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80391d6:	697b      	ldr	r3, [r7, #20]
 80391d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391dc:	691b      	ldr	r3, [r3, #16]
 80391de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80391e0:	697b      	ldr	r3, [r7, #20]
 80391e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80391e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80391ea:	78fb      	ldrb	r3, [r7, #3]
 80391ec:	f003 030f 	and.w	r3, r3, #15
 80391f0:	68fa      	ldr	r2, [r7, #12]
 80391f2:	fa22 f303 	lsr.w	r3, r2, r3
 80391f6:	01db      	lsls	r3, r3, #7
 80391f8:	b2db      	uxtb	r3, r3
 80391fa:	693a      	ldr	r2, [r7, #16]
 80391fc:	4313      	orrs	r3, r2
 80391fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8039200:	78fb      	ldrb	r3, [r7, #3]
 8039202:	015a      	lsls	r2, r3, #5
 8039204:	697b      	ldr	r3, [r7, #20]
 8039206:	4413      	add	r3, r2
 8039208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803920c:	689b      	ldr	r3, [r3, #8]
 803920e:	693a      	ldr	r2, [r7, #16]
 8039210:	4013      	ands	r3, r2
 8039212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8039214:	68bb      	ldr	r3, [r7, #8]
}
 8039216:	4618      	mov	r0, r3
 8039218:	371c      	adds	r7, #28
 803921a:	46bd      	mov	sp, r7
 803921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039220:	4770      	bx	lr

08039222 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8039222:	b480      	push	{r7}
 8039224:	b083      	sub	sp, #12
 8039226:	af00      	add	r7, sp, #0
 8039228:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803922a:	687b      	ldr	r3, [r7, #4]
 803922c:	695b      	ldr	r3, [r3, #20]
 803922e:	f003 0301 	and.w	r3, r3, #1
}
 8039232:	4618      	mov	r0, r3
 8039234:	370c      	adds	r7, #12
 8039236:	46bd      	mov	sp, r7
 8039238:	f85d 7b04 	ldr.w	r7, [sp], #4
 803923c:	4770      	bx	lr
	...

08039240 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8039240:	b480      	push	{r7}
 8039242:	b085      	sub	sp, #20
 8039244:	af00      	add	r7, sp, #0
 8039246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039248:	687b      	ldr	r3, [r7, #4]
 803924a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803924c:	68fb      	ldr	r3, [r7, #12]
 803924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039252:	681a      	ldr	r2, [r3, #0]
 8039254:	68fb      	ldr	r3, [r7, #12]
 8039256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803925a:	4619      	mov	r1, r3
 803925c:	4b09      	ldr	r3, [pc, #36]	; (8039284 <USB_ActivateSetup+0x44>)
 803925e:	4013      	ands	r3, r2
 8039260:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8039262:	68fb      	ldr	r3, [r7, #12]
 8039264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039268:	685b      	ldr	r3, [r3, #4]
 803926a:	68fa      	ldr	r2, [r7, #12]
 803926c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8039270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8039274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039276:	2300      	movs	r3, #0
}
 8039278:	4618      	mov	r0, r3
 803927a:	3714      	adds	r7, #20
 803927c:	46bd      	mov	sp, r7
 803927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039282:	4770      	bx	lr
 8039284:	fffff800 	.word	0xfffff800

08039288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8039288:	b480      	push	{r7}
 803928a:	b087      	sub	sp, #28
 803928c:	af00      	add	r7, sp, #0
 803928e:	60f8      	str	r0, [r7, #12]
 8039290:	460b      	mov	r3, r1
 8039292:	607a      	str	r2, [r7, #4]
 8039294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039296:	68fb      	ldr	r3, [r7, #12]
 8039298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803929a:	68fb      	ldr	r3, [r7, #12]
 803929c:	333c      	adds	r3, #60	; 0x3c
 803929e:	3304      	adds	r3, #4
 80392a0:	681b      	ldr	r3, [r3, #0]
 80392a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80392a4:	693b      	ldr	r3, [r7, #16]
 80392a6:	4a26      	ldr	r2, [pc, #152]	; (8039340 <USB_EP0_OutStart+0xb8>)
 80392a8:	4293      	cmp	r3, r2
 80392aa:	d90a      	bls.n	80392c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80392ac:	697b      	ldr	r3, [r7, #20]
 80392ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392b2:	681b      	ldr	r3, [r3, #0]
 80392b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80392b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80392bc:	d101      	bne.n	80392c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80392be:	2300      	movs	r3, #0
 80392c0:	e037      	b.n	8039332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80392c2:	697b      	ldr	r3, [r7, #20]
 80392c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392c8:	461a      	mov	r2, r3
 80392ca:	2300      	movs	r3, #0
 80392cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80392ce:	697b      	ldr	r3, [r7, #20]
 80392d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392d4:	691b      	ldr	r3, [r3, #16]
 80392d6:	697a      	ldr	r2, [r7, #20]
 80392d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80392dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80392e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80392e2:	697b      	ldr	r3, [r7, #20]
 80392e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392e8:	691b      	ldr	r3, [r3, #16]
 80392ea:	697a      	ldr	r2, [r7, #20]
 80392ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80392f0:	f043 0318 	orr.w	r3, r3, #24
 80392f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80392f6:	697b      	ldr	r3, [r7, #20]
 80392f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392fc:	691b      	ldr	r3, [r3, #16]
 80392fe:	697a      	ldr	r2, [r7, #20]
 8039300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039304:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8039308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803930a:	7afb      	ldrb	r3, [r7, #11]
 803930c:	2b01      	cmp	r3, #1
 803930e:	d10f      	bne.n	8039330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8039310:	697b      	ldr	r3, [r7, #20]
 8039312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039316:	461a      	mov	r2, r3
 8039318:	687b      	ldr	r3, [r7, #4]
 803931a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803931c:	697b      	ldr	r3, [r7, #20]
 803931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039322:	681b      	ldr	r3, [r3, #0]
 8039324:	697a      	ldr	r2, [r7, #20]
 8039326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803932a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803932e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039330:	2300      	movs	r3, #0
}
 8039332:	4618      	mov	r0, r3
 8039334:	371c      	adds	r7, #28
 8039336:	46bd      	mov	sp, r7
 8039338:	f85d 7b04 	ldr.w	r7, [sp], #4
 803933c:	4770      	bx	lr
 803933e:	bf00      	nop
 8039340:	4f54300a 	.word	0x4f54300a

08039344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8039344:	b480      	push	{r7}
 8039346:	b085      	sub	sp, #20
 8039348:	af00      	add	r7, sp, #0
 803934a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803934c:	2300      	movs	r3, #0
 803934e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039350:	68fb      	ldr	r3, [r7, #12]
 8039352:	3301      	adds	r3, #1
 8039354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8039356:	68fb      	ldr	r3, [r7, #12]
 8039358:	4a13      	ldr	r2, [pc, #76]	; (80393a8 <USB_CoreReset+0x64>)
 803935a:	4293      	cmp	r3, r2
 803935c:	d901      	bls.n	8039362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803935e:	2303      	movs	r3, #3
 8039360:	e01b      	b.n	803939a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039362:	687b      	ldr	r3, [r7, #4]
 8039364:	691b      	ldr	r3, [r3, #16]
 8039366:	2b00      	cmp	r3, #0
 8039368:	daf2      	bge.n	8039350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803936a:	2300      	movs	r3, #0
 803936c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803936e:	687b      	ldr	r3, [r7, #4]
 8039370:	691b      	ldr	r3, [r3, #16]
 8039372:	f043 0201 	orr.w	r2, r3, #1
 8039376:	687b      	ldr	r3, [r7, #4]
 8039378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803937a:	68fb      	ldr	r3, [r7, #12]
 803937c:	3301      	adds	r3, #1
 803937e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8039380:	68fb      	ldr	r3, [r7, #12]
 8039382:	4a09      	ldr	r2, [pc, #36]	; (80393a8 <USB_CoreReset+0x64>)
 8039384:	4293      	cmp	r3, r2
 8039386:	d901      	bls.n	803938c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8039388:	2303      	movs	r3, #3
 803938a:	e006      	b.n	803939a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803938c:	687b      	ldr	r3, [r7, #4]
 803938e:	691b      	ldr	r3, [r3, #16]
 8039390:	f003 0301 	and.w	r3, r3, #1
 8039394:	2b01      	cmp	r3, #1
 8039396:	d0f0      	beq.n	803937a <USB_CoreReset+0x36>

  return HAL_OK;
 8039398:	2300      	movs	r3, #0
}
 803939a:	4618      	mov	r0, r3
 803939c:	3714      	adds	r7, #20
 803939e:	46bd      	mov	sp, r7
 80393a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393a4:	4770      	bx	lr
 80393a6:	bf00      	nop
 80393a8:	00030d40 	.word	0x00030d40

080393ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80393ac:	b580      	push	{r7, lr}
 80393ae:	b084      	sub	sp, #16
 80393b0:	af00      	add	r7, sp, #0
 80393b2:	6078      	str	r0, [r7, #4]
 80393b4:	460b      	mov	r3, r1
 80393b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80393b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80393bc:	f002 fc54 	bl	803bc68 <USBD_static_malloc>
 80393c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80393c2:	68fb      	ldr	r3, [r7, #12]
 80393c4:	2b00      	cmp	r3, #0
 80393c6:	d109      	bne.n	80393dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80393c8:	687b      	ldr	r3, [r7, #4]
 80393ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80393ce:	687b      	ldr	r3, [r7, #4]
 80393d0:	32b0      	adds	r2, #176	; 0xb0
 80393d2:	2100      	movs	r1, #0
 80393d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80393d8:	2302      	movs	r3, #2
 80393da:	e0d4      	b.n	8039586 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80393dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80393e0:	2100      	movs	r1, #0
 80393e2:	68f8      	ldr	r0, [r7, #12]
 80393e4:	f002 fd42 	bl	803be6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80393e8:	687b      	ldr	r3, [r7, #4]
 80393ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80393ee:	687b      	ldr	r3, [r7, #4]
 80393f0:	32b0      	adds	r2, #176	; 0xb0
 80393f2:	68f9      	ldr	r1, [r7, #12]
 80393f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80393f8:	687b      	ldr	r3, [r7, #4]
 80393fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80393fe:	687b      	ldr	r3, [r7, #4]
 8039400:	32b0      	adds	r2, #176	; 0xb0
 8039402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8039406:	687b      	ldr	r3, [r7, #4]
 8039408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803940c:	687b      	ldr	r3, [r7, #4]
 803940e:	7c1b      	ldrb	r3, [r3, #16]
 8039410:	2b00      	cmp	r3, #0
 8039412:	d138      	bne.n	8039486 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8039414:	4b5e      	ldr	r3, [pc, #376]	; (8039590 <USBD_CDC_Init+0x1e4>)
 8039416:	7819      	ldrb	r1, [r3, #0]
 8039418:	f44f 7300 	mov.w	r3, #512	; 0x200
 803941c:	2202      	movs	r2, #2
 803941e:	6878      	ldr	r0, [r7, #4]
 8039420:	f002 faff 	bl	803ba22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8039424:	4b5a      	ldr	r3, [pc, #360]	; (8039590 <USBD_CDC_Init+0x1e4>)
 8039426:	781b      	ldrb	r3, [r3, #0]
 8039428:	f003 020f 	and.w	r2, r3, #15
 803942c:	6879      	ldr	r1, [r7, #4]
 803942e:	4613      	mov	r3, r2
 8039430:	009b      	lsls	r3, r3, #2
 8039432:	4413      	add	r3, r2
 8039434:	009b      	lsls	r3, r3, #2
 8039436:	440b      	add	r3, r1
 8039438:	3324      	adds	r3, #36	; 0x24
 803943a:	2201      	movs	r2, #1
 803943c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803943e:	4b55      	ldr	r3, [pc, #340]	; (8039594 <USBD_CDC_Init+0x1e8>)
 8039440:	7819      	ldrb	r1, [r3, #0]
 8039442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039446:	2202      	movs	r2, #2
 8039448:	6878      	ldr	r0, [r7, #4]
 803944a:	f002 faea 	bl	803ba22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803944e:	4b51      	ldr	r3, [pc, #324]	; (8039594 <USBD_CDC_Init+0x1e8>)
 8039450:	781b      	ldrb	r3, [r3, #0]
 8039452:	f003 020f 	and.w	r2, r3, #15
 8039456:	6879      	ldr	r1, [r7, #4]
 8039458:	4613      	mov	r3, r2
 803945a:	009b      	lsls	r3, r3, #2
 803945c:	4413      	add	r3, r2
 803945e:	009b      	lsls	r3, r3, #2
 8039460:	440b      	add	r3, r1
 8039462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039466:	2201      	movs	r2, #1
 8039468:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803946a:	4b4b      	ldr	r3, [pc, #300]	; (8039598 <USBD_CDC_Init+0x1ec>)
 803946c:	781b      	ldrb	r3, [r3, #0]
 803946e:	f003 020f 	and.w	r2, r3, #15
 8039472:	6879      	ldr	r1, [r7, #4]
 8039474:	4613      	mov	r3, r2
 8039476:	009b      	lsls	r3, r3, #2
 8039478:	4413      	add	r3, r2
 803947a:	009b      	lsls	r3, r3, #2
 803947c:	440b      	add	r3, r1
 803947e:	3326      	adds	r3, #38	; 0x26
 8039480:	2210      	movs	r2, #16
 8039482:	801a      	strh	r2, [r3, #0]
 8039484:	e035      	b.n	80394f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8039486:	4b42      	ldr	r3, [pc, #264]	; (8039590 <USBD_CDC_Init+0x1e4>)
 8039488:	7819      	ldrb	r1, [r3, #0]
 803948a:	2340      	movs	r3, #64	; 0x40
 803948c:	2202      	movs	r2, #2
 803948e:	6878      	ldr	r0, [r7, #4]
 8039490:	f002 fac7 	bl	803ba22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8039494:	4b3e      	ldr	r3, [pc, #248]	; (8039590 <USBD_CDC_Init+0x1e4>)
 8039496:	781b      	ldrb	r3, [r3, #0]
 8039498:	f003 020f 	and.w	r2, r3, #15
 803949c:	6879      	ldr	r1, [r7, #4]
 803949e:	4613      	mov	r3, r2
 80394a0:	009b      	lsls	r3, r3, #2
 80394a2:	4413      	add	r3, r2
 80394a4:	009b      	lsls	r3, r3, #2
 80394a6:	440b      	add	r3, r1
 80394a8:	3324      	adds	r3, #36	; 0x24
 80394aa:	2201      	movs	r2, #1
 80394ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80394ae:	4b39      	ldr	r3, [pc, #228]	; (8039594 <USBD_CDC_Init+0x1e8>)
 80394b0:	7819      	ldrb	r1, [r3, #0]
 80394b2:	2340      	movs	r3, #64	; 0x40
 80394b4:	2202      	movs	r2, #2
 80394b6:	6878      	ldr	r0, [r7, #4]
 80394b8:	f002 fab3 	bl	803ba22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80394bc:	4b35      	ldr	r3, [pc, #212]	; (8039594 <USBD_CDC_Init+0x1e8>)
 80394be:	781b      	ldrb	r3, [r3, #0]
 80394c0:	f003 020f 	and.w	r2, r3, #15
 80394c4:	6879      	ldr	r1, [r7, #4]
 80394c6:	4613      	mov	r3, r2
 80394c8:	009b      	lsls	r3, r3, #2
 80394ca:	4413      	add	r3, r2
 80394cc:	009b      	lsls	r3, r3, #2
 80394ce:	440b      	add	r3, r1
 80394d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80394d4:	2201      	movs	r2, #1
 80394d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80394d8:	4b2f      	ldr	r3, [pc, #188]	; (8039598 <USBD_CDC_Init+0x1ec>)
 80394da:	781b      	ldrb	r3, [r3, #0]
 80394dc:	f003 020f 	and.w	r2, r3, #15
 80394e0:	6879      	ldr	r1, [r7, #4]
 80394e2:	4613      	mov	r3, r2
 80394e4:	009b      	lsls	r3, r3, #2
 80394e6:	4413      	add	r3, r2
 80394e8:	009b      	lsls	r3, r3, #2
 80394ea:	440b      	add	r3, r1
 80394ec:	3326      	adds	r3, #38	; 0x26
 80394ee:	2210      	movs	r2, #16
 80394f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80394f2:	4b29      	ldr	r3, [pc, #164]	; (8039598 <USBD_CDC_Init+0x1ec>)
 80394f4:	7819      	ldrb	r1, [r3, #0]
 80394f6:	2308      	movs	r3, #8
 80394f8:	2203      	movs	r2, #3
 80394fa:	6878      	ldr	r0, [r7, #4]
 80394fc:	f002 fa91 	bl	803ba22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8039500:	4b25      	ldr	r3, [pc, #148]	; (8039598 <USBD_CDC_Init+0x1ec>)
 8039502:	781b      	ldrb	r3, [r3, #0]
 8039504:	f003 020f 	and.w	r2, r3, #15
 8039508:	6879      	ldr	r1, [r7, #4]
 803950a:	4613      	mov	r3, r2
 803950c:	009b      	lsls	r3, r3, #2
 803950e:	4413      	add	r3, r2
 8039510:	009b      	lsls	r3, r3, #2
 8039512:	440b      	add	r3, r1
 8039514:	3324      	adds	r3, #36	; 0x24
 8039516:	2201      	movs	r2, #1
 8039518:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803951a:	68fb      	ldr	r3, [r7, #12]
 803951c:	2200      	movs	r2, #0
 803951e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8039522:	687b      	ldr	r3, [r7, #4]
 8039524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039528:	687a      	ldr	r2, [r7, #4]
 803952a:	33b0      	adds	r3, #176	; 0xb0
 803952c:	009b      	lsls	r3, r3, #2
 803952e:	4413      	add	r3, r2
 8039530:	685b      	ldr	r3, [r3, #4]
 8039532:	681b      	ldr	r3, [r3, #0]
 8039534:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8039536:	68fb      	ldr	r3, [r7, #12]
 8039538:	2200      	movs	r2, #0
 803953a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803953e:	68fb      	ldr	r3, [r7, #12]
 8039540:	2200      	movs	r2, #0
 8039542:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8039546:	68fb      	ldr	r3, [r7, #12]
 8039548:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803954c:	2b00      	cmp	r3, #0
 803954e:	d101      	bne.n	8039554 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8039550:	2302      	movs	r3, #2
 8039552:	e018      	b.n	8039586 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039554:	687b      	ldr	r3, [r7, #4]
 8039556:	7c1b      	ldrb	r3, [r3, #16]
 8039558:	2b00      	cmp	r3, #0
 803955a:	d10a      	bne.n	8039572 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803955c:	4b0d      	ldr	r3, [pc, #52]	; (8039594 <USBD_CDC_Init+0x1e8>)
 803955e:	7819      	ldrb	r1, [r3, #0]
 8039560:	68fb      	ldr	r3, [r7, #12]
 8039562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039566:	f44f 7300 	mov.w	r3, #512	; 0x200
 803956a:	6878      	ldr	r0, [r7, #4]
 803956c:	f002 fb48 	bl	803bc00 <USBD_LL_PrepareReceive>
 8039570:	e008      	b.n	8039584 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039572:	4b08      	ldr	r3, [pc, #32]	; (8039594 <USBD_CDC_Init+0x1e8>)
 8039574:	7819      	ldrb	r1, [r3, #0]
 8039576:	68fb      	ldr	r3, [r7, #12]
 8039578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803957c:	2340      	movs	r3, #64	; 0x40
 803957e:	6878      	ldr	r0, [r7, #4]
 8039580:	f002 fb3e 	bl	803bc00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039584:	2300      	movs	r3, #0
}
 8039586:	4618      	mov	r0, r3
 8039588:	3710      	adds	r7, #16
 803958a:	46bd      	mov	sp, r7
 803958c:	bd80      	pop	{r7, pc}
 803958e:	bf00      	nop
 8039590:	2400009b 	.word	0x2400009b
 8039594:	2400009c 	.word	0x2400009c
 8039598:	2400009d 	.word	0x2400009d

0803959c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803959c:	b580      	push	{r7, lr}
 803959e:	b082      	sub	sp, #8
 80395a0:	af00      	add	r7, sp, #0
 80395a2:	6078      	str	r0, [r7, #4]
 80395a4:	460b      	mov	r3, r1
 80395a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80395a8:	4b3a      	ldr	r3, [pc, #232]	; (8039694 <USBD_CDC_DeInit+0xf8>)
 80395aa:	781b      	ldrb	r3, [r3, #0]
 80395ac:	4619      	mov	r1, r3
 80395ae:	6878      	ldr	r0, [r7, #4]
 80395b0:	f002 fa5d 	bl	803ba6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80395b4:	4b37      	ldr	r3, [pc, #220]	; (8039694 <USBD_CDC_DeInit+0xf8>)
 80395b6:	781b      	ldrb	r3, [r3, #0]
 80395b8:	f003 020f 	and.w	r2, r3, #15
 80395bc:	6879      	ldr	r1, [r7, #4]
 80395be:	4613      	mov	r3, r2
 80395c0:	009b      	lsls	r3, r3, #2
 80395c2:	4413      	add	r3, r2
 80395c4:	009b      	lsls	r3, r3, #2
 80395c6:	440b      	add	r3, r1
 80395c8:	3324      	adds	r3, #36	; 0x24
 80395ca:	2200      	movs	r2, #0
 80395cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80395ce:	4b32      	ldr	r3, [pc, #200]	; (8039698 <USBD_CDC_DeInit+0xfc>)
 80395d0:	781b      	ldrb	r3, [r3, #0]
 80395d2:	4619      	mov	r1, r3
 80395d4:	6878      	ldr	r0, [r7, #4]
 80395d6:	f002 fa4a 	bl	803ba6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80395da:	4b2f      	ldr	r3, [pc, #188]	; (8039698 <USBD_CDC_DeInit+0xfc>)
 80395dc:	781b      	ldrb	r3, [r3, #0]
 80395de:	f003 020f 	and.w	r2, r3, #15
 80395e2:	6879      	ldr	r1, [r7, #4]
 80395e4:	4613      	mov	r3, r2
 80395e6:	009b      	lsls	r3, r3, #2
 80395e8:	4413      	add	r3, r2
 80395ea:	009b      	lsls	r3, r3, #2
 80395ec:	440b      	add	r3, r1
 80395ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80395f2:	2200      	movs	r2, #0
 80395f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80395f6:	4b29      	ldr	r3, [pc, #164]	; (803969c <USBD_CDC_DeInit+0x100>)
 80395f8:	781b      	ldrb	r3, [r3, #0]
 80395fa:	4619      	mov	r1, r3
 80395fc:	6878      	ldr	r0, [r7, #4]
 80395fe:	f002 fa36 	bl	803ba6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8039602:	4b26      	ldr	r3, [pc, #152]	; (803969c <USBD_CDC_DeInit+0x100>)
 8039604:	781b      	ldrb	r3, [r3, #0]
 8039606:	f003 020f 	and.w	r2, r3, #15
 803960a:	6879      	ldr	r1, [r7, #4]
 803960c:	4613      	mov	r3, r2
 803960e:	009b      	lsls	r3, r3, #2
 8039610:	4413      	add	r3, r2
 8039612:	009b      	lsls	r3, r3, #2
 8039614:	440b      	add	r3, r1
 8039616:	3324      	adds	r3, #36	; 0x24
 8039618:	2200      	movs	r2, #0
 803961a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803961c:	4b1f      	ldr	r3, [pc, #124]	; (803969c <USBD_CDC_DeInit+0x100>)
 803961e:	781b      	ldrb	r3, [r3, #0]
 8039620:	f003 020f 	and.w	r2, r3, #15
 8039624:	6879      	ldr	r1, [r7, #4]
 8039626:	4613      	mov	r3, r2
 8039628:	009b      	lsls	r3, r3, #2
 803962a:	4413      	add	r3, r2
 803962c:	009b      	lsls	r3, r3, #2
 803962e:	440b      	add	r3, r1
 8039630:	3326      	adds	r3, #38	; 0x26
 8039632:	2200      	movs	r2, #0
 8039634:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8039636:	687b      	ldr	r3, [r7, #4]
 8039638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803963c:	687b      	ldr	r3, [r7, #4]
 803963e:	32b0      	adds	r2, #176	; 0xb0
 8039640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039644:	2b00      	cmp	r3, #0
 8039646:	d01f      	beq.n	8039688 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8039648:	687b      	ldr	r3, [r7, #4]
 803964a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803964e:	687a      	ldr	r2, [r7, #4]
 8039650:	33b0      	adds	r3, #176	; 0xb0
 8039652:	009b      	lsls	r3, r3, #2
 8039654:	4413      	add	r3, r2
 8039656:	685b      	ldr	r3, [r3, #4]
 8039658:	685b      	ldr	r3, [r3, #4]
 803965a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803965c:	687b      	ldr	r3, [r7, #4]
 803965e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039662:	687b      	ldr	r3, [r7, #4]
 8039664:	32b0      	adds	r2, #176	; 0xb0
 8039666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803966a:	4618      	mov	r0, r3
 803966c:	f002 fb0a 	bl	803bc84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8039670:	687b      	ldr	r3, [r7, #4]
 8039672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039676:	687b      	ldr	r3, [r7, #4]
 8039678:	32b0      	adds	r2, #176	; 0xb0
 803967a:	2100      	movs	r1, #0
 803967c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8039680:	687b      	ldr	r3, [r7, #4]
 8039682:	2200      	movs	r2, #0
 8039684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8039688:	2300      	movs	r3, #0
}
 803968a:	4618      	mov	r0, r3
 803968c:	3708      	adds	r7, #8
 803968e:	46bd      	mov	sp, r7
 8039690:	bd80      	pop	{r7, pc}
 8039692:	bf00      	nop
 8039694:	2400009b 	.word	0x2400009b
 8039698:	2400009c 	.word	0x2400009c
 803969c:	2400009d 	.word	0x2400009d

080396a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80396a0:	b580      	push	{r7, lr}
 80396a2:	b086      	sub	sp, #24
 80396a4:	af00      	add	r7, sp, #0
 80396a6:	6078      	str	r0, [r7, #4]
 80396a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80396aa:	687b      	ldr	r3, [r7, #4]
 80396ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396b0:	687b      	ldr	r3, [r7, #4]
 80396b2:	32b0      	adds	r2, #176	; 0xb0
 80396b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80396b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80396ba:	2300      	movs	r3, #0
 80396bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80396be:	2300      	movs	r3, #0
 80396c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80396c2:	2300      	movs	r3, #0
 80396c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80396c6:	693b      	ldr	r3, [r7, #16]
 80396c8:	2b00      	cmp	r3, #0
 80396ca:	d101      	bne.n	80396d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80396cc:	2303      	movs	r3, #3
 80396ce:	e0bf      	b.n	8039850 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80396d0:	683b      	ldr	r3, [r7, #0]
 80396d2:	781b      	ldrb	r3, [r3, #0]
 80396d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80396d8:	2b00      	cmp	r3, #0
 80396da:	d050      	beq.n	803977e <USBD_CDC_Setup+0xde>
 80396dc:	2b20      	cmp	r3, #32
 80396de:	f040 80af 	bne.w	8039840 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80396e2:	683b      	ldr	r3, [r7, #0]
 80396e4:	88db      	ldrh	r3, [r3, #6]
 80396e6:	2b00      	cmp	r3, #0
 80396e8:	d03a      	beq.n	8039760 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80396ea:	683b      	ldr	r3, [r7, #0]
 80396ec:	781b      	ldrb	r3, [r3, #0]
 80396ee:	b25b      	sxtb	r3, r3
 80396f0:	2b00      	cmp	r3, #0
 80396f2:	da1b      	bge.n	803972c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80396f4:	687b      	ldr	r3, [r7, #4]
 80396f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80396fa:	687a      	ldr	r2, [r7, #4]
 80396fc:	33b0      	adds	r3, #176	; 0xb0
 80396fe:	009b      	lsls	r3, r3, #2
 8039700:	4413      	add	r3, r2
 8039702:	685b      	ldr	r3, [r3, #4]
 8039704:	689b      	ldr	r3, [r3, #8]
 8039706:	683a      	ldr	r2, [r7, #0]
 8039708:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803970a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803970c:	683a      	ldr	r2, [r7, #0]
 803970e:	88d2      	ldrh	r2, [r2, #6]
 8039710:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8039712:	683b      	ldr	r3, [r7, #0]
 8039714:	88db      	ldrh	r3, [r3, #6]
 8039716:	2b07      	cmp	r3, #7
 8039718:	bf28      	it	cs
 803971a:	2307      	movcs	r3, #7
 803971c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803971e:	693b      	ldr	r3, [r7, #16]
 8039720:	89fa      	ldrh	r2, [r7, #14]
 8039722:	4619      	mov	r1, r3
 8039724:	6878      	ldr	r0, [r7, #4]
 8039726:	f001 fd43 	bl	803b1b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803972a:	e090      	b.n	803984e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803972c:	683b      	ldr	r3, [r7, #0]
 803972e:	785a      	ldrb	r2, [r3, #1]
 8039730:	693b      	ldr	r3, [r7, #16]
 8039732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8039736:	683b      	ldr	r3, [r7, #0]
 8039738:	88db      	ldrh	r3, [r3, #6]
 803973a:	2b3f      	cmp	r3, #63	; 0x3f
 803973c:	d803      	bhi.n	8039746 <USBD_CDC_Setup+0xa6>
 803973e:	683b      	ldr	r3, [r7, #0]
 8039740:	88db      	ldrh	r3, [r3, #6]
 8039742:	b2da      	uxtb	r2, r3
 8039744:	e000      	b.n	8039748 <USBD_CDC_Setup+0xa8>
 8039746:	2240      	movs	r2, #64	; 0x40
 8039748:	693b      	ldr	r3, [r7, #16]
 803974a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803974e:	6939      	ldr	r1, [r7, #16]
 8039750:	693b      	ldr	r3, [r7, #16]
 8039752:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8039756:	461a      	mov	r2, r3
 8039758:	6878      	ldr	r0, [r7, #4]
 803975a:	f001 fd55 	bl	803b208 <USBD_CtlPrepareRx>
      break;
 803975e:	e076      	b.n	803984e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039760:	687b      	ldr	r3, [r7, #4]
 8039762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039766:	687a      	ldr	r2, [r7, #4]
 8039768:	33b0      	adds	r3, #176	; 0xb0
 803976a:	009b      	lsls	r3, r3, #2
 803976c:	4413      	add	r3, r2
 803976e:	685b      	ldr	r3, [r3, #4]
 8039770:	689b      	ldr	r3, [r3, #8]
 8039772:	683a      	ldr	r2, [r7, #0]
 8039774:	7850      	ldrb	r0, [r2, #1]
 8039776:	2200      	movs	r2, #0
 8039778:	6839      	ldr	r1, [r7, #0]
 803977a:	4798      	blx	r3
      break;
 803977c:	e067      	b.n	803984e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803977e:	683b      	ldr	r3, [r7, #0]
 8039780:	785b      	ldrb	r3, [r3, #1]
 8039782:	2b0b      	cmp	r3, #11
 8039784:	d851      	bhi.n	803982a <USBD_CDC_Setup+0x18a>
 8039786:	a201      	add	r2, pc, #4	; (adr r2, 803978c <USBD_CDC_Setup+0xec>)
 8039788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803978c:	080397bd 	.word	0x080397bd
 8039790:	08039839 	.word	0x08039839
 8039794:	0803982b 	.word	0x0803982b
 8039798:	0803982b 	.word	0x0803982b
 803979c:	0803982b 	.word	0x0803982b
 80397a0:	0803982b 	.word	0x0803982b
 80397a4:	0803982b 	.word	0x0803982b
 80397a8:	0803982b 	.word	0x0803982b
 80397ac:	0803982b 	.word	0x0803982b
 80397b0:	0803982b 	.word	0x0803982b
 80397b4:	080397e7 	.word	0x080397e7
 80397b8:	08039811 	.word	0x08039811
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80397bc:	687b      	ldr	r3, [r7, #4]
 80397be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80397c2:	b2db      	uxtb	r3, r3
 80397c4:	2b03      	cmp	r3, #3
 80397c6:	d107      	bne.n	80397d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80397c8:	f107 030a 	add.w	r3, r7, #10
 80397cc:	2202      	movs	r2, #2
 80397ce:	4619      	mov	r1, r3
 80397d0:	6878      	ldr	r0, [r7, #4]
 80397d2:	f001 fced 	bl	803b1b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80397d6:	e032      	b.n	803983e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80397d8:	6839      	ldr	r1, [r7, #0]
 80397da:	6878      	ldr	r0, [r7, #4]
 80397dc:	f001 fc77 	bl	803b0ce <USBD_CtlError>
            ret = USBD_FAIL;
 80397e0:	2303      	movs	r3, #3
 80397e2:	75fb      	strb	r3, [r7, #23]
          break;
 80397e4:	e02b      	b.n	803983e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80397e6:	687b      	ldr	r3, [r7, #4]
 80397e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80397ec:	b2db      	uxtb	r3, r3
 80397ee:	2b03      	cmp	r3, #3
 80397f0:	d107      	bne.n	8039802 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80397f2:	f107 030d 	add.w	r3, r7, #13
 80397f6:	2201      	movs	r2, #1
 80397f8:	4619      	mov	r1, r3
 80397fa:	6878      	ldr	r0, [r7, #4]
 80397fc:	f001 fcd8 	bl	803b1b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8039800:	e01d      	b.n	803983e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8039802:	6839      	ldr	r1, [r7, #0]
 8039804:	6878      	ldr	r0, [r7, #4]
 8039806:	f001 fc62 	bl	803b0ce <USBD_CtlError>
            ret = USBD_FAIL;
 803980a:	2303      	movs	r3, #3
 803980c:	75fb      	strb	r3, [r7, #23]
          break;
 803980e:	e016      	b.n	803983e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8039810:	687b      	ldr	r3, [r7, #4]
 8039812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039816:	b2db      	uxtb	r3, r3
 8039818:	2b03      	cmp	r3, #3
 803981a:	d00f      	beq.n	803983c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803981c:	6839      	ldr	r1, [r7, #0]
 803981e:	6878      	ldr	r0, [r7, #4]
 8039820:	f001 fc55 	bl	803b0ce <USBD_CtlError>
            ret = USBD_FAIL;
 8039824:	2303      	movs	r3, #3
 8039826:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8039828:	e008      	b.n	803983c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803982a:	6839      	ldr	r1, [r7, #0]
 803982c:	6878      	ldr	r0, [r7, #4]
 803982e:	f001 fc4e 	bl	803b0ce <USBD_CtlError>
          ret = USBD_FAIL;
 8039832:	2303      	movs	r3, #3
 8039834:	75fb      	strb	r3, [r7, #23]
          break;
 8039836:	e002      	b.n	803983e <USBD_CDC_Setup+0x19e>
          break;
 8039838:	bf00      	nop
 803983a:	e008      	b.n	803984e <USBD_CDC_Setup+0x1ae>
          break;
 803983c:	bf00      	nop
      }
      break;
 803983e:	e006      	b.n	803984e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8039840:	6839      	ldr	r1, [r7, #0]
 8039842:	6878      	ldr	r0, [r7, #4]
 8039844:	f001 fc43 	bl	803b0ce <USBD_CtlError>
      ret = USBD_FAIL;
 8039848:	2303      	movs	r3, #3
 803984a:	75fb      	strb	r3, [r7, #23]
      break;
 803984c:	bf00      	nop
  }

  return (uint8_t)ret;
 803984e:	7dfb      	ldrb	r3, [r7, #23]
}
 8039850:	4618      	mov	r0, r3
 8039852:	3718      	adds	r7, #24
 8039854:	46bd      	mov	sp, r7
 8039856:	bd80      	pop	{r7, pc}

08039858 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8039858:	b580      	push	{r7, lr}
 803985a:	b084      	sub	sp, #16
 803985c:	af00      	add	r7, sp, #0
 803985e:	6078      	str	r0, [r7, #4]
 8039860:	460b      	mov	r3, r1
 8039862:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8039864:	687b      	ldr	r3, [r7, #4]
 8039866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803986a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803986c:	687b      	ldr	r3, [r7, #4]
 803986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039872:	687b      	ldr	r3, [r7, #4]
 8039874:	32b0      	adds	r2, #176	; 0xb0
 8039876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803987a:	2b00      	cmp	r3, #0
 803987c:	d101      	bne.n	8039882 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803987e:	2303      	movs	r3, #3
 8039880:	e065      	b.n	803994e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039882:	687b      	ldr	r3, [r7, #4]
 8039884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039888:	687b      	ldr	r3, [r7, #4]
 803988a:	32b0      	adds	r2, #176	; 0xb0
 803988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039890:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8039892:	78fb      	ldrb	r3, [r7, #3]
 8039894:	f003 020f 	and.w	r2, r3, #15
 8039898:	6879      	ldr	r1, [r7, #4]
 803989a:	4613      	mov	r3, r2
 803989c:	009b      	lsls	r3, r3, #2
 803989e:	4413      	add	r3, r2
 80398a0:	009b      	lsls	r3, r3, #2
 80398a2:	440b      	add	r3, r1
 80398a4:	3318      	adds	r3, #24
 80398a6:	681b      	ldr	r3, [r3, #0]
 80398a8:	2b00      	cmp	r3, #0
 80398aa:	d02f      	beq.n	803990c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80398ac:	78fb      	ldrb	r3, [r7, #3]
 80398ae:	f003 020f 	and.w	r2, r3, #15
 80398b2:	6879      	ldr	r1, [r7, #4]
 80398b4:	4613      	mov	r3, r2
 80398b6:	009b      	lsls	r3, r3, #2
 80398b8:	4413      	add	r3, r2
 80398ba:	009b      	lsls	r3, r3, #2
 80398bc:	440b      	add	r3, r1
 80398be:	3318      	adds	r3, #24
 80398c0:	681a      	ldr	r2, [r3, #0]
 80398c2:	78fb      	ldrb	r3, [r7, #3]
 80398c4:	f003 010f 	and.w	r1, r3, #15
 80398c8:	68f8      	ldr	r0, [r7, #12]
 80398ca:	460b      	mov	r3, r1
 80398cc:	00db      	lsls	r3, r3, #3
 80398ce:	440b      	add	r3, r1
 80398d0:	009b      	lsls	r3, r3, #2
 80398d2:	4403      	add	r3, r0
 80398d4:	3348      	adds	r3, #72	; 0x48
 80398d6:	681b      	ldr	r3, [r3, #0]
 80398d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80398dc:	fb01 f303 	mul.w	r3, r1, r3
 80398e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80398e2:	2b00      	cmp	r3, #0
 80398e4:	d112      	bne.n	803990c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80398e6:	78fb      	ldrb	r3, [r7, #3]
 80398e8:	f003 020f 	and.w	r2, r3, #15
 80398ec:	6879      	ldr	r1, [r7, #4]
 80398ee:	4613      	mov	r3, r2
 80398f0:	009b      	lsls	r3, r3, #2
 80398f2:	4413      	add	r3, r2
 80398f4:	009b      	lsls	r3, r3, #2
 80398f6:	440b      	add	r3, r1
 80398f8:	3318      	adds	r3, #24
 80398fa:	2200      	movs	r2, #0
 80398fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80398fe:	78f9      	ldrb	r1, [r7, #3]
 8039900:	2300      	movs	r3, #0
 8039902:	2200      	movs	r2, #0
 8039904:	6878      	ldr	r0, [r7, #4]
 8039906:	f002 f95a 	bl	803bbbe <USBD_LL_Transmit>
 803990a:	e01f      	b.n	803994c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803990c:	68bb      	ldr	r3, [r7, #8]
 803990e:	2200      	movs	r2, #0
 8039910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8039914:	687b      	ldr	r3, [r7, #4]
 8039916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803991a:	687a      	ldr	r2, [r7, #4]
 803991c:	33b0      	adds	r3, #176	; 0xb0
 803991e:	009b      	lsls	r3, r3, #2
 8039920:	4413      	add	r3, r2
 8039922:	685b      	ldr	r3, [r3, #4]
 8039924:	691b      	ldr	r3, [r3, #16]
 8039926:	2b00      	cmp	r3, #0
 8039928:	d010      	beq.n	803994c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803992a:	687b      	ldr	r3, [r7, #4]
 803992c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039930:	687a      	ldr	r2, [r7, #4]
 8039932:	33b0      	adds	r3, #176	; 0xb0
 8039934:	009b      	lsls	r3, r3, #2
 8039936:	4413      	add	r3, r2
 8039938:	685b      	ldr	r3, [r3, #4]
 803993a:	691b      	ldr	r3, [r3, #16]
 803993c:	68ba      	ldr	r2, [r7, #8]
 803993e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8039942:	68ba      	ldr	r2, [r7, #8]
 8039944:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8039948:	78fa      	ldrb	r2, [r7, #3]
 803994a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803994c:	2300      	movs	r3, #0
}
 803994e:	4618      	mov	r0, r3
 8039950:	3710      	adds	r7, #16
 8039952:	46bd      	mov	sp, r7
 8039954:	bd80      	pop	{r7, pc}

08039956 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8039956:	b580      	push	{r7, lr}
 8039958:	b084      	sub	sp, #16
 803995a:	af00      	add	r7, sp, #0
 803995c:	6078      	str	r0, [r7, #4]
 803995e:	460b      	mov	r3, r1
 8039960:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039962:	687b      	ldr	r3, [r7, #4]
 8039964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039968:	687b      	ldr	r3, [r7, #4]
 803996a:	32b0      	adds	r2, #176	; 0xb0
 803996c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039970:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039972:	687b      	ldr	r3, [r7, #4]
 8039974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039978:	687b      	ldr	r3, [r7, #4]
 803997a:	32b0      	adds	r2, #176	; 0xb0
 803997c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039980:	2b00      	cmp	r3, #0
 8039982:	d101      	bne.n	8039988 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8039984:	2303      	movs	r3, #3
 8039986:	e01a      	b.n	80399be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8039988:	78fb      	ldrb	r3, [r7, #3]
 803998a:	4619      	mov	r1, r3
 803998c:	6878      	ldr	r0, [r7, #4]
 803998e:	f002 f958 	bl	803bc42 <USBD_LL_GetRxDataSize>
 8039992:	4602      	mov	r2, r0
 8039994:	68fb      	ldr	r3, [r7, #12]
 8039996:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803999a:	687b      	ldr	r3, [r7, #4]
 803999c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80399a0:	687a      	ldr	r2, [r7, #4]
 80399a2:	33b0      	adds	r3, #176	; 0xb0
 80399a4:	009b      	lsls	r3, r3, #2
 80399a6:	4413      	add	r3, r2
 80399a8:	685b      	ldr	r3, [r3, #4]
 80399aa:	68db      	ldr	r3, [r3, #12]
 80399ac:	68fa      	ldr	r2, [r7, #12]
 80399ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80399b2:	68fa      	ldr	r2, [r7, #12]
 80399b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80399b8:	4611      	mov	r1, r2
 80399ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80399bc:	2300      	movs	r3, #0
}
 80399be:	4618      	mov	r0, r3
 80399c0:	3710      	adds	r7, #16
 80399c2:	46bd      	mov	sp, r7
 80399c4:	bd80      	pop	{r7, pc}

080399c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80399c6:	b580      	push	{r7, lr}
 80399c8:	b084      	sub	sp, #16
 80399ca:	af00      	add	r7, sp, #0
 80399cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80399ce:	687b      	ldr	r3, [r7, #4]
 80399d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80399d4:	687b      	ldr	r3, [r7, #4]
 80399d6:	32b0      	adds	r2, #176	; 0xb0
 80399d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80399dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80399de:	68fb      	ldr	r3, [r7, #12]
 80399e0:	2b00      	cmp	r3, #0
 80399e2:	d101      	bne.n	80399e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80399e4:	2303      	movs	r3, #3
 80399e6:	e025      	b.n	8039a34 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80399e8:	687b      	ldr	r3, [r7, #4]
 80399ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80399ee:	687a      	ldr	r2, [r7, #4]
 80399f0:	33b0      	adds	r3, #176	; 0xb0
 80399f2:	009b      	lsls	r3, r3, #2
 80399f4:	4413      	add	r3, r2
 80399f6:	685b      	ldr	r3, [r3, #4]
 80399f8:	2b00      	cmp	r3, #0
 80399fa:	d01a      	beq.n	8039a32 <USBD_CDC_EP0_RxReady+0x6c>
 80399fc:	68fb      	ldr	r3, [r7, #12]
 80399fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8039a02:	2bff      	cmp	r3, #255	; 0xff
 8039a04:	d015      	beq.n	8039a32 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a06:	687b      	ldr	r3, [r7, #4]
 8039a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039a0c:	687a      	ldr	r2, [r7, #4]
 8039a0e:	33b0      	adds	r3, #176	; 0xb0
 8039a10:	009b      	lsls	r3, r3, #2
 8039a12:	4413      	add	r3, r2
 8039a14:	685b      	ldr	r3, [r3, #4]
 8039a16:	689b      	ldr	r3, [r3, #8]
 8039a18:	68fa      	ldr	r2, [r7, #12]
 8039a1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8039a1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8039a20:	68fa      	ldr	r2, [r7, #12]
 8039a22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a26:	b292      	uxth	r2, r2
 8039a28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8039a2a:	68fb      	ldr	r3, [r7, #12]
 8039a2c:	22ff      	movs	r2, #255	; 0xff
 8039a2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8039a32:	2300      	movs	r3, #0
}
 8039a34:	4618      	mov	r0, r3
 8039a36:	3710      	adds	r7, #16
 8039a38:	46bd      	mov	sp, r7
 8039a3a:	bd80      	pop	{r7, pc}

08039a3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8039a3c:	b580      	push	{r7, lr}
 8039a3e:	b086      	sub	sp, #24
 8039a40:	af00      	add	r7, sp, #0
 8039a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039a44:	2182      	movs	r1, #130	; 0x82
 8039a46:	4818      	ldr	r0, [pc, #96]	; (8039aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a48:	f000 fd09 	bl	803a45e <USBD_GetEpDesc>
 8039a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039a4e:	2101      	movs	r1, #1
 8039a50:	4815      	ldr	r0, [pc, #84]	; (8039aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a52:	f000 fd04 	bl	803a45e <USBD_GetEpDesc>
 8039a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039a58:	2181      	movs	r1, #129	; 0x81
 8039a5a:	4813      	ldr	r0, [pc, #76]	; (8039aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a5c:	f000 fcff 	bl	803a45e <USBD_GetEpDesc>
 8039a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039a62:	697b      	ldr	r3, [r7, #20]
 8039a64:	2b00      	cmp	r3, #0
 8039a66:	d002      	beq.n	8039a6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039a68:	697b      	ldr	r3, [r7, #20]
 8039a6a:	2210      	movs	r2, #16
 8039a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039a6e:	693b      	ldr	r3, [r7, #16]
 8039a70:	2b00      	cmp	r3, #0
 8039a72:	d006      	beq.n	8039a82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039a74:	693b      	ldr	r3, [r7, #16]
 8039a76:	2200      	movs	r2, #0
 8039a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039a7c:	711a      	strb	r2, [r3, #4]
 8039a7e:	2200      	movs	r2, #0
 8039a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039a82:	68fb      	ldr	r3, [r7, #12]
 8039a84:	2b00      	cmp	r3, #0
 8039a86:	d006      	beq.n	8039a96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039a88:	68fb      	ldr	r3, [r7, #12]
 8039a8a:	2200      	movs	r2, #0
 8039a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039a90:	711a      	strb	r2, [r3, #4]
 8039a92:	2200      	movs	r2, #0
 8039a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039a96:	687b      	ldr	r3, [r7, #4]
 8039a98:	2243      	movs	r2, #67	; 0x43
 8039a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039a9c:	4b02      	ldr	r3, [pc, #8]	; (8039aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8039a9e:	4618      	mov	r0, r3
 8039aa0:	3718      	adds	r7, #24
 8039aa2:	46bd      	mov	sp, r7
 8039aa4:	bd80      	pop	{r7, pc}
 8039aa6:	bf00      	nop
 8039aa8:	24000058 	.word	0x24000058

08039aac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8039aac:	b580      	push	{r7, lr}
 8039aae:	b086      	sub	sp, #24
 8039ab0:	af00      	add	r7, sp, #0
 8039ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039ab4:	2182      	movs	r1, #130	; 0x82
 8039ab6:	4818      	ldr	r0, [pc, #96]	; (8039b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039ab8:	f000 fcd1 	bl	803a45e <USBD_GetEpDesc>
 8039abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039abe:	2101      	movs	r1, #1
 8039ac0:	4815      	ldr	r0, [pc, #84]	; (8039b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039ac2:	f000 fccc 	bl	803a45e <USBD_GetEpDesc>
 8039ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039ac8:	2181      	movs	r1, #129	; 0x81
 8039aca:	4813      	ldr	r0, [pc, #76]	; (8039b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039acc:	f000 fcc7 	bl	803a45e <USBD_GetEpDesc>
 8039ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039ad2:	697b      	ldr	r3, [r7, #20]
 8039ad4:	2b00      	cmp	r3, #0
 8039ad6:	d002      	beq.n	8039ade <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8039ad8:	697b      	ldr	r3, [r7, #20]
 8039ada:	2210      	movs	r2, #16
 8039adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039ade:	693b      	ldr	r3, [r7, #16]
 8039ae0:	2b00      	cmp	r3, #0
 8039ae2:	d006      	beq.n	8039af2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039ae4:	693b      	ldr	r3, [r7, #16]
 8039ae6:	2200      	movs	r2, #0
 8039ae8:	711a      	strb	r2, [r3, #4]
 8039aea:	2200      	movs	r2, #0
 8039aec:	f042 0202 	orr.w	r2, r2, #2
 8039af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039af2:	68fb      	ldr	r3, [r7, #12]
 8039af4:	2b00      	cmp	r3, #0
 8039af6:	d006      	beq.n	8039b06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039af8:	68fb      	ldr	r3, [r7, #12]
 8039afa:	2200      	movs	r2, #0
 8039afc:	711a      	strb	r2, [r3, #4]
 8039afe:	2200      	movs	r2, #0
 8039b00:	f042 0202 	orr.w	r2, r2, #2
 8039b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039b06:	687b      	ldr	r3, [r7, #4]
 8039b08:	2243      	movs	r2, #67	; 0x43
 8039b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039b0c:	4b02      	ldr	r3, [pc, #8]	; (8039b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8039b0e:	4618      	mov	r0, r3
 8039b10:	3718      	adds	r7, #24
 8039b12:	46bd      	mov	sp, r7
 8039b14:	bd80      	pop	{r7, pc}
 8039b16:	bf00      	nop
 8039b18:	24000058 	.word	0x24000058

08039b1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8039b1c:	b580      	push	{r7, lr}
 8039b1e:	b086      	sub	sp, #24
 8039b20:	af00      	add	r7, sp, #0
 8039b22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039b24:	2182      	movs	r1, #130	; 0x82
 8039b26:	4818      	ldr	r0, [pc, #96]	; (8039b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b28:	f000 fc99 	bl	803a45e <USBD_GetEpDesc>
 8039b2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039b2e:	2101      	movs	r1, #1
 8039b30:	4815      	ldr	r0, [pc, #84]	; (8039b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b32:	f000 fc94 	bl	803a45e <USBD_GetEpDesc>
 8039b36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039b38:	2181      	movs	r1, #129	; 0x81
 8039b3a:	4813      	ldr	r0, [pc, #76]	; (8039b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b3c:	f000 fc8f 	bl	803a45e <USBD_GetEpDesc>
 8039b40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039b42:	697b      	ldr	r3, [r7, #20]
 8039b44:	2b00      	cmp	r3, #0
 8039b46:	d002      	beq.n	8039b4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039b48:	697b      	ldr	r3, [r7, #20]
 8039b4a:	2210      	movs	r2, #16
 8039b4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039b4e:	693b      	ldr	r3, [r7, #16]
 8039b50:	2b00      	cmp	r3, #0
 8039b52:	d006      	beq.n	8039b62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039b54:	693b      	ldr	r3, [r7, #16]
 8039b56:	2200      	movs	r2, #0
 8039b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039b5c:	711a      	strb	r2, [r3, #4]
 8039b5e:	2200      	movs	r2, #0
 8039b60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039b62:	68fb      	ldr	r3, [r7, #12]
 8039b64:	2b00      	cmp	r3, #0
 8039b66:	d006      	beq.n	8039b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039b68:	68fb      	ldr	r3, [r7, #12]
 8039b6a:	2200      	movs	r2, #0
 8039b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039b70:	711a      	strb	r2, [r3, #4]
 8039b72:	2200      	movs	r2, #0
 8039b74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039b76:	687b      	ldr	r3, [r7, #4]
 8039b78:	2243      	movs	r2, #67	; 0x43
 8039b7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039b7c:	4b02      	ldr	r3, [pc, #8]	; (8039b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8039b7e:	4618      	mov	r0, r3
 8039b80:	3718      	adds	r7, #24
 8039b82:	46bd      	mov	sp, r7
 8039b84:	bd80      	pop	{r7, pc}
 8039b86:	bf00      	nop
 8039b88:	24000058 	.word	0x24000058

08039b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8039b8c:	b480      	push	{r7}
 8039b8e:	b083      	sub	sp, #12
 8039b90:	af00      	add	r7, sp, #0
 8039b92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8039b94:	687b      	ldr	r3, [r7, #4]
 8039b96:	220a      	movs	r2, #10
 8039b98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8039b9a:	4b03      	ldr	r3, [pc, #12]	; (8039ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8039b9c:	4618      	mov	r0, r3
 8039b9e:	370c      	adds	r7, #12
 8039ba0:	46bd      	mov	sp, r7
 8039ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039ba6:	4770      	bx	lr
 8039ba8:	24000014 	.word	0x24000014

08039bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8039bac:	b480      	push	{r7}
 8039bae:	b083      	sub	sp, #12
 8039bb0:	af00      	add	r7, sp, #0
 8039bb2:	6078      	str	r0, [r7, #4]
 8039bb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8039bb6:	683b      	ldr	r3, [r7, #0]
 8039bb8:	2b00      	cmp	r3, #0
 8039bba:	d101      	bne.n	8039bc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8039bbc:	2303      	movs	r3, #3
 8039bbe:	e009      	b.n	8039bd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8039bc0:	687b      	ldr	r3, [r7, #4]
 8039bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039bc6:	687a      	ldr	r2, [r7, #4]
 8039bc8:	33b0      	adds	r3, #176	; 0xb0
 8039bca:	009b      	lsls	r3, r3, #2
 8039bcc:	4413      	add	r3, r2
 8039bce:	683a      	ldr	r2, [r7, #0]
 8039bd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8039bd2:	2300      	movs	r3, #0
}
 8039bd4:	4618      	mov	r0, r3
 8039bd6:	370c      	adds	r7, #12
 8039bd8:	46bd      	mov	sp, r7
 8039bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039bde:	4770      	bx	lr

08039be0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8039be0:	b480      	push	{r7}
 8039be2:	b087      	sub	sp, #28
 8039be4:	af00      	add	r7, sp, #0
 8039be6:	60f8      	str	r0, [r7, #12]
 8039be8:	60b9      	str	r1, [r7, #8]
 8039bea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039bec:	68fb      	ldr	r3, [r7, #12]
 8039bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039bf2:	68fb      	ldr	r3, [r7, #12]
 8039bf4:	32b0      	adds	r2, #176	; 0xb0
 8039bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039bfa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8039bfc:	697b      	ldr	r3, [r7, #20]
 8039bfe:	2b00      	cmp	r3, #0
 8039c00:	d101      	bne.n	8039c06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8039c02:	2303      	movs	r3, #3
 8039c04:	e008      	b.n	8039c18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8039c06:	697b      	ldr	r3, [r7, #20]
 8039c08:	68ba      	ldr	r2, [r7, #8]
 8039c0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8039c0e:	697b      	ldr	r3, [r7, #20]
 8039c10:	687a      	ldr	r2, [r7, #4]
 8039c12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8039c16:	2300      	movs	r3, #0
}
 8039c18:	4618      	mov	r0, r3
 8039c1a:	371c      	adds	r7, #28
 8039c1c:	46bd      	mov	sp, r7
 8039c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c22:	4770      	bx	lr

08039c24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8039c24:	b480      	push	{r7}
 8039c26:	b085      	sub	sp, #20
 8039c28:	af00      	add	r7, sp, #0
 8039c2a:	6078      	str	r0, [r7, #4]
 8039c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c2e:	687b      	ldr	r3, [r7, #4]
 8039c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c34:	687b      	ldr	r3, [r7, #4]
 8039c36:	32b0      	adds	r2, #176	; 0xb0
 8039c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039c3e:	68fb      	ldr	r3, [r7, #12]
 8039c40:	2b00      	cmp	r3, #0
 8039c42:	d101      	bne.n	8039c48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8039c44:	2303      	movs	r3, #3
 8039c46:	e004      	b.n	8039c52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8039c48:	68fb      	ldr	r3, [r7, #12]
 8039c4a:	683a      	ldr	r2, [r7, #0]
 8039c4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8039c50:	2300      	movs	r3, #0
}
 8039c52:	4618      	mov	r0, r3
 8039c54:	3714      	adds	r7, #20
 8039c56:	46bd      	mov	sp, r7
 8039c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c5c:	4770      	bx	lr
	...

08039c60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8039c60:	b580      	push	{r7, lr}
 8039c62:	b084      	sub	sp, #16
 8039c64:	af00      	add	r7, sp, #0
 8039c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c68:	687b      	ldr	r3, [r7, #4]
 8039c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c6e:	687b      	ldr	r3, [r7, #4]
 8039c70:	32b0      	adds	r2, #176	; 0xb0
 8039c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039c78:	687b      	ldr	r3, [r7, #4]
 8039c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c7e:	687b      	ldr	r3, [r7, #4]
 8039c80:	32b0      	adds	r2, #176	; 0xb0
 8039c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c86:	2b00      	cmp	r3, #0
 8039c88:	d101      	bne.n	8039c8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8039c8a:	2303      	movs	r3, #3
 8039c8c:	e018      	b.n	8039cc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039c8e:	687b      	ldr	r3, [r7, #4]
 8039c90:	7c1b      	ldrb	r3, [r3, #16]
 8039c92:	2b00      	cmp	r3, #0
 8039c94:	d10a      	bne.n	8039cac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039c96:	4b0c      	ldr	r3, [pc, #48]	; (8039cc8 <USBD_CDC_ReceivePacket+0x68>)
 8039c98:	7819      	ldrb	r1, [r3, #0]
 8039c9a:	68fb      	ldr	r3, [r7, #12]
 8039c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039ca4:	6878      	ldr	r0, [r7, #4]
 8039ca6:	f001 ffab 	bl	803bc00 <USBD_LL_PrepareReceive>
 8039caa:	e008      	b.n	8039cbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039cac:	4b06      	ldr	r3, [pc, #24]	; (8039cc8 <USBD_CDC_ReceivePacket+0x68>)
 8039cae:	7819      	ldrb	r1, [r3, #0]
 8039cb0:	68fb      	ldr	r3, [r7, #12]
 8039cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039cb6:	2340      	movs	r3, #64	; 0x40
 8039cb8:	6878      	ldr	r0, [r7, #4]
 8039cba:	f001 ffa1 	bl	803bc00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039cbe:	2300      	movs	r3, #0
}
 8039cc0:	4618      	mov	r0, r3
 8039cc2:	3710      	adds	r7, #16
 8039cc4:	46bd      	mov	sp, r7
 8039cc6:	bd80      	pop	{r7, pc}
 8039cc8:	2400009c 	.word	0x2400009c

08039ccc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8039ccc:	b580      	push	{r7, lr}
 8039cce:	b086      	sub	sp, #24
 8039cd0:	af00      	add	r7, sp, #0
 8039cd2:	60f8      	str	r0, [r7, #12]
 8039cd4:	60b9      	str	r1, [r7, #8]
 8039cd6:	4613      	mov	r3, r2
 8039cd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8039cda:	68fb      	ldr	r3, [r7, #12]
 8039cdc:	2b00      	cmp	r3, #0
 8039cde:	d101      	bne.n	8039ce4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039ce0:	2303      	movs	r3, #3
 8039ce2:	e01f      	b.n	8039d24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8039ce4:	68fb      	ldr	r3, [r7, #12]
 8039ce6:	2200      	movs	r2, #0
 8039ce8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8039cec:	68fb      	ldr	r3, [r7, #12]
 8039cee:	2200      	movs	r2, #0
 8039cf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8039cf4:	68fb      	ldr	r3, [r7, #12]
 8039cf6:	2200      	movs	r2, #0
 8039cf8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8039cfc:	68bb      	ldr	r3, [r7, #8]
 8039cfe:	2b00      	cmp	r3, #0
 8039d00:	d003      	beq.n	8039d0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8039d02:	68fb      	ldr	r3, [r7, #12]
 8039d04:	68ba      	ldr	r2, [r7, #8]
 8039d06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039d0a:	68fb      	ldr	r3, [r7, #12]
 8039d0c:	2201      	movs	r2, #1
 8039d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8039d12:	68fb      	ldr	r3, [r7, #12]
 8039d14:	79fa      	ldrb	r2, [r7, #7]
 8039d16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8039d18:	68f8      	ldr	r0, [r7, #12]
 8039d1a:	f001 fe17 	bl	803b94c <USBD_LL_Init>
 8039d1e:	4603      	mov	r3, r0
 8039d20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8039d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8039d24:	4618      	mov	r0, r3
 8039d26:	3718      	adds	r7, #24
 8039d28:	46bd      	mov	sp, r7
 8039d2a:	bd80      	pop	{r7, pc}

08039d2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8039d2c:	b580      	push	{r7, lr}
 8039d2e:	b084      	sub	sp, #16
 8039d30:	af00      	add	r7, sp, #0
 8039d32:	6078      	str	r0, [r7, #4]
 8039d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8039d36:	2300      	movs	r3, #0
 8039d38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8039d3a:	683b      	ldr	r3, [r7, #0]
 8039d3c:	2b00      	cmp	r3, #0
 8039d3e:	d101      	bne.n	8039d44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039d40:	2303      	movs	r3, #3
 8039d42:	e025      	b.n	8039d90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8039d44:	687b      	ldr	r3, [r7, #4]
 8039d46:	683a      	ldr	r2, [r7, #0]
 8039d48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8039d4c:	687b      	ldr	r3, [r7, #4]
 8039d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039d52:	687b      	ldr	r3, [r7, #4]
 8039d54:	32ae      	adds	r2, #174	; 0xae
 8039d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039d5c:	2b00      	cmp	r3, #0
 8039d5e:	d00f      	beq.n	8039d80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8039d60:	687b      	ldr	r3, [r7, #4]
 8039d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039d66:	687b      	ldr	r3, [r7, #4]
 8039d68:	32ae      	adds	r2, #174	; 0xae
 8039d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039d70:	f107 020e 	add.w	r2, r7, #14
 8039d74:	4610      	mov	r0, r2
 8039d76:	4798      	blx	r3
 8039d78:	4602      	mov	r2, r0
 8039d7a:	687b      	ldr	r3, [r7, #4]
 8039d7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8039d80:	687b      	ldr	r3, [r7, #4]
 8039d82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8039d86:	1c5a      	adds	r2, r3, #1
 8039d88:	687b      	ldr	r3, [r7, #4]
 8039d8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8039d8e:	2300      	movs	r3, #0
}
 8039d90:	4618      	mov	r0, r3
 8039d92:	3710      	adds	r7, #16
 8039d94:	46bd      	mov	sp, r7
 8039d96:	bd80      	pop	{r7, pc}

08039d98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8039d98:	b580      	push	{r7, lr}
 8039d9a:	b082      	sub	sp, #8
 8039d9c:	af00      	add	r7, sp, #0
 8039d9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8039da0:	6878      	ldr	r0, [r7, #4]
 8039da2:	f001 fe23 	bl	803b9ec <USBD_LL_Start>
 8039da6:	4603      	mov	r3, r0
}
 8039da8:	4618      	mov	r0, r3
 8039daa:	3708      	adds	r7, #8
 8039dac:	46bd      	mov	sp, r7
 8039dae:	bd80      	pop	{r7, pc}

08039db0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8039db0:	b480      	push	{r7}
 8039db2:	b083      	sub	sp, #12
 8039db4:	af00      	add	r7, sp, #0
 8039db6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8039db8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8039dba:	4618      	mov	r0, r3
 8039dbc:	370c      	adds	r7, #12
 8039dbe:	46bd      	mov	sp, r7
 8039dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039dc4:	4770      	bx	lr

08039dc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039dc6:	b580      	push	{r7, lr}
 8039dc8:	b084      	sub	sp, #16
 8039dca:	af00      	add	r7, sp, #0
 8039dcc:	6078      	str	r0, [r7, #4]
 8039dce:	460b      	mov	r3, r1
 8039dd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039dd2:	2300      	movs	r3, #0
 8039dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8039dd6:	687b      	ldr	r3, [r7, #4]
 8039dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039ddc:	2b00      	cmp	r3, #0
 8039dde:	d009      	beq.n	8039df4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8039de0:	687b      	ldr	r3, [r7, #4]
 8039de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039de6:	681b      	ldr	r3, [r3, #0]
 8039de8:	78fa      	ldrb	r2, [r7, #3]
 8039dea:	4611      	mov	r1, r2
 8039dec:	6878      	ldr	r0, [r7, #4]
 8039dee:	4798      	blx	r3
 8039df0:	4603      	mov	r3, r0
 8039df2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8039df6:	4618      	mov	r0, r3
 8039df8:	3710      	adds	r7, #16
 8039dfa:	46bd      	mov	sp, r7
 8039dfc:	bd80      	pop	{r7, pc}

08039dfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039dfe:	b580      	push	{r7, lr}
 8039e00:	b084      	sub	sp, #16
 8039e02:	af00      	add	r7, sp, #0
 8039e04:	6078      	str	r0, [r7, #4]
 8039e06:	460b      	mov	r3, r1
 8039e08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039e0a:	2300      	movs	r3, #0
 8039e0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8039e0e:	687b      	ldr	r3, [r7, #4]
 8039e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e14:	685b      	ldr	r3, [r3, #4]
 8039e16:	78fa      	ldrb	r2, [r7, #3]
 8039e18:	4611      	mov	r1, r2
 8039e1a:	6878      	ldr	r0, [r7, #4]
 8039e1c:	4798      	blx	r3
 8039e1e:	4603      	mov	r3, r0
 8039e20:	2b00      	cmp	r3, #0
 8039e22:	d001      	beq.n	8039e28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8039e24:	2303      	movs	r3, #3
 8039e26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e2a:	4618      	mov	r0, r3
 8039e2c:	3710      	adds	r7, #16
 8039e2e:	46bd      	mov	sp, r7
 8039e30:	bd80      	pop	{r7, pc}

08039e32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8039e32:	b580      	push	{r7, lr}
 8039e34:	b084      	sub	sp, #16
 8039e36:	af00      	add	r7, sp, #0
 8039e38:	6078      	str	r0, [r7, #4]
 8039e3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8039e3c:	687b      	ldr	r3, [r7, #4]
 8039e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e42:	6839      	ldr	r1, [r7, #0]
 8039e44:	4618      	mov	r0, r3
 8039e46:	f001 f908 	bl	803b05a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8039e4a:	687b      	ldr	r3, [r7, #4]
 8039e4c:	2201      	movs	r2, #1
 8039e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8039e52:	687b      	ldr	r3, [r7, #4]
 8039e54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8039e58:	461a      	mov	r2, r3
 8039e5a:	687b      	ldr	r3, [r7, #4]
 8039e5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8039e60:	687b      	ldr	r3, [r7, #4]
 8039e62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039e66:	f003 031f 	and.w	r3, r3, #31
 8039e6a:	2b02      	cmp	r3, #2
 8039e6c:	d01a      	beq.n	8039ea4 <USBD_LL_SetupStage+0x72>
 8039e6e:	2b02      	cmp	r3, #2
 8039e70:	d822      	bhi.n	8039eb8 <USBD_LL_SetupStage+0x86>
 8039e72:	2b00      	cmp	r3, #0
 8039e74:	d002      	beq.n	8039e7c <USBD_LL_SetupStage+0x4a>
 8039e76:	2b01      	cmp	r3, #1
 8039e78:	d00a      	beq.n	8039e90 <USBD_LL_SetupStage+0x5e>
 8039e7a:	e01d      	b.n	8039eb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8039e7c:	687b      	ldr	r3, [r7, #4]
 8039e7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e82:	4619      	mov	r1, r3
 8039e84:	6878      	ldr	r0, [r7, #4]
 8039e86:	f000 fb5f 	bl	803a548 <USBD_StdDevReq>
 8039e8a:	4603      	mov	r3, r0
 8039e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8039e8e:	e020      	b.n	8039ed2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8039e90:	687b      	ldr	r3, [r7, #4]
 8039e92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e96:	4619      	mov	r1, r3
 8039e98:	6878      	ldr	r0, [r7, #4]
 8039e9a:	f000 fbc7 	bl	803a62c <USBD_StdItfReq>
 8039e9e:	4603      	mov	r3, r0
 8039ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8039ea2:	e016      	b.n	8039ed2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8039ea4:	687b      	ldr	r3, [r7, #4]
 8039ea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039eaa:	4619      	mov	r1, r3
 8039eac:	6878      	ldr	r0, [r7, #4]
 8039eae:	f000 fc29 	bl	803a704 <USBD_StdEPReq>
 8039eb2:	4603      	mov	r3, r0
 8039eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8039eb6:	e00c      	b.n	8039ed2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8039eb8:	687b      	ldr	r3, [r7, #4]
 8039eba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039ebe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8039ec2:	b2db      	uxtb	r3, r3
 8039ec4:	4619      	mov	r1, r3
 8039ec6:	6878      	ldr	r0, [r7, #4]
 8039ec8:	f001 fdf0 	bl	803baac <USBD_LL_StallEP>
 8039ecc:	4603      	mov	r3, r0
 8039ece:	73fb      	strb	r3, [r7, #15]
      break;
 8039ed0:	bf00      	nop
  }

  return ret;
 8039ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8039ed4:	4618      	mov	r0, r3
 8039ed6:	3710      	adds	r7, #16
 8039ed8:	46bd      	mov	sp, r7
 8039eda:	bd80      	pop	{r7, pc}

08039edc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8039edc:	b580      	push	{r7, lr}
 8039ede:	b086      	sub	sp, #24
 8039ee0:	af00      	add	r7, sp, #0
 8039ee2:	60f8      	str	r0, [r7, #12]
 8039ee4:	460b      	mov	r3, r1
 8039ee6:	607a      	str	r2, [r7, #4]
 8039ee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8039eea:	2300      	movs	r3, #0
 8039eec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8039eee:	7afb      	ldrb	r3, [r7, #11]
 8039ef0:	2b00      	cmp	r3, #0
 8039ef2:	d16e      	bne.n	8039fd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8039ef4:	68fb      	ldr	r3, [r7, #12]
 8039ef6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8039efa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8039efc:	68fb      	ldr	r3, [r7, #12]
 8039efe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039f02:	2b03      	cmp	r3, #3
 8039f04:	f040 8098 	bne.w	803a038 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8039f08:	693b      	ldr	r3, [r7, #16]
 8039f0a:	689a      	ldr	r2, [r3, #8]
 8039f0c:	693b      	ldr	r3, [r7, #16]
 8039f0e:	68db      	ldr	r3, [r3, #12]
 8039f10:	429a      	cmp	r2, r3
 8039f12:	d913      	bls.n	8039f3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8039f14:	693b      	ldr	r3, [r7, #16]
 8039f16:	689a      	ldr	r2, [r3, #8]
 8039f18:	693b      	ldr	r3, [r7, #16]
 8039f1a:	68db      	ldr	r3, [r3, #12]
 8039f1c:	1ad2      	subs	r2, r2, r3
 8039f1e:	693b      	ldr	r3, [r7, #16]
 8039f20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8039f22:	693b      	ldr	r3, [r7, #16]
 8039f24:	68da      	ldr	r2, [r3, #12]
 8039f26:	693b      	ldr	r3, [r7, #16]
 8039f28:	689b      	ldr	r3, [r3, #8]
 8039f2a:	4293      	cmp	r3, r2
 8039f2c:	bf28      	it	cs
 8039f2e:	4613      	movcs	r3, r2
 8039f30:	461a      	mov	r2, r3
 8039f32:	6879      	ldr	r1, [r7, #4]
 8039f34:	68f8      	ldr	r0, [r7, #12]
 8039f36:	f001 f984 	bl	803b242 <USBD_CtlContinueRx>
 8039f3a:	e07d      	b.n	803a038 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8039f3c:	68fb      	ldr	r3, [r7, #12]
 8039f3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039f42:	f003 031f 	and.w	r3, r3, #31
 8039f46:	2b02      	cmp	r3, #2
 8039f48:	d014      	beq.n	8039f74 <USBD_LL_DataOutStage+0x98>
 8039f4a:	2b02      	cmp	r3, #2
 8039f4c:	d81d      	bhi.n	8039f8a <USBD_LL_DataOutStage+0xae>
 8039f4e:	2b00      	cmp	r3, #0
 8039f50:	d002      	beq.n	8039f58 <USBD_LL_DataOutStage+0x7c>
 8039f52:	2b01      	cmp	r3, #1
 8039f54:	d003      	beq.n	8039f5e <USBD_LL_DataOutStage+0x82>
 8039f56:	e018      	b.n	8039f8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8039f58:	2300      	movs	r3, #0
 8039f5a:	75bb      	strb	r3, [r7, #22]
            break;
 8039f5c:	e018      	b.n	8039f90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8039f5e:	68fb      	ldr	r3, [r7, #12]
 8039f60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039f64:	b2db      	uxtb	r3, r3
 8039f66:	4619      	mov	r1, r3
 8039f68:	68f8      	ldr	r0, [r7, #12]
 8039f6a:	f000 fa5e 	bl	803a42a <USBD_CoreFindIF>
 8039f6e:	4603      	mov	r3, r0
 8039f70:	75bb      	strb	r3, [r7, #22]
            break;
 8039f72:	e00d      	b.n	8039f90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8039f74:	68fb      	ldr	r3, [r7, #12]
 8039f76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039f7a:	b2db      	uxtb	r3, r3
 8039f7c:	4619      	mov	r1, r3
 8039f7e:	68f8      	ldr	r0, [r7, #12]
 8039f80:	f000 fa60 	bl	803a444 <USBD_CoreFindEP>
 8039f84:	4603      	mov	r3, r0
 8039f86:	75bb      	strb	r3, [r7, #22]
            break;
 8039f88:	e002      	b.n	8039f90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8039f8a:	2300      	movs	r3, #0
 8039f8c:	75bb      	strb	r3, [r7, #22]
            break;
 8039f8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8039f90:	7dbb      	ldrb	r3, [r7, #22]
 8039f92:	2b00      	cmp	r3, #0
 8039f94:	d119      	bne.n	8039fca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039f96:	68fb      	ldr	r3, [r7, #12]
 8039f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039f9c:	b2db      	uxtb	r3, r3
 8039f9e:	2b03      	cmp	r3, #3
 8039fa0:	d113      	bne.n	8039fca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8039fa2:	7dba      	ldrb	r2, [r7, #22]
 8039fa4:	68fb      	ldr	r3, [r7, #12]
 8039fa6:	32ae      	adds	r2, #174	; 0xae
 8039fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039fac:	691b      	ldr	r3, [r3, #16]
 8039fae:	2b00      	cmp	r3, #0
 8039fb0:	d00b      	beq.n	8039fca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8039fb2:	7dba      	ldrb	r2, [r7, #22]
 8039fb4:	68fb      	ldr	r3, [r7, #12]
 8039fb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8039fba:	7dba      	ldrb	r2, [r7, #22]
 8039fbc:	68fb      	ldr	r3, [r7, #12]
 8039fbe:	32ae      	adds	r2, #174	; 0xae
 8039fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039fc4:	691b      	ldr	r3, [r3, #16]
 8039fc6:	68f8      	ldr	r0, [r7, #12]
 8039fc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8039fca:	68f8      	ldr	r0, [r7, #12]
 8039fcc:	f001 f94a 	bl	803b264 <USBD_CtlSendStatus>
 8039fd0:	e032      	b.n	803a038 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8039fd2:	7afb      	ldrb	r3, [r7, #11]
 8039fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8039fd8:	b2db      	uxtb	r3, r3
 8039fda:	4619      	mov	r1, r3
 8039fdc:	68f8      	ldr	r0, [r7, #12]
 8039fde:	f000 fa31 	bl	803a444 <USBD_CoreFindEP>
 8039fe2:	4603      	mov	r3, r0
 8039fe4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8039fe6:	7dbb      	ldrb	r3, [r7, #22]
 8039fe8:	2bff      	cmp	r3, #255	; 0xff
 8039fea:	d025      	beq.n	803a038 <USBD_LL_DataOutStage+0x15c>
 8039fec:	7dbb      	ldrb	r3, [r7, #22]
 8039fee:	2b00      	cmp	r3, #0
 8039ff0:	d122      	bne.n	803a038 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039ff2:	68fb      	ldr	r3, [r7, #12]
 8039ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039ff8:	b2db      	uxtb	r3, r3
 8039ffa:	2b03      	cmp	r3, #3
 8039ffc:	d117      	bne.n	803a02e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8039ffe:	7dba      	ldrb	r2, [r7, #22]
 803a000:	68fb      	ldr	r3, [r7, #12]
 803a002:	32ae      	adds	r2, #174	; 0xae
 803a004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a008:	699b      	ldr	r3, [r3, #24]
 803a00a:	2b00      	cmp	r3, #0
 803a00c:	d00f      	beq.n	803a02e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803a00e:	7dba      	ldrb	r2, [r7, #22]
 803a010:	68fb      	ldr	r3, [r7, #12]
 803a012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803a016:	7dba      	ldrb	r2, [r7, #22]
 803a018:	68fb      	ldr	r3, [r7, #12]
 803a01a:	32ae      	adds	r2, #174	; 0xae
 803a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a020:	699b      	ldr	r3, [r3, #24]
 803a022:	7afa      	ldrb	r2, [r7, #11]
 803a024:	4611      	mov	r1, r2
 803a026:	68f8      	ldr	r0, [r7, #12]
 803a028:	4798      	blx	r3
 803a02a:	4603      	mov	r3, r0
 803a02c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803a02e:	7dfb      	ldrb	r3, [r7, #23]
 803a030:	2b00      	cmp	r3, #0
 803a032:	d001      	beq.n	803a038 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803a034:	7dfb      	ldrb	r3, [r7, #23]
 803a036:	e000      	b.n	803a03a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803a038:	2300      	movs	r3, #0
}
 803a03a:	4618      	mov	r0, r3
 803a03c:	3718      	adds	r7, #24
 803a03e:	46bd      	mov	sp, r7
 803a040:	bd80      	pop	{r7, pc}

0803a042 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803a042:	b580      	push	{r7, lr}
 803a044:	b086      	sub	sp, #24
 803a046:	af00      	add	r7, sp, #0
 803a048:	60f8      	str	r0, [r7, #12]
 803a04a:	460b      	mov	r3, r1
 803a04c:	607a      	str	r2, [r7, #4]
 803a04e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803a050:	7afb      	ldrb	r3, [r7, #11]
 803a052:	2b00      	cmp	r3, #0
 803a054:	d16f      	bne.n	803a136 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803a056:	68fb      	ldr	r3, [r7, #12]
 803a058:	3314      	adds	r3, #20
 803a05a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803a05c:	68fb      	ldr	r3, [r7, #12]
 803a05e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803a062:	2b02      	cmp	r3, #2
 803a064:	d15a      	bne.n	803a11c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803a066:	693b      	ldr	r3, [r7, #16]
 803a068:	689a      	ldr	r2, [r3, #8]
 803a06a:	693b      	ldr	r3, [r7, #16]
 803a06c:	68db      	ldr	r3, [r3, #12]
 803a06e:	429a      	cmp	r2, r3
 803a070:	d914      	bls.n	803a09c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803a072:	693b      	ldr	r3, [r7, #16]
 803a074:	689a      	ldr	r2, [r3, #8]
 803a076:	693b      	ldr	r3, [r7, #16]
 803a078:	68db      	ldr	r3, [r3, #12]
 803a07a:	1ad2      	subs	r2, r2, r3
 803a07c:	693b      	ldr	r3, [r7, #16]
 803a07e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803a080:	693b      	ldr	r3, [r7, #16]
 803a082:	689b      	ldr	r3, [r3, #8]
 803a084:	461a      	mov	r2, r3
 803a086:	6879      	ldr	r1, [r7, #4]
 803a088:	68f8      	ldr	r0, [r7, #12]
 803a08a:	f001 f8ac 	bl	803b1e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a08e:	2300      	movs	r3, #0
 803a090:	2200      	movs	r2, #0
 803a092:	2100      	movs	r1, #0
 803a094:	68f8      	ldr	r0, [r7, #12]
 803a096:	f001 fdb3 	bl	803bc00 <USBD_LL_PrepareReceive>
 803a09a:	e03f      	b.n	803a11c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803a09c:	693b      	ldr	r3, [r7, #16]
 803a09e:	68da      	ldr	r2, [r3, #12]
 803a0a0:	693b      	ldr	r3, [r7, #16]
 803a0a2:	689b      	ldr	r3, [r3, #8]
 803a0a4:	429a      	cmp	r2, r3
 803a0a6:	d11c      	bne.n	803a0e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803a0a8:	693b      	ldr	r3, [r7, #16]
 803a0aa:	685a      	ldr	r2, [r3, #4]
 803a0ac:	693b      	ldr	r3, [r7, #16]
 803a0ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803a0b0:	429a      	cmp	r2, r3
 803a0b2:	d316      	bcc.n	803a0e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803a0b4:	693b      	ldr	r3, [r7, #16]
 803a0b6:	685a      	ldr	r2, [r3, #4]
 803a0b8:	68fb      	ldr	r3, [r7, #12]
 803a0ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803a0be:	429a      	cmp	r2, r3
 803a0c0:	d20f      	bcs.n	803a0e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803a0c2:	2200      	movs	r2, #0
 803a0c4:	2100      	movs	r1, #0
 803a0c6:	68f8      	ldr	r0, [r7, #12]
 803a0c8:	f001 f88d 	bl	803b1e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803a0cc:	68fb      	ldr	r3, [r7, #12]
 803a0ce:	2200      	movs	r2, #0
 803a0d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a0d4:	2300      	movs	r3, #0
 803a0d6:	2200      	movs	r2, #0
 803a0d8:	2100      	movs	r1, #0
 803a0da:	68f8      	ldr	r0, [r7, #12]
 803a0dc:	f001 fd90 	bl	803bc00 <USBD_LL_PrepareReceive>
 803a0e0:	e01c      	b.n	803a11c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a0e2:	68fb      	ldr	r3, [r7, #12]
 803a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a0e8:	b2db      	uxtb	r3, r3
 803a0ea:	2b03      	cmp	r3, #3
 803a0ec:	d10f      	bne.n	803a10e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803a0ee:	68fb      	ldr	r3, [r7, #12]
 803a0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a0f4:	68db      	ldr	r3, [r3, #12]
 803a0f6:	2b00      	cmp	r3, #0
 803a0f8:	d009      	beq.n	803a10e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803a0fa:	68fb      	ldr	r3, [r7, #12]
 803a0fc:	2200      	movs	r2, #0
 803a0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803a102:	68fb      	ldr	r3, [r7, #12]
 803a104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a108:	68db      	ldr	r3, [r3, #12]
 803a10a:	68f8      	ldr	r0, [r7, #12]
 803a10c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803a10e:	2180      	movs	r1, #128	; 0x80
 803a110:	68f8      	ldr	r0, [r7, #12]
 803a112:	f001 fccb 	bl	803baac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803a116:	68f8      	ldr	r0, [r7, #12]
 803a118:	f001 f8b7 	bl	803b28a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803a11c:	68fb      	ldr	r3, [r7, #12]
 803a11e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803a122:	2b00      	cmp	r3, #0
 803a124:	d03a      	beq.n	803a19c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803a126:	68f8      	ldr	r0, [r7, #12]
 803a128:	f7ff fe42 	bl	8039db0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803a12c:	68fb      	ldr	r3, [r7, #12]
 803a12e:	2200      	movs	r2, #0
 803a130:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803a134:	e032      	b.n	803a19c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803a136:	7afb      	ldrb	r3, [r7, #11]
 803a138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803a13c:	b2db      	uxtb	r3, r3
 803a13e:	4619      	mov	r1, r3
 803a140:	68f8      	ldr	r0, [r7, #12]
 803a142:	f000 f97f 	bl	803a444 <USBD_CoreFindEP>
 803a146:	4603      	mov	r3, r0
 803a148:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a14a:	7dfb      	ldrb	r3, [r7, #23]
 803a14c:	2bff      	cmp	r3, #255	; 0xff
 803a14e:	d025      	beq.n	803a19c <USBD_LL_DataInStage+0x15a>
 803a150:	7dfb      	ldrb	r3, [r7, #23]
 803a152:	2b00      	cmp	r3, #0
 803a154:	d122      	bne.n	803a19c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a156:	68fb      	ldr	r3, [r7, #12]
 803a158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a15c:	b2db      	uxtb	r3, r3
 803a15e:	2b03      	cmp	r3, #3
 803a160:	d11c      	bne.n	803a19c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803a162:	7dfa      	ldrb	r2, [r7, #23]
 803a164:	68fb      	ldr	r3, [r7, #12]
 803a166:	32ae      	adds	r2, #174	; 0xae
 803a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a16c:	695b      	ldr	r3, [r3, #20]
 803a16e:	2b00      	cmp	r3, #0
 803a170:	d014      	beq.n	803a19c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803a172:	7dfa      	ldrb	r2, [r7, #23]
 803a174:	68fb      	ldr	r3, [r7, #12]
 803a176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803a17a:	7dfa      	ldrb	r2, [r7, #23]
 803a17c:	68fb      	ldr	r3, [r7, #12]
 803a17e:	32ae      	adds	r2, #174	; 0xae
 803a180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a184:	695b      	ldr	r3, [r3, #20]
 803a186:	7afa      	ldrb	r2, [r7, #11]
 803a188:	4611      	mov	r1, r2
 803a18a:	68f8      	ldr	r0, [r7, #12]
 803a18c:	4798      	blx	r3
 803a18e:	4603      	mov	r3, r0
 803a190:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803a192:	7dbb      	ldrb	r3, [r7, #22]
 803a194:	2b00      	cmp	r3, #0
 803a196:	d001      	beq.n	803a19c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803a198:	7dbb      	ldrb	r3, [r7, #22]
 803a19a:	e000      	b.n	803a19e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803a19c:	2300      	movs	r3, #0
}
 803a19e:	4618      	mov	r0, r3
 803a1a0:	3718      	adds	r7, #24
 803a1a2:	46bd      	mov	sp, r7
 803a1a4:	bd80      	pop	{r7, pc}

0803a1a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803a1a6:	b580      	push	{r7, lr}
 803a1a8:	b084      	sub	sp, #16
 803a1aa:	af00      	add	r7, sp, #0
 803a1ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803a1ae:	2300      	movs	r3, #0
 803a1b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a1b2:	687b      	ldr	r3, [r7, #4]
 803a1b4:	2201      	movs	r2, #1
 803a1b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803a1ba:	687b      	ldr	r3, [r7, #4]
 803a1bc:	2200      	movs	r2, #0
 803a1be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803a1c2:	687b      	ldr	r3, [r7, #4]
 803a1c4:	2200      	movs	r2, #0
 803a1c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803a1c8:	687b      	ldr	r3, [r7, #4]
 803a1ca:	2200      	movs	r2, #0
 803a1cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803a1d0:	687b      	ldr	r3, [r7, #4]
 803a1d2:	2200      	movs	r2, #0
 803a1d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803a1d8:	687b      	ldr	r3, [r7, #4]
 803a1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a1de:	2b00      	cmp	r3, #0
 803a1e0:	d014      	beq.n	803a20c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803a1e2:	687b      	ldr	r3, [r7, #4]
 803a1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a1e8:	685b      	ldr	r3, [r3, #4]
 803a1ea:	2b00      	cmp	r3, #0
 803a1ec:	d00e      	beq.n	803a20c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803a1ee:	687b      	ldr	r3, [r7, #4]
 803a1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a1f4:	685b      	ldr	r3, [r3, #4]
 803a1f6:	687a      	ldr	r2, [r7, #4]
 803a1f8:	6852      	ldr	r2, [r2, #4]
 803a1fa:	b2d2      	uxtb	r2, r2
 803a1fc:	4611      	mov	r1, r2
 803a1fe:	6878      	ldr	r0, [r7, #4]
 803a200:	4798      	blx	r3
 803a202:	4603      	mov	r3, r0
 803a204:	2b00      	cmp	r3, #0
 803a206:	d001      	beq.n	803a20c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803a208:	2303      	movs	r3, #3
 803a20a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a20c:	2340      	movs	r3, #64	; 0x40
 803a20e:	2200      	movs	r2, #0
 803a210:	2100      	movs	r1, #0
 803a212:	6878      	ldr	r0, [r7, #4]
 803a214:	f001 fc05 	bl	803ba22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803a218:	687b      	ldr	r3, [r7, #4]
 803a21a:	2201      	movs	r2, #1
 803a21c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803a220:	687b      	ldr	r3, [r7, #4]
 803a222:	2240      	movs	r2, #64	; 0x40
 803a224:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a228:	2340      	movs	r3, #64	; 0x40
 803a22a:	2200      	movs	r2, #0
 803a22c:	2180      	movs	r1, #128	; 0x80
 803a22e:	6878      	ldr	r0, [r7, #4]
 803a230:	f001 fbf7 	bl	803ba22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803a234:	687b      	ldr	r3, [r7, #4]
 803a236:	2201      	movs	r2, #1
 803a238:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803a23a:	687b      	ldr	r3, [r7, #4]
 803a23c:	2240      	movs	r2, #64	; 0x40
 803a23e:	621a      	str	r2, [r3, #32]

  return ret;
 803a240:	7bfb      	ldrb	r3, [r7, #15]
}
 803a242:	4618      	mov	r0, r3
 803a244:	3710      	adds	r7, #16
 803a246:	46bd      	mov	sp, r7
 803a248:	bd80      	pop	{r7, pc}

0803a24a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803a24a:	b480      	push	{r7}
 803a24c:	b083      	sub	sp, #12
 803a24e:	af00      	add	r7, sp, #0
 803a250:	6078      	str	r0, [r7, #4]
 803a252:	460b      	mov	r3, r1
 803a254:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803a256:	687b      	ldr	r3, [r7, #4]
 803a258:	78fa      	ldrb	r2, [r7, #3]
 803a25a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803a25c:	2300      	movs	r3, #0
}
 803a25e:	4618      	mov	r0, r3
 803a260:	370c      	adds	r7, #12
 803a262:	46bd      	mov	sp, r7
 803a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a268:	4770      	bx	lr

0803a26a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803a26a:	b480      	push	{r7}
 803a26c:	b083      	sub	sp, #12
 803a26e:	af00      	add	r7, sp, #0
 803a270:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803a272:	687b      	ldr	r3, [r7, #4]
 803a274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a278:	b2da      	uxtb	r2, r3
 803a27a:	687b      	ldr	r3, [r7, #4]
 803a27c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803a280:	687b      	ldr	r3, [r7, #4]
 803a282:	2204      	movs	r2, #4
 803a284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803a288:	2300      	movs	r3, #0
}
 803a28a:	4618      	mov	r0, r3
 803a28c:	370c      	adds	r7, #12
 803a28e:	46bd      	mov	sp, r7
 803a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a294:	4770      	bx	lr

0803a296 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803a296:	b480      	push	{r7}
 803a298:	b083      	sub	sp, #12
 803a29a:	af00      	add	r7, sp, #0
 803a29c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803a29e:	687b      	ldr	r3, [r7, #4]
 803a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2a4:	b2db      	uxtb	r3, r3
 803a2a6:	2b04      	cmp	r3, #4
 803a2a8:	d106      	bne.n	803a2b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803a2aa:	687b      	ldr	r3, [r7, #4]
 803a2ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803a2b0:	b2da      	uxtb	r2, r3
 803a2b2:	687b      	ldr	r3, [r7, #4]
 803a2b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803a2b8:	2300      	movs	r3, #0
}
 803a2ba:	4618      	mov	r0, r3
 803a2bc:	370c      	adds	r7, #12
 803a2be:	46bd      	mov	sp, r7
 803a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2c4:	4770      	bx	lr

0803a2c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803a2c6:	b580      	push	{r7, lr}
 803a2c8:	b082      	sub	sp, #8
 803a2ca:	af00      	add	r7, sp, #0
 803a2cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a2ce:	687b      	ldr	r3, [r7, #4]
 803a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2d4:	b2db      	uxtb	r3, r3
 803a2d6:	2b03      	cmp	r3, #3
 803a2d8:	d110      	bne.n	803a2fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803a2da:	687b      	ldr	r3, [r7, #4]
 803a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a2e0:	2b00      	cmp	r3, #0
 803a2e2:	d00b      	beq.n	803a2fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803a2e4:	687b      	ldr	r3, [r7, #4]
 803a2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a2ea:	69db      	ldr	r3, [r3, #28]
 803a2ec:	2b00      	cmp	r3, #0
 803a2ee:	d005      	beq.n	803a2fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803a2f0:	687b      	ldr	r3, [r7, #4]
 803a2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a2f6:	69db      	ldr	r3, [r3, #28]
 803a2f8:	6878      	ldr	r0, [r7, #4]
 803a2fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803a2fc:	2300      	movs	r3, #0
}
 803a2fe:	4618      	mov	r0, r3
 803a300:	3708      	adds	r7, #8
 803a302:	46bd      	mov	sp, r7
 803a304:	bd80      	pop	{r7, pc}

0803a306 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803a306:	b580      	push	{r7, lr}
 803a308:	b082      	sub	sp, #8
 803a30a:	af00      	add	r7, sp, #0
 803a30c:	6078      	str	r0, [r7, #4]
 803a30e:	460b      	mov	r3, r1
 803a310:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a312:	687b      	ldr	r3, [r7, #4]
 803a314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a318:	687b      	ldr	r3, [r7, #4]
 803a31a:	32ae      	adds	r2, #174	; 0xae
 803a31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a320:	2b00      	cmp	r3, #0
 803a322:	d101      	bne.n	803a328 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803a324:	2303      	movs	r3, #3
 803a326:	e01c      	b.n	803a362 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a328:	687b      	ldr	r3, [r7, #4]
 803a32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a32e:	b2db      	uxtb	r3, r3
 803a330:	2b03      	cmp	r3, #3
 803a332:	d115      	bne.n	803a360 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803a334:	687b      	ldr	r3, [r7, #4]
 803a336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a33a:	687b      	ldr	r3, [r7, #4]
 803a33c:	32ae      	adds	r2, #174	; 0xae
 803a33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a342:	6a1b      	ldr	r3, [r3, #32]
 803a344:	2b00      	cmp	r3, #0
 803a346:	d00b      	beq.n	803a360 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803a348:	687b      	ldr	r3, [r7, #4]
 803a34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a34e:	687b      	ldr	r3, [r7, #4]
 803a350:	32ae      	adds	r2, #174	; 0xae
 803a352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a356:	6a1b      	ldr	r3, [r3, #32]
 803a358:	78fa      	ldrb	r2, [r7, #3]
 803a35a:	4611      	mov	r1, r2
 803a35c:	6878      	ldr	r0, [r7, #4]
 803a35e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a360:	2300      	movs	r3, #0
}
 803a362:	4618      	mov	r0, r3
 803a364:	3708      	adds	r7, #8
 803a366:	46bd      	mov	sp, r7
 803a368:	bd80      	pop	{r7, pc}

0803a36a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803a36a:	b580      	push	{r7, lr}
 803a36c:	b082      	sub	sp, #8
 803a36e:	af00      	add	r7, sp, #0
 803a370:	6078      	str	r0, [r7, #4]
 803a372:	460b      	mov	r3, r1
 803a374:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a376:	687b      	ldr	r3, [r7, #4]
 803a378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a37c:	687b      	ldr	r3, [r7, #4]
 803a37e:	32ae      	adds	r2, #174	; 0xae
 803a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a384:	2b00      	cmp	r3, #0
 803a386:	d101      	bne.n	803a38c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803a388:	2303      	movs	r3, #3
 803a38a:	e01c      	b.n	803a3c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a38c:	687b      	ldr	r3, [r7, #4]
 803a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a392:	b2db      	uxtb	r3, r3
 803a394:	2b03      	cmp	r3, #3
 803a396:	d115      	bne.n	803a3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803a398:	687b      	ldr	r3, [r7, #4]
 803a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a39e:	687b      	ldr	r3, [r7, #4]
 803a3a0:	32ae      	adds	r2, #174	; 0xae
 803a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a3a8:	2b00      	cmp	r3, #0
 803a3aa:	d00b      	beq.n	803a3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803a3ac:	687b      	ldr	r3, [r7, #4]
 803a3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3b2:	687b      	ldr	r3, [r7, #4]
 803a3b4:	32ae      	adds	r2, #174	; 0xae
 803a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a3bc:	78fa      	ldrb	r2, [r7, #3]
 803a3be:	4611      	mov	r1, r2
 803a3c0:	6878      	ldr	r0, [r7, #4]
 803a3c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a3c4:	2300      	movs	r3, #0
}
 803a3c6:	4618      	mov	r0, r3
 803a3c8:	3708      	adds	r7, #8
 803a3ca:	46bd      	mov	sp, r7
 803a3cc:	bd80      	pop	{r7, pc}

0803a3ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803a3ce:	b480      	push	{r7}
 803a3d0:	b083      	sub	sp, #12
 803a3d2:	af00      	add	r7, sp, #0
 803a3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803a3d6:	2300      	movs	r3, #0
}
 803a3d8:	4618      	mov	r0, r3
 803a3da:	370c      	adds	r7, #12
 803a3dc:	46bd      	mov	sp, r7
 803a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3e2:	4770      	bx	lr

0803a3e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803a3e4:	b580      	push	{r7, lr}
 803a3e6:	b084      	sub	sp, #16
 803a3e8:	af00      	add	r7, sp, #0
 803a3ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803a3ec:	2300      	movs	r3, #0
 803a3ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a3f0:	687b      	ldr	r3, [r7, #4]
 803a3f2:	2201      	movs	r2, #1
 803a3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803a3f8:	687b      	ldr	r3, [r7, #4]
 803a3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a3fe:	2b00      	cmp	r3, #0
 803a400:	d00e      	beq.n	803a420 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803a402:	687b      	ldr	r3, [r7, #4]
 803a404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a408:	685b      	ldr	r3, [r3, #4]
 803a40a:	687a      	ldr	r2, [r7, #4]
 803a40c:	6852      	ldr	r2, [r2, #4]
 803a40e:	b2d2      	uxtb	r2, r2
 803a410:	4611      	mov	r1, r2
 803a412:	6878      	ldr	r0, [r7, #4]
 803a414:	4798      	blx	r3
 803a416:	4603      	mov	r3, r0
 803a418:	2b00      	cmp	r3, #0
 803a41a:	d001      	beq.n	803a420 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803a41c:	2303      	movs	r3, #3
 803a41e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803a420:	7bfb      	ldrb	r3, [r7, #15]
}
 803a422:	4618      	mov	r0, r3
 803a424:	3710      	adds	r7, #16
 803a426:	46bd      	mov	sp, r7
 803a428:	bd80      	pop	{r7, pc}

0803a42a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a42a:	b480      	push	{r7}
 803a42c:	b083      	sub	sp, #12
 803a42e:	af00      	add	r7, sp, #0
 803a430:	6078      	str	r0, [r7, #4]
 803a432:	460b      	mov	r3, r1
 803a434:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a436:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a438:	4618      	mov	r0, r3
 803a43a:	370c      	adds	r7, #12
 803a43c:	46bd      	mov	sp, r7
 803a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a442:	4770      	bx	lr

0803a444 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a444:	b480      	push	{r7}
 803a446:	b083      	sub	sp, #12
 803a448:	af00      	add	r7, sp, #0
 803a44a:	6078      	str	r0, [r7, #4]
 803a44c:	460b      	mov	r3, r1
 803a44e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a450:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a452:	4618      	mov	r0, r3
 803a454:	370c      	adds	r7, #12
 803a456:	46bd      	mov	sp, r7
 803a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a45c:	4770      	bx	lr

0803a45e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803a45e:	b580      	push	{r7, lr}
 803a460:	b086      	sub	sp, #24
 803a462:	af00      	add	r7, sp, #0
 803a464:	6078      	str	r0, [r7, #4]
 803a466:	460b      	mov	r3, r1
 803a468:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803a46a:	687b      	ldr	r3, [r7, #4]
 803a46c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803a46e:	687b      	ldr	r3, [r7, #4]
 803a470:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803a472:	2300      	movs	r3, #0
 803a474:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803a476:	68fb      	ldr	r3, [r7, #12]
 803a478:	885b      	ldrh	r3, [r3, #2]
 803a47a:	b29a      	uxth	r2, r3
 803a47c:	68fb      	ldr	r3, [r7, #12]
 803a47e:	781b      	ldrb	r3, [r3, #0]
 803a480:	b29b      	uxth	r3, r3
 803a482:	429a      	cmp	r2, r3
 803a484:	d920      	bls.n	803a4c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803a486:	68fb      	ldr	r3, [r7, #12]
 803a488:	781b      	ldrb	r3, [r3, #0]
 803a48a:	b29b      	uxth	r3, r3
 803a48c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803a48e:	e013      	b.n	803a4b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803a490:	f107 030a 	add.w	r3, r7, #10
 803a494:	4619      	mov	r1, r3
 803a496:	6978      	ldr	r0, [r7, #20]
 803a498:	f000 f81b 	bl	803a4d2 <USBD_GetNextDesc>
 803a49c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803a49e:	697b      	ldr	r3, [r7, #20]
 803a4a0:	785b      	ldrb	r3, [r3, #1]
 803a4a2:	2b05      	cmp	r3, #5
 803a4a4:	d108      	bne.n	803a4b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803a4a6:	697b      	ldr	r3, [r7, #20]
 803a4a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803a4aa:	693b      	ldr	r3, [r7, #16]
 803a4ac:	789b      	ldrb	r3, [r3, #2]
 803a4ae:	78fa      	ldrb	r2, [r7, #3]
 803a4b0:	429a      	cmp	r2, r3
 803a4b2:	d008      	beq.n	803a4c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803a4b4:	2300      	movs	r3, #0
 803a4b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803a4b8:	68fb      	ldr	r3, [r7, #12]
 803a4ba:	885b      	ldrh	r3, [r3, #2]
 803a4bc:	b29a      	uxth	r2, r3
 803a4be:	897b      	ldrh	r3, [r7, #10]
 803a4c0:	429a      	cmp	r2, r3
 803a4c2:	d8e5      	bhi.n	803a490 <USBD_GetEpDesc+0x32>
 803a4c4:	e000      	b.n	803a4c8 <USBD_GetEpDesc+0x6a>
          break;
 803a4c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803a4c8:	693b      	ldr	r3, [r7, #16]
}
 803a4ca:	4618      	mov	r0, r3
 803a4cc:	3718      	adds	r7, #24
 803a4ce:	46bd      	mov	sp, r7
 803a4d0:	bd80      	pop	{r7, pc}

0803a4d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803a4d2:	b480      	push	{r7}
 803a4d4:	b085      	sub	sp, #20
 803a4d6:	af00      	add	r7, sp, #0
 803a4d8:	6078      	str	r0, [r7, #4]
 803a4da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803a4dc:	687b      	ldr	r3, [r7, #4]
 803a4de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803a4e0:	683b      	ldr	r3, [r7, #0]
 803a4e2:	881a      	ldrh	r2, [r3, #0]
 803a4e4:	68fb      	ldr	r3, [r7, #12]
 803a4e6:	781b      	ldrb	r3, [r3, #0]
 803a4e8:	b29b      	uxth	r3, r3
 803a4ea:	4413      	add	r3, r2
 803a4ec:	b29a      	uxth	r2, r3
 803a4ee:	683b      	ldr	r3, [r7, #0]
 803a4f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803a4f2:	68fb      	ldr	r3, [r7, #12]
 803a4f4:	781b      	ldrb	r3, [r3, #0]
 803a4f6:	461a      	mov	r2, r3
 803a4f8:	687b      	ldr	r3, [r7, #4]
 803a4fa:	4413      	add	r3, r2
 803a4fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803a4fe:	68fb      	ldr	r3, [r7, #12]
}
 803a500:	4618      	mov	r0, r3
 803a502:	3714      	adds	r7, #20
 803a504:	46bd      	mov	sp, r7
 803a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a50a:	4770      	bx	lr

0803a50c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803a50c:	b480      	push	{r7}
 803a50e:	b087      	sub	sp, #28
 803a510:	af00      	add	r7, sp, #0
 803a512:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803a514:	687b      	ldr	r3, [r7, #4]
 803a516:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803a518:	697b      	ldr	r3, [r7, #20]
 803a51a:	781b      	ldrb	r3, [r3, #0]
 803a51c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803a51e:	697b      	ldr	r3, [r7, #20]
 803a520:	3301      	adds	r3, #1
 803a522:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803a524:	697b      	ldr	r3, [r7, #20]
 803a526:	781b      	ldrb	r3, [r3, #0]
 803a528:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803a52a:	8a3b      	ldrh	r3, [r7, #16]
 803a52c:	021b      	lsls	r3, r3, #8
 803a52e:	b21a      	sxth	r2, r3
 803a530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803a534:	4313      	orrs	r3, r2
 803a536:	b21b      	sxth	r3, r3
 803a538:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803a53a:	89fb      	ldrh	r3, [r7, #14]
}
 803a53c:	4618      	mov	r0, r3
 803a53e:	371c      	adds	r7, #28
 803a540:	46bd      	mov	sp, r7
 803a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a546:	4770      	bx	lr

0803a548 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a548:	b580      	push	{r7, lr}
 803a54a:	b084      	sub	sp, #16
 803a54c:	af00      	add	r7, sp, #0
 803a54e:	6078      	str	r0, [r7, #4]
 803a550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a552:	2300      	movs	r3, #0
 803a554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a556:	683b      	ldr	r3, [r7, #0]
 803a558:	781b      	ldrb	r3, [r3, #0]
 803a55a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a55e:	2b40      	cmp	r3, #64	; 0x40
 803a560:	d005      	beq.n	803a56e <USBD_StdDevReq+0x26>
 803a562:	2b40      	cmp	r3, #64	; 0x40
 803a564:	d857      	bhi.n	803a616 <USBD_StdDevReq+0xce>
 803a566:	2b00      	cmp	r3, #0
 803a568:	d00f      	beq.n	803a58a <USBD_StdDevReq+0x42>
 803a56a:	2b20      	cmp	r3, #32
 803a56c:	d153      	bne.n	803a616 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803a56e:	687b      	ldr	r3, [r7, #4]
 803a570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a574:	687b      	ldr	r3, [r7, #4]
 803a576:	32ae      	adds	r2, #174	; 0xae
 803a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a57c:	689b      	ldr	r3, [r3, #8]
 803a57e:	6839      	ldr	r1, [r7, #0]
 803a580:	6878      	ldr	r0, [r7, #4]
 803a582:	4798      	blx	r3
 803a584:	4603      	mov	r3, r0
 803a586:	73fb      	strb	r3, [r7, #15]
      break;
 803a588:	e04a      	b.n	803a620 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a58a:	683b      	ldr	r3, [r7, #0]
 803a58c:	785b      	ldrb	r3, [r3, #1]
 803a58e:	2b09      	cmp	r3, #9
 803a590:	d83b      	bhi.n	803a60a <USBD_StdDevReq+0xc2>
 803a592:	a201      	add	r2, pc, #4	; (adr r2, 803a598 <USBD_StdDevReq+0x50>)
 803a594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a598:	0803a5ed 	.word	0x0803a5ed
 803a59c:	0803a601 	.word	0x0803a601
 803a5a0:	0803a60b 	.word	0x0803a60b
 803a5a4:	0803a5f7 	.word	0x0803a5f7
 803a5a8:	0803a60b 	.word	0x0803a60b
 803a5ac:	0803a5cb 	.word	0x0803a5cb
 803a5b0:	0803a5c1 	.word	0x0803a5c1
 803a5b4:	0803a60b 	.word	0x0803a60b
 803a5b8:	0803a5e3 	.word	0x0803a5e3
 803a5bc:	0803a5d5 	.word	0x0803a5d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803a5c0:	6839      	ldr	r1, [r7, #0]
 803a5c2:	6878      	ldr	r0, [r7, #4]
 803a5c4:	f000 fa3c 	bl	803aa40 <USBD_GetDescriptor>
          break;
 803a5c8:	e024      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803a5ca:	6839      	ldr	r1, [r7, #0]
 803a5cc:	6878      	ldr	r0, [r7, #4]
 803a5ce:	f000 fba1 	bl	803ad14 <USBD_SetAddress>
          break;
 803a5d2:	e01f      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803a5d4:	6839      	ldr	r1, [r7, #0]
 803a5d6:	6878      	ldr	r0, [r7, #4]
 803a5d8:	f000 fbe0 	bl	803ad9c <USBD_SetConfig>
 803a5dc:	4603      	mov	r3, r0
 803a5de:	73fb      	strb	r3, [r7, #15]
          break;
 803a5e0:	e018      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803a5e2:	6839      	ldr	r1, [r7, #0]
 803a5e4:	6878      	ldr	r0, [r7, #4]
 803a5e6:	f000 fc83 	bl	803aef0 <USBD_GetConfig>
          break;
 803a5ea:	e013      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803a5ec:	6839      	ldr	r1, [r7, #0]
 803a5ee:	6878      	ldr	r0, [r7, #4]
 803a5f0:	f000 fcb4 	bl	803af5c <USBD_GetStatus>
          break;
 803a5f4:	e00e      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803a5f6:	6839      	ldr	r1, [r7, #0]
 803a5f8:	6878      	ldr	r0, [r7, #4]
 803a5fa:	f000 fce3 	bl	803afc4 <USBD_SetFeature>
          break;
 803a5fe:	e009      	b.n	803a614 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803a600:	6839      	ldr	r1, [r7, #0]
 803a602:	6878      	ldr	r0, [r7, #4]
 803a604:	f000 fd07 	bl	803b016 <USBD_ClrFeature>
          break;
 803a608:	e004      	b.n	803a614 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803a60a:	6839      	ldr	r1, [r7, #0]
 803a60c:	6878      	ldr	r0, [r7, #4]
 803a60e:	f000 fd5e 	bl	803b0ce <USBD_CtlError>
          break;
 803a612:	bf00      	nop
      }
      break;
 803a614:	e004      	b.n	803a620 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803a616:	6839      	ldr	r1, [r7, #0]
 803a618:	6878      	ldr	r0, [r7, #4]
 803a61a:	f000 fd58 	bl	803b0ce <USBD_CtlError>
      break;
 803a61e:	bf00      	nop
  }

  return ret;
 803a620:	7bfb      	ldrb	r3, [r7, #15]
}
 803a622:	4618      	mov	r0, r3
 803a624:	3710      	adds	r7, #16
 803a626:	46bd      	mov	sp, r7
 803a628:	bd80      	pop	{r7, pc}
 803a62a:	bf00      	nop

0803a62c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a62c:	b580      	push	{r7, lr}
 803a62e:	b084      	sub	sp, #16
 803a630:	af00      	add	r7, sp, #0
 803a632:	6078      	str	r0, [r7, #4]
 803a634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a636:	2300      	movs	r3, #0
 803a638:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a63a:	683b      	ldr	r3, [r7, #0]
 803a63c:	781b      	ldrb	r3, [r3, #0]
 803a63e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a642:	2b40      	cmp	r3, #64	; 0x40
 803a644:	d005      	beq.n	803a652 <USBD_StdItfReq+0x26>
 803a646:	2b40      	cmp	r3, #64	; 0x40
 803a648:	d852      	bhi.n	803a6f0 <USBD_StdItfReq+0xc4>
 803a64a:	2b00      	cmp	r3, #0
 803a64c:	d001      	beq.n	803a652 <USBD_StdItfReq+0x26>
 803a64e:	2b20      	cmp	r3, #32
 803a650:	d14e      	bne.n	803a6f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803a652:	687b      	ldr	r3, [r7, #4]
 803a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a658:	b2db      	uxtb	r3, r3
 803a65a:	3b01      	subs	r3, #1
 803a65c:	2b02      	cmp	r3, #2
 803a65e:	d840      	bhi.n	803a6e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803a660:	683b      	ldr	r3, [r7, #0]
 803a662:	889b      	ldrh	r3, [r3, #4]
 803a664:	b2db      	uxtb	r3, r3
 803a666:	2b01      	cmp	r3, #1
 803a668:	d836      	bhi.n	803a6d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803a66a:	683b      	ldr	r3, [r7, #0]
 803a66c:	889b      	ldrh	r3, [r3, #4]
 803a66e:	b2db      	uxtb	r3, r3
 803a670:	4619      	mov	r1, r3
 803a672:	6878      	ldr	r0, [r7, #4]
 803a674:	f7ff fed9 	bl	803a42a <USBD_CoreFindIF>
 803a678:	4603      	mov	r3, r0
 803a67a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a67c:	7bbb      	ldrb	r3, [r7, #14]
 803a67e:	2bff      	cmp	r3, #255	; 0xff
 803a680:	d01d      	beq.n	803a6be <USBD_StdItfReq+0x92>
 803a682:	7bbb      	ldrb	r3, [r7, #14]
 803a684:	2b00      	cmp	r3, #0
 803a686:	d11a      	bne.n	803a6be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803a688:	7bba      	ldrb	r2, [r7, #14]
 803a68a:	687b      	ldr	r3, [r7, #4]
 803a68c:	32ae      	adds	r2, #174	; 0xae
 803a68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a692:	689b      	ldr	r3, [r3, #8]
 803a694:	2b00      	cmp	r3, #0
 803a696:	d00f      	beq.n	803a6b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803a698:	7bba      	ldrb	r2, [r7, #14]
 803a69a:	687b      	ldr	r3, [r7, #4]
 803a69c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a6a0:	7bba      	ldrb	r2, [r7, #14]
 803a6a2:	687b      	ldr	r3, [r7, #4]
 803a6a4:	32ae      	adds	r2, #174	; 0xae
 803a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6aa:	689b      	ldr	r3, [r3, #8]
 803a6ac:	6839      	ldr	r1, [r7, #0]
 803a6ae:	6878      	ldr	r0, [r7, #4]
 803a6b0:	4798      	blx	r3
 803a6b2:	4603      	mov	r3, r0
 803a6b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a6b6:	e004      	b.n	803a6c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803a6b8:	2303      	movs	r3, #3
 803a6ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a6bc:	e001      	b.n	803a6c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803a6be:	2303      	movs	r3, #3
 803a6c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803a6c2:	683b      	ldr	r3, [r7, #0]
 803a6c4:	88db      	ldrh	r3, [r3, #6]
 803a6c6:	2b00      	cmp	r3, #0
 803a6c8:	d110      	bne.n	803a6ec <USBD_StdItfReq+0xc0>
 803a6ca:	7bfb      	ldrb	r3, [r7, #15]
 803a6cc:	2b00      	cmp	r3, #0
 803a6ce:	d10d      	bne.n	803a6ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803a6d0:	6878      	ldr	r0, [r7, #4]
 803a6d2:	f000 fdc7 	bl	803b264 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803a6d6:	e009      	b.n	803a6ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803a6d8:	6839      	ldr	r1, [r7, #0]
 803a6da:	6878      	ldr	r0, [r7, #4]
 803a6dc:	f000 fcf7 	bl	803b0ce <USBD_CtlError>
          break;
 803a6e0:	e004      	b.n	803a6ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803a6e2:	6839      	ldr	r1, [r7, #0]
 803a6e4:	6878      	ldr	r0, [r7, #4]
 803a6e6:	f000 fcf2 	bl	803b0ce <USBD_CtlError>
          break;
 803a6ea:	e000      	b.n	803a6ee <USBD_StdItfReq+0xc2>
          break;
 803a6ec:	bf00      	nop
      }
      break;
 803a6ee:	e004      	b.n	803a6fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803a6f0:	6839      	ldr	r1, [r7, #0]
 803a6f2:	6878      	ldr	r0, [r7, #4]
 803a6f4:	f000 fceb 	bl	803b0ce <USBD_CtlError>
      break;
 803a6f8:	bf00      	nop
  }

  return ret;
 803a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 803a6fc:	4618      	mov	r0, r3
 803a6fe:	3710      	adds	r7, #16
 803a700:	46bd      	mov	sp, r7
 803a702:	bd80      	pop	{r7, pc}

0803a704 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a704:	b580      	push	{r7, lr}
 803a706:	b084      	sub	sp, #16
 803a708:	af00      	add	r7, sp, #0
 803a70a:	6078      	str	r0, [r7, #4]
 803a70c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803a70e:	2300      	movs	r3, #0
 803a710:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803a712:	683b      	ldr	r3, [r7, #0]
 803a714:	889b      	ldrh	r3, [r3, #4]
 803a716:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a718:	683b      	ldr	r3, [r7, #0]
 803a71a:	781b      	ldrb	r3, [r3, #0]
 803a71c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a720:	2b40      	cmp	r3, #64	; 0x40
 803a722:	d007      	beq.n	803a734 <USBD_StdEPReq+0x30>
 803a724:	2b40      	cmp	r3, #64	; 0x40
 803a726:	f200 817f 	bhi.w	803aa28 <USBD_StdEPReq+0x324>
 803a72a:	2b00      	cmp	r3, #0
 803a72c:	d02a      	beq.n	803a784 <USBD_StdEPReq+0x80>
 803a72e:	2b20      	cmp	r3, #32
 803a730:	f040 817a 	bne.w	803aa28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803a734:	7bbb      	ldrb	r3, [r7, #14]
 803a736:	4619      	mov	r1, r3
 803a738:	6878      	ldr	r0, [r7, #4]
 803a73a:	f7ff fe83 	bl	803a444 <USBD_CoreFindEP>
 803a73e:	4603      	mov	r3, r0
 803a740:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a742:	7b7b      	ldrb	r3, [r7, #13]
 803a744:	2bff      	cmp	r3, #255	; 0xff
 803a746:	f000 8174 	beq.w	803aa32 <USBD_StdEPReq+0x32e>
 803a74a:	7b7b      	ldrb	r3, [r7, #13]
 803a74c:	2b00      	cmp	r3, #0
 803a74e:	f040 8170 	bne.w	803aa32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803a752:	7b7a      	ldrb	r2, [r7, #13]
 803a754:	687b      	ldr	r3, [r7, #4]
 803a756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803a75a:	7b7a      	ldrb	r2, [r7, #13]
 803a75c:	687b      	ldr	r3, [r7, #4]
 803a75e:	32ae      	adds	r2, #174	; 0xae
 803a760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a764:	689b      	ldr	r3, [r3, #8]
 803a766:	2b00      	cmp	r3, #0
 803a768:	f000 8163 	beq.w	803aa32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803a76c:	7b7a      	ldrb	r2, [r7, #13]
 803a76e:	687b      	ldr	r3, [r7, #4]
 803a770:	32ae      	adds	r2, #174	; 0xae
 803a772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a776:	689b      	ldr	r3, [r3, #8]
 803a778:	6839      	ldr	r1, [r7, #0]
 803a77a:	6878      	ldr	r0, [r7, #4]
 803a77c:	4798      	blx	r3
 803a77e:	4603      	mov	r3, r0
 803a780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803a782:	e156      	b.n	803aa32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a784:	683b      	ldr	r3, [r7, #0]
 803a786:	785b      	ldrb	r3, [r3, #1]
 803a788:	2b03      	cmp	r3, #3
 803a78a:	d008      	beq.n	803a79e <USBD_StdEPReq+0x9a>
 803a78c:	2b03      	cmp	r3, #3
 803a78e:	f300 8145 	bgt.w	803aa1c <USBD_StdEPReq+0x318>
 803a792:	2b00      	cmp	r3, #0
 803a794:	f000 809b 	beq.w	803a8ce <USBD_StdEPReq+0x1ca>
 803a798:	2b01      	cmp	r3, #1
 803a79a:	d03c      	beq.n	803a816 <USBD_StdEPReq+0x112>
 803a79c:	e13e      	b.n	803aa1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803a79e:	687b      	ldr	r3, [r7, #4]
 803a7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a7a4:	b2db      	uxtb	r3, r3
 803a7a6:	2b02      	cmp	r3, #2
 803a7a8:	d002      	beq.n	803a7b0 <USBD_StdEPReq+0xac>
 803a7aa:	2b03      	cmp	r3, #3
 803a7ac:	d016      	beq.n	803a7dc <USBD_StdEPReq+0xd8>
 803a7ae:	e02c      	b.n	803a80a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a7b0:	7bbb      	ldrb	r3, [r7, #14]
 803a7b2:	2b00      	cmp	r3, #0
 803a7b4:	d00d      	beq.n	803a7d2 <USBD_StdEPReq+0xce>
 803a7b6:	7bbb      	ldrb	r3, [r7, #14]
 803a7b8:	2b80      	cmp	r3, #128	; 0x80
 803a7ba:	d00a      	beq.n	803a7d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a7bc:	7bbb      	ldrb	r3, [r7, #14]
 803a7be:	4619      	mov	r1, r3
 803a7c0:	6878      	ldr	r0, [r7, #4]
 803a7c2:	f001 f973 	bl	803baac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a7c6:	2180      	movs	r1, #128	; 0x80
 803a7c8:	6878      	ldr	r0, [r7, #4]
 803a7ca:	f001 f96f 	bl	803baac <USBD_LL_StallEP>
 803a7ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a7d0:	e020      	b.n	803a814 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803a7d2:	6839      	ldr	r1, [r7, #0]
 803a7d4:	6878      	ldr	r0, [r7, #4]
 803a7d6:	f000 fc7a 	bl	803b0ce <USBD_CtlError>
              break;
 803a7da:	e01b      	b.n	803a814 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a7dc:	683b      	ldr	r3, [r7, #0]
 803a7de:	885b      	ldrh	r3, [r3, #2]
 803a7e0:	2b00      	cmp	r3, #0
 803a7e2:	d10e      	bne.n	803a802 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803a7e4:	7bbb      	ldrb	r3, [r7, #14]
 803a7e6:	2b00      	cmp	r3, #0
 803a7e8:	d00b      	beq.n	803a802 <USBD_StdEPReq+0xfe>
 803a7ea:	7bbb      	ldrb	r3, [r7, #14]
 803a7ec:	2b80      	cmp	r3, #128	; 0x80
 803a7ee:	d008      	beq.n	803a802 <USBD_StdEPReq+0xfe>
 803a7f0:	683b      	ldr	r3, [r7, #0]
 803a7f2:	88db      	ldrh	r3, [r3, #6]
 803a7f4:	2b00      	cmp	r3, #0
 803a7f6:	d104      	bne.n	803a802 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803a7f8:	7bbb      	ldrb	r3, [r7, #14]
 803a7fa:	4619      	mov	r1, r3
 803a7fc:	6878      	ldr	r0, [r7, #4]
 803a7fe:	f001 f955 	bl	803baac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803a802:	6878      	ldr	r0, [r7, #4]
 803a804:	f000 fd2e 	bl	803b264 <USBD_CtlSendStatus>

              break;
 803a808:	e004      	b.n	803a814 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803a80a:	6839      	ldr	r1, [r7, #0]
 803a80c:	6878      	ldr	r0, [r7, #4]
 803a80e:	f000 fc5e 	bl	803b0ce <USBD_CtlError>
              break;
 803a812:	bf00      	nop
          }
          break;
 803a814:	e107      	b.n	803aa26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803a816:	687b      	ldr	r3, [r7, #4]
 803a818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a81c:	b2db      	uxtb	r3, r3
 803a81e:	2b02      	cmp	r3, #2
 803a820:	d002      	beq.n	803a828 <USBD_StdEPReq+0x124>
 803a822:	2b03      	cmp	r3, #3
 803a824:	d016      	beq.n	803a854 <USBD_StdEPReq+0x150>
 803a826:	e04b      	b.n	803a8c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a828:	7bbb      	ldrb	r3, [r7, #14]
 803a82a:	2b00      	cmp	r3, #0
 803a82c:	d00d      	beq.n	803a84a <USBD_StdEPReq+0x146>
 803a82e:	7bbb      	ldrb	r3, [r7, #14]
 803a830:	2b80      	cmp	r3, #128	; 0x80
 803a832:	d00a      	beq.n	803a84a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a834:	7bbb      	ldrb	r3, [r7, #14]
 803a836:	4619      	mov	r1, r3
 803a838:	6878      	ldr	r0, [r7, #4]
 803a83a:	f001 f937 	bl	803baac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a83e:	2180      	movs	r1, #128	; 0x80
 803a840:	6878      	ldr	r0, [r7, #4]
 803a842:	f001 f933 	bl	803baac <USBD_LL_StallEP>
 803a846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a848:	e040      	b.n	803a8cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803a84a:	6839      	ldr	r1, [r7, #0]
 803a84c:	6878      	ldr	r0, [r7, #4]
 803a84e:	f000 fc3e 	bl	803b0ce <USBD_CtlError>
              break;
 803a852:	e03b      	b.n	803a8cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a854:	683b      	ldr	r3, [r7, #0]
 803a856:	885b      	ldrh	r3, [r3, #2]
 803a858:	2b00      	cmp	r3, #0
 803a85a:	d136      	bne.n	803a8ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803a85c:	7bbb      	ldrb	r3, [r7, #14]
 803a85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a862:	2b00      	cmp	r3, #0
 803a864:	d004      	beq.n	803a870 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803a866:	7bbb      	ldrb	r3, [r7, #14]
 803a868:	4619      	mov	r1, r3
 803a86a:	6878      	ldr	r0, [r7, #4]
 803a86c:	f001 f93d 	bl	803baea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803a870:	6878      	ldr	r0, [r7, #4]
 803a872:	f000 fcf7 	bl	803b264 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803a876:	7bbb      	ldrb	r3, [r7, #14]
 803a878:	4619      	mov	r1, r3
 803a87a:	6878      	ldr	r0, [r7, #4]
 803a87c:	f7ff fde2 	bl	803a444 <USBD_CoreFindEP>
 803a880:	4603      	mov	r3, r0
 803a882:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a884:	7b7b      	ldrb	r3, [r7, #13]
 803a886:	2bff      	cmp	r3, #255	; 0xff
 803a888:	d01f      	beq.n	803a8ca <USBD_StdEPReq+0x1c6>
 803a88a:	7b7b      	ldrb	r3, [r7, #13]
 803a88c:	2b00      	cmp	r3, #0
 803a88e:	d11c      	bne.n	803a8ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803a890:	7b7a      	ldrb	r2, [r7, #13]
 803a892:	687b      	ldr	r3, [r7, #4]
 803a894:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803a898:	7b7a      	ldrb	r2, [r7, #13]
 803a89a:	687b      	ldr	r3, [r7, #4]
 803a89c:	32ae      	adds	r2, #174	; 0xae
 803a89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a8a2:	689b      	ldr	r3, [r3, #8]
 803a8a4:	2b00      	cmp	r3, #0
 803a8a6:	d010      	beq.n	803a8ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a8a8:	7b7a      	ldrb	r2, [r7, #13]
 803a8aa:	687b      	ldr	r3, [r7, #4]
 803a8ac:	32ae      	adds	r2, #174	; 0xae
 803a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a8b2:	689b      	ldr	r3, [r3, #8]
 803a8b4:	6839      	ldr	r1, [r7, #0]
 803a8b6:	6878      	ldr	r0, [r7, #4]
 803a8b8:	4798      	blx	r3
 803a8ba:	4603      	mov	r3, r0
 803a8bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803a8be:	e004      	b.n	803a8ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803a8c0:	6839      	ldr	r1, [r7, #0]
 803a8c2:	6878      	ldr	r0, [r7, #4]
 803a8c4:	f000 fc03 	bl	803b0ce <USBD_CtlError>
              break;
 803a8c8:	e000      	b.n	803a8cc <USBD_StdEPReq+0x1c8>
              break;
 803a8ca:	bf00      	nop
          }
          break;
 803a8cc:	e0ab      	b.n	803aa26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803a8ce:	687b      	ldr	r3, [r7, #4]
 803a8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a8d4:	b2db      	uxtb	r3, r3
 803a8d6:	2b02      	cmp	r3, #2
 803a8d8:	d002      	beq.n	803a8e0 <USBD_StdEPReq+0x1dc>
 803a8da:	2b03      	cmp	r3, #3
 803a8dc:	d032      	beq.n	803a944 <USBD_StdEPReq+0x240>
 803a8de:	e097      	b.n	803aa10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a8e0:	7bbb      	ldrb	r3, [r7, #14]
 803a8e2:	2b00      	cmp	r3, #0
 803a8e4:	d007      	beq.n	803a8f6 <USBD_StdEPReq+0x1f2>
 803a8e6:	7bbb      	ldrb	r3, [r7, #14]
 803a8e8:	2b80      	cmp	r3, #128	; 0x80
 803a8ea:	d004      	beq.n	803a8f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803a8ec:	6839      	ldr	r1, [r7, #0]
 803a8ee:	6878      	ldr	r0, [r7, #4]
 803a8f0:	f000 fbed 	bl	803b0ce <USBD_CtlError>
                break;
 803a8f4:	e091      	b.n	803aa1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a8f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a8fa:	2b00      	cmp	r3, #0
 803a8fc:	da0b      	bge.n	803a916 <USBD_StdEPReq+0x212>
 803a8fe:	7bbb      	ldrb	r3, [r7, #14]
 803a900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a904:	4613      	mov	r3, r2
 803a906:	009b      	lsls	r3, r3, #2
 803a908:	4413      	add	r3, r2
 803a90a:	009b      	lsls	r3, r3, #2
 803a90c:	3310      	adds	r3, #16
 803a90e:	687a      	ldr	r2, [r7, #4]
 803a910:	4413      	add	r3, r2
 803a912:	3304      	adds	r3, #4
 803a914:	e00b      	b.n	803a92e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a916:	7bbb      	ldrb	r3, [r7, #14]
 803a918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a91c:	4613      	mov	r3, r2
 803a91e:	009b      	lsls	r3, r3, #2
 803a920:	4413      	add	r3, r2
 803a922:	009b      	lsls	r3, r3, #2
 803a924:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a928:	687a      	ldr	r2, [r7, #4]
 803a92a:	4413      	add	r3, r2
 803a92c:	3304      	adds	r3, #4
 803a92e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803a930:	68bb      	ldr	r3, [r7, #8]
 803a932:	2200      	movs	r2, #0
 803a934:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a936:	68bb      	ldr	r3, [r7, #8]
 803a938:	2202      	movs	r2, #2
 803a93a:	4619      	mov	r1, r3
 803a93c:	6878      	ldr	r0, [r7, #4]
 803a93e:	f000 fc37 	bl	803b1b0 <USBD_CtlSendData>
              break;
 803a942:	e06a      	b.n	803aa1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803a944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a948:	2b00      	cmp	r3, #0
 803a94a:	da11      	bge.n	803a970 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803a94c:	7bbb      	ldrb	r3, [r7, #14]
 803a94e:	f003 020f 	and.w	r2, r3, #15
 803a952:	6879      	ldr	r1, [r7, #4]
 803a954:	4613      	mov	r3, r2
 803a956:	009b      	lsls	r3, r3, #2
 803a958:	4413      	add	r3, r2
 803a95a:	009b      	lsls	r3, r3, #2
 803a95c:	440b      	add	r3, r1
 803a95e:	3324      	adds	r3, #36	; 0x24
 803a960:	881b      	ldrh	r3, [r3, #0]
 803a962:	2b00      	cmp	r3, #0
 803a964:	d117      	bne.n	803a996 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a966:	6839      	ldr	r1, [r7, #0]
 803a968:	6878      	ldr	r0, [r7, #4]
 803a96a:	f000 fbb0 	bl	803b0ce <USBD_CtlError>
                  break;
 803a96e:	e054      	b.n	803aa1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803a970:	7bbb      	ldrb	r3, [r7, #14]
 803a972:	f003 020f 	and.w	r2, r3, #15
 803a976:	6879      	ldr	r1, [r7, #4]
 803a978:	4613      	mov	r3, r2
 803a97a:	009b      	lsls	r3, r3, #2
 803a97c:	4413      	add	r3, r2
 803a97e:	009b      	lsls	r3, r3, #2
 803a980:	440b      	add	r3, r1
 803a982:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a986:	881b      	ldrh	r3, [r3, #0]
 803a988:	2b00      	cmp	r3, #0
 803a98a:	d104      	bne.n	803a996 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a98c:	6839      	ldr	r1, [r7, #0]
 803a98e:	6878      	ldr	r0, [r7, #4]
 803a990:	f000 fb9d 	bl	803b0ce <USBD_CtlError>
                  break;
 803a994:	e041      	b.n	803aa1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a99a:	2b00      	cmp	r3, #0
 803a99c:	da0b      	bge.n	803a9b6 <USBD_StdEPReq+0x2b2>
 803a99e:	7bbb      	ldrb	r3, [r7, #14]
 803a9a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a9a4:	4613      	mov	r3, r2
 803a9a6:	009b      	lsls	r3, r3, #2
 803a9a8:	4413      	add	r3, r2
 803a9aa:	009b      	lsls	r3, r3, #2
 803a9ac:	3310      	adds	r3, #16
 803a9ae:	687a      	ldr	r2, [r7, #4]
 803a9b0:	4413      	add	r3, r2
 803a9b2:	3304      	adds	r3, #4
 803a9b4:	e00b      	b.n	803a9ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a9b6:	7bbb      	ldrb	r3, [r7, #14]
 803a9b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a9bc:	4613      	mov	r3, r2
 803a9be:	009b      	lsls	r3, r3, #2
 803a9c0:	4413      	add	r3, r2
 803a9c2:	009b      	lsls	r3, r3, #2
 803a9c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a9c8:	687a      	ldr	r2, [r7, #4]
 803a9ca:	4413      	add	r3, r2
 803a9cc:	3304      	adds	r3, #4
 803a9ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803a9d0:	7bbb      	ldrb	r3, [r7, #14]
 803a9d2:	2b00      	cmp	r3, #0
 803a9d4:	d002      	beq.n	803a9dc <USBD_StdEPReq+0x2d8>
 803a9d6:	7bbb      	ldrb	r3, [r7, #14]
 803a9d8:	2b80      	cmp	r3, #128	; 0x80
 803a9da:	d103      	bne.n	803a9e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803a9dc:	68bb      	ldr	r3, [r7, #8]
 803a9de:	2200      	movs	r2, #0
 803a9e0:	601a      	str	r2, [r3, #0]
 803a9e2:	e00e      	b.n	803aa02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803a9e4:	7bbb      	ldrb	r3, [r7, #14]
 803a9e6:	4619      	mov	r1, r3
 803a9e8:	6878      	ldr	r0, [r7, #4]
 803a9ea:	f001 f89d 	bl	803bb28 <USBD_LL_IsStallEP>
 803a9ee:	4603      	mov	r3, r0
 803a9f0:	2b00      	cmp	r3, #0
 803a9f2:	d003      	beq.n	803a9fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803a9f4:	68bb      	ldr	r3, [r7, #8]
 803a9f6:	2201      	movs	r2, #1
 803a9f8:	601a      	str	r2, [r3, #0]
 803a9fa:	e002      	b.n	803aa02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803a9fc:	68bb      	ldr	r3, [r7, #8]
 803a9fe:	2200      	movs	r2, #0
 803aa00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803aa02:	68bb      	ldr	r3, [r7, #8]
 803aa04:	2202      	movs	r2, #2
 803aa06:	4619      	mov	r1, r3
 803aa08:	6878      	ldr	r0, [r7, #4]
 803aa0a:	f000 fbd1 	bl	803b1b0 <USBD_CtlSendData>
              break;
 803aa0e:	e004      	b.n	803aa1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803aa10:	6839      	ldr	r1, [r7, #0]
 803aa12:	6878      	ldr	r0, [r7, #4]
 803aa14:	f000 fb5b 	bl	803b0ce <USBD_CtlError>
              break;
 803aa18:	bf00      	nop
          }
          break;
 803aa1a:	e004      	b.n	803aa26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803aa1c:	6839      	ldr	r1, [r7, #0]
 803aa1e:	6878      	ldr	r0, [r7, #4]
 803aa20:	f000 fb55 	bl	803b0ce <USBD_CtlError>
          break;
 803aa24:	bf00      	nop
      }
      break;
 803aa26:	e005      	b.n	803aa34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803aa28:	6839      	ldr	r1, [r7, #0]
 803aa2a:	6878      	ldr	r0, [r7, #4]
 803aa2c:	f000 fb4f 	bl	803b0ce <USBD_CtlError>
      break;
 803aa30:	e000      	b.n	803aa34 <USBD_StdEPReq+0x330>
      break;
 803aa32:	bf00      	nop
  }

  return ret;
 803aa34:	7bfb      	ldrb	r3, [r7, #15]
}
 803aa36:	4618      	mov	r0, r3
 803aa38:	3710      	adds	r7, #16
 803aa3a:	46bd      	mov	sp, r7
 803aa3c:	bd80      	pop	{r7, pc}
	...

0803aa40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aa40:	b580      	push	{r7, lr}
 803aa42:	b084      	sub	sp, #16
 803aa44:	af00      	add	r7, sp, #0
 803aa46:	6078      	str	r0, [r7, #4]
 803aa48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803aa4a:	2300      	movs	r3, #0
 803aa4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803aa4e:	2300      	movs	r3, #0
 803aa50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803aa52:	2300      	movs	r3, #0
 803aa54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803aa56:	683b      	ldr	r3, [r7, #0]
 803aa58:	885b      	ldrh	r3, [r3, #2]
 803aa5a:	0a1b      	lsrs	r3, r3, #8
 803aa5c:	b29b      	uxth	r3, r3
 803aa5e:	3b01      	subs	r3, #1
 803aa60:	2b06      	cmp	r3, #6
 803aa62:	f200 8128 	bhi.w	803acb6 <USBD_GetDescriptor+0x276>
 803aa66:	a201      	add	r2, pc, #4	; (adr r2, 803aa6c <USBD_GetDescriptor+0x2c>)
 803aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aa6c:	0803aa89 	.word	0x0803aa89
 803aa70:	0803aaa1 	.word	0x0803aaa1
 803aa74:	0803aae1 	.word	0x0803aae1
 803aa78:	0803acb7 	.word	0x0803acb7
 803aa7c:	0803acb7 	.word	0x0803acb7
 803aa80:	0803ac57 	.word	0x0803ac57
 803aa84:	0803ac83 	.word	0x0803ac83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803aa88:	687b      	ldr	r3, [r7, #4]
 803aa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa8e:	681b      	ldr	r3, [r3, #0]
 803aa90:	687a      	ldr	r2, [r7, #4]
 803aa92:	7c12      	ldrb	r2, [r2, #16]
 803aa94:	f107 0108 	add.w	r1, r7, #8
 803aa98:	4610      	mov	r0, r2
 803aa9a:	4798      	blx	r3
 803aa9c:	60f8      	str	r0, [r7, #12]
      break;
 803aa9e:	e112      	b.n	803acc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aaa0:	687b      	ldr	r3, [r7, #4]
 803aaa2:	7c1b      	ldrb	r3, [r3, #16]
 803aaa4:	2b00      	cmp	r3, #0
 803aaa6:	d10d      	bne.n	803aac4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803aaa8:	687b      	ldr	r3, [r7, #4]
 803aaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aab0:	f107 0208 	add.w	r2, r7, #8
 803aab4:	4610      	mov	r0, r2
 803aab6:	4798      	blx	r3
 803aab8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803aaba:	68fb      	ldr	r3, [r7, #12]
 803aabc:	3301      	adds	r3, #1
 803aabe:	2202      	movs	r2, #2
 803aac0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803aac2:	e100      	b.n	803acc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803aac4:	687b      	ldr	r3, [r7, #4]
 803aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803aacc:	f107 0208 	add.w	r2, r7, #8
 803aad0:	4610      	mov	r0, r2
 803aad2:	4798      	blx	r3
 803aad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803aad6:	68fb      	ldr	r3, [r7, #12]
 803aad8:	3301      	adds	r3, #1
 803aada:	2202      	movs	r2, #2
 803aadc:	701a      	strb	r2, [r3, #0]
      break;
 803aade:	e0f2      	b.n	803acc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803aae0:	683b      	ldr	r3, [r7, #0]
 803aae2:	885b      	ldrh	r3, [r3, #2]
 803aae4:	b2db      	uxtb	r3, r3
 803aae6:	2b05      	cmp	r3, #5
 803aae8:	f200 80ac 	bhi.w	803ac44 <USBD_GetDescriptor+0x204>
 803aaec:	a201      	add	r2, pc, #4	; (adr r2, 803aaf4 <USBD_GetDescriptor+0xb4>)
 803aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aaf2:	bf00      	nop
 803aaf4:	0803ab0d 	.word	0x0803ab0d
 803aaf8:	0803ab41 	.word	0x0803ab41
 803aafc:	0803ab75 	.word	0x0803ab75
 803ab00:	0803aba9 	.word	0x0803aba9
 803ab04:	0803abdd 	.word	0x0803abdd
 803ab08:	0803ac11 	.word	0x0803ac11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803ab0c:	687b      	ldr	r3, [r7, #4]
 803ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab12:	685b      	ldr	r3, [r3, #4]
 803ab14:	2b00      	cmp	r3, #0
 803ab16:	d00b      	beq.n	803ab30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803ab18:	687b      	ldr	r3, [r7, #4]
 803ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab1e:	685b      	ldr	r3, [r3, #4]
 803ab20:	687a      	ldr	r2, [r7, #4]
 803ab22:	7c12      	ldrb	r2, [r2, #16]
 803ab24:	f107 0108 	add.w	r1, r7, #8
 803ab28:	4610      	mov	r0, r2
 803ab2a:	4798      	blx	r3
 803ab2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab2e:	e091      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab30:	6839      	ldr	r1, [r7, #0]
 803ab32:	6878      	ldr	r0, [r7, #4]
 803ab34:	f000 facb 	bl	803b0ce <USBD_CtlError>
            err++;
 803ab38:	7afb      	ldrb	r3, [r7, #11]
 803ab3a:	3301      	adds	r3, #1
 803ab3c:	72fb      	strb	r3, [r7, #11]
          break;
 803ab3e:	e089      	b.n	803ac54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803ab40:	687b      	ldr	r3, [r7, #4]
 803ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab46:	689b      	ldr	r3, [r3, #8]
 803ab48:	2b00      	cmp	r3, #0
 803ab4a:	d00b      	beq.n	803ab64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803ab4c:	687b      	ldr	r3, [r7, #4]
 803ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab52:	689b      	ldr	r3, [r3, #8]
 803ab54:	687a      	ldr	r2, [r7, #4]
 803ab56:	7c12      	ldrb	r2, [r2, #16]
 803ab58:	f107 0108 	add.w	r1, r7, #8
 803ab5c:	4610      	mov	r0, r2
 803ab5e:	4798      	blx	r3
 803ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab62:	e077      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab64:	6839      	ldr	r1, [r7, #0]
 803ab66:	6878      	ldr	r0, [r7, #4]
 803ab68:	f000 fab1 	bl	803b0ce <USBD_CtlError>
            err++;
 803ab6c:	7afb      	ldrb	r3, [r7, #11]
 803ab6e:	3301      	adds	r3, #1
 803ab70:	72fb      	strb	r3, [r7, #11]
          break;
 803ab72:	e06f      	b.n	803ac54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803ab74:	687b      	ldr	r3, [r7, #4]
 803ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab7a:	68db      	ldr	r3, [r3, #12]
 803ab7c:	2b00      	cmp	r3, #0
 803ab7e:	d00b      	beq.n	803ab98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803ab80:	687b      	ldr	r3, [r7, #4]
 803ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab86:	68db      	ldr	r3, [r3, #12]
 803ab88:	687a      	ldr	r2, [r7, #4]
 803ab8a:	7c12      	ldrb	r2, [r2, #16]
 803ab8c:	f107 0108 	add.w	r1, r7, #8
 803ab90:	4610      	mov	r0, r2
 803ab92:	4798      	blx	r3
 803ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab96:	e05d      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab98:	6839      	ldr	r1, [r7, #0]
 803ab9a:	6878      	ldr	r0, [r7, #4]
 803ab9c:	f000 fa97 	bl	803b0ce <USBD_CtlError>
            err++;
 803aba0:	7afb      	ldrb	r3, [r7, #11]
 803aba2:	3301      	adds	r3, #1
 803aba4:	72fb      	strb	r3, [r7, #11]
          break;
 803aba6:	e055      	b.n	803ac54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803aba8:	687b      	ldr	r3, [r7, #4]
 803abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abae:	691b      	ldr	r3, [r3, #16]
 803abb0:	2b00      	cmp	r3, #0
 803abb2:	d00b      	beq.n	803abcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803abb4:	687b      	ldr	r3, [r7, #4]
 803abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abba:	691b      	ldr	r3, [r3, #16]
 803abbc:	687a      	ldr	r2, [r7, #4]
 803abbe:	7c12      	ldrb	r2, [r2, #16]
 803abc0:	f107 0108 	add.w	r1, r7, #8
 803abc4:	4610      	mov	r0, r2
 803abc6:	4798      	blx	r3
 803abc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abca:	e043      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803abcc:	6839      	ldr	r1, [r7, #0]
 803abce:	6878      	ldr	r0, [r7, #4]
 803abd0:	f000 fa7d 	bl	803b0ce <USBD_CtlError>
            err++;
 803abd4:	7afb      	ldrb	r3, [r7, #11]
 803abd6:	3301      	adds	r3, #1
 803abd8:	72fb      	strb	r3, [r7, #11]
          break;
 803abda:	e03b      	b.n	803ac54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803abdc:	687b      	ldr	r3, [r7, #4]
 803abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abe2:	695b      	ldr	r3, [r3, #20]
 803abe4:	2b00      	cmp	r3, #0
 803abe6:	d00b      	beq.n	803ac00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803abe8:	687b      	ldr	r3, [r7, #4]
 803abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abee:	695b      	ldr	r3, [r3, #20]
 803abf0:	687a      	ldr	r2, [r7, #4]
 803abf2:	7c12      	ldrb	r2, [r2, #16]
 803abf4:	f107 0108 	add.w	r1, r7, #8
 803abf8:	4610      	mov	r0, r2
 803abfa:	4798      	blx	r3
 803abfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abfe:	e029      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac00:	6839      	ldr	r1, [r7, #0]
 803ac02:	6878      	ldr	r0, [r7, #4]
 803ac04:	f000 fa63 	bl	803b0ce <USBD_CtlError>
            err++;
 803ac08:	7afb      	ldrb	r3, [r7, #11]
 803ac0a:	3301      	adds	r3, #1
 803ac0c:	72fb      	strb	r3, [r7, #11]
          break;
 803ac0e:	e021      	b.n	803ac54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803ac10:	687b      	ldr	r3, [r7, #4]
 803ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac16:	699b      	ldr	r3, [r3, #24]
 803ac18:	2b00      	cmp	r3, #0
 803ac1a:	d00b      	beq.n	803ac34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803ac1c:	687b      	ldr	r3, [r7, #4]
 803ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac22:	699b      	ldr	r3, [r3, #24]
 803ac24:	687a      	ldr	r2, [r7, #4]
 803ac26:	7c12      	ldrb	r2, [r2, #16]
 803ac28:	f107 0108 	add.w	r1, r7, #8
 803ac2c:	4610      	mov	r0, r2
 803ac2e:	4798      	blx	r3
 803ac30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac32:	e00f      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac34:	6839      	ldr	r1, [r7, #0]
 803ac36:	6878      	ldr	r0, [r7, #4]
 803ac38:	f000 fa49 	bl	803b0ce <USBD_CtlError>
            err++;
 803ac3c:	7afb      	ldrb	r3, [r7, #11]
 803ac3e:	3301      	adds	r3, #1
 803ac40:	72fb      	strb	r3, [r7, #11]
          break;
 803ac42:	e007      	b.n	803ac54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803ac44:	6839      	ldr	r1, [r7, #0]
 803ac46:	6878      	ldr	r0, [r7, #4]
 803ac48:	f000 fa41 	bl	803b0ce <USBD_CtlError>
          err++;
 803ac4c:	7afb      	ldrb	r3, [r7, #11]
 803ac4e:	3301      	adds	r3, #1
 803ac50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803ac52:	bf00      	nop
      }
      break;
 803ac54:	e037      	b.n	803acc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ac56:	687b      	ldr	r3, [r7, #4]
 803ac58:	7c1b      	ldrb	r3, [r3, #16]
 803ac5a:	2b00      	cmp	r3, #0
 803ac5c:	d109      	bne.n	803ac72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803ac5e:	687b      	ldr	r3, [r7, #4]
 803ac60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ac64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803ac66:	f107 0208 	add.w	r2, r7, #8
 803ac6a:	4610      	mov	r0, r2
 803ac6c:	4798      	blx	r3
 803ac6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803ac70:	e029      	b.n	803acc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803ac72:	6839      	ldr	r1, [r7, #0]
 803ac74:	6878      	ldr	r0, [r7, #4]
 803ac76:	f000 fa2a 	bl	803b0ce <USBD_CtlError>
        err++;
 803ac7a:	7afb      	ldrb	r3, [r7, #11]
 803ac7c:	3301      	adds	r3, #1
 803ac7e:	72fb      	strb	r3, [r7, #11]
      break;
 803ac80:	e021      	b.n	803acc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ac82:	687b      	ldr	r3, [r7, #4]
 803ac84:	7c1b      	ldrb	r3, [r3, #16]
 803ac86:	2b00      	cmp	r3, #0
 803ac88:	d10d      	bne.n	803aca6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803ac8a:	687b      	ldr	r3, [r7, #4]
 803ac8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803ac92:	f107 0208 	add.w	r2, r7, #8
 803ac96:	4610      	mov	r0, r2
 803ac98:	4798      	blx	r3
 803ac9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803ac9c:	68fb      	ldr	r3, [r7, #12]
 803ac9e:	3301      	adds	r3, #1
 803aca0:	2207      	movs	r2, #7
 803aca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803aca4:	e00f      	b.n	803acc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803aca6:	6839      	ldr	r1, [r7, #0]
 803aca8:	6878      	ldr	r0, [r7, #4]
 803acaa:	f000 fa10 	bl	803b0ce <USBD_CtlError>
        err++;
 803acae:	7afb      	ldrb	r3, [r7, #11]
 803acb0:	3301      	adds	r3, #1
 803acb2:	72fb      	strb	r3, [r7, #11]
      break;
 803acb4:	e007      	b.n	803acc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803acb6:	6839      	ldr	r1, [r7, #0]
 803acb8:	6878      	ldr	r0, [r7, #4]
 803acba:	f000 fa08 	bl	803b0ce <USBD_CtlError>
      err++;
 803acbe:	7afb      	ldrb	r3, [r7, #11]
 803acc0:	3301      	adds	r3, #1
 803acc2:	72fb      	strb	r3, [r7, #11]
      break;
 803acc4:	bf00      	nop
  }

  if (err != 0U)
 803acc6:	7afb      	ldrb	r3, [r7, #11]
 803acc8:	2b00      	cmp	r3, #0
 803acca:	d11e      	bne.n	803ad0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803accc:	683b      	ldr	r3, [r7, #0]
 803acce:	88db      	ldrh	r3, [r3, #6]
 803acd0:	2b00      	cmp	r3, #0
 803acd2:	d016      	beq.n	803ad02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803acd4:	893b      	ldrh	r3, [r7, #8]
 803acd6:	2b00      	cmp	r3, #0
 803acd8:	d00e      	beq.n	803acf8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803acda:	683b      	ldr	r3, [r7, #0]
 803acdc:	88da      	ldrh	r2, [r3, #6]
 803acde:	893b      	ldrh	r3, [r7, #8]
 803ace0:	4293      	cmp	r3, r2
 803ace2:	bf28      	it	cs
 803ace4:	4613      	movcs	r3, r2
 803ace6:	b29b      	uxth	r3, r3
 803ace8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803acea:	893b      	ldrh	r3, [r7, #8]
 803acec:	461a      	mov	r2, r3
 803acee:	68f9      	ldr	r1, [r7, #12]
 803acf0:	6878      	ldr	r0, [r7, #4]
 803acf2:	f000 fa5d 	bl	803b1b0 <USBD_CtlSendData>
 803acf6:	e009      	b.n	803ad0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803acf8:	6839      	ldr	r1, [r7, #0]
 803acfa:	6878      	ldr	r0, [r7, #4]
 803acfc:	f000 f9e7 	bl	803b0ce <USBD_CtlError>
 803ad00:	e004      	b.n	803ad0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803ad02:	6878      	ldr	r0, [r7, #4]
 803ad04:	f000 faae 	bl	803b264 <USBD_CtlSendStatus>
 803ad08:	e000      	b.n	803ad0c <USBD_GetDescriptor+0x2cc>
    return;
 803ad0a:	bf00      	nop
  }
}
 803ad0c:	3710      	adds	r7, #16
 803ad0e:	46bd      	mov	sp, r7
 803ad10:	bd80      	pop	{r7, pc}
 803ad12:	bf00      	nop

0803ad14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad14:	b580      	push	{r7, lr}
 803ad16:	b084      	sub	sp, #16
 803ad18:	af00      	add	r7, sp, #0
 803ad1a:	6078      	str	r0, [r7, #4]
 803ad1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803ad1e:	683b      	ldr	r3, [r7, #0]
 803ad20:	889b      	ldrh	r3, [r3, #4]
 803ad22:	2b00      	cmp	r3, #0
 803ad24:	d131      	bne.n	803ad8a <USBD_SetAddress+0x76>
 803ad26:	683b      	ldr	r3, [r7, #0]
 803ad28:	88db      	ldrh	r3, [r3, #6]
 803ad2a:	2b00      	cmp	r3, #0
 803ad2c:	d12d      	bne.n	803ad8a <USBD_SetAddress+0x76>
 803ad2e:	683b      	ldr	r3, [r7, #0]
 803ad30:	885b      	ldrh	r3, [r3, #2]
 803ad32:	2b7f      	cmp	r3, #127	; 0x7f
 803ad34:	d829      	bhi.n	803ad8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803ad36:	683b      	ldr	r3, [r7, #0]
 803ad38:	885b      	ldrh	r3, [r3, #2]
 803ad3a:	b2db      	uxtb	r3, r3
 803ad3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803ad40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad42:	687b      	ldr	r3, [r7, #4]
 803ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ad48:	b2db      	uxtb	r3, r3
 803ad4a:	2b03      	cmp	r3, #3
 803ad4c:	d104      	bne.n	803ad58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803ad4e:	6839      	ldr	r1, [r7, #0]
 803ad50:	6878      	ldr	r0, [r7, #4]
 803ad52:	f000 f9bc 	bl	803b0ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad56:	e01d      	b.n	803ad94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803ad58:	687b      	ldr	r3, [r7, #4]
 803ad5a:	7bfa      	ldrb	r2, [r7, #15]
 803ad5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803ad60:	7bfb      	ldrb	r3, [r7, #15]
 803ad62:	4619      	mov	r1, r3
 803ad64:	6878      	ldr	r0, [r7, #4]
 803ad66:	f000 ff0b 	bl	803bb80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803ad6a:	6878      	ldr	r0, [r7, #4]
 803ad6c:	f000 fa7a 	bl	803b264 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803ad70:	7bfb      	ldrb	r3, [r7, #15]
 803ad72:	2b00      	cmp	r3, #0
 803ad74:	d004      	beq.n	803ad80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ad76:	687b      	ldr	r3, [r7, #4]
 803ad78:	2202      	movs	r2, #2
 803ad7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad7e:	e009      	b.n	803ad94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803ad80:	687b      	ldr	r3, [r7, #4]
 803ad82:	2201      	movs	r2, #1
 803ad84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad88:	e004      	b.n	803ad94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803ad8a:	6839      	ldr	r1, [r7, #0]
 803ad8c:	6878      	ldr	r0, [r7, #4]
 803ad8e:	f000 f99e 	bl	803b0ce <USBD_CtlError>
  }
}
 803ad92:	bf00      	nop
 803ad94:	bf00      	nop
 803ad96:	3710      	adds	r7, #16
 803ad98:	46bd      	mov	sp, r7
 803ad9a:	bd80      	pop	{r7, pc}

0803ad9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad9c:	b580      	push	{r7, lr}
 803ad9e:	b084      	sub	sp, #16
 803ada0:	af00      	add	r7, sp, #0
 803ada2:	6078      	str	r0, [r7, #4]
 803ada4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803ada6:	2300      	movs	r3, #0
 803ada8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803adaa:	683b      	ldr	r3, [r7, #0]
 803adac:	885b      	ldrh	r3, [r3, #2]
 803adae:	b2da      	uxtb	r2, r3
 803adb0:	4b4e      	ldr	r3, [pc, #312]	; (803aeec <USBD_SetConfig+0x150>)
 803adb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803adb4:	4b4d      	ldr	r3, [pc, #308]	; (803aeec <USBD_SetConfig+0x150>)
 803adb6:	781b      	ldrb	r3, [r3, #0]
 803adb8:	2b01      	cmp	r3, #1
 803adba:	d905      	bls.n	803adc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803adbc:	6839      	ldr	r1, [r7, #0]
 803adbe:	6878      	ldr	r0, [r7, #4]
 803adc0:	f000 f985 	bl	803b0ce <USBD_CtlError>
    return USBD_FAIL;
 803adc4:	2303      	movs	r3, #3
 803adc6:	e08c      	b.n	803aee2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803adc8:	687b      	ldr	r3, [r7, #4]
 803adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803adce:	b2db      	uxtb	r3, r3
 803add0:	2b02      	cmp	r3, #2
 803add2:	d002      	beq.n	803adda <USBD_SetConfig+0x3e>
 803add4:	2b03      	cmp	r3, #3
 803add6:	d029      	beq.n	803ae2c <USBD_SetConfig+0x90>
 803add8:	e075      	b.n	803aec6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803adda:	4b44      	ldr	r3, [pc, #272]	; (803aeec <USBD_SetConfig+0x150>)
 803addc:	781b      	ldrb	r3, [r3, #0]
 803adde:	2b00      	cmp	r3, #0
 803ade0:	d020      	beq.n	803ae24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803ade2:	4b42      	ldr	r3, [pc, #264]	; (803aeec <USBD_SetConfig+0x150>)
 803ade4:	781b      	ldrb	r3, [r3, #0]
 803ade6:	461a      	mov	r2, r3
 803ade8:	687b      	ldr	r3, [r7, #4]
 803adea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803adec:	4b3f      	ldr	r3, [pc, #252]	; (803aeec <USBD_SetConfig+0x150>)
 803adee:	781b      	ldrb	r3, [r3, #0]
 803adf0:	4619      	mov	r1, r3
 803adf2:	6878      	ldr	r0, [r7, #4]
 803adf4:	f7fe ffe7 	bl	8039dc6 <USBD_SetClassConfig>
 803adf8:	4603      	mov	r3, r0
 803adfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803adfc:	7bfb      	ldrb	r3, [r7, #15]
 803adfe:	2b00      	cmp	r3, #0
 803ae00:	d008      	beq.n	803ae14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803ae02:	6839      	ldr	r1, [r7, #0]
 803ae04:	6878      	ldr	r0, [r7, #4]
 803ae06:	f000 f962 	bl	803b0ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae0a:	687b      	ldr	r3, [r7, #4]
 803ae0c:	2202      	movs	r2, #2
 803ae0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ae12:	e065      	b.n	803aee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ae14:	6878      	ldr	r0, [r7, #4]
 803ae16:	f000 fa25 	bl	803b264 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803ae1a:	687b      	ldr	r3, [r7, #4]
 803ae1c:	2203      	movs	r2, #3
 803ae1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ae22:	e05d      	b.n	803aee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ae24:	6878      	ldr	r0, [r7, #4]
 803ae26:	f000 fa1d 	bl	803b264 <USBD_CtlSendStatus>
      break;
 803ae2a:	e059      	b.n	803aee0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803ae2c:	4b2f      	ldr	r3, [pc, #188]	; (803aeec <USBD_SetConfig+0x150>)
 803ae2e:	781b      	ldrb	r3, [r3, #0]
 803ae30:	2b00      	cmp	r3, #0
 803ae32:	d112      	bne.n	803ae5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae34:	687b      	ldr	r3, [r7, #4]
 803ae36:	2202      	movs	r2, #2
 803ae38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803ae3c:	4b2b      	ldr	r3, [pc, #172]	; (803aeec <USBD_SetConfig+0x150>)
 803ae3e:	781b      	ldrb	r3, [r3, #0]
 803ae40:	461a      	mov	r2, r3
 803ae42:	687b      	ldr	r3, [r7, #4]
 803ae44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ae46:	4b29      	ldr	r3, [pc, #164]	; (803aeec <USBD_SetConfig+0x150>)
 803ae48:	781b      	ldrb	r3, [r3, #0]
 803ae4a:	4619      	mov	r1, r3
 803ae4c:	6878      	ldr	r0, [r7, #4]
 803ae4e:	f7fe ffd6 	bl	8039dfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803ae52:	6878      	ldr	r0, [r7, #4]
 803ae54:	f000 fa06 	bl	803b264 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ae58:	e042      	b.n	803aee0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803ae5a:	4b24      	ldr	r3, [pc, #144]	; (803aeec <USBD_SetConfig+0x150>)
 803ae5c:	781b      	ldrb	r3, [r3, #0]
 803ae5e:	461a      	mov	r2, r3
 803ae60:	687b      	ldr	r3, [r7, #4]
 803ae62:	685b      	ldr	r3, [r3, #4]
 803ae64:	429a      	cmp	r2, r3
 803ae66:	d02a      	beq.n	803aebe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803ae68:	687b      	ldr	r3, [r7, #4]
 803ae6a:	685b      	ldr	r3, [r3, #4]
 803ae6c:	b2db      	uxtb	r3, r3
 803ae6e:	4619      	mov	r1, r3
 803ae70:	6878      	ldr	r0, [r7, #4]
 803ae72:	f7fe ffc4 	bl	8039dfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803ae76:	4b1d      	ldr	r3, [pc, #116]	; (803aeec <USBD_SetConfig+0x150>)
 803ae78:	781b      	ldrb	r3, [r3, #0]
 803ae7a:	461a      	mov	r2, r3
 803ae7c:	687b      	ldr	r3, [r7, #4]
 803ae7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ae80:	4b1a      	ldr	r3, [pc, #104]	; (803aeec <USBD_SetConfig+0x150>)
 803ae82:	781b      	ldrb	r3, [r3, #0]
 803ae84:	4619      	mov	r1, r3
 803ae86:	6878      	ldr	r0, [r7, #4]
 803ae88:	f7fe ff9d 	bl	8039dc6 <USBD_SetClassConfig>
 803ae8c:	4603      	mov	r3, r0
 803ae8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803ae90:	7bfb      	ldrb	r3, [r7, #15]
 803ae92:	2b00      	cmp	r3, #0
 803ae94:	d00f      	beq.n	803aeb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803ae96:	6839      	ldr	r1, [r7, #0]
 803ae98:	6878      	ldr	r0, [r7, #4]
 803ae9a:	f000 f918 	bl	803b0ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803ae9e:	687b      	ldr	r3, [r7, #4]
 803aea0:	685b      	ldr	r3, [r3, #4]
 803aea2:	b2db      	uxtb	r3, r3
 803aea4:	4619      	mov	r1, r3
 803aea6:	6878      	ldr	r0, [r7, #4]
 803aea8:	f7fe ffa9 	bl	8039dfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803aeac:	687b      	ldr	r3, [r7, #4]
 803aeae:	2202      	movs	r2, #2
 803aeb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803aeb4:	e014      	b.n	803aee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803aeb6:	6878      	ldr	r0, [r7, #4]
 803aeb8:	f000 f9d4 	bl	803b264 <USBD_CtlSendStatus>
      break;
 803aebc:	e010      	b.n	803aee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803aebe:	6878      	ldr	r0, [r7, #4]
 803aec0:	f000 f9d0 	bl	803b264 <USBD_CtlSendStatus>
      break;
 803aec4:	e00c      	b.n	803aee0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803aec6:	6839      	ldr	r1, [r7, #0]
 803aec8:	6878      	ldr	r0, [r7, #4]
 803aeca:	f000 f900 	bl	803b0ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803aece:	4b07      	ldr	r3, [pc, #28]	; (803aeec <USBD_SetConfig+0x150>)
 803aed0:	781b      	ldrb	r3, [r3, #0]
 803aed2:	4619      	mov	r1, r3
 803aed4:	6878      	ldr	r0, [r7, #4]
 803aed6:	f7fe ff92 	bl	8039dfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803aeda:	2303      	movs	r3, #3
 803aedc:	73fb      	strb	r3, [r7, #15]
      break;
 803aede:	bf00      	nop
  }

  return ret;
 803aee0:	7bfb      	ldrb	r3, [r7, #15]
}
 803aee2:	4618      	mov	r0, r3
 803aee4:	3710      	adds	r7, #16
 803aee6:	46bd      	mov	sp, r7
 803aee8:	bd80      	pop	{r7, pc}
 803aeea:	bf00      	nop
 803aeec:	24024bc8 	.word	0x24024bc8

0803aef0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aef0:	b580      	push	{r7, lr}
 803aef2:	b082      	sub	sp, #8
 803aef4:	af00      	add	r7, sp, #0
 803aef6:	6078      	str	r0, [r7, #4]
 803aef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803aefa:	683b      	ldr	r3, [r7, #0]
 803aefc:	88db      	ldrh	r3, [r3, #6]
 803aefe:	2b01      	cmp	r3, #1
 803af00:	d004      	beq.n	803af0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803af02:	6839      	ldr	r1, [r7, #0]
 803af04:	6878      	ldr	r0, [r7, #4]
 803af06:	f000 f8e2 	bl	803b0ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803af0a:	e023      	b.n	803af54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803af0c:	687b      	ldr	r3, [r7, #4]
 803af0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af12:	b2db      	uxtb	r3, r3
 803af14:	2b02      	cmp	r3, #2
 803af16:	dc02      	bgt.n	803af1e <USBD_GetConfig+0x2e>
 803af18:	2b00      	cmp	r3, #0
 803af1a:	dc03      	bgt.n	803af24 <USBD_GetConfig+0x34>
 803af1c:	e015      	b.n	803af4a <USBD_GetConfig+0x5a>
 803af1e:	2b03      	cmp	r3, #3
 803af20:	d00b      	beq.n	803af3a <USBD_GetConfig+0x4a>
 803af22:	e012      	b.n	803af4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803af24:	687b      	ldr	r3, [r7, #4]
 803af26:	2200      	movs	r2, #0
 803af28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803af2a:	687b      	ldr	r3, [r7, #4]
 803af2c:	3308      	adds	r3, #8
 803af2e:	2201      	movs	r2, #1
 803af30:	4619      	mov	r1, r3
 803af32:	6878      	ldr	r0, [r7, #4]
 803af34:	f000 f93c 	bl	803b1b0 <USBD_CtlSendData>
        break;
 803af38:	e00c      	b.n	803af54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803af3a:	687b      	ldr	r3, [r7, #4]
 803af3c:	3304      	adds	r3, #4
 803af3e:	2201      	movs	r2, #1
 803af40:	4619      	mov	r1, r3
 803af42:	6878      	ldr	r0, [r7, #4]
 803af44:	f000 f934 	bl	803b1b0 <USBD_CtlSendData>
        break;
 803af48:	e004      	b.n	803af54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803af4a:	6839      	ldr	r1, [r7, #0]
 803af4c:	6878      	ldr	r0, [r7, #4]
 803af4e:	f000 f8be 	bl	803b0ce <USBD_CtlError>
        break;
 803af52:	bf00      	nop
}
 803af54:	bf00      	nop
 803af56:	3708      	adds	r7, #8
 803af58:	46bd      	mov	sp, r7
 803af5a:	bd80      	pop	{r7, pc}

0803af5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af5c:	b580      	push	{r7, lr}
 803af5e:	b082      	sub	sp, #8
 803af60:	af00      	add	r7, sp, #0
 803af62:	6078      	str	r0, [r7, #4]
 803af64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803af66:	687b      	ldr	r3, [r7, #4]
 803af68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af6c:	b2db      	uxtb	r3, r3
 803af6e:	3b01      	subs	r3, #1
 803af70:	2b02      	cmp	r3, #2
 803af72:	d81e      	bhi.n	803afb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803af74:	683b      	ldr	r3, [r7, #0]
 803af76:	88db      	ldrh	r3, [r3, #6]
 803af78:	2b02      	cmp	r3, #2
 803af7a:	d004      	beq.n	803af86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803af7c:	6839      	ldr	r1, [r7, #0]
 803af7e:	6878      	ldr	r0, [r7, #4]
 803af80:	f000 f8a5 	bl	803b0ce <USBD_CtlError>
        break;
 803af84:	e01a      	b.n	803afbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803af86:	687b      	ldr	r3, [r7, #4]
 803af88:	2201      	movs	r2, #1
 803af8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803af8c:	687b      	ldr	r3, [r7, #4]
 803af8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803af92:	2b00      	cmp	r3, #0
 803af94:	d005      	beq.n	803afa2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803af96:	687b      	ldr	r3, [r7, #4]
 803af98:	68db      	ldr	r3, [r3, #12]
 803af9a:	f043 0202 	orr.w	r2, r3, #2
 803af9e:	687b      	ldr	r3, [r7, #4]
 803afa0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803afa2:	687b      	ldr	r3, [r7, #4]
 803afa4:	330c      	adds	r3, #12
 803afa6:	2202      	movs	r2, #2
 803afa8:	4619      	mov	r1, r3
 803afaa:	6878      	ldr	r0, [r7, #4]
 803afac:	f000 f900 	bl	803b1b0 <USBD_CtlSendData>
      break;
 803afb0:	e004      	b.n	803afbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803afb2:	6839      	ldr	r1, [r7, #0]
 803afb4:	6878      	ldr	r0, [r7, #4]
 803afb6:	f000 f88a 	bl	803b0ce <USBD_CtlError>
      break;
 803afba:	bf00      	nop
  }
}
 803afbc:	bf00      	nop
 803afbe:	3708      	adds	r7, #8
 803afc0:	46bd      	mov	sp, r7
 803afc2:	bd80      	pop	{r7, pc}

0803afc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803afc4:	b580      	push	{r7, lr}
 803afc6:	b082      	sub	sp, #8
 803afc8:	af00      	add	r7, sp, #0
 803afca:	6078      	str	r0, [r7, #4]
 803afcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803afce:	683b      	ldr	r3, [r7, #0]
 803afd0:	885b      	ldrh	r3, [r3, #2]
 803afd2:	2b01      	cmp	r3, #1
 803afd4:	d107      	bne.n	803afe6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803afd6:	687b      	ldr	r3, [r7, #4]
 803afd8:	2201      	movs	r2, #1
 803afda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803afde:	6878      	ldr	r0, [r7, #4]
 803afe0:	f000 f940 	bl	803b264 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803afe4:	e013      	b.n	803b00e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803afe6:	683b      	ldr	r3, [r7, #0]
 803afe8:	885b      	ldrh	r3, [r3, #2]
 803afea:	2b02      	cmp	r3, #2
 803afec:	d10b      	bne.n	803b006 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803afee:	683b      	ldr	r3, [r7, #0]
 803aff0:	889b      	ldrh	r3, [r3, #4]
 803aff2:	0a1b      	lsrs	r3, r3, #8
 803aff4:	b29b      	uxth	r3, r3
 803aff6:	b2da      	uxtb	r2, r3
 803aff8:	687b      	ldr	r3, [r7, #4]
 803affa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803affe:	6878      	ldr	r0, [r7, #4]
 803b000:	f000 f930 	bl	803b264 <USBD_CtlSendStatus>
}
 803b004:	e003      	b.n	803b00e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803b006:	6839      	ldr	r1, [r7, #0]
 803b008:	6878      	ldr	r0, [r7, #4]
 803b00a:	f000 f860 	bl	803b0ce <USBD_CtlError>
}
 803b00e:	bf00      	nop
 803b010:	3708      	adds	r7, #8
 803b012:	46bd      	mov	sp, r7
 803b014:	bd80      	pop	{r7, pc}

0803b016 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b016:	b580      	push	{r7, lr}
 803b018:	b082      	sub	sp, #8
 803b01a:	af00      	add	r7, sp, #0
 803b01c:	6078      	str	r0, [r7, #4]
 803b01e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803b020:	687b      	ldr	r3, [r7, #4]
 803b022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b026:	b2db      	uxtb	r3, r3
 803b028:	3b01      	subs	r3, #1
 803b02a:	2b02      	cmp	r3, #2
 803b02c:	d80b      	bhi.n	803b046 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803b02e:	683b      	ldr	r3, [r7, #0]
 803b030:	885b      	ldrh	r3, [r3, #2]
 803b032:	2b01      	cmp	r3, #1
 803b034:	d10c      	bne.n	803b050 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803b036:	687b      	ldr	r3, [r7, #4]
 803b038:	2200      	movs	r2, #0
 803b03a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803b03e:	6878      	ldr	r0, [r7, #4]
 803b040:	f000 f910 	bl	803b264 <USBD_CtlSendStatus>
      }
      break;
 803b044:	e004      	b.n	803b050 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803b046:	6839      	ldr	r1, [r7, #0]
 803b048:	6878      	ldr	r0, [r7, #4]
 803b04a:	f000 f840 	bl	803b0ce <USBD_CtlError>
      break;
 803b04e:	e000      	b.n	803b052 <USBD_ClrFeature+0x3c>
      break;
 803b050:	bf00      	nop
  }
}
 803b052:	bf00      	nop
 803b054:	3708      	adds	r7, #8
 803b056:	46bd      	mov	sp, r7
 803b058:	bd80      	pop	{r7, pc}

0803b05a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803b05a:	b580      	push	{r7, lr}
 803b05c:	b084      	sub	sp, #16
 803b05e:	af00      	add	r7, sp, #0
 803b060:	6078      	str	r0, [r7, #4]
 803b062:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803b064:	683b      	ldr	r3, [r7, #0]
 803b066:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803b068:	68fb      	ldr	r3, [r7, #12]
 803b06a:	781a      	ldrb	r2, [r3, #0]
 803b06c:	687b      	ldr	r3, [r7, #4]
 803b06e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803b070:	68fb      	ldr	r3, [r7, #12]
 803b072:	3301      	adds	r3, #1
 803b074:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803b076:	68fb      	ldr	r3, [r7, #12]
 803b078:	781a      	ldrb	r2, [r3, #0]
 803b07a:	687b      	ldr	r3, [r7, #4]
 803b07c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803b07e:	68fb      	ldr	r3, [r7, #12]
 803b080:	3301      	adds	r3, #1
 803b082:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803b084:	68f8      	ldr	r0, [r7, #12]
 803b086:	f7ff fa41 	bl	803a50c <SWAPBYTE>
 803b08a:	4603      	mov	r3, r0
 803b08c:	461a      	mov	r2, r3
 803b08e:	687b      	ldr	r3, [r7, #4]
 803b090:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803b092:	68fb      	ldr	r3, [r7, #12]
 803b094:	3301      	adds	r3, #1
 803b096:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b098:	68fb      	ldr	r3, [r7, #12]
 803b09a:	3301      	adds	r3, #1
 803b09c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803b09e:	68f8      	ldr	r0, [r7, #12]
 803b0a0:	f7ff fa34 	bl	803a50c <SWAPBYTE>
 803b0a4:	4603      	mov	r3, r0
 803b0a6:	461a      	mov	r2, r3
 803b0a8:	687b      	ldr	r3, [r7, #4]
 803b0aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803b0ac:	68fb      	ldr	r3, [r7, #12]
 803b0ae:	3301      	adds	r3, #1
 803b0b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b0b2:	68fb      	ldr	r3, [r7, #12]
 803b0b4:	3301      	adds	r3, #1
 803b0b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803b0b8:	68f8      	ldr	r0, [r7, #12]
 803b0ba:	f7ff fa27 	bl	803a50c <SWAPBYTE>
 803b0be:	4603      	mov	r3, r0
 803b0c0:	461a      	mov	r2, r3
 803b0c2:	687b      	ldr	r3, [r7, #4]
 803b0c4:	80da      	strh	r2, [r3, #6]
}
 803b0c6:	bf00      	nop
 803b0c8:	3710      	adds	r7, #16
 803b0ca:	46bd      	mov	sp, r7
 803b0cc:	bd80      	pop	{r7, pc}

0803b0ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b0ce:	b580      	push	{r7, lr}
 803b0d0:	b082      	sub	sp, #8
 803b0d2:	af00      	add	r7, sp, #0
 803b0d4:	6078      	str	r0, [r7, #4]
 803b0d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803b0d8:	2180      	movs	r1, #128	; 0x80
 803b0da:	6878      	ldr	r0, [r7, #4]
 803b0dc:	f000 fce6 	bl	803baac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803b0e0:	2100      	movs	r1, #0
 803b0e2:	6878      	ldr	r0, [r7, #4]
 803b0e4:	f000 fce2 	bl	803baac <USBD_LL_StallEP>
}
 803b0e8:	bf00      	nop
 803b0ea:	3708      	adds	r7, #8
 803b0ec:	46bd      	mov	sp, r7
 803b0ee:	bd80      	pop	{r7, pc}

0803b0f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803b0f0:	b580      	push	{r7, lr}
 803b0f2:	b086      	sub	sp, #24
 803b0f4:	af00      	add	r7, sp, #0
 803b0f6:	60f8      	str	r0, [r7, #12]
 803b0f8:	60b9      	str	r1, [r7, #8]
 803b0fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803b0fc:	2300      	movs	r3, #0
 803b0fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803b100:	68fb      	ldr	r3, [r7, #12]
 803b102:	2b00      	cmp	r3, #0
 803b104:	d036      	beq.n	803b174 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803b106:	68fb      	ldr	r3, [r7, #12]
 803b108:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803b10a:	6938      	ldr	r0, [r7, #16]
 803b10c:	f000 f836 	bl	803b17c <USBD_GetLen>
 803b110:	4603      	mov	r3, r0
 803b112:	3301      	adds	r3, #1
 803b114:	b29b      	uxth	r3, r3
 803b116:	005b      	lsls	r3, r3, #1
 803b118:	b29a      	uxth	r2, r3
 803b11a:	687b      	ldr	r3, [r7, #4]
 803b11c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803b11e:	7dfb      	ldrb	r3, [r7, #23]
 803b120:	68ba      	ldr	r2, [r7, #8]
 803b122:	4413      	add	r3, r2
 803b124:	687a      	ldr	r2, [r7, #4]
 803b126:	7812      	ldrb	r2, [r2, #0]
 803b128:	701a      	strb	r2, [r3, #0]
  idx++;
 803b12a:	7dfb      	ldrb	r3, [r7, #23]
 803b12c:	3301      	adds	r3, #1
 803b12e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803b130:	7dfb      	ldrb	r3, [r7, #23]
 803b132:	68ba      	ldr	r2, [r7, #8]
 803b134:	4413      	add	r3, r2
 803b136:	2203      	movs	r2, #3
 803b138:	701a      	strb	r2, [r3, #0]
  idx++;
 803b13a:	7dfb      	ldrb	r3, [r7, #23]
 803b13c:	3301      	adds	r3, #1
 803b13e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803b140:	e013      	b.n	803b16a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803b142:	7dfb      	ldrb	r3, [r7, #23]
 803b144:	68ba      	ldr	r2, [r7, #8]
 803b146:	4413      	add	r3, r2
 803b148:	693a      	ldr	r2, [r7, #16]
 803b14a:	7812      	ldrb	r2, [r2, #0]
 803b14c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803b14e:	693b      	ldr	r3, [r7, #16]
 803b150:	3301      	adds	r3, #1
 803b152:	613b      	str	r3, [r7, #16]
    idx++;
 803b154:	7dfb      	ldrb	r3, [r7, #23]
 803b156:	3301      	adds	r3, #1
 803b158:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803b15a:	7dfb      	ldrb	r3, [r7, #23]
 803b15c:	68ba      	ldr	r2, [r7, #8]
 803b15e:	4413      	add	r3, r2
 803b160:	2200      	movs	r2, #0
 803b162:	701a      	strb	r2, [r3, #0]
    idx++;
 803b164:	7dfb      	ldrb	r3, [r7, #23]
 803b166:	3301      	adds	r3, #1
 803b168:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803b16a:	693b      	ldr	r3, [r7, #16]
 803b16c:	781b      	ldrb	r3, [r3, #0]
 803b16e:	2b00      	cmp	r3, #0
 803b170:	d1e7      	bne.n	803b142 <USBD_GetString+0x52>
 803b172:	e000      	b.n	803b176 <USBD_GetString+0x86>
    return;
 803b174:	bf00      	nop
  }
}
 803b176:	3718      	adds	r7, #24
 803b178:	46bd      	mov	sp, r7
 803b17a:	bd80      	pop	{r7, pc}

0803b17c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803b17c:	b480      	push	{r7}
 803b17e:	b085      	sub	sp, #20
 803b180:	af00      	add	r7, sp, #0
 803b182:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803b184:	2300      	movs	r3, #0
 803b186:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803b188:	687b      	ldr	r3, [r7, #4]
 803b18a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803b18c:	e005      	b.n	803b19a <USBD_GetLen+0x1e>
  {
    len++;
 803b18e:	7bfb      	ldrb	r3, [r7, #15]
 803b190:	3301      	adds	r3, #1
 803b192:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803b194:	68bb      	ldr	r3, [r7, #8]
 803b196:	3301      	adds	r3, #1
 803b198:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803b19a:	68bb      	ldr	r3, [r7, #8]
 803b19c:	781b      	ldrb	r3, [r3, #0]
 803b19e:	2b00      	cmp	r3, #0
 803b1a0:	d1f5      	bne.n	803b18e <USBD_GetLen+0x12>
  }

  return len;
 803b1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 803b1a4:	4618      	mov	r0, r3
 803b1a6:	3714      	adds	r7, #20
 803b1a8:	46bd      	mov	sp, r7
 803b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b1ae:	4770      	bx	lr

0803b1b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803b1b0:	b580      	push	{r7, lr}
 803b1b2:	b084      	sub	sp, #16
 803b1b4:	af00      	add	r7, sp, #0
 803b1b6:	60f8      	str	r0, [r7, #12]
 803b1b8:	60b9      	str	r1, [r7, #8]
 803b1ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803b1bc:	68fb      	ldr	r3, [r7, #12]
 803b1be:	2202      	movs	r2, #2
 803b1c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803b1c4:	68fb      	ldr	r3, [r7, #12]
 803b1c6:	687a      	ldr	r2, [r7, #4]
 803b1c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803b1ca:	68fb      	ldr	r3, [r7, #12]
 803b1cc:	687a      	ldr	r2, [r7, #4]
 803b1ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b1d0:	687b      	ldr	r3, [r7, #4]
 803b1d2:	68ba      	ldr	r2, [r7, #8]
 803b1d4:	2100      	movs	r1, #0
 803b1d6:	68f8      	ldr	r0, [r7, #12]
 803b1d8:	f000 fcf1 	bl	803bbbe <USBD_LL_Transmit>

  return USBD_OK;
 803b1dc:	2300      	movs	r3, #0
}
 803b1de:	4618      	mov	r0, r3
 803b1e0:	3710      	adds	r7, #16
 803b1e2:	46bd      	mov	sp, r7
 803b1e4:	bd80      	pop	{r7, pc}

0803b1e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803b1e6:	b580      	push	{r7, lr}
 803b1e8:	b084      	sub	sp, #16
 803b1ea:	af00      	add	r7, sp, #0
 803b1ec:	60f8      	str	r0, [r7, #12]
 803b1ee:	60b9      	str	r1, [r7, #8]
 803b1f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b1f2:	687b      	ldr	r3, [r7, #4]
 803b1f4:	68ba      	ldr	r2, [r7, #8]
 803b1f6:	2100      	movs	r1, #0
 803b1f8:	68f8      	ldr	r0, [r7, #12]
 803b1fa:	f000 fce0 	bl	803bbbe <USBD_LL_Transmit>

  return USBD_OK;
 803b1fe:	2300      	movs	r3, #0
}
 803b200:	4618      	mov	r0, r3
 803b202:	3710      	adds	r7, #16
 803b204:	46bd      	mov	sp, r7
 803b206:	bd80      	pop	{r7, pc}

0803b208 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803b208:	b580      	push	{r7, lr}
 803b20a:	b084      	sub	sp, #16
 803b20c:	af00      	add	r7, sp, #0
 803b20e:	60f8      	str	r0, [r7, #12]
 803b210:	60b9      	str	r1, [r7, #8]
 803b212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803b214:	68fb      	ldr	r3, [r7, #12]
 803b216:	2203      	movs	r2, #3
 803b218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803b21c:	68fb      	ldr	r3, [r7, #12]
 803b21e:	687a      	ldr	r2, [r7, #4]
 803b220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803b224:	68fb      	ldr	r3, [r7, #12]
 803b226:	687a      	ldr	r2, [r7, #4]
 803b228:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b22c:	687b      	ldr	r3, [r7, #4]
 803b22e:	68ba      	ldr	r2, [r7, #8]
 803b230:	2100      	movs	r1, #0
 803b232:	68f8      	ldr	r0, [r7, #12]
 803b234:	f000 fce4 	bl	803bc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b238:	2300      	movs	r3, #0
}
 803b23a:	4618      	mov	r0, r3
 803b23c:	3710      	adds	r7, #16
 803b23e:	46bd      	mov	sp, r7
 803b240:	bd80      	pop	{r7, pc}

0803b242 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803b242:	b580      	push	{r7, lr}
 803b244:	b084      	sub	sp, #16
 803b246:	af00      	add	r7, sp, #0
 803b248:	60f8      	str	r0, [r7, #12]
 803b24a:	60b9      	str	r1, [r7, #8]
 803b24c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b24e:	687b      	ldr	r3, [r7, #4]
 803b250:	68ba      	ldr	r2, [r7, #8]
 803b252:	2100      	movs	r1, #0
 803b254:	68f8      	ldr	r0, [r7, #12]
 803b256:	f000 fcd3 	bl	803bc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b25a:	2300      	movs	r3, #0
}
 803b25c:	4618      	mov	r0, r3
 803b25e:	3710      	adds	r7, #16
 803b260:	46bd      	mov	sp, r7
 803b262:	bd80      	pop	{r7, pc}

0803b264 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803b264:	b580      	push	{r7, lr}
 803b266:	b082      	sub	sp, #8
 803b268:	af00      	add	r7, sp, #0
 803b26a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803b26c:	687b      	ldr	r3, [r7, #4]
 803b26e:	2204      	movs	r2, #4
 803b270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803b274:	2300      	movs	r3, #0
 803b276:	2200      	movs	r2, #0
 803b278:	2100      	movs	r1, #0
 803b27a:	6878      	ldr	r0, [r7, #4]
 803b27c:	f000 fc9f 	bl	803bbbe <USBD_LL_Transmit>

  return USBD_OK;
 803b280:	2300      	movs	r3, #0
}
 803b282:	4618      	mov	r0, r3
 803b284:	3708      	adds	r7, #8
 803b286:	46bd      	mov	sp, r7
 803b288:	bd80      	pop	{r7, pc}

0803b28a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803b28a:	b580      	push	{r7, lr}
 803b28c:	b082      	sub	sp, #8
 803b28e:	af00      	add	r7, sp, #0
 803b290:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803b292:	687b      	ldr	r3, [r7, #4]
 803b294:	2205      	movs	r2, #5
 803b296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b29a:	2300      	movs	r3, #0
 803b29c:	2200      	movs	r2, #0
 803b29e:	2100      	movs	r1, #0
 803b2a0:	6878      	ldr	r0, [r7, #4]
 803b2a2:	f000 fcad 	bl	803bc00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b2a6:	2300      	movs	r3, #0
}
 803b2a8:	4618      	mov	r0, r3
 803b2aa:	3708      	adds	r7, #8
 803b2ac:	46bd      	mov	sp, r7
 803b2ae:	bd80      	pop	{r7, pc}

0803b2b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803b2b0:	b580      	push	{r7, lr}
 803b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803b2b4:	2200      	movs	r2, #0
 803b2b6:	4913      	ldr	r1, [pc, #76]	; (803b304 <MX_USB_DEVICE_Init+0x54>)
 803b2b8:	4813      	ldr	r0, [pc, #76]	; (803b308 <MX_USB_DEVICE_Init+0x58>)
 803b2ba:	f7fe fd07 	bl	8039ccc <USBD_Init>
 803b2be:	4603      	mov	r3, r0
 803b2c0:	2b00      	cmp	r3, #0
 803b2c2:	d001      	beq.n	803b2c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803b2c4:	f7ee fc10 	bl	8029ae8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803b2c8:	4910      	ldr	r1, [pc, #64]	; (803b30c <MX_USB_DEVICE_Init+0x5c>)
 803b2ca:	480f      	ldr	r0, [pc, #60]	; (803b308 <MX_USB_DEVICE_Init+0x58>)
 803b2cc:	f7fe fd2e 	bl	8039d2c <USBD_RegisterClass>
 803b2d0:	4603      	mov	r3, r0
 803b2d2:	2b00      	cmp	r3, #0
 803b2d4:	d001      	beq.n	803b2da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803b2d6:	f7ee fc07 	bl	8029ae8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803b2da:	490d      	ldr	r1, [pc, #52]	; (803b310 <MX_USB_DEVICE_Init+0x60>)
 803b2dc:	480a      	ldr	r0, [pc, #40]	; (803b308 <MX_USB_DEVICE_Init+0x58>)
 803b2de:	f7fe fc65 	bl	8039bac <USBD_CDC_RegisterInterface>
 803b2e2:	4603      	mov	r3, r0
 803b2e4:	2b00      	cmp	r3, #0
 803b2e6:	d001      	beq.n	803b2ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803b2e8:	f7ee fbfe 	bl	8029ae8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803b2ec:	4806      	ldr	r0, [pc, #24]	; (803b308 <MX_USB_DEVICE_Init+0x58>)
 803b2ee:	f7fe fd53 	bl	8039d98 <USBD_Start>
 803b2f2:	4603      	mov	r3, r0
 803b2f4:	2b00      	cmp	r3, #0
 803b2f6:	d001      	beq.n	803b2fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803b2f8:	f7ee fbf6 	bl	8029ae8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803b2fc:	f7f5 fc82 	bl	8030c04 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803b300:	bf00      	nop
 803b302:	bd80      	pop	{r7, pc}
 803b304:	240000b4 	.word	0x240000b4
 803b308:	24024bcc 	.word	0x24024bcc
 803b30c:	24000020 	.word	0x24000020
 803b310:	240000a0 	.word	0x240000a0

0803b314 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803b314:	b580      	push	{r7, lr}
 803b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803b318:	2200      	movs	r2, #0
 803b31a:	4905      	ldr	r1, [pc, #20]	; (803b330 <CDC_Init_FS+0x1c>)
 803b31c:	4805      	ldr	r0, [pc, #20]	; (803b334 <CDC_Init_FS+0x20>)
 803b31e:	f7fe fc5f 	bl	8039be0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803b322:	4905      	ldr	r1, [pc, #20]	; (803b338 <CDC_Init_FS+0x24>)
 803b324:	4803      	ldr	r0, [pc, #12]	; (803b334 <CDC_Init_FS+0x20>)
 803b326:	f7fe fc7d 	bl	8039c24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803b32a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803b32c:	4618      	mov	r0, r3
 803b32e:	bd80      	pop	{r7, pc}
 803b330:	240256a8 	.word	0x240256a8
 803b334:	24024bcc 	.word	0x24024bcc
 803b338:	24024ea8 	.word	0x24024ea8

0803b33c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803b33c:	b480      	push	{r7}
 803b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803b340:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803b342:	4618      	mov	r0, r3
 803b344:	46bd      	mov	sp, r7
 803b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b34a:	4770      	bx	lr

0803b34c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803b34c:	b480      	push	{r7}
 803b34e:	b083      	sub	sp, #12
 803b350:	af00      	add	r7, sp, #0
 803b352:	4603      	mov	r3, r0
 803b354:	6039      	str	r1, [r7, #0]
 803b356:	71fb      	strb	r3, [r7, #7]
 803b358:	4613      	mov	r3, r2
 803b35a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803b35c:	79fb      	ldrb	r3, [r7, #7]
 803b35e:	2b23      	cmp	r3, #35	; 0x23
 803b360:	d84a      	bhi.n	803b3f8 <CDC_Control_FS+0xac>
 803b362:	a201      	add	r2, pc, #4	; (adr r2, 803b368 <CDC_Control_FS+0x1c>)
 803b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b368:	0803b3f9 	.word	0x0803b3f9
 803b36c:	0803b3f9 	.word	0x0803b3f9
 803b370:	0803b3f9 	.word	0x0803b3f9
 803b374:	0803b3f9 	.word	0x0803b3f9
 803b378:	0803b3f9 	.word	0x0803b3f9
 803b37c:	0803b3f9 	.word	0x0803b3f9
 803b380:	0803b3f9 	.word	0x0803b3f9
 803b384:	0803b3f9 	.word	0x0803b3f9
 803b388:	0803b3f9 	.word	0x0803b3f9
 803b38c:	0803b3f9 	.word	0x0803b3f9
 803b390:	0803b3f9 	.word	0x0803b3f9
 803b394:	0803b3f9 	.word	0x0803b3f9
 803b398:	0803b3f9 	.word	0x0803b3f9
 803b39c:	0803b3f9 	.word	0x0803b3f9
 803b3a0:	0803b3f9 	.word	0x0803b3f9
 803b3a4:	0803b3f9 	.word	0x0803b3f9
 803b3a8:	0803b3f9 	.word	0x0803b3f9
 803b3ac:	0803b3f9 	.word	0x0803b3f9
 803b3b0:	0803b3f9 	.word	0x0803b3f9
 803b3b4:	0803b3f9 	.word	0x0803b3f9
 803b3b8:	0803b3f9 	.word	0x0803b3f9
 803b3bc:	0803b3f9 	.word	0x0803b3f9
 803b3c0:	0803b3f9 	.word	0x0803b3f9
 803b3c4:	0803b3f9 	.word	0x0803b3f9
 803b3c8:	0803b3f9 	.word	0x0803b3f9
 803b3cc:	0803b3f9 	.word	0x0803b3f9
 803b3d0:	0803b3f9 	.word	0x0803b3f9
 803b3d4:	0803b3f9 	.word	0x0803b3f9
 803b3d8:	0803b3f9 	.word	0x0803b3f9
 803b3dc:	0803b3f9 	.word	0x0803b3f9
 803b3e0:	0803b3f9 	.word	0x0803b3f9
 803b3e4:	0803b3f9 	.word	0x0803b3f9
 803b3e8:	0803b3f9 	.word	0x0803b3f9
 803b3ec:	0803b3f9 	.word	0x0803b3f9
 803b3f0:	0803b3f9 	.word	0x0803b3f9
 803b3f4:	0803b3f9 	.word	0x0803b3f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803b3f8:	bf00      	nop
  }

  return (USBD_OK);
 803b3fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803b3fc:	4618      	mov	r0, r3
 803b3fe:	370c      	adds	r7, #12
 803b400:	46bd      	mov	sp, r7
 803b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b406:	4770      	bx	lr

0803b408 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803b408:	b580      	push	{r7, lr}
 803b40a:	b082      	sub	sp, #8
 803b40c:	af00      	add	r7, sp, #0
 803b40e:	6078      	str	r0, [r7, #4]
 803b410:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803b412:	6879      	ldr	r1, [r7, #4]
 803b414:	4805      	ldr	r0, [pc, #20]	; (803b42c <CDC_Receive_FS+0x24>)
 803b416:	f7fe fc05 	bl	8039c24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803b41a:	4804      	ldr	r0, [pc, #16]	; (803b42c <CDC_Receive_FS+0x24>)
 803b41c:	f7fe fc20 	bl	8039c60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803b420:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803b422:	4618      	mov	r0, r3
 803b424:	3708      	adds	r7, #8
 803b426:	46bd      	mov	sp, r7
 803b428:	bd80      	pop	{r7, pc}
 803b42a:	bf00      	nop
 803b42c:	24024bcc 	.word	0x24024bcc

0803b430 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803b430:	b480      	push	{r7}
 803b432:	b087      	sub	sp, #28
 803b434:	af00      	add	r7, sp, #0
 803b436:	60f8      	str	r0, [r7, #12]
 803b438:	60b9      	str	r1, [r7, #8]
 803b43a:	4613      	mov	r3, r2
 803b43c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803b43e:	2300      	movs	r3, #0
 803b440:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803b442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803b446:	4618      	mov	r0, r3
 803b448:	371c      	adds	r7, #28
 803b44a:	46bd      	mov	sp, r7
 803b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b450:	4770      	bx	lr
	...

0803b454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b454:	b480      	push	{r7}
 803b456:	b083      	sub	sp, #12
 803b458:	af00      	add	r7, sp, #0
 803b45a:	4603      	mov	r3, r0
 803b45c:	6039      	str	r1, [r7, #0]
 803b45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803b460:	683b      	ldr	r3, [r7, #0]
 803b462:	2212      	movs	r2, #18
 803b464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803b466:	4b03      	ldr	r3, [pc, #12]	; (803b474 <USBD_FS_DeviceDescriptor+0x20>)
}
 803b468:	4618      	mov	r0, r3
 803b46a:	370c      	adds	r7, #12
 803b46c:	46bd      	mov	sp, r7
 803b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b472:	4770      	bx	lr
 803b474:	240000d0 	.word	0x240000d0

0803b478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b478:	b480      	push	{r7}
 803b47a:	b083      	sub	sp, #12
 803b47c:	af00      	add	r7, sp, #0
 803b47e:	4603      	mov	r3, r0
 803b480:	6039      	str	r1, [r7, #0]
 803b482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803b484:	683b      	ldr	r3, [r7, #0]
 803b486:	2204      	movs	r2, #4
 803b488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803b48a:	4b03      	ldr	r3, [pc, #12]	; (803b498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803b48c:	4618      	mov	r0, r3
 803b48e:	370c      	adds	r7, #12
 803b490:	46bd      	mov	sp, r7
 803b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b496:	4770      	bx	lr
 803b498:	240000e4 	.word	0x240000e4

0803b49c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b49c:	b580      	push	{r7, lr}
 803b49e:	b082      	sub	sp, #8
 803b4a0:	af00      	add	r7, sp, #0
 803b4a2:	4603      	mov	r3, r0
 803b4a4:	6039      	str	r1, [r7, #0]
 803b4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b4a8:	79fb      	ldrb	r3, [r7, #7]
 803b4aa:	2b00      	cmp	r3, #0
 803b4ac:	d105      	bne.n	803b4ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b4ae:	683a      	ldr	r2, [r7, #0]
 803b4b0:	4907      	ldr	r1, [pc, #28]	; (803b4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 803b4b2:	4808      	ldr	r0, [pc, #32]	; (803b4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 803b4b4:	f7ff fe1c 	bl	803b0f0 <USBD_GetString>
 803b4b8:	e004      	b.n	803b4c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b4ba:	683a      	ldr	r2, [r7, #0]
 803b4bc:	4904      	ldr	r1, [pc, #16]	; (803b4d0 <USBD_FS_ProductStrDescriptor+0x34>)
 803b4be:	4805      	ldr	r0, [pc, #20]	; (803b4d4 <USBD_FS_ProductStrDescriptor+0x38>)
 803b4c0:	f7ff fe16 	bl	803b0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b4c4:	4b02      	ldr	r3, [pc, #8]	; (803b4d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803b4c6:	4618      	mov	r0, r3
 803b4c8:	3708      	adds	r7, #8
 803b4ca:	46bd      	mov	sp, r7
 803b4cc:	bd80      	pop	{r7, pc}
 803b4ce:	bf00      	nop
 803b4d0:	24025ea8 	.word	0x24025ea8
 803b4d4:	0803de48 	.word	0x0803de48

0803b4d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4d8:	b580      	push	{r7, lr}
 803b4da:	b082      	sub	sp, #8
 803b4dc:	af00      	add	r7, sp, #0
 803b4de:	4603      	mov	r3, r0
 803b4e0:	6039      	str	r1, [r7, #0]
 803b4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803b4e4:	683a      	ldr	r2, [r7, #0]
 803b4e6:	4904      	ldr	r1, [pc, #16]	; (803b4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803b4e8:	4804      	ldr	r0, [pc, #16]	; (803b4fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803b4ea:	f7ff fe01 	bl	803b0f0 <USBD_GetString>
  return USBD_StrDesc;
 803b4ee:	4b02      	ldr	r3, [pc, #8]	; (803b4f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803b4f0:	4618      	mov	r0, r3
 803b4f2:	3708      	adds	r7, #8
 803b4f4:	46bd      	mov	sp, r7
 803b4f6:	bd80      	pop	{r7, pc}
 803b4f8:	24025ea8 	.word	0x24025ea8
 803b4fc:	0803de60 	.word	0x0803de60

0803b500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b500:	b580      	push	{r7, lr}
 803b502:	b082      	sub	sp, #8
 803b504:	af00      	add	r7, sp, #0
 803b506:	4603      	mov	r3, r0
 803b508:	6039      	str	r1, [r7, #0]
 803b50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803b50c:	683b      	ldr	r3, [r7, #0]
 803b50e:	221a      	movs	r2, #26
 803b510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803b512:	f000 f843 	bl	803b59c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803b516:	4b02      	ldr	r3, [pc, #8]	; (803b520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803b518:	4618      	mov	r0, r3
 803b51a:	3708      	adds	r7, #8
 803b51c:	46bd      	mov	sp, r7
 803b51e:	bd80      	pop	{r7, pc}
 803b520:	240000e8 	.word	0x240000e8

0803b524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b524:	b580      	push	{r7, lr}
 803b526:	b082      	sub	sp, #8
 803b528:	af00      	add	r7, sp, #0
 803b52a:	4603      	mov	r3, r0
 803b52c:	6039      	str	r1, [r7, #0]
 803b52e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803b530:	79fb      	ldrb	r3, [r7, #7]
 803b532:	2b00      	cmp	r3, #0
 803b534:	d105      	bne.n	803b542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b536:	683a      	ldr	r2, [r7, #0]
 803b538:	4907      	ldr	r1, [pc, #28]	; (803b558 <USBD_FS_ConfigStrDescriptor+0x34>)
 803b53a:	4808      	ldr	r0, [pc, #32]	; (803b55c <USBD_FS_ConfigStrDescriptor+0x38>)
 803b53c:	f7ff fdd8 	bl	803b0f0 <USBD_GetString>
 803b540:	e004      	b.n	803b54c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b542:	683a      	ldr	r2, [r7, #0]
 803b544:	4904      	ldr	r1, [pc, #16]	; (803b558 <USBD_FS_ConfigStrDescriptor+0x34>)
 803b546:	4805      	ldr	r0, [pc, #20]	; (803b55c <USBD_FS_ConfigStrDescriptor+0x38>)
 803b548:	f7ff fdd2 	bl	803b0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b54c:	4b02      	ldr	r3, [pc, #8]	; (803b558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803b54e:	4618      	mov	r0, r3
 803b550:	3708      	adds	r7, #8
 803b552:	46bd      	mov	sp, r7
 803b554:	bd80      	pop	{r7, pc}
 803b556:	bf00      	nop
 803b558:	24025ea8 	.word	0x24025ea8
 803b55c:	0803de74 	.word	0x0803de74

0803b560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b560:	b580      	push	{r7, lr}
 803b562:	b082      	sub	sp, #8
 803b564:	af00      	add	r7, sp, #0
 803b566:	4603      	mov	r3, r0
 803b568:	6039      	str	r1, [r7, #0]
 803b56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b56c:	79fb      	ldrb	r3, [r7, #7]
 803b56e:	2b00      	cmp	r3, #0
 803b570:	d105      	bne.n	803b57e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b572:	683a      	ldr	r2, [r7, #0]
 803b574:	4907      	ldr	r1, [pc, #28]	; (803b594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b576:	4808      	ldr	r0, [pc, #32]	; (803b598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b578:	f7ff fdba 	bl	803b0f0 <USBD_GetString>
 803b57c:	e004      	b.n	803b588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b57e:	683a      	ldr	r2, [r7, #0]
 803b580:	4904      	ldr	r1, [pc, #16]	; (803b594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b582:	4805      	ldr	r0, [pc, #20]	; (803b598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b584:	f7ff fdb4 	bl	803b0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b588:	4b02      	ldr	r3, [pc, #8]	; (803b594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803b58a:	4618      	mov	r0, r3
 803b58c:	3708      	adds	r7, #8
 803b58e:	46bd      	mov	sp, r7
 803b590:	bd80      	pop	{r7, pc}
 803b592:	bf00      	nop
 803b594:	24025ea8 	.word	0x24025ea8
 803b598:	0803de80 	.word	0x0803de80

0803b59c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803b59c:	b580      	push	{r7, lr}
 803b59e:	b084      	sub	sp, #16
 803b5a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803b5a2:	4b0f      	ldr	r3, [pc, #60]	; (803b5e0 <Get_SerialNum+0x44>)
 803b5a4:	681b      	ldr	r3, [r3, #0]
 803b5a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803b5a8:	4b0e      	ldr	r3, [pc, #56]	; (803b5e4 <Get_SerialNum+0x48>)
 803b5aa:	681b      	ldr	r3, [r3, #0]
 803b5ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803b5ae:	4b0e      	ldr	r3, [pc, #56]	; (803b5e8 <Get_SerialNum+0x4c>)
 803b5b0:	681b      	ldr	r3, [r3, #0]
 803b5b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803b5b4:	68fa      	ldr	r2, [r7, #12]
 803b5b6:	687b      	ldr	r3, [r7, #4]
 803b5b8:	4413      	add	r3, r2
 803b5ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803b5bc:	68fb      	ldr	r3, [r7, #12]
 803b5be:	2b00      	cmp	r3, #0
 803b5c0:	d009      	beq.n	803b5d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803b5c2:	2208      	movs	r2, #8
 803b5c4:	4909      	ldr	r1, [pc, #36]	; (803b5ec <Get_SerialNum+0x50>)
 803b5c6:	68f8      	ldr	r0, [r7, #12]
 803b5c8:	f000 f814 	bl	803b5f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803b5cc:	2204      	movs	r2, #4
 803b5ce:	4908      	ldr	r1, [pc, #32]	; (803b5f0 <Get_SerialNum+0x54>)
 803b5d0:	68b8      	ldr	r0, [r7, #8]
 803b5d2:	f000 f80f 	bl	803b5f4 <IntToUnicode>
  }
}
 803b5d6:	bf00      	nop
 803b5d8:	3710      	adds	r7, #16
 803b5da:	46bd      	mov	sp, r7
 803b5dc:	bd80      	pop	{r7, pc}
 803b5de:	bf00      	nop
 803b5e0:	1ff1e800 	.word	0x1ff1e800
 803b5e4:	1ff1e804 	.word	0x1ff1e804
 803b5e8:	1ff1e808 	.word	0x1ff1e808
 803b5ec:	240000ea 	.word	0x240000ea
 803b5f0:	240000fa 	.word	0x240000fa

0803b5f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803b5f4:	b480      	push	{r7}
 803b5f6:	b087      	sub	sp, #28
 803b5f8:	af00      	add	r7, sp, #0
 803b5fa:	60f8      	str	r0, [r7, #12]
 803b5fc:	60b9      	str	r1, [r7, #8]
 803b5fe:	4613      	mov	r3, r2
 803b600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803b602:	2300      	movs	r3, #0
 803b604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803b606:	2300      	movs	r3, #0
 803b608:	75fb      	strb	r3, [r7, #23]
 803b60a:	e027      	b.n	803b65c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803b60c:	68fb      	ldr	r3, [r7, #12]
 803b60e:	0f1b      	lsrs	r3, r3, #28
 803b610:	2b09      	cmp	r3, #9
 803b612:	d80b      	bhi.n	803b62c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803b614:	68fb      	ldr	r3, [r7, #12]
 803b616:	0f1b      	lsrs	r3, r3, #28
 803b618:	b2da      	uxtb	r2, r3
 803b61a:	7dfb      	ldrb	r3, [r7, #23]
 803b61c:	005b      	lsls	r3, r3, #1
 803b61e:	4619      	mov	r1, r3
 803b620:	68bb      	ldr	r3, [r7, #8]
 803b622:	440b      	add	r3, r1
 803b624:	3230      	adds	r2, #48	; 0x30
 803b626:	b2d2      	uxtb	r2, r2
 803b628:	701a      	strb	r2, [r3, #0]
 803b62a:	e00a      	b.n	803b642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803b62c:	68fb      	ldr	r3, [r7, #12]
 803b62e:	0f1b      	lsrs	r3, r3, #28
 803b630:	b2da      	uxtb	r2, r3
 803b632:	7dfb      	ldrb	r3, [r7, #23]
 803b634:	005b      	lsls	r3, r3, #1
 803b636:	4619      	mov	r1, r3
 803b638:	68bb      	ldr	r3, [r7, #8]
 803b63a:	440b      	add	r3, r1
 803b63c:	3237      	adds	r2, #55	; 0x37
 803b63e:	b2d2      	uxtb	r2, r2
 803b640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803b642:	68fb      	ldr	r3, [r7, #12]
 803b644:	011b      	lsls	r3, r3, #4
 803b646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803b648:	7dfb      	ldrb	r3, [r7, #23]
 803b64a:	005b      	lsls	r3, r3, #1
 803b64c:	3301      	adds	r3, #1
 803b64e:	68ba      	ldr	r2, [r7, #8]
 803b650:	4413      	add	r3, r2
 803b652:	2200      	movs	r2, #0
 803b654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803b656:	7dfb      	ldrb	r3, [r7, #23]
 803b658:	3301      	adds	r3, #1
 803b65a:	75fb      	strb	r3, [r7, #23]
 803b65c:	7dfa      	ldrb	r2, [r7, #23]
 803b65e:	79fb      	ldrb	r3, [r7, #7]
 803b660:	429a      	cmp	r2, r3
 803b662:	d3d3      	bcc.n	803b60c <IntToUnicode+0x18>
  }
}
 803b664:	bf00      	nop
 803b666:	bf00      	nop
 803b668:	371c      	adds	r7, #28
 803b66a:	46bd      	mov	sp, r7
 803b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b670:	4770      	bx	lr
	...

0803b674 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803b674:	b580      	push	{r7, lr}
 803b676:	b0b8      	sub	sp, #224	; 0xe0
 803b678:	af00      	add	r7, sp, #0
 803b67a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803b67c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b680:	2200      	movs	r2, #0
 803b682:	601a      	str	r2, [r3, #0]
 803b684:	605a      	str	r2, [r3, #4]
 803b686:	609a      	str	r2, [r3, #8]
 803b688:	60da      	str	r2, [r3, #12]
 803b68a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803b68c:	f107 0310 	add.w	r3, r7, #16
 803b690:	22bc      	movs	r2, #188	; 0xbc
 803b692:	2100      	movs	r1, #0
 803b694:	4618      	mov	r0, r3
 803b696:	f000 fbe9 	bl	803be6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803b69a:	687b      	ldr	r3, [r7, #4]
 803b69c:	681b      	ldr	r3, [r3, #0]
 803b69e:	4a2f      	ldr	r2, [pc, #188]	; (803b75c <HAL_PCD_MspInit+0xe8>)
 803b6a0:	4293      	cmp	r3, r2
 803b6a2:	d156      	bne.n	803b752 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803b6a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803b6a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803b6aa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803b6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803b6b2:	f107 0310 	add.w	r3, r7, #16
 803b6b6:	4618      	mov	r0, r3
 803b6b8:	f7f6 fa6e 	bl	8031b98 <HAL_RCCEx_PeriphCLKConfig>
 803b6bc:	4603      	mov	r3, r0
 803b6be:	2b00      	cmp	r3, #0
 803b6c0:	d001      	beq.n	803b6c6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803b6c2:	f7ee fa11 	bl	8029ae8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803b6c6:	f7f5 fa9d 	bl	8030c04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803b6ca:	4b25      	ldr	r3, [pc, #148]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b6cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b6d0:	4a23      	ldr	r2, [pc, #140]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b6d2:	f043 0301 	orr.w	r3, r3, #1
 803b6d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803b6da:	4b21      	ldr	r3, [pc, #132]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b6e0:	f003 0301 	and.w	r3, r3, #1
 803b6e4:	60fb      	str	r3, [r7, #12]
 803b6e6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803b6e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803b6ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803b6f0:	2302      	movs	r3, #2
 803b6f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803b6f6:	2300      	movs	r3, #0
 803b6f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803b6fc:	2300      	movs	r3, #0
 803b6fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803b702:	230a      	movs	r3, #10
 803b704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803b708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b70c:	4619      	mov	r1, r3
 803b70e:	4815      	ldr	r0, [pc, #84]	; (803b764 <HAL_PCD_MspInit+0xf0>)
 803b710:	f7f2 fdf2 	bl	802e2f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803b714:	4b12      	ldr	r3, [pc, #72]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b71a:	4a11      	ldr	r2, [pc, #68]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b71c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b720:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803b724:	4b0e      	ldr	r3, [pc, #56]	; (803b760 <HAL_PCD_MspInit+0xec>)
 803b726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b72a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803b72e:	60bb      	str	r3, [r7, #8]
 803b730:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803b732:	2200      	movs	r2, #0
 803b734:	2100      	movs	r1, #0
 803b736:	2062      	movs	r0, #98	; 0x62
 803b738:	f7ef fd8b 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803b73c:	2062      	movs	r0, #98	; 0x62
 803b73e:	f7ef fda2 	bl	802b286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803b742:	2200      	movs	r2, #0
 803b744:	2100      	movs	r1, #0
 803b746:	2065      	movs	r0, #101	; 0x65
 803b748:	f7ef fd83 	bl	802b252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803b74c:	2065      	movs	r0, #101	; 0x65
 803b74e:	f7ef fd9a 	bl	802b286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803b752:	bf00      	nop
 803b754:	37e0      	adds	r7, #224	; 0xe0
 803b756:	46bd      	mov	sp, r7
 803b758:	bd80      	pop	{r7, pc}
 803b75a:	bf00      	nop
 803b75c:	40080000 	.word	0x40080000
 803b760:	58024400 	.word	0x58024400
 803b764:	58020000 	.word	0x58020000

0803b768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b768:	b580      	push	{r7, lr}
 803b76a:	b082      	sub	sp, #8
 803b76c:	af00      	add	r7, sp, #0
 803b76e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803b770:	687b      	ldr	r3, [r7, #4]
 803b772:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803b776:	687b      	ldr	r3, [r7, #4]
 803b778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803b77c:	4619      	mov	r1, r3
 803b77e:	4610      	mov	r0, r2
 803b780:	f7fe fb57 	bl	8039e32 <USBD_LL_SetupStage>
}
 803b784:	bf00      	nop
 803b786:	3708      	adds	r7, #8
 803b788:	46bd      	mov	sp, r7
 803b78a:	bd80      	pop	{r7, pc}

0803b78c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b78c:	b580      	push	{r7, lr}
 803b78e:	b082      	sub	sp, #8
 803b790:	af00      	add	r7, sp, #0
 803b792:	6078      	str	r0, [r7, #4]
 803b794:	460b      	mov	r3, r1
 803b796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803b798:	687b      	ldr	r3, [r7, #4]
 803b79a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b79e:	78fa      	ldrb	r2, [r7, #3]
 803b7a0:	6879      	ldr	r1, [r7, #4]
 803b7a2:	4613      	mov	r3, r2
 803b7a4:	00db      	lsls	r3, r3, #3
 803b7a6:	4413      	add	r3, r2
 803b7a8:	009b      	lsls	r3, r3, #2
 803b7aa:	440b      	add	r3, r1
 803b7ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803b7b0:	681a      	ldr	r2, [r3, #0]
 803b7b2:	78fb      	ldrb	r3, [r7, #3]
 803b7b4:	4619      	mov	r1, r3
 803b7b6:	f7fe fb91 	bl	8039edc <USBD_LL_DataOutStage>
}
 803b7ba:	bf00      	nop
 803b7bc:	3708      	adds	r7, #8
 803b7be:	46bd      	mov	sp, r7
 803b7c0:	bd80      	pop	{r7, pc}

0803b7c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7c2:	b580      	push	{r7, lr}
 803b7c4:	b082      	sub	sp, #8
 803b7c6:	af00      	add	r7, sp, #0
 803b7c8:	6078      	str	r0, [r7, #4]
 803b7ca:	460b      	mov	r3, r1
 803b7cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803b7ce:	687b      	ldr	r3, [r7, #4]
 803b7d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b7d4:	78fa      	ldrb	r2, [r7, #3]
 803b7d6:	6879      	ldr	r1, [r7, #4]
 803b7d8:	4613      	mov	r3, r2
 803b7da:	00db      	lsls	r3, r3, #3
 803b7dc:	4413      	add	r3, r2
 803b7de:	009b      	lsls	r3, r3, #2
 803b7e0:	440b      	add	r3, r1
 803b7e2:	334c      	adds	r3, #76	; 0x4c
 803b7e4:	681a      	ldr	r2, [r3, #0]
 803b7e6:	78fb      	ldrb	r3, [r7, #3]
 803b7e8:	4619      	mov	r1, r3
 803b7ea:	f7fe fc2a 	bl	803a042 <USBD_LL_DataInStage>
}
 803b7ee:	bf00      	nop
 803b7f0:	3708      	adds	r7, #8
 803b7f2:	46bd      	mov	sp, r7
 803b7f4:	bd80      	pop	{r7, pc}

0803b7f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7f6:	b580      	push	{r7, lr}
 803b7f8:	b082      	sub	sp, #8
 803b7fa:	af00      	add	r7, sp, #0
 803b7fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803b7fe:	687b      	ldr	r3, [r7, #4]
 803b800:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b804:	4618      	mov	r0, r3
 803b806:	f7fe fd5e 	bl	803a2c6 <USBD_LL_SOF>
}
 803b80a:	bf00      	nop
 803b80c:	3708      	adds	r7, #8
 803b80e:	46bd      	mov	sp, r7
 803b810:	bd80      	pop	{r7, pc}

0803b812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b812:	b580      	push	{r7, lr}
 803b814:	b084      	sub	sp, #16
 803b816:	af00      	add	r7, sp, #0
 803b818:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803b81a:	2301      	movs	r3, #1
 803b81c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803b81e:	687b      	ldr	r3, [r7, #4]
 803b820:	68db      	ldr	r3, [r3, #12]
 803b822:	2b00      	cmp	r3, #0
 803b824:	d102      	bne.n	803b82c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803b826:	2300      	movs	r3, #0
 803b828:	73fb      	strb	r3, [r7, #15]
 803b82a:	e008      	b.n	803b83e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803b82c:	687b      	ldr	r3, [r7, #4]
 803b82e:	68db      	ldr	r3, [r3, #12]
 803b830:	2b02      	cmp	r3, #2
 803b832:	d102      	bne.n	803b83a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803b834:	2301      	movs	r3, #1
 803b836:	73fb      	strb	r3, [r7, #15]
 803b838:	e001      	b.n	803b83e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803b83a:	f7ee f955 	bl	8029ae8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803b83e:	687b      	ldr	r3, [r7, #4]
 803b840:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b844:	7bfa      	ldrb	r2, [r7, #15]
 803b846:	4611      	mov	r1, r2
 803b848:	4618      	mov	r0, r3
 803b84a:	f7fe fcfe 	bl	803a24a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803b84e:	687b      	ldr	r3, [r7, #4]
 803b850:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b854:	4618      	mov	r0, r3
 803b856:	f7fe fca6 	bl	803a1a6 <USBD_LL_Reset>
}
 803b85a:	bf00      	nop
 803b85c:	3710      	adds	r7, #16
 803b85e:	46bd      	mov	sp, r7
 803b860:	bd80      	pop	{r7, pc}
	...

0803b864 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b864:	b580      	push	{r7, lr}
 803b866:	b082      	sub	sp, #8
 803b868:	af00      	add	r7, sp, #0
 803b86a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803b86c:	687b      	ldr	r3, [r7, #4]
 803b86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b872:	4618      	mov	r0, r3
 803b874:	f7fe fcf9 	bl	803a26a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803b878:	687b      	ldr	r3, [r7, #4]
 803b87a:	681b      	ldr	r3, [r3, #0]
 803b87c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b880:	681b      	ldr	r3, [r3, #0]
 803b882:	687a      	ldr	r2, [r7, #4]
 803b884:	6812      	ldr	r2, [r2, #0]
 803b886:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803b88a:	f043 0301 	orr.w	r3, r3, #1
 803b88e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803b890:	687b      	ldr	r3, [r7, #4]
 803b892:	6a1b      	ldr	r3, [r3, #32]
 803b894:	2b00      	cmp	r3, #0
 803b896:	d005      	beq.n	803b8a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803b898:	4b04      	ldr	r3, [pc, #16]	; (803b8ac <HAL_PCD_SuspendCallback+0x48>)
 803b89a:	691b      	ldr	r3, [r3, #16]
 803b89c:	4a03      	ldr	r2, [pc, #12]	; (803b8ac <HAL_PCD_SuspendCallback+0x48>)
 803b89e:	f043 0306 	orr.w	r3, r3, #6
 803b8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803b8a4:	bf00      	nop
 803b8a6:	3708      	adds	r7, #8
 803b8a8:	46bd      	mov	sp, r7
 803b8aa:	bd80      	pop	{r7, pc}
 803b8ac:	e000ed00 	.word	0xe000ed00

0803b8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b8b0:	b580      	push	{r7, lr}
 803b8b2:	b082      	sub	sp, #8
 803b8b4:	af00      	add	r7, sp, #0
 803b8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803b8b8:	687b      	ldr	r3, [r7, #4]
 803b8ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8be:	4618      	mov	r0, r3
 803b8c0:	f7fe fce9 	bl	803a296 <USBD_LL_Resume>
}
 803b8c4:	bf00      	nop
 803b8c6:	3708      	adds	r7, #8
 803b8c8:	46bd      	mov	sp, r7
 803b8ca:	bd80      	pop	{r7, pc}

0803b8cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b8cc:	b580      	push	{r7, lr}
 803b8ce:	b082      	sub	sp, #8
 803b8d0:	af00      	add	r7, sp, #0
 803b8d2:	6078      	str	r0, [r7, #4]
 803b8d4:	460b      	mov	r3, r1
 803b8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b8d8:	687b      	ldr	r3, [r7, #4]
 803b8da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8de:	78fa      	ldrb	r2, [r7, #3]
 803b8e0:	4611      	mov	r1, r2
 803b8e2:	4618      	mov	r0, r3
 803b8e4:	f7fe fd41 	bl	803a36a <USBD_LL_IsoOUTIncomplete>
}
 803b8e8:	bf00      	nop
 803b8ea:	3708      	adds	r7, #8
 803b8ec:	46bd      	mov	sp, r7
 803b8ee:	bd80      	pop	{r7, pc}

0803b8f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b8f0:	b580      	push	{r7, lr}
 803b8f2:	b082      	sub	sp, #8
 803b8f4:	af00      	add	r7, sp, #0
 803b8f6:	6078      	str	r0, [r7, #4]
 803b8f8:	460b      	mov	r3, r1
 803b8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b8fc:	687b      	ldr	r3, [r7, #4]
 803b8fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b902:	78fa      	ldrb	r2, [r7, #3]
 803b904:	4611      	mov	r1, r2
 803b906:	4618      	mov	r0, r3
 803b908:	f7fe fcfd 	bl	803a306 <USBD_LL_IsoINIncomplete>
}
 803b90c:	bf00      	nop
 803b90e:	3708      	adds	r7, #8
 803b910:	46bd      	mov	sp, r7
 803b912:	bd80      	pop	{r7, pc}

0803b914 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b914:	b580      	push	{r7, lr}
 803b916:	b082      	sub	sp, #8
 803b918:	af00      	add	r7, sp, #0
 803b91a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803b91c:	687b      	ldr	r3, [r7, #4]
 803b91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b922:	4618      	mov	r0, r3
 803b924:	f7fe fd53 	bl	803a3ce <USBD_LL_DevConnected>
}
 803b928:	bf00      	nop
 803b92a:	3708      	adds	r7, #8
 803b92c:	46bd      	mov	sp, r7
 803b92e:	bd80      	pop	{r7, pc}

0803b930 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b930:	b580      	push	{r7, lr}
 803b932:	b082      	sub	sp, #8
 803b934:	af00      	add	r7, sp, #0
 803b936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803b938:	687b      	ldr	r3, [r7, #4]
 803b93a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b93e:	4618      	mov	r0, r3
 803b940:	f7fe fd50 	bl	803a3e4 <USBD_LL_DevDisconnected>
}
 803b944:	bf00      	nop
 803b946:	3708      	adds	r7, #8
 803b948:	46bd      	mov	sp, r7
 803b94a:	bd80      	pop	{r7, pc}

0803b94c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803b94c:	b580      	push	{r7, lr}
 803b94e:	b082      	sub	sp, #8
 803b950:	af00      	add	r7, sp, #0
 803b952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803b954:	687b      	ldr	r3, [r7, #4]
 803b956:	781b      	ldrb	r3, [r3, #0]
 803b958:	2b00      	cmp	r3, #0
 803b95a:	d13e      	bne.n	803b9da <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803b95c:	4a21      	ldr	r2, [pc, #132]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b95e:	687b      	ldr	r3, [r7, #4]
 803b960:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803b964:	687b      	ldr	r3, [r7, #4]
 803b966:	4a1f      	ldr	r2, [pc, #124]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b968:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803b96c:	4b1d      	ldr	r3, [pc, #116]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b96e:	4a1e      	ldr	r2, [pc, #120]	; (803b9e8 <USBD_LL_Init+0x9c>)
 803b970:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803b972:	4b1c      	ldr	r3, [pc, #112]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b974:	2209      	movs	r2, #9
 803b976:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803b978:	4b1a      	ldr	r3, [pc, #104]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b97a:	2202      	movs	r2, #2
 803b97c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803b97e:	4b19      	ldr	r3, [pc, #100]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b980:	2200      	movs	r2, #0
 803b982:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803b984:	4b17      	ldr	r3, [pc, #92]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b986:	2202      	movs	r2, #2
 803b988:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803b98a:	4b16      	ldr	r3, [pc, #88]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b98c:	2200      	movs	r2, #0
 803b98e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803b990:	4b14      	ldr	r3, [pc, #80]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b992:	2200      	movs	r2, #0
 803b994:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803b996:	4b13      	ldr	r3, [pc, #76]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b998:	2200      	movs	r2, #0
 803b99a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803b99c:	4b11      	ldr	r3, [pc, #68]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b99e:	2200      	movs	r2, #0
 803b9a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803b9a2:	4b10      	ldr	r3, [pc, #64]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9a4:	2200      	movs	r2, #0
 803b9a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803b9a8:	4b0e      	ldr	r3, [pc, #56]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9aa:	2200      	movs	r2, #0
 803b9ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803b9ae:	480d      	ldr	r0, [pc, #52]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9b0:	f7f3 fe18 	bl	802f5e4 <HAL_PCD_Init>
 803b9b4:	4603      	mov	r3, r0
 803b9b6:	2b00      	cmp	r3, #0
 803b9b8:	d001      	beq.n	803b9be <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803b9ba:	f7ee f895 	bl	8029ae8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803b9be:	2180      	movs	r1, #128	; 0x80
 803b9c0:	4808      	ldr	r0, [pc, #32]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9c2:	f7f5 f8a4 	bl	8030b0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803b9c6:	2240      	movs	r2, #64	; 0x40
 803b9c8:	2100      	movs	r1, #0
 803b9ca:	4806      	ldr	r0, [pc, #24]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9cc:	f7f5 f858 	bl	8030a80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803b9d0:	2280      	movs	r2, #128	; 0x80
 803b9d2:	2101      	movs	r1, #1
 803b9d4:	4803      	ldr	r0, [pc, #12]	; (803b9e4 <USBD_LL_Init+0x98>)
 803b9d6:	f7f5 f853 	bl	8030a80 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803b9da:	2300      	movs	r3, #0
}
 803b9dc:	4618      	mov	r0, r3
 803b9de:	3708      	adds	r7, #8
 803b9e0:	46bd      	mov	sp, r7
 803b9e2:	bd80      	pop	{r7, pc}
 803b9e4:	240260a8 	.word	0x240260a8
 803b9e8:	40080000 	.word	0x40080000

0803b9ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803b9ec:	b580      	push	{r7, lr}
 803b9ee:	b084      	sub	sp, #16
 803b9f0:	af00      	add	r7, sp, #0
 803b9f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b9f4:	2300      	movs	r3, #0
 803b9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b9f8:	2300      	movs	r3, #0
 803b9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803b9fc:	687b      	ldr	r3, [r7, #4]
 803b9fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba02:	4618      	mov	r0, r3
 803ba04:	f7f3 ff12 	bl	802f82c <HAL_PCD_Start>
 803ba08:	4603      	mov	r3, r0
 803ba0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba0c:	7bfb      	ldrb	r3, [r7, #15]
 803ba0e:	4618      	mov	r0, r3
 803ba10:	f000 f942 	bl	803bc98 <USBD_Get_USB_Status>
 803ba14:	4603      	mov	r3, r0
 803ba16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba18:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba1a:	4618      	mov	r0, r3
 803ba1c:	3710      	adds	r7, #16
 803ba1e:	46bd      	mov	sp, r7
 803ba20:	bd80      	pop	{r7, pc}

0803ba22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803ba22:	b580      	push	{r7, lr}
 803ba24:	b084      	sub	sp, #16
 803ba26:	af00      	add	r7, sp, #0
 803ba28:	6078      	str	r0, [r7, #4]
 803ba2a:	4608      	mov	r0, r1
 803ba2c:	4611      	mov	r1, r2
 803ba2e:	461a      	mov	r2, r3
 803ba30:	4603      	mov	r3, r0
 803ba32:	70fb      	strb	r3, [r7, #3]
 803ba34:	460b      	mov	r3, r1
 803ba36:	70bb      	strb	r3, [r7, #2]
 803ba38:	4613      	mov	r3, r2
 803ba3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba3c:	2300      	movs	r3, #0
 803ba3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba40:	2300      	movs	r3, #0
 803ba42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803ba44:	687b      	ldr	r3, [r7, #4]
 803ba46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803ba4a:	78bb      	ldrb	r3, [r7, #2]
 803ba4c:	883a      	ldrh	r2, [r7, #0]
 803ba4e:	78f9      	ldrb	r1, [r7, #3]
 803ba50:	f7f4 fc10 	bl	8030274 <HAL_PCD_EP_Open>
 803ba54:	4603      	mov	r3, r0
 803ba56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba58:	7bfb      	ldrb	r3, [r7, #15]
 803ba5a:	4618      	mov	r0, r3
 803ba5c:	f000 f91c 	bl	803bc98 <USBD_Get_USB_Status>
 803ba60:	4603      	mov	r3, r0
 803ba62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba64:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba66:	4618      	mov	r0, r3
 803ba68:	3710      	adds	r7, #16
 803ba6a:	46bd      	mov	sp, r7
 803ba6c:	bd80      	pop	{r7, pc}

0803ba6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ba6e:	b580      	push	{r7, lr}
 803ba70:	b084      	sub	sp, #16
 803ba72:	af00      	add	r7, sp, #0
 803ba74:	6078      	str	r0, [r7, #4]
 803ba76:	460b      	mov	r3, r1
 803ba78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba7a:	2300      	movs	r3, #0
 803ba7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba7e:	2300      	movs	r3, #0
 803ba80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803ba82:	687b      	ldr	r3, [r7, #4]
 803ba84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba88:	78fa      	ldrb	r2, [r7, #3]
 803ba8a:	4611      	mov	r1, r2
 803ba8c:	4618      	mov	r0, r3
 803ba8e:	f7f4 fc59 	bl	8030344 <HAL_PCD_EP_Close>
 803ba92:	4603      	mov	r3, r0
 803ba94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba96:	7bfb      	ldrb	r3, [r7, #15]
 803ba98:	4618      	mov	r0, r3
 803ba9a:	f000 f8fd 	bl	803bc98 <USBD_Get_USB_Status>
 803ba9e:	4603      	mov	r3, r0
 803baa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803baa2:	7bbb      	ldrb	r3, [r7, #14]
}
 803baa4:	4618      	mov	r0, r3
 803baa6:	3710      	adds	r7, #16
 803baa8:	46bd      	mov	sp, r7
 803baaa:	bd80      	pop	{r7, pc}

0803baac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803baac:	b580      	push	{r7, lr}
 803baae:	b084      	sub	sp, #16
 803bab0:	af00      	add	r7, sp, #0
 803bab2:	6078      	str	r0, [r7, #4]
 803bab4:	460b      	mov	r3, r1
 803bab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bab8:	2300      	movs	r3, #0
 803baba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803babc:	2300      	movs	r3, #0
 803babe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803bac0:	687b      	ldr	r3, [r7, #4]
 803bac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bac6:	78fa      	ldrb	r2, [r7, #3]
 803bac8:	4611      	mov	r1, r2
 803baca:	4618      	mov	r0, r3
 803bacc:	f7f4 fd31 	bl	8030532 <HAL_PCD_EP_SetStall>
 803bad0:	4603      	mov	r3, r0
 803bad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bad4:	7bfb      	ldrb	r3, [r7, #15]
 803bad6:	4618      	mov	r0, r3
 803bad8:	f000 f8de 	bl	803bc98 <USBD_Get_USB_Status>
 803badc:	4603      	mov	r3, r0
 803bade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bae0:	7bbb      	ldrb	r3, [r7, #14]
}
 803bae2:	4618      	mov	r0, r3
 803bae4:	3710      	adds	r7, #16
 803bae6:	46bd      	mov	sp, r7
 803bae8:	bd80      	pop	{r7, pc}

0803baea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803baea:	b580      	push	{r7, lr}
 803baec:	b084      	sub	sp, #16
 803baee:	af00      	add	r7, sp, #0
 803baf0:	6078      	str	r0, [r7, #4]
 803baf2:	460b      	mov	r3, r1
 803baf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803baf6:	2300      	movs	r3, #0
 803baf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bafa:	2300      	movs	r3, #0
 803bafc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803bafe:	687b      	ldr	r3, [r7, #4]
 803bb00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb04:	78fa      	ldrb	r2, [r7, #3]
 803bb06:	4611      	mov	r1, r2
 803bb08:	4618      	mov	r0, r3
 803bb0a:	f7f4 fd76 	bl	80305fa <HAL_PCD_EP_ClrStall>
 803bb0e:	4603      	mov	r3, r0
 803bb10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb12:	7bfb      	ldrb	r3, [r7, #15]
 803bb14:	4618      	mov	r0, r3
 803bb16:	f000 f8bf 	bl	803bc98 <USBD_Get_USB_Status>
 803bb1a:	4603      	mov	r3, r0
 803bb1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb1e:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb20:	4618      	mov	r0, r3
 803bb22:	3710      	adds	r7, #16
 803bb24:	46bd      	mov	sp, r7
 803bb26:	bd80      	pop	{r7, pc}

0803bb28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb28:	b480      	push	{r7}
 803bb2a:	b085      	sub	sp, #20
 803bb2c:	af00      	add	r7, sp, #0
 803bb2e:	6078      	str	r0, [r7, #4]
 803bb30:	460b      	mov	r3, r1
 803bb32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803bb34:	687b      	ldr	r3, [r7, #4]
 803bb36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803bb3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803bb40:	2b00      	cmp	r3, #0
 803bb42:	da0b      	bge.n	803bb5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803bb44:	78fb      	ldrb	r3, [r7, #3]
 803bb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bb4a:	68f9      	ldr	r1, [r7, #12]
 803bb4c:	4613      	mov	r3, r2
 803bb4e:	00db      	lsls	r3, r3, #3
 803bb50:	4413      	add	r3, r2
 803bb52:	009b      	lsls	r3, r3, #2
 803bb54:	440b      	add	r3, r1
 803bb56:	333e      	adds	r3, #62	; 0x3e
 803bb58:	781b      	ldrb	r3, [r3, #0]
 803bb5a:	e00b      	b.n	803bb74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803bb5c:	78fb      	ldrb	r3, [r7, #3]
 803bb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bb62:	68f9      	ldr	r1, [r7, #12]
 803bb64:	4613      	mov	r3, r2
 803bb66:	00db      	lsls	r3, r3, #3
 803bb68:	4413      	add	r3, r2
 803bb6a:	009b      	lsls	r3, r3, #2
 803bb6c:	440b      	add	r3, r1
 803bb6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803bb72:	781b      	ldrb	r3, [r3, #0]
  }
}
 803bb74:	4618      	mov	r0, r3
 803bb76:	3714      	adds	r7, #20
 803bb78:	46bd      	mov	sp, r7
 803bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb7e:	4770      	bx	lr

0803bb80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803bb80:	b580      	push	{r7, lr}
 803bb82:	b084      	sub	sp, #16
 803bb84:	af00      	add	r7, sp, #0
 803bb86:	6078      	str	r0, [r7, #4]
 803bb88:	460b      	mov	r3, r1
 803bb8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb8c:	2300      	movs	r3, #0
 803bb8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb90:	2300      	movs	r3, #0
 803bb92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803bb94:	687b      	ldr	r3, [r7, #4]
 803bb96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb9a:	78fa      	ldrb	r2, [r7, #3]
 803bb9c:	4611      	mov	r1, r2
 803bb9e:	4618      	mov	r0, r3
 803bba0:	f7f4 fb43 	bl	803022a <HAL_PCD_SetAddress>
 803bba4:	4603      	mov	r3, r0
 803bba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bba8:	7bfb      	ldrb	r3, [r7, #15]
 803bbaa:	4618      	mov	r0, r3
 803bbac:	f000 f874 	bl	803bc98 <USBD_Get_USB_Status>
 803bbb0:	4603      	mov	r3, r0
 803bbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 803bbb6:	4618      	mov	r0, r3
 803bbb8:	3710      	adds	r7, #16
 803bbba:	46bd      	mov	sp, r7
 803bbbc:	bd80      	pop	{r7, pc}

0803bbbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bbbe:	b580      	push	{r7, lr}
 803bbc0:	b086      	sub	sp, #24
 803bbc2:	af00      	add	r7, sp, #0
 803bbc4:	60f8      	str	r0, [r7, #12]
 803bbc6:	607a      	str	r2, [r7, #4]
 803bbc8:	603b      	str	r3, [r7, #0]
 803bbca:	460b      	mov	r3, r1
 803bbcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bbce:	2300      	movs	r3, #0
 803bbd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bbd2:	2300      	movs	r3, #0
 803bbd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803bbd6:	68fb      	ldr	r3, [r7, #12]
 803bbd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bbdc:	7af9      	ldrb	r1, [r7, #11]
 803bbde:	683b      	ldr	r3, [r7, #0]
 803bbe0:	687a      	ldr	r2, [r7, #4]
 803bbe2:	f7f4 fc5c 	bl	803049e <HAL_PCD_EP_Transmit>
 803bbe6:	4603      	mov	r3, r0
 803bbe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bbea:	7dfb      	ldrb	r3, [r7, #23]
 803bbec:	4618      	mov	r0, r3
 803bbee:	f000 f853 	bl	803bc98 <USBD_Get_USB_Status>
 803bbf2:	4603      	mov	r3, r0
 803bbf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bbf6:	7dbb      	ldrb	r3, [r7, #22]
}
 803bbf8:	4618      	mov	r0, r3
 803bbfa:	3718      	adds	r7, #24
 803bbfc:	46bd      	mov	sp, r7
 803bbfe:	bd80      	pop	{r7, pc}

0803bc00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bc00:	b580      	push	{r7, lr}
 803bc02:	b086      	sub	sp, #24
 803bc04:	af00      	add	r7, sp, #0
 803bc06:	60f8      	str	r0, [r7, #12]
 803bc08:	607a      	str	r2, [r7, #4]
 803bc0a:	603b      	str	r3, [r7, #0]
 803bc0c:	460b      	mov	r3, r1
 803bc0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bc10:	2300      	movs	r3, #0
 803bc12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc14:	2300      	movs	r3, #0
 803bc16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803bc18:	68fb      	ldr	r3, [r7, #12]
 803bc1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bc1e:	7af9      	ldrb	r1, [r7, #11]
 803bc20:	683b      	ldr	r3, [r7, #0]
 803bc22:	687a      	ldr	r2, [r7, #4]
 803bc24:	f7f4 fbd8 	bl	80303d8 <HAL_PCD_EP_Receive>
 803bc28:	4603      	mov	r3, r0
 803bc2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc2c:	7dfb      	ldrb	r3, [r7, #23]
 803bc2e:	4618      	mov	r0, r3
 803bc30:	f000 f832 	bl	803bc98 <USBD_Get_USB_Status>
 803bc34:	4603      	mov	r3, r0
 803bc36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bc38:	7dbb      	ldrb	r3, [r7, #22]
}
 803bc3a:	4618      	mov	r0, r3
 803bc3c:	3718      	adds	r7, #24
 803bc3e:	46bd      	mov	sp, r7
 803bc40:	bd80      	pop	{r7, pc}

0803bc42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bc42:	b580      	push	{r7, lr}
 803bc44:	b082      	sub	sp, #8
 803bc46:	af00      	add	r7, sp, #0
 803bc48:	6078      	str	r0, [r7, #4]
 803bc4a:	460b      	mov	r3, r1
 803bc4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803bc4e:	687b      	ldr	r3, [r7, #4]
 803bc50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bc54:	78fa      	ldrb	r2, [r7, #3]
 803bc56:	4611      	mov	r1, r2
 803bc58:	4618      	mov	r0, r3
 803bc5a:	f7f4 fc08 	bl	803046e <HAL_PCD_EP_GetRxCount>
 803bc5e:	4603      	mov	r3, r0
}
 803bc60:	4618      	mov	r0, r3
 803bc62:	3708      	adds	r7, #8
 803bc64:	46bd      	mov	sp, r7
 803bc66:	bd80      	pop	{r7, pc}

0803bc68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803bc68:	b480      	push	{r7}
 803bc6a:	b083      	sub	sp, #12
 803bc6c:	af00      	add	r7, sp, #0
 803bc6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803bc70:	4b03      	ldr	r3, [pc, #12]	; (803bc80 <USBD_static_malloc+0x18>)
}
 803bc72:	4618      	mov	r0, r3
 803bc74:	370c      	adds	r7, #12
 803bc76:	46bd      	mov	sp, r7
 803bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc7c:	4770      	bx	lr
 803bc7e:	bf00      	nop
 803bc80:	240265b4 	.word	0x240265b4

0803bc84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803bc84:	b480      	push	{r7}
 803bc86:	b083      	sub	sp, #12
 803bc88:	af00      	add	r7, sp, #0
 803bc8a:	6078      	str	r0, [r7, #4]

}
 803bc8c:	bf00      	nop
 803bc8e:	370c      	adds	r7, #12
 803bc90:	46bd      	mov	sp, r7
 803bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc96:	4770      	bx	lr

0803bc98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803bc98:	b480      	push	{r7}
 803bc9a:	b085      	sub	sp, #20
 803bc9c:	af00      	add	r7, sp, #0
 803bc9e:	4603      	mov	r3, r0
 803bca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bca2:	2300      	movs	r3, #0
 803bca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803bca6:	79fb      	ldrb	r3, [r7, #7]
 803bca8:	2b03      	cmp	r3, #3
 803bcaa:	d817      	bhi.n	803bcdc <USBD_Get_USB_Status+0x44>
 803bcac:	a201      	add	r2, pc, #4	; (adr r2, 803bcb4 <USBD_Get_USB_Status+0x1c>)
 803bcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bcb2:	bf00      	nop
 803bcb4:	0803bcc5 	.word	0x0803bcc5
 803bcb8:	0803bccb 	.word	0x0803bccb
 803bcbc:	0803bcd1 	.word	0x0803bcd1
 803bcc0:	0803bcd7 	.word	0x0803bcd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803bcc4:	2300      	movs	r3, #0
 803bcc6:	73fb      	strb	r3, [r7, #15]
    break;
 803bcc8:	e00b      	b.n	803bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803bcca:	2303      	movs	r3, #3
 803bccc:	73fb      	strb	r3, [r7, #15]
    break;
 803bcce:	e008      	b.n	803bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803bcd0:	2301      	movs	r3, #1
 803bcd2:	73fb      	strb	r3, [r7, #15]
    break;
 803bcd4:	e005      	b.n	803bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803bcd6:	2303      	movs	r3, #3
 803bcd8:	73fb      	strb	r3, [r7, #15]
    break;
 803bcda:	e002      	b.n	803bce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803bcdc:	2303      	movs	r3, #3
 803bcde:	73fb      	strb	r3, [r7, #15]
    break;
 803bce0:	bf00      	nop
  }
  return usb_status;
 803bce2:	7bfb      	ldrb	r3, [r7, #15]
}
 803bce4:	4618      	mov	r0, r3
 803bce6:	3714      	adds	r7, #20
 803bce8:	46bd      	mov	sp, r7
 803bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcee:	4770      	bx	lr

0803bcf0 <_ZdlPvj>:
 803bcf0:	f000 b817 	b.w	803bd22 <_ZdlPv>

0803bcf4 <_Znwj>:
 803bcf4:	2801      	cmp	r0, #1
 803bcf6:	bf38      	it	cc
 803bcf8:	2001      	movcc	r0, #1
 803bcfa:	b510      	push	{r4, lr}
 803bcfc:	4604      	mov	r4, r0
 803bcfe:	4620      	mov	r0, r4
 803bd00:	f000 f87c 	bl	803bdfc <malloc>
 803bd04:	b930      	cbnz	r0, 803bd14 <_Znwj+0x20>
 803bd06:	f000 f80f 	bl	803bd28 <_ZSt15get_new_handlerv>
 803bd0a:	b908      	cbnz	r0, 803bd10 <_Znwj+0x1c>
 803bd0c:	f000 f814 	bl	803bd38 <abort>
 803bd10:	4780      	blx	r0
 803bd12:	e7f4      	b.n	803bcfe <_Znwj+0xa>
 803bd14:	bd10      	pop	{r4, pc}

0803bd16 <_ZSt17__throw_bad_allocv>:
 803bd16:	b508      	push	{r3, lr}
 803bd18:	f000 f80e 	bl	803bd38 <abort>

0803bd1c <_ZSt20__throw_length_errorPKc>:
 803bd1c:	b508      	push	{r3, lr}
 803bd1e:	f000 f80b 	bl	803bd38 <abort>

0803bd22 <_ZdlPv>:
 803bd22:	f000 b873 	b.w	803be0c <free>
	...

0803bd28 <_ZSt15get_new_handlerv>:
 803bd28:	4b02      	ldr	r3, [pc, #8]	; (803bd34 <_ZSt15get_new_handlerv+0xc>)
 803bd2a:	6818      	ldr	r0, [r3, #0]
 803bd2c:	f3bf 8f5b 	dmb	ish
 803bd30:	4770      	bx	lr
 803bd32:	bf00      	nop
 803bd34:	240267d4 	.word	0x240267d4

0803bd38 <abort>:
 803bd38:	b508      	push	{r3, lr}
 803bd3a:	2006      	movs	r0, #6
 803bd3c:	f000 fca4 	bl	803c688 <raise>
 803bd40:	2001      	movs	r0, #1
 803bd42:	f7ee f90f 	bl	8029f64 <_exit>
	...

0803bd48 <__assert_func>:
 803bd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bd4a:	4614      	mov	r4, r2
 803bd4c:	461a      	mov	r2, r3
 803bd4e:	4b09      	ldr	r3, [pc, #36]	; (803bd74 <__assert_func+0x2c>)
 803bd50:	681b      	ldr	r3, [r3, #0]
 803bd52:	4605      	mov	r5, r0
 803bd54:	68d8      	ldr	r0, [r3, #12]
 803bd56:	b14c      	cbz	r4, 803bd6c <__assert_func+0x24>
 803bd58:	4b07      	ldr	r3, [pc, #28]	; (803bd78 <__assert_func+0x30>)
 803bd5a:	9100      	str	r1, [sp, #0]
 803bd5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bd60:	4906      	ldr	r1, [pc, #24]	; (803bd7c <__assert_func+0x34>)
 803bd62:	462b      	mov	r3, r5
 803bd64:	f000 f814 	bl	803bd90 <fiprintf>
 803bd68:	f7ff ffe6 	bl	803bd38 <abort>
 803bd6c:	4b04      	ldr	r3, [pc, #16]	; (803bd80 <__assert_func+0x38>)
 803bd6e:	461c      	mov	r4, r3
 803bd70:	e7f3      	b.n	803bd5a <__assert_func+0x12>
 803bd72:	bf00      	nop
 803bd74:	24000104 	.word	0x24000104
 803bd78:	08058548 	.word	0x08058548
 803bd7c:	08058555 	.word	0x08058555
 803bd80:	08058583 	.word	0x08058583

0803bd84 <__errno>:
 803bd84:	4b01      	ldr	r3, [pc, #4]	; (803bd8c <__errno+0x8>)
 803bd86:	6818      	ldr	r0, [r3, #0]
 803bd88:	4770      	bx	lr
 803bd8a:	bf00      	nop
 803bd8c:	24000104 	.word	0x24000104

0803bd90 <fiprintf>:
 803bd90:	b40e      	push	{r1, r2, r3}
 803bd92:	b503      	push	{r0, r1, lr}
 803bd94:	4601      	mov	r1, r0
 803bd96:	ab03      	add	r3, sp, #12
 803bd98:	4805      	ldr	r0, [pc, #20]	; (803bdb0 <fiprintf+0x20>)
 803bd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 803bd9e:	6800      	ldr	r0, [r0, #0]
 803bda0:	9301      	str	r3, [sp, #4]
 803bda2:	f000 f975 	bl	803c090 <_vfiprintf_r>
 803bda6:	b002      	add	sp, #8
 803bda8:	f85d eb04 	ldr.w	lr, [sp], #4
 803bdac:	b003      	add	sp, #12
 803bdae:	4770      	bx	lr
 803bdb0:	24000104 	.word	0x24000104

0803bdb4 <__libc_init_array>:
 803bdb4:	b570      	push	{r4, r5, r6, lr}
 803bdb6:	4d0d      	ldr	r5, [pc, #52]	; (803bdec <__libc_init_array+0x38>)
 803bdb8:	4c0d      	ldr	r4, [pc, #52]	; (803bdf0 <__libc_init_array+0x3c>)
 803bdba:	1b64      	subs	r4, r4, r5
 803bdbc:	10a4      	asrs	r4, r4, #2
 803bdbe:	2600      	movs	r6, #0
 803bdc0:	42a6      	cmp	r6, r4
 803bdc2:	d109      	bne.n	803bdd8 <__libc_init_array+0x24>
 803bdc4:	4d0b      	ldr	r5, [pc, #44]	; (803bdf4 <__libc_init_array+0x40>)
 803bdc6:	4c0c      	ldr	r4, [pc, #48]	; (803bdf8 <__libc_init_array+0x44>)
 803bdc8:	f001 f812 	bl	803cdf0 <_init>
 803bdcc:	1b64      	subs	r4, r4, r5
 803bdce:	10a4      	asrs	r4, r4, #2
 803bdd0:	2600      	movs	r6, #0
 803bdd2:	42a6      	cmp	r6, r4
 803bdd4:	d105      	bne.n	803bde2 <__libc_init_array+0x2e>
 803bdd6:	bd70      	pop	{r4, r5, r6, pc}
 803bdd8:	f855 3b04 	ldr.w	r3, [r5], #4
 803bddc:	4798      	blx	r3
 803bdde:	3601      	adds	r6, #1
 803bde0:	e7ee      	b.n	803bdc0 <__libc_init_array+0xc>
 803bde2:	f855 3b04 	ldr.w	r3, [r5], #4
 803bde6:	4798      	blx	r3
 803bde8:	3601      	adds	r6, #1
 803bdea:	e7f2      	b.n	803bdd2 <__libc_init_array+0x1e>
 803bdec:	08058624 	.word	0x08058624
 803bdf0:	08058624 	.word	0x08058624
 803bdf4:	08058624 	.word	0x08058624
 803bdf8:	0805862c 	.word	0x0805862c

0803bdfc <malloc>:
 803bdfc:	4b02      	ldr	r3, [pc, #8]	; (803be08 <malloc+0xc>)
 803bdfe:	4601      	mov	r1, r0
 803be00:	6818      	ldr	r0, [r3, #0]
 803be02:	f000 b8a7 	b.w	803bf54 <_malloc_r>
 803be06:	bf00      	nop
 803be08:	24000104 	.word	0x24000104

0803be0c <free>:
 803be0c:	4b02      	ldr	r3, [pc, #8]	; (803be18 <free+0xc>)
 803be0e:	4601      	mov	r1, r0
 803be10:	6818      	ldr	r0, [r3, #0]
 803be12:	f000 b833 	b.w	803be7c <_free_r>
 803be16:	bf00      	nop
 803be18:	24000104 	.word	0x24000104

0803be1c <memcpy>:
 803be1c:	440a      	add	r2, r1
 803be1e:	4291      	cmp	r1, r2
 803be20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803be24:	d100      	bne.n	803be28 <memcpy+0xc>
 803be26:	4770      	bx	lr
 803be28:	b510      	push	{r4, lr}
 803be2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 803be2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 803be32:	4291      	cmp	r1, r2
 803be34:	d1f9      	bne.n	803be2a <memcpy+0xe>
 803be36:	bd10      	pop	{r4, pc}

0803be38 <memmove>:
 803be38:	4288      	cmp	r0, r1
 803be3a:	b510      	push	{r4, lr}
 803be3c:	eb01 0402 	add.w	r4, r1, r2
 803be40:	d902      	bls.n	803be48 <memmove+0x10>
 803be42:	4284      	cmp	r4, r0
 803be44:	4623      	mov	r3, r4
 803be46:	d807      	bhi.n	803be58 <memmove+0x20>
 803be48:	1e43      	subs	r3, r0, #1
 803be4a:	42a1      	cmp	r1, r4
 803be4c:	d008      	beq.n	803be60 <memmove+0x28>
 803be4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 803be52:	f803 2f01 	strb.w	r2, [r3, #1]!
 803be56:	e7f8      	b.n	803be4a <memmove+0x12>
 803be58:	4402      	add	r2, r0
 803be5a:	4601      	mov	r1, r0
 803be5c:	428a      	cmp	r2, r1
 803be5e:	d100      	bne.n	803be62 <memmove+0x2a>
 803be60:	bd10      	pop	{r4, pc}
 803be62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803be66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803be6a:	e7f7      	b.n	803be5c <memmove+0x24>

0803be6c <memset>:
 803be6c:	4402      	add	r2, r0
 803be6e:	4603      	mov	r3, r0
 803be70:	4293      	cmp	r3, r2
 803be72:	d100      	bne.n	803be76 <memset+0xa>
 803be74:	4770      	bx	lr
 803be76:	f803 1b01 	strb.w	r1, [r3], #1
 803be7a:	e7f9      	b.n	803be70 <memset+0x4>

0803be7c <_free_r>:
 803be7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803be7e:	2900      	cmp	r1, #0
 803be80:	d044      	beq.n	803bf0c <_free_r+0x90>
 803be82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803be86:	9001      	str	r0, [sp, #4]
 803be88:	2b00      	cmp	r3, #0
 803be8a:	f1a1 0404 	sub.w	r4, r1, #4
 803be8e:	bfb8      	it	lt
 803be90:	18e4      	addlt	r4, r4, r3
 803be92:	f000 fef5 	bl	803cc80 <__malloc_lock>
 803be96:	4a1e      	ldr	r2, [pc, #120]	; (803bf10 <_free_r+0x94>)
 803be98:	9801      	ldr	r0, [sp, #4]
 803be9a:	6813      	ldr	r3, [r2, #0]
 803be9c:	b933      	cbnz	r3, 803beac <_free_r+0x30>
 803be9e:	6063      	str	r3, [r4, #4]
 803bea0:	6014      	str	r4, [r2, #0]
 803bea2:	b003      	add	sp, #12
 803bea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803bea8:	f000 bef0 	b.w	803cc8c <__malloc_unlock>
 803beac:	42a3      	cmp	r3, r4
 803beae:	d908      	bls.n	803bec2 <_free_r+0x46>
 803beb0:	6825      	ldr	r5, [r4, #0]
 803beb2:	1961      	adds	r1, r4, r5
 803beb4:	428b      	cmp	r3, r1
 803beb6:	bf01      	itttt	eq
 803beb8:	6819      	ldreq	r1, [r3, #0]
 803beba:	685b      	ldreq	r3, [r3, #4]
 803bebc:	1949      	addeq	r1, r1, r5
 803bebe:	6021      	streq	r1, [r4, #0]
 803bec0:	e7ed      	b.n	803be9e <_free_r+0x22>
 803bec2:	461a      	mov	r2, r3
 803bec4:	685b      	ldr	r3, [r3, #4]
 803bec6:	b10b      	cbz	r3, 803becc <_free_r+0x50>
 803bec8:	42a3      	cmp	r3, r4
 803beca:	d9fa      	bls.n	803bec2 <_free_r+0x46>
 803becc:	6811      	ldr	r1, [r2, #0]
 803bece:	1855      	adds	r5, r2, r1
 803bed0:	42a5      	cmp	r5, r4
 803bed2:	d10b      	bne.n	803beec <_free_r+0x70>
 803bed4:	6824      	ldr	r4, [r4, #0]
 803bed6:	4421      	add	r1, r4
 803bed8:	1854      	adds	r4, r2, r1
 803beda:	42a3      	cmp	r3, r4
 803bedc:	6011      	str	r1, [r2, #0]
 803bede:	d1e0      	bne.n	803bea2 <_free_r+0x26>
 803bee0:	681c      	ldr	r4, [r3, #0]
 803bee2:	685b      	ldr	r3, [r3, #4]
 803bee4:	6053      	str	r3, [r2, #4]
 803bee6:	4421      	add	r1, r4
 803bee8:	6011      	str	r1, [r2, #0]
 803beea:	e7da      	b.n	803bea2 <_free_r+0x26>
 803beec:	d902      	bls.n	803bef4 <_free_r+0x78>
 803beee:	230c      	movs	r3, #12
 803bef0:	6003      	str	r3, [r0, #0]
 803bef2:	e7d6      	b.n	803bea2 <_free_r+0x26>
 803bef4:	6825      	ldr	r5, [r4, #0]
 803bef6:	1961      	adds	r1, r4, r5
 803bef8:	428b      	cmp	r3, r1
 803befa:	bf04      	itt	eq
 803befc:	6819      	ldreq	r1, [r3, #0]
 803befe:	685b      	ldreq	r3, [r3, #4]
 803bf00:	6063      	str	r3, [r4, #4]
 803bf02:	bf04      	itt	eq
 803bf04:	1949      	addeq	r1, r1, r5
 803bf06:	6021      	streq	r1, [r4, #0]
 803bf08:	6054      	str	r4, [r2, #4]
 803bf0a:	e7ca      	b.n	803bea2 <_free_r+0x26>
 803bf0c:	b003      	add	sp, #12
 803bf0e:	bd30      	pop	{r4, r5, pc}
 803bf10:	240267d8 	.word	0x240267d8

0803bf14 <sbrk_aligned>:
 803bf14:	b570      	push	{r4, r5, r6, lr}
 803bf16:	4e0e      	ldr	r6, [pc, #56]	; (803bf50 <sbrk_aligned+0x3c>)
 803bf18:	460c      	mov	r4, r1
 803bf1a:	6831      	ldr	r1, [r6, #0]
 803bf1c:	4605      	mov	r5, r0
 803bf1e:	b911      	cbnz	r1, 803bf26 <sbrk_aligned+0x12>
 803bf20:	f000 fb7a 	bl	803c618 <_sbrk_r>
 803bf24:	6030      	str	r0, [r6, #0]
 803bf26:	4621      	mov	r1, r4
 803bf28:	4628      	mov	r0, r5
 803bf2a:	f000 fb75 	bl	803c618 <_sbrk_r>
 803bf2e:	1c43      	adds	r3, r0, #1
 803bf30:	d00a      	beq.n	803bf48 <sbrk_aligned+0x34>
 803bf32:	1cc4      	adds	r4, r0, #3
 803bf34:	f024 0403 	bic.w	r4, r4, #3
 803bf38:	42a0      	cmp	r0, r4
 803bf3a:	d007      	beq.n	803bf4c <sbrk_aligned+0x38>
 803bf3c:	1a21      	subs	r1, r4, r0
 803bf3e:	4628      	mov	r0, r5
 803bf40:	f000 fb6a 	bl	803c618 <_sbrk_r>
 803bf44:	3001      	adds	r0, #1
 803bf46:	d101      	bne.n	803bf4c <sbrk_aligned+0x38>
 803bf48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bf4c:	4620      	mov	r0, r4
 803bf4e:	bd70      	pop	{r4, r5, r6, pc}
 803bf50:	240267dc 	.word	0x240267dc

0803bf54 <_malloc_r>:
 803bf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bf58:	1ccd      	adds	r5, r1, #3
 803bf5a:	f025 0503 	bic.w	r5, r5, #3
 803bf5e:	3508      	adds	r5, #8
 803bf60:	2d0c      	cmp	r5, #12
 803bf62:	bf38      	it	cc
 803bf64:	250c      	movcc	r5, #12
 803bf66:	2d00      	cmp	r5, #0
 803bf68:	4607      	mov	r7, r0
 803bf6a:	db01      	blt.n	803bf70 <_malloc_r+0x1c>
 803bf6c:	42a9      	cmp	r1, r5
 803bf6e:	d905      	bls.n	803bf7c <_malloc_r+0x28>
 803bf70:	230c      	movs	r3, #12
 803bf72:	603b      	str	r3, [r7, #0]
 803bf74:	2600      	movs	r6, #0
 803bf76:	4630      	mov	r0, r6
 803bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bf7c:	4e2e      	ldr	r6, [pc, #184]	; (803c038 <_malloc_r+0xe4>)
 803bf7e:	f000 fe7f 	bl	803cc80 <__malloc_lock>
 803bf82:	6833      	ldr	r3, [r6, #0]
 803bf84:	461c      	mov	r4, r3
 803bf86:	bb34      	cbnz	r4, 803bfd6 <_malloc_r+0x82>
 803bf88:	4629      	mov	r1, r5
 803bf8a:	4638      	mov	r0, r7
 803bf8c:	f7ff ffc2 	bl	803bf14 <sbrk_aligned>
 803bf90:	1c43      	adds	r3, r0, #1
 803bf92:	4604      	mov	r4, r0
 803bf94:	d14d      	bne.n	803c032 <_malloc_r+0xde>
 803bf96:	6834      	ldr	r4, [r6, #0]
 803bf98:	4626      	mov	r6, r4
 803bf9a:	2e00      	cmp	r6, #0
 803bf9c:	d140      	bne.n	803c020 <_malloc_r+0xcc>
 803bf9e:	6823      	ldr	r3, [r4, #0]
 803bfa0:	4631      	mov	r1, r6
 803bfa2:	4638      	mov	r0, r7
 803bfa4:	eb04 0803 	add.w	r8, r4, r3
 803bfa8:	f000 fb36 	bl	803c618 <_sbrk_r>
 803bfac:	4580      	cmp	r8, r0
 803bfae:	d13a      	bne.n	803c026 <_malloc_r+0xd2>
 803bfb0:	6821      	ldr	r1, [r4, #0]
 803bfb2:	3503      	adds	r5, #3
 803bfb4:	1a6d      	subs	r5, r5, r1
 803bfb6:	f025 0503 	bic.w	r5, r5, #3
 803bfba:	3508      	adds	r5, #8
 803bfbc:	2d0c      	cmp	r5, #12
 803bfbe:	bf38      	it	cc
 803bfc0:	250c      	movcc	r5, #12
 803bfc2:	4629      	mov	r1, r5
 803bfc4:	4638      	mov	r0, r7
 803bfc6:	f7ff ffa5 	bl	803bf14 <sbrk_aligned>
 803bfca:	3001      	adds	r0, #1
 803bfcc:	d02b      	beq.n	803c026 <_malloc_r+0xd2>
 803bfce:	6823      	ldr	r3, [r4, #0]
 803bfd0:	442b      	add	r3, r5
 803bfd2:	6023      	str	r3, [r4, #0]
 803bfd4:	e00e      	b.n	803bff4 <_malloc_r+0xa0>
 803bfd6:	6822      	ldr	r2, [r4, #0]
 803bfd8:	1b52      	subs	r2, r2, r5
 803bfda:	d41e      	bmi.n	803c01a <_malloc_r+0xc6>
 803bfdc:	2a0b      	cmp	r2, #11
 803bfde:	d916      	bls.n	803c00e <_malloc_r+0xba>
 803bfe0:	1961      	adds	r1, r4, r5
 803bfe2:	42a3      	cmp	r3, r4
 803bfe4:	6025      	str	r5, [r4, #0]
 803bfe6:	bf18      	it	ne
 803bfe8:	6059      	strne	r1, [r3, #4]
 803bfea:	6863      	ldr	r3, [r4, #4]
 803bfec:	bf08      	it	eq
 803bfee:	6031      	streq	r1, [r6, #0]
 803bff0:	5162      	str	r2, [r4, r5]
 803bff2:	604b      	str	r3, [r1, #4]
 803bff4:	4638      	mov	r0, r7
 803bff6:	f104 060b 	add.w	r6, r4, #11
 803bffa:	f000 fe47 	bl	803cc8c <__malloc_unlock>
 803bffe:	f026 0607 	bic.w	r6, r6, #7
 803c002:	1d23      	adds	r3, r4, #4
 803c004:	1af2      	subs	r2, r6, r3
 803c006:	d0b6      	beq.n	803bf76 <_malloc_r+0x22>
 803c008:	1b9b      	subs	r3, r3, r6
 803c00a:	50a3      	str	r3, [r4, r2]
 803c00c:	e7b3      	b.n	803bf76 <_malloc_r+0x22>
 803c00e:	6862      	ldr	r2, [r4, #4]
 803c010:	42a3      	cmp	r3, r4
 803c012:	bf0c      	ite	eq
 803c014:	6032      	streq	r2, [r6, #0]
 803c016:	605a      	strne	r2, [r3, #4]
 803c018:	e7ec      	b.n	803bff4 <_malloc_r+0xa0>
 803c01a:	4623      	mov	r3, r4
 803c01c:	6864      	ldr	r4, [r4, #4]
 803c01e:	e7b2      	b.n	803bf86 <_malloc_r+0x32>
 803c020:	4634      	mov	r4, r6
 803c022:	6876      	ldr	r6, [r6, #4]
 803c024:	e7b9      	b.n	803bf9a <_malloc_r+0x46>
 803c026:	230c      	movs	r3, #12
 803c028:	603b      	str	r3, [r7, #0]
 803c02a:	4638      	mov	r0, r7
 803c02c:	f000 fe2e 	bl	803cc8c <__malloc_unlock>
 803c030:	e7a1      	b.n	803bf76 <_malloc_r+0x22>
 803c032:	6025      	str	r5, [r4, #0]
 803c034:	e7de      	b.n	803bff4 <_malloc_r+0xa0>
 803c036:	bf00      	nop
 803c038:	240267d8 	.word	0x240267d8

0803c03c <__sfputc_r>:
 803c03c:	6893      	ldr	r3, [r2, #8]
 803c03e:	3b01      	subs	r3, #1
 803c040:	2b00      	cmp	r3, #0
 803c042:	b410      	push	{r4}
 803c044:	6093      	str	r3, [r2, #8]
 803c046:	da08      	bge.n	803c05a <__sfputc_r+0x1e>
 803c048:	6994      	ldr	r4, [r2, #24]
 803c04a:	42a3      	cmp	r3, r4
 803c04c:	db01      	blt.n	803c052 <__sfputc_r+0x16>
 803c04e:	290a      	cmp	r1, #10
 803c050:	d103      	bne.n	803c05a <__sfputc_r+0x1e>
 803c052:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c056:	f000 bb33 	b.w	803c6c0 <__swbuf_r>
 803c05a:	6813      	ldr	r3, [r2, #0]
 803c05c:	1c58      	adds	r0, r3, #1
 803c05e:	6010      	str	r0, [r2, #0]
 803c060:	7019      	strb	r1, [r3, #0]
 803c062:	4608      	mov	r0, r1
 803c064:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c068:	4770      	bx	lr

0803c06a <__sfputs_r>:
 803c06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c06c:	4606      	mov	r6, r0
 803c06e:	460f      	mov	r7, r1
 803c070:	4614      	mov	r4, r2
 803c072:	18d5      	adds	r5, r2, r3
 803c074:	42ac      	cmp	r4, r5
 803c076:	d101      	bne.n	803c07c <__sfputs_r+0x12>
 803c078:	2000      	movs	r0, #0
 803c07a:	e007      	b.n	803c08c <__sfputs_r+0x22>
 803c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c080:	463a      	mov	r2, r7
 803c082:	4630      	mov	r0, r6
 803c084:	f7ff ffda 	bl	803c03c <__sfputc_r>
 803c088:	1c43      	adds	r3, r0, #1
 803c08a:	d1f3      	bne.n	803c074 <__sfputs_r+0xa>
 803c08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803c090 <_vfiprintf_r>:
 803c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c094:	460d      	mov	r5, r1
 803c096:	b09d      	sub	sp, #116	; 0x74
 803c098:	4614      	mov	r4, r2
 803c09a:	4698      	mov	r8, r3
 803c09c:	4606      	mov	r6, r0
 803c09e:	b118      	cbz	r0, 803c0a8 <_vfiprintf_r+0x18>
 803c0a0:	6983      	ldr	r3, [r0, #24]
 803c0a2:	b90b      	cbnz	r3, 803c0a8 <_vfiprintf_r+0x18>
 803c0a4:	f000 fce6 	bl	803ca74 <__sinit>
 803c0a8:	4b89      	ldr	r3, [pc, #548]	; (803c2d0 <_vfiprintf_r+0x240>)
 803c0aa:	429d      	cmp	r5, r3
 803c0ac:	d11b      	bne.n	803c0e6 <_vfiprintf_r+0x56>
 803c0ae:	6875      	ldr	r5, [r6, #4]
 803c0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c0b2:	07d9      	lsls	r1, r3, #31
 803c0b4:	d405      	bmi.n	803c0c2 <_vfiprintf_r+0x32>
 803c0b6:	89ab      	ldrh	r3, [r5, #12]
 803c0b8:	059a      	lsls	r2, r3, #22
 803c0ba:	d402      	bmi.n	803c0c2 <_vfiprintf_r+0x32>
 803c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c0be:	f000 fd77 	bl	803cbb0 <__retarget_lock_acquire_recursive>
 803c0c2:	89ab      	ldrh	r3, [r5, #12]
 803c0c4:	071b      	lsls	r3, r3, #28
 803c0c6:	d501      	bpl.n	803c0cc <_vfiprintf_r+0x3c>
 803c0c8:	692b      	ldr	r3, [r5, #16]
 803c0ca:	b9eb      	cbnz	r3, 803c108 <_vfiprintf_r+0x78>
 803c0cc:	4629      	mov	r1, r5
 803c0ce:	4630      	mov	r0, r6
 803c0d0:	f000 fb48 	bl	803c764 <__swsetup_r>
 803c0d4:	b1c0      	cbz	r0, 803c108 <_vfiprintf_r+0x78>
 803c0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c0d8:	07dc      	lsls	r4, r3, #31
 803c0da:	d50e      	bpl.n	803c0fa <_vfiprintf_r+0x6a>
 803c0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c0e0:	b01d      	add	sp, #116	; 0x74
 803c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c0e6:	4b7b      	ldr	r3, [pc, #492]	; (803c2d4 <_vfiprintf_r+0x244>)
 803c0e8:	429d      	cmp	r5, r3
 803c0ea:	d101      	bne.n	803c0f0 <_vfiprintf_r+0x60>
 803c0ec:	68b5      	ldr	r5, [r6, #8]
 803c0ee:	e7df      	b.n	803c0b0 <_vfiprintf_r+0x20>
 803c0f0:	4b79      	ldr	r3, [pc, #484]	; (803c2d8 <_vfiprintf_r+0x248>)
 803c0f2:	429d      	cmp	r5, r3
 803c0f4:	bf08      	it	eq
 803c0f6:	68f5      	ldreq	r5, [r6, #12]
 803c0f8:	e7da      	b.n	803c0b0 <_vfiprintf_r+0x20>
 803c0fa:	89ab      	ldrh	r3, [r5, #12]
 803c0fc:	0598      	lsls	r0, r3, #22
 803c0fe:	d4ed      	bmi.n	803c0dc <_vfiprintf_r+0x4c>
 803c100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c102:	f000 fd56 	bl	803cbb2 <__retarget_lock_release_recursive>
 803c106:	e7e9      	b.n	803c0dc <_vfiprintf_r+0x4c>
 803c108:	2300      	movs	r3, #0
 803c10a:	9309      	str	r3, [sp, #36]	; 0x24
 803c10c:	2320      	movs	r3, #32
 803c10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803c112:	f8cd 800c 	str.w	r8, [sp, #12]
 803c116:	2330      	movs	r3, #48	; 0x30
 803c118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c2dc <_vfiprintf_r+0x24c>
 803c11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803c120:	f04f 0901 	mov.w	r9, #1
 803c124:	4623      	mov	r3, r4
 803c126:	469a      	mov	sl, r3
 803c128:	f813 2b01 	ldrb.w	r2, [r3], #1
 803c12c:	b10a      	cbz	r2, 803c132 <_vfiprintf_r+0xa2>
 803c12e:	2a25      	cmp	r2, #37	; 0x25
 803c130:	d1f9      	bne.n	803c126 <_vfiprintf_r+0x96>
 803c132:	ebba 0b04 	subs.w	fp, sl, r4
 803c136:	d00b      	beq.n	803c150 <_vfiprintf_r+0xc0>
 803c138:	465b      	mov	r3, fp
 803c13a:	4622      	mov	r2, r4
 803c13c:	4629      	mov	r1, r5
 803c13e:	4630      	mov	r0, r6
 803c140:	f7ff ff93 	bl	803c06a <__sfputs_r>
 803c144:	3001      	adds	r0, #1
 803c146:	f000 80aa 	beq.w	803c29e <_vfiprintf_r+0x20e>
 803c14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803c14c:	445a      	add	r2, fp
 803c14e:	9209      	str	r2, [sp, #36]	; 0x24
 803c150:	f89a 3000 	ldrb.w	r3, [sl]
 803c154:	2b00      	cmp	r3, #0
 803c156:	f000 80a2 	beq.w	803c29e <_vfiprintf_r+0x20e>
 803c15a:	2300      	movs	r3, #0
 803c15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803c160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803c164:	f10a 0a01 	add.w	sl, sl, #1
 803c168:	9304      	str	r3, [sp, #16]
 803c16a:	9307      	str	r3, [sp, #28]
 803c16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803c170:	931a      	str	r3, [sp, #104]	; 0x68
 803c172:	4654      	mov	r4, sl
 803c174:	2205      	movs	r2, #5
 803c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c17a:	4858      	ldr	r0, [pc, #352]	; (803c2dc <_vfiprintf_r+0x24c>)
 803c17c:	f7e4 f8b0 	bl	80202e0 <memchr>
 803c180:	9a04      	ldr	r2, [sp, #16]
 803c182:	b9d8      	cbnz	r0, 803c1bc <_vfiprintf_r+0x12c>
 803c184:	06d1      	lsls	r1, r2, #27
 803c186:	bf44      	itt	mi
 803c188:	2320      	movmi	r3, #32
 803c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c18e:	0713      	lsls	r3, r2, #28
 803c190:	bf44      	itt	mi
 803c192:	232b      	movmi	r3, #43	; 0x2b
 803c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c198:	f89a 3000 	ldrb.w	r3, [sl]
 803c19c:	2b2a      	cmp	r3, #42	; 0x2a
 803c19e:	d015      	beq.n	803c1cc <_vfiprintf_r+0x13c>
 803c1a0:	9a07      	ldr	r2, [sp, #28]
 803c1a2:	4654      	mov	r4, sl
 803c1a4:	2000      	movs	r0, #0
 803c1a6:	f04f 0c0a 	mov.w	ip, #10
 803c1aa:	4621      	mov	r1, r4
 803c1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 803c1b0:	3b30      	subs	r3, #48	; 0x30
 803c1b2:	2b09      	cmp	r3, #9
 803c1b4:	d94e      	bls.n	803c254 <_vfiprintf_r+0x1c4>
 803c1b6:	b1b0      	cbz	r0, 803c1e6 <_vfiprintf_r+0x156>
 803c1b8:	9207      	str	r2, [sp, #28]
 803c1ba:	e014      	b.n	803c1e6 <_vfiprintf_r+0x156>
 803c1bc:	eba0 0308 	sub.w	r3, r0, r8
 803c1c0:	fa09 f303 	lsl.w	r3, r9, r3
 803c1c4:	4313      	orrs	r3, r2
 803c1c6:	9304      	str	r3, [sp, #16]
 803c1c8:	46a2      	mov	sl, r4
 803c1ca:	e7d2      	b.n	803c172 <_vfiprintf_r+0xe2>
 803c1cc:	9b03      	ldr	r3, [sp, #12]
 803c1ce:	1d19      	adds	r1, r3, #4
 803c1d0:	681b      	ldr	r3, [r3, #0]
 803c1d2:	9103      	str	r1, [sp, #12]
 803c1d4:	2b00      	cmp	r3, #0
 803c1d6:	bfbb      	ittet	lt
 803c1d8:	425b      	neglt	r3, r3
 803c1da:	f042 0202 	orrlt.w	r2, r2, #2
 803c1de:	9307      	strge	r3, [sp, #28]
 803c1e0:	9307      	strlt	r3, [sp, #28]
 803c1e2:	bfb8      	it	lt
 803c1e4:	9204      	strlt	r2, [sp, #16]
 803c1e6:	7823      	ldrb	r3, [r4, #0]
 803c1e8:	2b2e      	cmp	r3, #46	; 0x2e
 803c1ea:	d10c      	bne.n	803c206 <_vfiprintf_r+0x176>
 803c1ec:	7863      	ldrb	r3, [r4, #1]
 803c1ee:	2b2a      	cmp	r3, #42	; 0x2a
 803c1f0:	d135      	bne.n	803c25e <_vfiprintf_r+0x1ce>
 803c1f2:	9b03      	ldr	r3, [sp, #12]
 803c1f4:	1d1a      	adds	r2, r3, #4
 803c1f6:	681b      	ldr	r3, [r3, #0]
 803c1f8:	9203      	str	r2, [sp, #12]
 803c1fa:	2b00      	cmp	r3, #0
 803c1fc:	bfb8      	it	lt
 803c1fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c202:	3402      	adds	r4, #2
 803c204:	9305      	str	r3, [sp, #20]
 803c206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c2ec <_vfiprintf_r+0x25c>
 803c20a:	7821      	ldrb	r1, [r4, #0]
 803c20c:	2203      	movs	r2, #3
 803c20e:	4650      	mov	r0, sl
 803c210:	f7e4 f866 	bl	80202e0 <memchr>
 803c214:	b140      	cbz	r0, 803c228 <_vfiprintf_r+0x198>
 803c216:	2340      	movs	r3, #64	; 0x40
 803c218:	eba0 000a 	sub.w	r0, r0, sl
 803c21c:	fa03 f000 	lsl.w	r0, r3, r0
 803c220:	9b04      	ldr	r3, [sp, #16]
 803c222:	4303      	orrs	r3, r0
 803c224:	3401      	adds	r4, #1
 803c226:	9304      	str	r3, [sp, #16]
 803c228:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c22c:	482c      	ldr	r0, [pc, #176]	; (803c2e0 <_vfiprintf_r+0x250>)
 803c22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c232:	2206      	movs	r2, #6
 803c234:	f7e4 f854 	bl	80202e0 <memchr>
 803c238:	2800      	cmp	r0, #0
 803c23a:	d03f      	beq.n	803c2bc <_vfiprintf_r+0x22c>
 803c23c:	4b29      	ldr	r3, [pc, #164]	; (803c2e4 <_vfiprintf_r+0x254>)
 803c23e:	bb1b      	cbnz	r3, 803c288 <_vfiprintf_r+0x1f8>
 803c240:	9b03      	ldr	r3, [sp, #12]
 803c242:	3307      	adds	r3, #7
 803c244:	f023 0307 	bic.w	r3, r3, #7
 803c248:	3308      	adds	r3, #8
 803c24a:	9303      	str	r3, [sp, #12]
 803c24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c24e:	443b      	add	r3, r7
 803c250:	9309      	str	r3, [sp, #36]	; 0x24
 803c252:	e767      	b.n	803c124 <_vfiprintf_r+0x94>
 803c254:	fb0c 3202 	mla	r2, ip, r2, r3
 803c258:	460c      	mov	r4, r1
 803c25a:	2001      	movs	r0, #1
 803c25c:	e7a5      	b.n	803c1aa <_vfiprintf_r+0x11a>
 803c25e:	2300      	movs	r3, #0
 803c260:	3401      	adds	r4, #1
 803c262:	9305      	str	r3, [sp, #20]
 803c264:	4619      	mov	r1, r3
 803c266:	f04f 0c0a 	mov.w	ip, #10
 803c26a:	4620      	mov	r0, r4
 803c26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c270:	3a30      	subs	r2, #48	; 0x30
 803c272:	2a09      	cmp	r2, #9
 803c274:	d903      	bls.n	803c27e <_vfiprintf_r+0x1ee>
 803c276:	2b00      	cmp	r3, #0
 803c278:	d0c5      	beq.n	803c206 <_vfiprintf_r+0x176>
 803c27a:	9105      	str	r1, [sp, #20]
 803c27c:	e7c3      	b.n	803c206 <_vfiprintf_r+0x176>
 803c27e:	fb0c 2101 	mla	r1, ip, r1, r2
 803c282:	4604      	mov	r4, r0
 803c284:	2301      	movs	r3, #1
 803c286:	e7f0      	b.n	803c26a <_vfiprintf_r+0x1da>
 803c288:	ab03      	add	r3, sp, #12
 803c28a:	9300      	str	r3, [sp, #0]
 803c28c:	462a      	mov	r2, r5
 803c28e:	4b16      	ldr	r3, [pc, #88]	; (803c2e8 <_vfiprintf_r+0x258>)
 803c290:	a904      	add	r1, sp, #16
 803c292:	4630      	mov	r0, r6
 803c294:	f3af 8000 	nop.w
 803c298:	4607      	mov	r7, r0
 803c29a:	1c78      	adds	r0, r7, #1
 803c29c:	d1d6      	bne.n	803c24c <_vfiprintf_r+0x1bc>
 803c29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c2a0:	07d9      	lsls	r1, r3, #31
 803c2a2:	d405      	bmi.n	803c2b0 <_vfiprintf_r+0x220>
 803c2a4:	89ab      	ldrh	r3, [r5, #12]
 803c2a6:	059a      	lsls	r2, r3, #22
 803c2a8:	d402      	bmi.n	803c2b0 <_vfiprintf_r+0x220>
 803c2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c2ac:	f000 fc81 	bl	803cbb2 <__retarget_lock_release_recursive>
 803c2b0:	89ab      	ldrh	r3, [r5, #12]
 803c2b2:	065b      	lsls	r3, r3, #25
 803c2b4:	f53f af12 	bmi.w	803c0dc <_vfiprintf_r+0x4c>
 803c2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c2ba:	e711      	b.n	803c0e0 <_vfiprintf_r+0x50>
 803c2bc:	ab03      	add	r3, sp, #12
 803c2be:	9300      	str	r3, [sp, #0]
 803c2c0:	462a      	mov	r2, r5
 803c2c2:	4b09      	ldr	r3, [pc, #36]	; (803c2e8 <_vfiprintf_r+0x258>)
 803c2c4:	a904      	add	r1, sp, #16
 803c2c6:	4630      	mov	r0, r6
 803c2c8:	f000 f880 	bl	803c3cc <_printf_i>
 803c2cc:	e7e4      	b.n	803c298 <_vfiprintf_r+0x208>
 803c2ce:	bf00      	nop
 803c2d0:	080585dc 	.word	0x080585dc
 803c2d4:	080585fc 	.word	0x080585fc
 803c2d8:	080585bc 	.word	0x080585bc
 803c2dc:	08058588 	.word	0x08058588
 803c2e0:	08058592 	.word	0x08058592
 803c2e4:	00000000 	.word	0x00000000
 803c2e8:	0803c06b 	.word	0x0803c06b
 803c2ec:	0805858e 	.word	0x0805858e

0803c2f0 <_printf_common>:
 803c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c2f4:	4616      	mov	r6, r2
 803c2f6:	4699      	mov	r9, r3
 803c2f8:	688a      	ldr	r2, [r1, #8]
 803c2fa:	690b      	ldr	r3, [r1, #16]
 803c2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c300:	4293      	cmp	r3, r2
 803c302:	bfb8      	it	lt
 803c304:	4613      	movlt	r3, r2
 803c306:	6033      	str	r3, [r6, #0]
 803c308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c30c:	4607      	mov	r7, r0
 803c30e:	460c      	mov	r4, r1
 803c310:	b10a      	cbz	r2, 803c316 <_printf_common+0x26>
 803c312:	3301      	adds	r3, #1
 803c314:	6033      	str	r3, [r6, #0]
 803c316:	6823      	ldr	r3, [r4, #0]
 803c318:	0699      	lsls	r1, r3, #26
 803c31a:	bf42      	ittt	mi
 803c31c:	6833      	ldrmi	r3, [r6, #0]
 803c31e:	3302      	addmi	r3, #2
 803c320:	6033      	strmi	r3, [r6, #0]
 803c322:	6825      	ldr	r5, [r4, #0]
 803c324:	f015 0506 	ands.w	r5, r5, #6
 803c328:	d106      	bne.n	803c338 <_printf_common+0x48>
 803c32a:	f104 0a19 	add.w	sl, r4, #25
 803c32e:	68e3      	ldr	r3, [r4, #12]
 803c330:	6832      	ldr	r2, [r6, #0]
 803c332:	1a9b      	subs	r3, r3, r2
 803c334:	42ab      	cmp	r3, r5
 803c336:	dc26      	bgt.n	803c386 <_printf_common+0x96>
 803c338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c33c:	1e13      	subs	r3, r2, #0
 803c33e:	6822      	ldr	r2, [r4, #0]
 803c340:	bf18      	it	ne
 803c342:	2301      	movne	r3, #1
 803c344:	0692      	lsls	r2, r2, #26
 803c346:	d42b      	bmi.n	803c3a0 <_printf_common+0xb0>
 803c348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c34c:	4649      	mov	r1, r9
 803c34e:	4638      	mov	r0, r7
 803c350:	47c0      	blx	r8
 803c352:	3001      	adds	r0, #1
 803c354:	d01e      	beq.n	803c394 <_printf_common+0xa4>
 803c356:	6823      	ldr	r3, [r4, #0]
 803c358:	68e5      	ldr	r5, [r4, #12]
 803c35a:	6832      	ldr	r2, [r6, #0]
 803c35c:	f003 0306 	and.w	r3, r3, #6
 803c360:	2b04      	cmp	r3, #4
 803c362:	bf08      	it	eq
 803c364:	1aad      	subeq	r5, r5, r2
 803c366:	68a3      	ldr	r3, [r4, #8]
 803c368:	6922      	ldr	r2, [r4, #16]
 803c36a:	bf0c      	ite	eq
 803c36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c370:	2500      	movne	r5, #0
 803c372:	4293      	cmp	r3, r2
 803c374:	bfc4      	itt	gt
 803c376:	1a9b      	subgt	r3, r3, r2
 803c378:	18ed      	addgt	r5, r5, r3
 803c37a:	2600      	movs	r6, #0
 803c37c:	341a      	adds	r4, #26
 803c37e:	42b5      	cmp	r5, r6
 803c380:	d11a      	bne.n	803c3b8 <_printf_common+0xc8>
 803c382:	2000      	movs	r0, #0
 803c384:	e008      	b.n	803c398 <_printf_common+0xa8>
 803c386:	2301      	movs	r3, #1
 803c388:	4652      	mov	r2, sl
 803c38a:	4649      	mov	r1, r9
 803c38c:	4638      	mov	r0, r7
 803c38e:	47c0      	blx	r8
 803c390:	3001      	adds	r0, #1
 803c392:	d103      	bne.n	803c39c <_printf_common+0xac>
 803c394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c39c:	3501      	adds	r5, #1
 803c39e:	e7c6      	b.n	803c32e <_printf_common+0x3e>
 803c3a0:	18e1      	adds	r1, r4, r3
 803c3a2:	1c5a      	adds	r2, r3, #1
 803c3a4:	2030      	movs	r0, #48	; 0x30
 803c3a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c3aa:	4422      	add	r2, r4
 803c3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c3b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c3b4:	3302      	adds	r3, #2
 803c3b6:	e7c7      	b.n	803c348 <_printf_common+0x58>
 803c3b8:	2301      	movs	r3, #1
 803c3ba:	4622      	mov	r2, r4
 803c3bc:	4649      	mov	r1, r9
 803c3be:	4638      	mov	r0, r7
 803c3c0:	47c0      	blx	r8
 803c3c2:	3001      	adds	r0, #1
 803c3c4:	d0e6      	beq.n	803c394 <_printf_common+0xa4>
 803c3c6:	3601      	adds	r6, #1
 803c3c8:	e7d9      	b.n	803c37e <_printf_common+0x8e>
	...

0803c3cc <_printf_i>:
 803c3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c3d0:	7e0f      	ldrb	r7, [r1, #24]
 803c3d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c3d4:	2f78      	cmp	r7, #120	; 0x78
 803c3d6:	4691      	mov	r9, r2
 803c3d8:	4680      	mov	r8, r0
 803c3da:	460c      	mov	r4, r1
 803c3dc:	469a      	mov	sl, r3
 803c3de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c3e2:	d807      	bhi.n	803c3f4 <_printf_i+0x28>
 803c3e4:	2f62      	cmp	r7, #98	; 0x62
 803c3e6:	d80a      	bhi.n	803c3fe <_printf_i+0x32>
 803c3e8:	2f00      	cmp	r7, #0
 803c3ea:	f000 80d8 	beq.w	803c59e <_printf_i+0x1d2>
 803c3ee:	2f58      	cmp	r7, #88	; 0x58
 803c3f0:	f000 80a3 	beq.w	803c53a <_printf_i+0x16e>
 803c3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c3f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c3fc:	e03a      	b.n	803c474 <_printf_i+0xa8>
 803c3fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c402:	2b15      	cmp	r3, #21
 803c404:	d8f6      	bhi.n	803c3f4 <_printf_i+0x28>
 803c406:	a101      	add	r1, pc, #4	; (adr r1, 803c40c <_printf_i+0x40>)
 803c408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c40c:	0803c465 	.word	0x0803c465
 803c410:	0803c479 	.word	0x0803c479
 803c414:	0803c3f5 	.word	0x0803c3f5
 803c418:	0803c3f5 	.word	0x0803c3f5
 803c41c:	0803c3f5 	.word	0x0803c3f5
 803c420:	0803c3f5 	.word	0x0803c3f5
 803c424:	0803c479 	.word	0x0803c479
 803c428:	0803c3f5 	.word	0x0803c3f5
 803c42c:	0803c3f5 	.word	0x0803c3f5
 803c430:	0803c3f5 	.word	0x0803c3f5
 803c434:	0803c3f5 	.word	0x0803c3f5
 803c438:	0803c585 	.word	0x0803c585
 803c43c:	0803c4a9 	.word	0x0803c4a9
 803c440:	0803c567 	.word	0x0803c567
 803c444:	0803c3f5 	.word	0x0803c3f5
 803c448:	0803c3f5 	.word	0x0803c3f5
 803c44c:	0803c5a7 	.word	0x0803c5a7
 803c450:	0803c3f5 	.word	0x0803c3f5
 803c454:	0803c4a9 	.word	0x0803c4a9
 803c458:	0803c3f5 	.word	0x0803c3f5
 803c45c:	0803c3f5 	.word	0x0803c3f5
 803c460:	0803c56f 	.word	0x0803c56f
 803c464:	682b      	ldr	r3, [r5, #0]
 803c466:	1d1a      	adds	r2, r3, #4
 803c468:	681b      	ldr	r3, [r3, #0]
 803c46a:	602a      	str	r2, [r5, #0]
 803c46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c474:	2301      	movs	r3, #1
 803c476:	e0a3      	b.n	803c5c0 <_printf_i+0x1f4>
 803c478:	6820      	ldr	r0, [r4, #0]
 803c47a:	6829      	ldr	r1, [r5, #0]
 803c47c:	0606      	lsls	r6, r0, #24
 803c47e:	f101 0304 	add.w	r3, r1, #4
 803c482:	d50a      	bpl.n	803c49a <_printf_i+0xce>
 803c484:	680e      	ldr	r6, [r1, #0]
 803c486:	602b      	str	r3, [r5, #0]
 803c488:	2e00      	cmp	r6, #0
 803c48a:	da03      	bge.n	803c494 <_printf_i+0xc8>
 803c48c:	232d      	movs	r3, #45	; 0x2d
 803c48e:	4276      	negs	r6, r6
 803c490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c494:	485e      	ldr	r0, [pc, #376]	; (803c610 <_printf_i+0x244>)
 803c496:	230a      	movs	r3, #10
 803c498:	e019      	b.n	803c4ce <_printf_i+0x102>
 803c49a:	680e      	ldr	r6, [r1, #0]
 803c49c:	602b      	str	r3, [r5, #0]
 803c49e:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c4a2:	bf18      	it	ne
 803c4a4:	b236      	sxthne	r6, r6
 803c4a6:	e7ef      	b.n	803c488 <_printf_i+0xbc>
 803c4a8:	682b      	ldr	r3, [r5, #0]
 803c4aa:	6820      	ldr	r0, [r4, #0]
 803c4ac:	1d19      	adds	r1, r3, #4
 803c4ae:	6029      	str	r1, [r5, #0]
 803c4b0:	0601      	lsls	r1, r0, #24
 803c4b2:	d501      	bpl.n	803c4b8 <_printf_i+0xec>
 803c4b4:	681e      	ldr	r6, [r3, #0]
 803c4b6:	e002      	b.n	803c4be <_printf_i+0xf2>
 803c4b8:	0646      	lsls	r6, r0, #25
 803c4ba:	d5fb      	bpl.n	803c4b4 <_printf_i+0xe8>
 803c4bc:	881e      	ldrh	r6, [r3, #0]
 803c4be:	4854      	ldr	r0, [pc, #336]	; (803c610 <_printf_i+0x244>)
 803c4c0:	2f6f      	cmp	r7, #111	; 0x6f
 803c4c2:	bf0c      	ite	eq
 803c4c4:	2308      	moveq	r3, #8
 803c4c6:	230a      	movne	r3, #10
 803c4c8:	2100      	movs	r1, #0
 803c4ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c4ce:	6865      	ldr	r5, [r4, #4]
 803c4d0:	60a5      	str	r5, [r4, #8]
 803c4d2:	2d00      	cmp	r5, #0
 803c4d4:	bfa2      	ittt	ge
 803c4d6:	6821      	ldrge	r1, [r4, #0]
 803c4d8:	f021 0104 	bicge.w	r1, r1, #4
 803c4dc:	6021      	strge	r1, [r4, #0]
 803c4de:	b90e      	cbnz	r6, 803c4e4 <_printf_i+0x118>
 803c4e0:	2d00      	cmp	r5, #0
 803c4e2:	d04d      	beq.n	803c580 <_printf_i+0x1b4>
 803c4e4:	4615      	mov	r5, r2
 803c4e6:	fbb6 f1f3 	udiv	r1, r6, r3
 803c4ea:	fb03 6711 	mls	r7, r3, r1, r6
 803c4ee:	5dc7      	ldrb	r7, [r0, r7]
 803c4f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c4f4:	4637      	mov	r7, r6
 803c4f6:	42bb      	cmp	r3, r7
 803c4f8:	460e      	mov	r6, r1
 803c4fa:	d9f4      	bls.n	803c4e6 <_printf_i+0x11a>
 803c4fc:	2b08      	cmp	r3, #8
 803c4fe:	d10b      	bne.n	803c518 <_printf_i+0x14c>
 803c500:	6823      	ldr	r3, [r4, #0]
 803c502:	07de      	lsls	r6, r3, #31
 803c504:	d508      	bpl.n	803c518 <_printf_i+0x14c>
 803c506:	6923      	ldr	r3, [r4, #16]
 803c508:	6861      	ldr	r1, [r4, #4]
 803c50a:	4299      	cmp	r1, r3
 803c50c:	bfde      	ittt	le
 803c50e:	2330      	movle	r3, #48	; 0x30
 803c510:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c514:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c518:	1b52      	subs	r2, r2, r5
 803c51a:	6122      	str	r2, [r4, #16]
 803c51c:	f8cd a000 	str.w	sl, [sp]
 803c520:	464b      	mov	r3, r9
 803c522:	aa03      	add	r2, sp, #12
 803c524:	4621      	mov	r1, r4
 803c526:	4640      	mov	r0, r8
 803c528:	f7ff fee2 	bl	803c2f0 <_printf_common>
 803c52c:	3001      	adds	r0, #1
 803c52e:	d14c      	bne.n	803c5ca <_printf_i+0x1fe>
 803c530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c534:	b004      	add	sp, #16
 803c536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c53a:	4835      	ldr	r0, [pc, #212]	; (803c610 <_printf_i+0x244>)
 803c53c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c540:	6829      	ldr	r1, [r5, #0]
 803c542:	6823      	ldr	r3, [r4, #0]
 803c544:	f851 6b04 	ldr.w	r6, [r1], #4
 803c548:	6029      	str	r1, [r5, #0]
 803c54a:	061d      	lsls	r5, r3, #24
 803c54c:	d514      	bpl.n	803c578 <_printf_i+0x1ac>
 803c54e:	07df      	lsls	r7, r3, #31
 803c550:	bf44      	itt	mi
 803c552:	f043 0320 	orrmi.w	r3, r3, #32
 803c556:	6023      	strmi	r3, [r4, #0]
 803c558:	b91e      	cbnz	r6, 803c562 <_printf_i+0x196>
 803c55a:	6823      	ldr	r3, [r4, #0]
 803c55c:	f023 0320 	bic.w	r3, r3, #32
 803c560:	6023      	str	r3, [r4, #0]
 803c562:	2310      	movs	r3, #16
 803c564:	e7b0      	b.n	803c4c8 <_printf_i+0xfc>
 803c566:	6823      	ldr	r3, [r4, #0]
 803c568:	f043 0320 	orr.w	r3, r3, #32
 803c56c:	6023      	str	r3, [r4, #0]
 803c56e:	2378      	movs	r3, #120	; 0x78
 803c570:	4828      	ldr	r0, [pc, #160]	; (803c614 <_printf_i+0x248>)
 803c572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c576:	e7e3      	b.n	803c540 <_printf_i+0x174>
 803c578:	0659      	lsls	r1, r3, #25
 803c57a:	bf48      	it	mi
 803c57c:	b2b6      	uxthmi	r6, r6
 803c57e:	e7e6      	b.n	803c54e <_printf_i+0x182>
 803c580:	4615      	mov	r5, r2
 803c582:	e7bb      	b.n	803c4fc <_printf_i+0x130>
 803c584:	682b      	ldr	r3, [r5, #0]
 803c586:	6826      	ldr	r6, [r4, #0]
 803c588:	6961      	ldr	r1, [r4, #20]
 803c58a:	1d18      	adds	r0, r3, #4
 803c58c:	6028      	str	r0, [r5, #0]
 803c58e:	0635      	lsls	r5, r6, #24
 803c590:	681b      	ldr	r3, [r3, #0]
 803c592:	d501      	bpl.n	803c598 <_printf_i+0x1cc>
 803c594:	6019      	str	r1, [r3, #0]
 803c596:	e002      	b.n	803c59e <_printf_i+0x1d2>
 803c598:	0670      	lsls	r0, r6, #25
 803c59a:	d5fb      	bpl.n	803c594 <_printf_i+0x1c8>
 803c59c:	8019      	strh	r1, [r3, #0]
 803c59e:	2300      	movs	r3, #0
 803c5a0:	6123      	str	r3, [r4, #16]
 803c5a2:	4615      	mov	r5, r2
 803c5a4:	e7ba      	b.n	803c51c <_printf_i+0x150>
 803c5a6:	682b      	ldr	r3, [r5, #0]
 803c5a8:	1d1a      	adds	r2, r3, #4
 803c5aa:	602a      	str	r2, [r5, #0]
 803c5ac:	681d      	ldr	r5, [r3, #0]
 803c5ae:	6862      	ldr	r2, [r4, #4]
 803c5b0:	2100      	movs	r1, #0
 803c5b2:	4628      	mov	r0, r5
 803c5b4:	f7e3 fe94 	bl	80202e0 <memchr>
 803c5b8:	b108      	cbz	r0, 803c5be <_printf_i+0x1f2>
 803c5ba:	1b40      	subs	r0, r0, r5
 803c5bc:	6060      	str	r0, [r4, #4]
 803c5be:	6863      	ldr	r3, [r4, #4]
 803c5c0:	6123      	str	r3, [r4, #16]
 803c5c2:	2300      	movs	r3, #0
 803c5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c5c8:	e7a8      	b.n	803c51c <_printf_i+0x150>
 803c5ca:	6923      	ldr	r3, [r4, #16]
 803c5cc:	462a      	mov	r2, r5
 803c5ce:	4649      	mov	r1, r9
 803c5d0:	4640      	mov	r0, r8
 803c5d2:	47d0      	blx	sl
 803c5d4:	3001      	adds	r0, #1
 803c5d6:	d0ab      	beq.n	803c530 <_printf_i+0x164>
 803c5d8:	6823      	ldr	r3, [r4, #0]
 803c5da:	079b      	lsls	r3, r3, #30
 803c5dc:	d413      	bmi.n	803c606 <_printf_i+0x23a>
 803c5de:	68e0      	ldr	r0, [r4, #12]
 803c5e0:	9b03      	ldr	r3, [sp, #12]
 803c5e2:	4298      	cmp	r0, r3
 803c5e4:	bfb8      	it	lt
 803c5e6:	4618      	movlt	r0, r3
 803c5e8:	e7a4      	b.n	803c534 <_printf_i+0x168>
 803c5ea:	2301      	movs	r3, #1
 803c5ec:	4632      	mov	r2, r6
 803c5ee:	4649      	mov	r1, r9
 803c5f0:	4640      	mov	r0, r8
 803c5f2:	47d0      	blx	sl
 803c5f4:	3001      	adds	r0, #1
 803c5f6:	d09b      	beq.n	803c530 <_printf_i+0x164>
 803c5f8:	3501      	adds	r5, #1
 803c5fa:	68e3      	ldr	r3, [r4, #12]
 803c5fc:	9903      	ldr	r1, [sp, #12]
 803c5fe:	1a5b      	subs	r3, r3, r1
 803c600:	42ab      	cmp	r3, r5
 803c602:	dcf2      	bgt.n	803c5ea <_printf_i+0x21e>
 803c604:	e7eb      	b.n	803c5de <_printf_i+0x212>
 803c606:	2500      	movs	r5, #0
 803c608:	f104 0619 	add.w	r6, r4, #25
 803c60c:	e7f5      	b.n	803c5fa <_printf_i+0x22e>
 803c60e:	bf00      	nop
 803c610:	08058599 	.word	0x08058599
 803c614:	080585aa 	.word	0x080585aa

0803c618 <_sbrk_r>:
 803c618:	b538      	push	{r3, r4, r5, lr}
 803c61a:	4d06      	ldr	r5, [pc, #24]	; (803c634 <_sbrk_r+0x1c>)
 803c61c:	2300      	movs	r3, #0
 803c61e:	4604      	mov	r4, r0
 803c620:	4608      	mov	r0, r1
 803c622:	602b      	str	r3, [r5, #0]
 803c624:	f7ed fd16 	bl	802a054 <_sbrk>
 803c628:	1c43      	adds	r3, r0, #1
 803c62a:	d102      	bne.n	803c632 <_sbrk_r+0x1a>
 803c62c:	682b      	ldr	r3, [r5, #0]
 803c62e:	b103      	cbz	r3, 803c632 <_sbrk_r+0x1a>
 803c630:	6023      	str	r3, [r4, #0]
 803c632:	bd38      	pop	{r3, r4, r5, pc}
 803c634:	240267e4 	.word	0x240267e4

0803c638 <_raise_r>:
 803c638:	291f      	cmp	r1, #31
 803c63a:	b538      	push	{r3, r4, r5, lr}
 803c63c:	4604      	mov	r4, r0
 803c63e:	460d      	mov	r5, r1
 803c640:	d904      	bls.n	803c64c <_raise_r+0x14>
 803c642:	2316      	movs	r3, #22
 803c644:	6003      	str	r3, [r0, #0]
 803c646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c64a:	bd38      	pop	{r3, r4, r5, pc}
 803c64c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c64e:	b112      	cbz	r2, 803c656 <_raise_r+0x1e>
 803c650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c654:	b94b      	cbnz	r3, 803c66a <_raise_r+0x32>
 803c656:	4620      	mov	r0, r4
 803c658:	f000 f830 	bl	803c6bc <_getpid_r>
 803c65c:	462a      	mov	r2, r5
 803c65e:	4601      	mov	r1, r0
 803c660:	4620      	mov	r0, r4
 803c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c666:	f000 b817 	b.w	803c698 <_kill_r>
 803c66a:	2b01      	cmp	r3, #1
 803c66c:	d00a      	beq.n	803c684 <_raise_r+0x4c>
 803c66e:	1c59      	adds	r1, r3, #1
 803c670:	d103      	bne.n	803c67a <_raise_r+0x42>
 803c672:	2316      	movs	r3, #22
 803c674:	6003      	str	r3, [r0, #0]
 803c676:	2001      	movs	r0, #1
 803c678:	e7e7      	b.n	803c64a <_raise_r+0x12>
 803c67a:	2400      	movs	r4, #0
 803c67c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c680:	4628      	mov	r0, r5
 803c682:	4798      	blx	r3
 803c684:	2000      	movs	r0, #0
 803c686:	e7e0      	b.n	803c64a <_raise_r+0x12>

0803c688 <raise>:
 803c688:	4b02      	ldr	r3, [pc, #8]	; (803c694 <raise+0xc>)
 803c68a:	4601      	mov	r1, r0
 803c68c:	6818      	ldr	r0, [r3, #0]
 803c68e:	f7ff bfd3 	b.w	803c638 <_raise_r>
 803c692:	bf00      	nop
 803c694:	24000104 	.word	0x24000104

0803c698 <_kill_r>:
 803c698:	b538      	push	{r3, r4, r5, lr}
 803c69a:	4d07      	ldr	r5, [pc, #28]	; (803c6b8 <_kill_r+0x20>)
 803c69c:	2300      	movs	r3, #0
 803c69e:	4604      	mov	r4, r0
 803c6a0:	4608      	mov	r0, r1
 803c6a2:	4611      	mov	r1, r2
 803c6a4:	602b      	str	r3, [r5, #0]
 803c6a6:	f7ed fc4d 	bl	8029f44 <_kill>
 803c6aa:	1c43      	adds	r3, r0, #1
 803c6ac:	d102      	bne.n	803c6b4 <_kill_r+0x1c>
 803c6ae:	682b      	ldr	r3, [r5, #0]
 803c6b0:	b103      	cbz	r3, 803c6b4 <_kill_r+0x1c>
 803c6b2:	6023      	str	r3, [r4, #0]
 803c6b4:	bd38      	pop	{r3, r4, r5, pc}
 803c6b6:	bf00      	nop
 803c6b8:	240267e4 	.word	0x240267e4

0803c6bc <_getpid_r>:
 803c6bc:	f7ed bc3a 	b.w	8029f34 <_getpid>

0803c6c0 <__swbuf_r>:
 803c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c6c2:	460e      	mov	r6, r1
 803c6c4:	4614      	mov	r4, r2
 803c6c6:	4605      	mov	r5, r0
 803c6c8:	b118      	cbz	r0, 803c6d2 <__swbuf_r+0x12>
 803c6ca:	6983      	ldr	r3, [r0, #24]
 803c6cc:	b90b      	cbnz	r3, 803c6d2 <__swbuf_r+0x12>
 803c6ce:	f000 f9d1 	bl	803ca74 <__sinit>
 803c6d2:	4b21      	ldr	r3, [pc, #132]	; (803c758 <__swbuf_r+0x98>)
 803c6d4:	429c      	cmp	r4, r3
 803c6d6:	d12b      	bne.n	803c730 <__swbuf_r+0x70>
 803c6d8:	686c      	ldr	r4, [r5, #4]
 803c6da:	69a3      	ldr	r3, [r4, #24]
 803c6dc:	60a3      	str	r3, [r4, #8]
 803c6de:	89a3      	ldrh	r3, [r4, #12]
 803c6e0:	071a      	lsls	r2, r3, #28
 803c6e2:	d52f      	bpl.n	803c744 <__swbuf_r+0x84>
 803c6e4:	6923      	ldr	r3, [r4, #16]
 803c6e6:	b36b      	cbz	r3, 803c744 <__swbuf_r+0x84>
 803c6e8:	6923      	ldr	r3, [r4, #16]
 803c6ea:	6820      	ldr	r0, [r4, #0]
 803c6ec:	1ac0      	subs	r0, r0, r3
 803c6ee:	6963      	ldr	r3, [r4, #20]
 803c6f0:	b2f6      	uxtb	r6, r6
 803c6f2:	4283      	cmp	r3, r0
 803c6f4:	4637      	mov	r7, r6
 803c6f6:	dc04      	bgt.n	803c702 <__swbuf_r+0x42>
 803c6f8:	4621      	mov	r1, r4
 803c6fa:	4628      	mov	r0, r5
 803c6fc:	f000 f926 	bl	803c94c <_fflush_r>
 803c700:	bb30      	cbnz	r0, 803c750 <__swbuf_r+0x90>
 803c702:	68a3      	ldr	r3, [r4, #8]
 803c704:	3b01      	subs	r3, #1
 803c706:	60a3      	str	r3, [r4, #8]
 803c708:	6823      	ldr	r3, [r4, #0]
 803c70a:	1c5a      	adds	r2, r3, #1
 803c70c:	6022      	str	r2, [r4, #0]
 803c70e:	701e      	strb	r6, [r3, #0]
 803c710:	6963      	ldr	r3, [r4, #20]
 803c712:	3001      	adds	r0, #1
 803c714:	4283      	cmp	r3, r0
 803c716:	d004      	beq.n	803c722 <__swbuf_r+0x62>
 803c718:	89a3      	ldrh	r3, [r4, #12]
 803c71a:	07db      	lsls	r3, r3, #31
 803c71c:	d506      	bpl.n	803c72c <__swbuf_r+0x6c>
 803c71e:	2e0a      	cmp	r6, #10
 803c720:	d104      	bne.n	803c72c <__swbuf_r+0x6c>
 803c722:	4621      	mov	r1, r4
 803c724:	4628      	mov	r0, r5
 803c726:	f000 f911 	bl	803c94c <_fflush_r>
 803c72a:	b988      	cbnz	r0, 803c750 <__swbuf_r+0x90>
 803c72c:	4638      	mov	r0, r7
 803c72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c730:	4b0a      	ldr	r3, [pc, #40]	; (803c75c <__swbuf_r+0x9c>)
 803c732:	429c      	cmp	r4, r3
 803c734:	d101      	bne.n	803c73a <__swbuf_r+0x7a>
 803c736:	68ac      	ldr	r4, [r5, #8]
 803c738:	e7cf      	b.n	803c6da <__swbuf_r+0x1a>
 803c73a:	4b09      	ldr	r3, [pc, #36]	; (803c760 <__swbuf_r+0xa0>)
 803c73c:	429c      	cmp	r4, r3
 803c73e:	bf08      	it	eq
 803c740:	68ec      	ldreq	r4, [r5, #12]
 803c742:	e7ca      	b.n	803c6da <__swbuf_r+0x1a>
 803c744:	4621      	mov	r1, r4
 803c746:	4628      	mov	r0, r5
 803c748:	f000 f80c 	bl	803c764 <__swsetup_r>
 803c74c:	2800      	cmp	r0, #0
 803c74e:	d0cb      	beq.n	803c6e8 <__swbuf_r+0x28>
 803c750:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c754:	e7ea      	b.n	803c72c <__swbuf_r+0x6c>
 803c756:	bf00      	nop
 803c758:	080585dc 	.word	0x080585dc
 803c75c:	080585fc 	.word	0x080585fc
 803c760:	080585bc 	.word	0x080585bc

0803c764 <__swsetup_r>:
 803c764:	4b32      	ldr	r3, [pc, #200]	; (803c830 <__swsetup_r+0xcc>)
 803c766:	b570      	push	{r4, r5, r6, lr}
 803c768:	681d      	ldr	r5, [r3, #0]
 803c76a:	4606      	mov	r6, r0
 803c76c:	460c      	mov	r4, r1
 803c76e:	b125      	cbz	r5, 803c77a <__swsetup_r+0x16>
 803c770:	69ab      	ldr	r3, [r5, #24]
 803c772:	b913      	cbnz	r3, 803c77a <__swsetup_r+0x16>
 803c774:	4628      	mov	r0, r5
 803c776:	f000 f97d 	bl	803ca74 <__sinit>
 803c77a:	4b2e      	ldr	r3, [pc, #184]	; (803c834 <__swsetup_r+0xd0>)
 803c77c:	429c      	cmp	r4, r3
 803c77e:	d10f      	bne.n	803c7a0 <__swsetup_r+0x3c>
 803c780:	686c      	ldr	r4, [r5, #4]
 803c782:	89a3      	ldrh	r3, [r4, #12]
 803c784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c788:	0719      	lsls	r1, r3, #28
 803c78a:	d42c      	bmi.n	803c7e6 <__swsetup_r+0x82>
 803c78c:	06dd      	lsls	r5, r3, #27
 803c78e:	d411      	bmi.n	803c7b4 <__swsetup_r+0x50>
 803c790:	2309      	movs	r3, #9
 803c792:	6033      	str	r3, [r6, #0]
 803c794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c798:	81a3      	strh	r3, [r4, #12]
 803c79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c79e:	e03e      	b.n	803c81e <__swsetup_r+0xba>
 803c7a0:	4b25      	ldr	r3, [pc, #148]	; (803c838 <__swsetup_r+0xd4>)
 803c7a2:	429c      	cmp	r4, r3
 803c7a4:	d101      	bne.n	803c7aa <__swsetup_r+0x46>
 803c7a6:	68ac      	ldr	r4, [r5, #8]
 803c7a8:	e7eb      	b.n	803c782 <__swsetup_r+0x1e>
 803c7aa:	4b24      	ldr	r3, [pc, #144]	; (803c83c <__swsetup_r+0xd8>)
 803c7ac:	429c      	cmp	r4, r3
 803c7ae:	bf08      	it	eq
 803c7b0:	68ec      	ldreq	r4, [r5, #12]
 803c7b2:	e7e6      	b.n	803c782 <__swsetup_r+0x1e>
 803c7b4:	0758      	lsls	r0, r3, #29
 803c7b6:	d512      	bpl.n	803c7de <__swsetup_r+0x7a>
 803c7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c7ba:	b141      	cbz	r1, 803c7ce <__swsetup_r+0x6a>
 803c7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c7c0:	4299      	cmp	r1, r3
 803c7c2:	d002      	beq.n	803c7ca <__swsetup_r+0x66>
 803c7c4:	4630      	mov	r0, r6
 803c7c6:	f7ff fb59 	bl	803be7c <_free_r>
 803c7ca:	2300      	movs	r3, #0
 803c7cc:	6363      	str	r3, [r4, #52]	; 0x34
 803c7ce:	89a3      	ldrh	r3, [r4, #12]
 803c7d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c7d4:	81a3      	strh	r3, [r4, #12]
 803c7d6:	2300      	movs	r3, #0
 803c7d8:	6063      	str	r3, [r4, #4]
 803c7da:	6923      	ldr	r3, [r4, #16]
 803c7dc:	6023      	str	r3, [r4, #0]
 803c7de:	89a3      	ldrh	r3, [r4, #12]
 803c7e0:	f043 0308 	orr.w	r3, r3, #8
 803c7e4:	81a3      	strh	r3, [r4, #12]
 803c7e6:	6923      	ldr	r3, [r4, #16]
 803c7e8:	b94b      	cbnz	r3, 803c7fe <__swsetup_r+0x9a>
 803c7ea:	89a3      	ldrh	r3, [r4, #12]
 803c7ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c7f4:	d003      	beq.n	803c7fe <__swsetup_r+0x9a>
 803c7f6:	4621      	mov	r1, r4
 803c7f8:	4630      	mov	r0, r6
 803c7fa:	f000 fa01 	bl	803cc00 <__smakebuf_r>
 803c7fe:	89a0      	ldrh	r0, [r4, #12]
 803c800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c804:	f010 0301 	ands.w	r3, r0, #1
 803c808:	d00a      	beq.n	803c820 <__swsetup_r+0xbc>
 803c80a:	2300      	movs	r3, #0
 803c80c:	60a3      	str	r3, [r4, #8]
 803c80e:	6963      	ldr	r3, [r4, #20]
 803c810:	425b      	negs	r3, r3
 803c812:	61a3      	str	r3, [r4, #24]
 803c814:	6923      	ldr	r3, [r4, #16]
 803c816:	b943      	cbnz	r3, 803c82a <__swsetup_r+0xc6>
 803c818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c81c:	d1ba      	bne.n	803c794 <__swsetup_r+0x30>
 803c81e:	bd70      	pop	{r4, r5, r6, pc}
 803c820:	0781      	lsls	r1, r0, #30
 803c822:	bf58      	it	pl
 803c824:	6963      	ldrpl	r3, [r4, #20]
 803c826:	60a3      	str	r3, [r4, #8]
 803c828:	e7f4      	b.n	803c814 <__swsetup_r+0xb0>
 803c82a:	2000      	movs	r0, #0
 803c82c:	e7f7      	b.n	803c81e <__swsetup_r+0xba>
 803c82e:	bf00      	nop
 803c830:	24000104 	.word	0x24000104
 803c834:	080585dc 	.word	0x080585dc
 803c838:	080585fc 	.word	0x080585fc
 803c83c:	080585bc 	.word	0x080585bc

0803c840 <__sflush_r>:
 803c840:	898a      	ldrh	r2, [r1, #12]
 803c842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c846:	4605      	mov	r5, r0
 803c848:	0710      	lsls	r0, r2, #28
 803c84a:	460c      	mov	r4, r1
 803c84c:	d458      	bmi.n	803c900 <__sflush_r+0xc0>
 803c84e:	684b      	ldr	r3, [r1, #4]
 803c850:	2b00      	cmp	r3, #0
 803c852:	dc05      	bgt.n	803c860 <__sflush_r+0x20>
 803c854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c856:	2b00      	cmp	r3, #0
 803c858:	dc02      	bgt.n	803c860 <__sflush_r+0x20>
 803c85a:	2000      	movs	r0, #0
 803c85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c862:	2e00      	cmp	r6, #0
 803c864:	d0f9      	beq.n	803c85a <__sflush_r+0x1a>
 803c866:	2300      	movs	r3, #0
 803c868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c86c:	682f      	ldr	r7, [r5, #0]
 803c86e:	602b      	str	r3, [r5, #0]
 803c870:	d032      	beq.n	803c8d8 <__sflush_r+0x98>
 803c872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c874:	89a3      	ldrh	r3, [r4, #12]
 803c876:	075a      	lsls	r2, r3, #29
 803c878:	d505      	bpl.n	803c886 <__sflush_r+0x46>
 803c87a:	6863      	ldr	r3, [r4, #4]
 803c87c:	1ac0      	subs	r0, r0, r3
 803c87e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c880:	b10b      	cbz	r3, 803c886 <__sflush_r+0x46>
 803c882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c884:	1ac0      	subs	r0, r0, r3
 803c886:	2300      	movs	r3, #0
 803c888:	4602      	mov	r2, r0
 803c88a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c88c:	6a21      	ldr	r1, [r4, #32]
 803c88e:	4628      	mov	r0, r5
 803c890:	47b0      	blx	r6
 803c892:	1c43      	adds	r3, r0, #1
 803c894:	89a3      	ldrh	r3, [r4, #12]
 803c896:	d106      	bne.n	803c8a6 <__sflush_r+0x66>
 803c898:	6829      	ldr	r1, [r5, #0]
 803c89a:	291d      	cmp	r1, #29
 803c89c:	d82c      	bhi.n	803c8f8 <__sflush_r+0xb8>
 803c89e:	4a2a      	ldr	r2, [pc, #168]	; (803c948 <__sflush_r+0x108>)
 803c8a0:	40ca      	lsrs	r2, r1
 803c8a2:	07d6      	lsls	r6, r2, #31
 803c8a4:	d528      	bpl.n	803c8f8 <__sflush_r+0xb8>
 803c8a6:	2200      	movs	r2, #0
 803c8a8:	6062      	str	r2, [r4, #4]
 803c8aa:	04d9      	lsls	r1, r3, #19
 803c8ac:	6922      	ldr	r2, [r4, #16]
 803c8ae:	6022      	str	r2, [r4, #0]
 803c8b0:	d504      	bpl.n	803c8bc <__sflush_r+0x7c>
 803c8b2:	1c42      	adds	r2, r0, #1
 803c8b4:	d101      	bne.n	803c8ba <__sflush_r+0x7a>
 803c8b6:	682b      	ldr	r3, [r5, #0]
 803c8b8:	b903      	cbnz	r3, 803c8bc <__sflush_r+0x7c>
 803c8ba:	6560      	str	r0, [r4, #84]	; 0x54
 803c8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c8be:	602f      	str	r7, [r5, #0]
 803c8c0:	2900      	cmp	r1, #0
 803c8c2:	d0ca      	beq.n	803c85a <__sflush_r+0x1a>
 803c8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c8c8:	4299      	cmp	r1, r3
 803c8ca:	d002      	beq.n	803c8d2 <__sflush_r+0x92>
 803c8cc:	4628      	mov	r0, r5
 803c8ce:	f7ff fad5 	bl	803be7c <_free_r>
 803c8d2:	2000      	movs	r0, #0
 803c8d4:	6360      	str	r0, [r4, #52]	; 0x34
 803c8d6:	e7c1      	b.n	803c85c <__sflush_r+0x1c>
 803c8d8:	6a21      	ldr	r1, [r4, #32]
 803c8da:	2301      	movs	r3, #1
 803c8dc:	4628      	mov	r0, r5
 803c8de:	47b0      	blx	r6
 803c8e0:	1c41      	adds	r1, r0, #1
 803c8e2:	d1c7      	bne.n	803c874 <__sflush_r+0x34>
 803c8e4:	682b      	ldr	r3, [r5, #0]
 803c8e6:	2b00      	cmp	r3, #0
 803c8e8:	d0c4      	beq.n	803c874 <__sflush_r+0x34>
 803c8ea:	2b1d      	cmp	r3, #29
 803c8ec:	d001      	beq.n	803c8f2 <__sflush_r+0xb2>
 803c8ee:	2b16      	cmp	r3, #22
 803c8f0:	d101      	bne.n	803c8f6 <__sflush_r+0xb6>
 803c8f2:	602f      	str	r7, [r5, #0]
 803c8f4:	e7b1      	b.n	803c85a <__sflush_r+0x1a>
 803c8f6:	89a3      	ldrh	r3, [r4, #12]
 803c8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c8fc:	81a3      	strh	r3, [r4, #12]
 803c8fe:	e7ad      	b.n	803c85c <__sflush_r+0x1c>
 803c900:	690f      	ldr	r7, [r1, #16]
 803c902:	2f00      	cmp	r7, #0
 803c904:	d0a9      	beq.n	803c85a <__sflush_r+0x1a>
 803c906:	0793      	lsls	r3, r2, #30
 803c908:	680e      	ldr	r6, [r1, #0]
 803c90a:	bf08      	it	eq
 803c90c:	694b      	ldreq	r3, [r1, #20]
 803c90e:	600f      	str	r7, [r1, #0]
 803c910:	bf18      	it	ne
 803c912:	2300      	movne	r3, #0
 803c914:	eba6 0807 	sub.w	r8, r6, r7
 803c918:	608b      	str	r3, [r1, #8]
 803c91a:	f1b8 0f00 	cmp.w	r8, #0
 803c91e:	dd9c      	ble.n	803c85a <__sflush_r+0x1a>
 803c920:	6a21      	ldr	r1, [r4, #32]
 803c922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c924:	4643      	mov	r3, r8
 803c926:	463a      	mov	r2, r7
 803c928:	4628      	mov	r0, r5
 803c92a:	47b0      	blx	r6
 803c92c:	2800      	cmp	r0, #0
 803c92e:	dc06      	bgt.n	803c93e <__sflush_r+0xfe>
 803c930:	89a3      	ldrh	r3, [r4, #12]
 803c932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c936:	81a3      	strh	r3, [r4, #12]
 803c938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c93c:	e78e      	b.n	803c85c <__sflush_r+0x1c>
 803c93e:	4407      	add	r7, r0
 803c940:	eba8 0800 	sub.w	r8, r8, r0
 803c944:	e7e9      	b.n	803c91a <__sflush_r+0xda>
 803c946:	bf00      	nop
 803c948:	20400001 	.word	0x20400001

0803c94c <_fflush_r>:
 803c94c:	b538      	push	{r3, r4, r5, lr}
 803c94e:	690b      	ldr	r3, [r1, #16]
 803c950:	4605      	mov	r5, r0
 803c952:	460c      	mov	r4, r1
 803c954:	b913      	cbnz	r3, 803c95c <_fflush_r+0x10>
 803c956:	2500      	movs	r5, #0
 803c958:	4628      	mov	r0, r5
 803c95a:	bd38      	pop	{r3, r4, r5, pc}
 803c95c:	b118      	cbz	r0, 803c966 <_fflush_r+0x1a>
 803c95e:	6983      	ldr	r3, [r0, #24]
 803c960:	b90b      	cbnz	r3, 803c966 <_fflush_r+0x1a>
 803c962:	f000 f887 	bl	803ca74 <__sinit>
 803c966:	4b14      	ldr	r3, [pc, #80]	; (803c9b8 <_fflush_r+0x6c>)
 803c968:	429c      	cmp	r4, r3
 803c96a:	d11b      	bne.n	803c9a4 <_fflush_r+0x58>
 803c96c:	686c      	ldr	r4, [r5, #4]
 803c96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c972:	2b00      	cmp	r3, #0
 803c974:	d0ef      	beq.n	803c956 <_fflush_r+0xa>
 803c976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c978:	07d0      	lsls	r0, r2, #31
 803c97a:	d404      	bmi.n	803c986 <_fflush_r+0x3a>
 803c97c:	0599      	lsls	r1, r3, #22
 803c97e:	d402      	bmi.n	803c986 <_fflush_r+0x3a>
 803c980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c982:	f000 f915 	bl	803cbb0 <__retarget_lock_acquire_recursive>
 803c986:	4628      	mov	r0, r5
 803c988:	4621      	mov	r1, r4
 803c98a:	f7ff ff59 	bl	803c840 <__sflush_r>
 803c98e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c990:	07da      	lsls	r2, r3, #31
 803c992:	4605      	mov	r5, r0
 803c994:	d4e0      	bmi.n	803c958 <_fflush_r+0xc>
 803c996:	89a3      	ldrh	r3, [r4, #12]
 803c998:	059b      	lsls	r3, r3, #22
 803c99a:	d4dd      	bmi.n	803c958 <_fflush_r+0xc>
 803c99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c99e:	f000 f908 	bl	803cbb2 <__retarget_lock_release_recursive>
 803c9a2:	e7d9      	b.n	803c958 <_fflush_r+0xc>
 803c9a4:	4b05      	ldr	r3, [pc, #20]	; (803c9bc <_fflush_r+0x70>)
 803c9a6:	429c      	cmp	r4, r3
 803c9a8:	d101      	bne.n	803c9ae <_fflush_r+0x62>
 803c9aa:	68ac      	ldr	r4, [r5, #8]
 803c9ac:	e7df      	b.n	803c96e <_fflush_r+0x22>
 803c9ae:	4b04      	ldr	r3, [pc, #16]	; (803c9c0 <_fflush_r+0x74>)
 803c9b0:	429c      	cmp	r4, r3
 803c9b2:	bf08      	it	eq
 803c9b4:	68ec      	ldreq	r4, [r5, #12]
 803c9b6:	e7da      	b.n	803c96e <_fflush_r+0x22>
 803c9b8:	080585dc 	.word	0x080585dc
 803c9bc:	080585fc 	.word	0x080585fc
 803c9c0:	080585bc 	.word	0x080585bc

0803c9c4 <std>:
 803c9c4:	2300      	movs	r3, #0
 803c9c6:	b510      	push	{r4, lr}
 803c9c8:	4604      	mov	r4, r0
 803c9ca:	e9c0 3300 	strd	r3, r3, [r0]
 803c9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803c9d2:	6083      	str	r3, [r0, #8]
 803c9d4:	8181      	strh	r1, [r0, #12]
 803c9d6:	6643      	str	r3, [r0, #100]	; 0x64
 803c9d8:	81c2      	strh	r2, [r0, #14]
 803c9da:	6183      	str	r3, [r0, #24]
 803c9dc:	4619      	mov	r1, r3
 803c9de:	2208      	movs	r2, #8
 803c9e0:	305c      	adds	r0, #92	; 0x5c
 803c9e2:	f7ff fa43 	bl	803be6c <memset>
 803c9e6:	4b05      	ldr	r3, [pc, #20]	; (803c9fc <std+0x38>)
 803c9e8:	6263      	str	r3, [r4, #36]	; 0x24
 803c9ea:	4b05      	ldr	r3, [pc, #20]	; (803ca00 <std+0x3c>)
 803c9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 803c9ee:	4b05      	ldr	r3, [pc, #20]	; (803ca04 <std+0x40>)
 803c9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 803c9f2:	4b05      	ldr	r3, [pc, #20]	; (803ca08 <std+0x44>)
 803c9f4:	6224      	str	r4, [r4, #32]
 803c9f6:	6323      	str	r3, [r4, #48]	; 0x30
 803c9f8:	bd10      	pop	{r4, pc}
 803c9fa:	bf00      	nop
 803c9fc:	0803cc99 	.word	0x0803cc99
 803ca00:	0803ccbb 	.word	0x0803ccbb
 803ca04:	0803ccf3 	.word	0x0803ccf3
 803ca08:	0803cd17 	.word	0x0803cd17

0803ca0c <_cleanup_r>:
 803ca0c:	4901      	ldr	r1, [pc, #4]	; (803ca14 <_cleanup_r+0x8>)
 803ca0e:	f000 b8af 	b.w	803cb70 <_fwalk_reent>
 803ca12:	bf00      	nop
 803ca14:	0803c94d 	.word	0x0803c94d

0803ca18 <__sfmoreglue>:
 803ca18:	b570      	push	{r4, r5, r6, lr}
 803ca1a:	2268      	movs	r2, #104	; 0x68
 803ca1c:	1e4d      	subs	r5, r1, #1
 803ca1e:	4355      	muls	r5, r2
 803ca20:	460e      	mov	r6, r1
 803ca22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803ca26:	f7ff fa95 	bl	803bf54 <_malloc_r>
 803ca2a:	4604      	mov	r4, r0
 803ca2c:	b140      	cbz	r0, 803ca40 <__sfmoreglue+0x28>
 803ca2e:	2100      	movs	r1, #0
 803ca30:	e9c0 1600 	strd	r1, r6, [r0]
 803ca34:	300c      	adds	r0, #12
 803ca36:	60a0      	str	r0, [r4, #8]
 803ca38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803ca3c:	f7ff fa16 	bl	803be6c <memset>
 803ca40:	4620      	mov	r0, r4
 803ca42:	bd70      	pop	{r4, r5, r6, pc}

0803ca44 <__sfp_lock_acquire>:
 803ca44:	4801      	ldr	r0, [pc, #4]	; (803ca4c <__sfp_lock_acquire+0x8>)
 803ca46:	f000 b8b3 	b.w	803cbb0 <__retarget_lock_acquire_recursive>
 803ca4a:	bf00      	nop
 803ca4c:	240267e1 	.word	0x240267e1

0803ca50 <__sfp_lock_release>:
 803ca50:	4801      	ldr	r0, [pc, #4]	; (803ca58 <__sfp_lock_release+0x8>)
 803ca52:	f000 b8ae 	b.w	803cbb2 <__retarget_lock_release_recursive>
 803ca56:	bf00      	nop
 803ca58:	240267e1 	.word	0x240267e1

0803ca5c <__sinit_lock_acquire>:
 803ca5c:	4801      	ldr	r0, [pc, #4]	; (803ca64 <__sinit_lock_acquire+0x8>)
 803ca5e:	f000 b8a7 	b.w	803cbb0 <__retarget_lock_acquire_recursive>
 803ca62:	bf00      	nop
 803ca64:	240267e2 	.word	0x240267e2

0803ca68 <__sinit_lock_release>:
 803ca68:	4801      	ldr	r0, [pc, #4]	; (803ca70 <__sinit_lock_release+0x8>)
 803ca6a:	f000 b8a2 	b.w	803cbb2 <__retarget_lock_release_recursive>
 803ca6e:	bf00      	nop
 803ca70:	240267e2 	.word	0x240267e2

0803ca74 <__sinit>:
 803ca74:	b510      	push	{r4, lr}
 803ca76:	4604      	mov	r4, r0
 803ca78:	f7ff fff0 	bl	803ca5c <__sinit_lock_acquire>
 803ca7c:	69a3      	ldr	r3, [r4, #24]
 803ca7e:	b11b      	cbz	r3, 803ca88 <__sinit+0x14>
 803ca80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803ca84:	f7ff bff0 	b.w	803ca68 <__sinit_lock_release>
 803ca88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803ca8c:	6523      	str	r3, [r4, #80]	; 0x50
 803ca8e:	4b13      	ldr	r3, [pc, #76]	; (803cadc <__sinit+0x68>)
 803ca90:	4a13      	ldr	r2, [pc, #76]	; (803cae0 <__sinit+0x6c>)
 803ca92:	681b      	ldr	r3, [r3, #0]
 803ca94:	62a2      	str	r2, [r4, #40]	; 0x28
 803ca96:	42a3      	cmp	r3, r4
 803ca98:	bf04      	itt	eq
 803ca9a:	2301      	moveq	r3, #1
 803ca9c:	61a3      	streq	r3, [r4, #24]
 803ca9e:	4620      	mov	r0, r4
 803caa0:	f000 f820 	bl	803cae4 <__sfp>
 803caa4:	6060      	str	r0, [r4, #4]
 803caa6:	4620      	mov	r0, r4
 803caa8:	f000 f81c 	bl	803cae4 <__sfp>
 803caac:	60a0      	str	r0, [r4, #8]
 803caae:	4620      	mov	r0, r4
 803cab0:	f000 f818 	bl	803cae4 <__sfp>
 803cab4:	2200      	movs	r2, #0
 803cab6:	60e0      	str	r0, [r4, #12]
 803cab8:	2104      	movs	r1, #4
 803caba:	6860      	ldr	r0, [r4, #4]
 803cabc:	f7ff ff82 	bl	803c9c4 <std>
 803cac0:	68a0      	ldr	r0, [r4, #8]
 803cac2:	2201      	movs	r2, #1
 803cac4:	2109      	movs	r1, #9
 803cac6:	f7ff ff7d 	bl	803c9c4 <std>
 803caca:	68e0      	ldr	r0, [r4, #12]
 803cacc:	2202      	movs	r2, #2
 803cace:	2112      	movs	r1, #18
 803cad0:	f7ff ff78 	bl	803c9c4 <std>
 803cad4:	2301      	movs	r3, #1
 803cad6:	61a3      	str	r3, [r4, #24]
 803cad8:	e7d2      	b.n	803ca80 <__sinit+0xc>
 803cada:	bf00      	nop
 803cadc:	08058584 	.word	0x08058584
 803cae0:	0803ca0d 	.word	0x0803ca0d

0803cae4 <__sfp>:
 803cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cae6:	4607      	mov	r7, r0
 803cae8:	f7ff ffac 	bl	803ca44 <__sfp_lock_acquire>
 803caec:	4b1e      	ldr	r3, [pc, #120]	; (803cb68 <__sfp+0x84>)
 803caee:	681e      	ldr	r6, [r3, #0]
 803caf0:	69b3      	ldr	r3, [r6, #24]
 803caf2:	b913      	cbnz	r3, 803cafa <__sfp+0x16>
 803caf4:	4630      	mov	r0, r6
 803caf6:	f7ff ffbd 	bl	803ca74 <__sinit>
 803cafa:	3648      	adds	r6, #72	; 0x48
 803cafc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803cb00:	3b01      	subs	r3, #1
 803cb02:	d503      	bpl.n	803cb0c <__sfp+0x28>
 803cb04:	6833      	ldr	r3, [r6, #0]
 803cb06:	b30b      	cbz	r3, 803cb4c <__sfp+0x68>
 803cb08:	6836      	ldr	r6, [r6, #0]
 803cb0a:	e7f7      	b.n	803cafc <__sfp+0x18>
 803cb0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803cb10:	b9d5      	cbnz	r5, 803cb48 <__sfp+0x64>
 803cb12:	4b16      	ldr	r3, [pc, #88]	; (803cb6c <__sfp+0x88>)
 803cb14:	60e3      	str	r3, [r4, #12]
 803cb16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803cb1a:	6665      	str	r5, [r4, #100]	; 0x64
 803cb1c:	f000 f847 	bl	803cbae <__retarget_lock_init_recursive>
 803cb20:	f7ff ff96 	bl	803ca50 <__sfp_lock_release>
 803cb24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803cb28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803cb2c:	6025      	str	r5, [r4, #0]
 803cb2e:	61a5      	str	r5, [r4, #24]
 803cb30:	2208      	movs	r2, #8
 803cb32:	4629      	mov	r1, r5
 803cb34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803cb38:	f7ff f998 	bl	803be6c <memset>
 803cb3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803cb40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803cb44:	4620      	mov	r0, r4
 803cb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803cb48:	3468      	adds	r4, #104	; 0x68
 803cb4a:	e7d9      	b.n	803cb00 <__sfp+0x1c>
 803cb4c:	2104      	movs	r1, #4
 803cb4e:	4638      	mov	r0, r7
 803cb50:	f7ff ff62 	bl	803ca18 <__sfmoreglue>
 803cb54:	4604      	mov	r4, r0
 803cb56:	6030      	str	r0, [r6, #0]
 803cb58:	2800      	cmp	r0, #0
 803cb5a:	d1d5      	bne.n	803cb08 <__sfp+0x24>
 803cb5c:	f7ff ff78 	bl	803ca50 <__sfp_lock_release>
 803cb60:	230c      	movs	r3, #12
 803cb62:	603b      	str	r3, [r7, #0]
 803cb64:	e7ee      	b.n	803cb44 <__sfp+0x60>
 803cb66:	bf00      	nop
 803cb68:	08058584 	.word	0x08058584
 803cb6c:	ffff0001 	.word	0xffff0001

0803cb70 <_fwalk_reent>:
 803cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cb74:	4606      	mov	r6, r0
 803cb76:	4688      	mov	r8, r1
 803cb78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803cb7c:	2700      	movs	r7, #0
 803cb7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803cb82:	f1b9 0901 	subs.w	r9, r9, #1
 803cb86:	d505      	bpl.n	803cb94 <_fwalk_reent+0x24>
 803cb88:	6824      	ldr	r4, [r4, #0]
 803cb8a:	2c00      	cmp	r4, #0
 803cb8c:	d1f7      	bne.n	803cb7e <_fwalk_reent+0xe>
 803cb8e:	4638      	mov	r0, r7
 803cb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cb94:	89ab      	ldrh	r3, [r5, #12]
 803cb96:	2b01      	cmp	r3, #1
 803cb98:	d907      	bls.n	803cbaa <_fwalk_reent+0x3a>
 803cb9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803cb9e:	3301      	adds	r3, #1
 803cba0:	d003      	beq.n	803cbaa <_fwalk_reent+0x3a>
 803cba2:	4629      	mov	r1, r5
 803cba4:	4630      	mov	r0, r6
 803cba6:	47c0      	blx	r8
 803cba8:	4307      	orrs	r7, r0
 803cbaa:	3568      	adds	r5, #104	; 0x68
 803cbac:	e7e9      	b.n	803cb82 <_fwalk_reent+0x12>

0803cbae <__retarget_lock_init_recursive>:
 803cbae:	4770      	bx	lr

0803cbb0 <__retarget_lock_acquire_recursive>:
 803cbb0:	4770      	bx	lr

0803cbb2 <__retarget_lock_release_recursive>:
 803cbb2:	4770      	bx	lr

0803cbb4 <__swhatbuf_r>:
 803cbb4:	b570      	push	{r4, r5, r6, lr}
 803cbb6:	460e      	mov	r6, r1
 803cbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cbbc:	2900      	cmp	r1, #0
 803cbbe:	b096      	sub	sp, #88	; 0x58
 803cbc0:	4614      	mov	r4, r2
 803cbc2:	461d      	mov	r5, r3
 803cbc4:	da08      	bge.n	803cbd8 <__swhatbuf_r+0x24>
 803cbc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803cbca:	2200      	movs	r2, #0
 803cbcc:	602a      	str	r2, [r5, #0]
 803cbce:	061a      	lsls	r2, r3, #24
 803cbd0:	d410      	bmi.n	803cbf4 <__swhatbuf_r+0x40>
 803cbd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803cbd6:	e00e      	b.n	803cbf6 <__swhatbuf_r+0x42>
 803cbd8:	466a      	mov	r2, sp
 803cbda:	f000 f8c3 	bl	803cd64 <_fstat_r>
 803cbde:	2800      	cmp	r0, #0
 803cbe0:	dbf1      	blt.n	803cbc6 <__swhatbuf_r+0x12>
 803cbe2:	9a01      	ldr	r2, [sp, #4]
 803cbe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803cbe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803cbec:	425a      	negs	r2, r3
 803cbee:	415a      	adcs	r2, r3
 803cbf0:	602a      	str	r2, [r5, #0]
 803cbf2:	e7ee      	b.n	803cbd2 <__swhatbuf_r+0x1e>
 803cbf4:	2340      	movs	r3, #64	; 0x40
 803cbf6:	2000      	movs	r0, #0
 803cbf8:	6023      	str	r3, [r4, #0]
 803cbfa:	b016      	add	sp, #88	; 0x58
 803cbfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0803cc00 <__smakebuf_r>:
 803cc00:	898b      	ldrh	r3, [r1, #12]
 803cc02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803cc04:	079d      	lsls	r5, r3, #30
 803cc06:	4606      	mov	r6, r0
 803cc08:	460c      	mov	r4, r1
 803cc0a:	d507      	bpl.n	803cc1c <__smakebuf_r+0x1c>
 803cc0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803cc10:	6023      	str	r3, [r4, #0]
 803cc12:	6123      	str	r3, [r4, #16]
 803cc14:	2301      	movs	r3, #1
 803cc16:	6163      	str	r3, [r4, #20]
 803cc18:	b002      	add	sp, #8
 803cc1a:	bd70      	pop	{r4, r5, r6, pc}
 803cc1c:	ab01      	add	r3, sp, #4
 803cc1e:	466a      	mov	r2, sp
 803cc20:	f7ff ffc8 	bl	803cbb4 <__swhatbuf_r>
 803cc24:	9900      	ldr	r1, [sp, #0]
 803cc26:	4605      	mov	r5, r0
 803cc28:	4630      	mov	r0, r6
 803cc2a:	f7ff f993 	bl	803bf54 <_malloc_r>
 803cc2e:	b948      	cbnz	r0, 803cc44 <__smakebuf_r+0x44>
 803cc30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803cc34:	059a      	lsls	r2, r3, #22
 803cc36:	d4ef      	bmi.n	803cc18 <__smakebuf_r+0x18>
 803cc38:	f023 0303 	bic.w	r3, r3, #3
 803cc3c:	f043 0302 	orr.w	r3, r3, #2
 803cc40:	81a3      	strh	r3, [r4, #12]
 803cc42:	e7e3      	b.n	803cc0c <__smakebuf_r+0xc>
 803cc44:	4b0d      	ldr	r3, [pc, #52]	; (803cc7c <__smakebuf_r+0x7c>)
 803cc46:	62b3      	str	r3, [r6, #40]	; 0x28
 803cc48:	89a3      	ldrh	r3, [r4, #12]
 803cc4a:	6020      	str	r0, [r4, #0]
 803cc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803cc50:	81a3      	strh	r3, [r4, #12]
 803cc52:	9b00      	ldr	r3, [sp, #0]
 803cc54:	6163      	str	r3, [r4, #20]
 803cc56:	9b01      	ldr	r3, [sp, #4]
 803cc58:	6120      	str	r0, [r4, #16]
 803cc5a:	b15b      	cbz	r3, 803cc74 <__smakebuf_r+0x74>
 803cc5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cc60:	4630      	mov	r0, r6
 803cc62:	f000 f891 	bl	803cd88 <_isatty_r>
 803cc66:	b128      	cbz	r0, 803cc74 <__smakebuf_r+0x74>
 803cc68:	89a3      	ldrh	r3, [r4, #12]
 803cc6a:	f023 0303 	bic.w	r3, r3, #3
 803cc6e:	f043 0301 	orr.w	r3, r3, #1
 803cc72:	81a3      	strh	r3, [r4, #12]
 803cc74:	89a0      	ldrh	r0, [r4, #12]
 803cc76:	4305      	orrs	r5, r0
 803cc78:	81a5      	strh	r5, [r4, #12]
 803cc7a:	e7cd      	b.n	803cc18 <__smakebuf_r+0x18>
 803cc7c:	0803ca0d 	.word	0x0803ca0d

0803cc80 <__malloc_lock>:
 803cc80:	4801      	ldr	r0, [pc, #4]	; (803cc88 <__malloc_lock+0x8>)
 803cc82:	f7ff bf95 	b.w	803cbb0 <__retarget_lock_acquire_recursive>
 803cc86:	bf00      	nop
 803cc88:	240267e0 	.word	0x240267e0

0803cc8c <__malloc_unlock>:
 803cc8c:	4801      	ldr	r0, [pc, #4]	; (803cc94 <__malloc_unlock+0x8>)
 803cc8e:	f7ff bf90 	b.w	803cbb2 <__retarget_lock_release_recursive>
 803cc92:	bf00      	nop
 803cc94:	240267e0 	.word	0x240267e0

0803cc98 <__sread>:
 803cc98:	b510      	push	{r4, lr}
 803cc9a:	460c      	mov	r4, r1
 803cc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cca0:	f000 f894 	bl	803cdcc <_read_r>
 803cca4:	2800      	cmp	r0, #0
 803cca6:	bfab      	itete	ge
 803cca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803ccaa:	89a3      	ldrhlt	r3, [r4, #12]
 803ccac:	181b      	addge	r3, r3, r0
 803ccae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803ccb2:	bfac      	ite	ge
 803ccb4:	6563      	strge	r3, [r4, #84]	; 0x54
 803ccb6:	81a3      	strhlt	r3, [r4, #12]
 803ccb8:	bd10      	pop	{r4, pc}

0803ccba <__swrite>:
 803ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803ccbe:	461f      	mov	r7, r3
 803ccc0:	898b      	ldrh	r3, [r1, #12]
 803ccc2:	05db      	lsls	r3, r3, #23
 803ccc4:	4605      	mov	r5, r0
 803ccc6:	460c      	mov	r4, r1
 803ccc8:	4616      	mov	r6, r2
 803ccca:	d505      	bpl.n	803ccd8 <__swrite+0x1e>
 803cccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ccd0:	2302      	movs	r3, #2
 803ccd2:	2200      	movs	r2, #0
 803ccd4:	f000 f868 	bl	803cda8 <_lseek_r>
 803ccd8:	89a3      	ldrh	r3, [r4, #12]
 803ccda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803ccde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cce2:	81a3      	strh	r3, [r4, #12]
 803cce4:	4632      	mov	r2, r6
 803cce6:	463b      	mov	r3, r7
 803cce8:	4628      	mov	r0, r5
 803ccea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803ccee:	f000 b817 	b.w	803cd20 <_write_r>

0803ccf2 <__sseek>:
 803ccf2:	b510      	push	{r4, lr}
 803ccf4:	460c      	mov	r4, r1
 803ccf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ccfa:	f000 f855 	bl	803cda8 <_lseek_r>
 803ccfe:	1c43      	adds	r3, r0, #1
 803cd00:	89a3      	ldrh	r3, [r4, #12]
 803cd02:	bf15      	itete	ne
 803cd04:	6560      	strne	r0, [r4, #84]	; 0x54
 803cd06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cd0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cd0e:	81a3      	strheq	r3, [r4, #12]
 803cd10:	bf18      	it	ne
 803cd12:	81a3      	strhne	r3, [r4, #12]
 803cd14:	bd10      	pop	{r4, pc}

0803cd16 <__sclose>:
 803cd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd1a:	f000 b813 	b.w	803cd44 <_close_r>
	...

0803cd20 <_write_r>:
 803cd20:	b538      	push	{r3, r4, r5, lr}
 803cd22:	4d07      	ldr	r5, [pc, #28]	; (803cd40 <_write_r+0x20>)
 803cd24:	4604      	mov	r4, r0
 803cd26:	4608      	mov	r0, r1
 803cd28:	4611      	mov	r1, r2
 803cd2a:	2200      	movs	r2, #0
 803cd2c:	602a      	str	r2, [r5, #0]
 803cd2e:	461a      	mov	r2, r3
 803cd30:	f7ed f93f 	bl	8029fb2 <_write>
 803cd34:	1c43      	adds	r3, r0, #1
 803cd36:	d102      	bne.n	803cd3e <_write_r+0x1e>
 803cd38:	682b      	ldr	r3, [r5, #0]
 803cd3a:	b103      	cbz	r3, 803cd3e <_write_r+0x1e>
 803cd3c:	6023      	str	r3, [r4, #0]
 803cd3e:	bd38      	pop	{r3, r4, r5, pc}
 803cd40:	240267e4 	.word	0x240267e4

0803cd44 <_close_r>:
 803cd44:	b538      	push	{r3, r4, r5, lr}
 803cd46:	4d06      	ldr	r5, [pc, #24]	; (803cd60 <_close_r+0x1c>)
 803cd48:	2300      	movs	r3, #0
 803cd4a:	4604      	mov	r4, r0
 803cd4c:	4608      	mov	r0, r1
 803cd4e:	602b      	str	r3, [r5, #0]
 803cd50:	f7ed f94b 	bl	8029fea <_close>
 803cd54:	1c43      	adds	r3, r0, #1
 803cd56:	d102      	bne.n	803cd5e <_close_r+0x1a>
 803cd58:	682b      	ldr	r3, [r5, #0]
 803cd5a:	b103      	cbz	r3, 803cd5e <_close_r+0x1a>
 803cd5c:	6023      	str	r3, [r4, #0]
 803cd5e:	bd38      	pop	{r3, r4, r5, pc}
 803cd60:	240267e4 	.word	0x240267e4

0803cd64 <_fstat_r>:
 803cd64:	b538      	push	{r3, r4, r5, lr}
 803cd66:	4d07      	ldr	r5, [pc, #28]	; (803cd84 <_fstat_r+0x20>)
 803cd68:	2300      	movs	r3, #0
 803cd6a:	4604      	mov	r4, r0
 803cd6c:	4608      	mov	r0, r1
 803cd6e:	4611      	mov	r1, r2
 803cd70:	602b      	str	r3, [r5, #0]
 803cd72:	f7ed f946 	bl	802a002 <_fstat>
 803cd76:	1c43      	adds	r3, r0, #1
 803cd78:	d102      	bne.n	803cd80 <_fstat_r+0x1c>
 803cd7a:	682b      	ldr	r3, [r5, #0]
 803cd7c:	b103      	cbz	r3, 803cd80 <_fstat_r+0x1c>
 803cd7e:	6023      	str	r3, [r4, #0]
 803cd80:	bd38      	pop	{r3, r4, r5, pc}
 803cd82:	bf00      	nop
 803cd84:	240267e4 	.word	0x240267e4

0803cd88 <_isatty_r>:
 803cd88:	b538      	push	{r3, r4, r5, lr}
 803cd8a:	4d06      	ldr	r5, [pc, #24]	; (803cda4 <_isatty_r+0x1c>)
 803cd8c:	2300      	movs	r3, #0
 803cd8e:	4604      	mov	r4, r0
 803cd90:	4608      	mov	r0, r1
 803cd92:	602b      	str	r3, [r5, #0]
 803cd94:	f7ed f945 	bl	802a022 <_isatty>
 803cd98:	1c43      	adds	r3, r0, #1
 803cd9a:	d102      	bne.n	803cda2 <_isatty_r+0x1a>
 803cd9c:	682b      	ldr	r3, [r5, #0]
 803cd9e:	b103      	cbz	r3, 803cda2 <_isatty_r+0x1a>
 803cda0:	6023      	str	r3, [r4, #0]
 803cda2:	bd38      	pop	{r3, r4, r5, pc}
 803cda4:	240267e4 	.word	0x240267e4

0803cda8 <_lseek_r>:
 803cda8:	b538      	push	{r3, r4, r5, lr}
 803cdaa:	4d07      	ldr	r5, [pc, #28]	; (803cdc8 <_lseek_r+0x20>)
 803cdac:	4604      	mov	r4, r0
 803cdae:	4608      	mov	r0, r1
 803cdb0:	4611      	mov	r1, r2
 803cdb2:	2200      	movs	r2, #0
 803cdb4:	602a      	str	r2, [r5, #0]
 803cdb6:	461a      	mov	r2, r3
 803cdb8:	f7ed f93e 	bl	802a038 <_lseek>
 803cdbc:	1c43      	adds	r3, r0, #1
 803cdbe:	d102      	bne.n	803cdc6 <_lseek_r+0x1e>
 803cdc0:	682b      	ldr	r3, [r5, #0]
 803cdc2:	b103      	cbz	r3, 803cdc6 <_lseek_r+0x1e>
 803cdc4:	6023      	str	r3, [r4, #0]
 803cdc6:	bd38      	pop	{r3, r4, r5, pc}
 803cdc8:	240267e4 	.word	0x240267e4

0803cdcc <_read_r>:
 803cdcc:	b538      	push	{r3, r4, r5, lr}
 803cdce:	4d07      	ldr	r5, [pc, #28]	; (803cdec <_read_r+0x20>)
 803cdd0:	4604      	mov	r4, r0
 803cdd2:	4608      	mov	r0, r1
 803cdd4:	4611      	mov	r1, r2
 803cdd6:	2200      	movs	r2, #0
 803cdd8:	602a      	str	r2, [r5, #0]
 803cdda:	461a      	mov	r2, r3
 803cddc:	f7ed f8cc 	bl	8029f78 <_read>
 803cde0:	1c43      	adds	r3, r0, #1
 803cde2:	d102      	bne.n	803cdea <_read_r+0x1e>
 803cde4:	682b      	ldr	r3, [r5, #0]
 803cde6:	b103      	cbz	r3, 803cdea <_read_r+0x1e>
 803cde8:	6023      	str	r3, [r4, #0]
 803cdea:	bd38      	pop	{r3, r4, r5, pc}
 803cdec:	240267e4 	.word	0x240267e4

0803cdf0 <_init>:
 803cdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cdf2:	bf00      	nop
 803cdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cdf6:	bc08      	pop	{r3}
 803cdf8:	469e      	mov	lr, r3
 803cdfa:	4770      	bx	lr

0803cdfc <_fini>:
 803cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cdfe:	bf00      	nop
 803ce00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ce02:	bc08      	pop	{r3}
 803ce04:	469e      	mov	lr, r3
 803ce06:	4770      	bx	lr
