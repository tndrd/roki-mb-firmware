
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cbf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ad38  0801ce94  0801ce94  0002ce94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08037bcc  08037bcc  00047bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08037bd4  08037bd4  00047bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08037bdc  08037bdc  00047bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  08037be4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003480  240001e8  08037dcc  000501e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003668  08037dcc  00053668  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000501e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000514c5  00000000  00000000  00050216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000759b  00000000  00000000  000a16db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003658  00000000  00000000  000a8c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000033d8  00000000  00000000  000ac2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045497  00000000  00000000  000af6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a988  00000000  00000000  000f4b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018e608  00000000  00000000  0012f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002bdacf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f844  00000000  00000000  002bdb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ce7c 	.word	0x0801ce7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0801ce7c 	.word	0x0801ce7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:

#include "BHYWrapper.hpp"

static int test = 0;

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210e      	movs	r1, #14
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f01b fb96 	bl	801bdd4 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801ce94 	.word	0x0801ce94
 80006b8:	0801cea0 	.word	0x0801cea0
 80006bc:	0801cecc 	.word	0x0801cecc

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa6f 	bl	8000bc4 <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, &bhy2_spi_read, &bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fb30 	bl	8008d5e <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fb0a 	bl	8008d2e <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 f9e5 	bl	8008b06 <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f008 fa77 	bl	8008c54 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fa82 	bl	8008c8c <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 faa7 	bl	8008cf6 <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 f9d2 	bl	8008b6e <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f008 f9f7 	bl	8008be6 <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f008 fb89 	bl	8008f2c <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f008 f9f2 	bl	8008c24 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fb65 	bl	8008f2c <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f008 f956 	bl	8008b3a <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f008 fa7a 	bl	8008db2 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f94f 	bl	8000b7c <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f955 	bl	8000b96 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f007 ffb5 	bl	8008862 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fa7e 	bl	8008e10 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f008 f8c6 	bl	8008ac4 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000d6d 	.word	0x08000d6d
 800095c:	08000ce9 	.word	0x08000ce9
 8000960:	08000c5d 	.word	0x08000c5d
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801d440 	.word	0x0801d440
 800096c:	080009f1 	.word	0x080009f1

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 f99c 	bl	8008cc2 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d014      	beq.n	80009ba <_ZN10BHYWrapper4PollEv+0x4a>
		bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8f0 	bl	8000b7c <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8f6 	bl	8000b96 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f007 ff56 	bl	8008862 <bhy2_get_and_process_fifo>
		return true;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <_ZN10BHYWrapper4PollEv+0x4c>
	}

	return false;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009c4:	b4b0      	push	{r4, r5, r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d6:	4615      	mov	r5, r2
 80009d8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	602b      	str	r3, [r5, #0]
}
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bcb0      	pop	{r4, r5, r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
	bhy2_data_quaternion qtData;
	test++;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb8>)
 8000a06:	6013      	str	r3, [r2, #0]
	assert(frame);
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x2a>
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xbc>)
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xc0>)
 8000a12:	2178      	movs	r1, #120	; 0x78
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xc4>)
 8000a16:	f01b f9dd 	bl	801bdd4 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	623b      	str	r3, [r7, #32]
	auto &quaternion = frame->Orientation;
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	61fb      	str	r3, [r7, #28]

	if (cbInfo->data_size != CallbackDataSize)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	2b0b      	cmp	r3, #11
 8000a2a:	d139      	bne.n	8000aa0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb0>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f009 fbff 	bl	800a23a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	741a      	strb	r2, [r3, #16]

	uint32_t timeData = *cbInfo->time_stamp; /* Store the last timestamp */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
	timeData *= 15625;
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	61bb      	str	r3, [r7, #24]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	0a5b      	lsrs	r3, r3, #9
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xc8>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	09da      	lsrs	r2, r3, #7
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xcc>)
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	605a      	str	r2, [r3, #4]

	quaternion.X = qtData.x;
 8000a7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000a86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000a8e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000a96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	80da      	strh	r2, [r3, #6]
 8000a9e:	e000      	b.n	8000aa2 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xb2>
		return;
 8000aa0:	bf00      	nop
	/*
	quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
			/ 3.141592653589793f; */
}
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000204 	.word	0x24000204
 8000aac:	0801cee8 	.word	0x0801cee8
 8000ab0:	0801cef0 	.word	0x0801cef0
 8000ab4:	0801cecc 	.word	0x0801cecc
 8000ab8:	00044b83 	.word	0x00044b83
 8000abc:	3b9aca00 	.word	0x3b9aca00

08000ac0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t* dest, uint8_t* size) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d105      	bne.n	8000ade <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000ad4:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000ad6:	2193      	movs	r1, #147	; 0x93
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000ada:	f01b f97b 	bl	801bdd4 <__assert_func>
	assert(size);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000ae8:	2194      	movs	r1, #148	; 0x94
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000aec:	f01b f972 	bl	801bdd4 <__assert_func>

	uint8_t *ptr = dest;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3302      	adds	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3302      	adds	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3302      	adds	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3302      	adds	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
	/*
	*reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	ptr += sizeof(float);
	*/

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	7c1a      	ldrb	r2, [r3, #16]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2211      	movs	r2, #17
 8000b62:	701a      	strb	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0801cf3c 	.word	0x0801cf3c
 8000b70:	0801cf44 	.word	0x0801cf44
 8000b74:	0801cecc 	.word	0x0801cecc
 8000b78:	0801cf80 	.word	0x0801cf80

08000b7c <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f811 	bl	8000bae <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	24000208 	.word	0x24000208

08000be4 <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Transmit_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Transmit(mSPI, data, size, 10);
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <_Z11spiTransmitPht+0x38>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	f012 fee5 	bl	80139c8 <HAL_SPI_Transmit>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_Z11spiTransmitPht+0x38>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf0c      	ite	eq
 8000c0a:	2301      	moveq	r3, #1
 8000c0c:	2300      	movne	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	b25b      	sxtb	r3, r3
  }
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000208 	.word	0x24000208

08000c20 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Receive_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Receive(mSPI, data, size,  10);
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <_Z9spiReceivPht+0x38>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	230a      	movs	r3, #10
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	f013 f8b9 	bl	8013dac <HAL_SPI_Receive>
  //HAL_Delay(10);
  //Ожидать завершения приема
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_Z9spiReceivPht+0x38>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf0c      	ite	eq
 8000c46:	2301      	moveq	r3, #1
 8000c48:	2300      	movne	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b25b      	sxtb	r3, r3
  }
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000208 	.word	0x24000208

08000c5c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2110      	movs	r1, #16
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000c72:	f00e f8a1 	bl	800edb8 <HAL_GPIO_WritePin>

  reg_addr = reg_addr | 0x80;//записываем в старший бит адреса 1 для чтения данных
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73fb      	strb	r3, [r7, #15]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000c80:	f107 030f 	add.w	r3, r7, #15
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffac 	bl	8000be4 <_Z11spiTransmitPht>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf0c      	ite	eq
 8000c92:	2301      	moveq	r3, #1
 8000c94:	2300      	movne	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <_Z13bhy2_spi_readhPhmPv+0x46>
    return IMU_ERR_SPI;
 8000c9c:	f06f 0301 	mvn.w	r3, #1
 8000ca0:	e01b      	b.n	8000cda <_Z13bhy2_spi_readhPhmPv+0x7e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f7ff ffb9 	bl	8000c20 <_Z9spiReceivPht>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf14      	ite	ne
 8000cb4:	2301      	movne	r3, #1
 8000cb6:	2300      	moveq	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <_Z13bhy2_spi_readhPhmPv+0x70>
  {
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000cc4:	f00e f878 	bl	800edb8 <HAL_GPIO_WritePin>
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e006      	b.n	8000cda <_Z13bhy2_spi_readhPhmPv+0x7e>
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000cd2:	f00e f871 	bl	800edb8 <HAL_GPIO_WritePin>
  return IMU_ERR_SPI;
 8000cd6:	f06f 0301 	mvn.w	r3, #1
  }
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	58020000 	.word	0x58020000

08000ce8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d902      	bls.n	8000d04 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000cfe:	f06f 0303 	mvn.w	r3, #3
 8000d02:	e029      	b.n	8000d58 <_Z14bhy2_spi_writehPKhmPv+0x70>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr & 0x7F; //записываем в старший бит адреса 0 для записи данных
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000d0e:	701a      	strb	r2, [r3, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f01b f8c6 	bl	801bea8 <memcpy>
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000d22:	f00e f849 	bl	800edb8 <HAL_GPIO_WritePin>
  if( spiTransmit( buffer, length + 1 ) )
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000d32:	f7ff ff57 	bl	8000be4 <_Z11spiTransmitPht>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
    return IMU_ERR_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e006      	b.n	8000d58 <_Z14bhy2_spi_writehPKhmPv+0x70>
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000d50:	f00e f832 	bl	800edb8 <HAL_GPIO_WritePin>
  return IMU_ERR_I2C;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2400020c 	.word	0x2400020c
 8000d64:	2400020d 	.word	0x2400020d
 8000d68:	58020000 	.word	0x58020000

08000d6c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d7c:	d308      	bcc.n	8000d90 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <_Z13bhy2_delay_usmPv+0x44>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	099b      	lsrs	r3, r3, #6
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00a ff41 	bl	800bc10 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000d8e:	e00b      	b.n	8000da8 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000da4:	bf00      	nop
    while( us-- ) {
 8000da6:	e7f3      	b.n	8000d90 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	10624dd3 	.word	0x10624dd3

08000db4 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df0:	d205      	bcs.n	8000dfe <_ZSt16__deque_buf_sizej+0x1c>
 8000df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfc:	e000      	b.n	8000e00 <_ZSt16__deque_buf_sizej+0x1e>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f9f4 	bl	8002204 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fa60 	bl	80022f6 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f001 fa89 	bl	8002360 <_ZNSaIhED1Ev>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fa6c 	bl	8002340 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffeb 	bl	8000e58 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:

	size_t TimeoutS;

	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffb6 	bl	8000e0c <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3328      	adds	r3, #40	; 0x28
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fa12 	bl	80022ce <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3354      	adds	r3, #84	; 0x54
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffdb 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	665a      	str	r2, [r3, #100]	; 0x64
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	669a      	str	r2, [r3, #104]	; 0x68
		assert(uart != NULL);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x4e>
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x58>)
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x5c>)
 8000ed2:	214a      	movs	r1, #74	; 0x4a
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>)
 8000ed6:	f01a ff7d 	bl	801bdd4 <__assert_func>
	}
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0801cf88 	.word	0x0801cf88
 8000ee8:	0801cf98 	.word	0x0801cf98
 8000eec:	0801cfd0 	.word	0x0801cfd0

08000ef0 <_ZN11QueueSender14GetMessageModeERK7Request>:

	MessageModeT GetMessageMode(const Request &request) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
		return request.MetaInfo;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	7c1b      	ldrb	r3, [r3, #16]
	}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_ZN11QueueSender14SetMessageModeER8Responceh>:

	void SetMessageMode(Responce &responce, MessageModeT mode) {
 8000f0a:	b480      	push	{r7}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71fb      	strb	r3, [r7, #7]
		responce.MetaInfo = mode;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	735a      	strb	r2, [r3, #13]
	}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
		switch (GetMessageMode(request)) {
 8000f34:	6839      	ldr	r1, [r7, #0]
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffda 	bl	8000ef0 <_ZN11QueueSender14GetMessageModeERK7Request>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	dc02      	bgt.n	8000f48 <_ZN11QueueSender10AddRequestEO7Request+0x1e>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da03      	bge.n	8000f4e <_ZN11QueueSender10AddRequestEO7Request+0x24>
			break;
		case MessageMode::Priority:
			Requests.emplace_front(std::move(request));
			break;
		}
	}
 8000f46:	e016      	b.n	8000f76 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
		switch (GetMessageMode(request)) {
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d00a      	beq.n	8000f62 <_ZN11QueueSender10AddRequestEO7Request+0x38>
	}
 8000f4c:	e013      	b.n	8000f76 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_back(std::move(request));
 8000f4e:	687c      	ldr	r4, [r7, #4]
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f001 fa44 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f001 fa4a 	bl	80023f4 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8000f60:	e009      	b.n	8000f76 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_front(std::move(request));
 8000f62:	687c      	ldr	r4, [r7, #4]
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f001 fa3a 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f001 fa6b 	bl	800244a <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
			break;
 8000f74:	bf00      	nop
	}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}

08000f7e <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3328      	adds	r3, #40	; 0x28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fa89 	bl	80024a2 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
	}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fa9b 	bl	80024ec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffe5 	bl	8000fa0 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZN8ResponceC1EOS_>:
struct Responce {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffe5 	bl	8000fc0 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	7b1a      	ldrb	r2, [r3, #12]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	731a      	strb	r2, [r3, #12]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	7b5a      	ldrb	r2, [r3, #13]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	735a      	strb	r2, [r3, #13]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	7b9a      	ldrb	r2, [r3, #14]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	739a      	strb	r2, [r3, #14]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN8ResponceD1Ev>:
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f001 f9c0 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f7ff ff9d 	bl	8000f7e <_ZNK11QueueSender11HasResponceEv>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <_ZN11QueueSender11GetResponceEv+0x22>
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <_ZN11QueueSender11GetResponceEv+0x54>)
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <_ZN11QueueSender11GetResponceEv+0x58>)
 800104e:	2167      	movs	r1, #103	; 0x67
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8001052:	f01a febf 	bl	801bdd4 <__assert_func>
		auto responce = std::move(Responces.front());
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3328      	adds	r3, #40	; 0x28
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fa2e 	bl	80024bc <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8001060:	4603      	mov	r3, r0
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fa37 	bl	80024d6 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffb7 	bl	8000fe0 <_ZN8ResponceC1EOS_>
		Responces.pop();
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3328      	adds	r3, #40	; 0x28
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fa53 	bl	8002522 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 800107c:	bf00      	nop
	}
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0801cfec 	.word	0x0801cfec
 800108c:	0801cffc 	.word	0x0801cffc
 8001090:	0801cfd0 	.word	0x0801cfd0

08001094 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
		if (!Requests.empty() && !WaitResponce) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fa4b 	bl	800253a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010b6:	f083 0301 	eor.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <_ZN11QueueSender15ProcessRequestsEv+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d078      	beq.n	80011bc <_ZN11QueueSender15ProcessRequestsEv+0x128>
			auto &request = Requests.front();
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fa46 	bl	800255e <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 80010d2:	62f8      	str	r0, [r7, #44]	; 0x2c
			auto &data = request.Data;
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if (GetMessageMode(request) == MessageMode::Notify) {
 80010d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff08 	bl	8000ef0 <_ZN11QueueSender14GetMessageModeERK7Request>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	bf0c      	ite	eq
 80010e6:	2301      	moveq	r3, #1
 80010e8:	2300      	movne	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d026      	beq.n	800113e <_ZN11QueueSender15ProcessRequestsEv+0xaa>
				Responces.emplace(CreateResponce( { }, MessageMode::Notify));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff feb3 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 800110c:	f107 000c 	add.w	r0, r7, #12
 8001110:	f107 021c 	add.w	r2, r7, #28
 8001114:	2302      	movs	r3, #2
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f000 f860 	bl	80011dc <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	4620      	mov	r0, r4
 8001124:	f001 fa2f 	bl	8002586 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff73 	bl	8001018 <_ZN8ResponceD1Ev>
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f936 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
				return;
 800113c:	e03e      	b.n	80011bc <_ZN11QueueSender15ProcessRequestsEv+0x128>
			}

			CurrentResponceBuffer.resize(request.ResponceSize);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f001 fa2d 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentRequestMode = GetMessageMode(request);
 8001150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fecc 	bl	8000ef0 <_ZN11QueueSender14GetMessageModeERK7Request>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			WaitResponce = true;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3354      	adds	r3, #84	; 0x54
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fa4d 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001178:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3354      	adds	r3, #84	; 0x54
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fa56 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001184:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4629      	mov	r1, r5
 800118c:	4620      	mov	r0, r4
 800118e:	f014 fc77 	bl	8015a80 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8001196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001198:	f001 fa3b 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 800119c:	4605      	mov	r5, r0
 800119e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011a0:	f001 fa46 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ac:	4629      	mov	r1, r5
 80011ae:	4620      	mov	r0, r4
 80011b0:	f014 fb28 	bl	8015804 <HAL_UART_Transmit>

			Requests.pop_front();
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fa49 	bl	800264e <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		}
	}
 80011bc:	3730      	adds	r7, #48	; 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bdb0      	pop	{r4, r5, r7, pc}

080011c2 <_ZN8ResponceC1Ev>:
struct Responce {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe50 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	70fb      	strb	r3, [r7, #3]
			MessageModeT messageMode) {
		Responce responce;
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ffe9 	bl	80011c2 <_ZN8ResponceC1Ev>
		responce.Data = data;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fa56 	bl	80026a6 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	731a      	strb	r2, [r3, #12]
		responce.Error = 0;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	739a      	strb	r2, [r3, #14]
		SetMessageMode(responce, messageMode);
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	461a      	mov	r2, r3
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f7ff fe7c 	bl	8000f0a <_ZN11QueueSender14SetMessageModeER8Responceh>
		return responce;
 8001212:	bf00      	nop
	}
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 f81f 	bl	800226a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZN7RequestC1Ev>:
struct Request {
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe16 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <_ZN7RequestD1Ev>:
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f8a4 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fb02 	bl	8002884 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3334      	adds	r3, #52	; 0x34
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffd6 	bl	8001236 <_ZN7RequestC1Ev>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3348      	adds	r3, #72	; 0x48
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdef 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	659a      	str	r2, [r3, #88]	; 0x58
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4e>
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x58>)
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 80012b2:	21b3      	movs	r1, #179	; 0xb3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 80012b6:	f01a fd8d 	bl	801bdd4 <__assert_func>
	}
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0801cf88 	.word	0x0801cf88
 80012c8:	0801d020 	.word	0x0801d020
 80012cc:	0801cfd0 	.word	0x0801cfd0

080012d0 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3328      	adds	r3, #40	; 0x28
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	f014 fbc9 	bl	8015a80 <HAL_UART_Receive_IT>
	}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fad3 	bl	80028ac <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 8001306:	4603      	mov	r3, r0
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
	}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8001316:	b590      	push	{r4, r7, lr}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <_ZN13HeadInterface4SendERK8Responce+0x16>
 800132a:	e7f9      	b.n	8001320 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f001 f97e 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001334:	4603      	mov	r3, r0
 8001336:	3306      	adds	r3, #6
 8001338:	617b      	str	r3, [r7, #20]
		CurrentResponceBuffer.resize(size);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3348      	adds	r3, #72	; 0x48
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	4618      	mov	r0, r3
 8001342:	f001 f932 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3348      	adds	r3, #72	; 0x48
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f961 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001350:	6138      	str	r0, [r7, #16]

		*(ptr++) = SOM1Val;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	613a      	str	r2, [r7, #16]
 8001358:	22ff      	movs	r2, #255	; 0xff
 800135a:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	613a      	str	r2, [r7, #16]
 8001362:	22aa      	movs	r2, #170	; 0xaa
 8001364:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	613a      	str	r2, [r7, #16]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	7b12      	ldrb	r2, [r2, #12]
 8001370:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	613a      	str	r2, [r7, #16]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7b52      	ldrb	r2, [r2, #13]
 800137c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	613a      	str	r2, [r7, #16]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	7b92      	ldrb	r2, [r2, #14]
 8001388:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fa9a 	bl	80028c6 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001392:	4604      	mov	r4, r0
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 f94a 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	6938      	ldr	r0, [r7, #16]
 80013a4:	f01a fd80 	bl	801bea8 <memcpy>

		ptr += responce.Data.size();
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f940 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

		*ptr = SOM3Val;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	22af      	movs	r2, #175	; 0xaf
 80013bc:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 f930 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013d0:	60f8      	str	r0, [r7, #12]

		HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(), sz);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f919 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 80013e0:	4601      	mov	r1, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	4620      	mov	r0, r4
 80013ea:	f014 faa1 	bl	8015930 <HAL_UART_Transmit_IT>
	}
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <_ZN7RequestC1EOS_>:
struct Request {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fdda 	bl	8000fc0 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	7c1a      	ldrb	r2, [r3, #16]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	741a      	strb	r2, [r3, #16]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7c5a      	ldrb	r2, [r3, #17]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	745a      	strb	r2, [r3, #17]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f7ff ff5b 	bl	80012f6 <_ZNK13HeadInterface10HasRequestEv>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <_ZN13HeadInterface10GetRequestEv+0x22>
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <_ZN13HeadInterface10GetRequestEv+0x54>)
 800144a:	21df      	movs	r1, #223	; 0xdf
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <_ZN13HeadInterface10GetRequestEv+0x58>)
 800144e:	f01a fcc1 	bl	801bdd4 <__assert_func>
		auto request = std::move(Requests.front());
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fa45 	bl	80028e4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 800145a:	4603      	mov	r3, r0
 800145c:	4618      	mov	r0, r3
 800145e:	f000 ffbe 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffc5 	bl	80013f6 <_ZN7RequestC1EOS_>
		Requests.pop();
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fa45 	bl	80028fe <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8001474:	bf00      	nop
	}
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0801d05c 	.word	0x0801d05c
 8001484:	0801d06c 	.word	0x0801d06c
 8001488:	0801cfd0 	.word	0x0801cfd0

0800148c <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80014ac:	2301      	movs	r3, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_ZN7RequestaSEOS_>:
struct Request {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fa36 	bl	800293a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7c1a      	ldrb	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	741a      	strb	r2, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7c5a      	ldrb	r2, [r3, #17]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	745a      	strb	r2, [r3, #17]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	2b07      	cmp	r3, #7
 80014fe:	f200 80d6 	bhi.w	80016ae <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001529 	.word	0x08001529
 800150c:	08001553 	.word	0x08001553
 8001510:	0800157d 	.word	0x0800157d
 8001514:	080015a1 	.word	0x080015a1
 8001518:	080015d7 	.word	0x080015d7
 800151c:	080015fb 	.word	0x080015fb
 8001520:	0800162d 	.word	0x0800162d
 8001524:	08001645 	.word	0x08001645
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d10b      	bne.n	800154a <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3328      	adds	r3, #40	; 0x28
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	f014 fa9c 	bl	8015a80 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001548:	e0b5      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fec0 	bl	80012d0 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001550:	e0b1      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001558:	2baa      	cmp	r3, #170	; 0xaa
 800155a:	d10b      	bne.n	8001574 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3328      	adds	r3, #40	; 0x28
 800156a:	2201      	movs	r2, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f014 fa87 	bl	8015a80 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001572:	e0a0      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff feab 	bl	80012d0 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 800157a:	e09c      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3328      	adds	r3, #40	; 0x28
 8001596:	2201      	movs	r2, #1
 8001598:	4619      	mov	r1, r3
 800159a:	f014 fa71 	bl	8015a80 <HAL_UART_Receive_IT>
			break;
 800159e:	e08a      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f000 fff6 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3328      	adds	r3, #40	; 0x28
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f014 fa56 	bl	8015a80 <HAL_UART_Receive_IT>
			break;
 80015d4:	e06f      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2205      	movs	r2, #5
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3328      	adds	r3, #40	; 0x28
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	f014 fa44 	bl	8015a80 <HAL_UART_Receive_IT>
			break;
 80015f8:	e05d      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2206      	movs	r2, #6
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3334      	adds	r3, #52	; 0x34
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fffc 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 800161a:	4601      	mov	r1, r0
					RequestSize);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4620      	mov	r0, r4
 8001626:	f014 fa2b 	bl	8015a80 <HAL_UART_Receive_IT>
			break;
 800162a:	e044      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2207      	movs	r2, #7
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3328      	adds	r3, #40	; 0x28
 800163a:	2201      	movs	r2, #1
 800163c:	4619      	mov	r1, r3
 800163e:	f014 fa1f 	bl	8015a80 <HAL_UART_Receive_IT>
			break;
 8001642:	e038      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800164a:	2baf      	cmp	r3, #175	; 0xaf
 800164c:	d12b      	bne.n	80016a6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 800164e:	687c      	ldr	r4, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3334      	adds	r3, #52	; 0x34
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fec2 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f001 f959 	bl	8002916 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fbf1 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff ff0e 	bl	80014b8 <_ZN7RequestaSEOS_>
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fdd5 	bl	8001250 <_ZN7RequestD1Ev>
			}
			ResetReadState();
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fe12 	bl	80012d0 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80016ac:	e003      	b.n	80016b6 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe0e 	bl	80012d0 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop

080016c0 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>:
};

struct IMUFrame: public BHYWrapper::BHYFrame {
	size_t Seq;

	IMUFrame(const BHYWrapper::BHYFrame &frame, size_t seq) :
 80016c0:	b4b0      	push	{r4, r5, r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
			BHYFrame { frame }, Seq { seq } {
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	6023      	str	r3, [r4, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	615a      	str	r2, [r3, #20]
	}
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bcb0      	pop	{r4, r5, r7}
 80016ec:	4770      	bx	lr

080016ee <_ZN17IMUFrameContainer5ResetEv>:

		static constexpr size_t Size = 2 * sizeof(uint16_t);
	};

public:
	void Reset() {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001708:	f001 f92c 	bl	8002964 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>
		FirstSeq = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 800171a:	b590      	push	{r4, r7, lr}
 800171c:	b089      	sub	sp, #36	; 0x24
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front( { frame, TestSeq++ });
 8001724:	687c      	ldr	r4, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001730:	f107 0008 	add.w	r0, r7, #8
 8001734:	461a      	mov	r2, r3
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	f7ff ffc2 	bl	80016c0 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4619      	mov	r1, r3
 8001742:	4620      	mov	r0, r4
 8001744:	f001 f929 	bl	800299a <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>
	}
 8001748:	bf00      	nop
 800174a:	3724      	adds	r7, #36	; 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}

08001750 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		FirstSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4618      	mov	r0, r3
 8001760:	f001 f92c 	bl	80029bc <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e03a      	b.n	80017e4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	d30b      	bcc.n	8001790 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4618      	mov	r0, r3
 800177c:	f001 f930 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	4413      	add	r3, r2
 8001788:	3b01      	subs	r3, #1
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d901      	bls.n	8001794 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8001794:	2300      	movs	r3, #0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 800179a:	2300      	movs	r3, #0
 800179c:	e022      	b.n	80017e4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 800179e:	68fc      	ldr	r4, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f91c 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80017a8:	4601      	mov	r1, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	440b      	add	r3, r1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	4620      	mov	r0, r4
 80017ba:	f001 f923 	bl	8002a04 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 80017be:	4603      	mov	r3, r0
 80017c0:	f107 0410 	add.w	r4, r7, #16
 80017c4:	461d      	mov	r5, r3
 80017c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017ce:	e884 0003 	stmia.w	r4, {r0, r1}
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	461d      	mov	r5, r3
 80017d6:	f107 0410 	add.w	r4, r7, #16
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	602b      	str	r3, [r5, #0]
		return true;
 80017e2:	2301      	movs	r3, #1
	}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdb0      	pop	{r4, r5, r7, pc}

080017ec <_ZNK17IMUFrameContainer7GetLastERN10BHYWrapper8BHYFrameE>:

	bool GetLast(BHYWrapper::BHYFrame &frame) const {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
		if (FrameQueue.empty())
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f8df 	bl	80029bc <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <_ZNK17IMUFrameContainer7GetLastERN10BHYWrapper8BHYFrameE+0x1c>
			return false;
 8001804:	2300      	movs	r3, #0
 8001806:	e00c      	b.n	8001822 <_ZNK17IMUFrameContainer7GetLastERN10BHYWrapper8BHYFrameE+0x36>
		return Get(FrameQueue.size() - 1, frame);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f001 f8e8 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001810:	4603      	mov	r3, r0
 8001812:	3b01      	subs	r3, #1
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff99 	bl	8001750 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 800181e:	4603      	mov	r3, r0
 8001820:	bf00      	nop
	}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZNK17IMUFrameContainer7GetInfoEv>:

	Info GetInfo() const {
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
		return {FirstSeq, FrameQueue.size()};
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	b29b      	uxth	r3, r3
 8001838:	81bb      	strh	r3, [r7, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	f001 f8cf 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	81fb      	strh	r3, [r7, #14]
 8001848:	2300      	movs	r3, #0
 800184a:	89ba      	ldrh	r2, [r7, #12]
 800184c:	f362 030f 	bfi	r3, r2, #0, #16
 8001850:	89fa      	ldrh	r2, [r7, #14]
 8001852:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
			return mode;
 8001868:	79fb      	ldrb	r3, [r7, #7]
		}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
			return meta;
 8001880:	79fb      	ldrb	r3, [r7, #7]
		}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7c1b      	ldrb	r3, [r3, #16]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ffe7 	bl	8001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 80018b0:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 80018b2:	f240 1181 	movw	r1, #385	; 0x181
 80018b6:	482c      	ldr	r0, [pc, #176]	; (8001968 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 80018b8:	f01a fa8c 	bl	801bdd4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fc80 	bl	80011c2 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff ffc8 	bl	800185e <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2111      	movs	r1, #17
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fe65 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fea4 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2203      	movs	r2, #3
 80018fc:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 ffe0 	bl	80028c6 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001906:	4603      	mov	r3, r0
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 800190c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800190e:	f107 0218 	add.w	r2, r7, #24
 8001912:	4619      	mov	r1, r3
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7ff ff1b 	bl	8001750 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8001920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	739a      	strb	r2, [r3, #14]
			return responce;
 8001934:	e00f      	b.n	8001956 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fe6a 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 800193e:	4601      	mov	r1, r0
 8001940:	f107 0217 	add.w	r2, r7, #23
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f8b9 	bl	8000ac0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]

		return responce;
 8001954:	bf00      	nop
	}
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	3730      	adds	r7, #48	; 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	0801d090 	.word	0x0801d090
 8001964:	0801d0d8 	.word	0x0801d0d8
 8001968:	0801cfd0 	.word	0x0801cfd0

0800196c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7c1b      	ldrb	r3, [r3, #16]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff79 	bl	8001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d006      	beq.n	8001998 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 800198e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb4>)
 8001994:	f01a fa1e 	bl	801bdd4 <__assert_func>

		Responce responce;
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fc12 	bl	80011c2 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ff5a 	bl	800185e <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2104      	movs	r1, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fdf7 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fe36 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2203      	movs	r2, #3
 80019d8:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fe18 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 80019e2:	6178      	str	r0, [r7, #20]
		auto info = container.GetInfo();
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff ff20 	bl	800182a <_ZNK17IMUFrameContainer7GetInfoEv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

		*reinterpret_cast<uint16_t*>(ptr) = info.First;
 80019ee:	8a3a      	ldrh	r2, [r7, #16]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3302      	adds	r3, #2
 80019f8:	617b      	str	r3, [r7, #20]

		*reinterpret_cast<uint16_t*>(ptr) = info.NumAv;
 80019fa:	8a7a      	ldrh	r2, [r7, #18]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3302      	adds	r3, #2
 8001a04:	617b      	str	r3, [r7, #20]

		responce.Error = ErrorCodes::Success;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	739a      	strb	r2, [r3, #14]

		return responce;
 8001a0c:	bf00      	nop
	}
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0801d12c 	.word	0x0801d12c
 8001a1c:	0801d16c 	.word	0x0801d16c
 8001a20:	0801cfd0 	.word	0x0801cfd0

08001a24 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer>:

	Responce GetLatestFrame(const Request &request,
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7c1b      	ldrb	r3, [r3, #16]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff1d 	bl	8001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d006      	beq.n	8001a50 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0x2c>
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0xc0>)
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0xc4>)
 8001a46:	f240 11bd 	movw	r1, #445	; 0x1bd
 8001a4a:	4828      	ldr	r0, [pc, #160]	; (8001aec <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0xc8>)
 8001a4c:	f01a f9c2 	bl	801bdd4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f7ff fbb6 	bl	80011c2 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff fefe 	bl	800185e <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2111      	movs	r1, #17
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd9b 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fdda 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	bf14      	ite	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	2300      	moveq	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.GetLast(imuFrame);
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	4619      	mov	r1, r3
 8001a98:	6838      	ldr	r0, [r7, #0]
 8001a9a:	f7ff fea7 	bl	80017ec <_ZNK17IMUFrameContainer7GetLastERN10BHYWrapper8BHYFrameE>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (!ok) {
 8001aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aa8:	f083 0301 	eor.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0x96>
			responce.Error = ErrorCodes::FrameUnavailable;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	739a      	strb	r2, [r3, #14]
			return responce;
 8001ab8:	e00f      	b.n	8001ada <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer+0xb6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fda8 	bl	8002612 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	f107 0217 	add.w	r2, r7, #23
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fff7 	bl	8000ac0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	739a      	strb	r2, [r3, #14]

		return responce;
 8001ad8:	bf00      	nop
	}
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0801d1bc 	.word	0x0801d1bc
 8001ae8:	0801d204 	.word	0x0801d204
 8001aec:	0801cfd0 	.word	0x0801cfd0

08001af0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request,
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
			IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Reset);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7c1b      	ldrb	r3, [r3, #16]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff feb7 	bl	8001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d006      	beq.n	8001b1c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8001b12:	f240 11db 	movw	r1, #475	; 0x1db
 8001b16:	4819      	ldr	r0, [pc, #100]	; (8001b7c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8001b18:	f01a f95c 	bl	801bdd4 <__assert_func>

		Responce responce;
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fb50 	bl	80011c2 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f7ff fe98 	bl	800185e <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fd35 	bl	80025aa <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fd74 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f7ff fdc5 	bl	80016ee <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	739a      	strb	r2, [r3, #14]

		return responce;
 8001b6a:	bf00      	nop
	}
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	0801d25c 	.word	0x0801d25c
 8001b78:	0801d2a0 	.word	0x0801d2a0
 8001b7c:	0801cfd0 	.word	0x0801cfd0

08001b80 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer>:

public:
	Responce Handle(const Request &request,
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
				IMUFrameContainer &container) {
		assert(request.PeripheryID == Periphery::Imu);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7c5b      	ldrb	r3, [r3, #17]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d006      	beq.n	8001ba4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x24>
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x9c>)
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0xa0>)
 8001b9a:	f240 11ef 	movw	r1, #495	; 0x1ef
 8001b9e:	4821      	ldr	r0, [pc, #132]	; (8001c24 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0xa4>)
 8001ba0:	f01a f918 	bl	801bdd4 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7c1b      	ldrb	r3, [r3, #16]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe64 	bl	8001876 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d827      	bhi.n	8001c04 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x84>
 8001bb4:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x3c>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bdb 	.word	0x08001bdb
 8001bc4:	08001be9 	.word	0x08001be9
 8001bc8:	08001bf7 	.word	0x08001bf7
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	f7ff fe5c 	bl	8001890 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8001bd8:	e01b      	b.n	8001c12 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	f7ff fec3 	bl	800196c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8001be6:	e014      	b.n	8001c12 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, container);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	f7ff ff18 	bl	8001a24 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK17IMUFrameContainer>
 8001bf4:	e00d      	b.n	8001c12 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x92>
		case RequestMode::Reset:
					return DoReset(request, container);
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	f7ff ff77 	bl	8001af0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8001c02:	e006      	b.n	8001c12 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0x92>
		default: assert(0 && "Unknown Mode");
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0xa8>)
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0xa0>)
 8001c08:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer+0xa4>)
 8001c0e:	f01a f8e1 	bl	801bdd4 <__assert_func>
		}
	}
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0801d2e8 	.word	0x0801d2e8
 8001c20:	0801d310 	.word	0x0801d310
 8001c24:	0801cfd0 	.word	0x0801cfd0
 8001c28:	0801d358 	.word	0x0801d358

08001c2c <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3348      	adds	r3, #72	; 0x48
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fbb5 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3334      	adds	r3, #52	; 0x34
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb04 	bl	8001250 <_ZN7RequestD1Ev>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fae6 	bl	800121c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3354      	adds	r3, #84	; 0x54
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fb9e 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3328      	adds	r3, #40	; 0x28
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f8d8 	bl	8000e26 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 faf6 	bl	800226a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fed3 	bl	8002a3e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ffeb 	bl	8001c88 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN17IMUFrameContainerD1Ev>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fee6 	bl	8002aa4 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	f107 0014 	add.w	r0, r7, #20
 8001cf0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		Head{conf.HeadUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6979      	ldr	r1, [r7, #20]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fab6 	bl	800126c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3360      	adds	r3, #96	; 0x60
 8001d04:	69f9      	ldr	r1, [r7, #28]
 8001d06:	6a3a      	ldr	r2, [r7, #32]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f8bf 	bl	8000e8c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	33cc      	adds	r3, #204	; 0xcc
 8001d12:	2230      	movs	r2, #48	; 0x30
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f01a f8ee 	bl	801bef8 <memset>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	33cc      	adds	r3, #204	; 0xcc
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffbe 	bl	8001ca2 <_ZN17IMUFrameContainerC1Ev>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fca7 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d4e:	b004      	add	sp, #16
 8001d50:	4770      	bx	lr

08001d52 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fd91 	bl	8002884 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3334      	adds	r3, #52	; 0x34
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa65 	bl	8001236 <_ZN7RequestC1Ev>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3348      	adds	r3, #72	; 0x48
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f87e 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f83a 	bl	8000e0c <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3328      	adds	r3, #40	; 0x28
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fa96 	bl	80022ce <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3354      	adds	r3, #84	; 0x54
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f85f 	bl	8000e72 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffc2 	bl	8001d52 <_ZN13HeadInterfaceC1Ev>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffd8 	bl	8001d88 <_ZN11QueueSenderC1Ev>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	33cc      	adds	r3, #204	; 0xcc
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff60 	bl	8001ca2 <_ZN17IMUFrameContainerC1Ev>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	33cc      	adds	r3, #204	; 0xcc
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5f 	bl	8001cc8 <_ZN17IMUFrameContainerD1Ev>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff23 	bl	8001c5a <_ZN11QueueSenderD1Ev>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff08 	bl	8001c2c <_ZN13HeadInterfaceD1Ev>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fe59 	bl	8002aee <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffe5 	bl	8001e26 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	3334      	adds	r3, #52	; 0x34
 8001e82:	4619      	mov	r1, r3
 8001e84:	4610      	mov	r0, r2
 8001e86:	f7ff fb17 	bl	80014b8 <_ZN7RequestaSEOS_>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	3348      	adds	r3, #72	; 0x48
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f000 fd4f 	bl	800293a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fe1e 	bl	8002b14 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fdfb 	bl	8002aee <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3328      	adds	r3, #40	; 0x28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7ff ffdc 	bl	8001ec2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3354      	adds	r3, #84	; 0x54
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 fd09 	bl	800293a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	665a      	str	r2, [r3, #100]	; 0x64
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	669a      	str	r2, [r3, #104]	; 0x68
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fdeb 	bl	8002b3a <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_ZN18MotherboardContextaSEOS_>:
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff59 	bl	8001e46 <_ZN13HeadInterfaceaSEOS_>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3360      	adds	r3, #96	; 0x60
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7ff ff9e 	bl	8001ee2 <_ZN11QueueSenderaSEOS_>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	33cc      	adds	r3, #204	; 0xcc
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f7ff ffcb 	bl	8001f4e <_ZN17IMUFrameContaineraSEOS_>
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f502 7080 	add.w	r0, r2, #256	; 0x100
 8001fc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fc4:	f241 1250 	movw	r2, #4432	; 0x1150
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f019 ff6d 	bl	801bea8 <memcpy>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd4:	f893 2251 	ldrb.w	r2, [r3, #593]	; 0x251
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fde:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8001fec:	b084      	sub	sp, #16
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 8001ff4:	b081      	sub	sp, #4
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	f241 2468 	movw	r4, #4712	; 0x1268
 8001ffc:	443c      	add	r4, r7
 8001ffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 8002002:	4c1d      	ldr	r4, [pc, #116]	; (8002078 <MotherboardInit+0x8c>)
 8002004:	f241 2358 	movw	r3, #4696	; 0x1258
 8002008:	4423      	add	r3, r4
 800200a:	19dc      	adds	r4, r3, r7
 800200c:	466a      	mov	r2, sp
 800200e:	f241 2374 	movw	r3, #4724	; 0x1274
 8002012:	443b      	add	r3, r7
 8002014:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002018:	e882 0003 	stmia.w	r2, {r0, r1}
 800201c:	f241 2368 	movw	r3, #4712	; 0x1268
 8002020:	443b      	add	r3, r7
 8002022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fe5c 	bl	8001ce2 <_ZN18MotherboardContextC1E17MotherboardConfig>
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MotherboardInit+0x8c>)
 800202c:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8002030:	f103 0318 	add.w	r3, r3, #24
 8002034:	443b      	add	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MotherboardInit+0x90>)
 800203a:	f7ff ffa0 	bl	8001f7e <_ZN18MotherboardContextaSEOS_>
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MotherboardInit+0x8c>)
 8002040:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8002044:	f103 0318 	add.w	r3, r3, #24
 8002048:	443b      	add	r3, r7
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fed4 	bl	8001df8 <_ZN18MotherboardContextD1Ev>

	mbctx.Head.ResetReadState();
 8002050:	480a      	ldr	r0, [pc, #40]	; (800207c <MotherboardInit+0x90>)
 8002052:	f7ff f93d 	bl	80012d0 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8002056:	2100      	movs	r1, #0
 8002058:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002080 <MotherboardInit+0x94>
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <MotherboardInit+0x98>)
 800205e:	f7fe fb2f 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 8002062:	4603      	mov	r3, r0
}
 8002064:	4618      	mov	r0, r3
 8002066:	f507 5792 	add.w	r7, r7, #4672	; 0x1240
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002072:	b004      	add	sp, #16
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	ffffeda8 	.word	0xffffeda8
 800207c:	24000250 	.word	0x24000250
 8002080:	44480000 	.word	0x44480000
 8002084:	24000350 	.word	0x24000350

08002088 <MotherboardTick>:

int MotherboardTick() {
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
	if (mbctx.UpdateIMU)
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <MotherboardTick+0xc8>)
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <MotherboardTick+0xcc>)
 800209e:	f7fe fc67 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <MotherboardTick+0xc8>)
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251

	if (mbctx.Head.HasRequest()) {
 80020b4:	4826      	ldr	r0, [pc, #152]	; (8002150 <MotherboardTick+0xc8>)
 80020b6:	f7ff f91e 	bl	80012f6 <_ZNK13HeadInterface10HasRequestEv>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02b      	beq.n	8002118 <MotherboardTick+0x90>
		auto request = mbctx.Head.GetRequest();
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4923      	ldr	r1, [pc, #140]	; (8002150 <MotherboardTick+0xc8>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f9b3 	bl	8001430 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80020ca:	7d7b      	ldrb	r3, [r7, #21]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <MotherboardTick+0x4e>
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d00a      	beq.n	80020ea <MotherboardTick+0x62>
 80020d4:	e01c      	b.n	8002110 <MotherboardTick+0x88>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f980 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	481d      	ldr	r0, [pc, #116]	; (8002158 <MotherboardTick+0xd0>)
 80020e4:	f7fe ff21 	bl	8000f2a <_ZN11QueueSender10AddRequestEO7Request>
			break;
 80020e8:	e012      	b.n	8002110 <MotherboardTick+0x88>
		case Periphery::Imu:
			mbctx.Head.Send(
					mbctx.IMUHandler.Handle(request,
 80020ea:	f107 0018 	add.w	r0, r7, #24
 80020ee:	1d3a      	adds	r2, r7, #4
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MotherboardTick+0xd4>)
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <MotherboardTick+0xd8>)
 80020f4:	f7ff fd44 	bl	8001b80 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainer>
			mbctx.Head.Send(
 80020f8:	f107 0318 	add.w	r3, r7, #24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <MotherboardTick+0xc8>)
 8002100:	f7ff f909 	bl	8001316 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ff85 	bl	8001018 <_ZN8ResponceD1Ev>
							mbctx.FrameContainer));
			break;
 800210e:	bf00      	nop
		auto request = mbctx.Head.GetRequest();
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f89c 	bl	8001250 <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <MotherboardTick+0xd0>)
 800211a:	f7fe ff30 	bl	8000f7e <_ZNK11QueueSender11HasResponceEv>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <MotherboardTick+0xbe>
		mbctx.Head.Send(mbctx.Body.GetResponce());
 8002124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002128:	490b      	ldr	r1, [pc, #44]	; (8002158 <MotherboardTick+0xd0>)
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ff82 	bl	8001034 <_ZN11QueueSender11GetResponceEv>
 8002130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MotherboardTick+0xc8>)
 8002138:	f7ff f8ed 	bl	8001316 <_ZN13HeadInterface4SendERK8Responce>
 800213c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe ff69 	bl	8001018 <_ZN8ResponceD1Ev>
	}

	return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3738      	adds	r7, #56	; 0x38
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	24000250 	.word	0x24000250
 8002154:	24000350 	.word	0x24000350
 8002158:	240002b0 	.word	0x240002b0
 800215c:	2400031c 	.word	0x2400031c
 8002160:	240014a0 	.word	0x240014a0

08002164 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4906      	ldr	r1, [pc, #24]	; (8002188 <MotherboardOnStrobe+0x24>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fc28 	bl	80009c4 <_ZNK10BHYWrapper8GetFrameEv>
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MotherboardOnStrobe+0x28>)
 800217a:	f7ff face 	bl	800171a <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	24000350 	.word	0x24000350
 800218c:	2400031c 	.word	0x2400031c

08002190 <MotherboardOnHeadRecieveComplete>:

void MotherboardOnBodyTransmitComplete() {
	mbctx.Body.ProcessResponces();
}

void MotherboardOnHeadRecieveComplete() {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	mbctx.Head.ProcessRecievedData();
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <MotherboardOnHeadRecieveComplete+0x10>)
 8002196:	f7ff f9ab 	bl	80014f0 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	24000250 	.word	0x24000250

080021a4 <MotherboardOnHeadTransmitComplete>:

void MotherboardOnHeadTransmitComplete() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	mbctx.Head.FinishTransmit();
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <MotherboardOnHeadTransmitComplete+0x10>)
 80021aa:	f7ff f96f 	bl	800148c <_ZN13HeadInterface14FinishTransmitEv>
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000250 	.word	0x24000250

080021b8 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessRequests();
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <MotherboardOnBodyTimerTick+0x10>)
 80021be:	f7fe ff69 	bl	8001094 <_ZN11QueueSender15ProcessRequestsEv>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	240002b0 	.word	0x240002b0

080021cc <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <MotherboardOnImuTimerTick+0x1c>)
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	24000250 	.word	0x24000250

080021ec <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fcc3 	bl	8002b80 <_ZNSaI7RequestED1Ev>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fca6 	bl	8002b60 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002214:	2100      	movs	r1, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fcbe 	bl	8002b98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800223e:	3304      	adds	r3, #4
 8002240:	461a      	mov	r2, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fd0e 	bl	8002c64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	461a      	mov	r2, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fd20 	bl	8002c98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ffc6 	bl	80021ec <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800226a:	b580      	push	{r7, lr}
 800226c:	b08a      	sub	sp, #40	; 0x28
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fd29 	bl	8002cd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fd32 	bl	8002cee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fd3d 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002292:	4603      	mov	r3, r0
 8002294:	f107 0218 	add.w	r2, r7, #24
 8002298:	f107 0108 	add.w	r1, r7, #8
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fd5c 	bl	8002d5a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ffbe 	bl	8002226 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fd76 	bl	8002db0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	: c() { }
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	2328      	movs	r3, #40	; 0x28
 80022dc:	461a      	mov	r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	f019 fe0a 	bl	801bef8 <memset>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ffe4 	bl	80022b4 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	; 0x28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd86 	bl	8002e16 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fd8f 	bl	8002e34 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fd9a 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800231e:	4603      	mov	r3, r0
 8002320:	f107 0218 	add.w	r2, r7, #24
 8002324:	f107 0108 	add.w	r1, r7, #8
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fdb9 	bl	8002ea0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fd4e 	bl	8002dd2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fdc8 	bl	8002ede <_ZNSaIhEC1Ev>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fdd0 	bl	8002ef6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fdd8 	bl	8002f1e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800238e:	461a      	mov	r2, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fdcf 	bl	8002f34 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fd51 	bl	8000e40 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681c      	ldr	r4, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fdcd 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80023c0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023c2:	461a      	mov	r2, r3
 80023c4:	4629      	mov	r1, r5
 80023c6:	4620      	mov	r0, r4
 80023c8:	f000 fdd2 	bl	8002f70 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ffd2 	bl	8002378 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bdb0      	pop	{r4, r5, r7, pc}

080023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8002408:	429a      	cmp	r2, r3
 800240a:	d012      	beq.n	8002432 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800240c:	687c      	ldr	r4, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699d      	ldr	r5, [r3, #24]
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	f000 fdba 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4629      	mov	r1, r5
 800241e:	4620      	mov	r0, r4
 8002420:	f000 fdbf 	bl	8002fa2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f103 0214 	add.w	r2, r3, #20
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8002430:	e007      	b.n	8002442 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f000 fdaa 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002438:	4603      	mov	r3, r0
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fdc3 	bl	8002fc8 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bdb0      	pop	{r4, r5, r7, pc}

0800244a <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800244a:	b5b0      	push	{r4, r5, r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d014      	beq.n	800248a <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 8002460:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8002466:	f1a3 0514 	sub.w	r5, r3, #20
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	f000 fd8e 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4629      	mov	r1, r5
 8002476:	4620      	mov	r0, r4
 8002478:	f000 fd93 	bl	8002fa2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f1a3 0214 	sub.w	r2, r3, #20
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
      }
 8002488:	e007      	b.n	800249a <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f000 fd7e 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fddb 	bl	8003050 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}

080024a2 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fe15 	bl	80030dc <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fe1a 	bl	8003100 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 80024cc:	4603      	mov	r3, r0
      }
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f000 fe16 	bl	8003128 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fe1c 	bl	800313e <_ZNSaIhEC1ERKS_>
 8002506:	687c      	ldr	r4, [r7, #4]
 8002508:	6838      	ldr	r0, [r7, #0]
 800250a:	f000 fe0d 	bl	8003128 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f000 fe21 	bl	800315a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}

08002522 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fe37 	bl	80031a0 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f103 0218 	add.w	r2, r3, #24
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3308      	adds	r3, #8
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 fe4a 	bl	80031e8 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8002554:	4603      	mov	r3, r0
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fbaf 	bl	8002cd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe4a 	bl	8003210 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 800257c:	4603      	mov	r3, r0
      }
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 8002586:	b590      	push	{r4, r7, lr}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8002590:	687c      	ldr	r4, [r7, #4]
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	f000 fe48 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	4620      	mov	r0, r4
 800259e:	f000 fe4e 	bl	800323e <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}

080025aa <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f83b 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	bf8c      	ite	hi
 80025c2:	2301      	movhi	r3, #1
 80025c4:	2300      	movls	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f82f 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fe70 	bl	80032c0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 80025e0:	e013      	b.n	800260a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f824 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf34      	ite	cc
 80025f0:	2301      	movcc	r3, #1
 80025f2:	2300      	movcs	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 ff13 	bl	8003430 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 ff25 	bl	8003470 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002626:	4603      	mov	r3, r0
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8002660:	429a      	cmp	r2, r3
 8002662:	d011      	beq.n	8002688 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fb50 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 ff07 	bl	8003488 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f103 0214 	add.w	r2, r3, #20
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002686:	e002      	b.n	800268e <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 ff0a 	bl	80034a2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800269a:	2300      	movs	r3, #0
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 80026a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f000 80e0 	beq.w	800287a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80026ba:	f7ff ffec 	bl	8002696 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d042      	beq.n	800274a <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 80026c4:	f7fe fef0 	bl	80014a8 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fc3f 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80026dc:	4604      	mov	r4, r0
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 ff06 	bl	80034f2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4619      	mov	r1, r3
 80026ea:	4620      	mov	r0, r4
 80026ec:	f000 ff0c 	bl	8003508 <_ZStneRKSaIhES1_>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 80026fa:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 ff0d 	bl	8003520 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8002716:	461a      	mov	r2, r3
 8002718:	f000 fc0c 	bl	8002f34 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fc12 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002736:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fed9 	bl	80034f2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002740:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002742:	4619      	mov	r1, r3
 8002744:	4620      	mov	r0, r4
 8002746:	f000 fef9 	bl	800353c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	f7ff ff70 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002750:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 ff00 	bl	8003558 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4293      	cmp	r3, r2
 800275e:	bf8c      	ite	hi
 8002760:	2301      	movhi	r3, #1
 8002762:	2300      	movls	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d030      	beq.n	80027cc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f000 ff03 	bl	8003576 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8002770:	4604      	mov	r4, r0
 8002772:	6838      	ldr	r0, [r7, #0]
 8002774:	f000 ff0f 	bl	8003596 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002778:	4603      	mov	r3, r0
 800277a:	4622      	mov	r2, r4
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 ff1a 	bl	80035b8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8002784:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681c      	ldr	r4, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fbe2 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002796:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002798:	461a      	mov	r2, r3
 800279a:	4629      	mov	r1, r5
 800279c:	4620      	mov	r0, r4
 800279e:	f000 fbe7 	bl	8002f70 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 fbbe 	bl	8002f34 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	441a      	add	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e050      	b.n	800286e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff2f 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bf94      	ite	ls
 80027da:	2301      	movls	r3, #1
 80027dc:	2300      	movhi	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80027e4:	6838      	ldr	r0, [r7, #0]
 80027e6:	f000 fec6 	bl	8003576 <_ZNKSt6vectorIhSaIhEE5beginEv>
 80027ea:	4604      	mov	r4, r0
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	f000 fed2 	bl	8003596 <_ZNKSt6vectorIhSaIhEE3endEv>
 80027f2:	4605      	mov	r5, r0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fefb 	bl	80035f0 <_ZNSt6vectorIhSaIhEE5beginEv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	4629      	mov	r1, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f000 ff05 	bl	8003610 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8002806:	4604      	mov	r4, r0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 ff19 	bl	8003640 <_ZNSt6vectorIhSaIhEE3endEv>
 800280e:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fba1 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002818:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800281a:	461a      	mov	r2, r3
 800281c:	4629      	mov	r1, r5
 800281e:	4620      	mov	r0, r4
 8002820:	f000 ff1f 	bl	8003662 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8002824:	e023      	b.n	800286e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681d      	ldr	r5, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681c      	ldr	r4, [r3, #0]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fefe 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002834:	4603      	mov	r3, r0
 8002836:	18e1      	adds	r1, r4, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4628      	mov	r0, r5
 8002840:	f000 ff1d 	bl	800367e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681c      	ldr	r4, [r3, #0]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fef1 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800284e:	4603      	mov	r3, r0
 8002850:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fb7c 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002862:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002864:	4632      	mov	r2, r6
 8002866:	4629      	mov	r1, r5
 8002868:	4620      	mov	r0, r4
 800286a:	f000 ff20 	bl	80036ae <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]
	}
      return *this;
 800287a:	687b      	ldr	r3, [r7, #4]
    }
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002884 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	: c() { }
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	2328      	movs	r3, #40	; 0x28
 8002892:	461a      	mov	r2, r3
 8002894:	2100      	movs	r1, #0
 8002896:	f019 fb2f 	bl	801bef8 <memset>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fab5 	bl	8000e0c <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe3f 	bl	800253a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 80028bc:	4603      	mov	r3, r0
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fdcb 	bl	8003470 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 80028da:	4603      	mov	r3, r0
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	return c.front();
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fe35 	bl	800255e <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 80028f4:	4603      	mov	r3, r0
      }
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fea0 	bl	800264e <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8002916:	b590      	push	{r4, r7, lr}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002920:	687c      	ldr	r4, [r7, #4]
 8002922:	6838      	ldr	r0, [r7, #0]
 8002924:	f7ff fd5b 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	4620      	mov	r0, r4
 800292e:	f000 fecf 	bl	80036d0 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}

0800293a <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800293a:	b590      	push	{r4, r7, lr}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002948:	6838      	ldr	r0, [r7, #0]
 800294a:	f000 fed2 	bl	80036f2 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800294e:	4603      	mov	r3, r0
 8002950:	4622      	mov	r2, r4
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fed7 	bl	8003708 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 800295a:	687b      	ldr	r3, [r7, #4]
      }
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f000 ff05 	bl	8003784 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 800297a:	4604      	mov	r4, r0
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	4618      	mov	r0, r3
 8002980:	f000 ff0c 	bl	800379c <_ZNKSt16initializer_listI8IMUFrameE3endEv>
 8002984:	4602      	mov	r2, r0
 8002986:	462b      	mov	r3, r5
 8002988:	4621      	mov	r1, r4
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 ff1b 	bl	80037c6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 8002990:	68fb      	ldr	r3, [r7, #12]
      }
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bdb0      	pop	{r4, r5, r7, pc}

0800299a <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>:
      push_front(value_type&& __x)
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f000 ff73 	bl	8003890 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 ff79 	bl	80038a6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0218 	add.w	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3308      	adds	r3, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 ff9f 	bl	8003914 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f103 0218 	add.w	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3308      	adds	r3, #8
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 ffa1 	bl	800393c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3308      	adds	r3, #8
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ffbc 	bl	8003994 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 8002a1c:	4603      	mov	r3, r0
      }
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 ffd6 	bl	80039e0 <_ZNSaI8IMUFrameED1Ev>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 ffb9 	bl	80039c0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002a4e:	2100      	movs	r1, #0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 ffd1 	bl	80039f8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002a78:	3304      	adds	r3, #4
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f001 f821 	bl	8003ac4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f001 f833 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ffc6 	bl	8002a26 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f83c 	bl	8003b30 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 f845 	bl	8003b4e <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ff19 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f107 0218 	add.w	r2, r7, #24
 8002ad2:	f107 0108 	add.w	r1, r7, #8
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 f864 	bl	8003ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ffbe 	bl	8002a60 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002aee:	b590      	push	{r4, r7, lr}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f001 f860 	bl	8003bbe <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4622      	mov	r2, r4
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 f865 	bl	8003bd4 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002b0a:	687b      	ldr	r3, [r7, #4]
      }
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002b1e:	6838      	ldr	r0, [r7, #0]
 8002b20:	f001 f879 	bl	8003c16 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4622      	mov	r2, r4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f001 f87e 	bl	8003c2c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002b30:	687b      	ldr	r3, [r7, #4]
      }
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}

08002b3a <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f001 f892 	bl	8003c6e <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f001 f897 	bl	8003c84 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002b56:	687b      	ldr	r3, [r7, #4]
      }
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}

08002b60 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f001 f8ac 	bl	8003cc6 <_ZNSaI7RequestEC1Ev>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f8b4 	bl	8003cde <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZNSaI7RequestED1Ev>:
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f001 f8c1 	bl	8003d10 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002ba2:	2014      	movs	r0, #20
 8002ba4:	f7fe f91d 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3302      	adds	r3, #2
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	f107 0210 	add.w	r2, r7, #16
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 f8ac 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 8002bce:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f001 f8b6 	bl	8003d4e <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8002be2:	4602      	mov	r2, r0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	1acb      	subs	r3, r1, r3
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	69b9      	ldr	r1, [r7, #24]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f001 f8bc 	bl	8003d88 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3308      	adds	r3, #8
 8002c14:	69b9      	ldr	r1, [r7, #24]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f8d0 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f103 0218 	add.w	r2, r3, #24
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3b04      	subs	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f001 f8c7 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002c3a:	2014      	movs	r0, #20
 8002c3c:	f7fe f8d1 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8002c40:	4602      	mov	r2, r0
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c48:	fb01 f202 	mul.w	r2, r1, r2
 8002c4c:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
    }
 8002c5c:	bf00      	nop
 8002c5e:	3724      	adds	r7, #36	; 0x24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd90      	pop	{r4, r7, pc}

08002c64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d209      	bcs.n	8002c90 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f001 f8b6 	bl	8003df4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e7f1      	b.n	8002c74 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f8b5 	bl	8003e1a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f8cb 	bl	8003e54 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f8ba 	bl	8003e3c <_ZNSaIP7RequestED1Ev>
      }
 8002cc8:	bf00      	nop
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f81e 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f80f 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08c      	sub	sp, #48	; 0x30
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ffd7 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002d74:	f107 0320 	add.w	r3, r7, #32
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ffd1 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002d80:	f107 0220 	add.w	r2, r7, #32
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f001 f871 	bl	8003e72 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002d90:	bf00      	nop
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 f8d4 	bl	8003f4e <_ZNSaI8ResponceED1Ev>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f8b7 	bl	8003f2e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 f8cf 	bl	8003f66 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002dea:	3304      	adds	r3, #4
 8002dec:	461a      	mov	r2, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 f91c 	bl	800402c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f92e 	bl	8004060 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ffc6 	bl	8002d98 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f81e 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3318      	adds	r3, #24
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f80f 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffd7 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002eba:	f107 0320 	add.w	r3, r7, #32
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ffd1 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002ec6:	f107 0220 	add.w	r2, r7, #32
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f001 f8e1 	bl	8004098 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	; 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f001 f931 	bl	800414e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
	{ }
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f909 	bl	8004164 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f001 f8ff 	bl	8004182 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffec 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f001 f8ee 	bl	800419c <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f001 f8fa 	bl	80041cc <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f001 f908 	bl	80041f0 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	429c      	cmp	r4, r3
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002ff0:	4816      	ldr	r0, [pc, #88]	; (800304c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8002ff2:	f018 fed9 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 f90a 	bl	8004212 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1d1c      	adds	r4, r3, #4
 8003006:	4610      	mov	r0, r2
 8003008:	f001 f91e 	bl	8004248 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 800300c:	4603      	mov	r3, r0
 800300e:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8003010:	687c      	ldr	r4, [r7, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699d      	ldr	r5, [r3, #24]
 8003016:	6838      	ldr	r0, [r7, #0]
 8003018:	f7ff ffb8 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4629      	mov	r1, r5
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff ffbd 	bl	8002fa2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f103 0218 	add.w	r2, r3, #24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fec0 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	0801d36c 	.word	0x0801d36c

08003050 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 f8b6 	bl	80041cc <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8003060:	4604      	mov	r4, r0
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 f8c4 	bl	80041f0 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8003068:	4603      	mov	r3, r0
 800306a:	429c      	cmp	r4, r3
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003078:	4817      	ldr	r0, [pc, #92]	; (80030d8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 800307a:	f018 fe95 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 800307e:	2101      	movs	r1, #1
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f001 f8f3 	bl	800426c <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	1f1c      	subs	r4, r3, #4
 800308e:	4610      	mov	r0, r2
 8003090:	f001 f8da 	bl	8004248 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003094:	4603      	mov	r3, r0
 8003096:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f103 0208 	add.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	3b04      	subs	r3, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f000 fe88 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f1a3 0214 	sub.w	r2, r3, #20
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80030b8:	687c      	ldr	r4, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689d      	ldr	r5, [r3, #8]
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f7ff ff64 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4629      	mov	r1, r5
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff ff69 	bl	8002fa2 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	0801d36c 	.word	0x0801d36c

080030dc <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 0218 	add.w	r2, r3, #24
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3308      	adds	r3, #8
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f001 f8d3 	bl	800429c <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	return *begin();
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fe81 	bl	8002e16 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f001 f8d3 	bl	80042c4 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 800311e:	4603      	mov	r3, r0
      }
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f001 f8c6 	bl	80042dc <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d011      	beq.n	80031da <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe4a 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f001 f894 	bl	80042f4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f103 0210 	add.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
      }
 80031d8:	e002      	b.n	80031e0 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 f897 	bl	800430e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800323e:	b5b0      	push	{r4, r5, r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 8003252:	429a      	cmp	r2, r3
 8003254:	d012      	beq.n	800327c <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8003256:	687c      	ldr	r4, [r7, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699d      	ldr	r5, [r3, #24]
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f7ff ffe3 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	4629      	mov	r1, r5
 8003268:	4620      	mov	r0, r4
 800326a:	f001 f878 	bl	800435e <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f103 0210 	add.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
      }
 800327a:	e007      	b.n	800328c <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	f7ff ffd3 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8003282:	4603      	mov	r3, r0
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 f87c 	bl	8004384 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}

08003294 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f805 	bl	80032aa <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80032a0:	4603      	mov	r3, r0
      }
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80032b2:	2301      	movs	r3, #1
      }
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a8 	beq.w	8003422 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f9ac 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80032d8:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 80032e4:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 f890 	bl	800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d808      	bhi.n	8003306 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 f889 	bl	800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d901      	bls.n	800330a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d30f      	bcc.n	8003336 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fe1c 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003322:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8003324:	461a      	mov	r2, r3
 8003326:	6839      	ldr	r1, [r7, #0]
 8003328:	4620      	mov	r0, r4
 800332a:	f001 f880 	bl	800442e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 800332e:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8003334:	e075      	b.n	8003422 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 8003336:	4a3d      	ldr	r2, [pc, #244]	; (800342c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f001 f886 	bl	800444c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8003340:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f8c7 	bl	80044da <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800334c:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800334e:	f7ff ffa1 	bl	8003294 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fdfa 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003366:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003368:	461a      	mov	r2, r3
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	4620      	mov	r0, r4
 800336e:	f001 f85e 	bl	800442e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681c      	ldr	r4, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fdec 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003382:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4629      	mov	r1, r5
 8003388:	4620      	mov	r0, r4
 800338a:	f001 f8ba 	bl	8004502 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 800338e:	e02e      	b.n	80033ee <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fddc 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033a2:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80033a4:	461a      	mov	r2, r3
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	4620      	mov	r0, r4
 80033aa:	f001 f840 	bl	800442e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681c      	ldr	r4, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fdca 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033c6:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4629      	mov	r1, r5
 80033cc:	4620      	mov	r0, r4
 80033ce:	f001 f8ac 	bl	800452a <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fdbc 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033e2:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033e4:	461a      	mov	r2, r3
 80033e6:	4629      	mov	r1, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff fdc1 	bl	8002f70 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80033fe:	461a      	mov	r2, r3
 8003400:	f7ff fd98 	bl	8002f34 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	609a      	str	r2, [r3, #8]
    }
 8003422:	bf00      	nop
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bdb0      	pop	{r4, r5, r7, pc}
 800342a:	bf00      	nop
 800342c:	0801d39c 	.word	0x0801d39c

08003430 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fd82 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003456:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003458:	461a      	mov	r2, r3
 800345a:	4621      	mov	r1, r4
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f7ff fd87 	bl	8002f70 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}

08003470 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f001 f861 	bl	800455c <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fc2d 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f7ff ffe4 	bl	8003488 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fc93 	bl	8003df4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f103 0208 	add.w	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	3304      	adds	r3, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 fc6d 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	609a      	str	r2, [r3, #8]
    }
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
      { return false; }
 8003512:	2300      	movs	r3, #0
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ff7e 	bl	8003430 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8003546:	461a      	mov	r2, r3
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f001 f812 	bl	8004574 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f001 f800 	bl	800458c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	f107 030c 	add.w	r3, r7, #12
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 ffef 	bl	800458c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ff85 	bl	80044da <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80035d0:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fcc0 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80035da:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 ffe3 	bl	80045ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80035e6:	697b      	ldr	r3, [r7, #20]
	}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 ffe4 	bl	80045ce <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 ffe6 	bl	80045ee <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003622:	4604      	mov	r4, r0
 8003624:	68b8      	ldr	r0, [r7, #8]
 8003626:	f000 ffe2 	bl	80045ee <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800362a:	4603      	mov	r3, r0
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4619      	mov	r1, r3
 8003630:	4620      	mov	r0, r4
 8003632:	f000 ffe7 	bl	8004604 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8003636:	4603      	mov	r3, r0
    }
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}

08003640 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ffbb 	bl	80045ce <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 ffe8 	bl	8004646 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800367e:	b590      	push	{r4, r7, lr}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 ffe8 	bl	8004660 <_ZSt12__miter_baseIPhET_S1_>
 8003690:	4604      	mov	r4, r0
 8003692:	68b8      	ldr	r0, [r7, #8]
 8003694:	f000 ffe4 	bl	8004660 <_ZSt12__miter_baseIPhET_S1_>
 8003698:	4603      	mov	r3, r0
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 ffe9 	bl	8004676 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80036a4:	4603      	mov	r3, r0
    }
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}

080036ae <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fffb 	bl	80046bc <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	f7fe fe7f 	bl	80023de <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fe fe85 	bl	80023f4 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	f107 031c 	add.w	r3, r7, #28
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 ffdf 	bl	80046e0 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8003722:	f107 021c 	add.w	r2, r7, #28
 8003726:	f107 0310 	add.w	r3, r7, #16
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 ffe8 	bl	8004702 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fe12 	bl	8002360 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffec 	bl	8004720 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	f107 0310 	add.w	r3, r7, #16
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f000 ffe5 	bl	8004720 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fbfe 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800375e:	4604      	mov	r4, r0
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fbf9 	bl	8002f5a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003768:	4603      	mov	r3, r0
 800376a:	4619      	mov	r1, r3
 800376c:	4620      	mov	r0, r4
 800376e:	f000 fff5 	bl	800475c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fe16 	bl	80023a8 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 800377c:	bf00      	nop
 800377e:	3724      	adds	r7, #36	; 0x24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}

08003784 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_ZNKSt16initializer_listI8IMUFrameE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffed 	bl	8003784 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 80037aa:	4604      	mov	r4, r0
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 ffe3 	bl	8004778 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4423      	add	r3, r4
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}

080037c6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 80037c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c8:	b09f      	sub	sp, #124	; 0x7c
 80037ca:	af02      	add	r7, sp, #8
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 ffd9 	bl	8004790 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80037de:	4603      	mov	r3, r0
 80037e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff f8fc 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf8c      	ite	hi
 80037f0:	2301      	movhi	r3, #1
 80037f2:	2300      	movls	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d031      	beq.n	800385e <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff f8ee 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8003804:	4602      	mov	r2, r0
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f000 ffd3 	bl	80047b8 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8003812:	68bc      	ldr	r4, [r7, #8]
 8003814:	697d      	ldr	r5, [r7, #20]
 8003816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f987 	bl	8003b30 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8003822:	f107 0018 	add.w	r0, r7, #24
 8003826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382a:	462a      	mov	r2, r5
 800382c:	4621      	mov	r1, r4
 800382e:	f000 ffd6 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f988 	bl	8003b4e <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 800383e:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	4618      	mov	r0, r3
 8003846:	f000 ffea 	bl	800481e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
	      _M_range_insert_aux(end(), __mid, __last,
 800384a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800384e:	f88d 6000 	strb.w	r6, [sp]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4622      	mov	r2, r4
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 ffec 	bl	8004834 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>
	}
 800385c:	e014      	b.n	8003888 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 800385e:	68bc      	ldr	r4, [r7, #8]
 8003860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f962 	bl	8003b30 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 800386c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003870:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4621      	mov	r1, r4
 8003878:	f000 ffb1 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 800387c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003880:	4619      	mov	r1, r3
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f001 f853 	bl	800492e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
	}
 8003888:	bf00      	nop
 800388a:	3774      	adds	r7, #116	; 0x74
 800388c:	46bd      	mov	sp, r7
 800388e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003890 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80038a6:	b5b0      	push	{r4, r5, r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d014      	beq.n	80038e6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 80038bc:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80038c2:	f1a3 0518 	sub.w	r5, r3, #24
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	f001 f864 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	4629      	mov	r1, r5
 80038d2:	4620      	mov	r0, r4
 80038d4:	f001 f869 	bl	80049aa <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f1a3 0218 	sub.w	r2, r3, #24
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	609a      	str	r2, [r3, #8]
      }
 80038e4:	e007      	b.n	80038f6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f001 f854 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f86d 	bl	80049d0 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bdb0      	pop	{r4, r5, r7, pc}

080038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003946:	f001 f8b8 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800394a:	4603      	mov	r3, r0
 800394c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	109b      	asrs	r3, r3, #2
 800395a:	3b01      	subs	r3, #1
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6811      	ldr	r1, [r2, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6852      	ldr	r2, [r2, #4]
 8003968:	1a8a      	subs	r2, r1, r2
 800396a:	10d2      	asrs	r2, r2, #3
 800396c:	4908      	ldr	r1, [pc, #32]	; (8003990 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 800396e:	fb01 f202 	mul.w	r2, r1, r2
 8003972:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	6891      	ldr	r1, [r2, #8]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	1a8a      	subs	r2, r1, r2
 800397e:	10d2      	asrs	r2, r2, #3
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8003982:	fb01 f202 	mul.w	r2, r1, r2
 8003986:	4413      	add	r3, r2
      }
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	aaaaaaab 	.word	0xaaaaaaab

08003994 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f88f 	bl	8004aca <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 f89d 	bl	8004af0 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 f89d 	bl	8004b08 <_ZNSaI8IMUFrameEC1Ev>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f8a5 	bl	8004b20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZNSaI8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f001 f8b2 	bl	8004b52 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003a02:	2018      	movs	r0, #24
 8003a04:	f7fd f9ed 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a10:	3301      	adds	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a14:	2308      	movs	r3, #8
 8003a16:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	f107 0210 	add.w	r2, r7, #16
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 f97c 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 8003a2e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 f893 	bl	8004b68 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1acb      	subs	r3, r1, r3
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003a58:	4413      	add	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	69b9      	ldr	r1, [r7, #24]
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f001 f899 	bl	8004ba2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3308      	adds	r3, #8
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f803 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f103 0218 	add.w	r2, r3, #24
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3b04      	subs	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 fffa 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003a9a:	2018      	movs	r0, #24
 8003a9c:	f7fd f9a1 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aa8:	fb01 f202 	mul.w	r2, r1, r2
 8003aac:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
    }
 8003abc:	bf00      	nop
 8003abe:	3724      	adds	r7, #36	; 0x24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d209      	bcs.n	8003af0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 ffba 	bl	8004a5c <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3304      	adds	r3, #4
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e7f1      	b.n	8003ad4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f863 	bl	8004bd6 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f879 	bl	8004c10 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f868 	bl	8004bf8 <_ZNSaIP8IMUFrameED1Ev>
      }
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f813 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f804 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8003ba4:	b480      	push	{r7}
 8003ba6:	b08d      	sub	sp, #52	; 0x34
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
      }
 8003bb2:	bf00      	nop
 8003bb4:	3734      	adds	r7, #52	; 0x34
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f821 	bl	8004c2e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003bec:	68b8      	ldr	r0, [r7, #8]
 8003bee:	f001 f82b 	bl	8004c48 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f889 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f884 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f001 f831 	bl	8004c70 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}

08003c16 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f824 	bl	8004c8c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003c44:	68b8      	ldr	r0, [r7, #8]
 8003c46:	f001 f82e 	bl	8004ca6 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff f900 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c52:	4604      	mov	r4, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f8fb 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4620      	mov	r0, r4
 8003c62:	f001 f834 	bl	8004cce <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd90      	pop	{r4, r7, pc}

08003c6e <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f827 	bl	8004cea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003c9c:	68b8      	ldr	r0, [r7, #8]
 8003c9e:	f001 f831 	bl	8004d04 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe2a 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003caa:	4604      	mov	r4, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fe25 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f001 f837 	bl	8004d2c <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd90      	pop	{r4, r7, pc}

08003cc6 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f001 f83a 	bl	8004d48 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f831 	bl	8004d5e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f82c 	bl	8004d5e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d201      	bcs.n	8003d40 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	e000      	b.n	8003d42 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003d40:	687b      	ldr	r3, [r7, #4]
    }
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003d4e:	b590      	push	{r4, r7, lr}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f85b 	bl	8003e1a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f80e 	bl	8004d8c <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 8003d70:	4604      	mov	r4, r0
 8003d72:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f85f 	bl	8003e3c <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003d7e:	4623      	mov	r3, r4
      }
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd90      	pop	{r4, r7, pc}

08003d88 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d209      	bcs.n	8003db4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa51 	bl	8004248 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003da6:	4602      	mov	r2, r0
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3304      	adds	r3, #4
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e7f1      	b.n	8003d98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003db4:	bf00      	nop
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685c      	ldr	r4, [r3, #4]
 8003dd8:	f000 ffe7 	bl	8004daa <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	18e2      	adds	r2, r4, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
      }
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}

08003df4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003dfe:	687c      	ldr	r4, [r7, #4]
 8003e00:	2014      	movs	r0, #20
 8003e02:	f7fc ffee 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6839      	ldr	r1, [r7, #0]
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 ffd4 	bl	8004dba <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd90      	pop	{r4, r7, pc}

08003e1a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f000 ffd7 	bl	8004dd8 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ffdd 	bl	8004dee <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 ffdf 	bl	8004e08 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 ffda 	bl	8004e1e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8003e72:	b5b0      	push	{r4, r5, r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	3304      	adds	r3, #4
 8003e84:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d219      	bcs.n	8003ec4 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681d      	ldr	r5, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681c      	ldr	r4, [r3, #0]
 8003e98:	f000 ffd1 	bl	8004e3e <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe ff2e 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003eb0:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f000 ffc9 	bl	8004e4e <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e7e0      	b.n	8003e86 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d01c      	beq.n	8003f0a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	681c      	ldr	r4, [r3, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe ff16 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003ee0:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 ffb1 	bl	8004e4e <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685c      	ldr	r4, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe ff08 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003efc:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003efe:	461a      	mov	r2, r3
 8003f00:	4629      	mov	r1, r5
 8003f02:	4620      	mov	r0, r4
 8003f04:	f000 ffa3 	bl	8004e4e <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8003f08:	e00d      	b.n	8003f26 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	681c      	ldr	r4, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fef9 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f1a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 ff94 	bl	8004e4e <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bdb0      	pop	{r4, r5, r7, pc}

08003f2e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 ff97 	bl	8004e6a <_ZNSaI8ResponceEC1Ev>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 ff9f 	bl	8004e82 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZNSaI8ResponceED1Ev>:
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ffac 	bl	8004eb4 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003f66:	b590      	push	{r4, r7, lr}
 8003f68:	b089      	sub	sp, #36	; 0x24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003f70:	2010      	movs	r0, #16
 8003f72:	f7fc ff36 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003f82:	2308      	movs	r3, #8
 8003f84:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	f107 0210 	add.w	r2, r7, #16
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fec5 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 8003f9c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 ff8d 	bl	8004eca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	1acb      	subs	r3, r1, r3
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003fc6:	4413      	add	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 ff93 	bl	8004f04 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	69b9      	ldr	r1, [r7, #24]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 ffa7 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f103 0218 	add.w	r2, r3, #24
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 ff9e 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004008:	2010      	movs	r0, #16
 800400a:	f7fc feea 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	fbb3 f1f2 	udiv	r1, r3, r2
 8004016:	fb01 f202 	mul.w	r2, r1, r2
 800401a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
    }
 8004024:	bf00      	nop
 8004026:	3724      	adds	r7, #36	; 0x24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d209      	bcs.n	8004058 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 ff8d 	bl	8004f6a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3304      	adds	r3, #4
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e7f1      	b.n	800403c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ff8c 	bl	8004f90 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 ffa2 	bl	8004fca <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4618      	mov	r0, r3
 800408c:	f000 ff91 	bl	8004fb2 <_ZNSaIP8ResponceED1Ev>
      }
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d216      	bcs.n	80040e4 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681c      	ldr	r4, [r3, #0]
 80040be:	f000 ff93 	bl	8004fe8 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fec1 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80040d0:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80040d2:	461a      	mov	r2, r3
 80040d4:	4621      	mov	r1, r4
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 ff8e 	bl	8004ff8 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3304      	adds	r3, #4
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e7e3      	b.n	80040ac <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d01c      	beq.n	800412a <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	681c      	ldr	r4, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fea9 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004100:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004102:	461a      	mov	r2, r3
 8004104:	4629      	mov	r1, r5
 8004106:	4620      	mov	r0, r4
 8004108:	f000 ff76 	bl	8004ff8 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685c      	ldr	r4, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fe9b 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800411c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800411e:	461a      	mov	r2, r3
 8004120:	4629      	mov	r1, r5
 8004122:	4620      	mov	r0, r4
 8004124:	f000 ff68 	bl	8004ff8 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004128:	e00d      	b.n	8004146 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	681c      	ldr	r4, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fe8c 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800413a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800413c:	461a      	mov	r2, r3
 800413e:	4629      	mov	r1, r5
 8004140:	4620      	mov	r0, r4
 8004142:	f000 ff59 	bl	8004ff8 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bdb0      	pop	{r4, r5, r7, pc}

0800414e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 ff4d 	bl	8005014 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800418c:	6839      	ldr	r1, [r7, #0]
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 ff4e 	bl	8005030 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fe feef 	bl	8002f8c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80041ae:	4604      	mov	r4, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4619      	mov	r1, r3
 80041b4:	2014      	movs	r0, #20
 80041b6:	f7fc fe08 	bl	8000dca <_ZnwjPv>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4621      	mov	r1, r4
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd f919 	bl	80013f6 <_ZN7RequestC1EOS_>
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}

080041cc <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 0218 	add.w	r2, r3, #24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3308      	adds	r3, #8
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f000 ff31 	bl	8005048 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fdec 	bl	8004dd8 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004200:	4603      	mov	r3, r0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 ff4c 	bl	80050a0 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8004208:	4603      	mov	r3, r0
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	6809      	ldr	r1, [r1, #0]
 800422c:	1a41      	subs	r1, r0, r1
 800422e:	1089      	asrs	r1, r1, #2
 8004230:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004232:	429a      	cmp	r2, r3
 8004234:	d904      	bls.n	8004240 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004236:	2200      	movs	r2, #0
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 ff4a 	bl	80050d4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004250:	687c      	ldr	r4, [r7, #4]
 8004252:	2014      	movs	r0, #20
 8004254:	f7fc fdc5 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004258:	4603      	mov	r3, r0
 800425a:	4619      	mov	r1, r3
 800425c:	4620      	mov	r0, r4
 800425e:	f000 ffd3 	bl	8005208 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8004262:	4603      	mov	r3, r0
      }
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}

0800426c <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8004282:	461a      	mov	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4293      	cmp	r3, r2
 8004288:	d904      	bls.n	8004294 <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 800428a:	2201      	movs	r2, #1
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ff20 	bl	80050d4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	bf0c      	ite	eq
 80042b2:	2301      	moveq	r3, #1
 80042b4:	2300      	movne	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80042fe:	6839      	ldr	r1, [r7, #0]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 ff90 	bl	8005226 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fd9a 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7ff ffe4 	bl	80042f4 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 fe18 	bl	8004f6a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f103 0208 	add.w	r2, r3, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	3304      	adds	r3, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f000 fdf5 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	609a      	str	r2, [r3, #8]
    }
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fe ff5c 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 ff61 	bl	800523e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004384:	b5b0      	push	{r4, r5, r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ff6d 	bl	800526e <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8004394:	4604      	mov	r4, r0
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 ff7b 	bl	8005292 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 800439c:	4603      	mov	r3, r0
 800439e:	429c      	cmp	r4, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80043ac:	4816      	ldr	r0, [pc, #88]	; (8004408 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 80043ae:	f017 fcfb 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80043b2:	2101      	movs	r1, #1
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 ff7d 	bl	80052b4 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1d1c      	adds	r4, r3, #4
 80043c2:	4610      	mov	r0, r2
 80043c4:	f000 ff91 	bl	80052ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80043cc:	687c      	ldr	r4, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699d      	ldr	r5, [r3, #24]
 80043d2:	6838      	ldr	r0, [r7, #0]
 80043d4:	f7fe ff28 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	4629      	mov	r1, r5
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff ffbd 	bl	800435e <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f103 0218 	add.w	r2, r3, #24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 fda0 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	619a      	str	r2, [r3, #24]
      }
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	0801d36c 	.word	0x0801d36c

0800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f86b 	bl	80034f2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ff75 	bl	800530e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8004424:	4603      	mov	r3, r0
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 ff80 	bl	8005342 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8004442:	4603      	mov	r3, r0
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ffd7 	bl	800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800445e:	4604      	mov	r4, r0
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7fe f8e5 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004466:	4603      	mov	r3, r0
 8004468:	1ae2      	subs	r2, r4, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	bf34      	ite	cc
 8004470:	2301      	movcc	r3, #1
 8004472:	2300      	movcs	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f017 fc94 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7fe f8d5 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004486:	4604      	mov	r4, r0
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7fe f8d1 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800448e:	4603      	mov	r3, r0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	f107 0208 	add.w	r2, r7, #8
 8004496:	f107 0310 	add.w	r3, r7, #16
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fc42 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 80044a2:	4603      	mov	r3, r0
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4423      	add	r3, r4
 80044a8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7fe f8c0 	bl	8002630 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80044b0:	4602      	mov	r2, r0
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d306      	bcc.n	80044c6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ffa7 	bl	800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80044be:	4602      	mov	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d904      	bls.n	80044d0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff ffa0 	bl	800440c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80044cc:	4603      	mov	r3, r0
 80044ce:	e000      	b.n	80044d2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80044d0:	697b      	ldr	r3, [r7, #20]
      }
 80044d2:	4618      	mov	r0, r3
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}

080044da <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 ff37 	bl	8005362 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80044f4:	4603      	mov	r3, r0
 80044f6:	e000      	b.n	80044fa <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80044f8:	2300      	movs	r3, #0
      }
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004502:	b590      	push	{r4, r7, lr}
 8004504:	b087      	sub	sp, #28
 8004506:	af02      	add	r7, sp, #8
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8004510:	f88d 4000 	strb.w	r4, [sp]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 ff30 	bl	8005380 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8004520:	4603      	mov	r3, r0
      }
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bd90      	pop	{r4, r7, pc}

0800452a <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800452a:	b590      	push	{r4, r7, lr}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 ff33 	bl	80053a4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800453e:	4604      	mov	r4, r0
 8004540:	68b8      	ldr	r0, [r7, #8]
 8004542:	f000 ff2f 	bl	80053a4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8004546:	4601      	mov	r1, r0
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4620      	mov	r0, r4
 800454e:	f000 ff38 	bl	80053c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8004552:	4603      	mov	r3, r0
    }
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bd90      	pop	{r4, r7, pc}

0800455c <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004566:	6838      	ldr	r0, [r7, #0]
 8004568:	f7fc fe72 	bl	8001250 <_ZN7RequestD1Ev>
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	713a      	strb	r2, [r7, #4]
    { }
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 ff10 	bl	80053e4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fef9 	bl	8005408 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004616:	4604      	mov	r4, r0
 8004618:	68b8      	ldr	r0, [r7, #8]
 800461a:	f000 fef5 	bl	8005408 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800461e:	4605      	mov	r5, r0
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 feff 	bl	8005424 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	4629      	mov	r1, r5
 800462c:	4620      	mov	r0, r4
 800462e:	f000 ff07 	bl	8005440 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8004632:	4603      	mov	r3, r0
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 ff12 	bl	8005460 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 800463c:	4603      	mov	r3, r0
    }
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}

08004646 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff19 	bl	800548a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004676:	b5b0      	push	{r4, r5, r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 ff0c 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8004688:	4604      	mov	r4, r0
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f000 ff08 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8004690:	4605      	mov	r5, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 ff03 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	4629      	mov	r1, r5
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 ff08 	bl	80054b6 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 80046a6:	4602      	mov	r2, r0
 80046a8:	1d3b      	adds	r3, r7, #4
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 ff12 	bl	80054d6 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80046b2:	4603      	mov	r3, r0
    }
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bdb0      	pop	{r4, r5, r7, pc}

080046bc <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 ff0c 	bl	80054ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 80046d6:	4603      	mov	r3, r0
    }
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f7fe ff01 	bl	80034f2 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe fd22 	bl	800313e <_ZNSaIhEC1ERKS_>
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fefc 	bl	800550e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800472a:	f107 030c 	add.w	r3, r7, #12
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fbe1 	bl	8002ef6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fef6 	bl	800552c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fef2 	bl	800552c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	4619      	mov	r1, r3
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f000 feec 	bl	800552c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004766:	461a      	mov	r2, r3
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fef5 	bl	800555a <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>:
      size() const noexcept { return _M_len; }
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800479a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f83d 	bl	800481e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80047a4:	462a      	mov	r2, r5
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fee3 	bl	8005574 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80047ae:	4603      	mov	r3, r0
    }
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bdb0      	pop	{r4, r5, r7, pc}

080047b8 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f829 	bl	800481e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 80047cc:	4622      	mov	r2, r4
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fee5 	bl	80055a0 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd90      	pop	{r4, r7, pc}

080047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 80047de:	b5b0      	push	{r4, r5, r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f000 feed 	bl	80055cc <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 80047f2:	4604      	mov	r4, r0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fee9 	bl	80055cc <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 80047fa:	4605      	mov	r5, r0
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f9b2 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	462a      	mov	r2, r5
 8004810:	4621      	mov	r1, r4
 8004812:	f000 fee6 	bl	80055e2 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>
    }
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bdb0      	pop	{r4, r5, r7, pc}

0800481e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004826:	bf00      	nop
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b0a5      	sub	sp, #148	; 0x94
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ffa3 	bl	8004790 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800484a:	4603      	mov	r3, r0
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d126      	bne.n	80048aa <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 800485c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004860:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 feec 	bl	8005644 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 800486c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004870:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f978 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff f83d 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004884:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8004886:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800488a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800488e:	9200      	str	r2, [sp, #0]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	f000 ff00 	bl	8005698 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f103 0408 	add.w	r4, r3, #8
 800489e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80048a8:	e03d      	b.n	8004926 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d127      	bne.n	8004906 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 ff01 	bl	80056c8 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80048cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff f94a 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f80f 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80048e0:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 80048e2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80048e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048ea:	9200      	str	r2, [sp, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	f000 fed2 	bl	8005698 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f103 0418 	add.w	r4, r3, #24
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004904:	e00f      	b.n	8004926 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8004906:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff f92d 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004912:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fefb 	bl	800571c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>
      }
 8004926:	bf00      	nop
 8004928:	378c      	adds	r7, #140	; 0x8c
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}

0800492e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 800492e:	b590      	push	{r4, r7, lr}
 8004930:	b08b      	sub	sp, #44	; 0x2c
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f914 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004944:	f107 0318 	add.w	r3, r7, #24
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f8ff 	bl	8003b4e <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe ffd3 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004958:	4603      	mov	r3, r0
 800495a:	f107 0218 	add.w	r2, r7, #24
 800495e:	f107 0108 	add.w	r1, r7, #8
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f91e 	bl	8003ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8004974:	3304      	adds	r3, #4
 8004976:	461a      	mov	r2, r3
 8004978:	f7ff f8a4 	bl	8003ac4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	f103 0418 	add.w	r4, r3, #24
 8004984:	4613      	mov	r3, r2
 8004986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 800498c:	bf00      	nop
 800498e:	372c      	adds	r7, #44	; 0x2c
 8004990:	46bd      	mov	sp, r7
 8004992:	bd90      	pop	{r4, r7, pc}

08004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ffec 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f001 f99d 	bl	8005d02 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe f800 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80049e0:	4604      	mov	r4, r0
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 f9a8 	bl	8005d38 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 80049e8:	4603      	mov	r3, r0
 80049ea:	429c      	cmp	r4, r3
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80049f8:	4817      	ldr	r0, [pc, #92]	; (8004a58 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 80049fa:	f017 f9d5 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 80049fe:	2101      	movs	r1, #1
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 f9aa 	bl	8005d5a <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	1f1c      	subs	r4, r3, #4
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f001 f9bb 	bl	8005d8a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004a14:	4603      	mov	r3, r0
 8004a16:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0208 	add.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	3b04      	subs	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f000 f82b 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f1a3 0218 	sub.w	r2, r3, #24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8004a38:	687c      	ldr	r4, [r7, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689d      	ldr	r5, [r3, #8]
 8004a3e:	6838      	ldr	r0, [r7, #0]
 8004a40:	f7ff ffa8 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff ffad 	bl	80049aa <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      }
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bdb0      	pop	{r4, r5, r7, pc}
 8004a58:	0801d36c 	.word	0x0801d36c

08004a5c <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004a66:	687c      	ldr	r4, [r7, #4]
 8004a68:	2018      	movs	r0, #24
 8004a6a:	f7fc f9ba 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	4620      	mov	r0, r4
 8004a76:	f001 f9ba 	bl	8005dee <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685c      	ldr	r4, [r3, #4]
 8004a9e:	f000 f80c 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	18e2      	adds	r2, r4, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
      }
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd90      	pop	{r4, r7, pc}

08004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004abe:	2018      	movs	r0, #24
 8004ac0:	f7fc f98f 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff f847 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f001 f993 	bl	8005e0c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 8004ae6:	bf00      	nop
      }
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 f9df 	bl	8005ed4 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3308      	adds	r3, #8
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f9d6 	bl	8005eea <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3318      	adds	r3, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f9d1 	bl	8005eea <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004b72:	f107 030c 	add.w	r3, r7, #12
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f82c 	bl	8004bd6 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f9c7 	bl	8005f18 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f830 	bl	8004bf8 <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004b98:	4623      	mov	r3, r4
      }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d209      	bcs.n	8004bce <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f001 f8e5 	bl	8005d8a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e7f1      	b.n	8004bb2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004be0:	6838      	ldr	r0, [r7, #0]
 8004be2:	f001 f9a8 	bl	8005f36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 f9ae 	bl	8005f4c <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 f9b0 	bl	8005f66 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f001 f9ab 	bl	8005f7c <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 f9b6 	bl	8005fac <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004c50:	f107 0308 	add.w	r3, r7, #8
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe f83a 	bl	8002cd0 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 f9d5 	bl	8006012 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f9fa 	bl	8006078 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 f9fa 	bl	8006092 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe f8ae 	bl	8002e16 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 fa19 	bl	80060f8 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fa3e 	bl	800615e <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 fa3e 	bl	8006178 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe ff0c 	bl	8003b30 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe05 	bl	800492e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004d36:	461a      	mov	r2, r3
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fa4f 	bl	80061de <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004d96:	2200      	movs	r2, #0
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fa2c 	bl	80061f8 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004daa:	b580      	push	{r7, lr}
 8004dac:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004dae:	2014      	movs	r0, #20
 8004db0:	f7fc f817 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f001 fa32 	bl	8006234 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 fa2e 	bl	800625a <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f016 ffa3 	bl	801bd7c <_ZdlPvj>
      }
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004e42:	2014      	movs	r0, #20
 8004e44:	f7fb ffcd 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f001 fa07 	bl	8006270 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fa09 	bl	800628a <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 fa00 	bl	80062a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 f9fb 	bl	80062a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004eca:	b590      	push	{r4, r7, lr}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004ed4:	f107 030c 	add.w	r3, r7, #12
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f858 	bl	8004f90 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004ee0:	f107 030c 	add.w	r3, r7, #12
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f9f1 	bl	80062ce <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8004eec:	4604      	mov	r4, r0
 8004eee:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f85c 	bl	8004fb2 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004efa:	4623      	mov	r3, r4
      }
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}

08004f04 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d209      	bcs.n	8004f30 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f9e4 	bl	80052ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8004f22:	4602      	mov	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e7f1      	b.n	8004f14 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685c      	ldr	r4, [r3, #4]
 8004f54:	f001 f9ca 	bl	80062ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	18e2      	adds	r2, r4, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]
      }
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd90      	pop	{r4, r7, pc}

08004f6a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004f6a:	b590      	push	{r4, r7, lr}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004f74:	687c      	ldr	r4, [r7, #4]
 8004f76:	2010      	movs	r0, #16
 8004f78:	f7fb ff33 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	4620      	mov	r0, r4
 8004f84:	f001 f9ba 	bl	80062fc <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}

08004f90 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f001 f9bd 	bl	800631a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 f9c3 	bl	8006330 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 f9c5 	bl	800634a <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f001 f9c0 	bl	8006360 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004fec:	2010      	movs	r0, #16
 8004fee:	f7fb fef8 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f001 f9ba 	bl	8006380 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f016 feaa 	bl	801bd7c <_ZdlPvj>
      }
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8005052:	f7ff feaa 	bl	8004daa <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8005056:	4603      	mov	r3, r0
 8005058:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	109b      	asrs	r3, r3, #2
 8005066:	3b01      	subs	r3, #1
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6811      	ldr	r1, [r2, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	1a8a      	subs	r2, r1, r2
 8005076:	1092      	asrs	r2, r2, #2
 8005078:	4908      	ldr	r1, [pc, #32]	; (800509c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 800507a:	fb01 f202 	mul.w	r2, r1, r2
 800507e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	6891      	ldr	r1, [r2, #8]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	1a8a      	subs	r2, r1, r2
 800508a:	1092      	asrs	r2, r2, #2
 800508c:	4903      	ldr	r1, [pc, #12]	; (800509c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 800508e:	fb01 f202 	mul.w	r2, r1, r2
 8005092:	4413      	add	r3, r2
      }
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	cccccccd 	.word	0xcccccccd

080050a0 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80050a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80050ac:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 f973 	bl	800639a <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 80050b4:	4603      	mov	r3, r0
 80050b6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80050b8:	f107 0208 	add.w	r2, r7, #8
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f975 	bl	80063b2 <_ZSt3minIjERKT_S2_S2_>
 80050c8:	4603      	mov	r3, r0
 80050ca:	681b      	ldr	r3, [r3, #0]
      }
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b08b      	sub	sp, #44	; 0x2c
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	109b      	asrs	r3, r3, #2
 80050ee:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80050f0:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	4413      	add	r3, r2
 80050f8:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	d92d      	bls.n	8005162 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	1acb      	subs	r3, r1, r3
 8005112:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005114:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	e000      	b.n	8005124 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8005122:	2300      	movs	r3, #0
 8005124:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005126:	4413      	add	r3, r2
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	429a      	cmp	r2, r3
 8005132:	d209      	bcs.n	8005148 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800513c:	3304      	adds	r3, #4
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	4619      	mov	r1, r3
 8005142:	f001 f94a 	bl	80063da <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8005146:	e048      	b.n	80051da <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005150:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	4413      	add	r3, r2
 800515a:	461a      	mov	r2, r3
 800515c:	f001 f955 	bl	800640a <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8005160:	e03b      	b.n	80051da <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3304      	adds	r3, #4
 800516a:	f107 0208 	add.w	r2, r7, #8
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fdd8 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 8005176:	4603      	mov	r3, r0
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800517c:	3302      	adds	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	69b9      	ldr	r1, [r7, #24]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fde2 	bl	8003d4e <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 800518a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	e000      	b.n	80051a4 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80051a2:	2300      	movs	r3, #0
 80051a4:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80051b4:	3304      	adds	r3, #4
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	4619      	mov	r1, r3
 80051ba:	f001 f90e 	bl	80063da <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f7fd fd65 	bl	8002c98 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3308      	adds	r3, #8
 80051de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fdeb 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f103 0018 	add.w	r0, r3, #24
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f8:	4413      	add	r3, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	f7fe fdde 	bl	8003dbc <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8005200:	bf00      	nop
 8005202:	372c      	adds	r7, #44	; 0x2c
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}

08005208 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005212:	2200      	movs	r2, #0
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f001 f90f 	bl	800643a <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 800521c:	4603      	mov	r3, r0
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005230:	6838      	ldr	r0, [r7, #0]
 8005232:	f7fb fef1 	bl	8001018 <_ZN8ResponceD1Ev>
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800523e:	b590      	push	{r4, r7, lr}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd ffec 	bl	8003228 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8005250:	4604      	mov	r4, r0
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4619      	mov	r1, r3
 8005256:	2010      	movs	r0, #16
 8005258:	f7fb fdb7 	bl	8000dca <_ZnwjPv>
 800525c:	4603      	mov	r3, r0
 800525e:	4621      	mov	r1, r4
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb febd 	bl	8000fe0 <_ZN8ResponceC1EOS_>
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}

0800526e <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f103 0218 	add.w	r2, r3, #24
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3308      	adds	r3, #8
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f001 f8fa 	bl	800647c <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8005288:	4603      	mov	r3, r0
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f83c 	bl	800631a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 f90d 	bl	80064c4 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	6809      	ldr	r1, [r1, #0]
 80052ce:	1a41      	subs	r1, r0, r1
 80052d0:	1089      	asrs	r1, r1, #2
 80052d2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d904      	bls.n	80052e2 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80052d8:	2200      	movs	r2, #0
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 f90b 	bl	80064f8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80052ea:	b590      	push	{r4, r7, lr}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80052f2:	687c      	ldr	r4, [r7, #4]
 80052f4:	2010      	movs	r0, #16
 80052f6:	f7fb fd74 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	f001 f994 	bl	800662c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8005304:	4603      	mov	r3, r0
      }
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}

0800530e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005316:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800531a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 f994 	bl	800664a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8005322:	4603      	mov	r3, r0
 8005324:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	f107 030c 	add.w	r3, r7, #12
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f001 f83e 	bl	80063b2 <_ZSt3minIjERKT_S2_S2_>
 8005336:	4603      	mov	r3, r0
 8005338:	681b      	ldr	r3, [r3, #0]
      }
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 f985 	bl	8006662 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8005358:	4603      	mov	r3, r0
    }
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800536c:	2200      	movs	r2, #0
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 f989 	bl	8006688 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8005376:	4603      	mov	r3, r0
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f001 f993 	bl	80066c0 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800539a:	4603      	mov	r3, r0
      }
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80053ac:	f107 030c 	add.w	r3, r7, #12
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f9a1 	bl	80066fa <_ZNSt13move_iteratorIPhEC1ES0_>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f001 f9a2 	bl	800671e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80053da:	4603      	mov	r3, r0
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 f9a2 	bl	8006742 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 80053fe:	4603      	mov	r3, r0
    }
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f9a5 	bl	8006762 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8005418:	4603      	mov	r3, r0
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f001 f9a2 	bl	8006778 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005434:	4603      	mov	r3, r0
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f001 f99c 	bl	800678e <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8005456:	4603      	mov	r3, r0
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ffda 	bl	8005424 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8005470:	4602      	mov	r2, r0
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	1a9a      	subs	r2, r3, r2
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f001 f997 	bl	80067ae <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8005480:	4603      	mov	r3, r0
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f001 f988 	bl	80067dc <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
    { return __res; }
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7fe f8bd 	bl	800367e <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8005504:	4603      	mov	r3, r0
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f001 f96d 	bl	80067fc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
	}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f001 f95a 	bl	8006820 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	10db      	asrs	r3, r3, #3
 8005588:	4a04      	ldr	r2, [pc, #16]	; (800559c <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 800558a:	fb02 f303 	mul.w	r3, r2, r3
    }
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	aaaaaaab 	.word	0xaaaaaaab

080055a0 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	18ca      	adds	r2, r1, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]
    }
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <_ZSt12__miter_baseIPK8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80055e2:	b5b0      	push	{r4, r5, r7, lr}
 80055e4:	b090      	sub	sp, #64	; 0x40
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f001 f920 	bl	8006836 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 80055f6:	4604      	mov	r4, r0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 f91c 	bl	8006836 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 80055fe:	4605      	mov	r5, r0
 8005600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fab0 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800560c:	f107 0320 	add.w	r3, r7, #32
 8005610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f918 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800561c:	f107 0010 	add.w	r0, r7, #16
 8005620:	f107 0320 	add.w	r3, r7, #32
 8005624:	462a      	mov	r2, r5
 8005626:	4621      	mov	r1, r4
 8005628:	f001 f932 	bl	8006890 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f107 0210 	add.w	r2, r7, #16
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f001 f97d 	bl	8006934 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	3740      	adds	r7, #64	; 0x40
 800563e:	46bd      	mov	sp, r7
 8005640:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005644 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	10db      	asrs	r3, r3, #3
 800565c:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x50>)
 800565e:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8005662:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	429a      	cmp	r2, r3
 800566a:	d906      	bls.n	800567a <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4619      	mov	r1, r3
 8005674:	68b8      	ldr	r0, [r7, #8]
 8005676:	f001 f96b 	bl	8006950 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f103 0108 	add.w	r1, r3, #8
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f9a9 	bl	80069dc <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	aaaaaaab 	.word	0xaaaaaaab

08005698 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80056a6:	f107 0310 	add.w	r3, r7, #16
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe fa5d 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	f001 f9a1 	bl	8006a02 <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	10db      	asrs	r3, r3, #3
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x50>)
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80056e8:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d906      	bls.n	8005700 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	4619      	mov	r1, r3
 80056fa:	68b8      	ldr	r0, [r7, #8]
 80056fc:	f001 f99c 	bl	8006a38 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f103 0118 	add.w	r1, r3, #24
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff f9dd 	bl	8004aca <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	aaaaaaab 	.word	0xaaaaaaab

0800571c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>:
      deque<_Tp, _Alloc>::
 800571c:	b5b0      	push	{r4, r5, r7, lr}
 800571e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8005722:	af04      	add	r7, sp, #16
 8005724:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8005728:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 800572c:	6020      	str	r0, [r4, #0]
 800572e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8005732:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8005736:	6001      	str	r1, [r0, #0]
 8005738:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800573c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005740:	600a      	str	r2, [r1, #0]
 8005742:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005746:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 800574a:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 800574c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005750:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800575e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005762:	4611      	mov	r1, r2
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	f7fe f8e9 	bl	800393c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 800576a:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 800576e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005772:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	f7fd f932 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 800577c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8005780:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005784:	085a      	lsrs	r2, r3, #1
 8005786:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800578a:	429a      	cmp	r2, r3
 800578c:	f240 8158 	bls.w	8005a40 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8005790:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005794:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8005798:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800579c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057a0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	f7ff ff4d 	bl	8005644 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 80057aa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057ae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f103 0208 	add.w	r2, r3, #8
 80057b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe f9d4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 80057c4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057c8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f103 0108 	add.w	r1, r3, #8
 80057d2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80057da:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff f973 	bl	8004aca <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 80057e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057e8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057f2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80057f6:	4614      	mov	r4, r2
 80057f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 80057fe:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005802:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005806:	429a      	cmp	r2, r3
 8005808:	f2c0 8098 	blt.w	800593c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 800580c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005810:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f103 0108 	add.w	r1, r3, #8
 800581a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800581e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005822:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff f94f 	bl	8004aca <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 800582c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005830:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe f993 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005846:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800584a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe f98b 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005856:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800585a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe f983 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						_M_get_Tp_allocator());
 8005866:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800586a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe f844 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005876:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8005878:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800587c:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8005880:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005884:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005888:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800588c:	9400      	str	r4, [sp, #0]
 800588e:	f001 f917 	bl	8006ac0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		    this->_M_impl._M_start = __new_start;
 8005892:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005896:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80058a0:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80058a4:	f103 0408 	add.w	r4, r3, #8
 80058a8:	4613      	mov	r3, r2
 80058aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 80058b0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80058b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f956 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80058c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80058c4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80058c8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe f94c 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80058d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80058d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe f944 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80058e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80058e8:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80058ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80058f0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80058f4:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80058f8:	f001 f91b 	bl	8006b32 <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 80058fc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005900:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005904:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8005908:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800590c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	f001 f863 	bl	80069dc <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005916:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800591a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800591e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005922:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005926:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 800592a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800592e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	6809      	ldr	r1, [r1, #0]
 8005936:	f7fe ff52 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 800593a:	e1dd      	b.n	8005cf8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		    _ForwardIterator __mid = __first;
 800593c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005940:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005944:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005948:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8005950:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005954:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f001 f91c 	bl	8006b9e <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005966:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800596a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f103 0208 	add.w	r2, r3, #8
 8005974:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe f8f6 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005980:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005984:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005988:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe f8ec 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005994:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005998:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800599c:	681c      	ldr	r4, [r3, #0]
 800599e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80059a2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe f8df 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						   _M_get_Tp_allocator());
 80059ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059b2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd ffa0 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80059be:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80059c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059c4:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 80059c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059cc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80059d0:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 80059d4:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80059d8:	9202      	str	r2, [sp, #8]
 80059da:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80059de:	9201      	str	r2, [sp, #4]
 80059e0:	9400      	str	r4, [sp, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	462a      	mov	r2, r5
 80059e6:	f001 f8ed 	bl	8006bc4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>
		    this->_M_impl._M_start = __new_start;
 80059ea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80059f8:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80059fc:	f103 0408 	add.w	r4, r3, #8
 8005a00:	4613      	mov	r3, r2
 8005a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8005a08:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a10:	681c      	ldr	r4, [r3, #0]
 8005a12:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a16:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe f8a5 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005a22:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a26:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8005a2a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005a2e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005a32:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f7fe fed0 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005a3e:	e15b      	b.n	8005cf8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8005a40:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a44:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8005a48:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a4c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a50:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	f7ff fe37 	bl	80056c8 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8005a5a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f103 0218 	add.w	r2, r3, #24
 8005a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe f87c 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    difference_type(__length) - __elemsbefore;
 8005a74:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8005a78:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8005a82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a86:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f103 0118 	add.w	r1, r3, #24
 8005a90:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a98:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 ff9d 	bl	80069dc <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005aa2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005aa6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ab0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8005abc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005ac0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f340 8096 	ble.w	8005bf6 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8005aca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ace:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f103 0118 	add.w	r1, r3, #24
 8005ad8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005adc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ae0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 ff79 	bl	80069dc <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8005aea:	f107 0218 	add.w	r2, r7, #24
 8005aee:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe f839 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005afa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005afe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005b08:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe f82c 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005b14:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b18:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005b22:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe f81f 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      _M_get_Tp_allocator());
 8005b2e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b32:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd fee0 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005b3e:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8005b40:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b44:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8005b48:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005b4c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8005b50:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8005b54:	9400      	str	r4, [sp, #0]
 8005b56:	f000 ffb3 	bl	8006ac0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8005b5a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005b68:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005b6c:	f103 0418 	add.w	r4, r3, #24
 8005b70:	4613      	mov	r3, r2
 8005b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8005b78:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b7c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005b80:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	4610      	mov	r0, r2
 8005b88:	f7fd fff0 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005b8c:	f107 0218 	add.w	r2, r7, #24
 8005b90:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd ffe8 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005b9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ba0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd ffe0 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005bac:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8005bb0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005bb4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8005bb8:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005bbc:	f001 f842 	bl	8006c44 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		  std::copy(__first, __last, __pos);
 8005bc0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bc4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005bc8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fd ffcc 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005bd4:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8005bd8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8005bdc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005be0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005be4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005be8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	6809      	ldr	r1, [r1, #0]
 8005bf0:	f7fe fdf5 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005bf4:	e080      	b.n	8005cf8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8005bf6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bfa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005bfe:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c02:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 ffc3 	bl	8006b9e <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005c18:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c1c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005c20:	681c      	ldr	r4, [r3, #0]
 8005c22:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c26:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005c2a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7fd ff9b 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005c36:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c3a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005c44:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fd ff8e 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005c50:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c54:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005c5e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fd ff81 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 _M_get_Tp_allocator());
 8005c6a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c6e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fe42 	bl	80038fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005c7a:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005c7c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8005c80:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8005c84:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c88:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005c8c:	9302      	str	r3, [sp, #8]
 8005c8e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	f001 f806 	bl	8006cb0 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8005ca4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ca8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005cb2:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005cb6:	f103 0418 	add.w	r4, r3, #24
 8005cba:	4613      	mov	r3, r2
 8005cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8005cc2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cc6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005cca:	681c      	ldr	r4, [r3, #0]
 8005ccc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cd0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005cd4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fd ff46 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005ce0:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8005ce4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8005ce8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005cec:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	6809      	ldr	r1, [r1, #0]
 8005cf4:	f7fe fd73 	bl	80047de <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005cf8:	bf00      	nop
 8005cfa:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bdb0      	pop	{r4, r5, r7, pc}

08005d02 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005d02:	b5b0      	push	{r4, r5, r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fe fe40 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d14:	4605      	mov	r5, r0
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	2018      	movs	r0, #24
 8005d1c:	f7fb f855 	bl	8000dca <_ZnwjPv>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461c      	mov	r4, r3
 8005d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005d2c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bdb0      	pop	{r4, r5, r7, pc}

08005d38 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f8f7 	bl	8005f36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fff0 	bl	8006d30 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005d70:	461a      	mov	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d904      	bls.n	8005d82 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8005d78:	2201      	movs	r2, #1
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fff1 	bl	8006d64 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005d8a:	b590      	push	{r4, r7, lr}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005d92:	687c      	ldr	r4, [r7, #4]
 8005d94:	2018      	movs	r0, #24
 8005d96:	f7fb f824 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f001 f87a 	bl	8006e98 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 8005da4:	4603      	mov	r3, r0
      }
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd90      	pop	{r4, r7, pc}

08005dae <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f103 0218 	add.w	r2, r3, #24
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d10a      	bne.n	8005de4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv+0x36>
	    _M_set_node(_M_node + 1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe fe53 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
	return *this;
 8005de4:	687b      	ldr	r3, [r7, #4]
      }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f001 f859 	bl	8006eb6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	10db      	asrs	r3, r3, #3
 8005e22:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	db08      	blt.n	8005e48 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8005e36:	f7fe fe40 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4293      	cmp	r3, r2
 8005e42:	da01      	bge.n	8005e48 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	18ca      	adds	r2, r1, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e02f      	b.n	8005ec4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd07      	ble.n	8005e7a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 8005e6a:	f7fe fe26 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e78:	e007      	b.n	8005e8a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8005e7e:	f7fe fe1c 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005e82:	4603      	mov	r3, r0
 8005e84:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8005e88:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8005e8a:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fe fdf2 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8005ea2:	f7fe fe0a 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	18e2      	adds	r2, r4, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
	return *this;
 8005ec4:	687b      	ldr	r3, [r7, #4]
      }
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	aaaaaaab 	.word	0xaaaaaaab

08005ed4 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005f22:	2200      	movs	r2, #0
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 ffd8 	bl	8006edc <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 ffde 	bl	8006f18 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	68b8      	ldr	r0, [r7, #8]
 8005f90:	f015 fef4 	bl	801bd7c <_ZdlPvj>
      }
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005fa0:	2018      	movs	r0, #24
 8005fa2:	f7fa ff1e 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}

08005fac <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8005fac:	b5b0      	push	{r4, r5, r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ffb9 	bl	8006f2e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ffe1 	bl	8006f8c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f000 ffaf 	bl	8006f2e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	461c      	mov	r4, r3
 8005fd6:	4615      	mov	r5, r2
 8005fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005fe4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 ff9e 	bl	8006f2e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006002:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006006:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800600a:	bf00      	nop
 800600c:	3730      	adds	r7, #48	; 0x30
 800600e:	46bd      	mov	sp, r7
 8006010:	bdb0      	pop	{r4, r5, r7, pc}

08006012 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8006012:	b590      	push	{r4, r7, lr}
 8006014:	b08b      	sub	sp, #44	; 0x2c
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 800601c:	f107 0308 	add.w	r3, r7, #8
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fc fe7d 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006028:	f107 0318 	add.w	r3, r7, #24
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fc fe5d 	bl	8002cee <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fc fe68 	bl	8002d0c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800603c:	4603      	mov	r3, r0
 800603e:	f107 0218 	add.w	r2, r7, #24
 8006042:	f107 0108 	add.w	r1, r7, #8
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc fe87 	bl	8002d5a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8006058:	3304      	adds	r3, #4
 800605a:	461a      	mov	r2, r3
 800605c:	f7fc fe02 	bl	8002c64 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	f103 0418 	add.w	r4, r3, #24
 8006068:	4613      	mov	r3, r2
 800606a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800606c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8006070:	bf00      	nop
 8006072:	372c      	adds	r7, #44	; 0x2c
 8006074:	46bd      	mov	sp, r7
 8006076:	bd90      	pop	{r4, r7, pc}

08006078 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8006084:	68b8      	ldr	r0, [r7, #8]
 8006086:	f000 ffa0 	bl	8006fca <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8006092:	b5b0      	push	{r4, r5, r7, lr}
 8006094:	b08c      	sub	sp, #48	; 0x30
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 ff9f 	bl	8006fe0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80060a2:	4602      	mov	r2, r0
 80060a4:	f107 0308 	add.w	r3, r7, #8
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 ffc7 	bl	800703e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80060b0:	6838      	ldr	r0, [r7, #0]
 80060b2:	f000 ff95 	bl	8006fe0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80060b6:	4602      	mov	r2, r0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	461c      	mov	r4, r3
 80060bc:	4615      	mov	r5, r2
 80060be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80060ca:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 ff84 	bl	8006fe0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80060d8:	4602      	mov	r2, r0
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	461c      	mov	r4, r3
 80060de:	4615      	mov	r5, r2
 80060e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80060ec:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80060f0:	bf00      	nop
 80060f2:	3730      	adds	r7, #48	; 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bdb0      	pop	{r4, r5, r7, pc}

080060f8 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b08b      	sub	sp, #44	; 0x2c
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7fc fead 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800610e:	f107 0318 	add.w	r3, r7, #24
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4618      	mov	r0, r3
 8006116:	f7fc fe8d 	bl	8002e34 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4618      	mov	r0, r3
 800611e:	f7fc fe98 	bl	8002e52 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8006122:	4603      	mov	r3, r0
 8006124:	f107 0218 	add.w	r2, r7, #24
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fc feb7 	bl	8002ea0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 800613e:	3304      	adds	r3, #4
 8006140:	461a      	mov	r2, r3
 8006142:	f7fd ff73 	bl	800402c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	f103 0418 	add.w	r4, r3, #24
 800614e:	4613      	mov	r3, r2
 8006150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8006156:	bf00      	nop
 8006158:	372c      	adds	r7, #44	; 0x2c
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}

0800615e <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800616a:	68b8      	ldr	r0, [r7, #8]
 800616c:	f000 ff86 	bl	800707c <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 ff85 	bl	8007092 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006188:	4602      	mov	r2, r0
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f000 ffad 	bl	80070f0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006196:	6838      	ldr	r0, [r7, #0]
 8006198:	f000 ff7b 	bl	8007092 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	461c      	mov	r4, r3
 80061a2:	4615      	mov	r5, r2
 80061a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80061b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 ff6a 	bl	8007092 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	461c      	mov	r4, r3
 80061c4:	4615      	mov	r5, r2
 80061c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80061d2:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80061d6:	bf00      	nop
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bdb0      	pop	{r4, r5, r7, pc}

080061de <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80061ea:	68b8      	ldr	r0, [r7, #8]
 80061ec:	f000 ff9f 	bl	800712e <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 ff9d 	bl	8007144 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 800620a:	4602      	mov	r2, r0
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4293      	cmp	r3, r2
 8006210:	bf8c      	ite	hi
 8006212:	2301      	movhi	r3, #1
 8006214:	2300      	movls	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800621c:	f015 fdc1 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4618      	mov	r0, r3
 8006226:	f015 fdab 	bl	801bd80 <_Znwj>
 800622a:	4603      	mov	r3, r0
      }
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4619      	mov	r1, r3
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f015 fd95 	bl	801bd7c <_ZdlPvj>
      }
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 ff6d 	bl	800715c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80062d8:	2200      	movs	r2, #0
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 ff55 	bl	800718c <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80062f0:	2010      	movs	r0, #16
 80062f2:	f7fa fd76 	bl	8000de2 <_ZSt16__deque_buf_sizej>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}

080062fc <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 ff5b 	bl	80071c8 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 ff54 	bl	80071e8 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4619      	mov	r1, r3
 8006372:	68b8      	ldr	r0, [r7, #8]
 8006374:	f015 fd02 	bl	801bd7c <_ZdlPvj>
      }
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 ff36 	bl	80071fe <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ff43 	bl	800722e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 80063a8:	4603      	mov	r3, r0
      }
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d201      	bcs.n	80063cc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	e000      	b.n	80063ce <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80063cc:	687b      	ldr	r3, [r7, #4]
    }
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80063da:	b590      	push	{r4, r7, lr}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 ff2d 	bl	8007246 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80063ec:	4604      	mov	r4, r0
 80063ee:	68b8      	ldr	r0, [r7, #8]
 80063f0:	f000 ff29 	bl	8007246 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80063f4:	4603      	mov	r3, r0
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 ff2e 	bl	800725c <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006400:	4603      	mov	r3, r0
    }
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bd90      	pop	{r4, r7, pc}

0800640a <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800640a:	b590      	push	{r4, r7, lr}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 ff15 	bl	8007246 <_ZSt12__miter_baseIPP7RequestET_S3_>
 800641c:	4604      	mov	r4, r0
 800641e:	68b8      	ldr	r0, [r7, #8]
 8006420:	f000 ff11 	bl	8007246 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006424:	4603      	mov	r3, r0
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4619      	mov	r1, r3
 800642a:	4620      	mov	r0, r4
 800642c:	f000 ff39 	bl	80072a2 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006430:	4603      	mov	r3, r0
    }
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bd90      	pop	{r4, r7, pc}

0800643a <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 ff4e 	bl	80072e8 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 800644c:	4602      	mov	r2, r0
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4293      	cmp	r3, r2
 8006452:	bf8c      	ite	hi
 8006454:	2301      	movhi	r3, #1
 8006456:	2300      	movls	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800645e:	f015 fca0 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f015 fc87 	bl	801bd80 <_Znwj>
 8006472:	4603      	mov	r3, r0
      }
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8006486:	f7ff ff31 	bl	80062ec <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 800648a:	4603      	mov	r3, r0
 800648c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	109b      	asrs	r3, r3, #2
 800649a:	3b01      	subs	r3, #1
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6811      	ldr	r1, [r2, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6852      	ldr	r2, [r2, #4]
 80064a8:	1a8a      	subs	r2, r1, r2
 80064aa:	1112      	asrs	r2, r2, #4
 80064ac:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	6891      	ldr	r1, [r2, #8]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	1a8a      	subs	r2, r1, r2
 80064b8:	1112      	asrs	r2, r2, #4
 80064ba:	4413      	add	r3, r2
      }
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80064cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80064d0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 ff16 	bl	8007304 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 80064d8:	4603      	mov	r3, r0
 80064da:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80064dc:	f107 0208 	add.w	r2, r7, #8
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ff63 	bl	80063b2 <_ZSt3minIjERKT_S2_S2_>
 80064ec:	4603      	mov	r3, r0
 80064ee:	681b      	ldr	r3, [r3, #0]
      }
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b08b      	sub	sp, #44	; 0x2c
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	109b      	asrs	r3, r3, #2
 8006512:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006514:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	429a      	cmp	r2, r3
 8006528:	d92d      	bls.n	8006586 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	1acb      	subs	r3, r1, r3
 8006536:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006538:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	e000      	b.n	8006548 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006546:	2300      	movs	r3, #0
 8006548:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800654a:	4413      	add	r3, r2
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	429a      	cmp	r2, r3
 8006556:	d209      	bcs.n	800656c <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006560:	3304      	adds	r3, #4
 8006562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006564:	4619      	mov	r1, r3
 8006566:	f000 fed9 	bl	800731c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 800656a:	e048      	b.n	80065fe <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006574:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	4413      	add	r3, r2
 800657e:	461a      	mov	r2, r3
 8006580:	f000 fee4 	bl	800734c <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 8006584:	e03b      	b.n	80065fe <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3304      	adds	r3, #4
 800658e:	f107 0208 	add.w	r2, r7, #8
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd fbc6 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 800659a:	4603      	mov	r3, r0
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80065a0:	3302      	adds	r3, #2
 80065a2:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fc8e 	bl	8004eca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80065ae:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	e000      	b.n	80065c8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80065c6:	2300      	movs	r3, #0
 80065c8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80065d8:	3304      	adds	r3, #4
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	4619      	mov	r1, r3
 80065de:	f000 fe9d 	bl	800731c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f7fd fd37 	bl	8004060 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3308      	adds	r3, #8
 8006602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe fc97 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f103 0018 	add.w	r0, r3, #24
 8006610:	6a3a      	ldr	r2, [r7, #32]
 8006612:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	4413      	add	r3, r2
 800661e:	4619      	mov	r1, r3
 8006620:	f7fe fc8a 	bl	8004f38 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006624:	bf00      	nop
 8006626:	372c      	adds	r7, #44	; 0x2c
 8006628:	46bd      	mov	sp, r7
 800662a:	bd90      	pop	{r4, r7, pc}

0800662c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006636:	2200      	movs	r2, #0
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fe9e 	bl	800737c <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8006640:	4603      	mov	r3, r0
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 feb0 	bl	80073b8 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8006658:	4603      	mov	r3, r0
      }
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	f107 030f 	add.w	r3, r7, #15
 8006674:	461a      	mov	r2, r3
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fea9 	bl	80073d0 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 800667e:	4603      	mov	r3, r0
	}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 feb6 	bl	8007406 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800669a:	4602      	mov	r2, r0
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4293      	cmp	r3, r2
 80066a0:	bf8c      	ite	hi
 80066a2:	2301      	movhi	r3, #1
 80066a4:	2300      	movls	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80066ac:	f015 fb79 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80066b0:	68b8      	ldr	r0, [r7, #8]
 80066b2:	f015 fb65 	bl	801bd80 <_Znwj>
 80066b6:	4603      	mov	r3, r0
      }
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7fe fee6 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 80066d4:	4604      	mov	r4, r0
 80066d6:	68b8      	ldr	r0, [r7, #8]
 80066d8:	f7fe fee2 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 80066dc:	4605      	mov	r5, r0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe fede 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 80066e4:	4602      	mov	r2, r0
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	4629      	mov	r1, r5
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fe97 	bl	800741e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80066f0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bdb0      	pop	{r4, r5, r7, pc}

080066fa <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006704:	463b      	mov	r3, r7
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fea4 	bl	8007454 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800670c:	4603      	mov	r3, r0
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 fe99 	bl	800746a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8006738:	4603      	mov	r3, r0
    }
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fe99 	bl	800748a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8006758:	4603      	mov	r3, r0
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fe8b 	bl	80074ba <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80067a4:	4603      	mov	r3, r0
    }
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	4413      	add	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	f107 020c 	add.w	r2, r7, #12
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fd fefe 	bl	80045ce <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fe64 	bl	80074ba <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80067f2:	4603      	mov	r3, r0
    }
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fc fc98 	bl	800313e <_ZNSaIhEC1ERKS_>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	f7fc fb70 	bl	8002ef6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __niter_base(_Iterator __it)
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
    { return __it; }
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fd f987 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	da01      	bge.n	8006880 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	e000      	b.n	8006882 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8006880:	687b      	ldr	r3, [r7, #4]
    }
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	10db      	asrs	r3, r3, #3
 80068a6:	4a22      	ldr	r2, [pc, #136]	; (8006930 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dd34      	ble.n	800691e <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	10db      	asrs	r3, r3, #3
 80068c0:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	f107 0218 	add.w	r2, r7, #24
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ffc7 	bl	8006866 <_ZSt3minIiERKT_S2_S2_>
 80068d8:	4603      	mov	r3, r0
	  const difference_type __clen
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	1899      	adds	r1, r3, r2
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68b8      	ldr	r0, [r7, #8]
 80068f6:	f000 fdfa 	bl	80074ee <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
				       __result._M_cur);

	  __first += __clen;
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	4613      	mov	r3, r2
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4413      	add	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	461a      	mov	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4413      	add	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 800690c:	69f9      	ldr	r1, [r7, #28]
 800690e:	6838      	ldr	r0, [r7, #0]
 8006910:	f7ff fa7c 	bl	8005e0c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800691c:	e7c7      	b.n	80068ae <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7fd f923 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	aaaaaaab 	.word	0xaaaaaaab

08006934 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
    { return __res; }
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7fd f912 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff f9ec 	bl	8005d38 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8006960:	4604      	mov	r4, r0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fc f83c 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8006968:	4603      	mov	r3, r0
 800696a:	1ae3      	subs	r3, r4, r3
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	bf8c      	ite	hi
 8006972:	2301      	movhi	r3, #1
 8006974:	2300      	movls	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 800697c:	4816      	ldr	r0, [pc, #88]	; (80069d8 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x88>)
 800697e:	f015 fa13 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006982:	f7ff fb0b 	bl	8005f9c <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006986:	4602      	mov	r2, r0
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 800698e:	f7ff fb05 	bl	8005f9c <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006992:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006994:	fbb4 f3f3 	udiv	r3, r4, r3
 8006998:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f9dc 	bl	8005d5a <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80069a2:	2301      	movs	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d80f      	bhi.n	80069ce <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	425b      	negs	r3, r3
 80069ba:	18d4      	adds	r4, r2, r3
 80069bc:	4608      	mov	r0, r1
 80069be:	f7ff f9e4 	bl	8005d8a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 80069c2:	4603      	mov	r3, r0
 80069c4:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e7eb      	b.n	80069a6 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x56>
    }
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	0801d3b8 	.word	0x0801d3b8

080069dc <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7fd f8be 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp -= __n;
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fd8b 	bl	800750e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	return __tmp;
 80069f8:	bf00      	nop
      }
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b08a      	sub	sp, #40	; 0x28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fd f8a5 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	f000 fd7f 	bl	800752e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>
    }
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	3728      	adds	r7, #40	; 0x28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff f978 	bl	8005d38 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fb ffc8 	bl	80029e0 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8006a50:	4603      	mov	r3, r0
 8006a52:	1ae3      	subs	r3, r4, r3
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bf8c      	ite	hi
 8006a5a:	2301      	movhi	r3, #1
 8006a5c:	2300      	movls	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8006a64:	4815      	ldr	r0, [pc, #84]	; (8006abc <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x84>)
 8006a66:	f015 f99f 	bl	801bda8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006a6a:	f7ff fa97 	bl	8005f9c <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	4413      	add	r3, r2
 8006a74:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006a76:	f7ff fa91 	bl	8005f9c <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006a7a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006a7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006a80:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fd79 	bl	800757c <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d80e      	bhi.n	8006ab4 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	18d4      	adds	r4, r2, r3
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	f7ff f971 	bl	8005d8a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e7ec      	b.n	8006a8e <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x56>
    }
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd90      	pop	{r4, r7, pc}
 8006abc:	0801d3d8 	.word	0x0801d3d8

08006ac0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b09b      	sub	sp, #108	; 0x6c
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8006ace:	f107 0320 	add.w	r3, r7, #32
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fd f849 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006ada:	f107 0310 	add.w	r3, r7, #16
 8006ade:	f107 0220 	add.w	r2, r7, #32
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fd64 	bl	80075b2 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fd f83b 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006afa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd56 	bl	80075b2 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd f82d 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006b18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b1c:	f107 0110 	add.w	r1, r7, #16
 8006b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	4623      	mov	r3, r4
 8006b26:	f000 fd6d 	bl	8007604 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>
    }
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	3764      	adds	r7, #100	; 0x64
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd90      	pop	{r4, r7, pc}

08006b32 <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move(_II __first, _II __last, _OI __result)
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b098      	sub	sp, #96	; 0x60
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8006b40:	f107 0320 	add.w	r3, r7, #32
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd f810 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b4c:	f107 0310 	add.w	r3, r7, #16
 8006b50:	f107 0220 	add.w	r2, r7, #32
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fd7a 	bl	8007650 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fd f802 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fd6c 	bl	8007650 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006b78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fc fff4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b8e:	f107 0110 	add.w	r1, r7, #16
 8006b92:	f000 fd6a 	bl	800766a <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	3760      	adds	r7, #96	; 0x60
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8006b9e:	b590      	push	{r4, r7, lr}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fd fe36 	bl	800481e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fe fcf2 	bl	80055a0 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd90      	pop	{r4, r7, pc}

08006bc4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b0a3      	sub	sp, #140	; 0x8c
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8006bd2:	f107 0320 	add.w	r3, r7, #32
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fc ffc7 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fc ffc1 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bee:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fc ffba 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bf8:	f107 0010 	add.w	r0, r7, #16
 8006bfc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006c00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c04:	f107 0120 	add.w	r1, r7, #32
 8006c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	4623      	mov	r3, r4
 8006c10:	f7ff ff56 	bl	8006ac0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8006c14:	f107 0210 	add.w	r2, r7, #16
 8006c18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fc ffa4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	f7fe fd2e 	bl	8005698 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
    }
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	3784      	adds	r7, #132	; 0x84
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd90      	pop	{r4, r7, pc}

08006c44 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b098      	sub	sp, #96	; 0x60
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
					       __result);
 8006c52:	f107 0320 	add.w	r3, r7, #32
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fc ff87 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	f107 0220 	add.w	r2, r7, #32
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fcf1 	bl	8007650 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fc ff79 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fce3 	bl	8007650 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006c8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fc ff6b 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ca0:	f107 0110 	add.w	r1, r7, #16
 8006ca4:	f000 fd27 	bl	80076f6 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	3760      	adds	r7, #96	; 0x60
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b0a3      	sub	sp, #140	; 0x8c
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8006cbe:	f107 0320 	add.w	r3, r7, #32
 8006cc2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc ff50 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006ccc:	f107 0010 	add.w	r0, r7, #16
 8006cd0:	f107 0220 	add.w	r2, r7, #32
 8006cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	f7fe fcda 	bl	8005698 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8006ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fc ff3e 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fc ff37 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cfe:	f107 0210 	add.w	r2, r7, #16
 8006d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc ff2f 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006d14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d18:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4623      	mov	r3, r4
 8006d24:	f7ff fecc 	bl	8006ac0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
    }
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	3784      	adds	r7, #132	; 0x84
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006d38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d3c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fd1f 	bl	8007782 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 8006d44:	4603      	mov	r3, r0
 8006d46:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fb2d 	bl	80063b2 <_ZSt3minIjERKT_S2_S2_>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	681b      	ldr	r3, [r3, #0]
      }
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b08b      	sub	sp, #44	; 0x2c
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	109b      	asrs	r3, r3, #2
 8006d7e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006d80:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d92d      	bls.n	8006df2 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	1acb      	subs	r3, r1, r3
 8006da2:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006da4:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	e000      	b.n	8006db4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006db2:	2300      	movs	r3, #0
 8006db4:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006db6:	4413      	add	r3, r2
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d209      	bcs.n	8006dd8 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006dcc:	3304      	adds	r3, #4
 8006dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f000 fce2 	bl	800779a <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006dd6:	e048      	b.n	8006e6a <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006de0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de8:	4413      	add	r3, r2
 8006dea:	461a      	mov	r2, r3
 8006dec:	f000 fced 	bl	80077ca <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006df0:	e03b      	b.n	8006e6a <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc ff90 	bl	8003d26 <_ZSt3maxIjERKT_S2_S2_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd fea7 	bl	8004b68 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8006e1a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	e000      	b.n	8006e34 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006e32:	2300      	movs	r3, #0
 8006e34:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006e44:	3304      	adds	r3, #4
 8006e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f000 fca6 	bl	800779a <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f7fc fe4d 	bl	8003af8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd fe06 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f103 0018 	add.w	r0, r3, #24
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e88:	4413      	add	r3, r2
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7fd fdf9 	bl	8004a82 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006e90:	bf00      	nop
 8006e92:	372c      	adds	r7, #44	; 0x2c
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fca7 	bl	80077fa <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8006eac:	4603      	mov	r3, r0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	4413      	add	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4619      	mov	r1, r3
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f014 ff54 	bl	801bd7c <_ZdlPvj>
      }
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fca7 	bl	800783c <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf8c      	ite	hi
 8006ef6:	2301      	movhi	r3, #1
 8006ef8:	2300      	movls	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f00:	f014 ff4f 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f014 ff39 	bl	801bd80 <_Znwj>
 8006f0e:	4603      	mov	r3, r0
      }
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fb fed9 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f103 0218 	add.w	r2, r3, #24
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	3318      	adds	r3, #24
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fb fed0 	bl	8002d22 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b08c      	sub	sp, #48	; 0x30
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ffd3 	bl	8006f44 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fc fe9b 	bl	8003cde <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	461d      	mov	r5, r3
 8006fac:	f107 0408 	add.w	r4, r7, #8
 8006fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bdb0      	pop	{r4, r5, r7, pc}

08006fca <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f103 0208 	add.w	r2, r3, #8
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3308      	adds	r3, #8
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7fb ff23 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 0218 	add.w	r2, r3, #24
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	3318      	adds	r3, #24
 800702c:	4619      	mov	r1, r3
 800702e:	4610      	mov	r0, r2
 8007030:	f7fb ff1a 	bl	8002e68 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 800703e:	b5b0      	push	{r4, r5, r7, lr}
 8007040:	b08c      	sub	sp, #48	; 0x30
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff ffd3 	bl	8006ff6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8007050:	f107 0308 	add.w	r3, r7, #8
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd ff14 	bl	8004e82 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	461d      	mov	r5, r3
 800705e:	f107 0408 	add.w	r4, r7, #8
 8007062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800706a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800706e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4618      	mov	r0, r3
 8007076:	3730      	adds	r7, #48	; 0x30
 8007078:	46bd      	mov	sp, r7
 800707a:	bdb0      	pop	{r4, r5, r7, pc}

0800707c <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f103 0208 	add.w	r2, r3, #8
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fc fd4c 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f103 0218 	add.w	r2, r3, #24
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	3318      	adds	r3, #24
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fc fd43 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80070f0:	b5b0      	push	{r4, r5, r7, lr}
 80070f2:	b08c      	sub	sp, #48	; 0x30
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ffd3 	bl	80070a8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8007102:	f107 0308 	add.w	r3, r7, #8
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fd0a 	bl	8004b20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	461d      	mov	r5, r3
 8007110:	f107 0408 	add.w	r4, r7, #8
 8007114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800711c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007120:	e885 0003 	stmia.w	r5, {r0, r1}
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	3730      	adds	r7, #48	; 0x30
 800712a:	46bd      	mov	sp, r7
 800712c:	bdb0      	pop	{r4, r5, r7, pc}

0800712e <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800714c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d00a      	beq.n	8007184 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fb70 	bl	8007854 <_ZSt11__addressofI7RequestEPT_RS1_>
 8007174:	4603      	mov	r3, r0
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fb77 	bl	800786a <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3314      	adds	r3, #20
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	e7f0      	b.n	8007166 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fb71 	bl	8007880 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bf8c      	ite	hi
 80071a6:	2301      	movhi	r3, #1
 80071a8:	2300      	movls	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80071b0:	f014 fdf7 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f014 fde1 	bl	801bd80 <_Znwj>
 80071be:	4603      	mov	r3, r0
      }
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	68b8      	ldr	r0, [r7, #8]
 80071dc:	f014 fdce 	bl	801bd7c <_ZdlPvj>
      }
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d00a      	beq.n	8007226 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb41 	bl	8007898 <_ZSt11__addressofI8ResponceEPT_RS1_>
 8007216:	4603      	mov	r3, r0
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fb48 	bl	80078ae <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3310      	adds	r3, #16
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	e7f0      	b.n	8007208 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f856 	bl	80072e8 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 800723c:	4603      	mov	r3, r0
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fb2b 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800726e:	4604      	mov	r4, r0
 8007270:	68b8      	ldr	r0, [r7, #8]
 8007272:	f000 fb27 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007276:	4605      	mov	r5, r0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fb22 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	4629      	mov	r1, r5
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fb27 	bl	80078da <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 800728c:	4602      	mov	r2, r0
 800728e:	1d3b      	adds	r3, r7, #4
 8007290:	4611      	mov	r1, r2
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fb31 	bl	80078fa <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8007298:	4603      	mov	r3, r0
    }
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bdb0      	pop	{r4, r5, r7, pc}

080072a2 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80072a2:	b5b0      	push	{r4, r5, r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fb08 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072b4:	4604      	mov	r4, r0
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f000 fb04 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072bc:	4605      	mov	r5, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 faff 	bl	80078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	4629      	mov	r1, r5
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fb20 	bl	8007912 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80072d2:	4602      	mov	r2, r0
 80072d4:	1d3b      	adds	r3, r7, #4
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fb0e 	bl	80078fa <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80072de:	4603      	mov	r3, r0
    }
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bdb0      	pop	{r4, r5, r7, pc}

080072e8 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	06666666 	.word	0x06666666

08007304 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fb10 	bl	8007932 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8007312:	4603      	mov	r3, r0
      }
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fb0e 	bl	800794a <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800732e:	4604      	mov	r4, r0
 8007330:	68b8      	ldr	r0, [r7, #8]
 8007332:	f000 fb0a 	bl	800794a <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8007336:	4603      	mov	r3, r0
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4619      	mov	r1, r3
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fb0f 	bl	8007960 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007342:	4603      	mov	r3, r0
    }
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	bd90      	pop	{r4, r7, pc}

0800734c <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 faf6 	bl	800794a <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800735e:	4604      	mov	r4, r0
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f000 faf2 	bl	800794a <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8007366:	4603      	mov	r3, r0
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4619      	mov	r1, r3
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fb1a 	bl	80079a6 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007372:	4603      	mov	r3, r0
    }
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}

0800737c <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fb2f 	bl	80079ec <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 800738e:	4602      	mov	r2, r0
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4293      	cmp	r3, r2
 8007394:	bf8c      	ite	hi
 8007396:	2301      	movhi	r3, #1
 8007398:	2300      	movls	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80073a0:	f014 fcff 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f014 fce9 	bl	801bd80 <_Znwj>
 80073ae:	4603      	mov	r3, r0
      }
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f820 	bl	8007406 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80073c6:	4603      	mov	r3, r0
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80073dc:	68fc      	ldr	r4, [r7, #12]
 80073de:	68b8      	ldr	r0, [r7, #8]
 80073e0:	f7f9 fce8 	bl	8000db4 <_ZSt17__size_to_integerj>
 80073e4:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80073e6:	f107 030c 	add.w	r3, r7, #12
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fb0a 	bl	8007a04 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80073f0:	4633      	mov	r3, r6
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4629      	mov	r1, r5
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 fb0f 	bl	8007a1a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 80073fc:	4603      	mov	r3, r0
    }
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007406 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800740e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800741e:	b580      	push	{r7, lr}
 8007420:	b086      	sub	sp, #24
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd05      	ble.n	8007446 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	461a      	mov	r2, r3
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f014 fd3f 	bl	801bec4 <memmove>
      return __result + __count;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
    }
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fae8 	bl	8007a50 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8007480:	4603      	mov	r3, r0
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800748a:	b590      	push	{r4, r7, lr}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7fd f8a9 	bl	80045ee <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800749c:	4604      	mov	r4, r0
 800749e:	68b8      	ldr	r0, [r7, #8]
 80074a0:	f7fd f8a5 	bl	80045ee <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80074a4:	4603      	mov	r3, r0
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4619      	mov	r1, r3
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fae8 	bl	8007a80 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 80074b0:	4603      	mov	r3, r0
    }
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}

080074ba <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b086      	sub	sp, #24
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	461a      	mov	r2, r3
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f014 fcf2 	bl	801bec4 <memmove>
	  return __result + _Num;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
	}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fae1 	bl	8007ac6 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
 8007504:	4603      	mov	r3, r0
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	425b      	negs	r3, r3
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fe fc74 	bl	8005e0c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
 8007524:	4603      	mov	r3, r0
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800752e:	b580      	push	{r7, lr}
 8007530:	b08c      	sub	sp, #48	; 0x30
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7fc fb14 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d012      	beq.n	8007572 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x44>
		std::_Construct(std::__addressof(*__cur), *__first);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fd facf 	bl	8004af0 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8007552:	4603      	mov	r3, r0
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fac6 	bl	8007ae6 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 800755a:	4603      	mov	r3, r0
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 facc 	bl	8007afc <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	3318      	adds	r3, #24
 8007568:	60bb      	str	r3, [r7, #8]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7fe fc1f 	bl	8005dae <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 8007570:	e7e8      	b.n	8007544 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x16>
	      return __cur;
 8007572:	bf00      	nop
	}
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	3730      	adds	r7, #48	; 0x30
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	6809      	ldr	r1, [r1, #0]
 8007596:	1a41      	subs	r1, r0, r1
 8007598:	1089      	asrs	r1, r1, #2
 800759a:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800759c:	429a      	cmp	r2, r3
 800759e:	d904      	bls.n	80075aa <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80075a0:	2200      	movs	r2, #0
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fbdd 	bl	8006d64 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>:
    make_move_iterator(_Iterator __i)
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 80075bc:	6838      	ldr	r0, [r7, #0]
 80075be:	f000 fab7 	bl	8007b30 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 80075c2:	4602      	mov	r2, r0
 80075c4:	f107 0308 	add.w	r3, r7, #8
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fc face 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80075d0:	f107 0308 	add.w	r3, r7, #8
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fab5 	bl	8007b46 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>:
    class move_iterator
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fc fab9 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007604:	b580      	push	{r7, lr}
 8007606:	b090      	sub	sp, #64	; 0x40
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007612:	f107 0310 	add.w	r3, r7, #16
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ffe3 	bl	80075e4 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 800761e:	f107 0320 	add.w	r3, r7, #32
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff ffdd 	bl	80075e4 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 800762a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f7fc fa9b 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800763c:	f107 0220 	add.w	r2, r7, #32
 8007640:	f107 0110 	add.w	r1, r7, #16
 8007644:	f000 fa92 	bl	8007b6c <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	3740      	adds	r7, #64	; 0x40
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __miter_base(_Iterator __it)
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
    { return __it; }
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fc fa85 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800766a:	b580      	push	{r7, lr}
 800766c:	b0a0      	sub	sp, #128	; 0x80
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8007678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fc fa74 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007684:	f107 0320 	add.w	r3, r7, #32
 8007688:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f8dc 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007694:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc fa66 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80076a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f8ce 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80076b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fc fa58 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80076bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f8c0 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80076cc:	f107 0010 	add.w	r0, r7, #16
 80076d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80076d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80076d8:	f107 0120 	add.w	r1, r7, #32
 80076dc:	f000 fa6f 	bl	8007bbe <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f107 0210 	add.w	r2, r7, #16
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff f923 	bl	8006934 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	3780      	adds	r7, #128	; 0x80
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b0a0      	sub	sp, #128	; 0x80
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8007704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	4618      	mov	r0, r3
 800770c:	f7fc fa2e 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007710:	f107 0320 	add.w	r3, r7, #32
 8007714:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f896 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fc fa20 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800772c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007730:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f888 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800773c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7fc fa12 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007748:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800774c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f87a 	bl	800684c <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007758:	f107 0010 	add.w	r0, r7, #16
 800775c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007760:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007764:	f107 0120 	add.w	r1, r7, #32
 8007768:	f000 fa4f 	bl	8007c0a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f107 0210 	add.w	r2, r7, #16
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff f8dd 	bl	8006934 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	3780      	adds	r7, #128	; 0x80
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa63 	bl	8007c56 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 8007790:	4603      	mov	r3, r0
      }
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800779a:	b590      	push	{r4, r7, lr}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fa61 	bl	8007c6e <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80077ac:	4604      	mov	r4, r0
 80077ae:	68b8      	ldr	r0, [r7, #8]
 80077b0:	f000 fa5d 	bl	8007c6e <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80077b4:	4603      	mov	r3, r0
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	4619      	mov	r1, r3
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fa62 	bl	8007c84 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80077c0:	4603      	mov	r3, r0
    }
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}

080077ca <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80077ca:	b590      	push	{r4, r7, lr}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fa49 	bl	8007c6e <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80077dc:	4604      	mov	r4, r0
 80077de:	68b8      	ldr	r0, [r7, #8]
 80077e0:	f000 fa45 	bl	8007c6e <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80077e4:	4603      	mov	r3, r0
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4619      	mov	r1, r3
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fa6d 	bl	8007cca <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80077f0:	4603      	mov	r3, r0
    }
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd90      	pop	{r4, r7, pc}

080077fa <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa82 	bl	8007d10 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4293      	cmp	r3, r2
 8007812:	bf8c      	ite	hi
 8007814:	2301      	movhi	r3, #1
 8007816:	2300      	movls	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800781e:	f014 fac0 	bl	801bda2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4618      	mov	r0, r3
 800782e:	f014 faa7 	bl	801bd80 <_Znwj>
 8007832:	4603      	mov	r3, r0
      }
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007844:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7f9 fcec 	bl	8001250 <_ZN7RequestD1Ev>
    }
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007888:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7f9 fbae 	bl	8001018 <_ZN8ResponceD1Ev>
    }
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fa1e 	bl	8007d2c <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fa12 	bl	8007d4c <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007928:	4603      	mov	r3, r0
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f856 	bl	80079ec <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8007940:	4603      	mov	r3, r0
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f9fd 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007972:	4604      	mov	r4, r0
 8007974:	68b8      	ldr	r0, [r7, #8]
 8007976:	f000 f9f9 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 800797a:	4605      	mov	r5, r0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f9f4 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	4629      	mov	r1, r5
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f9f9 	bl	8007d82 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007990:	4602      	mov	r2, r0
 8007992:	1d3b      	adds	r3, r7, #4
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fa03 	bl	8007da2 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 800799c:	4603      	mov	r3, r0
    }
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bdb0      	pop	{r4, r5, r7, pc}

080079a6 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80079a6:	b5b0      	push	{r4, r5, r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f9da 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079b8:	4604      	mov	r4, r0
 80079ba:	68b8      	ldr	r0, [r7, #8]
 80079bc:	f000 f9d6 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079c0:	4605      	mov	r5, r0
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f9d1 	bl	8007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079ca:	4603      	mov	r3, r0
 80079cc:	461a      	mov	r2, r3
 80079ce:	4629      	mov	r1, r5
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f9f2 	bl	8007dba <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80079d6:	4602      	mov	r2, r0
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f9e0 	bl	8007da2 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 80079e2:	4603      	mov	r3, r0
    }
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bdb0      	pop	{r4, r5, r7, pc}

080079ec <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80079f4:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007a0c:	bf00      	nop
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	e00a      	b.n	8007a48 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f9cc 	bl	8007dda <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4413      	add	r3, r2
    }
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f9cb 	bl	8007df8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007a62:	4604      	mov	r4, r0
 8007a64:	68b8      	ldr	r0, [r7, #8]
 8007a66:	f000 f9c7 	bl	8007df8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f9d2 	bl	8007e1a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8007a76:	4603      	mov	r3, r0
    }
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7fd fcbb 	bl	8005408 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007a92:	4604      	mov	r4, r0
 8007a94:	68b8      	ldr	r0, [r7, #8]
 8007a96:	f7fd fcb7 	bl	8005408 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fcfe 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fd fcc8 	bl	8005440 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fd0d 	bl	80054d6 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007abc:	4603      	mov	r3, r0
    }
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bdb0      	pop	{r4, r5, r7, pc}

08007ac6 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f9c2 	bl	8007e60 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 8007adc:	4603      	mov	r3, r0
    }
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <_ZSt11__addressofI8IMUFrameEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007afc:	b5b0      	push	{r4, r5, r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	f000 f9d4 	bl	8007eb4 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4619      	mov	r1, r3
 8007b12:	2018      	movs	r0, #24
 8007b14:	f7f9 f959 	bl	8000dca <_ZnwjPv>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461c      	mov	r4, r3
 8007b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b24:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}

08007b30 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>:
      move_iterator(iterator_type __i)
 8007b46:	b590      	push	{r4, r7, lr}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007b50:	687c      	ldr	r4, [r7, #4]
 8007b52:	6838      	ldr	r0, [r7, #0]
 8007b54:	f7ff ffec 	bl	8007b30 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7fc f805 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd90      	pop	{r4, r7, pc}

08007b6c <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b092      	sub	sp, #72	; 0x48
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fd2c 	bl	80075e4 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fd26 	bl	80075e4 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fb ffe4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007baa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007bae:	f107 0114 	add.w	r1, r7, #20
 8007bb2:	f000 f98a 	bl	8007eca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>
    }
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	3748      	adds	r7, #72	; 0x48
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b090      	sub	sp, #64	; 0x40
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8007bcc:	f107 0310 	add.w	r3, r7, #16
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fb ffca 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007bd8:	f107 0320 	add.w	r3, r7, #32
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fb ffc4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fb ffbe 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bf6:	f107 0220 	add.w	r2, r7, #32
 8007bfa:	f107 0110 	add.w	r1, r7, #16
 8007bfe:	f000 f992 	bl	8007f26 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	3740      	adds	r7, #64	; 0x40
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b090      	sub	sp, #64	; 0x40
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8007c18:	f107 0310 	add.w	r3, r7, #16
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fb ffa4 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c24:	f107 0320 	add.w	r3, r7, #32
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fb ff9e 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fb ff98 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c42:	f107 0220 	add.w	r2, r7, #32
 8007c46:	f107 0110 	add.w	r1, r7, #16
 8007c4a:	f000 f9e7 	bl	800801c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	3740      	adds	r7, #64	; 0x40
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f856 	bl	8007d10 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007c84:	b5b0      	push	{r4, r5, r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fa3e 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007c96:	4604      	mov	r4, r0
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f000 fa3a 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fa35 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	4629      	mov	r1, r5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fa3a 	bl	8008128 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fa44 	bl	8008148 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007cc0:	4603      	mov	r3, r0
    }
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bdb0      	pop	{r4, r5, r7, pc}

08007cca <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007cca:	b5b0      	push	{r4, r5, r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 fa1b 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	68b8      	ldr	r0, [r7, #8]
 8007ce0:	f000 fa17 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fa12 	bl	8008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fa33 	bl	8008160 <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	1d3b      	adds	r3, r7, #4
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fa21 	bl	8008148 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007d06:	4603      	mov	r3, r0
    }
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bdb0      	pop	{r4, r5, r7, pc}

08007d10 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	05555555 	.word	0x05555555

08007d2c <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fa1f 	bl	8008180 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8007d42:	4603      	mov	r3, r0
    }
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fa2c 	bl	80081ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8007d62:	4603      	mov	r3, r0
    }
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fa33 	bl	80081fe <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 fa27 	bl	800821e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fa27 	bl	800823e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fa35 	bl	8008272 <_ZNKSt13move_iteratorIPhE4baseEv>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc fc28 	bl	8004660 <_ZSt12__miter_baseIPhET_S1_>
 8007e10:	4603      	mov	r3, r0
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007e1a:	b5b0      	push	{r4, r5, r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7fd fb3a 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	68b8      	ldr	r0, [r7, #8]
 8007e30:	f7fd fb36 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8007e34:	4605      	mov	r5, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fd fb31 	bl	80054a0 <_ZSt12__niter_baseIPhET_S1_>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	4629      	mov	r1, r5
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fa20 	bl	800828a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fd fb40 	bl	80054d6 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007e56:	4603      	mov	r3, r0
    }
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bdb0      	pop	{r4, r5, r7, pc}

08007e60 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	10db      	asrs	r3, r3, #3
 8007e74:	4a0e      	ldr	r2, [pc, #56]	; (8007eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f014 f817 	bl	801bec4 <memmove>
	  return __result + _Num;
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	4413      	add	r3, r2
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4413      	add	r3, r2
	}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	aaaaaaab 	.word	0xaaaaaaab

08007eb4 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007eca:	b590      	push	{r4, r7, lr}
 8007ecc:	b08d      	sub	sp, #52	; 0x34
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7fb fe46 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f000 f9e1 	bl	80082aa <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d016      	beq.n	8007f1c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x52>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7fc fdfe 	bl	8004af0 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fdf5 	bl	8007ae6 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 8007efc:	4604      	mov	r4, r0
 8007efe:	68b8      	ldr	r0, [r7, #8]
 8007f00:	f000 f9f1 	bl	80082e6 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>
 8007f04:	4603      	mov	r3, r0
 8007f06:	4619      	mov	r1, r3
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f9f9 	bl	8008300 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007f0e:	68b8      	ldr	r0, [r7, #8]
 8007f10:	f000 f9dc 	bl	80082cc <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7fd ff4a 	bl	8005dae <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 8007f1a:	e7e1      	b.n	8007ee0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x16>
	      return __cur;
 8007f1c:	bf00      	nop
	}
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	3734      	adds	r7, #52	; 0x34
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd90      	pop	{r4, r7, pc}

08007f26 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8007f26:	b5b0      	push	{r4, r5, r7, lr}
 8007f28:	b09e      	sub	sp, #120	; 0x78
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d058      	beq.n	8007ff2 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	681c      	ldr	r4, [r3, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	689d      	ldr	r5, [r3, #8]
 8007f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fb fe0c 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007f54:	f107 0014 	add.w	r0, r7, #20
 8007f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4621      	mov	r1, r4
 8007f60:	f000 f9e8 	bl	8008334 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	461c      	mov	r4, r3
 8007f68:	f107 0314 	add.w	r3, r7, #20
 8007f6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	3304      	adds	r3, #4
 8007f78:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d024      	beq.n	8007fce <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result
 8007f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f86:	681d      	ldr	r5, [r3, #0]
 8007f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8a:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8007f8c:	f7fc fd95 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8007f90:	4602      	mov	r2, r0
 8007f92:	4613      	mov	r3, r2
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	00db      	lsls	r3, r3, #3
	    __result
 8007f9a:	441c      	add	r4, r3
 8007f9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fb fde2 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007fa8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007fac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f000 f9be 	bl	8008334 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	461c      	mov	r4, r3
 8007fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8007fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc8:	3304      	adds	r3, #4
 8007fca:	677b      	str	r3, [r7, #116]	; 0x74
 8007fcc:	e7d5      	b.n	8007f7a <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
					      __result);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685c      	ldr	r4, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681d      	ldr	r5, [r3, #0]
 8007fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fb fdc5 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4621      	mov	r1, r4
 8007fec:	f000 f9a2 	bl	8008334 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 8007ff0:	e010      	b.n	8008014 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
					  __result);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	681c      	ldr	r4, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681d      	ldr	r5, [r3, #0]
 8007ffa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f7fb fdb3 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800800c:	462a      	mov	r2, r5
 800800e:	4621      	mov	r1, r4
 8008010:	f000 f990 	bl	8008334 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	3778      	adds	r7, #120	; 0x78
 8008018:	46bd      	mov	sp, r7
 800801a:	bdb0      	pop	{r4, r5, r7, pc}

0800801c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_backward_dit(
 800801c:	b5b0      	push	{r4, r5, r7, lr}
 800801e:	b09e      	sub	sp, #120	; 0x78
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	429a      	cmp	r2, r3
 8008034:	d058      	beq.n	80080e8 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685c      	ldr	r4, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681d      	ldr	r5, [r3, #0]
 800803e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fb fd91 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800804a:	f107 0014 	add.w	r0, r7, #20
 800804e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008052:	462a      	mov	r2, r5
 8008054:	4621      	mov	r1, r4
 8008056:	f000 f9bf 	bl	80083d8 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	461c      	mov	r4, r3
 800805e:	f107 0314 	add.w	r3, r7, #20
 8008062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008076:	429a      	cmp	r2, r3
 8008078:	d024      	beq.n	80080c4 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 800807a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008080:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8008082:	f7fc fd1a 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8008086:	4602      	mov	r2, r0
 8008088:	4613      	mov	r3, r2
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	4413      	add	r3, r2
 800808e:	00db      	lsls	r3, r3, #3
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8008090:	441c      	add	r4, r3
 8008092:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f7fb fd67 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800809e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80080a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f000 f995 	bl	80083d8 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	461c      	mov	r4, r3
 80080b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80080bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080be:	3b04      	subs	r3, #4
 80080c0:	677b      	str	r3, [r7, #116]	; 0x74
 80080c2:	e7d5      	b.n	8008070 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
			__first._M_cur, __first._M_last, __result);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	681c      	ldr	r4, [r3, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	689d      	ldr	r5, [r3, #8]
 80080cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fb fd4a 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80080de:	462a      	mov	r2, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	f000 f979 	bl	80083d8 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 80080e6:	e010      	b.n	800810a <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
		__first._M_cur, __last._M_cur, __result);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	681c      	ldr	r4, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681d      	ldr	r5, [r3, #0]
 80080f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fb fd38 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008102:	462a      	mov	r2, r5
 8008104:	4621      	mov	r1, r4
 8008106:	f000 f967 	bl	80083d8 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	3778      	adds	r7, #120	; 0x78
 800810e:	46bd      	mov	sp, r7
 8008110:	bdb0      	pop	{r4, r5, r7, pc}

08008112 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
    { return __it; }
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f9b3 	bl	80084a4 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 800813e:	4603      	mov	r3, r0
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
    { return __res; }
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f9a7 	bl	80084c4 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8008176:	4603      	mov	r3, r0
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	109b      	asrs	r3, r3, #2
 8008194:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	461a      	mov	r2, r3
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f013 fe8d 	bl	801bec4 <memmove>
	  return __result + _Num;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
	}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	109b      	asrs	r3, r3, #2
 80081ce:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	425b      	negs	r3, r3
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	18d0      	adds	r0, r2, r3
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	461a      	mov	r2, r3
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	f013 fe6c 	bl	801bec4 <memmove>
	  return __result - _Num;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	425b      	negs	r3, r3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4413      	add	r3, r2
	}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f968 	bl	80084e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 8008214:	4603      	mov	r3, r0
    }
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f975 	bl	800851e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 8008234:	4603      	mov	r3, r0
    }
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4619      	mov	r1, r3
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f013 fe47 	bl	801bef8 <memset>
    }
 800826a:	bf00      	nop
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f961 	bl	8008562 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 80082a0:	4603      	mov	r3, r0
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f963 	bl	8008582 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 80082bc:	4603      	mov	r3, r0
 80082be:	f083 0301 	eor.w	r3, r3, #1
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>:
      operator++()
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fd69 	bl	8005dae <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
	return *this;
 80082dc:	687b      	ldr	r3, [r7, #4]
      }
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>:
      operator*() const
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fc fbfd 	bl	8004af0 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80082f6:	4603      	mov	r3, r0
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8008300:	b5b0      	push	{r4, r5, r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800830a:	6838      	ldr	r0, [r7, #0]
 800830c:	f7fc fb42 	bl	8004994 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8008310:	4605      	mov	r5, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4619      	mov	r1, r3
 8008316:	2018      	movs	r0, #24
 8008318:	f7f8 fd57 	bl	8000dca <_ZnwjPv>
 800831c:	4603      	mov	r3, r0
 800831e:	461c      	mov	r4, r3
 8008320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008328:	e884 0003 	stmia.w	r4, {r0, r1}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bdb0      	pop	{r4, r5, r7, pc}

08008334 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_a1(_II __first, _II __last,
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	10db      	asrs	r3, r3, #3
 800834a:	4a22      	ldr	r2, [pc, #136]	; (80083d4 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 800834c:	fb02 f303 	mul.w	r3, r2, r3
 8008350:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd34      	ble.n	80083c2 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	10db      	asrs	r3, r3, #3
 8008364:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 8008366:	fb02 f303 	mul.w	r3, r2, r3
 800836a:	61bb      	str	r3, [r7, #24]
 800836c:	f107 0218 	add.w	r2, r7, #24
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fa75 	bl	8006866 <_ZSt3minIiERKT_S2_S2_>
 800837c:	4603      	mov	r3, r0
	  const difference_type __clen
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	4613      	mov	r3, r2
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	4413      	add	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	461a      	mov	r2, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	1899      	adds	r1, r3, r2
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	68b8      	ldr	r0, [r7, #8]
 800839a:	f000 f910 	bl	80085be <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
	  __first += __clen;
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	461a      	mov	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80083b0:	69f9      	ldr	r1, [r7, #28]
 80083b2:	6838      	ldr	r0, [r7, #0]
 80083b4:	f7fd fd2a 	bl	8005e0c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80083c0:	e7c7      	b.n	8008352 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7fb fbd1 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	aaaaaaab 	.word	0xaaaaaaab

080083d8 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	10db      	asrs	r3, r3, #3
 80083ee:	4a2c      	ldr	r2, [pc, #176]	; (80084a0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dd49      	ble.n	8008490 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	10db      	asrs	r3, r3, #3
 8008408:	4a25      	ldr	r2, [pc, #148]	; (80084a0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10f      	bne.n	800843c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 800841c:	f7fc fb4d 	bl	8004aba <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8008420:	4603      	mov	r3, r0
 8008422:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	3b04      	subs	r3, #4
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4619      	mov	r1, r3
 8008430:	460b      	mov	r3, r1
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	440b      	add	r3, r1
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 800843c:	f107 0210 	add.w	r2, r7, #16
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fa0d 	bl	8006866 <_ZSt3minIiERKT_S2_S2_>
 800844c:	4603      	mov	r3, r0
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	425b      	negs	r3, r3
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	4413      	add	r3, r2
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f8b9 	bl	80085de <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>

	  __last -= __clen;
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4613      	mov	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	425b      	negs	r3, r3
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	6838      	ldr	r0, [r7, #0]
 8008482:	f7ff f844 	bl	800750e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	  __len -= __clen;
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800848e:	e7b2      	b.n	80083f6 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
	}

      return __result;
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7fb fb6a 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	3720      	adds	r7, #32
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	aaaaaaab 	.word	0xaaaaaaab

080084a4 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f8a2 	bl	80085fe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 80084ba:	4603      	mov	r3, r0
    }
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f8af 	bl	8008638 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 80084da:	4603      	mov	r3, r0
    }
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	109b      	asrs	r3, r3, #2
 80084f8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	461a      	mov	r2, r3
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f013 fcdb 	bl	801bec4 <memmove>
	  return __result + _Num;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4413      	add	r3, r2
	}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800851e:	b580      	push	{r7, lr}
 8008520:	b086      	sub	sp, #24
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	109b      	asrs	r3, r3, #2
 8008532:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	425b      	negs	r3, r3
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	18d0      	adds	r0, r2, r3
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	461a      	mov	r2, r3
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	f013 fcba 	bl	801bec4 <memmove>
	  return __result - _Num;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	425b      	negs	r3, r3
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	4413      	add	r3, r2
	}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f882 	bl	800867c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8008578:	4603      	mov	r3, r0
    }
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8008582:	b580      	push	{r7, lr}
 8008584:	b08a      	sub	sp, #40	; 0x28
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f88c 	bl	80086b0 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 8008598:	f107 0318 	add.w	r3, r7, #24
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f886 	bl	80086b0 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 80085a4:	f107 0218 	add.w	r2, r7, #24
 80085a8:	f107 0308 	add.w	r3, r7, #8
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fb f9b0 	bl	8003914 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 80085b4:	4603      	mov	r3, r0
 80085b6:	4618      	mov	r0, r3
 80085b8:	3728      	adds	r7, #40	; 0x28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f87c 	bl	80086cc <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 80085d4:	4603      	mov	r3, r0
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f87c 	bl	80086ec <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 80085f4:	4603      	mov	r3, r0
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	109b      	asrs	r3, r3, #2
 8008612:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	461a      	mov	r2, r3
 8008620:	68f9      	ldr	r1, [r7, #12]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f013 fc4e 	bl	801bec4 <memmove>
	  return __result + _Num;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4413      	add	r3, r2
	}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	109b      	asrs	r3, r3, #2
 800864c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	425b      	negs	r3, r3
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	18d0      	adds	r0, r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	461a      	mov	r2, r3
 8008664:	68f9      	ldr	r1, [r7, #12]
 8008666:	f013 fc2d 	bl	801bec4 <memmove>
	  return __result - _Num;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	425b      	negs	r3, r3
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4413      	add	r3, r2
	}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	461a      	mov	r2, r3
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f013 fc11 	bl	801bec4 <memmove>
	  return __result + _Num;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
	}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>:
      base() const
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fb fa54 	bl	8003b6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f815 	bl	800870c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 80086e2:	4603      	mov	r3, r0
    }
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f82f 	bl	8008760 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>
 8008702:	4603      	mov	r3, r0
    }
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	10db      	asrs	r3, r3, #3
 8008720:	4a0e      	ldr	r2, [pc, #56]	; (800875c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	461a      	mov	r2, r3
 800873a:	68f9      	ldr	r1, [r7, #12]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f013 fbc1 	bl	801bec4 <memmove>
	  return __result + _Num;
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4613      	mov	r3, r2
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	4413      	add	r3, r2
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	461a      	mov	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
	}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	aaaaaaab 	.word	0xaaaaaaab

08008760 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	10db      	asrs	r3, r3, #3
 8008774:	4a11      	ldr	r2, [pc, #68]	; (80087bc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x5c>)
 8008776:	fb02 f303 	mul.w	r3, r2, r3
 800877a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4613      	mov	r3, r2
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	4413      	add	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	425b      	negs	r3, r3
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	18d0      	adds	r0, r2, r3
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4613      	mov	r3, r2
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	4413      	add	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	461a      	mov	r2, r3
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	f013 fb90 	bl	801bec4 <memmove>
	  return __result - _Num;
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4613      	mov	r3, r2
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	4413      	add	r3, r2
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	425b      	negs	r3, r3
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	aaaaaaab 	.word	0xaaaaaaab

080087c0 <_Z41__static_initialization_and_destruction_0ii>:
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d107      	bne.n	80087e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d102      	bne.n	80087e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 80087da:	4809      	ldr	r0, [pc, #36]	; (8008800 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80087dc:	f7f9 faef 	bl	8001dbe <_ZN18MotherboardContextC1Ev>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d107      	bne.n	80087f6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d102      	bne.n	80087f6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80087f0:	4803      	ldr	r0, [pc, #12]	; (8008800 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80087f2:	f7f9 fb01 	bl	8001df8 <_ZN18MotherboardContextD1Ev>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	24000250 	.word	0x24000250

08008804 <_GLOBAL__sub_I_MotherboardInit>:
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
 8008808:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800880c:	2001      	movs	r0, #1
 800880e:	f7ff ffd7 	bl	80087c0 <_Z41__static_initialization_and_destruction_0ii>
 8008812:	bd80      	pop	{r7, pc}

08008814 <_GLOBAL__sub_D_MotherboardInit>:
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
 8008818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800881c:	2000      	movs	r0, #0
 800881e:	f7ff ffcf 	bl	80087c0 <_Z41__static_initialization_and_destruction_0ii>
 8008822:	bd80      	pop	{r7, pc}

08008824 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	4613      	mov	r3, r2
 8008834:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8008840:	89ba      	ldrh	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7bf8      	ldrb	r0, [r7, #15]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	f001 f925 	bl	8009a96 <bhy2_hif_get_regs>
 800884c:	4603      	mov	r3, r0
 800884e:	75fb      	strb	r3, [r7, #23]
 8008850:	e001      	b.n	8008856 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008852:	23ff      	movs	r3, #255	; 0xff
 8008854:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8008862:	b590      	push	{r4, r7, lr}
 8008864:	b08f      	sub	sp, #60	; 0x3c
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <bhy2_get_and_process_fifo+0x1c>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 800887e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008882:	e11b      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 800888a:	f06f 0305 	mvn.w	r3, #5
 800888e:	e115      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	2100      	movs	r1, #0
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f013 fb2f 	bl	801bef8 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	2214      	movs	r2, #20
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f013 fb28 	bl	801bef8 <memset>

    fifos.buffer = work_buffer;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fa5f 	bl	8009d7c <bhy2_hif_get_interrupt_status>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 80088c4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 80088cc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80088d0:	e0f4      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80088d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80088de:	e042      	b.n	8008966 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80088e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088e4:	f003 0306 	and.w	r3, r3, #6
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d00e      	beq.n	800890a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80088ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f0:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d008      	beq.n	800890a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80088f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088fc:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008900:	2b06      	cmp	r3, #6
 8008902:	d002      	beq.n	800890a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d020      	beq.n	800894c <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 800890e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008918:	1ad1      	subs	r1, r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f107 0214 	add.w	r2, r7, #20
 8008920:	f102 0408 	add.w	r4, r2, #8
 8008924:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4623      	mov	r3, r4
 800892c:	f001 fad7 	bl	8009ede <bhy2_hif_get_wakeup_fifo>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8008936:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 800893e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008942:	e0bb      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	4413      	add	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4619      	mov	r1, r3
 8008954:	2000      	movs	r0, #0
 8008956:	f000 fbad 	bl	80090b4 <parse_fifo>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800896a:	2b00      	cmp	r3, #0
 800896c:	d102      	bne.n	8008974 <bhy2_get_and_process_fifo+0x112>
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <bhy2_get_and_process_fifo+0x11a>
 8008974:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0b1      	beq.n	80088e0 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008980:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008988:	e042      	b.n	8008a10 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 800898a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800898e:	f003 0318 	and.w	r3, r3, #24
 8008992:	2b08      	cmp	r3, #8
 8008994:	d00e      	beq.n	80089b4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800899a:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 800899e:	2b10      	cmp	r3, #16
 80089a0:	d008      	beq.n	80089b4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80089a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a6:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80089aa:	2b18      	cmp	r3, #24
 80089ac:	d002      	beq.n	80089b4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d020      	beq.n	80089f6 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80089b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80089c2:	1ad1      	subs	r1, r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f107 0214 	add.w	r2, r7, #20
 80089ca:	f102 0408 	add.w	r4, r2, #8
 80089ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4623      	mov	r3, r4
 80089d6:	f001 fa98 	bl	8009f0a <bhy2_hif_get_nonwakeup_fifo>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 80089e0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 80089e8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80089ec:	e066      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	4413      	add	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80089f6:	f107 0314 	add.w	r3, r7, #20
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4619      	mov	r1, r3
 80089fe:	2001      	movs	r0, #1
 8008a00:	f000 fb58 	bl	80090b4 <parse_fifo>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <bhy2_get_and_process_fifo+0x1bc>
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <bhy2_get_and_process_fifo+0x1c4>
 8008a1e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0b1      	beq.n	800898a <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008a2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008a32:	e036      	b.n	8008aa2 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8008a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <bhy2_get_and_process_fifo+0x1e4>
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d020      	beq.n	8008a88 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008a50:	6a3a      	ldr	r2, [r7, #32]
 8008a52:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008a54:	1ad1      	subs	r1, r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f107 0214 	add.w	r2, r7, #20
 8008a5c:	f102 0408 	add.w	r4, r2, #8
 8008a60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4623      	mov	r3, r4
 8008a68:	f001 fab0 	bl	8009fcc <bhy2_hif_get_status_fifo_async>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008a72:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8008a7a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a7e:	e01d      	b.n	8008abc <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	4413      	add	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8008a88:	f107 0314 	add.w	r3, r7, #20
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	2002      	movs	r0, #2
 8008a92:	f000 fb0f 	bl	80090b4 <parse_fifo>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d102      	bne.n	8008ab0 <bhy2_get_and_process_fifo+0x24e>
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <bhy2_get_and_process_fifo+0x256>
 8008ab0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0bd      	beq.n	8008a34 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8008ab8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3734      	adds	r7, #52	; 0x34
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd90      	pop	{r4, r7, pc}

08008ac4 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	ed87 0a02 	vstr	s0, [r7, #8]
 8008ad0:	6079      	str	r1, [r7, #4]
 8008ad2:	603a      	str	r2, [r7, #0]
 8008ad4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	ed97 0a02 	vldr	s0, [r7, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 fa84 	bl	8009ff8 <bhy2_hif_exec_sensor_conf_cmd>
 8008af0:	4603      	mov	r3, r0
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	e001      	b.n	8008afa <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008af6:	23ff      	movs	r3, #255	; 0xff
 8008af8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 f8e8 	bl	8009cf4 <bhy2_hif_get_product_id>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]
 8008b28:	e001      	b.n	8008b2e <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b2a:	23ff      	movs	r3, #255	; 0xff
 8008b2c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f8de 	bl	8009d14 <bhy2_hif_get_kernel_version>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
 8008b5c:	e001      	b.n	8008b62 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b5e:	23ff      	movs	r3, #255	; 0xff
 8008b60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 f8e8 	bl	8009d5c <bhy2_hif_get_boot_status>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e001      	b.n	8008b96 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b92:	23ff      	movs	r3, #255	; 0xff
 8008b94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af02      	add	r7, sp, #8
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f107 0208 	add.w	r2, r7, #8
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	f240 101f 	movw	r0, #287	; 0x11f
 8008bcc:	f001 f80a 	bl	8009be4 <bhy2_hif_get_parameter>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
 8008bd4:	e001      	b.n	8008bda <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008bd6:	23ff      	movs	r3, #255	; 0xff
 8008bd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <bhy2_upload_firmware_to_ram+0x1c>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d102      	bne.n	8008c08 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8008c02:	23ff      	movs	r3, #255	; 0xff
 8008c04:	75fb      	strb	r3, [r7, #23]
 8008c06:	e007      	b.n	8008c18 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 f90d 	bl	8009e2e <bhy2_hif_upload_firmware_to_ram>
 8008c14:	4603      	mov	r3, r0
 8008c16:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008c36:	23ff      	movs	r3, #255	; 0xff
 8008c38:	73fb      	strb	r3, [r7, #15]
 8008c3a:	e005      	b.n	8008c48 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 f932 	bl	8009ea8 <bhy2_hif_boot_program_ram>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008c6a:	23ff      	movs	r3, #255	; 0xff
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e007      	b.n	8008c80 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	1df9      	adds	r1, r7, #7
 8008c74:	2201      	movs	r2, #1
 8008c76:	2007      	movs	r0, #7
 8008c78:	f000 ff45 	bl	8009b06 <bhy2_hif_set_regs>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008ca0:	23ff      	movs	r3, #255	; 0xff
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e007      	b.n	8008cb6 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	2007      	movs	r0, #7
 8008cae:	f000 fef2 	bl	8009a96 <bhy2_hif_get_regs>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d102      	bne.n	8008cdc <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008cd6:	23ff      	movs	r3, #255	; 0xff
 8008cd8:	73fb      	strb	r3, [r7, #15]
 8008cda:	e006      	b.n	8008cea <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 f84b 	bl	8009d7c <bhy2_hif_get_interrupt_status>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	6039      	str	r1, [r7, #0]
 8008d00:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008d0c:	23ff      	movs	r3, #255	; 0xff
 8008d0e:	73fb      	strb	r3, [r7, #15]
 8008d10:	e007      	b.n	8008d22 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	1df9      	adds	r1, r7, #7
 8008d16:	2201      	movs	r2, #1
 8008d18:	2006      	movs	r0, #6
 8008d1a:	f000 fef4 	bl	8009b06 <bhy2_hif_set_regs>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008d40:	23ff      	movs	r3, #255	; 0xff
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e005      	b.n	8008d52 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f827 	bl	8009d9c <bhy2_hif_reset>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b08a      	sub	sp, #40	; 0x28
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d014      	beq.n	8008da2 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8008d78:	f640 1238 	movw	r2, #2360	; 0x938
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d80:	f013 f8ba 	bl	801bef8 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	7bf8      	ldrb	r0, [r7, #15]
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	f000 fe3e 	bl	8009a18 <bhy2_hif_init>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	e001      	b.n	8008da6 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008da2:	23ff      	movs	r3, #255	; 0xff
 8008da4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b087      	sub	sp, #28
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <bhy2_register_fifo_parse_callback+0x20>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8008dd2:	23ff      	movs	r3, #255	; 0xff
 8008dd4:	75fb      	strb	r3, [r7, #23]
 8008dd6:	e013      	b.n	8008e00 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8008dd8:	7bfa      	ldrb	r2, [r7, #15]
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	4413      	add	r3, r2
 8008de2:	440b      	add	r3, r1
 8008de4:	3318      	adds	r3, #24
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8008dec:	7bfa      	ldrb	r2, [r7, #15]
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	440b      	add	r3, r1
 8008df8:	3318      	adds	r3, #24
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8008e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b092      	sub	sp, #72	; 0x48
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d103      	bne.n	8008e26 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e1e:	23ff      	movs	r3, #255	; 0xff
 8008e20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e24:	e079      	b.n	8008f1a <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff feb8 	bl	8008ba2 <bhy2_get_virt_sensor_list>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8008e38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d16c      	bne.n	8008f1a <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008e4c:	e041      	b.n	8008ed2 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8008e4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8008e58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	2201      	movs	r2, #1
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8008e6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008e6e:	3348      	adds	r3, #72	; 0x48
 8008e70:	443b      	add	r3, r7
 8008e72:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8008e76:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d022      	beq.n	8008ec8 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f8e6 	bl	800a05e <bhy2_hif_get_sensor_info>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8008e98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d113      	bne.n	8008ec8 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8008ea0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8008ea8:	23f8      	movs	r3, #248	; 0xf8
 8008eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8008eae:	e018      	b.n	8008ee2 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8008eb0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008eb4:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	331c      	adds	r3, #28
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8008ec8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008ed2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ed6:	2bf4      	cmp	r3, #244	; 0xf4
 8008ed8:	d803      	bhi.n	8008ee2 <bhy2_update_virtual_sensor_list+0xd2>
 8008eda:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0b5      	beq.n	8008e4e <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8008ee2:	23ff      	movs	r3, #255	; 0xff
 8008ee4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008ee8:	e013      	b.n	8008f12 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8008eea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008eee:	3bf5      	subs	r3, #245	; 0xf5
 8008ef0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008ef4:	490c      	ldr	r1, [pc, #48]	; (8008f28 <bhy2_update_virtual_sensor_list+0x118>)
 8008ef6:	5cc8      	ldrb	r0, [r1, r3]
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	4613      	mov	r3, r2
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	4413      	add	r3, r2
 8008f00:	440b      	add	r3, r1
 8008f02:	331c      	adds	r3, #28
 8008f04:	4602      	mov	r2, r0
 8008f06:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8008f08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008f12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f16:	2bf4      	cmp	r3, #244	; 0xf4
 8008f18:	d8e7      	bhi.n	8008eea <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8008f1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3748      	adds	r7, #72	; 0x48
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	08037aac 	.word	0x08037aac

08008f2c <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <bhy2_get_error_value+0x1a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8008f46:	23ff      	movs	r3, #255	; 0xff
 8008f48:	73fb      	strb	r3, [r7, #15]
 8008f4a:	e007      	b.n	8008f5c <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	202e      	movs	r0, #46	; 0x2e
 8008f54:	f7ff fc66 	bl	8008824 <bhy2_get_regs>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d04e      	beq.n	800901e <get_callback_info+0xb6>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d04b      	beq.n	800901e <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8008f86:	7bfa      	ldrb	r2, [r7, #15]
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	4413      	add	r3, r2
 8008f92:	440b      	add	r3, r1
 8008f94:	3318      	adds	r3, #24
 8008f96:	4602      	mov	r2, r0
 8008f98:	3304      	adds	r3, #4
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	6859      	ldr	r1, [r3, #4]
 8008f9e:	6010      	str	r0, [r2, #0]
 8008fa0:	6051      	str	r1, [r2, #4]
 8008fa2:	7a1b      	ldrb	r3, [r3, #8]
 8008fa4:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2bf4      	cmp	r3, #244	; 0xf4
 8008faa:	d91b      	bls.n	8008fe4 <get_callback_info+0x7c>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d117      	bne.n	8008fe4 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	705a      	strb	r2, [r3, #1]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	709a      	strb	r2, [r3, #2]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	715a      	strb	r2, [r3, #5]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	719a      	strb	r2, [r3, #6]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	71da      	strb	r2, [r3, #7]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	3bf5      	subs	r3, #245	; 0xf5
 8008fdc:	4a16      	ldr	r2, [pc, #88]	; (8009038 <get_callback_info+0xd0>)
 8008fde:	5cd2      	ldrb	r2, [r2, r3]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d11c      	bne.n	8009024 <get_callback_info+0xbc>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d118      	bne.n	8009024 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	705a      	strb	r2, [r3, #1]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	709a      	strb	r2, [r3, #2]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	70da      	strb	r2, [r3, #3]
 8009000:	2200      	movs	r2, #0
 8009002:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	715a      	strb	r2, [r3, #5]
 800900a:	2200      	movs	r2, #0
 800900c:	719a      	strb	r2, [r3, #6]
 800900e:	2200      	movs	r2, #0
 8009010:	71da      	strb	r2, [r3, #7]
 8009012:	2200      	movs	r2, #0
 8009014:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2201      	movs	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 800901c:	e002      	b.n	8009024 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800901e:	23ff      	movs	r3, #255	; 0xff
 8009020:	75fb      	strb	r3, [r7, #23]
 8009022:	e000      	b.n	8009026 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8009024:	bf00      	nop
    }

    return rslt;
 8009026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	08037aac 	.word	0x08037aac

0800903c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	441a      	add	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d803      	bhi.n	8009062 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	e002      	b.n	8009068 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8009076:	b480      	push	{r7}
 8009078:	b087      	sub	sp, #28
 800907a:	af00      	add	r7, sp, #0
 800907c:	4603      	mov	r3, r0
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
 8009082:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d808      	bhi.n	80090a0 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	441a      	add	r2, r3
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e001      	b.n	80090a4 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80090a0:	23f9      	movs	r3, #249	; 0xf9
 80090a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80090a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80090b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b8:	b099      	sub	sp, #100	; 0x64
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	4603      	mov	r3, r0
 80090be:	62b9      	str	r1, [r7, #40]	; 0x28
 80090c0:	627a      	str	r2, [r7, #36]	; 0x24
 80090c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80090de:	e16a      	b.n	80093b6 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	691a      	ldr	r2, [r3, #16]
 80090ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ec:	4413      	add	r3, r2
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80090f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80090f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff ffb9 	bl	8009076 <get_time_stamp>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800910a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <parse_fifo+0x64>
        {
            return rslt;
 8009112:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009116:	e191      	b.n	800943c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8009118:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800911c:	2b00      	cmp	r3, #0
 800911e:	d025      	beq.n	800916c <parse_fifo+0xb8>
 8009120:	2b00      	cmp	r3, #0
 8009122:	f2c0 80f6 	blt.w	8009312 <parse_fifo+0x25e>
 8009126:	2bff      	cmp	r3, #255	; 0xff
 8009128:	f300 80f3 	bgt.w	8009312 <parse_fifo+0x25e>
 800912c:	2bf5      	cmp	r3, #245	; 0xf5
 800912e:	f2c0 80f0 	blt.w	8009312 <parse_fifo+0x25e>
 8009132:	3bf5      	subs	r3, #245	; 0xf5
 8009134:	2b0a      	cmp	r3, #10
 8009136:	f200 80ec 	bhi.w	8009312 <parse_fifo+0x25e>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <parse_fifo+0x8c>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009179 	.word	0x08009179
 8009144:	080091e1 	.word	0x080091e1
 8009148:	0800925f 	.word	0x0800925f
 800914c:	08009313 	.word	0x08009313
 8009150:	08009313 	.word	0x08009313
 8009154:	08009313 	.word	0x08009313
 8009158:	08009179 	.word	0x08009179
 800915c:	080091e1 	.word	0x080091e1
 8009160:	0800925f 	.word	0x0800925f
 8009164:	08009313 	.word	0x08009313
 8009168:	0800916d 	.word	0x0800916d
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	601a      	str	r2, [r3, #0]
                break;
 8009176:	e11e      	b.n	80093b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8009178:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800917c:	461a      	mov	r2, r3
 800917e:	2102      	movs	r1, #2
 8009180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009182:	f7ff ff5b 	bl	800903c <get_buffer_status>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800918c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <parse_fifo+0xe6>
                {
                    return rslt;
 8009194:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009198:	e150      	b.n	800943c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800919a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d000      	beq.n	80091a4 <parse_fifo+0xf0>
                {
                    break;
 80091a2:	e108      	b.n	80093b6 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80091a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	691a      	ldr	r2, [r3, #16]
 80091ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b0:	3301      	adds	r3, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2200      	movs	r2, #0
 80091ba:	469a      	mov	sl, r3
 80091bc:	4693      	mov	fp, r2
 80091be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c0:	eb10 020a 	adds.w	r2, r0, sl
 80091c4:	61ba      	str	r2, [r7, #24]
 80091c6:	eb41 020b 	adc.w	r2, r1, fp
 80091ca:	61fa      	str	r2, [r7, #28]
 80091cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091d0:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	1c9a      	adds	r2, r3, #2
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	601a      	str	r2, [r3, #0]
                break;
 80091de:	e0ea      	b.n	80093b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80091e0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80091e4:	461a      	mov	r2, r3
 80091e6:	2103      	movs	r1, #3
 80091e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ea:	f7ff ff27 	bl	800903c <get_buffer_status>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80091f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <parse_fifo+0x14e>
                {
                    return rslt;
 80091fc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009200:	e11c      	b.n	800943c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009206:	2b00      	cmp	r3, #0
 8009208:	d000      	beq.n	800920c <parse_fifo+0x158>
                {
                    break;
 800920a:	e0d4      	b.n	80093b6 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 800920c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	691a      	ldr	r2, [r3, #16]
 8009216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009218:	3301      	adds	r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b21c      	sxth	r4, r3
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009226:	3302      	adds	r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	b21b      	sxth	r3, r3
 8009230:	4323      	orrs	r3, r4
 8009232:	b21b      	sxth	r3, r3
 8009234:	b29b      	uxth	r3, r3
 8009236:	b29b      	uxth	r3, r3
 8009238:	2200      	movs	r2, #0
 800923a:	461d      	mov	r5, r3
 800923c:	4616      	mov	r6, r2
 800923e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009240:	1942      	adds	r2, r0, r5
 8009242:	613a      	str	r2, [r7, #16]
 8009244:	eb41 0206 	adc.w	r2, r1, r6
 8009248:	617a      	str	r2, [r7, #20]
 800924a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800924e:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1cda      	adds	r2, r3, #3
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	601a      	str	r2, [r3, #0]
                break;
 800925c:	e0ab      	b.n	80093b6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 800925e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009262:	461a      	mov	r2, r3
 8009264:	2106      	movs	r1, #6
 8009266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009268:	f7ff fee8 	bl	800903c <get_buffer_status>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009272:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <parse_fifo+0x1cc>
                {
                    return rslt;
 800927a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800927e:	e0dd      	b.n	800943c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009284:	2b00      	cmp	r3, #0
 8009286:	d000      	beq.n	800928a <parse_fifo+0x1d6>
                {
                    break;
 8009288:	e095      	b.n	80093b6 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009290:	3301      	adds	r3, #1
 8009292:	4413      	add	r3, r2
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800929e:	3302      	adds	r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	4319      	orrs	r1, r3
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ae:	3303      	adds	r3, #3
 80092b0:	4413      	add	r3, r2
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	4319      	orrs	r1, r3
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092be:	3304      	adds	r3, #4
 80092c0:	4413      	add	r3, r2
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	061b      	lsls	r3, r3, #24
 80092c6:	430b      	orrs	r3, r1
 80092c8:	2200      	movs	r2, #0
 80092ca:	4698      	mov	r8, r3
 80092cc:	4691      	mov	r9, r2
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092d4:	3305      	adds	r3, #5
 80092d6:	4413      	add	r3, r2
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2200      	movs	r2, #0
 80092de:	60bb      	str	r3, [r7, #8]
 80092e0:	60fa      	str	r2, [r7, #12]
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	000b      	movs	r3, r1
 80092ee:	2200      	movs	r2, #0
 80092f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f2:	ea48 0002 	orr.w	r0, r8, r2
 80092f6:	6038      	str	r0, [r7, #0]
 80092f8:	ea49 0303 	orr.w	r3, r9, r3
 80092fc:	607b      	str	r3, [r7, #4]
 80092fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009302:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	1d9a      	adds	r2, r3, #6
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	601a      	str	r2, [r3, #0]
                break;
 8009310:	e051      	b.n	80093b6 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8009312:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009316:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fe23 	bl	8008f68 <get_callback_info>
 8009322:	4603      	mov	r3, r0
 8009324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 8009328:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <parse_fifo+0x282>
                {
                    return rslt;
 8009330:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009334:	e082      	b.n	800943c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8009336:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800933a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800933e:	461a      	mov	r2, r3
 8009340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009342:	f7ff fe7b 	bl	800903c <get_buffer_status>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800934c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <parse_fifo+0x2a6>
                {
                    return rslt;
 8009354:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009358:	e070      	b.n	800943c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800935a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800935e:	2b00      	cmp	r3, #0
 8009360:	d000      	beq.n	8009364 <parse_fifo+0x2b0>
                {
                    break;
 8009362:	e028      	b.n	80093b6 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8009364:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01c      	beq.n	80093a6 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009372:	3301      	adds	r3, #1
 8009374:	4413      	add	r3, r2
 8009376:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8009378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800937c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8009380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009382:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8009384:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009388:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 800938c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009390:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8009394:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8009398:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 800939c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80093ae:	441a      	add	r2, r3
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	601a      	str	r2, [r3, #0]
                break;
 80093b4:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d204      	bcs.n	80093cc <parse_fifo+0x318>
 80093c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f43f ae8a 	beq.w	80090e0 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d031      	beq.n	8009438 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d202      	bcs.n	80093e6 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 80093e0:	f06f 0301 	mvn.w	r3, #1
 80093e4:	e02a      	b.n	800943c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01d      	beq.n	8009438 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009402:	e013      	b.n	800942c <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009410:	440b      	add	r3, r1
 8009412:	441a      	add	r2, r3
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	6919      	ldr	r1, [r3, #16]
 8009418:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800941c:	440b      	add	r3, r1
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8009422:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009426:	3301      	adds	r3, #1
 8009428:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800942c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d3e5      	bcc.n	8009404 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8009438:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800943c:	4618      	mov	r0, r3
 800943e:	3764      	adds	r7, #100	; 0x64
 8009440:	46bd      	mov	sp, r7
 8009442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009446:	bf00      	nop

08009448 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8009448:	b590      	push	{r4, r7, lr}
 800944a:	b0cf      	sub	sp, #316	; 0x13c
 800944c:	af00      	add	r7, sp, #0
 800944e:	4604      	mov	r4, r0
 8009450:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009454:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8009458:	6001      	str	r1, [r0, #0]
 800945a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800945e:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8009462:	600a      	str	r2, [r1, #0]
 8009464:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009468:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009472:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009476:	4622      	mov	r2, r4
 8009478:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8009480:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 81af 	beq.w	80097e8 <bhy2_hif_exec_cmd_generic+0x3a0>
 800948a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800948e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <bhy2_hif_exec_cmd_generic+0x60>
 8009498:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800949c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 81a0 	beq.w	80097e8 <bhy2_hif_exec_cmd_generic+0x3a0>
 80094a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <bhy2_hif_exec_cmd_generic+0x78>
 80094b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094b4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 8194 	beq.w	80097e8 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80094c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 8188 	beq.w	80097dc <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 80094cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80094d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4413      	add	r3, r2
 80094dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 80094e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 80094e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80094ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094f0:	4413      	add	r3, r2
 80094f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094f6:	e003      	b.n	8009500 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8009500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 800950c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009510:	089b      	lsrs	r3, r3, #2
 8009512:	3301      	adds	r3, #1
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800951a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800951e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800952a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800952e:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8009530:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009534:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	b2da      	uxtb	r2, r3
 8009540:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009544:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009548:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800954a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800954e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d113      	bne.n	8009580 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8009558:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	b2da      	uxtb	r2, r3
 8009560:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009564:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009568:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800956a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800956e:	089b      	lsrs	r3, r3, #2
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	b2da      	uxtb	r2, r3
 8009574:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800957c:	70da      	strb	r2, [r3, #3]
 800957e:	e010      	b.n	80095a2 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8009580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009584:	b2da      	uxtb	r2, r3
 8009586:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800958a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800958e:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8009590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	b2da      	uxtb	r2, r3
 8009598:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800959c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80095a0:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80095a2:	2304      	movs	r3, #4
 80095a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80095a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80095b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80095b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095b8:	4413      	add	r3, r2
 80095ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80095be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80095c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80095d0:	429a      	cmp	r2, r3
 80095d2:	f240 80f9 	bls.w	80097c8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 80095d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80095e0:	e0f2      	b.n	80097c8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 80095e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80095e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095ea:	4413      	add	r3, r2
 80095ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d20b      	bcs.n	800960c <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80095f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80095f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80095fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009600:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800960a:	e020      	b.n	800964e <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 800960c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009614:	4413      	add	r3, r2
 8009616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800961a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800961e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8009622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d006      	beq.n	800963c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 800962e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009632:	089b      	lsrs	r3, r3, #2
 8009634:	3301      	adds	r3, #1
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 800963c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009644:	d903      	bls.n	800964e <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8009646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800964a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 800964e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009652:	2b00      	cmp	r3, #0
 8009654:	d07e      	beq.n	8009754 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8009656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800965a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009664:	4413      	add	r3, r2
 8009666:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800966a:	429a      	cmp	r2, r3
 800966c:	d315      	bcc.n	800969a <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 800966e:	f107 0214 	add.w	r2, r7, #20
 8009672:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009676:	18d0      	adds	r0, r2, r3
 8009678:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800967c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009686:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	4413      	add	r3, r2
 800968e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009692:	4619      	mov	r1, r3
 8009694:	f012 fc08 	bl	801bea8 <memcpy>
 8009698:	e05c      	b.n	8009754 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 800969a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800969e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096a2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d93b      	bls.n	8009724 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80096ac:	f107 0214 	add.w	r2, r7, #20
 80096b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80096b4:	18d0      	adds	r0, r2, r3
 80096b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80096ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80096c4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	18d1      	adds	r1, r2, r3
 80096cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	f012 fbe3 	bl	801bea8 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 80096e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80096e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096ea:	441a      	add	r2, r3
 80096ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	f107 0214 	add.w	r2, r7, #20
 80096fc:	18d0      	adds	r0, r2, r3
 80096fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009702:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800970c:	1ad2      	subs	r2, r2, r3
 800970e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009712:	441a      	add	r2, r3
 8009714:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800971c:	6819      	ldr	r1, [r3, #0]
 800971e:	f012 fbc3 	bl	801bea8 <memcpy>
 8009722:	e017      	b.n	8009754 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8009724:	f107 0214 	add.w	r2, r7, #20
 8009728:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800972c:	18d0      	adds	r0, r2, r3
 800972e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009732:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009742:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	4413      	add	r3, r2
 800974a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800974e:	4619      	mov	r1, r3
 8009750:	f012 fbaa 	bl	801bea8 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8009754:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800975c:	4413      	add	r3, r2
 800975e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009762:	429a      	cmp	r2, r3
 8009764:	d012      	beq.n	800978c <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8009766:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800976a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800976e:	4413      	add	r3, r2
 8009770:	f107 0214 	add.w	r2, r7, #20
 8009774:	18d0      	adds	r0, r2, r3
 8009776:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800977a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800977e:	4413      	add	r3, r2
 8009780:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009784:	461a      	mov	r2, r3
 8009786:	2100      	movs	r1, #0
 8009788:	f012 fbb6 	bl	801bef8 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 800978c:	f107 0114 	add.w	r1, r7, #20
 8009790:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009794:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009798:	2000      	movs	r0, #0
 800979a:	f000 f9b4 	bl	8009b06 <bhy2_hif_set_regs>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 80097a4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11b      	bne.n	80097e4 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 80097b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 80097c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80097c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00f      	beq.n	80097f0 <bhy2_hif_exec_cmd_generic+0x3a8>
 80097d0:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f43f af04 	beq.w	80095e2 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 80097da:	e009      	b.n	80097f0 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 80097dc:	23fe      	movs	r3, #254	; 0xfe
 80097de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 80097e2:	e005      	b.n	80097f0 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 80097e4:	bf00      	nop
        if (hif->read_write_len != 0)
 80097e6:	e003      	b.n	80097f0 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80097e8:	23ff      	movs	r3, #255	; 0xff
 80097ea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80097ee:	e000      	b.n	80097f2 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 80097f0:	bf00      	nop
    }

    return rslt;
 80097f2:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd90      	pop	{r4, r7, pc}

08009800 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009808:	2300      	movs	r3, #0
 800980a:	81fb      	strh	r3, [r7, #14]
 800980c:	e027      	b.n	800985e <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 800980e:	f107 030c 	add.w	r3, r7, #12
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fab1 	bl	8009d7c <bhy2_hif_get_interrupt_status>
 800981a:	4603      	mov	r3, r0
 800981c:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 800981e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d115      	bne.n	8009852 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8009826:	7b3b      	ldrb	r3, [r7, #12]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	737b      	strb	r3, [r7, #13]
                break;
 8009834:	e017      	b.n	8009866 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	f242 7010 	movw	r0, #10000	; 0x2710
 800983c:	f000 f99b 	bl	8009b76 <bhy2_hif_delay_us>
 8009840:	4603      	mov	r3, r0
 8009842:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8009844:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 800984c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009850:	e00b      	b.n	800986a <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8009852:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009856:	e008      	b.n	800986a <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009858:	89fb      	ldrh	r3, [r7, #14]
 800985a:	3301      	adds	r3, #1
 800985c:	81fb      	strh	r3, [r7, #14]
 800985e:	89fb      	ldrh	r3, [r7, #14]
 8009860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009864:	d3d3      	bcc.n	800980e <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8009866:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 800987a:	2300      	movs	r3, #0
 800987c:	81fb      	strh	r3, [r7, #14]
 800987e:	e02f      	b.n	80098e0 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009886:	f000 f976 	bl	8009b76 <bhy2_hif_delay_us>
 800988a:	4603      	mov	r3, r0
 800988c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 800988e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009892:	2b00      	cmp	r3, #0
 8009894:	da02      	bge.n	800989c <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8009896:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800989a:	e02d      	b.n	80098f8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 800989c:	f107 010c 	add.w	r1, r7, #12
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	2025      	movs	r0, #37	; 0x25
 80098a6:	f000 f8f6 	bl	8009a96 <bhy2_hif_get_regs>
 80098aa:	4603      	mov	r3, r0
 80098ac:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80098ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da02      	bge.n	80098bc <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 80098b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098ba:	e01d      	b.n	80098f8 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80098bc:	7b3b      	ldrb	r3, [r7, #12]
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <bhy2_hif_check_boot_status_ram+0x68>
 80098c6:	7b3b      	ldrb	r3, [r7, #12]
 80098c8:	f003 0320 	and.w	r3, r3, #32
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 80098d0:	7b3b      	ldrb	r3, [r7, #12]
 80098d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	3301      	adds	r3, #1
 80098de:	81fb      	strh	r3, [r7, #14]
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	2b63      	cmp	r3, #99	; 0x63
 80098e4:	d9cc      	bls.n	8009880 <bhy2_hif_check_boot_status_ram+0xe>
 80098e6:	e000      	b.n	80098ea <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 80098e8:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 80098ea:	89fb      	ldrh	r3, [r7, #14]
 80098ec:	2b64      	cmp	r3, #100	; 0x64
 80098ee:	d102      	bne.n	80098f6 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 80098f0:	f06f 0304 	mvn.w	r3, #4
 80098f4:	e000      	b.n	80098f8 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	; 0x28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009918:	2b00      	cmp	r3, #0
 800991a:	d072      	beq.n	8009a02 <bhy2_hif_get_fifo+0x102>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d06f      	beq.n	8009a02 <bhy2_hif_get_fifo+0x102>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d06c      	beq.n	8009a02 <bhy2_hif_get_fifo+0x102>
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2b00      	cmp	r3, #0
 800992c:	d069      	beq.n	8009a02 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d114      	bne.n	8009966 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 800993c:	f107 0114 	add.w	r1, r7, #20
 8009940:	7bf8      	ldrb	r0, [r7, #15]
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	2202      	movs	r2, #2
 8009946:	f000 f8a6 	bl	8009a96 <bhy2_hif_get_regs>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8009950:	7d3b      	ldrb	r3, [r7, #20]
 8009952:	b21a      	sxth	r2, r3
 8009954:	7d7b      	ldrb	r3, [r7, #21]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	b21b      	sxth	r3, r3
 800995a:	4313      	orrs	r3, r2
 800995c:	b21b      	sxth	r3, r3
 800995e:	b29b      	uxth	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04d      	beq.n	8009a0a <bhy2_hif_get_fifo+0x10a>
 800996e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009972:	2b00      	cmp	r3, #0
 8009974:	d149      	bne.n	8009a0a <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8009976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d203      	bcs.n	8009988 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e003      	b.n	8009990 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	623b      	str	r3, [r7, #32]
            offset = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 800999a:	e016      	b.n	80099ca <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	18d1      	adds	r1, r2, r3
 80099a2:	7bf8      	ldrb	r0, [r7, #15]
 80099a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	f000 f875 	bl	8009a96 <bhy2_hif_get_regs>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 80099b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10c      	bne.n	80099d4 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 80099ba:	6a3a      	ldr	r2, [r7, #32]
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	4413      	add	r3, r2
 80099c8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80099ca:	6a3a      	ldr	r2, [r7, #32]
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d8e4      	bhi.n	800999c <bhy2_hif_get_fifo+0x9c>
 80099d2:	e000      	b.n	80099d6 <bhy2_hif_get_fifo+0xd6>
                    break;
 80099d4:	bf00      	nop
            }

            if (read_len != 0)
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	18d1      	adds	r1, r2, r3
 80099e2:	7bf8      	ldrb	r0, [r7, #15]
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	6a3a      	ldr	r2, [r7, #32]
 80099e8:	f000 f855 	bl	8009a96 <bhy2_hif_get_regs>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	1ad2      	subs	r2, r2, r3
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009a00:	e003      	b.n	8009a0a <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009a02:	23ff      	movs	r3, #255	; 0xff
 8009a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a08:	e000      	b.n	8009a0c <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009a0a:	bf00      	nop
    }

    return rslt;
 8009a0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3728      	adds	r7, #40	; 0x28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d027      	beq.n	8009a82 <bhy2_hif_init+0x6a>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d024      	beq.n	8009a82 <bhy2_hif_init+0x6a>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d021      	beq.n	8009a82 <bhy2_hif_init+0x6a>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01e      	beq.n	8009a82 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	7bfa      	ldrb	r2, [r7, #15]
 8009a60:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	089b      	lsrs	r3, r3, #2
 8009a70:	3301      	adds	r3, #1
 8009a72:	009a      	lsls	r2, r3, #2
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009a78:	e005      	b.n	8009a86 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	6a3a      	ldr	r2, [r7, #32]
 8009a7e:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009a80:	e001      	b.n	8009a86 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009a82:	23ff      	movs	r3, #255	; 0xff
 8009a84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009a96:	b590      	push	{r4, r7, lr}
 8009a98:	b087      	sub	sp, #28
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d022      	beq.n	8009af6 <bhy2_hif_get_regs+0x60>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01e      	beq.n	8009af6 <bhy2_hif_get_regs+0x60>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01b      	beq.n	8009af6 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	7b1b      	ldrb	r3, [r3, #12]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d103      	bne.n	8009ace <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009acc:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681c      	ldr	r4, [r3, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	7bf8      	ldrb	r0, [r7, #15]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	47a0      	blx	r4
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009af0:	23fd      	movs	r3, #253	; 0xfd
 8009af2:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009af4:	e001      	b.n	8009afa <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009af6:	23ff      	movs	r3, #255	; 0xff
 8009af8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b087      	sub	sp, #28
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
 8009b12:	4603      	mov	r3, r0
 8009b14:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d022      	beq.n	8009b66 <bhy2_hif_set_regs+0x60>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01e      	beq.n	8009b66 <bhy2_hif_set_regs+0x60>
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01b      	beq.n	8009b66 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	7b1b      	ldrb	r3, [r3, #12]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d103      	bne.n	8009b3e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	685c      	ldr	r4, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	7bf8      	ldrb	r0, [r7, #15]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	47a0      	blx	r4
 8009b4e:	4603      	mov	r3, r0
 8009b50:	461a      	mov	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009b60:	23fd      	movs	r3, #253	; 0xfd
 8009b62:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009b64:	e001      	b.n	8009b6a <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009b66:	23ff      	movs	r3, #255	; 0xff
 8009b68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}

08009b76 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00b      	beq.n	8009ba2 <bhy2_hif_delay_us+0x2c>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	6912      	ldr	r2, [r2, #16]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
 8009ba0:	e001      	b.n	8009ba6 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ba2:	23ff      	movs	r3, #255	; 0xff
 8009ba4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b088      	sub	sp, #32
 8009bb6:	af04      	add	r7, sp, #16
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8009bc2:	89f8      	ldrh	r0, [r7, #14]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	9302      	str	r3, [sp, #8]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	f7ff fc37 	bl	8009448 <bhy2_hif_exec_cmd_generic>
 8009bda:	4603      	mov	r3, r0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d06e      	beq.n	8009ce0 <bhy2_hif_get_parameter+0xfc>
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d06b      	beq.n	8009ce0 <bhy2_hif_get_parameter+0xfc>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d068      	beq.n	8009ce0 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009c14:	f107 0113 	add.w	r1, r7, #19
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	2006      	movs	r0, #6
 8009c1e:	f7ff ff3a 	bl	8009a96 <bhy2_hif_get_regs>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d15b      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8009c2e:	7cfb      	ldrb	r3, [r7, #19]
 8009c30:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8009c32:	7cfb      	ldrb	r3, [r7, #19]
 8009c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8009c3c:	7cfb      	ldrb	r3, [r7, #19]
 8009c3e:	7dba      	ldrb	r2, [r7, #22]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d008      	beq.n	8009c56 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009c44:	f107 0113 	add.w	r1, r7, #19
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	2006      	movs	r0, #6
 8009c4e:	f7ff ff5a 	bl	8009b06 <bhy2_hif_set_regs>
 8009c52:	4603      	mov	r3, r0
 8009c54:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8009c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d143      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8009c5e:	89fb      	ldrh	r3, [r7, #14]
 8009c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c64:	b298      	uxth	r0, r3
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	f7ff ffa1 	bl	8009bb2 <bhy2_hif_exec_cmd>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8009c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d134      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8009c7c:	6a38      	ldr	r0, [r7, #32]
 8009c7e:	f7ff fdbf 	bl	8009800 <bhy2_wait_status_ready>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8009c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d12b      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8009c8e:	f107 0014 	add.w	r0, r7, #20
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	f000 f94b 	bl	8009f36 <bhy2_hif_get_status_fifo>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8009ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d11c      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	7dba      	ldrb	r2, [r7, #22]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d00a      	beq.n	8009cca <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8009cb4:	7dbb      	ldrb	r3, [r7, #22]
 8009cb6:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009cb8:	f107 0113 	add.w	r1, r7, #19
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2006      	movs	r0, #6
 8009cc2:	f7ff ff20 	bl	8009b06 <bhy2_hif_set_regs>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8009cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8009cd2:	8abb      	ldrh	r3, [r7, #20]
 8009cd4:	89fa      	ldrh	r2, [r7, #14]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d005      	beq.n	8009ce6 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8009cda:	23fb      	movs	r3, #251	; 0xfb
 8009cdc:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009cde:	e002      	b.n	8009ce6 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ce0:	23ff      	movs	r3, #255	; 0xff
 8009ce2:	75fb      	strb	r3, [r7, #23]
 8009ce4:	e000      	b.n	8009ce8 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8009ce6:	bf00      	nop
    }

    return rslt;
 8009ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2201      	movs	r2, #1
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	201c      	movs	r0, #28
 8009d06:	f7ff fec6 	bl	8009a96 <bhy2_hif_get_regs>
 8009d0a:	4603      	mov	r3, r0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d013      	beq.n	8009d4c <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8009d24:	f107 010c 	add.w	r1, r7, #12
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	2020      	movs	r0, #32
 8009d2e:	f7ff feb2 	bl	8009a96 <bhy2_hif_get_regs>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8009d36:	7b3b      	ldrb	r3, [r7, #12]
 8009d38:	b21a      	sxth	r2, r3
 8009d3a:	7b7b      	ldrb	r3, [r7, #13]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b21b      	sxth	r3, r3
 8009d40:	4313      	orrs	r3, r2
 8009d42:	b21b      	sxth	r3, r3
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	801a      	strh	r2, [r3, #0]
 8009d4a:	e001      	b.n	8009d50 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d4c:	23ff      	movs	r3, #255	; 0xff
 8009d4e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	2025      	movs	r0, #37	; 0x25
 8009d6e:	f7ff fe92 	bl	8009a96 <bhy2_hif_get_regs>
 8009d72:	4603      	mov	r3, r0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	202d      	movs	r0, #45	; 0x2d
 8009d8e:	f7ff fe82 	bl	8009a96 <bhy2_hif_get_regs>
 8009d92:	4603      	mov	r3, r0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8009da4:	2301      	movs	r3, #1
 8009da6:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8009dac:	230f      	movs	r3, #15
 8009dae:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8009db0:	f107 010b 	add.w	r1, r7, #11
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	2014      	movs	r0, #20
 8009dba:	f7ff fea4 	bl	8009b06 <bhy2_hif_set_regs>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d12b      	bne.n	8009e22 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8009dca:	e01c      	b.n	8009e06 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	f242 7010 	movw	r0, #10000	; 0x2710
 8009dd2:	f7ff fed0 	bl	8009b76 <bhy2_hif_delay_us>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8009dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d111      	bne.n	8009e06 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8009de2:	f107 010a 	add.w	r1, r7, #10
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	2025      	movs	r0, #37	; 0x25
 8009dec:	f7ff fe53 	bl	8009a96 <bhy2_hif_get_regs>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8009df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d104      	bne.n	8009e06 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8009dfc:	7abb      	ldrb	r3, [r7, #10]
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d105      	bne.n	8009e12 <bhy2_hif_reset+0x76>
        while (count--)
 8009e06:	89bb      	ldrh	r3, [r7, #12]
 8009e08:	1e5a      	subs	r2, r3, #1
 8009e0a:	81ba      	strh	r2, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1dd      	bne.n	8009dcc <bhy2_hif_reset+0x30>
 8009e10:	e000      	b.n	8009e14 <bhy2_hif_reset+0x78>
                    {
                        break;
 8009e12:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8009e14:	7abb      	ldrb	r3, [r7, #10]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8009e1e:	23fb      	movs	r3, #251	; 0xfb
 8009e20:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b086      	sub	sp, #24
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d027      	beq.n	8009e94 <bhy2_hif_upload_firmware_to_ram+0x66>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d024      	beq.n	8009e94 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b21a      	sxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	b21b      	sxth	r3, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	b21b      	sxth	r3, r3
 8009e5e:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8009e60:	8abb      	ldrh	r3, [r7, #20]
 8009e62:	f246 622b 	movw	r2, #26155	; 0x662b
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d002      	beq.n	8009e70 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8009e6a:	23fc      	movs	r3, #252	; 0xfc
 8009e6c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8009e6e:	e014      	b.n	8009e9a <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	2002      	movs	r0, #2
 8009e78:	f7ff fe9b 	bl	8009bb2 <bhy2_hif_exec_cmd>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8009e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fcf2 	bl	8009872 <bhy2_hif_check_boot_status_ram>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8009e92:	e002      	b.n	8009e9a <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009e94:	23ff      	movs	r3, #255	; 0xff
 8009e96:	75fb      	strb	r3, [r7, #23]
 8009e98:	e000      	b.n	8009e9c <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8009e9a:	bf00      	nop
    }

    return rslt;
 8009e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	2003      	movs	r0, #3
 8009eb8:	f7ff fe7b 	bl	8009bb2 <bhy2_hif_exec_cmd>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d104      	bne.n	8009ed2 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fcd2 	bl	8009872 <bhy2_hif_check_boot_status_ram>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b086      	sub	sp, #24
 8009ee2:	af02      	add	r7, sp, #8
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	607a      	str	r2, [r7, #4]
 8009eea:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	68f9      	ldr	r1, [r7, #12]
 8009efa:	2001      	movs	r0, #1
 8009efc:	f7ff fd00 	bl	8009900 <bhy2_hif_get_fifo>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af02      	add	r7, sp, #8
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	68f9      	ldr	r1, [r7, #12]
 8009f26:	2002      	movs	r0, #2
 8009f28:	f7ff fcea 	bl	8009900 <bhy2_hif_get_fifo>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b086      	sub	sp, #24
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	607a      	str	r2, [r7, #4]
 8009f42:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8009f44:	f107 0110 	add.w	r1, r7, #16
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	2003      	movs	r0, #3
 8009f4e:	f7ff fda2 	bl	8009a96 <bhy2_hif_get_regs>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8009f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d130      	bne.n	8009fc0 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8009f5e:	7c3b      	ldrb	r3, [r7, #16]
 8009f60:	b21a      	sxth	r2, r3
 8009f62:	f107 0310 	add.w	r3, r7, #16
 8009f66:	3301      	adds	r3, #1
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	b21b      	sxth	r3, r3
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8009f78:	7cbb      	ldrb	r3, [r7, #18]
 8009f7a:	b21a      	sxth	r2, r3
 8009f7c:	f107 0310 	add.w	r3, r7, #16
 8009f80:	3302      	adds	r3, #2
 8009f82:	3301      	adds	r3, #1
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	b21b      	sxth	r3, r3
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b21b      	sxth	r3, r3
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	461a      	mov	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d010      	beq.n	8009fc0 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d202      	bcs.n	8009fae <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8009fa8:	23fa      	movs	r3, #250	; 0xfa
 8009faa:	75fb      	strb	r3, [r7, #23]
 8009fac:	e008      	b.n	8009fc0 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	2003      	movs	r0, #3
 8009fb8:	f7ff fd6d 	bl	8009a96 <bhy2_hif_get_regs>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8009fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	2003      	movs	r0, #3
 8009fea:	f7ff fc89 	bl	8009900 <bhy2_hif_get_fifo>
 8009fee:	4603      	mov	r3, r0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b088      	sub	sp, #32
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	ed87 0a02 	vstr	s0, [r7, #8]
 800a004:	6079      	str	r1, [r7, #4]
 800a006:	603a      	str	r2, [r7, #0]
 800a008:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	b2db      	uxtb	r3, r3
 800a026:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	0e1b      	lsrs	r3, r3, #24
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	0c1b      	lsrs	r3, r3, #16
 800a042:	b2db      	uxtb	r3, r3
 800a044:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800a046:	f107 0118 	add.w	r1, r7, #24
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2208      	movs	r2, #8
 800a04e:	200d      	movs	r0, #13
 800a050:	f7ff fdaf 	bl	8009bb2 <bhy2_hif_exec_cmd>
 800a054:	4603      	mov	r3, r0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b090      	sub	sp, #64	; 0x40
 800a062:	af02      	add	r7, sp, #8
 800a064:	4603      	mov	r3, r0
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80da 	beq.w	800a228 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2bf5      	cmp	r3, #245	; 0xf5
 800a078:	d903      	bls.n	800a082 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 800a07a:	23fe      	movs	r3, #254	; 0xfe
 800a07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a080:	e0d5      	b.n	800a22e <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a08a:	b298      	uxth	r0, r3
 800a08c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a090:	f107 0114 	add.w	r1, r7, #20
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	4613      	mov	r3, r2
 800a09a:	221c      	movs	r2, #28
 800a09c:	f7ff fda2 	bl	8009be4 <bhy2_hif_get_parameter>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 800a0a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f040 80bf 	bne.w	800a22e <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	2b1c      	cmp	r3, #28
 800a0b4:	d003      	beq.n	800a0be <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800a0b6:	23fe      	movs	r3, #254	; 0xfe
 800a0b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0bc:	e0b7      	b.n	800a22e <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 800a0be:	7d3a      	ldrb	r2, [r7, #20]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 800a0c4:	7d7a      	ldrb	r2, [r7, #21]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800a0ca:	7dba      	ldrb	r2, [r7, #22]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 800a0d0:	7dfa      	ldrb	r2, [r7, #23]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800a0d6:	7e3a      	ldrb	r2, [r7, #24]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800a0dc:	7e7a      	ldrb	r2, [r7, #25]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 800a0e2:	7eba      	ldrb	r2, [r7, #26]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800a0e8:	7efa      	ldrb	r2, [r7, #27]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800a0ee:	7f3a      	ldrb	r2, [r7, #28]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 800a0f4:	7f7a      	ldrb	r2, [r7, #29]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800a0fa:	7fba      	ldrb	r2, [r7, #30]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 800a100:	7ffa      	ldrb	r2, [r7, #31]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800a106:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800a10e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800a116:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800a11e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800a126:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800a12e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800a136:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800a13e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800a146:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800a14e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800a156:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800a15e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800a166:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	791b      	ldrb	r3, [r3, #4]
 800a172:	b21a      	sxth	r2, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	795b      	ldrb	r3, [r3, #5]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	b21b      	sxth	r3, r3
 800a17c:	4313      	orrs	r3, r2
 800a17e:	b21b      	sxth	r3, r3
 800a180:	b29a      	uxth	r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	799b      	ldrb	r3, [r3, #6]
 800a18a:	b21a      	sxth	r2, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	79db      	ldrb	r3, [r3, #7]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b21b      	sxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b21b      	sxth	r3, r3
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	7a1b      	ldrb	r3, [r3, #8]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	7a5b      	ldrb	r3, [r3, #9]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	7a9b      	ldrb	r3, [r3, #10]
 800a1b0:	041b      	lsls	r3, r3, #16
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	7adb      	ldrb	r3, [r3, #11]
 800a1b8:	061b      	lsls	r3, r3, #24
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	7b1b      	ldrb	r3, [r3, #12]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	7b5b      	ldrb	r3, [r3, #13]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	7b9b      	ldrb	r3, [r3, #14]
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	7bdb      	ldrb	r3, [r3, #15]
 800a1da:	061b      	lsls	r3, r3, #24
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	7c1b      	ldrb	r3, [r3, #16]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	7c5b      	ldrb	r3, [r3, #17]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	431a      	orrs	r2, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	7c9b      	ldrb	r3, [r3, #18]
 800a1f4:	041b      	lsls	r3, r3, #16
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	7cdb      	ldrb	r3, [r3, #19]
 800a1fc:	061b      	lsls	r3, r3, #24
 800a1fe:	431a      	orrs	r2, r3
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	7e1b      	ldrb	r3, [r3, #24]
 800a208:	461a      	mov	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	7e5b      	ldrb	r3, [r3, #25]
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	431a      	orrs	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	7e9b      	ldrb	r3, [r3, #26]
 800a216:	041b      	lsls	r3, r3, #16
 800a218:	431a      	orrs	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	7edb      	ldrb	r3, [r3, #27]
 800a21e:	061b      	lsls	r3, r3, #24
 800a220:	431a      	orrs	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	619a      	str	r2, [r3, #24]
 800a226:	e002      	b.n	800a22e <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a228:	23ff      	movs	r3, #255	; 0xff
 800a22a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800a22e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a232:	4618      	mov	r0, r3
 800a234:	3738      	adds	r7, #56	; 0x38
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	b21a      	sxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3301      	adds	r3, #1
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	b21b      	sxth	r3, r3
 800a254:	4313      	orrs	r3, r2
 800a256:	b21a      	sxth	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3302      	adds	r3, #2
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b21a      	sxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3303      	adds	r3, #3
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b21a      	sxth	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3304      	adds	r3, #4
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b21a      	sxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3305      	adds	r3, #5
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	b21b      	sxth	r3, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	b21a      	sxth	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3306      	adds	r3, #6
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b21a      	sxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3307      	adds	r3, #7
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b21a      	sxth	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	b21a      	sxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3309      	adds	r3, #9
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	811a      	strh	r2, [r3, #8]
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
	...

0800a2d4 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a2d8:	4b12      	ldr	r3, [pc, #72]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2da:	4a13      	ldr	r2, [pc, #76]	; (800a328 <MX_COMP2_Init+0x54>)
 800a2dc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800a2de:	4b11      	ldr	r3, [pc, #68]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a2e4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800a2e6:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <MX_COMP2_Init+0x50>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <MX_COMP2_Init+0x50>)
 800a300:	2200      	movs	r2, #0
 800a302:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <MX_COMP2_Init+0x50>)
 800a306:	2200      	movs	r2, #0
 800a308:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800a30a:	4b06      	ldr	r3, [pc, #24]	; (800a324 <MX_COMP2_Init+0x50>)
 800a30c:	2211      	movs	r2, #17
 800a30e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a310:	4804      	ldr	r0, [pc, #16]	; (800a324 <MX_COMP2_Init+0x50>)
 800a312:	f001 fcad 	bl	800bc70 <HAL_COMP_Init>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800a31c:	f000 fbce 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a320:	bf00      	nop
 800a322:	bd80      	pop	{r7, pc}
 800a324:	240014a8 	.word	0x240014a8
 800a328:	58003810 	.word	0x58003810

0800a32c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a334:	f107 0314 	add.w	r3, r7, #20
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	609a      	str	r2, [r3, #8]
 800a340:	60da      	str	r2, [r3, #12]
 800a342:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <HAL_COMP_MspInit+0x90>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d132      	bne.n	800a3b4 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800a34e:	4b1c      	ldr	r3, [pc, #112]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a354:	4a1a      	ldr	r2, [pc, #104]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a35a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a35e:	4b18      	ldr	r3, [pc, #96]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a36e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a372:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a374:	f043 0310 	orr.w	r3, r3, #16
 800a378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a37c:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <HAL_COMP_MspInit+0x94>)
 800a37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a382:	f003 0310 	and.w	r3, r3, #16
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a38e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a390:	2303      	movs	r3, #3
 800a392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a394:	2300      	movs	r3, #0
 800a396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	4619      	mov	r1, r3
 800a39e:	4809      	ldr	r0, [pc, #36]	; (800a3c4 <HAL_COMP_MspInit+0x98>)
 800a3a0:	f004 fb5a 	bl	800ea58 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	2089      	movs	r0, #137	; 0x89
 800a3aa:	f001 ff24 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800a3ae:	2089      	movs	r0, #137	; 0x89
 800a3b0:	f001 ff3b 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800a3b4:	bf00      	nop
 800a3b6:	3728      	adds	r7, #40	; 0x28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	58003810 	.word	0x58003810
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	58021000 	.word	0x58021000

0800a3c8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	; 0x28
 800a3cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	2224      	movs	r2, #36	; 0x24
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f011 fd8f 	bl	801bef8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a3da:	4b12      	ldr	r3, [pc, #72]	; (800a424 <MX_DAC1_Init+0x5c>)
 800a3dc:	4a12      	ldr	r2, [pc, #72]	; (800a428 <MX_DAC1_Init+0x60>)
 800a3de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a3e0:	4810      	ldr	r0, [pc, #64]	; (800a424 <MX_DAC1_Init+0x5c>)
 800a3e2:	f001 ff3c 	bl	800c25e <HAL_DAC_Init>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a3ec:	f000 fb66 	bl	800aabc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a404:	1d3b      	adds	r3, r7, #4
 800a406:	2200      	movs	r2, #0
 800a408:	4619      	mov	r1, r3
 800a40a:	4806      	ldr	r0, [pc, #24]	; (800a424 <MX_DAC1_Init+0x5c>)
 800a40c:	f001 ffc0 	bl	800c390 <HAL_DAC_ConfigChannel>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a416:	f000 fb51 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a41a:	bf00      	nop
 800a41c:	3728      	adds	r7, #40	; 0x28
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	240014d4 	.word	0x240014d4
 800a428:	40007400 	.word	0x40007400

0800a42c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <HAL_DAC_MspInit+0x3c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d10e      	bne.n	800a45c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a43e:	4b0b      	ldr	r3, [pc, #44]	; (800a46c <HAL_DAC_MspInit+0x40>)
 800a440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a444:	4a09      	ldr	r2, [pc, #36]	; (800a46c <HAL_DAC_MspInit+0x40>)
 800a446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a44a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a44e:	4b07      	ldr	r3, [pc, #28]	; (800a46c <HAL_DAC_MspInit+0x40>)
 800a450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a45c:	bf00      	nop
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	40007400 	.word	0x40007400
 800a46c:	58024400 	.word	0x58024400

0800a470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a476:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <MX_DMA_Init+0x6c>)
 800a478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a47c:	4a17      	ldr	r2, [pc, #92]	; (800a4dc <MX_DMA_Init+0x6c>)
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a486:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <MX_DMA_Init+0x6c>)
 800a488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a494:	2200      	movs	r2, #0
 800a496:	2100      	movs	r1, #0
 800a498:	200b      	movs	r0, #11
 800a49a:	f001 feac 	bl	800c1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a49e:	200b      	movs	r0, #11
 800a4a0:	f001 fec3 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	200c      	movs	r0, #12
 800a4aa:	f001 fea4 	bl	800c1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a4ae:	200c      	movs	r0, #12
 800a4b0:	f001 febb 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	200f      	movs	r0, #15
 800a4ba:	f001 fe9c 	bl	800c1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a4be:	200f      	movs	r0, #15
 800a4c0:	f001 feb3 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	2010      	movs	r0, #16
 800a4ca:	f001 fe94 	bl	800c1f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a4ce:	2010      	movs	r0, #16
 800a4d0:	f001 feab 	bl	800c22a <HAL_NVIC_EnableIRQ>

}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	58024400 	.word	0x58024400

0800a4e0 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e6:	f107 0314 	add.w	r3, r7, #20
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	605a      	str	r2, [r3, #4]
 800a4f0:	609a      	str	r2, [r3, #8]
 800a4f2:	60da      	str	r2, [r3, #12]
 800a4f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4f6:	4b45      	ldr	r3, [pc, #276]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a4f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4fc:	4a43      	ldr	r2, [pc, #268]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a4fe:	f043 0304 	orr.w	r3, r3, #4
 800a502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a506:	4b41      	ldr	r3, [pc, #260]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	613b      	str	r3, [r7, #16]
 800a512:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a514:	4b3d      	ldr	r3, [pc, #244]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a51a:	4a3c      	ldr	r2, [pc, #240]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a51c:	f043 0301 	orr.w	r3, r3, #1
 800a520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a524:	4b39      	ldr	r3, [pc, #228]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a532:	4b36      	ldr	r3, [pc, #216]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a538:	4a34      	ldr	r2, [pc, #208]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a53a:	f043 0310 	orr.w	r3, r3, #16
 800a53e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a542:	4b32      	ldr	r3, [pc, #200]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a548:	f003 0310 	and.w	r3, r3, #16
 800a54c:	60bb      	str	r3, [r7, #8]
 800a54e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a550:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a556:	4a2d      	ldr	r2, [pc, #180]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a558:	f043 0302 	orr.w	r3, r3, #2
 800a55c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a560:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	607b      	str	r3, [r7, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a56e:	4b27      	ldr	r3, [pc, #156]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a574:	4a25      	ldr	r2, [pc, #148]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a576:	f043 0308 	orr.w	r3, r3, #8
 800a57a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a57e:	4b23      	ldr	r3, [pc, #140]	; (800a60c <MX_GPIO_Init+0x12c>)
 800a580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a584:	f003 0308 	and.w	r3, r3, #8
 800a588:	603b      	str	r3, [r7, #0]
 800a58a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800a58c:	2200      	movs	r2, #0
 800a58e:	2101      	movs	r1, #1
 800a590:	481f      	ldr	r0, [pc, #124]	; (800a610 <MX_GPIO_Init+0x130>)
 800a592:	f004 fc11 	bl	800edb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800a596:	2201      	movs	r2, #1
 800a598:	2110      	movs	r1, #16
 800a59a:	481e      	ldr	r0, [pc, #120]	; (800a614 <MX_GPIO_Init+0x134>)
 800a59c:	f004 fc0c 	bl	800edb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5a6:	481c      	ldr	r0, [pc, #112]	; (800a618 <MX_GPIO_Init+0x138>)
 800a5a8:	f004 fc06 	bl	800edb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4813      	ldr	r0, [pc, #76]	; (800a610 <MX_GPIO_Init+0x130>)
 800a5c4:	f004 fa48 	bl	800ea58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	4619      	mov	r1, r3
 800a5de:	480d      	ldr	r0, [pc, #52]	; (800a614 <MX_GPIO_Init+0x134>)
 800a5e0:	f004 fa3a 	bl	800ea58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800a5e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800a5f6:	f107 0314 	add.w	r3, r7, #20
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4806      	ldr	r0, [pc, #24]	; (800a618 <MX_GPIO_Init+0x138>)
 800a5fe:	f004 fa2b 	bl	800ea58 <HAL_GPIO_Init>

}
 800a602:	bf00      	nop
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
 800a610:	58020800 	.word	0x58020800
 800a614:	58020000 	.word	0x58020000
 800a618:	58021000 	.word	0x58021000

0800a61c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a620:	4b1b      	ldr	r3, [pc, #108]	; (800a690 <MX_I2C2_Init+0x74>)
 800a622:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <MX_I2C2_Init+0x78>)
 800a624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a626:	4b1a      	ldr	r3, [pc, #104]	; (800a690 <MX_I2C2_Init+0x74>)
 800a628:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <MX_I2C2_Init+0x7c>)
 800a62a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a62c:	4b18      	ldr	r3, [pc, #96]	; (800a690 <MX_I2C2_Init+0x74>)
 800a62e:	2200      	movs	r2, #0
 800a630:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a632:	4b17      	ldr	r3, [pc, #92]	; (800a690 <MX_I2C2_Init+0x74>)
 800a634:	2201      	movs	r2, #1
 800a636:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a638:	4b15      	ldr	r3, [pc, #84]	; (800a690 <MX_I2C2_Init+0x74>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a63e:	4b14      	ldr	r3, [pc, #80]	; (800a690 <MX_I2C2_Init+0x74>)
 800a640:	2200      	movs	r2, #0
 800a642:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a644:	4b12      	ldr	r3, [pc, #72]	; (800a690 <MX_I2C2_Init+0x74>)
 800a646:	2200      	movs	r2, #0
 800a648:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a64a:	4b11      	ldr	r3, [pc, #68]	; (800a690 <MX_I2C2_Init+0x74>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a650:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <MX_I2C2_Init+0x74>)
 800a652:	2200      	movs	r2, #0
 800a654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a656:	480e      	ldr	r0, [pc, #56]	; (800a690 <MX_I2C2_Init+0x74>)
 800a658:	f004 fbc8 	bl	800edec <HAL_I2C_Init>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a662:	f000 fa2b 	bl	800aabc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a666:	2100      	movs	r1, #0
 800a668:	4809      	ldr	r0, [pc, #36]	; (800a690 <MX_I2C2_Init+0x74>)
 800a66a:	f005 fad4 	bl	800fc16 <HAL_I2CEx_ConfigAnalogFilter>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a674:	f000 fa22 	bl	800aabc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a678:	2100      	movs	r1, #0
 800a67a:	4805      	ldr	r0, [pc, #20]	; (800a690 <MX_I2C2_Init+0x74>)
 800a67c:	f005 fb16 	bl	800fcac <HAL_I2CEx_ConfigDigitalFilter>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a686:	f000 fa19 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a68a:	bf00      	nop
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	240014e8 	.word	0x240014e8
 800a694:	40005800 	.word	0x40005800
 800a698:	00b03fdb 	.word	0x00b03fdb

0800a69c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b0b8      	sub	sp, #224	; 0xe0
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	60da      	str	r2, [r3, #12]
 800a6b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6b4:	f107 0310 	add.w	r3, r7, #16
 800a6b8:	22bc      	movs	r2, #188	; 0xbc
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f011 fc1b 	bl	801bef8 <memset>
  if(i2cHandle->Instance==I2C2)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a5a      	ldr	r2, [pc, #360]	; (800a830 <HAL_I2C_MspInit+0x194>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	f040 80ad 	bne.w	800a828 <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f007 fd05 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800a6e8:	f000 f9e8 	bl	800aabc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6ec:	4b51      	ldr	r3, [pc, #324]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a6ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f2:	4a50      	ldr	r2, [pc, #320]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a6f4:	f043 0302 	orr.w	r3, r3, #2
 800a6f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6fc:	4b4d      	ldr	r3, [pc, #308]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a6fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a70a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a70e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a712:	2312      	movs	r3, #18
 800a714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a71e:	2300      	movs	r3, #0
 800a720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a724:	2304      	movs	r3, #4
 800a726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a72a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a72e:	4619      	mov	r1, r3
 800a730:	4841      	ldr	r0, [pc, #260]	; (800a838 <HAL_I2C_MspInit+0x19c>)
 800a732:	f004 f991 	bl	800ea58 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a736:	4b3f      	ldr	r3, [pc, #252]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a73c:	4a3d      	ldr	r2, [pc, #244]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a73e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a742:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a746:	4b3b      	ldr	r3, [pc, #236]	; (800a834 <HAL_I2C_MspInit+0x198>)
 800a748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a74c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a750:	60bb      	str	r3, [r7, #8]
 800a752:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800a754:	4b39      	ldr	r3, [pc, #228]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a756:	4a3a      	ldr	r2, [pc, #232]	; (800a840 <HAL_I2C_MspInit+0x1a4>)
 800a758:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800a75a:	4b38      	ldr	r3, [pc, #224]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a75c:	2223      	movs	r2, #35	; 0x23
 800a75e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a760:	4b36      	ldr	r3, [pc, #216]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a762:	2200      	movs	r2, #0
 800a764:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a766:	4b35      	ldr	r3, [pc, #212]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a768:	2200      	movs	r2, #0
 800a76a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a76c:	4b33      	ldr	r3, [pc, #204]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a76e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a772:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a774:	4b31      	ldr	r3, [pc, #196]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a776:	2200      	movs	r2, #0
 800a778:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a77a:	4b30      	ldr	r3, [pc, #192]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800a780:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a782:	2200      	movs	r2, #0
 800a784:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a786:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a788:	2200      	movs	r2, #0
 800a78a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a78e:	2200      	movs	r2, #0
 800a790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800a792:	482a      	ldr	r0, [pc, #168]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a794:	f001 ff2c 	bl	800c5f0 <HAL_DMA_Init>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800a79e:	f000 f98d 	bl	800aabc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a25      	ldr	r2, [pc, #148]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a7a6:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7a8:	4a24      	ldr	r2, [pc, #144]	; (800a83c <HAL_I2C_MspInit+0x1a0>)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800a7ae:	4b25      	ldr	r3, [pc, #148]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7b0:	4a25      	ldr	r2, [pc, #148]	; (800a848 <HAL_I2C_MspInit+0x1ac>)
 800a7b2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800a7b4:	4b23      	ldr	r3, [pc, #140]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7b6:	2224      	movs	r2, #36	; 0x24
 800a7b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7ba:	4b22      	ldr	r3, [pc, #136]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7bc:	2240      	movs	r2, #64	; 0x40
 800a7be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7c0:	4b20      	ldr	r3, [pc, #128]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7c6:	4b1f      	ldr	r3, [pc, #124]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7ce:	4b1d      	ldr	r3, [pc, #116]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7d4:	4b1b      	ldr	r3, [pc, #108]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800a7da:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a7e0:	4b18      	ldr	r3, [pc, #96]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7e6:	4b17      	ldr	r3, [pc, #92]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800a7ec:	4815      	ldr	r0, [pc, #84]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a7ee:	f001 feff 	bl	800c5f0 <HAL_DMA_Init>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800a7f8:	f000 f960 	bl	800aabc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a11      	ldr	r2, [pc, #68]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a800:	639a      	str	r2, [r3, #56]	; 0x38
 800a802:	4a10      	ldr	r2, [pc, #64]	; (800a844 <HAL_I2C_MspInit+0x1a8>)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	2021      	movs	r0, #33	; 0x21
 800a80e:	f001 fcf2 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a812:	2021      	movs	r0, #33	; 0x21
 800a814:	f001 fd09 	bl	800c22a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800a818:	2200      	movs	r2, #0
 800a81a:	2100      	movs	r1, #0
 800a81c:	2022      	movs	r0, #34	; 0x22
 800a81e:	f001 fcea 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a822:	2022      	movs	r0, #34	; 0x22
 800a824:	f001 fd01 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a828:	bf00      	nop
 800a82a:	37e0      	adds	r7, #224	; 0xe0
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40005800 	.word	0x40005800
 800a834:	58024400 	.word	0x58024400
 800a838:	58020400 	.word	0x58020400
 800a83c:	24001534 	.word	0x24001534
 800a840:	40020010 	.word	0x40020010
 800a844:	240015ac 	.word	0x240015ac
 800a848:	40020028 	.word	0x40020028

0800a84c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a852:	f001 f94b 	bl	800baec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800a856:	f000 f85d 	bl	800a914 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a85a:	f7ff fe41 	bl	800a4e0 <MX_GPIO_Init>
	MX_DMA_Init();
 800a85e:	f7ff fe07 	bl	800a470 <MX_DMA_Init>
	MX_I2C2_Init();
 800a862:	f7ff fedb 	bl	800a61c <MX_I2C2_Init>
	MX_SPI1_Init();
 800a866:	f000 f92f 	bl	800aac8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800a86a:	f010 fd67 	bl	801b33c <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 800a86e:	f000 fecf 	bl	800b610 <MX_USART2_UART_Init>
	MX_UART4_Init();
 800a872:	f000 fddb 	bl	800b42c <MX_UART4_Init>
	MX_UART7_Init();
 800a876:	f000 fe27 	bl	800b4c8 <MX_UART7_Init>
	MX_UART8_Init();
 800a87a:	f000 fe73 	bl	800b564 <MX_UART8_Init>
	MX_USART3_UART_Init();
 800a87e:	f000 ff13 	bl	800b6a8 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 800a882:	f000 fcd3 	bl	800b22c <MX_TIM3_Init>
	MX_TIM2_Init();
 800a886:	f000 fc83 	bl	800b190 <MX_TIM2_Init>
	MX_TIM4_Init();
 800a88a:	f000 fd1d 	bl	800b2c8 <MX_TIM4_Init>
	MX_COMP2_Init();
 800a88e:	f7ff fd21 	bl	800a2d4 <MX_COMP2_Init>
	MX_DAC1_Init();
 800a892:	f7ff fd99 	bl	800a3c8 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800a896:	2100      	movs	r1, #0
 800a898:	4817      	ldr	r0, [pc, #92]	; (800a8f8 <main+0xac>)
 800a89a:	f001 fd02 	bl	800c2a2 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 800a89e:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4814      	ldr	r0, [pc, #80]	; (800a8f8 <main+0xac>)
 800a8a8:	f001 fd4d 	bl	800c346 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 800a8ac:	4813      	ldr	r0, [pc, #76]	; (800a8fc <main+0xb0>)
 800a8ae:	f00a fabd 	bl	8014e2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800a8b2:	4813      	ldr	r0, [pc, #76]	; (800a900 <main+0xb4>)
 800a8b4:	f00a faba 	bl	8014e2c <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 800a8b8:	4812      	ldr	r0, [pc, #72]	; (800a904 <main+0xb8>)
 800a8ba:	f001 fb03 	bl	800bec4 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadUart = &huart3;
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <main+0xbc>)
 800a8c0:	607b      	str	r3, [r7, #4]
	config.HeadTimeout = 10;
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 800a8c6:	4b11      	ldr	r3, [pc, #68]	; (800a90c <main+0xc0>)
 800a8c8:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 800a8ce:	4b10      	ldr	r3, [pc, #64]	; (800a910 <main+0xc4>)
 800a8d0:	617b      	str	r3, [r7, #20]

	if(!MotherboardInit(config))
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	1d3b      	adds	r3, r7, #4
 800a8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a8da:	f7f7 fb87 	bl	8001fec <MotherboardInit>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <main+0x9c>
		return 1;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e002      	b.n	800a8ee <main+0xa2>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 800a8e8:	f7f7 fbce 	bl	8002088 <MotherboardTick>
 800a8ec:	e7fc      	b.n	800a8e8 <main+0x9c>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	240014d4 	.word	0x240014d4
 800a8fc:	240017ec 	.word	0x240017ec
 800a900:	240017a0 	.word	0x240017a0
 800a904:	240014a8 	.word	0x240014a8
 800a908:	24001ac4 	.word	0x24001ac4
 800a90c:	240019a4 	.word	0x240019a4
 800a910:	24001624 	.word	0x24001624

0800a914 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800a914:	b580      	push	{r7, lr}
 800a916:	b09c      	sub	sp, #112	; 0x70
 800a918:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800a91a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a91e:	224c      	movs	r2, #76	; 0x4c
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f011 fae8 	bl	801bef8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800a928:	1d3b      	adds	r3, r7, #4
 800a92a:	2220      	movs	r2, #32
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f011 fae2 	bl	801bef8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a934:	2002      	movs	r0, #2
 800a936:	f006 fbd5 	bl	80110e4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a93a:	2300      	movs	r3, #0
 800a93c:	603b      	str	r3, [r7, #0]
 800a93e:	4b35      	ldr	r3, [pc, #212]	; (800aa14 <SystemClock_Config+0x100>)
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	4a34      	ldr	r2, [pc, #208]	; (800aa14 <SystemClock_Config+0x100>)
 800a944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a948:	6193      	str	r3, [r2, #24]
 800a94a:	4b32      	ldr	r3, [pc, #200]	; (800aa14 <SystemClock_Config+0x100>)
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	4b30      	ldr	r3, [pc, #192]	; (800aa18 <SystemClock_Config+0x104>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4a2f      	ldr	r2, [pc, #188]	; (800aa18 <SystemClock_Config+0x104>)
 800a95a:	f043 0301 	orr.w	r3, r3, #1
 800a95e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a960:	4b2d      	ldr	r3, [pc, #180]	; (800aa18 <SystemClock_Config+0x104>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	603b      	str	r3, [r7, #0]
 800a96a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800a96c:	bf00      	nop
 800a96e:	4b29      	ldr	r3, [pc, #164]	; (800aa14 <SystemClock_Config+0x100>)
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a97a:	d1f8      	bne.n	800a96e <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800a97c:	4b27      	ldr	r3, [pc, #156]	; (800aa1c <SystemClock_Config+0x108>)
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	4a26      	ldr	r2, [pc, #152]	; (800aa1c <SystemClock_Config+0x108>)
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800a988:	2322      	movs	r3, #34	; 0x22
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800a98c:	2301      	movs	r3, #1
 800a98e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a990:	2340      	movs	r3, #64	; 0x40
 800a992:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a994:	2301      	movs	r3, #1
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a998:	2302      	movs	r3, #2
 800a99a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a99c:	2300      	movs	r3, #0
 800a99e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 60;
 800a9a4:	233c      	movs	r3, #60	; 0x3c
 800a9a6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800a9ac:	2305      	movs	r3, #5
 800a9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800a9c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f006 fbd7 	bl	8011178 <HAL_RCC_OscConfig>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <SystemClock_Config+0xc0>
		Error_Handler();
 800a9d0:	f000 f874 	bl	800aabc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800a9d4:	233f      	movs	r3, #63	; 0x3f
 800a9d6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a9e8:	2340      	movs	r3, #64	; 0x40
 800a9ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a9f2:	2340      	movs	r3, #64	; 0x40
 800a9f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800a9f6:	1d3b      	adds	r3, r7, #4
 800a9f8:	2104      	movs	r1, #4
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f006 ffea 	bl	80119d4 <HAL_RCC_ClockConfig>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <SystemClock_Config+0xf6>
		Error_Handler();
 800aa06:	f000 f859 	bl	800aabc <Error_Handler>
	}
}
 800aa0a:	bf00      	nop
 800aa0c:	3770      	adds	r7, #112	; 0x70
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	58024800 	.word	0x58024800
 800aa18:	58000400 	.word	0x58000400
 800aa1c:	58024400 	.word	0x58024400

0800aa20 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <HAL_COMP_TriggerCallback+0x20>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d101      	bne.n	800aa36 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 800aa32:	f7f7 fb97 	bl	8002164 <MotherboardOnStrobe>
	}
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	58003810 	.word	0x58003810

0800aa44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a04      	ldr	r2, [pc, #16]	; (800aa64 <HAL_UART_RxCpltCallback+0x20>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d101      	bne.n	800aa5a <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadRecieveComplete();
 800aa56:	f7f7 fb9b 	bl	8002190 <MotherboardOnHeadRecieveComplete>
	}
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40004800 	.word	0x40004800

0800aa68 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a04      	ldr	r2, [pc, #16]	; (800aa88 <HAL_UART_TxCpltCallback+0x20>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d101      	bne.n	800aa7e <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadTransmitComplete();
 800aa7a:	f7f7 fb93 	bl	80021a4 <MotherboardOnHeadTransmitComplete>
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	40004800 	.word	0x40004800

0800aa8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a07      	ldr	r2, [pc, #28]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d101      	bne.n	800aaa2 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 800aa9e:	f7f7 fb8b 	bl	80021b8 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaaa:	d101      	bne.n	800aab0 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 800aaac:	f7f7 fb8e 	bl	80021cc <MotherboardOnImuTimerTick>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	40000400 	.word	0x40000400

0800aabc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aac0:	b672      	cpsid	i
}
 800aac2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800aac4:	e7fe      	b.n	800aac4 <Error_Handler+0x8>
	...

0800aac8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800aacc:	4b28      	ldr	r3, [pc, #160]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aace:	4a29      	ldr	r2, [pc, #164]	; (800ab74 <MX_SPI1_Init+0xac>)
 800aad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800aad2:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aad4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800aad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800aada:	4b25      	ldr	r3, [pc, #148]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aadc:	2200      	movs	r2, #0
 800aade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800aae0:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aae2:	2207      	movs	r2, #7
 800aae4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800aae6:	4b22      	ldr	r3, [pc, #136]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800aaec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800aaee:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aaf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aaf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800aaf6:	4b1e      	ldr	r3, [pc, #120]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800aaf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800aafc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800aafe:	4b1c      	ldr	r3, [pc, #112]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab06:	4b1a      	ldr	r3, [pc, #104]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab0c:	4b18      	ldr	r3, [pc, #96]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab12:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ab1e:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800ab26:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800ab2c:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ab32:	4b0f      	ldr	r3, [pc, #60]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800ab38:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800ab44:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab5c:	4804      	ldr	r0, [pc, #16]	; (800ab70 <MX_SPI1_Init+0xa8>)
 800ab5e:	f008 fe2d 	bl	80137bc <HAL_SPI_Init>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800ab68:	f7ff ffa8 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ab6c:	bf00      	nop
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	24001624 	.word	0x24001624
 800ab74:	40013000 	.word	0x40013000

0800ab78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b0b8      	sub	sp, #224	; 0xe0
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	605a      	str	r2, [r3, #4]
 800ab8a:	609a      	str	r2, [r3, #8]
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab90:	f107 0310 	add.w	r3, r7, #16
 800ab94:	22bc      	movs	r2, #188	; 0xbc
 800ab96:	2100      	movs	r1, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f011 f9ad 	bl	801bef8 <memset>
  if(spiHandle->Instance==SPI1)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a60      	ldr	r2, [pc, #384]	; (800ad24 <HAL_SPI_MspInit+0x1ac>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	f040 80b8 	bne.w	800ad1a <HAL_SPI_MspInit+0x1a2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800abaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800abb0:	2320      	movs	r3, #32
 800abb2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800abb4:	2381      	movs	r3, #129	; 0x81
 800abb6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800abb8:	2302      	movs	r3, #2
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800abbc:	2302      	movs	r3, #2
 800abbe:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800abc0:	2302      	movs	r3, #2
 800abc2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800abc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800abca:	2300      	movs	r3, #0
 800abcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800abd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800abd8:	f107 0310 	add.w	r3, r7, #16
 800abdc:	4618      	mov	r0, r3
 800abde:	f007 fa85 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800abe8:	f7ff ff68 	bl	800aabc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800abec:	4b4e      	ldr	r3, [pc, #312]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800abee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800abf2:	4a4d      	ldr	r2, [pc, #308]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800abf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800abfc:	4b4a      	ldr	r3, [pc, #296]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800abfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac0a:	4b47      	ldr	r3, [pc, #284]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800ac0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac10:	4a45      	ldr	r2, [pc, #276]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac1a:	4b43      	ldr	r3, [pc, #268]	; (800ad28 <HAL_SPI_MspInit+0x1b0>)
 800ac1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	60bb      	str	r3, [r7, #8]
 800ac26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ac28:	23e0      	movs	r3, #224	; 0xe0
 800ac2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ac40:	2305      	movs	r3, #5
 800ac42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4837      	ldr	r0, [pc, #220]	; (800ad2c <HAL_SPI_MspInit+0x1b4>)
 800ac4e:	f003 ff03 	bl	800ea58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800ac52:	4b37      	ldr	r3, [pc, #220]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac54:	4a37      	ldr	r2, [pc, #220]	; (800ad34 <HAL_SPI_MspInit+0x1bc>)
 800ac56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800ac58:	4b35      	ldr	r3, [pc, #212]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac5a:	2226      	movs	r2, #38	; 0x26
 800ac5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac5e:	4b34      	ldr	r3, [pc, #208]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac60:	2240      	movs	r2, #64	; 0x40
 800ac62:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac64:	4b32      	ldr	r3, [pc, #200]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac6a:	4b31      	ldr	r3, [pc, #196]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac70:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac72:	4b2f      	ldr	r3, [pc, #188]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac78:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800ac7e:	4b2c      	ldr	r3, [pc, #176]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ac84:	4b2a      	ldr	r3, [pc, #168]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac8c:	4b28      	ldr	r3, [pc, #160]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800ac92:	4827      	ldr	r0, [pc, #156]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800ac94:	f001 fcac 	bl	800c5f0 <HAL_DMA_Init>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800ac9e:	f7ff ff0d 	bl	800aabc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a22      	ldr	r2, [pc, #136]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800aca6:	679a      	str	r2, [r3, #120]	; 0x78
 800aca8:	4a21      	ldr	r2, [pc, #132]	; (800ad30 <HAL_SPI_MspInit+0x1b8>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800acae:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acb0:	4a22      	ldr	r2, [pc, #136]	; (800ad3c <HAL_SPI_MspInit+0x1c4>)
 800acb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800acb4:	4b20      	ldr	r3, [pc, #128]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acb6:	2225      	movs	r2, #37	; 0x25
 800acb8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acba:	4b1f      	ldr	r3, [pc, #124]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acc0:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800acc6:	4b1c      	ldr	r3, [pc, #112]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800accc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acce:	4b1a      	ldr	r3, [pc, #104]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acd4:	4b18      	ldr	r3, [pc, #96]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800acda:	4b17      	ldr	r3, [pc, #92]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acdc:	2200      	movs	r2, #0
 800acde:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ace0:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800ace2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ace6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ace8:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acea:	2200      	movs	r2, #0
 800acec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800acee:	4812      	ldr	r0, [pc, #72]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800acf0:	f001 fc7e 	bl	800c5f0 <HAL_DMA_Init>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800acfa:	f7ff fedf 	bl	800aabc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a0d      	ldr	r2, [pc, #52]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800ad02:	67da      	str	r2, [r3, #124]	; 0x7c
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <HAL_SPI_MspInit+0x1c0>)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2023      	movs	r0, #35	; 0x23
 800ad10:	f001 fa71 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800ad14:	2023      	movs	r0, #35	; 0x23
 800ad16:	f001 fa88 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	37e0      	adds	r7, #224	; 0xe0
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40013000 	.word	0x40013000
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	58020000 	.word	0x58020000
 800ad30:	240016ac 	.word	0x240016ac
 800ad34:	40020070 	.word	0x40020070
 800ad38:	24001724 	.word	0x24001724
 800ad3c:	40020088 	.word	0x40020088

0800ad40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad46:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <HAL_MspInit+0x30>)
 800ad48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad4c:	4a08      	ldr	r2, [pc, #32]	; (800ad70 <HAL_MspInit+0x30>)
 800ad4e:	f043 0302 	orr.w	r3, r3, #2
 800ad52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <HAL_MspInit+0x30>)
 800ad58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	607b      	str	r3, [r7, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	58024400 	.word	0x58024400

0800ad74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ad78:	e7fe      	b.n	800ad78 <NMI_Handler+0x4>

0800ad7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad7e:	e7fe      	b.n	800ad7e <HardFault_Handler+0x4>

0800ad80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad84:	e7fe      	b.n	800ad84 <MemManage_Handler+0x4>

0800ad86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad86:	b480      	push	{r7}
 800ad88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad8a:	e7fe      	b.n	800ad8a <BusFault_Handler+0x4>

0800ad8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad90:	e7fe      	b.n	800ad90 <UsageFault_Handler+0x4>

0800ad92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ad92:	b480      	push	{r7}
 800ad94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ad96:	bf00      	nop
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ada4:	bf00      	nop
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800adae:	b480      	push	{r7}
 800adb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800adb2:	bf00      	nop
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800adc0:	f000 ff06 	bl	800bbd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800adc4:	bf00      	nop
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800adcc:	4802      	ldr	r0, [pc, #8]	; (800add8 <DMA1_Stream0_IRQHandler+0x10>)
 800adce:	f002 fccf 	bl	800d770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800add2:	bf00      	nop
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	24001534 	.word	0x24001534

0800addc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800ade0:	4802      	ldr	r0, [pc, #8]	; (800adec <DMA1_Stream1_IRQHandler+0x10>)
 800ade2:	f002 fcc5 	bl	800d770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ade6:	bf00      	nop
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	240015ac 	.word	0x240015ac

0800adf0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800adf4:	4802      	ldr	r0, [pc, #8]	; (800ae00 <DMA1_Stream4_IRQHandler+0x10>)
 800adf6:	f002 fcbb 	bl	800d770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800adfa:	bf00      	nop
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	240016ac 	.word	0x240016ac

0800ae04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800ae08:	4802      	ldr	r0, [pc, #8]	; (800ae14 <DMA1_Stream5_IRQHandler+0x10>)
 800ae0a:	f002 fcb1 	bl	800d770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	24001724 	.word	0x24001724

0800ae18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ae1c:	4802      	ldr	r0, [pc, #8]	; (800ae28 <TIM2_IRQHandler+0x10>)
 800ae1e:	f00a f87d 	bl	8014f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ae22:	bf00      	nop
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	240017a0 	.word	0x240017a0

0800ae2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800ae30:	4802      	ldr	r0, [pc, #8]	; (800ae3c <TIM3_IRQHandler+0x10>)
 800ae32:	f00a f873 	bl	8014f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800ae36:	bf00      	nop
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	240017ec 	.word	0x240017ec

0800ae40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800ae44:	4802      	ldr	r0, [pc, #8]	; (800ae50 <TIM4_IRQHandler+0x10>)
 800ae46:	f00a f869 	bl	8014f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800ae4a:	bf00      	nop
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	24001838 	.word	0x24001838

0800ae54 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800ae58:	4802      	ldr	r0, [pc, #8]	; (800ae64 <I2C2_EV_IRQHandler+0x10>)
 800ae5a:	f004 f857 	bl	800ef0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800ae5e:	bf00      	nop
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	240014e8 	.word	0x240014e8

0800ae68 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800ae6c:	4802      	ldr	r0, [pc, #8]	; (800ae78 <I2C2_ER_IRQHandler+0x10>)
 800ae6e:	f004 f867 	bl	800ef40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800ae72:	bf00      	nop
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	240014e8 	.word	0x240014e8

0800ae7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800ae80:	4802      	ldr	r0, [pc, #8]	; (800ae8c <SPI1_IRQHandler+0x10>)
 800ae82:	f009 fc71 	bl	8014768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	24001624 	.word	0x24001624

0800ae90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ae94:	4802      	ldr	r0, [pc, #8]	; (800aea0 <USART3_IRQHandler+0x10>)
 800ae96:	f00a fe49 	bl	8015b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	24001ac4 	.word	0x24001ac4

0800aea4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800aea8:	4802      	ldr	r0, [pc, #8]	; (800aeb4 <UART8_IRQHandler+0x10>)
 800aeaa:	f00a fe3f 	bl	8015b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800aeae:	bf00      	nop
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	240019a4 	.word	0x240019a4

0800aeb8 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aebc:	4802      	ldr	r0, [pc, #8]	; (800aec8 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800aebe:	f005 f898 	bl	800fff2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800aec2:	bf00      	nop
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	2400302c 	.word	0x2400302c

0800aecc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aed0:	4802      	ldr	r0, [pc, #8]	; (800aedc <OTG_FS_IRQHandler+0x10>)
 800aed2:	f005 f88e 	bl	800fff2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	2400302c 	.word	0x2400302c

0800aee0 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800aee4:	4802      	ldr	r0, [pc, #8]	; (800aef0 <COMP1_IRQHandler+0x10>)
 800aee6:	f001 f837 	bl	800bf58 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800aeea:	bf00      	nop
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	240014a8 	.word	0x240014a8

0800aef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
	return 1;
 800aef8:	2301      	movs	r3, #1
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <_kill>:

int _kill(int pid, int sig)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800af0e:	f010 ff7f 	bl	801be10 <__errno>
 800af12:	4603      	mov	r3, r0
 800af14:	2216      	movs	r2, #22
 800af16:	601a      	str	r2, [r3, #0]
	return -1;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <_exit>:

void _exit (int status)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800af2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ffe7 	bl	800af04 <_kill>
	while (1) {}		/* Make sure we hang here */
 800af36:	e7fe      	b.n	800af36 <_exit+0x12>

0800af38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]
 800af48:	e00a      	b.n	800af60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800af4a:	f3af 8000 	nop.w
 800af4e:	4601      	mov	r1, r0
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	60ba      	str	r2, [r7, #8]
 800af56:	b2ca      	uxtb	r2, r1
 800af58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	3301      	adds	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	dbf0      	blt.n	800af4a <_read+0x12>
	}

return len;
 800af68:	687b      	ldr	r3, [r7, #4]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b086      	sub	sp, #24
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e009      	b.n	800af98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	60ba      	str	r2, [r7, #8]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	3301      	adds	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	dbf1      	blt.n	800af84 <_write+0x12>
	}
	return len;
 800afa0:	687b      	ldr	r3, [r7, #4]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <_close>:

int _close(int file)
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
	return -1;
 800afb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800afd2:	605a      	str	r2, [r3, #4]
	return 0;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <_isatty>:

int _isatty(int file)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b083      	sub	sp, #12
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
	return 1;
 800afea:	2301      	movs	r3, #1
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
	return 0;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
	...

0800b014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b01c:	4a14      	ldr	r2, [pc, #80]	; (800b070 <_sbrk+0x5c>)
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <_sbrk+0x60>)
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b028:	4b13      	ldr	r3, [pc, #76]	; (800b078 <_sbrk+0x64>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b030:	4b11      	ldr	r3, [pc, #68]	; (800b078 <_sbrk+0x64>)
 800b032:	4a12      	ldr	r2, [pc, #72]	; (800b07c <_sbrk+0x68>)
 800b034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <_sbrk+0x64>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	429a      	cmp	r2, r3
 800b042:	d207      	bcs.n	800b054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b044:	f010 fee4 	bl	801be10 <__errno>
 800b048:	4603      	mov	r3, r0
 800b04a:	220c      	movs	r2, #12
 800b04c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b052:	e009      	b.n	800b068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b054:	4b08      	ldr	r3, [pc, #32]	; (800b078 <_sbrk+0x64>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <_sbrk+0x64>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4413      	add	r3, r2
 800b062:	4a05      	ldr	r2, [pc, #20]	; (800b078 <_sbrk+0x64>)
 800b064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b066:	68fb      	ldr	r3, [r7, #12]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	24080000 	.word	0x24080000
 800b074:	00000400 	.word	0x00000400
 800b078:	2400179c 	.word	0x2400179c
 800b07c:	24003668 	.word	0x24003668

0800b080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b084:	4b37      	ldr	r3, [pc, #220]	; (800b164 <SystemInit+0xe4>)
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08a:	4a36      	ldr	r2, [pc, #216]	; (800b164 <SystemInit+0xe4>)
 800b08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b094:	4b34      	ldr	r3, [pc, #208]	; (800b168 <SystemInit+0xe8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 030f 	and.w	r3, r3, #15
 800b09c:	2b06      	cmp	r3, #6
 800b09e:	d807      	bhi.n	800b0b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b0a0:	4b31      	ldr	r3, [pc, #196]	; (800b168 <SystemInit+0xe8>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f023 030f 	bic.w	r3, r3, #15
 800b0a8:	4a2f      	ldr	r2, [pc, #188]	; (800b168 <SystemInit+0xe8>)
 800b0aa:	f043 0307 	orr.w	r3, r3, #7
 800b0ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b0b0:	4b2e      	ldr	r3, [pc, #184]	; (800b16c <SystemInit+0xec>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a2d      	ldr	r2, [pc, #180]	; (800b16c <SystemInit+0xec>)
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b0bc:	4b2b      	ldr	r3, [pc, #172]	; (800b16c <SystemInit+0xec>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <SystemInit+0xec>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	4929      	ldr	r1, [pc, #164]	; (800b16c <SystemInit+0xec>)
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <SystemInit+0xf0>)
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b0ce:	4b26      	ldr	r3, [pc, #152]	; (800b168 <SystemInit+0xe8>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0308 	and.w	r3, r3, #8
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b0da:	4b23      	ldr	r3, [pc, #140]	; (800b168 <SystemInit+0xe8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f023 030f 	bic.w	r3, r3, #15
 800b0e2:	4a21      	ldr	r2, [pc, #132]	; (800b168 <SystemInit+0xe8>)
 800b0e4:	f043 0307 	orr.w	r3, r3, #7
 800b0e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b0ea:	4b20      	ldr	r3, [pc, #128]	; (800b16c <SystemInit+0xec>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b0f0:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <SystemInit+0xec>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b0f6:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <SystemInit+0xec>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b0fc:	4b1b      	ldr	r3, [pc, #108]	; (800b16c <SystemInit+0xec>)
 800b0fe:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <SystemInit+0xf4>)
 800b100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b102:	4b1a      	ldr	r3, [pc, #104]	; (800b16c <SystemInit+0xec>)
 800b104:	4a1c      	ldr	r2, [pc, #112]	; (800b178 <SystemInit+0xf8>)
 800b106:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b108:	4b18      	ldr	r3, [pc, #96]	; (800b16c <SystemInit+0xec>)
 800b10a:	4a1c      	ldr	r2, [pc, #112]	; (800b17c <SystemInit+0xfc>)
 800b10c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b10e:	4b17      	ldr	r3, [pc, #92]	; (800b16c <SystemInit+0xec>)
 800b110:	2200      	movs	r2, #0
 800b112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b114:	4b15      	ldr	r3, [pc, #84]	; (800b16c <SystemInit+0xec>)
 800b116:	4a19      	ldr	r2, [pc, #100]	; (800b17c <SystemInit+0xfc>)
 800b118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b11a:	4b14      	ldr	r3, [pc, #80]	; (800b16c <SystemInit+0xec>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b120:	4b12      	ldr	r3, [pc, #72]	; (800b16c <SystemInit+0xec>)
 800b122:	4a16      	ldr	r2, [pc, #88]	; (800b17c <SystemInit+0xfc>)
 800b124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b126:	4b11      	ldr	r3, [pc, #68]	; (800b16c <SystemInit+0xec>)
 800b128:	2200      	movs	r2, #0
 800b12a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <SystemInit+0xec>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a0e      	ldr	r2, [pc, #56]	; (800b16c <SystemInit+0xec>)
 800b132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <SystemInit+0xec>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b13e:	4b10      	ldr	r3, [pc, #64]	; (800b180 <SystemInit+0x100>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	4b10      	ldr	r3, [pc, #64]	; (800b184 <SystemInit+0x104>)
 800b144:	4013      	ands	r3, r2
 800b146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b14a:	d202      	bcs.n	800b152 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b14c:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <SystemInit+0x108>)
 800b14e:	2201      	movs	r2, #1
 800b150:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b152:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <SystemInit+0x10c>)
 800b154:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b158:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b15a:	bf00      	nop
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	e000ed00 	.word	0xe000ed00
 800b168:	52002000 	.word	0x52002000
 800b16c:	58024400 	.word	0x58024400
 800b170:	eaf6ed7f 	.word	0xeaf6ed7f
 800b174:	02020200 	.word	0x02020200
 800b178:	01ff0000 	.word	0x01ff0000
 800b17c:	01010280 	.word	0x01010280
 800b180:	5c001000 	.word	0x5c001000
 800b184:	ffff0000 	.word	0xffff0000
 800b188:	51008108 	.word	0x51008108
 800b18c:	52004000 	.word	0x52004000

0800b190 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b196:	f107 0310 	add.w	r3, r7, #16
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	605a      	str	r2, [r3, #4]
 800b1a0:	609a      	str	r2, [r3, #8]
 800b1a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1a4:	1d3b      	adds	r3, r7, #4
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b1ae:	4b1e      	ldr	r3, [pc, #120]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b1b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 800b1b6:	4b1c      	ldr	r3, [pc, #112]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1b8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b1bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1be:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800b1c4:	4b18      	ldr	r3, [pc, #96]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1c6:	2264      	movs	r2, #100	; 0x64
 800b1c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1ca:	4b17      	ldr	r3, [pc, #92]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1d0:	4b15      	ldr	r3, [pc, #84]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b1d6:	4814      	ldr	r0, [pc, #80]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1d8:	f009 fdd1 	bl	8014d7e <HAL_TIM_Base_Init>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b1e2:	f7ff fc6b 	bl	800aabc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b1e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b1ec:	f107 0310 	add.w	r3, r7, #16
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	480d      	ldr	r0, [pc, #52]	; (800b228 <MX_TIM2_Init+0x98>)
 800b1f4:	f009 ffb2 	bl	801515c <HAL_TIM_ConfigClockSource>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b1fe:	f7ff fc5d 	bl	800aabc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b202:	2300      	movs	r3, #0
 800b204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b20a:	1d3b      	adds	r3, r7, #4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4806      	ldr	r0, [pc, #24]	; (800b228 <MX_TIM2_Init+0x98>)
 800b210:	f00a f9fc 	bl	801560c <HAL_TIMEx_MasterConfigSynchronization>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b21a:	f7ff fc4f 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b21e:	bf00      	nop
 800b220:	3720      	adds	r7, #32
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	240017a0 	.word	0x240017a0

0800b22c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b232:	f107 0310 	add.w	r3, r7, #16
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	605a      	str	r2, [r3, #4]
 800b23c:	609a      	str	r2, [r3, #8]
 800b23e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b240:	1d3b      	adds	r3, r7, #4
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	605a      	str	r2, [r3, #4]
 800b248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b24a:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b24c:	4a1d      	ldr	r2, [pc, #116]	; (800b2c4 <MX_TIM3_Init+0x98>)
 800b24e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800b250:	4b1b      	ldr	r3, [pc, #108]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b252:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b258:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800b25e:	4b18      	ldr	r3, [pc, #96]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b260:	2264      	movs	r2, #100	; 0x64
 800b262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b264:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b266:	2200      	movs	r2, #0
 800b268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b270:	4813      	ldr	r0, [pc, #76]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b272:	f009 fd84 	bl	8014d7e <HAL_TIM_Base_Init>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b27c:	f7ff fc1e 	bl	800aabc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b286:	f107 0310 	add.w	r3, r7, #16
 800b28a:	4619      	mov	r1, r3
 800b28c:	480c      	ldr	r0, [pc, #48]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b28e:	f009 ff65 	bl	801515c <HAL_TIM_ConfigClockSource>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b298:	f7ff fc10 	bl	800aabc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b29c:	2300      	movs	r3, #0
 800b29e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4805      	ldr	r0, [pc, #20]	; (800b2c0 <MX_TIM3_Init+0x94>)
 800b2aa:	f00a f9af 	bl	801560c <HAL_TIMEx_MasterConfigSynchronization>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b2b4:	f7ff fc02 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b2b8:	bf00      	nop
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	240017ec 	.word	0x240017ec
 800b2c4:	40000400 	.word	0x40000400

0800b2c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2ce:	f107 0310 	add.w	r3, r7, #16
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	605a      	str	r2, [r3, #4]
 800b2d8:	609a      	str	r2, [r3, #8]
 800b2da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2dc:	1d3b      	adds	r3, r7, #4
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	605a      	str	r2, [r3, #4]
 800b2e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <MX_TIM4_Init+0x94>)
 800b2e8:	4a1d      	ldr	r2, [pc, #116]	; (800b360 <MX_TIM4_Init+0x98>)
 800b2ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <MX_TIM4_Init+0x94>)
 800b2ee:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b2f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2f4:	4b19      	ldr	r3, [pc, #100]	; (800b35c <MX_TIM4_Init+0x94>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800b2fa:	4b18      	ldr	r3, [pc, #96]	; (800b35c <MX_TIM4_Init+0x94>)
 800b2fc:	2264      	movs	r2, #100	; 0x64
 800b2fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b300:	4b16      	ldr	r3, [pc, #88]	; (800b35c <MX_TIM4_Init+0x94>)
 800b302:	2200      	movs	r2, #0
 800b304:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <MX_TIM4_Init+0x94>)
 800b308:	2200      	movs	r2, #0
 800b30a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b30c:	4813      	ldr	r0, [pc, #76]	; (800b35c <MX_TIM4_Init+0x94>)
 800b30e:	f009 fd36 	bl	8014d7e <HAL_TIM_Base_Init>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800b318:	f7ff fbd0 	bl	800aabc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b322:	f107 0310 	add.w	r3, r7, #16
 800b326:	4619      	mov	r1, r3
 800b328:	480c      	ldr	r0, [pc, #48]	; (800b35c <MX_TIM4_Init+0x94>)
 800b32a:	f009 ff17 	bl	801515c <HAL_TIM_ConfigClockSource>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b334:	f7ff fbc2 	bl	800aabc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b338:	2300      	movs	r3, #0
 800b33a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b340:	1d3b      	adds	r3, r7, #4
 800b342:	4619      	mov	r1, r3
 800b344:	4805      	ldr	r0, [pc, #20]	; (800b35c <MX_TIM4_Init+0x94>)
 800b346:	f00a f961 	bl	801560c <HAL_TIMEx_MasterConfigSynchronization>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800b350:	f7ff fbb4 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b354:	bf00      	nop
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	24001838 	.word	0x24001838
 800b360:	40000800 	.word	0x40000800

0800b364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b374:	d117      	bne.n	800b3a6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b376:	4b2a      	ldr	r3, [pc, #168]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b37c:	4a28      	ldr	r2, [pc, #160]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b386:	4b26      	ldr	r3, [pc, #152]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b394:	2200      	movs	r2, #0
 800b396:	2100      	movs	r1, #0
 800b398:	201c      	movs	r0, #28
 800b39a:	f000 ff2c 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b39e:	201c      	movs	r0, #28
 800b3a0:	f000 ff43 	bl	800c22a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b3a4:	e038      	b.n	800b418 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <HAL_TIM_Base_MspInit+0xc0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d117      	bne.n	800b3e0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b3b0:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3b6:	4a1a      	ldr	r2, [pc, #104]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3b8:	f043 0302 	orr.w	r3, r3, #2
 800b3bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b3c0:	4b17      	ldr	r3, [pc, #92]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	201d      	movs	r0, #29
 800b3d4:	f000 ff0f 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b3d8:	201d      	movs	r0, #29
 800b3da:	f000 ff26 	bl	800c22a <HAL_NVIC_EnableIRQ>
}
 800b3de:	e01b      	b.n	800b418 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a10      	ldr	r2, [pc, #64]	; (800b428 <HAL_TIM_Base_MspInit+0xc4>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d116      	bne.n	800b418 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3f0:	4a0b      	ldr	r2, [pc, #44]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3f2:	f043 0304 	orr.w	r3, r3, #4
 800b3f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <HAL_TIM_Base_MspInit+0xbc>)
 800b3fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b408:	2200      	movs	r2, #0
 800b40a:	2100      	movs	r1, #0
 800b40c:	201e      	movs	r0, #30
 800b40e:	f000 fef2 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b412:	201e      	movs	r0, #30
 800b414:	f000 ff09 	bl	800c22a <HAL_NVIC_EnableIRQ>
}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	58024400 	.word	0x58024400
 800b424:	40000400 	.word	0x40000400
 800b428:	40000800 	.word	0x40000800

0800b42c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b430:	4b22      	ldr	r3, [pc, #136]	; (800b4bc <MX_UART4_Init+0x90>)
 800b432:	4a23      	ldr	r2, [pc, #140]	; (800b4c0 <MX_UART4_Init+0x94>)
 800b434:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 800b436:	4b21      	ldr	r3, [pc, #132]	; (800b4bc <MX_UART4_Init+0x90>)
 800b438:	4a22      	ldr	r2, [pc, #136]	; (800b4c4 <MX_UART4_Init+0x98>)
 800b43a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b43c:	4b1f      	ldr	r3, [pc, #124]	; (800b4bc <MX_UART4_Init+0x90>)
 800b43e:	2200      	movs	r2, #0
 800b440:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b442:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <MX_UART4_Init+0x90>)
 800b444:	2200      	movs	r2, #0
 800b446:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b448:	4b1c      	ldr	r3, [pc, #112]	; (800b4bc <MX_UART4_Init+0x90>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b44e:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <MX_UART4_Init+0x90>)
 800b450:	220c      	movs	r2, #12
 800b452:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b454:	4b19      	ldr	r3, [pc, #100]	; (800b4bc <MX_UART4_Init+0x90>)
 800b456:	2200      	movs	r2, #0
 800b458:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b45a:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <MX_UART4_Init+0x90>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b460:	4b16      	ldr	r3, [pc, #88]	; (800b4bc <MX_UART4_Init+0x90>)
 800b462:	2200      	movs	r2, #0
 800b464:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b466:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <MX_UART4_Init+0x90>)
 800b468:	2200      	movs	r2, #0
 800b46a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b46c:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <MX_UART4_Init+0x90>)
 800b46e:	2200      	movs	r2, #0
 800b470:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b472:	4812      	ldr	r0, [pc, #72]	; (800b4bc <MX_UART4_Init+0x90>)
 800b474:	f00a f976 	bl	8015764 <HAL_UART_Init>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800b47e:	f7ff fb1d 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b482:	2100      	movs	r1, #0
 800b484:	480d      	ldr	r0, [pc, #52]	; (800b4bc <MX_UART4_Init+0x90>)
 800b486:	f00c fe85 	bl	8018194 <HAL_UARTEx_SetTxFifoThreshold>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800b490:	f7ff fb14 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b494:	2100      	movs	r1, #0
 800b496:	4809      	ldr	r0, [pc, #36]	; (800b4bc <MX_UART4_Init+0x90>)
 800b498:	f00c feba 	bl	8018210 <HAL_UARTEx_SetRxFifoThreshold>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800b4a2:	f7ff fb0b 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800b4a6:	4805      	ldr	r0, [pc, #20]	; (800b4bc <MX_UART4_Init+0x90>)
 800b4a8:	f00c fe3b 	bl	8018122 <HAL_UARTEx_DisableFifoMode>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800b4b2:	f7ff fb03 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b4b6:	bf00      	nop
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	24001884 	.word	0x24001884
 800b4c0:	40004c00 	.word	0x40004c00
 800b4c4:	001312d0 	.word	0x001312d0

0800b4c8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800b4cc:	4b22      	ldr	r3, [pc, #136]	; (800b558 <MX_UART7_Init+0x90>)
 800b4ce:	4a23      	ldr	r2, [pc, #140]	; (800b55c <MX_UART7_Init+0x94>)
 800b4d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800b4d2:	4b21      	ldr	r3, [pc, #132]	; (800b558 <MX_UART7_Init+0x90>)
 800b4d4:	4a22      	ldr	r2, [pc, #136]	; (800b560 <MX_UART7_Init+0x98>)
 800b4d6:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800b4d8:	4b1f      	ldr	r3, [pc, #124]	; (800b558 <MX_UART7_Init+0x90>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800b4de:	4b1e      	ldr	r3, [pc, #120]	; (800b558 <MX_UART7_Init+0x90>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800b4e4:	4b1c      	ldr	r3, [pc, #112]	; (800b558 <MX_UART7_Init+0x90>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <MX_UART7_Init+0x90>)
 800b4ec:	220c      	movs	r2, #12
 800b4ee:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <MX_UART7_Init+0x90>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b4f6:	4b18      	ldr	r3, [pc, #96]	; (800b558 <MX_UART7_Init+0x90>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b4fc:	4b16      	ldr	r3, [pc, #88]	; (800b558 <MX_UART7_Init+0x90>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <MX_UART7_Init+0x90>)
 800b504:	2200      	movs	r2, #0
 800b506:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b508:	4b13      	ldr	r3, [pc, #76]	; (800b558 <MX_UART7_Init+0x90>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b50e:	4812      	ldr	r0, [pc, #72]	; (800b558 <MX_UART7_Init+0x90>)
 800b510:	f00a f928 	bl	8015764 <HAL_UART_Init>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800b51a:	f7ff facf 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b51e:	2100      	movs	r1, #0
 800b520:	480d      	ldr	r0, [pc, #52]	; (800b558 <MX_UART7_Init+0x90>)
 800b522:	f00c fe37 	bl	8018194 <HAL_UARTEx_SetTxFifoThreshold>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800b52c:	f7ff fac6 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b530:	2100      	movs	r1, #0
 800b532:	4809      	ldr	r0, [pc, #36]	; (800b558 <MX_UART7_Init+0x90>)
 800b534:	f00c fe6c 	bl	8018210 <HAL_UARTEx_SetRxFifoThreshold>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800b53e:	f7ff fabd 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800b542:	4805      	ldr	r0, [pc, #20]	; (800b558 <MX_UART7_Init+0x90>)
 800b544:	f00c fded 	bl	8018122 <HAL_UARTEx_DisableFifoMode>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800b54e:	f7ff fab5 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800b552:	bf00      	nop
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	24001914 	.word	0x24001914
 800b55c:	40007800 	.word	0x40007800
 800b560:	001312d0 	.word	0x001312d0

0800b564 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800b568:	4b26      	ldr	r3, [pc, #152]	; (800b604 <MX_UART8_Init+0xa0>)
 800b56a:	4a27      	ldr	r2, [pc, #156]	; (800b608 <MX_UART8_Init+0xa4>)
 800b56c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 800b56e:	4b25      	ldr	r3, [pc, #148]	; (800b604 <MX_UART8_Init+0xa0>)
 800b570:	4a26      	ldr	r2, [pc, #152]	; (800b60c <MX_UART8_Init+0xa8>)
 800b572:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 800b574:	4b23      	ldr	r3, [pc, #140]	; (800b604 <MX_UART8_Init+0xa0>)
 800b576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b57a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b57c:	4b21      	ldr	r3, [pc, #132]	; (800b604 <MX_UART8_Init+0xa0>)
 800b57e:	2200      	movs	r2, #0
 800b580:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 800b582:	4b20      	ldr	r3, [pc, #128]	; (800b604 <MX_UART8_Init+0xa0>)
 800b584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b588:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b58a:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <MX_UART8_Init+0xa0>)
 800b58c:	220c      	movs	r2, #12
 800b58e:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b590:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <MX_UART8_Init+0xa0>)
 800b592:	2200      	movs	r2, #0
 800b594:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b596:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <MX_UART8_Init+0xa0>)
 800b598:	2200      	movs	r2, #0
 800b59a:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b59c:	4b19      	ldr	r3, [pc, #100]	; (800b604 <MX_UART8_Init+0xa0>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b5a2:	4b18      	ldr	r3, [pc, #96]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b5a8:	4b16      	ldr	r3, [pc, #88]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5aa:	2220      	movs	r2, #32
 800b5ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b5ae:	4b15      	ldr	r3, [pc, #84]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b5b6:	4813      	ldr	r0, [pc, #76]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5b8:	f00a f8d4 	bl	8015764 <HAL_UART_Init>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 800b5c2:	f7ff fa7b 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b5c6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b5ca:	480e      	ldr	r0, [pc, #56]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5cc:	f00c fde2 	bl	8018194 <HAL_UARTEx_SetTxFifoThreshold>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <MX_UART8_Init+0x76>
  {
    Error_Handler();
 800b5d6:	f7ff fa71 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b5da:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b5de:	4809      	ldr	r0, [pc, #36]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5e0:	f00c fe16 	bl	8018210 <HAL_UARTEx_SetRxFifoThreshold>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800b5ea:	f7ff fa67 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800b5ee:	4805      	ldr	r0, [pc, #20]	; (800b604 <MX_UART8_Init+0xa0>)
 800b5f0:	f00c fd5c 	bl	80180ac <HAL_UARTEx_EnableFifoMode>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800b5fa:	f7ff fa5f 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800b5fe:	bf00      	nop
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	240019a4 	.word	0x240019a4
 800b608:	40007c00 	.word	0x40007c00
 800b60c:	001312d0 	.word	0x001312d0

0800b610 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b614:	4b22      	ldr	r3, [pc, #136]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b616:	4a23      	ldr	r2, [pc, #140]	; (800b6a4 <MX_USART2_UART_Init+0x94>)
 800b618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b61a:	4b21      	ldr	r3, [pc, #132]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b61c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b622:	4b1f      	ldr	r3, [pc, #124]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b624:	2200      	movs	r2, #0
 800b626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b628:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b62e:	4b1c      	ldr	r3, [pc, #112]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b630:	2200      	movs	r2, #0
 800b632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b634:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b636:	220c      	movs	r2, #12
 800b638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b63a:	4b19      	ldr	r3, [pc, #100]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b640:	4b17      	ldr	r3, [pc, #92]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b642:	2200      	movs	r2, #0
 800b644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b646:	4b16      	ldr	r3, [pc, #88]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b648:	2200      	movs	r2, #0
 800b64a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b64c:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b64e:	2200      	movs	r2, #0
 800b650:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b654:	2200      	movs	r2, #0
 800b656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b658:	4811      	ldr	r0, [pc, #68]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b65a:	f00a f883 	bl	8015764 <HAL_UART_Init>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800b664:	f7ff fa2a 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b668:	2100      	movs	r1, #0
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b66c:	f00c fd92 	bl	8018194 <HAL_UARTEx_SetTxFifoThreshold>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800b676:	f7ff fa21 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b67a:	2100      	movs	r1, #0
 800b67c:	4808      	ldr	r0, [pc, #32]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b67e:	f00c fdc7 	bl	8018210 <HAL_UARTEx_SetRxFifoThreshold>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800b688:	f7ff fa18 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800b68c:	4804      	ldr	r0, [pc, #16]	; (800b6a0 <MX_USART2_UART_Init+0x90>)
 800b68e:	f00c fd48 	bl	8018122 <HAL_UARTEx_DisableFifoMode>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800b698:	f7ff fa10 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b69c:	bf00      	nop
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	24001a34 	.word	0x24001a34
 800b6a4:	40004400 	.word	0x40004400

0800b6a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b6ac:	4b26      	ldr	r3, [pc, #152]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6ae:	4a27      	ldr	r2, [pc, #156]	; (800b74c <MX_USART3_UART_Init+0xa4>)
 800b6b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800b6b2:	4b25      	ldr	r3, [pc, #148]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b6b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800b6ba:	4b23      	ldr	r3, [pc, #140]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b6c0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b6c2:	4b21      	ldr	r3, [pc, #132]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800b6c8:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b6d0:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6d2:	220c      	movs	r2, #12
 800b6d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6d6:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6dc:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b6e2:	4b19      	ldr	r3, [pc, #100]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b6e8:	4b17      	ldr	r3, [pc, #92]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b6f4:	4b14      	ldr	r3, [pc, #80]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6fa:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b6fc:	4812      	ldr	r0, [pc, #72]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b6fe:	f00a f831 	bl	8015764 <HAL_UART_Init>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 800b708:	f7ff f9d8 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b70c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b710:	480d      	ldr	r0, [pc, #52]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b712:	f00c fd3f 	bl	8018194 <HAL_UARTEx_SetTxFifoThreshold>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 800b71c:	f7ff f9ce 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b720:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b724:	4808      	ldr	r0, [pc, #32]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b726:	f00c fd73 	bl	8018210 <HAL_UARTEx_SetRxFifoThreshold>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b730:	f7ff f9c4 	bl	800aabc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800b734:	4804      	ldr	r0, [pc, #16]	; (800b748 <MX_USART3_UART_Init+0xa0>)
 800b736:	f00c fcb9 	bl	80180ac <HAL_UARTEx_EnableFifoMode>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800b740:	f7ff f9bc 	bl	800aabc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b744:	bf00      	nop
 800b746:	bd80      	pop	{r7, pc}
 800b748:	24001ac4 	.word	0x24001ac4
 800b74c:	40004800 	.word	0x40004800

0800b750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b0c0      	sub	sp, #256	; 0x100
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b758:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	609a      	str	r2, [r3, #8]
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b76c:	22bc      	movs	r2, #188	; 0xbc
 800b76e:	2100      	movs	r1, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f010 fbc1 	bl	801bef8 <memset>
  if(uartHandle->Instance==UART4)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4abe      	ldr	r2, [pc, #760]	; (800ba74 <HAL_UART_MspInit+0x324>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d142      	bne.n	800b806 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800b780:	2302      	movs	r3, #2
 800b782:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b784:	2300      	movs	r3, #0
 800b786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b78a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b78e:	4618      	mov	r0, r3
 800b790:	f006 fcac 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b79a:	f7ff f98f 	bl	800aabc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b79e:	4bb6      	ldr	r3, [pc, #728]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b7a4:	4ab4      	ldr	r2, [pc, #720]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b7ae:	4bb2      	ldr	r3, [pc, #712]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b7b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7bc:	4bae      	ldr	r3, [pc, #696]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7c2:	4aad      	ldr	r2, [pc, #692]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7c4:	f043 0301 	orr.w	r3, r3, #1
 800b7c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b7cc:	4baa      	ldr	r3, [pc, #680]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b7ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b7f2:	2308      	movs	r3, #8
 800b7f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	489f      	ldr	r0, [pc, #636]	; (800ba7c <HAL_UART_MspInit+0x32c>)
 800b800:	f003 f92a 	bl	800ea58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b804:	e130      	b.n	800ba68 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a9d      	ldr	r2, [pc, #628]	; (800ba80 <HAL_UART_MspInit+0x330>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d143      	bne.n	800b898 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800b810:	2302      	movs	r3, #2
 800b812:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b814:	2300      	movs	r3, #0
 800b816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b81a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b81e:	4618      	mov	r0, r3
 800b820:	f006 fc64 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800b82a:	f7ff f947 	bl	800aabc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800b82e:	4b92      	ldr	r3, [pc, #584]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b834:	4a90      	ldr	r2, [pc, #576]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b83a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b83e:	4b8e      	ldr	r3, [pc, #568]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b84c:	4b8a      	ldr	r3, [pc, #552]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b84e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b852:	4a89      	ldr	r2, [pc, #548]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b854:	f043 0310 	orr.w	r3, r3, #16
 800b858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b85c:	4b86      	ldr	r3, [pc, #536]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b85e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b862:	f003 0310 	and.w	r3, r3, #16
 800b866:	623b      	str	r3, [r7, #32]
 800b868:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800b86a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b86e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b872:	2302      	movs	r3, #2
 800b874:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b87e:	2300      	movs	r3, #0
 800b880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800b884:	2307      	movs	r3, #7
 800b886:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b88a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b88e:	4619      	mov	r1, r3
 800b890:	487c      	ldr	r0, [pc, #496]	; (800ba84 <HAL_UART_MspInit+0x334>)
 800b892:	f003 f8e1 	bl	800ea58 <HAL_GPIO_Init>
}
 800b896:	e0e7      	b.n	800ba68 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a7a      	ldr	r2, [pc, #488]	; (800ba88 <HAL_UART_MspInit+0x338>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d14a      	bne.n	800b938 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b8ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f006 fc1b 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800b8bc:	f7ff f8fe 	bl	800aabc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800b8c0:	4b6d      	ldr	r3, [pc, #436]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8c6:	4a6c      	ldr	r2, [pc, #432]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b8d0:	4b69      	ldr	r3, [pc, #420]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b8de:	4b66      	ldr	r3, [pc, #408]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8e4:	4a64      	ldr	r2, [pc, #400]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8e6:	f043 0310 	orr.w	r3, r3, #16
 800b8ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8ee:	4b62      	ldr	r3, [pc, #392]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b8f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8f4:	f003 0310 	and.w	r3, r3, #16
 800b8f8:	61bb      	str	r3, [r7, #24]
 800b8fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b902:	2302      	movs	r3, #2
 800b904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b908:	2300      	movs	r3, #0
 800b90a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800b914:	2308      	movs	r3, #8
 800b916:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b91a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b91e:	4619      	mov	r1, r3
 800b920:	4858      	ldr	r0, [pc, #352]	; (800ba84 <HAL_UART_MspInit+0x334>)
 800b922:	f003 f899 	bl	800ea58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800b926:	2200      	movs	r2, #0
 800b928:	2100      	movs	r1, #0
 800b92a:	2053      	movs	r0, #83	; 0x53
 800b92c:	f000 fc63 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800b930:	2053      	movs	r0, #83	; 0x53
 800b932:	f000 fc7a 	bl	800c22a <HAL_NVIC_EnableIRQ>
}
 800b936:	e097      	b.n	800ba68 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a53      	ldr	r2, [pc, #332]	; (800ba8c <HAL_UART_MspInit+0x33c>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d142      	bne.n	800b9c8 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800b942:	2302      	movs	r3, #2
 800b944:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b946:	2300      	movs	r3, #0
 800b948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b94c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b950:	4618      	mov	r0, r3
 800b952:	f006 fbcb 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <HAL_UART_MspInit+0x210>
      Error_Handler();
 800b95c:	f7ff f8ae 	bl	800aabc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b960:	4b45      	ldr	r3, [pc, #276]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b966:	4a44      	ldr	r2, [pc, #272]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b96c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b970:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b97e:	4b3e      	ldr	r3, [pc, #248]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b984:	4a3c      	ldr	r2, [pc, #240]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b98e:	4b3a      	ldr	r3, [pc, #232]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b99c:	230c      	movs	r3, #12
 800b99e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b9b4:	2307      	movs	r3, #7
 800b9b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b9be:	4619      	mov	r1, r3
 800b9c0:	482e      	ldr	r0, [pc, #184]	; (800ba7c <HAL_UART_MspInit+0x32c>)
 800b9c2:	f003 f849 	bl	800ea58 <HAL_GPIO_Init>
}
 800b9c6:	e04f      	b.n	800ba68 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a30      	ldr	r2, [pc, #192]	; (800ba90 <HAL_UART_MspInit+0x340>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d14a      	bne.n	800ba68 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b9dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f006 fb83 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800b9ec:	f7ff f866 	bl	800aabc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b9f0:	4b21      	ldr	r3, [pc, #132]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b9f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9f6:	4a20      	ldr	r2, [pc, #128]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800b9f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ba00:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800ba02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ba0e:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800ba10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba14:	4a18      	ldr	r2, [pc, #96]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800ba16:	f043 0308 	orr.w	r3, r3, #8
 800ba1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <HAL_UART_MspInit+0x328>)
 800ba20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba24:	f003 0308 	and.w	r3, r3, #8
 800ba28:	60bb      	str	r3, [r7, #8]
 800ba2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ba2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ba30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba34:	2302      	movs	r3, #2
 800ba36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ba46:	2307      	movs	r3, #7
 800ba48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ba4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ba50:	4619      	mov	r1, r3
 800ba52:	4810      	ldr	r0, [pc, #64]	; (800ba94 <HAL_UART_MspInit+0x344>)
 800ba54:	f003 f800 	bl	800ea58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	2027      	movs	r0, #39	; 0x27
 800ba5e:	f000 fbca 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ba62:	2027      	movs	r0, #39	; 0x27
 800ba64:	f000 fbe1 	bl	800c22a <HAL_NVIC_EnableIRQ>
}
 800ba68:	bf00      	nop
 800ba6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40004c00 	.word	0x40004c00
 800ba78:	58024400 	.word	0x58024400
 800ba7c:	58020000 	.word	0x58020000
 800ba80:	40007800 	.word	0x40007800
 800ba84:	58021000 	.word	0x58021000
 800ba88:	40007c00 	.word	0x40007c00
 800ba8c:	40004400 	.word	0x40004400
 800ba90:	40004800 	.word	0x40004800
 800ba94:	58020c00 	.word	0x58020c00

0800ba98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800ba98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ba9c:	f7ff faf0 	bl	800b080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800baa0:	480c      	ldr	r0, [pc, #48]	; (800bad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800baa2:	490d      	ldr	r1, [pc, #52]	; (800bad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800baa4:	4a0d      	ldr	r2, [pc, #52]	; (800badc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800baa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800baa8:	e002      	b.n	800bab0 <LoopCopyDataInit>

0800baaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800baaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800baac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800baae:	3304      	adds	r3, #4

0800bab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bab4:	d3f9      	bcc.n	800baaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bab6:	4a0a      	ldr	r2, [pc, #40]	; (800bae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800bab8:	4c0a      	ldr	r4, [pc, #40]	; (800bae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800baba:	2300      	movs	r3, #0
  b LoopFillZerobss
 800babc:	e001      	b.n	800bac2 <LoopFillZerobss>

0800babe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800babe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bac0:	3204      	adds	r2, #4

0800bac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bac4:	d3fb      	bcc.n	800babe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bac6:	f010 f9bb 	bl	801be40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800baca:	f7fe febf 	bl	800a84c <main>
  bx  lr
 800bace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bad0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800bad4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800bad8:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 800badc:	08037be4 	.word	0x08037be4
  ldr r2, =_sbss
 800bae0:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 800bae4:	24003668 	.word	0x24003668

0800bae8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bae8:	e7fe      	b.n	800bae8 <ADC3_IRQHandler>
	...

0800baec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800baf2:	2003      	movs	r0, #3
 800baf4:	f000 fb74 	bl	800c1e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800baf8:	f006 f922 	bl	8011d40 <HAL_RCC_GetSysClockFreq>
 800bafc:	4602      	mov	r2, r0
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <HAL_Init+0x68>)
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	0a1b      	lsrs	r3, r3, #8
 800bb04:	f003 030f 	and.w	r3, r3, #15
 800bb08:	4913      	ldr	r1, [pc, #76]	; (800bb58 <HAL_Init+0x6c>)
 800bb0a:	5ccb      	ldrb	r3, [r1, r3]
 800bb0c:	f003 031f 	and.w	r3, r3, #31
 800bb10:	fa22 f303 	lsr.w	r3, r2, r3
 800bb14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <HAL_Init+0x68>)
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	4a0e      	ldr	r2, [pc, #56]	; (800bb58 <HAL_Init+0x6c>)
 800bb20:	5cd3      	ldrb	r3, [r2, r3]
 800bb22:	f003 031f 	and.w	r3, r3, #31
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2c:	4a0b      	ldr	r2, [pc, #44]	; (800bb5c <HAL_Init+0x70>)
 800bb2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bb30:	4a0b      	ldr	r2, [pc, #44]	; (800bb60 <HAL_Init+0x74>)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bb36:	200f      	movs	r0, #15
 800bb38:	f000 f814 	bl	800bb64 <HAL_InitTick>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e002      	b.n	800bb4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bb46:	f7ff f8fb 	bl	800ad40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	58024400 	.word	0x58024400
 800bb58:	08037ab8 	.word	0x08037ab8
 800bb5c:	24000004 	.word	0x24000004
 800bb60:	24000000 	.word	0x24000000

0800bb64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <HAL_InitTick+0x60>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e021      	b.n	800bbbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800bb78:	4b13      	ldr	r3, [pc, #76]	; (800bbc8 <HAL_InitTick+0x64>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <HAL_InitTick+0x60>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	4619      	mov	r1, r3
 800bb82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb86:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 fb59 	bl	800c246 <HAL_SYSTICK_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e00e      	b.n	800bbbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b0f      	cmp	r3, #15
 800bba2:	d80a      	bhi.n	800bbba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bba4:	2200      	movs	r2, #0
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbac:	f000 fb23 	bl	800c1f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bbb0:	4a06      	ldr	r2, [pc, #24]	; (800bbcc <HAL_InitTick+0x68>)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e000      	b.n	800bbbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	2400000c 	.word	0x2400000c
 800bbc8:	24000000 	.word	0x24000000
 800bbcc:	24000008 	.word	0x24000008

0800bbd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bbd4:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <HAL_IncTick+0x20>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <HAL_IncTick+0x24>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4413      	add	r3, r2
 800bbe0:	4a04      	ldr	r2, [pc, #16]	; (800bbf4 <HAL_IncTick+0x24>)
 800bbe2:	6013      	str	r3, [r2, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	2400000c 	.word	0x2400000c
 800bbf4:	24001b54 	.word	0x24001b54

0800bbf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	af00      	add	r7, sp, #0
  return uwTick;
 800bbfc:	4b03      	ldr	r3, [pc, #12]	; (800bc0c <HAL_GetTick+0x14>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	24001b54 	.word	0x24001b54

0800bc10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc18:	f7ff ffee 	bl	800bbf8 <HAL_GetTick>
 800bc1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc28:	d005      	beq.n	800bc36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <HAL_Delay+0x44>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bc36:	bf00      	nop
 800bc38:	f7ff ffde 	bl	800bbf8 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d8f7      	bhi.n	800bc38 <HAL_Delay+0x28>
  {
  }
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	2400000c 	.word	0x2400000c

0800bc58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bc5c:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <HAL_GetREVID+0x14>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	0c1b      	lsrs	r3, r3, #16
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	5c001000 	.word	0x5c001000

0800bc70 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d102      	bne.n	800bc8c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	77fb      	strb	r3, [r7, #31]
 800bc8a:	e10e      	b.n	800beaa <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc9a:	d102      	bne.n	800bca2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e103      	b.n	800beaa <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d109      	bne.n	800bcc2 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fe fb35 	bl	800a32c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bcd6:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800bcdc:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800bce2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800bce8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b6e      	ldr	r3, [pc, #440]	; (800beb4 <HAL_COMP_Init+0x244>)
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	6812      	ldr	r2, [r2, #0]
 800bd00:	6979      	ldr	r1, [r7, #20]
 800bd02:	430b      	orrs	r3, r1
 800bd04:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2b10      	cmp	r3, #16
 800bd0c:	d108      	bne.n	800bd20 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f042 0210 	orr.w	r2, r2, #16
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e007      	b.n	800bd30 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f022 0210 	bic.w	r2, r2, #16
 800bd2e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d016      	beq.n	800bd6c <HAL_COMP_Init+0xfc>
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d013      	beq.n	800bd6c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bd44:	4b5c      	ldr	r3, [pc, #368]	; (800beb8 <HAL_COMP_Init+0x248>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	099b      	lsrs	r3, r3, #6
 800bd4a:	4a5c      	ldr	r2, [pc, #368]	; (800bebc <HAL_COMP_Init+0x24c>)
 800bd4c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd50:	099b      	lsrs	r3, r3, #6
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800bd5e:	e002      	b.n	800bd66 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f9      	bne.n	800bd60 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a53      	ldr	r2, [pc, #332]	; (800bec0 <HAL_COMP_Init+0x250>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d102      	bne.n	800bd7c <HAL_COMP_Init+0x10c>
 800bd76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd7a:	e001      	b.n	800bd80 <HAL_COMP_Init+0x110>
 800bd7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd80:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a1b      	ldr	r3, [r3, #32]
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d06d      	beq.n	800be6a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	f003 0310 	and.w	r3, r3, #16
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800bd9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	600b      	str	r3, [r1, #0]
 800bdaa:	e008      	b.n	800bdbe <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800bdac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bdba:	4013      	ands	r3, r2
 800bdbc:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d008      	beq.n	800bddc <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800bdca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	604b      	str	r3, [r1, #4]
 800bdda:	e008      	b.n	800bdee <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800bddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	43db      	mvns	r3, r3
 800bde6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bdea:	4013      	ands	r3, r2
 800bdec:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800bdee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00a      	beq.n	800be1a <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800be04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800be0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	4313      	orrs	r3, r2
 800be14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800be18:	e00a      	b.n	800be30 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800be1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	43db      	mvns	r3, r3
 800be26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be2a:	4013      	ands	r3, r2
 800be2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800be3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800be44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800be50:	e021      	b.n	800be96 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800be52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	43db      	mvns	r3, r3
 800be5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be62:	4013      	ands	r3, r2
 800be64:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800be68:	e015      	b.n	800be96 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800be6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	43db      	mvns	r3, r3
 800be76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be7a:	4013      	ands	r3, r2
 800be7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800be80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be84:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	43db      	mvns	r3, r3
 800be8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be90:	4013      	ands	r3, r2
 800be92:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d103      	bne.n	800beaa <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800beaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3720      	adds	r7, #32
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	f0e8cce1 	.word	0xf0e8cce1
 800beb8:	24000000 	.word	0x24000000
 800bebc:	053e2d63 	.word	0x053e2d63
 800bec0:	5800380c 	.word	0x5800380c

0800bec4 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800becc:	2300      	movs	r3, #0
 800bece:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d102      	bne.n	800bee0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	73fb      	strb	r3, [r7, #15]
 800bede:	e030      	b.n	800bf42 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beee:	d102      	bne.n	800bef6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e025      	b.n	800bf42 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d11d      	bne.n	800bf3e <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f042 0201 	orr.w	r2, r2, #1
 800bf10:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2202      	movs	r2, #2
 800bf16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf1a:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <HAL_COMP_Start+0x8c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	099b      	lsrs	r3, r3, #6
 800bf20:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <HAL_COMP_Start+0x90>)
 800bf22:	fba2 2303 	umull	r2, r3, r2, r3
 800bf26:	099b      	lsrs	r3, r3, #6
 800bf28:	3301      	adds	r3, #1
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800bf2e:	e002      	b.n	800bf36 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f9      	bne.n	800bf30 <HAL_COMP_Start+0x6c>
 800bf3c:	e001      	b.n	800bf42 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	24000000 	.word	0x24000000
 800bf54:	053e2d63 	.word	0x053e2d63

0800bf58 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a33      	ldr	r2, [pc, #204]	; (800c034 <HAL_COMP_IRQHandler+0xdc>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d102      	bne.n	800bf70 <HAL_COMP_IRQHandler+0x18>
 800bf6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf6e:	e001      	b.n	800bf74 <HAL_COMP_IRQHandler+0x1c>
 800bf70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf74:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800bf76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4013      	ands	r3, r2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d014      	beq.n	800bfb0 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800bf86:	4b2c      	ldr	r3, [pc, #176]	; (800c038 <HAL_COMP_IRQHandler+0xe0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0310 	and.w	r3, r3, #16
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800bf92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf96:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800bf9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800bf9e:	e004      	b.n	800bfaa <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800bfa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7fe fd38 	bl	800aa20 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfba:	2b40      	cmp	r3, #64	; 0x40
 800bfbc:	d136      	bne.n	800c02c <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800bfbe:	4b1f      	ldr	r3, [pc, #124]	; (800c03c <HAL_COMP_IRQHandler+0xe4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfca:	d101      	bne.n	800bfd0 <HAL_COMP_IRQHandler+0x78>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e000      	b.n	800bfd2 <HAL_COMP_IRQHandler+0x7a>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00b      	beq.n	800bfee <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800bfd6:	4b19      	ldr	r3, [pc, #100]	; (800c03c <HAL_COMP_IRQHandler+0xe4>)
 800bfd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bfdc:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfec:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <HAL_COMP_IRQHandler+0xe4>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bffa:	d101      	bne.n	800c000 <HAL_COMP_IRQHandler+0xa8>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e000      	b.n	800c002 <HAL_COMP_IRQHandler+0xaa>
 800c000:	2300      	movs	r3, #0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d00b      	beq.n	800c01e <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800c006:	4b0d      	ldr	r3, [pc, #52]	; (800c03c <HAL_COMP_IRQHandler+0xe4>)
 800c008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c00c:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c01c:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe fcfa 	bl	800aa20 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800c02c:	bf00      	nop
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	5800380c 	.word	0x5800380c
 800c038:	58003810 	.word	0x58003810
 800c03c:	58003800 	.word	0x58003800

0800c040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <__NVIC_SetPriorityGrouping+0x40>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c05c:	4013      	ands	r3, r2
 800c05e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <__NVIC_SetPriorityGrouping+0x44>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c06e:	4a04      	ldr	r2, [pc, #16]	; (800c080 <__NVIC_SetPriorityGrouping+0x40>)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	60d3      	str	r3, [r2, #12]
}
 800c074:	bf00      	nop
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000ed00 	.word	0xe000ed00
 800c084:	05fa0000 	.word	0x05fa0000

0800c088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c08c:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <__NVIC_GetPriorityGrouping+0x18>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	f003 0307 	and.w	r3, r3, #7
}
 800c096:	4618      	mov	r0, r3
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	e000ed00 	.word	0xe000ed00

0800c0a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	db0b      	blt.n	800c0ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	f003 021f 	and.w	r2, r3, #31
 800c0bc:	4907      	ldr	r1, [pc, #28]	; (800c0dc <__NVIC_EnableIRQ+0x38>)
 800c0be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	fa00 f202 	lsl.w	r2, r0, r2
 800c0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	e000e100 	.word	0xe000e100

0800c0e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db0a      	blt.n	800c10a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	490c      	ldr	r1, [pc, #48]	; (800c12c <__NVIC_SetPriority+0x4c>)
 800c0fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0fe:	0112      	lsls	r2, r2, #4
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	440b      	add	r3, r1
 800c104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c108:	e00a      	b.n	800c120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4908      	ldr	r1, [pc, #32]	; (800c130 <__NVIC_SetPriority+0x50>)
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	f003 030f 	and.w	r3, r3, #15
 800c116:	3b04      	subs	r3, #4
 800c118:	0112      	lsls	r2, r2, #4
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	440b      	add	r3, r1
 800c11e:	761a      	strb	r2, [r3, #24]
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	e000e100 	.word	0xe000e100
 800c130:	e000ed00 	.word	0xe000ed00

0800c134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c134:	b480      	push	{r7}
 800c136:	b089      	sub	sp, #36	; 0x24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f1c3 0307 	rsb	r3, r3, #7
 800c14e:	2b04      	cmp	r3, #4
 800c150:	bf28      	it	cs
 800c152:	2304      	movcs	r3, #4
 800c154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	3304      	adds	r3, #4
 800c15a:	2b06      	cmp	r3, #6
 800c15c:	d902      	bls.n	800c164 <NVIC_EncodePriority+0x30>
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	3b03      	subs	r3, #3
 800c162:	e000      	b.n	800c166 <NVIC_EncodePriority+0x32>
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	43da      	mvns	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	401a      	ands	r2, r3
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c17c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	fa01 f303 	lsl.w	r3, r1, r3
 800c186:	43d9      	mvns	r1, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c18c:	4313      	orrs	r3, r2
         );
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3724      	adds	r7, #36	; 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
	...

0800c19c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1ac:	d301      	bcc.n	800c1b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e00f      	b.n	800c1d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c1b2:	4a0a      	ldr	r2, [pc, #40]	; (800c1dc <SysTick_Config+0x40>)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c1ba:	210f      	movs	r1, #15
 800c1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1c0:	f7ff ff8e 	bl	800c0e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1c4:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <SysTick_Config+0x40>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1ca:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <SysTick_Config+0x40>)
 800c1cc:	2207      	movs	r2, #7
 800c1ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	e000e010 	.word	0xe000e010

0800c1e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff ff29 	bl	800c040 <__NVIC_SetPriorityGrouping>
}
 800c1ee:	bf00      	nop
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b086      	sub	sp, #24
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c204:	f7ff ff40 	bl	800c088 <__NVIC_GetPriorityGrouping>
 800c208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7ff ff90 	bl	800c134 <NVIC_EncodePriority>
 800c214:	4602      	mov	r2, r0
 800c216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c21a:	4611      	mov	r1, r2
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ff5f 	bl	800c0e0 <__NVIC_SetPriority>
}
 800c222:	bf00      	nop
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	4603      	mov	r3, r0
 800c232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff ff33 	bl	800c0a4 <__NVIC_EnableIRQ>
}
 800c23e:	bf00      	nop
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b082      	sub	sp, #8
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff ffa4 	bl	800c19c <SysTick_Config>
 800c254:	4603      	mov	r3, r0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b082      	sub	sp, #8
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e014      	b.n	800c29a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	791b      	ldrb	r3, [r3, #4]
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7fe f8d3 	bl	800a42c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2202      	movs	r2, #2
 800c28a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	795b      	ldrb	r3, [r3, #5]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d101      	bne.n	800c2b8 <HAL_DAC_Start+0x16>
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	e040      	b.n	800c33a <HAL_DAC_Start+0x98>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6819      	ldr	r1, [r3, #0]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	f003 0310 	and.w	r3, r3, #16
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	409a      	lsls	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	430a      	orrs	r2, r1
 800c2da:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10f      	bne.n	800c302 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d11d      	bne.n	800c32c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0201 	orr.w	r2, r2, #1
 800c2fe:	605a      	str	r2, [r3, #4]
 800c300:	e014      	b.n	800c32c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	f003 0310 	and.w	r3, r3, #16
 800c312:	2102      	movs	r1, #2
 800c314:	fa01 f303 	lsl.w	r3, r1, r3
 800c318:	429a      	cmp	r2, r3
 800c31a:	d107      	bne.n	800c32c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0202 	orr.w	r2, r2, #2
 800c32a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800c346:	b480      	push	{r7}
 800c348:	b087      	sub	sp, #28
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	60b9      	str	r1, [r7, #8]
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800c354:	2300      	movs	r3, #0
 800c356:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4413      	add	r3, r2
 800c36a:	3308      	adds	r3, #8
 800c36c:	617b      	str	r3, [r7, #20]
 800c36e:	e004      	b.n	800c37a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	3314      	adds	r3, #20
 800c378:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	461a      	mov	r2, r3
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	795b      	ldrb	r3, [r3, #5]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_DAC_ConfigChannel+0x18>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e11d      	b.n	800c5e4 <HAL_DAC_ConfigChannel+0x254>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	d174      	bne.n	800c4a6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800c3bc:	f7ff fc1c 	bl	800bbf8 <HAL_GetTick>
 800c3c0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d134      	bne.n	800c432 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c3c8:	e011      	b.n	800c3ee <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c3ca:	f7ff fc15 	bl	800bbf8 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d90a      	bls.n	800c3ee <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	f043 0208 	orr.w	r2, r3, #8
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2203      	movs	r2, #3
 800c3e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e0fa      	b.n	800c5e4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3f4:	4b7d      	ldr	r3, [pc, #500]	; (800c5ec <HAL_DAC_ConfigChannel+0x25c>)
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e6      	bne.n	800c3ca <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	f7ff fc07 	bl	800bc10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	6992      	ldr	r2, [r2, #24]
 800c40a:	641a      	str	r2, [r3, #64]	; 0x40
 800c40c:	e01e      	b.n	800c44c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c40e:	f7ff fbf3 	bl	800bbf8 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d90a      	bls.n	800c432 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	f043 0208 	orr.w	r2, r3, #8
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2203      	movs	r2, #3
 800c42c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e0d8      	b.n	800c5e4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c438:	2b00      	cmp	r3, #0
 800c43a:	dbe8      	blt.n	800c40e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800c43c:	2001      	movs	r0, #1
 800c43e:	f7ff fbe7 	bl	800bc10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	6992      	ldr	r2, [r2, #24]
 800c44a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f003 0310 	and.w	r3, r3, #16
 800c458:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c45c:	fa01 f303 	lsl.w	r3, r1, r3
 800c460:	43db      	mvns	r3, r3
 800c462:	ea02 0103 	and.w	r1, r2, r3
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	69da      	ldr	r2, [r3, #28]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f003 0310 	and.w	r3, r3, #16
 800c470:	409a      	lsls	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f003 0310 	and.w	r3, r3, #16
 800c486:	21ff      	movs	r1, #255	; 0xff
 800c488:	fa01 f303 	lsl.w	r3, r1, r3
 800c48c:	43db      	mvns	r3, r3
 800c48e:	ea02 0103 	and.w	r1, r2, r3
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6a1a      	ldr	r2, [r3, #32]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f003 0310 	and.w	r3, r3, #16
 800c49c:	409a      	lsls	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d11d      	bne.n	800c4ea <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	221f      	movs	r2, #31
 800c4be:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c2:	43db      	mvns	r3, r3
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f003 0310 	and.w	r3, r3, #16
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4dc:	697a      	ldr	r2, [r7, #20]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2207      	movs	r2, #7
 800c4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fe:	43db      	mvns	r3, r3
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4013      	ands	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d102      	bne.n	800c514 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800c50e:	2300      	movs	r3, #0
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	e00f      	b.n	800c534 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d102      	bne.n	800c522 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800c51c:	2301      	movs	r3, #1
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	e008      	b.n	800c534 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800c52a:	2301      	movs	r3, #1
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	e001      	b.n	800c534 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800c530:	2300      	movs	r3, #0
 800c532:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	69fa      	ldr	r2, [r7, #28]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f003 0310 	and.w	r3, r3, #16
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	fa02 f303 	lsl.w	r3, r2, r3
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	4313      	orrs	r3, r2
 800c554:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0310 	and.w	r3, r3, #16
 800c56a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c56e:	fa02 f303 	lsl.w	r3, r2, r3
 800c572:	43da      	mvns	r2, r3
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	400a      	ands	r2, r1
 800c57a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f003 0310 	and.w	r3, r3, #16
 800c58a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800c58e:	fa02 f303 	lsl.w	r3, r2, r3
 800c592:	43db      	mvns	r3, r3
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	4013      	ands	r3, r2
 800c598:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f003 0310 	and.w	r3, r3, #16
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6819      	ldr	r1, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f003 0310 	and.w	r3, r3, #16
 800c5c6:	22c0      	movs	r2, #192	; 0xc0
 800c5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5cc:	43da      	mvns	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	400a      	ands	r2, r1
 800c5d4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3720      	adds	r7, #32
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20008000 	.word	0x20008000

0800c5f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c5f8:	f7ff fafe 	bl	800bbf8 <HAL_GetTick>
 800c5fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d101      	bne.n	800c608 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e316      	b.n	800cc36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a66      	ldr	r2, [pc, #408]	; (800c7a8 <HAL_DMA_Init+0x1b8>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d04a      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a65      	ldr	r2, [pc, #404]	; (800c7ac <HAL_DMA_Init+0x1bc>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d045      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a63      	ldr	r2, [pc, #396]	; (800c7b0 <HAL_DMA_Init+0x1c0>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d040      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a62      	ldr	r2, [pc, #392]	; (800c7b4 <HAL_DMA_Init+0x1c4>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d03b      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a60      	ldr	r2, [pc, #384]	; (800c7b8 <HAL_DMA_Init+0x1c8>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d036      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a5f      	ldr	r2, [pc, #380]	; (800c7bc <HAL_DMA_Init+0x1cc>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d031      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a5d      	ldr	r2, [pc, #372]	; (800c7c0 <HAL_DMA_Init+0x1d0>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d02c      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a5c      	ldr	r2, [pc, #368]	; (800c7c4 <HAL_DMA_Init+0x1d4>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d027      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a5a      	ldr	r2, [pc, #360]	; (800c7c8 <HAL_DMA_Init+0x1d8>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d022      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a59      	ldr	r2, [pc, #356]	; (800c7cc <HAL_DMA_Init+0x1dc>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d01d      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a57      	ldr	r2, [pc, #348]	; (800c7d0 <HAL_DMA_Init+0x1e0>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d018      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a56      	ldr	r2, [pc, #344]	; (800c7d4 <HAL_DMA_Init+0x1e4>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d013      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a54      	ldr	r2, [pc, #336]	; (800c7d8 <HAL_DMA_Init+0x1e8>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00e      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a53      	ldr	r2, [pc, #332]	; (800c7dc <HAL_DMA_Init+0x1ec>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a51      	ldr	r2, [pc, #324]	; (800c7e0 <HAL_DMA_Init+0x1f0>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d004      	beq.n	800c6a8 <HAL_DMA_Init+0xb8>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a50      	ldr	r2, [pc, #320]	; (800c7e4 <HAL_DMA_Init+0x1f4>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d101      	bne.n	800c6ac <HAL_DMA_Init+0xbc>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e000      	b.n	800c6ae <HAL_DMA_Init+0xbe>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 813b 	beq.w	800c92a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a37      	ldr	r2, [pc, #220]	; (800c7a8 <HAL_DMA_Init+0x1b8>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d04a      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a36      	ldr	r2, [pc, #216]	; (800c7ac <HAL_DMA_Init+0x1bc>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d045      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a34      	ldr	r2, [pc, #208]	; (800c7b0 <HAL_DMA_Init+0x1c0>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d040      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a33      	ldr	r2, [pc, #204]	; (800c7b4 <HAL_DMA_Init+0x1c4>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d03b      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a31      	ldr	r2, [pc, #196]	; (800c7b8 <HAL_DMA_Init+0x1c8>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d036      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a30      	ldr	r2, [pc, #192]	; (800c7bc <HAL_DMA_Init+0x1cc>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d031      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a2e      	ldr	r2, [pc, #184]	; (800c7c0 <HAL_DMA_Init+0x1d0>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d02c      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a2d      	ldr	r2, [pc, #180]	; (800c7c4 <HAL_DMA_Init+0x1d4>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d027      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a2b      	ldr	r2, [pc, #172]	; (800c7c8 <HAL_DMA_Init+0x1d8>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d022      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a2a      	ldr	r2, [pc, #168]	; (800c7cc <HAL_DMA_Init+0x1dc>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d01d      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a28      	ldr	r2, [pc, #160]	; (800c7d0 <HAL_DMA_Init+0x1e0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d018      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a27      	ldr	r2, [pc, #156]	; (800c7d4 <HAL_DMA_Init+0x1e4>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d013      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a25      	ldr	r2, [pc, #148]	; (800c7d8 <HAL_DMA_Init+0x1e8>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d00e      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a24      	ldr	r2, [pc, #144]	; (800c7dc <HAL_DMA_Init+0x1ec>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d009      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a22      	ldr	r2, [pc, #136]	; (800c7e0 <HAL_DMA_Init+0x1f0>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d004      	beq.n	800c764 <HAL_DMA_Init+0x174>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a21      	ldr	r2, [pc, #132]	; (800c7e4 <HAL_DMA_Init+0x1f4>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d108      	bne.n	800c776 <HAL_DMA_Init+0x186>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0201 	bic.w	r2, r2, #1
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	e007      	b.n	800c786 <HAL_DMA_Init+0x196>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0201 	bic.w	r2, r2, #1
 800c784:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c786:	e02f      	b.n	800c7e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c788:	f7ff fa36 	bl	800bbf8 <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b05      	cmp	r3, #5
 800c794:	d928      	bls.n	800c7e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2220      	movs	r2, #32
 800c79a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2203      	movs	r2, #3
 800c7a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e246      	b.n	800cc36 <HAL_DMA_Init+0x646>
 800c7a8:	40020010 	.word	0x40020010
 800c7ac:	40020028 	.word	0x40020028
 800c7b0:	40020040 	.word	0x40020040
 800c7b4:	40020058 	.word	0x40020058
 800c7b8:	40020070 	.word	0x40020070
 800c7bc:	40020088 	.word	0x40020088
 800c7c0:	400200a0 	.word	0x400200a0
 800c7c4:	400200b8 	.word	0x400200b8
 800c7c8:	40020410 	.word	0x40020410
 800c7cc:	40020428 	.word	0x40020428
 800c7d0:	40020440 	.word	0x40020440
 800c7d4:	40020458 	.word	0x40020458
 800c7d8:	40020470 	.word	0x40020470
 800c7dc:	40020488 	.word	0x40020488
 800c7e0:	400204a0 	.word	0x400204a0
 800c7e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1c8      	bne.n	800c788 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4b83      	ldr	r3, [pc, #524]	; (800ca10 <HAL_DMA_Init+0x420>)
 800c802:	4013      	ands	r3, r2
 800c804:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800c80e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c81a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c826:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	4313      	orrs	r3, r2
 800c832:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	2b04      	cmp	r3, #4
 800c83a:	d107      	bne.n	800c84c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c844:	4313      	orrs	r3, r2
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c84c:	4b71      	ldr	r3, [pc, #452]	; (800ca14 <HAL_DMA_Init+0x424>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	4b71      	ldr	r3, [pc, #452]	; (800ca18 <HAL_DMA_Init+0x428>)
 800c852:	4013      	ands	r3, r2
 800c854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c858:	d328      	bcc.n	800c8ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	2b28      	cmp	r3, #40	; 0x28
 800c860:	d903      	bls.n	800c86a <HAL_DMA_Init+0x27a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	2b2e      	cmp	r3, #46	; 0x2e
 800c868:	d917      	bls.n	800c89a <HAL_DMA_Init+0x2aa>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	2b3e      	cmp	r3, #62	; 0x3e
 800c870:	d903      	bls.n	800c87a <HAL_DMA_Init+0x28a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	2b42      	cmp	r3, #66	; 0x42
 800c878:	d90f      	bls.n	800c89a <HAL_DMA_Init+0x2aa>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	2b46      	cmp	r3, #70	; 0x46
 800c880:	d903      	bls.n	800c88a <HAL_DMA_Init+0x29a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	2b48      	cmp	r3, #72	; 0x48
 800c888:	d907      	bls.n	800c89a <HAL_DMA_Init+0x2aa>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b4e      	cmp	r3, #78	; 0x4e
 800c890:	d905      	bls.n	800c89e <HAL_DMA_Init+0x2ae>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	2b52      	cmp	r3, #82	; 0x52
 800c898:	d801      	bhi.n	800c89e <HAL_DMA_Init+0x2ae>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e000      	b.n	800c8a0 <HAL_DMA_Init+0x2b0>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d2:	2b04      	cmp	r3, #4
 800c8d4:	d117      	bne.n	800c906 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	697a      	ldr	r2, [r7, #20]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00e      	beq.n	800c906 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f001 ff2b 	bl	800e744 <DMA_CheckFifoParam>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d008      	beq.n	800c906 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2240      	movs	r2, #64	; 0x40
 800c8f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e197      	b.n	800cc36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 fe66 	bl	800e5e0 <DMA_CalcBaseAndBitshift>
 800c914:	4603      	mov	r3, r0
 800c916:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c91c:	f003 031f 	and.w	r3, r3, #31
 800c920:	223f      	movs	r2, #63	; 0x3f
 800c922:	409a      	lsls	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	609a      	str	r2, [r3, #8]
 800c928:	e0cd      	b.n	800cac6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a3b      	ldr	r2, [pc, #236]	; (800ca1c <HAL_DMA_Init+0x42c>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d022      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a39      	ldr	r2, [pc, #228]	; (800ca20 <HAL_DMA_Init+0x430>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d01d      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a38      	ldr	r2, [pc, #224]	; (800ca24 <HAL_DMA_Init+0x434>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d018      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a36      	ldr	r2, [pc, #216]	; (800ca28 <HAL_DMA_Init+0x438>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d013      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a35      	ldr	r2, [pc, #212]	; (800ca2c <HAL_DMA_Init+0x43c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00e      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a33      	ldr	r2, [pc, #204]	; (800ca30 <HAL_DMA_Init+0x440>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d009      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a32      	ldr	r2, [pc, #200]	; (800ca34 <HAL_DMA_Init+0x444>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d004      	beq.n	800c97a <HAL_DMA_Init+0x38a>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a30      	ldr	r2, [pc, #192]	; (800ca38 <HAL_DMA_Init+0x448>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d101      	bne.n	800c97e <HAL_DMA_Init+0x38e>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e000      	b.n	800c980 <HAL_DMA_Init+0x390>
 800c97e:	2300      	movs	r3, #0
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 8097 	beq.w	800cab4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a24      	ldr	r2, [pc, #144]	; (800ca1c <HAL_DMA_Init+0x42c>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d021      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a22      	ldr	r2, [pc, #136]	; (800ca20 <HAL_DMA_Init+0x430>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d01c      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a21      	ldr	r2, [pc, #132]	; (800ca24 <HAL_DMA_Init+0x434>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d017      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a1f      	ldr	r2, [pc, #124]	; (800ca28 <HAL_DMA_Init+0x438>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d012      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a1e      	ldr	r2, [pc, #120]	; (800ca2c <HAL_DMA_Init+0x43c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d00d      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1c      	ldr	r2, [pc, #112]	; (800ca30 <HAL_DMA_Init+0x440>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d008      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a1b      	ldr	r2, [pc, #108]	; (800ca34 <HAL_DMA_Init+0x444>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <HAL_DMA_Init+0x3e4>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a19      	ldr	r2, [pc, #100]	; (800ca38 <HAL_DMA_Init+0x448>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2202      	movs	r2, #2
 800c9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <HAL_DMA_Init+0x44c>)
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	2b40      	cmp	r3, #64	; 0x40
 800c9fc:	d020      	beq.n	800ca40 <HAL_DMA_Init+0x450>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	2b80      	cmp	r3, #128	; 0x80
 800ca04:	d102      	bne.n	800ca0c <HAL_DMA_Init+0x41c>
 800ca06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca0a:	e01a      	b.n	800ca42 <HAL_DMA_Init+0x452>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	e018      	b.n	800ca42 <HAL_DMA_Init+0x452>
 800ca10:	fe10803f 	.word	0xfe10803f
 800ca14:	5c001000 	.word	0x5c001000
 800ca18:	ffff0000 	.word	0xffff0000
 800ca1c:	58025408 	.word	0x58025408
 800ca20:	5802541c 	.word	0x5802541c
 800ca24:	58025430 	.word	0x58025430
 800ca28:	58025444 	.word	0x58025444
 800ca2c:	58025458 	.word	0x58025458
 800ca30:	5802546c 	.word	0x5802546c
 800ca34:	58025480 	.word	0x58025480
 800ca38:	58025494 	.word	0x58025494
 800ca3c:	fffe000f 	.word	0xfffe000f
 800ca40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	68d2      	ldr	r2, [r2, #12]
 800ca46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ca48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800ca50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800ca58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800ca60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69db      	ldr	r3, [r3, #28]
 800ca66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ca68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ca70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	4b6e      	ldr	r3, [pc, #440]	; (800cc40 <HAL_DMA_Init+0x650>)
 800ca88:	4413      	add	r3, r2
 800ca8a:	4a6e      	ldr	r2, [pc, #440]	; (800cc44 <HAL_DMA_Init+0x654>)
 800ca8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca90:	091b      	lsrs	r3, r3, #4
 800ca92:	009a      	lsls	r2, r3, #2
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 fda1 	bl	800e5e0 <DMA_CalcBaseAndBitshift>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caa6:	f003 031f 	and.w	r3, r3, #31
 800caaa:	2201      	movs	r2, #1
 800caac:	409a      	lsls	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	605a      	str	r2, [r3, #4]
 800cab2:	e008      	b.n	800cac6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2240      	movs	r2, #64	; 0x40
 800cab8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2203      	movs	r2, #3
 800cabe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e0b7      	b.n	800cc36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a5f      	ldr	r2, [pc, #380]	; (800cc48 <HAL_DMA_Init+0x658>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d072      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a5d      	ldr	r2, [pc, #372]	; (800cc4c <HAL_DMA_Init+0x65c>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d06d      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a5c      	ldr	r2, [pc, #368]	; (800cc50 <HAL_DMA_Init+0x660>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d068      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a5a      	ldr	r2, [pc, #360]	; (800cc54 <HAL_DMA_Init+0x664>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d063      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a59      	ldr	r2, [pc, #356]	; (800cc58 <HAL_DMA_Init+0x668>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d05e      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a57      	ldr	r2, [pc, #348]	; (800cc5c <HAL_DMA_Init+0x66c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d059      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a56      	ldr	r2, [pc, #344]	; (800cc60 <HAL_DMA_Init+0x670>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d054      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a54      	ldr	r2, [pc, #336]	; (800cc64 <HAL_DMA_Init+0x674>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d04f      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a53      	ldr	r2, [pc, #332]	; (800cc68 <HAL_DMA_Init+0x678>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d04a      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a51      	ldr	r2, [pc, #324]	; (800cc6c <HAL_DMA_Init+0x67c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d045      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a50      	ldr	r2, [pc, #320]	; (800cc70 <HAL_DMA_Init+0x680>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d040      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a4e      	ldr	r2, [pc, #312]	; (800cc74 <HAL_DMA_Init+0x684>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d03b      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a4d      	ldr	r2, [pc, #308]	; (800cc78 <HAL_DMA_Init+0x688>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d036      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a4b      	ldr	r2, [pc, #300]	; (800cc7c <HAL_DMA_Init+0x68c>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d031      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a4a      	ldr	r2, [pc, #296]	; (800cc80 <HAL_DMA_Init+0x690>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d02c      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a48      	ldr	r2, [pc, #288]	; (800cc84 <HAL_DMA_Init+0x694>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d027      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a47      	ldr	r2, [pc, #284]	; (800cc88 <HAL_DMA_Init+0x698>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d022      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a45      	ldr	r2, [pc, #276]	; (800cc8c <HAL_DMA_Init+0x69c>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d01d      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a44      	ldr	r2, [pc, #272]	; (800cc90 <HAL_DMA_Init+0x6a0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d018      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a42      	ldr	r2, [pc, #264]	; (800cc94 <HAL_DMA_Init+0x6a4>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d013      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a41      	ldr	r2, [pc, #260]	; (800cc98 <HAL_DMA_Init+0x6a8>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00e      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a3f      	ldr	r2, [pc, #252]	; (800cc9c <HAL_DMA_Init+0x6ac>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d009      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a3e      	ldr	r2, [pc, #248]	; (800cca0 <HAL_DMA_Init+0x6b0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d004      	beq.n	800cbb6 <HAL_DMA_Init+0x5c6>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a3c      	ldr	r2, [pc, #240]	; (800cca4 <HAL_DMA_Init+0x6b4>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d101      	bne.n	800cbba <HAL_DMA_Init+0x5ca>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <HAL_DMA_Init+0x5cc>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d032      	beq.n	800cc26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 fe3b 	bl	800e83c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	2b80      	cmp	r3, #128	; 0x80
 800cbcc:	d102      	bne.n	800cbd4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cbe8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d010      	beq.n	800cc14 <HAL_DMA_Init+0x624>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	2b08      	cmp	r3, #8
 800cbf8:	d80c      	bhi.n	800cc14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f001 feb8 	bl	800e970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cc10:	605a      	str	r2, [r3, #4]
 800cc12:	e008      	b.n	800cc26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	a7fdabf8 	.word	0xa7fdabf8
 800cc44:	cccccccd 	.word	0xcccccccd
 800cc48:	40020010 	.word	0x40020010
 800cc4c:	40020028 	.word	0x40020028
 800cc50:	40020040 	.word	0x40020040
 800cc54:	40020058 	.word	0x40020058
 800cc58:	40020070 	.word	0x40020070
 800cc5c:	40020088 	.word	0x40020088
 800cc60:	400200a0 	.word	0x400200a0
 800cc64:	400200b8 	.word	0x400200b8
 800cc68:	40020410 	.word	0x40020410
 800cc6c:	40020428 	.word	0x40020428
 800cc70:	40020440 	.word	0x40020440
 800cc74:	40020458 	.word	0x40020458
 800cc78:	40020470 	.word	0x40020470
 800cc7c:	40020488 	.word	0x40020488
 800cc80:	400204a0 	.word	0x400204a0
 800cc84:	400204b8 	.word	0x400204b8
 800cc88:	58025408 	.word	0x58025408
 800cc8c:	5802541c 	.word	0x5802541c
 800cc90:	58025430 	.word	0x58025430
 800cc94:	58025444 	.word	0x58025444
 800cc98:	58025458 	.word	0x58025458
 800cc9c:	5802546c 	.word	0x5802546c
 800cca0:	58025480 	.word	0x58025480
 800cca4:	58025494 	.word	0x58025494

0800cca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800ccb0:	f7fe ffa2 	bl	800bbf8 <HAL_GetTick>
 800ccb4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e2dc      	b.n	800d27a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d008      	beq.n	800ccde <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2280      	movs	r2, #128	; 0x80
 800ccd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e2cd      	b.n	800d27a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a76      	ldr	r2, [pc, #472]	; (800cebc <HAL_DMA_Abort+0x214>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d04a      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a74      	ldr	r2, [pc, #464]	; (800cec0 <HAL_DMA_Abort+0x218>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d045      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a73      	ldr	r2, [pc, #460]	; (800cec4 <HAL_DMA_Abort+0x21c>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d040      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a71      	ldr	r2, [pc, #452]	; (800cec8 <HAL_DMA_Abort+0x220>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d03b      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a70      	ldr	r2, [pc, #448]	; (800cecc <HAL_DMA_Abort+0x224>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d036      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a6e      	ldr	r2, [pc, #440]	; (800ced0 <HAL_DMA_Abort+0x228>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d031      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a6d      	ldr	r2, [pc, #436]	; (800ced4 <HAL_DMA_Abort+0x22c>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d02c      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a6b      	ldr	r2, [pc, #428]	; (800ced8 <HAL_DMA_Abort+0x230>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d027      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a6a      	ldr	r2, [pc, #424]	; (800cedc <HAL_DMA_Abort+0x234>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d022      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a68      	ldr	r2, [pc, #416]	; (800cee0 <HAL_DMA_Abort+0x238>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d01d      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a67      	ldr	r2, [pc, #412]	; (800cee4 <HAL_DMA_Abort+0x23c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d018      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a65      	ldr	r2, [pc, #404]	; (800cee8 <HAL_DMA_Abort+0x240>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d013      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a64      	ldr	r2, [pc, #400]	; (800ceec <HAL_DMA_Abort+0x244>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00e      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a62      	ldr	r2, [pc, #392]	; (800cef0 <HAL_DMA_Abort+0x248>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d009      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a61      	ldr	r2, [pc, #388]	; (800cef4 <HAL_DMA_Abort+0x24c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d004      	beq.n	800cd7e <HAL_DMA_Abort+0xd6>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a5f      	ldr	r2, [pc, #380]	; (800cef8 <HAL_DMA_Abort+0x250>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d101      	bne.n	800cd82 <HAL_DMA_Abort+0xda>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <HAL_DMA_Abort+0xdc>
 800cd82:	2300      	movs	r3, #0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d013      	beq.n	800cdb0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f022 021e 	bic.w	r2, r2, #30
 800cd96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	695a      	ldr	r2, [r3, #20]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cda6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e00a      	b.n	800cdc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f022 020e 	bic.w	r2, r2, #14
 800cdbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a3c      	ldr	r2, [pc, #240]	; (800cebc <HAL_DMA_Abort+0x214>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d072      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a3a      	ldr	r2, [pc, #232]	; (800cec0 <HAL_DMA_Abort+0x218>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d06d      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a39      	ldr	r2, [pc, #228]	; (800cec4 <HAL_DMA_Abort+0x21c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d068      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a37      	ldr	r2, [pc, #220]	; (800cec8 <HAL_DMA_Abort+0x220>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d063      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a36      	ldr	r2, [pc, #216]	; (800cecc <HAL_DMA_Abort+0x224>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d05e      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a34      	ldr	r2, [pc, #208]	; (800ced0 <HAL_DMA_Abort+0x228>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d059      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a33      	ldr	r2, [pc, #204]	; (800ced4 <HAL_DMA_Abort+0x22c>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d054      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a31      	ldr	r2, [pc, #196]	; (800ced8 <HAL_DMA_Abort+0x230>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d04f      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a30      	ldr	r2, [pc, #192]	; (800cedc <HAL_DMA_Abort+0x234>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d04a      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a2e      	ldr	r2, [pc, #184]	; (800cee0 <HAL_DMA_Abort+0x238>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d045      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a2d      	ldr	r2, [pc, #180]	; (800cee4 <HAL_DMA_Abort+0x23c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d040      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a2b      	ldr	r2, [pc, #172]	; (800cee8 <HAL_DMA_Abort+0x240>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d03b      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a2a      	ldr	r2, [pc, #168]	; (800ceec <HAL_DMA_Abort+0x244>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d036      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a28      	ldr	r2, [pc, #160]	; (800cef0 <HAL_DMA_Abort+0x248>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d031      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a27      	ldr	r2, [pc, #156]	; (800cef4 <HAL_DMA_Abort+0x24c>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d02c      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a25      	ldr	r2, [pc, #148]	; (800cef8 <HAL_DMA_Abort+0x250>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d027      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a24      	ldr	r2, [pc, #144]	; (800cefc <HAL_DMA_Abort+0x254>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d022      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a22      	ldr	r2, [pc, #136]	; (800cf00 <HAL_DMA_Abort+0x258>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d01d      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a21      	ldr	r2, [pc, #132]	; (800cf04 <HAL_DMA_Abort+0x25c>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d018      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a1f      	ldr	r2, [pc, #124]	; (800cf08 <HAL_DMA_Abort+0x260>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d013      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a1e      	ldr	r2, [pc, #120]	; (800cf0c <HAL_DMA_Abort+0x264>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d00e      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a1c      	ldr	r2, [pc, #112]	; (800cf10 <HAL_DMA_Abort+0x268>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d009      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a1b      	ldr	r2, [pc, #108]	; (800cf14 <HAL_DMA_Abort+0x26c>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d004      	beq.n	800ceb6 <HAL_DMA_Abort+0x20e>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a19      	ldr	r2, [pc, #100]	; (800cf18 <HAL_DMA_Abort+0x270>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d132      	bne.n	800cf1c <HAL_DMA_Abort+0x274>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e031      	b.n	800cf1e <HAL_DMA_Abort+0x276>
 800ceba:	bf00      	nop
 800cebc:	40020010 	.word	0x40020010
 800cec0:	40020028 	.word	0x40020028
 800cec4:	40020040 	.word	0x40020040
 800cec8:	40020058 	.word	0x40020058
 800cecc:	40020070 	.word	0x40020070
 800ced0:	40020088 	.word	0x40020088
 800ced4:	400200a0 	.word	0x400200a0
 800ced8:	400200b8 	.word	0x400200b8
 800cedc:	40020410 	.word	0x40020410
 800cee0:	40020428 	.word	0x40020428
 800cee4:	40020440 	.word	0x40020440
 800cee8:	40020458 	.word	0x40020458
 800ceec:	40020470 	.word	0x40020470
 800cef0:	40020488 	.word	0x40020488
 800cef4:	400204a0 	.word	0x400204a0
 800cef8:	400204b8 	.word	0x400204b8
 800cefc:	58025408 	.word	0x58025408
 800cf00:	5802541c 	.word	0x5802541c
 800cf04:	58025430 	.word	0x58025430
 800cf08:	58025444 	.word	0x58025444
 800cf0c:	58025458 	.word	0x58025458
 800cf10:	5802546c 	.word	0x5802546c
 800cf14:	58025480 	.word	0x58025480
 800cf18:	58025494 	.word	0x58025494
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d007      	beq.n	800cf32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a6d      	ldr	r2, [pc, #436]	; (800d0ec <HAL_DMA_Abort+0x444>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d04a      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a6b      	ldr	r2, [pc, #428]	; (800d0f0 <HAL_DMA_Abort+0x448>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d045      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a6a      	ldr	r2, [pc, #424]	; (800d0f4 <HAL_DMA_Abort+0x44c>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d040      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a68      	ldr	r2, [pc, #416]	; (800d0f8 <HAL_DMA_Abort+0x450>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d03b      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a67      	ldr	r2, [pc, #412]	; (800d0fc <HAL_DMA_Abort+0x454>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d036      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a65      	ldr	r2, [pc, #404]	; (800d100 <HAL_DMA_Abort+0x458>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d031      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a64      	ldr	r2, [pc, #400]	; (800d104 <HAL_DMA_Abort+0x45c>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d02c      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a62      	ldr	r2, [pc, #392]	; (800d108 <HAL_DMA_Abort+0x460>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d027      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a61      	ldr	r2, [pc, #388]	; (800d10c <HAL_DMA_Abort+0x464>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d022      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a5f      	ldr	r2, [pc, #380]	; (800d110 <HAL_DMA_Abort+0x468>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d01d      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a5e      	ldr	r2, [pc, #376]	; (800d114 <HAL_DMA_Abort+0x46c>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d018      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a5c      	ldr	r2, [pc, #368]	; (800d118 <HAL_DMA_Abort+0x470>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d013      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a5b      	ldr	r2, [pc, #364]	; (800d11c <HAL_DMA_Abort+0x474>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00e      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a59      	ldr	r2, [pc, #356]	; (800d120 <HAL_DMA_Abort+0x478>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d009      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a58      	ldr	r2, [pc, #352]	; (800d124 <HAL_DMA_Abort+0x47c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d004      	beq.n	800cfd2 <HAL_DMA_Abort+0x32a>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a56      	ldr	r2, [pc, #344]	; (800d128 <HAL_DMA_Abort+0x480>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d108      	bne.n	800cfe4 <HAL_DMA_Abort+0x33c>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f022 0201 	bic.w	r2, r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	e007      	b.n	800cff4 <HAL_DMA_Abort+0x34c>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 0201 	bic.w	r2, r2, #1
 800cff2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800cff4:	e013      	b.n	800d01e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cff6:	f7fe fdff 	bl	800bbf8 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b05      	cmp	r3, #5
 800d002:	d90c      	bls.n	800d01e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2203      	movs	r2, #3
 800d00e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e12d      	b.n	800d27a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1e5      	bne.n	800cff6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a2f      	ldr	r2, [pc, #188]	; (800d0ec <HAL_DMA_Abort+0x444>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d04a      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a2d      	ldr	r2, [pc, #180]	; (800d0f0 <HAL_DMA_Abort+0x448>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d045      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a2c      	ldr	r2, [pc, #176]	; (800d0f4 <HAL_DMA_Abort+0x44c>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d040      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <HAL_DMA_Abort+0x450>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d03b      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a29      	ldr	r2, [pc, #164]	; (800d0fc <HAL_DMA_Abort+0x454>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d036      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a27      	ldr	r2, [pc, #156]	; (800d100 <HAL_DMA_Abort+0x458>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d031      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a26      	ldr	r2, [pc, #152]	; (800d104 <HAL_DMA_Abort+0x45c>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d02c      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a24      	ldr	r2, [pc, #144]	; (800d108 <HAL_DMA_Abort+0x460>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d027      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a23      	ldr	r2, [pc, #140]	; (800d10c <HAL_DMA_Abort+0x464>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d022      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a21      	ldr	r2, [pc, #132]	; (800d110 <HAL_DMA_Abort+0x468>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d01d      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a20      	ldr	r2, [pc, #128]	; (800d114 <HAL_DMA_Abort+0x46c>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d018      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a1e      	ldr	r2, [pc, #120]	; (800d118 <HAL_DMA_Abort+0x470>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a1d      	ldr	r2, [pc, #116]	; (800d11c <HAL_DMA_Abort+0x474>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d00e      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a1b      	ldr	r2, [pc, #108]	; (800d120 <HAL_DMA_Abort+0x478>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d009      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <HAL_DMA_Abort+0x47c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d004      	beq.n	800d0ca <HAL_DMA_Abort+0x422>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a18      	ldr	r2, [pc, #96]	; (800d128 <HAL_DMA_Abort+0x480>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d101      	bne.n	800d0ce <HAL_DMA_Abort+0x426>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <HAL_DMA_Abort+0x428>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d02b      	beq.n	800d12c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0de:	f003 031f 	and.w	r3, r3, #31
 800d0e2:	223f      	movs	r2, #63	; 0x3f
 800d0e4:	409a      	lsls	r2, r3
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	609a      	str	r2, [r3, #8]
 800d0ea:	e02a      	b.n	800d142 <HAL_DMA_Abort+0x49a>
 800d0ec:	40020010 	.word	0x40020010
 800d0f0:	40020028 	.word	0x40020028
 800d0f4:	40020040 	.word	0x40020040
 800d0f8:	40020058 	.word	0x40020058
 800d0fc:	40020070 	.word	0x40020070
 800d100:	40020088 	.word	0x40020088
 800d104:	400200a0 	.word	0x400200a0
 800d108:	400200b8 	.word	0x400200b8
 800d10c:	40020410 	.word	0x40020410
 800d110:	40020428 	.word	0x40020428
 800d114:	40020440 	.word	0x40020440
 800d118:	40020458 	.word	0x40020458
 800d11c:	40020470 	.word	0x40020470
 800d120:	40020488 	.word	0x40020488
 800d124:	400204a0 	.word	0x400204a0
 800d128:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d130:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d136:	f003 031f 	and.w	r3, r3, #31
 800d13a:	2201      	movs	r2, #1
 800d13c:	409a      	lsls	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a4f      	ldr	r2, [pc, #316]	; (800d284 <HAL_DMA_Abort+0x5dc>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d072      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a4d      	ldr	r2, [pc, #308]	; (800d288 <HAL_DMA_Abort+0x5e0>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d06d      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a4c      	ldr	r2, [pc, #304]	; (800d28c <HAL_DMA_Abort+0x5e4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d068      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a4a      	ldr	r2, [pc, #296]	; (800d290 <HAL_DMA_Abort+0x5e8>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d063      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a49      	ldr	r2, [pc, #292]	; (800d294 <HAL_DMA_Abort+0x5ec>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d05e      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a47      	ldr	r2, [pc, #284]	; (800d298 <HAL_DMA_Abort+0x5f0>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d059      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a46      	ldr	r2, [pc, #280]	; (800d29c <HAL_DMA_Abort+0x5f4>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d054      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a44      	ldr	r2, [pc, #272]	; (800d2a0 <HAL_DMA_Abort+0x5f8>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d04f      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a43      	ldr	r2, [pc, #268]	; (800d2a4 <HAL_DMA_Abort+0x5fc>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d04a      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a41      	ldr	r2, [pc, #260]	; (800d2a8 <HAL_DMA_Abort+0x600>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d045      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a40      	ldr	r2, [pc, #256]	; (800d2ac <HAL_DMA_Abort+0x604>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d040      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a3e      	ldr	r2, [pc, #248]	; (800d2b0 <HAL_DMA_Abort+0x608>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d03b      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a3d      	ldr	r2, [pc, #244]	; (800d2b4 <HAL_DMA_Abort+0x60c>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d036      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a3b      	ldr	r2, [pc, #236]	; (800d2b8 <HAL_DMA_Abort+0x610>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d031      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a3a      	ldr	r2, [pc, #232]	; (800d2bc <HAL_DMA_Abort+0x614>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d02c      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a38      	ldr	r2, [pc, #224]	; (800d2c0 <HAL_DMA_Abort+0x618>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d027      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a37      	ldr	r2, [pc, #220]	; (800d2c4 <HAL_DMA_Abort+0x61c>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d022      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a35      	ldr	r2, [pc, #212]	; (800d2c8 <HAL_DMA_Abort+0x620>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d01d      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a34      	ldr	r2, [pc, #208]	; (800d2cc <HAL_DMA_Abort+0x624>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d018      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a32      	ldr	r2, [pc, #200]	; (800d2d0 <HAL_DMA_Abort+0x628>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d013      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a31      	ldr	r2, [pc, #196]	; (800d2d4 <HAL_DMA_Abort+0x62c>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d00e      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a2f      	ldr	r2, [pc, #188]	; (800d2d8 <HAL_DMA_Abort+0x630>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d009      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a2e      	ldr	r2, [pc, #184]	; (800d2dc <HAL_DMA_Abort+0x634>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d004      	beq.n	800d232 <HAL_DMA_Abort+0x58a>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a2c      	ldr	r2, [pc, #176]	; (800d2e0 <HAL_DMA_Abort+0x638>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d101      	bne.n	800d236 <HAL_DMA_Abort+0x58e>
 800d232:	2301      	movs	r3, #1
 800d234:	e000      	b.n	800d238 <HAL_DMA_Abort+0x590>
 800d236:	2300      	movs	r3, #0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d015      	beq.n	800d268 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d244:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00c      	beq.n	800d268 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d25c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d266:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	40020010 	.word	0x40020010
 800d288:	40020028 	.word	0x40020028
 800d28c:	40020040 	.word	0x40020040
 800d290:	40020058 	.word	0x40020058
 800d294:	40020070 	.word	0x40020070
 800d298:	40020088 	.word	0x40020088
 800d29c:	400200a0 	.word	0x400200a0
 800d2a0:	400200b8 	.word	0x400200b8
 800d2a4:	40020410 	.word	0x40020410
 800d2a8:	40020428 	.word	0x40020428
 800d2ac:	40020440 	.word	0x40020440
 800d2b0:	40020458 	.word	0x40020458
 800d2b4:	40020470 	.word	0x40020470
 800d2b8:	40020488 	.word	0x40020488
 800d2bc:	400204a0 	.word	0x400204a0
 800d2c0:	400204b8 	.word	0x400204b8
 800d2c4:	58025408 	.word	0x58025408
 800d2c8:	5802541c 	.word	0x5802541c
 800d2cc:	58025430 	.word	0x58025430
 800d2d0:	58025444 	.word	0x58025444
 800d2d4:	58025458 	.word	0x58025458
 800d2d8:	5802546c 	.word	0x5802546c
 800d2dc:	58025480 	.word	0x58025480
 800d2e0:	58025494 	.word	0x58025494

0800d2e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e237      	b.n	800d766 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d004      	beq.n	800d30c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2280      	movs	r2, #128	; 0x80
 800d306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e22c      	b.n	800d766 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a5c      	ldr	r2, [pc, #368]	; (800d484 <HAL_DMA_Abort_IT+0x1a0>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d04a      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a5b      	ldr	r2, [pc, #364]	; (800d488 <HAL_DMA_Abort_IT+0x1a4>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d045      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a59      	ldr	r2, [pc, #356]	; (800d48c <HAL_DMA_Abort_IT+0x1a8>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d040      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a58      	ldr	r2, [pc, #352]	; (800d490 <HAL_DMA_Abort_IT+0x1ac>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d03b      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a56      	ldr	r2, [pc, #344]	; (800d494 <HAL_DMA_Abort_IT+0x1b0>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d036      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a55      	ldr	r2, [pc, #340]	; (800d498 <HAL_DMA_Abort_IT+0x1b4>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d031      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a53      	ldr	r2, [pc, #332]	; (800d49c <HAL_DMA_Abort_IT+0x1b8>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d02c      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a52      	ldr	r2, [pc, #328]	; (800d4a0 <HAL_DMA_Abort_IT+0x1bc>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d027      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a50      	ldr	r2, [pc, #320]	; (800d4a4 <HAL_DMA_Abort_IT+0x1c0>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d022      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a4f      	ldr	r2, [pc, #316]	; (800d4a8 <HAL_DMA_Abort_IT+0x1c4>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d01d      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a4d      	ldr	r2, [pc, #308]	; (800d4ac <HAL_DMA_Abort_IT+0x1c8>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d018      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a4c      	ldr	r2, [pc, #304]	; (800d4b0 <HAL_DMA_Abort_IT+0x1cc>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d013      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a4a      	ldr	r2, [pc, #296]	; (800d4b4 <HAL_DMA_Abort_IT+0x1d0>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d00e      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a49      	ldr	r2, [pc, #292]	; (800d4b8 <HAL_DMA_Abort_IT+0x1d4>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d009      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a47      	ldr	r2, [pc, #284]	; (800d4bc <HAL_DMA_Abort_IT+0x1d8>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d004      	beq.n	800d3ac <HAL_DMA_Abort_IT+0xc8>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a46      	ldr	r2, [pc, #280]	; (800d4c0 <HAL_DMA_Abort_IT+0x1dc>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d101      	bne.n	800d3b0 <HAL_DMA_Abort_IT+0xcc>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e000      	b.n	800d3b2 <HAL_DMA_Abort_IT+0xce>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f000 8086 	beq.w	800d4c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2204      	movs	r2, #4
 800d3bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a2f      	ldr	r2, [pc, #188]	; (800d484 <HAL_DMA_Abort_IT+0x1a0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d04a      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a2e      	ldr	r2, [pc, #184]	; (800d488 <HAL_DMA_Abort_IT+0x1a4>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d045      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a2c      	ldr	r2, [pc, #176]	; (800d48c <HAL_DMA_Abort_IT+0x1a8>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d040      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a2b      	ldr	r2, [pc, #172]	; (800d490 <HAL_DMA_Abort_IT+0x1ac>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d03b      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a29      	ldr	r2, [pc, #164]	; (800d494 <HAL_DMA_Abort_IT+0x1b0>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d036      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a28      	ldr	r2, [pc, #160]	; (800d498 <HAL_DMA_Abort_IT+0x1b4>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d031      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a26      	ldr	r2, [pc, #152]	; (800d49c <HAL_DMA_Abort_IT+0x1b8>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d02c      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a25      	ldr	r2, [pc, #148]	; (800d4a0 <HAL_DMA_Abort_IT+0x1bc>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d027      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a23      	ldr	r2, [pc, #140]	; (800d4a4 <HAL_DMA_Abort_IT+0x1c0>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d022      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a22      	ldr	r2, [pc, #136]	; (800d4a8 <HAL_DMA_Abort_IT+0x1c4>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d01d      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a20      	ldr	r2, [pc, #128]	; (800d4ac <HAL_DMA_Abort_IT+0x1c8>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d018      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a1f      	ldr	r2, [pc, #124]	; (800d4b0 <HAL_DMA_Abort_IT+0x1cc>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d013      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a1d      	ldr	r2, [pc, #116]	; (800d4b4 <HAL_DMA_Abort_IT+0x1d0>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d00e      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a1c      	ldr	r2, [pc, #112]	; (800d4b8 <HAL_DMA_Abort_IT+0x1d4>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d009      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1a      	ldr	r2, [pc, #104]	; (800d4bc <HAL_DMA_Abort_IT+0x1d8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d004      	beq.n	800d460 <HAL_DMA_Abort_IT+0x17c>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a19      	ldr	r2, [pc, #100]	; (800d4c0 <HAL_DMA_Abort_IT+0x1dc>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d108      	bne.n	800d472 <HAL_DMA_Abort_IT+0x18e>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f022 0201 	bic.w	r2, r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	e178      	b.n	800d764 <HAL_DMA_Abort_IT+0x480>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f022 0201 	bic.w	r2, r2, #1
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	e16f      	b.n	800d764 <HAL_DMA_Abort_IT+0x480>
 800d484:	40020010 	.word	0x40020010
 800d488:	40020028 	.word	0x40020028
 800d48c:	40020040 	.word	0x40020040
 800d490:	40020058 	.word	0x40020058
 800d494:	40020070 	.word	0x40020070
 800d498:	40020088 	.word	0x40020088
 800d49c:	400200a0 	.word	0x400200a0
 800d4a0:	400200b8 	.word	0x400200b8
 800d4a4:	40020410 	.word	0x40020410
 800d4a8:	40020428 	.word	0x40020428
 800d4ac:	40020440 	.word	0x40020440
 800d4b0:	40020458 	.word	0x40020458
 800d4b4:	40020470 	.word	0x40020470
 800d4b8:	40020488 	.word	0x40020488
 800d4bc:	400204a0 	.word	0x400204a0
 800d4c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f022 020e 	bic.w	r2, r2, #14
 800d4d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a6c      	ldr	r2, [pc, #432]	; (800d68c <HAL_DMA_Abort_IT+0x3a8>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d04a      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a6b      	ldr	r2, [pc, #428]	; (800d690 <HAL_DMA_Abort_IT+0x3ac>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d045      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a69      	ldr	r2, [pc, #420]	; (800d694 <HAL_DMA_Abort_IT+0x3b0>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d040      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a68      	ldr	r2, [pc, #416]	; (800d698 <HAL_DMA_Abort_IT+0x3b4>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d03b      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a66      	ldr	r2, [pc, #408]	; (800d69c <HAL_DMA_Abort_IT+0x3b8>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d036      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a65      	ldr	r2, [pc, #404]	; (800d6a0 <HAL_DMA_Abort_IT+0x3bc>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d031      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a63      	ldr	r2, [pc, #396]	; (800d6a4 <HAL_DMA_Abort_IT+0x3c0>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d02c      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a62      	ldr	r2, [pc, #392]	; (800d6a8 <HAL_DMA_Abort_IT+0x3c4>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d027      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a60      	ldr	r2, [pc, #384]	; (800d6ac <HAL_DMA_Abort_IT+0x3c8>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d022      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a5f      	ldr	r2, [pc, #380]	; (800d6b0 <HAL_DMA_Abort_IT+0x3cc>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d01d      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a5d      	ldr	r2, [pc, #372]	; (800d6b4 <HAL_DMA_Abort_IT+0x3d0>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d018      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a5c      	ldr	r2, [pc, #368]	; (800d6b8 <HAL_DMA_Abort_IT+0x3d4>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d013      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a5a      	ldr	r2, [pc, #360]	; (800d6bc <HAL_DMA_Abort_IT+0x3d8>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d00e      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a59      	ldr	r2, [pc, #356]	; (800d6c0 <HAL_DMA_Abort_IT+0x3dc>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d009      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a57      	ldr	r2, [pc, #348]	; (800d6c4 <HAL_DMA_Abort_IT+0x3e0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d004      	beq.n	800d574 <HAL_DMA_Abort_IT+0x290>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a56      	ldr	r2, [pc, #344]	; (800d6c8 <HAL_DMA_Abort_IT+0x3e4>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d108      	bne.n	800d586 <HAL_DMA_Abort_IT+0x2a2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f022 0201 	bic.w	r2, r2, #1
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	e007      	b.n	800d596 <HAL_DMA_Abort_IT+0x2b2>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f022 0201 	bic.w	r2, r2, #1
 800d594:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a3c      	ldr	r2, [pc, #240]	; (800d68c <HAL_DMA_Abort_IT+0x3a8>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d072      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a3a      	ldr	r2, [pc, #232]	; (800d690 <HAL_DMA_Abort_IT+0x3ac>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d06d      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a39      	ldr	r2, [pc, #228]	; (800d694 <HAL_DMA_Abort_IT+0x3b0>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d068      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a37      	ldr	r2, [pc, #220]	; (800d698 <HAL_DMA_Abort_IT+0x3b4>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d063      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a36      	ldr	r2, [pc, #216]	; (800d69c <HAL_DMA_Abort_IT+0x3b8>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d05e      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a34      	ldr	r2, [pc, #208]	; (800d6a0 <HAL_DMA_Abort_IT+0x3bc>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d059      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a33      	ldr	r2, [pc, #204]	; (800d6a4 <HAL_DMA_Abort_IT+0x3c0>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d054      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a31      	ldr	r2, [pc, #196]	; (800d6a8 <HAL_DMA_Abort_IT+0x3c4>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d04f      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a30      	ldr	r2, [pc, #192]	; (800d6ac <HAL_DMA_Abort_IT+0x3c8>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d04a      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a2e      	ldr	r2, [pc, #184]	; (800d6b0 <HAL_DMA_Abort_IT+0x3cc>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d045      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a2d      	ldr	r2, [pc, #180]	; (800d6b4 <HAL_DMA_Abort_IT+0x3d0>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d040      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a2b      	ldr	r2, [pc, #172]	; (800d6b8 <HAL_DMA_Abort_IT+0x3d4>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d03b      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a2a      	ldr	r2, [pc, #168]	; (800d6bc <HAL_DMA_Abort_IT+0x3d8>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d036      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a28      	ldr	r2, [pc, #160]	; (800d6c0 <HAL_DMA_Abort_IT+0x3dc>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d031      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a27      	ldr	r2, [pc, #156]	; (800d6c4 <HAL_DMA_Abort_IT+0x3e0>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d02c      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a25      	ldr	r2, [pc, #148]	; (800d6c8 <HAL_DMA_Abort_IT+0x3e4>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d027      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a24      	ldr	r2, [pc, #144]	; (800d6cc <HAL_DMA_Abort_IT+0x3e8>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d022      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a22      	ldr	r2, [pc, #136]	; (800d6d0 <HAL_DMA_Abort_IT+0x3ec>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d01d      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a21      	ldr	r2, [pc, #132]	; (800d6d4 <HAL_DMA_Abort_IT+0x3f0>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d018      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a1f      	ldr	r2, [pc, #124]	; (800d6d8 <HAL_DMA_Abort_IT+0x3f4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d013      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4a1e      	ldr	r2, [pc, #120]	; (800d6dc <HAL_DMA_Abort_IT+0x3f8>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00e      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a1c      	ldr	r2, [pc, #112]	; (800d6e0 <HAL_DMA_Abort_IT+0x3fc>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d009      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a1b      	ldr	r2, [pc, #108]	; (800d6e4 <HAL_DMA_Abort_IT+0x400>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d004      	beq.n	800d686 <HAL_DMA_Abort_IT+0x3a2>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a19      	ldr	r2, [pc, #100]	; (800d6e8 <HAL_DMA_Abort_IT+0x404>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d132      	bne.n	800d6ec <HAL_DMA_Abort_IT+0x408>
 800d686:	2301      	movs	r3, #1
 800d688:	e031      	b.n	800d6ee <HAL_DMA_Abort_IT+0x40a>
 800d68a:	bf00      	nop
 800d68c:	40020010 	.word	0x40020010
 800d690:	40020028 	.word	0x40020028
 800d694:	40020040 	.word	0x40020040
 800d698:	40020058 	.word	0x40020058
 800d69c:	40020070 	.word	0x40020070
 800d6a0:	40020088 	.word	0x40020088
 800d6a4:	400200a0 	.word	0x400200a0
 800d6a8:	400200b8 	.word	0x400200b8
 800d6ac:	40020410 	.word	0x40020410
 800d6b0:	40020428 	.word	0x40020428
 800d6b4:	40020440 	.word	0x40020440
 800d6b8:	40020458 	.word	0x40020458
 800d6bc:	40020470 	.word	0x40020470
 800d6c0:	40020488 	.word	0x40020488
 800d6c4:	400204a0 	.word	0x400204a0
 800d6c8:	400204b8 	.word	0x400204b8
 800d6cc:	58025408 	.word	0x58025408
 800d6d0:	5802541c 	.word	0x5802541c
 800d6d4:	58025430 	.word	0x58025430
 800d6d8:	58025444 	.word	0x58025444
 800d6dc:	58025458 	.word	0x58025458
 800d6e0:	5802546c 	.word	0x5802546c
 800d6e4:	58025480 	.word	0x58025480
 800d6e8:	58025494 	.word	0x58025494
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d028      	beq.n	800d744 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d700:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d706:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d70c:	f003 031f 	and.w	r3, r3, #31
 800d710:	2201      	movs	r2, #1
 800d712:	409a      	lsls	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d720:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00c      	beq.n	800d744 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d738:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d742:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop

0800d770 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b08a      	sub	sp, #40	; 0x28
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d77c:	4b67      	ldr	r3, [pc, #412]	; (800d91c <HAL_DMA_IRQHandler+0x1ac>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a67      	ldr	r2, [pc, #412]	; (800d920 <HAL_DMA_IRQHandler+0x1b0>)
 800d782:	fba2 2303 	umull	r2, r3, r2, r3
 800d786:	0a9b      	lsrs	r3, r3, #10
 800d788:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d78e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d794:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a5f      	ldr	r2, [pc, #380]	; (800d924 <HAL_DMA_IRQHandler+0x1b4>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d04a      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a5d      	ldr	r2, [pc, #372]	; (800d928 <HAL_DMA_IRQHandler+0x1b8>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d045      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a5c      	ldr	r2, [pc, #368]	; (800d92c <HAL_DMA_IRQHandler+0x1bc>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d040      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a5a      	ldr	r2, [pc, #360]	; (800d930 <HAL_DMA_IRQHandler+0x1c0>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d03b      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a59      	ldr	r2, [pc, #356]	; (800d934 <HAL_DMA_IRQHandler+0x1c4>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d036      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a57      	ldr	r2, [pc, #348]	; (800d938 <HAL_DMA_IRQHandler+0x1c8>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d031      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a56      	ldr	r2, [pc, #344]	; (800d93c <HAL_DMA_IRQHandler+0x1cc>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d02c      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a54      	ldr	r2, [pc, #336]	; (800d940 <HAL_DMA_IRQHandler+0x1d0>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d027      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a53      	ldr	r2, [pc, #332]	; (800d944 <HAL_DMA_IRQHandler+0x1d4>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d022      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a51      	ldr	r2, [pc, #324]	; (800d948 <HAL_DMA_IRQHandler+0x1d8>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d01d      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a50      	ldr	r2, [pc, #320]	; (800d94c <HAL_DMA_IRQHandler+0x1dc>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d018      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a4e      	ldr	r2, [pc, #312]	; (800d950 <HAL_DMA_IRQHandler+0x1e0>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d013      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a4d      	ldr	r2, [pc, #308]	; (800d954 <HAL_DMA_IRQHandler+0x1e4>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d00e      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a4b      	ldr	r2, [pc, #300]	; (800d958 <HAL_DMA_IRQHandler+0x1e8>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d009      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a4a      	ldr	r2, [pc, #296]	; (800d95c <HAL_DMA_IRQHandler+0x1ec>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d004      	beq.n	800d842 <HAL_DMA_IRQHandler+0xd2>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a48      	ldr	r2, [pc, #288]	; (800d960 <HAL_DMA_IRQHandler+0x1f0>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d101      	bne.n	800d846 <HAL_DMA_IRQHandler+0xd6>
 800d842:	2301      	movs	r3, #1
 800d844:	e000      	b.n	800d848 <HAL_DMA_IRQHandler+0xd8>
 800d846:	2300      	movs	r3, #0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 842b 	beq.w	800e0a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d852:	f003 031f 	and.w	r3, r3, #31
 800d856:	2208      	movs	r2, #8
 800d858:	409a      	lsls	r2, r3
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	4013      	ands	r3, r2
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 80a2 	beq.w	800d9a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a2e      	ldr	r2, [pc, #184]	; (800d924 <HAL_DMA_IRQHandler+0x1b4>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d04a      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a2d      	ldr	r2, [pc, #180]	; (800d928 <HAL_DMA_IRQHandler+0x1b8>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d045      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a2b      	ldr	r2, [pc, #172]	; (800d92c <HAL_DMA_IRQHandler+0x1bc>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d040      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a2a      	ldr	r2, [pc, #168]	; (800d930 <HAL_DMA_IRQHandler+0x1c0>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d03b      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a28      	ldr	r2, [pc, #160]	; (800d934 <HAL_DMA_IRQHandler+0x1c4>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d036      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a27      	ldr	r2, [pc, #156]	; (800d938 <HAL_DMA_IRQHandler+0x1c8>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d031      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a25      	ldr	r2, [pc, #148]	; (800d93c <HAL_DMA_IRQHandler+0x1cc>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d02c      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a24      	ldr	r2, [pc, #144]	; (800d940 <HAL_DMA_IRQHandler+0x1d0>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d027      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a22      	ldr	r2, [pc, #136]	; (800d944 <HAL_DMA_IRQHandler+0x1d4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d022      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a21      	ldr	r2, [pc, #132]	; (800d948 <HAL_DMA_IRQHandler+0x1d8>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d01d      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a1f      	ldr	r2, [pc, #124]	; (800d94c <HAL_DMA_IRQHandler+0x1dc>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d018      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a1e      	ldr	r2, [pc, #120]	; (800d950 <HAL_DMA_IRQHandler+0x1e0>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d013      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a1c      	ldr	r2, [pc, #112]	; (800d954 <HAL_DMA_IRQHandler+0x1e4>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d00e      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a1b      	ldr	r2, [pc, #108]	; (800d958 <HAL_DMA_IRQHandler+0x1e8>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d009      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a19      	ldr	r2, [pc, #100]	; (800d95c <HAL_DMA_IRQHandler+0x1ec>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d004      	beq.n	800d904 <HAL_DMA_IRQHandler+0x194>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a18      	ldr	r2, [pc, #96]	; (800d960 <HAL_DMA_IRQHandler+0x1f0>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d12f      	bne.n	800d964 <HAL_DMA_IRQHandler+0x1f4>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f003 0304 	and.w	r3, r3, #4
 800d90e:	2b00      	cmp	r3, #0
 800d910:	bf14      	ite	ne
 800d912:	2301      	movne	r3, #1
 800d914:	2300      	moveq	r3, #0
 800d916:	b2db      	uxtb	r3, r3
 800d918:	e02e      	b.n	800d978 <HAL_DMA_IRQHandler+0x208>
 800d91a:	bf00      	nop
 800d91c:	24000000 	.word	0x24000000
 800d920:	1b4e81b5 	.word	0x1b4e81b5
 800d924:	40020010 	.word	0x40020010
 800d928:	40020028 	.word	0x40020028
 800d92c:	40020040 	.word	0x40020040
 800d930:	40020058 	.word	0x40020058
 800d934:	40020070 	.word	0x40020070
 800d938:	40020088 	.word	0x40020088
 800d93c:	400200a0 	.word	0x400200a0
 800d940:	400200b8 	.word	0x400200b8
 800d944:	40020410 	.word	0x40020410
 800d948:	40020428 	.word	0x40020428
 800d94c:	40020440 	.word	0x40020440
 800d950:	40020458 	.word	0x40020458
 800d954:	40020470 	.word	0x40020470
 800d958:	40020488 	.word	0x40020488
 800d95c:	400204a0 	.word	0x400204a0
 800d960:	400204b8 	.word	0x400204b8
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 0308 	and.w	r3, r3, #8
 800d96e:	2b00      	cmp	r3, #0
 800d970:	bf14      	ite	ne
 800d972:	2301      	movne	r3, #1
 800d974:	2300      	moveq	r3, #0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d015      	beq.n	800d9a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f022 0204 	bic.w	r2, r2, #4
 800d98a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d990:	f003 031f 	and.w	r3, r3, #31
 800d994:	2208      	movs	r2, #8
 800d996:	409a      	lsls	r2, r3
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a0:	f043 0201 	orr.w	r2, r3, #1
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ac:	f003 031f 	and.w	r3, r3, #31
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d06e      	beq.n	800da9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a69      	ldr	r2, [pc, #420]	; (800db68 <HAL_DMA_IRQHandler+0x3f8>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d04a      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a67      	ldr	r2, [pc, #412]	; (800db6c <HAL_DMA_IRQHandler+0x3fc>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d045      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a66      	ldr	r2, [pc, #408]	; (800db70 <HAL_DMA_IRQHandler+0x400>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d040      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a64      	ldr	r2, [pc, #400]	; (800db74 <HAL_DMA_IRQHandler+0x404>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d03b      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a63      	ldr	r2, [pc, #396]	; (800db78 <HAL_DMA_IRQHandler+0x408>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d036      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a61      	ldr	r2, [pc, #388]	; (800db7c <HAL_DMA_IRQHandler+0x40c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d031      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a60      	ldr	r2, [pc, #384]	; (800db80 <HAL_DMA_IRQHandler+0x410>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d02c      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a5e      	ldr	r2, [pc, #376]	; (800db84 <HAL_DMA_IRQHandler+0x414>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d027      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a5d      	ldr	r2, [pc, #372]	; (800db88 <HAL_DMA_IRQHandler+0x418>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d022      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a5b      	ldr	r2, [pc, #364]	; (800db8c <HAL_DMA_IRQHandler+0x41c>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d01d      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a5a      	ldr	r2, [pc, #360]	; (800db90 <HAL_DMA_IRQHandler+0x420>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d018      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a58      	ldr	r2, [pc, #352]	; (800db94 <HAL_DMA_IRQHandler+0x424>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d013      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a57      	ldr	r2, [pc, #348]	; (800db98 <HAL_DMA_IRQHandler+0x428>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d00e      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a55      	ldr	r2, [pc, #340]	; (800db9c <HAL_DMA_IRQHandler+0x42c>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d009      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a54      	ldr	r2, [pc, #336]	; (800dba0 <HAL_DMA_IRQHandler+0x430>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d004      	beq.n	800da5e <HAL_DMA_IRQHandler+0x2ee>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a52      	ldr	r2, [pc, #328]	; (800dba4 <HAL_DMA_IRQHandler+0x434>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d10a      	bne.n	800da74 <HAL_DMA_IRQHandler+0x304>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	695b      	ldr	r3, [r3, #20]
 800da64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bf14      	ite	ne
 800da6c:	2301      	movne	r3, #1
 800da6e:	2300      	moveq	r3, #0
 800da70:	b2db      	uxtb	r3, r3
 800da72:	e003      	b.n	800da7c <HAL_DMA_IRQHandler+0x30c>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2300      	movs	r3, #0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00d      	beq.n	800da9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da84:	f003 031f 	and.w	r3, r3, #31
 800da88:	2201      	movs	r2, #1
 800da8a:	409a      	lsls	r2, r3
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da94:	f043 0202 	orr.w	r2, r3, #2
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daa0:	f003 031f 	and.w	r3, r3, #31
 800daa4:	2204      	movs	r2, #4
 800daa6:	409a      	lsls	r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	4013      	ands	r3, r2
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 808f 	beq.w	800dbd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a2c      	ldr	r2, [pc, #176]	; (800db68 <HAL_DMA_IRQHandler+0x3f8>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d04a      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a2a      	ldr	r2, [pc, #168]	; (800db6c <HAL_DMA_IRQHandler+0x3fc>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d045      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a29      	ldr	r2, [pc, #164]	; (800db70 <HAL_DMA_IRQHandler+0x400>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d040      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a27      	ldr	r2, [pc, #156]	; (800db74 <HAL_DMA_IRQHandler+0x404>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d03b      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a26      	ldr	r2, [pc, #152]	; (800db78 <HAL_DMA_IRQHandler+0x408>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d036      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a24      	ldr	r2, [pc, #144]	; (800db7c <HAL_DMA_IRQHandler+0x40c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d031      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a23      	ldr	r2, [pc, #140]	; (800db80 <HAL_DMA_IRQHandler+0x410>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d02c      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a21      	ldr	r2, [pc, #132]	; (800db84 <HAL_DMA_IRQHandler+0x414>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d027      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a20      	ldr	r2, [pc, #128]	; (800db88 <HAL_DMA_IRQHandler+0x418>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d022      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a1e      	ldr	r2, [pc, #120]	; (800db8c <HAL_DMA_IRQHandler+0x41c>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d01d      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a1d      	ldr	r2, [pc, #116]	; (800db90 <HAL_DMA_IRQHandler+0x420>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d018      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a1b      	ldr	r2, [pc, #108]	; (800db94 <HAL_DMA_IRQHandler+0x424>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d013      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a1a      	ldr	r2, [pc, #104]	; (800db98 <HAL_DMA_IRQHandler+0x428>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d00e      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a18      	ldr	r2, [pc, #96]	; (800db9c <HAL_DMA_IRQHandler+0x42c>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d009      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a17      	ldr	r2, [pc, #92]	; (800dba0 <HAL_DMA_IRQHandler+0x430>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d004      	beq.n	800db52 <HAL_DMA_IRQHandler+0x3e2>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a15      	ldr	r2, [pc, #84]	; (800dba4 <HAL_DMA_IRQHandler+0x434>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d12a      	bne.n	800dba8 <HAL_DMA_IRQHandler+0x438>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f003 0302 	and.w	r3, r3, #2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bf14      	ite	ne
 800db60:	2301      	movne	r3, #1
 800db62:	2300      	moveq	r3, #0
 800db64:	b2db      	uxtb	r3, r3
 800db66:	e023      	b.n	800dbb0 <HAL_DMA_IRQHandler+0x440>
 800db68:	40020010 	.word	0x40020010
 800db6c:	40020028 	.word	0x40020028
 800db70:	40020040 	.word	0x40020040
 800db74:	40020058 	.word	0x40020058
 800db78:	40020070 	.word	0x40020070
 800db7c:	40020088 	.word	0x40020088
 800db80:	400200a0 	.word	0x400200a0
 800db84:	400200b8 	.word	0x400200b8
 800db88:	40020410 	.word	0x40020410
 800db8c:	40020428 	.word	0x40020428
 800db90:	40020440 	.word	0x40020440
 800db94:	40020458 	.word	0x40020458
 800db98:	40020470 	.word	0x40020470
 800db9c:	40020488 	.word	0x40020488
 800dba0:	400204a0 	.word	0x400204a0
 800dba4:	400204b8 	.word	0x400204b8
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00d      	beq.n	800dbd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbb8:	f003 031f 	and.w	r3, r3, #31
 800dbbc:	2204      	movs	r2, #4
 800dbbe:	409a      	lsls	r2, r3
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc8:	f043 0204 	orr.w	r2, r3, #4
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbd4:	f003 031f 	and.w	r3, r3, #31
 800dbd8:	2210      	movs	r2, #16
 800dbda:	409a      	lsls	r2, r3
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	4013      	ands	r3, r2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 80a6 	beq.w	800dd32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a85      	ldr	r2, [pc, #532]	; (800de00 <HAL_DMA_IRQHandler+0x690>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d04a      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a83      	ldr	r2, [pc, #524]	; (800de04 <HAL_DMA_IRQHandler+0x694>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d045      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a82      	ldr	r2, [pc, #520]	; (800de08 <HAL_DMA_IRQHandler+0x698>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d040      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a80      	ldr	r2, [pc, #512]	; (800de0c <HAL_DMA_IRQHandler+0x69c>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d03b      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a7f      	ldr	r2, [pc, #508]	; (800de10 <HAL_DMA_IRQHandler+0x6a0>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d036      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a7d      	ldr	r2, [pc, #500]	; (800de14 <HAL_DMA_IRQHandler+0x6a4>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d031      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a7c      	ldr	r2, [pc, #496]	; (800de18 <HAL_DMA_IRQHandler+0x6a8>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d02c      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a7a      	ldr	r2, [pc, #488]	; (800de1c <HAL_DMA_IRQHandler+0x6ac>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d027      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a79      	ldr	r2, [pc, #484]	; (800de20 <HAL_DMA_IRQHandler+0x6b0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d022      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a77      	ldr	r2, [pc, #476]	; (800de24 <HAL_DMA_IRQHandler+0x6b4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d01d      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a76      	ldr	r2, [pc, #472]	; (800de28 <HAL_DMA_IRQHandler+0x6b8>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d018      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a74      	ldr	r2, [pc, #464]	; (800de2c <HAL_DMA_IRQHandler+0x6bc>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d013      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a73      	ldr	r2, [pc, #460]	; (800de30 <HAL_DMA_IRQHandler+0x6c0>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d00e      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a71      	ldr	r2, [pc, #452]	; (800de34 <HAL_DMA_IRQHandler+0x6c4>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d009      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a70      	ldr	r2, [pc, #448]	; (800de38 <HAL_DMA_IRQHandler+0x6c8>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d004      	beq.n	800dc86 <HAL_DMA_IRQHandler+0x516>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a6e      	ldr	r2, [pc, #440]	; (800de3c <HAL_DMA_IRQHandler+0x6cc>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d10a      	bne.n	800dc9c <HAL_DMA_IRQHandler+0x52c>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0308 	and.w	r3, r3, #8
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	bf14      	ite	ne
 800dc94:	2301      	movne	r3, #1
 800dc96:	2300      	moveq	r3, #0
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	e009      	b.n	800dcb0 <HAL_DMA_IRQHandler+0x540>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f003 0304 	and.w	r3, r3, #4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	bf14      	ite	ne
 800dcaa:	2301      	movne	r3, #1
 800dcac:	2300      	moveq	r3, #0
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d03e      	beq.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb8:	f003 031f 	and.w	r3, r3, #31
 800dcbc:	2210      	movs	r2, #16
 800dcbe:	409a      	lsls	r2, r3
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d018      	beq.n	800dd04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d108      	bne.n	800dcf2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d024      	beq.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	4798      	blx	r3
 800dcf0:	e01f      	b.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d01b      	beq.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	4798      	blx	r3
 800dd02:	e016      	b.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d107      	bne.n	800dd22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0208 	bic.w	r2, r2, #8
 800dd20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd36:	f003 031f 	and.w	r3, r3, #31
 800dd3a:	2220      	movs	r2, #32
 800dd3c:	409a      	lsls	r2, r3
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	4013      	ands	r3, r2
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 8110 	beq.w	800df68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a2c      	ldr	r2, [pc, #176]	; (800de00 <HAL_DMA_IRQHandler+0x690>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d04a      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a2b      	ldr	r2, [pc, #172]	; (800de04 <HAL_DMA_IRQHandler+0x694>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d045      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a29      	ldr	r2, [pc, #164]	; (800de08 <HAL_DMA_IRQHandler+0x698>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d040      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a28      	ldr	r2, [pc, #160]	; (800de0c <HAL_DMA_IRQHandler+0x69c>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d03b      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a26      	ldr	r2, [pc, #152]	; (800de10 <HAL_DMA_IRQHandler+0x6a0>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d036      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a25      	ldr	r2, [pc, #148]	; (800de14 <HAL_DMA_IRQHandler+0x6a4>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d031      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a23      	ldr	r2, [pc, #140]	; (800de18 <HAL_DMA_IRQHandler+0x6a8>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d02c      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a22      	ldr	r2, [pc, #136]	; (800de1c <HAL_DMA_IRQHandler+0x6ac>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d027      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a20      	ldr	r2, [pc, #128]	; (800de20 <HAL_DMA_IRQHandler+0x6b0>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d022      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a1f      	ldr	r2, [pc, #124]	; (800de24 <HAL_DMA_IRQHandler+0x6b4>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d01d      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a1d      	ldr	r2, [pc, #116]	; (800de28 <HAL_DMA_IRQHandler+0x6b8>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d018      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a1c      	ldr	r2, [pc, #112]	; (800de2c <HAL_DMA_IRQHandler+0x6bc>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d013      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a1a      	ldr	r2, [pc, #104]	; (800de30 <HAL_DMA_IRQHandler+0x6c0>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00e      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a19      	ldr	r2, [pc, #100]	; (800de34 <HAL_DMA_IRQHandler+0x6c4>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d009      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a17      	ldr	r2, [pc, #92]	; (800de38 <HAL_DMA_IRQHandler+0x6c8>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d004      	beq.n	800dde8 <HAL_DMA_IRQHandler+0x678>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a16      	ldr	r2, [pc, #88]	; (800de3c <HAL_DMA_IRQHandler+0x6cc>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d12b      	bne.n	800de40 <HAL_DMA_IRQHandler+0x6d0>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 0310 	and.w	r3, r3, #16
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	bf14      	ite	ne
 800ddf6:	2301      	movne	r3, #1
 800ddf8:	2300      	moveq	r3, #0
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	e02a      	b.n	800de54 <HAL_DMA_IRQHandler+0x6e4>
 800ddfe:	bf00      	nop
 800de00:	40020010 	.word	0x40020010
 800de04:	40020028 	.word	0x40020028
 800de08:	40020040 	.word	0x40020040
 800de0c:	40020058 	.word	0x40020058
 800de10:	40020070 	.word	0x40020070
 800de14:	40020088 	.word	0x40020088
 800de18:	400200a0 	.word	0x400200a0
 800de1c:	400200b8 	.word	0x400200b8
 800de20:	40020410 	.word	0x40020410
 800de24:	40020428 	.word	0x40020428
 800de28:	40020440 	.word	0x40020440
 800de2c:	40020458 	.word	0x40020458
 800de30:	40020470 	.word	0x40020470
 800de34:	40020488 	.word	0x40020488
 800de38:	400204a0 	.word	0x400204a0
 800de3c:	400204b8 	.word	0x400204b8
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	bf14      	ite	ne
 800de4e:	2301      	movne	r3, #1
 800de50:	2300      	moveq	r3, #0
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8087 	beq.w	800df68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de5e:	f003 031f 	and.w	r3, r3, #31
 800de62:	2220      	movs	r2, #32
 800de64:	409a      	lsls	r2, r3
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800de70:	b2db      	uxtb	r3, r3
 800de72:	2b04      	cmp	r3, #4
 800de74:	d139      	bne.n	800deea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f022 0216 	bic.w	r2, r2, #22
 800de84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	695a      	ldr	r2, [r3, #20]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d103      	bne.n	800dea6 <HAL_DMA_IRQHandler+0x736>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f022 0208 	bic.w	r2, r2, #8
 800deb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deba:	f003 031f 	and.w	r3, r3, #31
 800debe:	223f      	movs	r2, #63	; 0x3f
 800dec0:	409a      	lsls	r2, r3
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2201      	movs	r2, #1
 800deca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f000 834a 	beq.w	800e574 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	4798      	blx	r3
          }
          return;
 800dee8:	e344      	b.n	800e574 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d018      	beq.n	800df2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df02:	2b00      	cmp	r3, #0
 800df04:	d108      	bne.n	800df18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d02c      	beq.n	800df68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	4798      	blx	r3
 800df16:	e027      	b.n	800df68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d023      	beq.n	800df68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	4798      	blx	r3
 800df28:	e01e      	b.n	800df68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10f      	bne.n	800df58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f022 0210 	bic.w	r2, r2, #16
 800df46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d003      	beq.n	800df68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 8306 	beq.w	800e57e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 8088 	beq.w	800e090 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2204      	movs	r2, #4
 800df84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a7a      	ldr	r2, [pc, #488]	; (800e178 <HAL_DMA_IRQHandler+0xa08>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d04a      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a79      	ldr	r2, [pc, #484]	; (800e17c <HAL_DMA_IRQHandler+0xa0c>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d045      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a77      	ldr	r2, [pc, #476]	; (800e180 <HAL_DMA_IRQHandler+0xa10>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d040      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a76      	ldr	r2, [pc, #472]	; (800e184 <HAL_DMA_IRQHandler+0xa14>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d03b      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a74      	ldr	r2, [pc, #464]	; (800e188 <HAL_DMA_IRQHandler+0xa18>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d036      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a73      	ldr	r2, [pc, #460]	; (800e18c <HAL_DMA_IRQHandler+0xa1c>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d031      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a71      	ldr	r2, [pc, #452]	; (800e190 <HAL_DMA_IRQHandler+0xa20>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d02c      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a70      	ldr	r2, [pc, #448]	; (800e194 <HAL_DMA_IRQHandler+0xa24>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d027      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a6e      	ldr	r2, [pc, #440]	; (800e198 <HAL_DMA_IRQHandler+0xa28>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d022      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a6d      	ldr	r2, [pc, #436]	; (800e19c <HAL_DMA_IRQHandler+0xa2c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d01d      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a6b      	ldr	r2, [pc, #428]	; (800e1a0 <HAL_DMA_IRQHandler+0xa30>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d018      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a6a      	ldr	r2, [pc, #424]	; (800e1a4 <HAL_DMA_IRQHandler+0xa34>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d013      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a68      	ldr	r2, [pc, #416]	; (800e1a8 <HAL_DMA_IRQHandler+0xa38>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d00e      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a67      	ldr	r2, [pc, #412]	; (800e1ac <HAL_DMA_IRQHandler+0xa3c>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d009      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a65      	ldr	r2, [pc, #404]	; (800e1b0 <HAL_DMA_IRQHandler+0xa40>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d004      	beq.n	800e028 <HAL_DMA_IRQHandler+0x8b8>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a64      	ldr	r2, [pc, #400]	; (800e1b4 <HAL_DMA_IRQHandler+0xa44>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d108      	bne.n	800e03a <HAL_DMA_IRQHandler+0x8ca>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f022 0201 	bic.w	r2, r2, #1
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	e007      	b.n	800e04a <HAL_DMA_IRQHandler+0x8da>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0201 	bic.w	r2, r2, #1
 800e048:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	3301      	adds	r3, #1
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e052:	429a      	cmp	r2, r3
 800e054:	d307      	bcc.n	800e066 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1f2      	bne.n	800e04a <HAL_DMA_IRQHandler+0x8da>
 800e064:	e000      	b.n	800e068 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e066:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	2b00      	cmp	r3, #0
 800e074:	d004      	beq.n	800e080 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2203      	movs	r2, #3
 800e07a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e07e:	e003      	b.n	800e088 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 8272 	beq.w	800e57e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	4798      	blx	r3
 800e0a2:	e26c      	b.n	800e57e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a43      	ldr	r2, [pc, #268]	; (800e1b8 <HAL_DMA_IRQHandler+0xa48>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d022      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a42      	ldr	r2, [pc, #264]	; (800e1bc <HAL_DMA_IRQHandler+0xa4c>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d01d      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a40      	ldr	r2, [pc, #256]	; (800e1c0 <HAL_DMA_IRQHandler+0xa50>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d018      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a3f      	ldr	r2, [pc, #252]	; (800e1c4 <HAL_DMA_IRQHandler+0xa54>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d013      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a3d      	ldr	r2, [pc, #244]	; (800e1c8 <HAL_DMA_IRQHandler+0xa58>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00e      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a3c      	ldr	r2, [pc, #240]	; (800e1cc <HAL_DMA_IRQHandler+0xa5c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d009      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a3a      	ldr	r2, [pc, #232]	; (800e1d0 <HAL_DMA_IRQHandler+0xa60>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d004      	beq.n	800e0f4 <HAL_DMA_IRQHandler+0x984>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a39      	ldr	r2, [pc, #228]	; (800e1d4 <HAL_DMA_IRQHandler+0xa64>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d101      	bne.n	800e0f8 <HAL_DMA_IRQHandler+0x988>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e000      	b.n	800e0fa <HAL_DMA_IRQHandler+0x98a>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 823f 	beq.w	800e57e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e10c:	f003 031f 	and.w	r3, r3, #31
 800e110:	2204      	movs	r2, #4
 800e112:	409a      	lsls	r2, r3
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	4013      	ands	r3, r2
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f000 80cd 	beq.w	800e2b8 <HAL_DMA_IRQHandler+0xb48>
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	f000 80c7 	beq.w	800e2b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e12e:	f003 031f 	and.w	r3, r3, #31
 800e132:	2204      	movs	r2, #4
 800e134:	409a      	lsls	r2, r3
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e140:	2b00      	cmp	r3, #0
 800e142:	d049      	beq.n	800e1d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d109      	bne.n	800e162 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 8210 	beq.w	800e578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e160:	e20a      	b.n	800e578 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 8206 	beq.w	800e578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e174:	e200      	b.n	800e578 <HAL_DMA_IRQHandler+0xe08>
 800e176:	bf00      	nop
 800e178:	40020010 	.word	0x40020010
 800e17c:	40020028 	.word	0x40020028
 800e180:	40020040 	.word	0x40020040
 800e184:	40020058 	.word	0x40020058
 800e188:	40020070 	.word	0x40020070
 800e18c:	40020088 	.word	0x40020088
 800e190:	400200a0 	.word	0x400200a0
 800e194:	400200b8 	.word	0x400200b8
 800e198:	40020410 	.word	0x40020410
 800e19c:	40020428 	.word	0x40020428
 800e1a0:	40020440 	.word	0x40020440
 800e1a4:	40020458 	.word	0x40020458
 800e1a8:	40020470 	.word	0x40020470
 800e1ac:	40020488 	.word	0x40020488
 800e1b0:	400204a0 	.word	0x400204a0
 800e1b4:	400204b8 	.word	0x400204b8
 800e1b8:	58025408 	.word	0x58025408
 800e1bc:	5802541c 	.word	0x5802541c
 800e1c0:	58025430 	.word	0x58025430
 800e1c4:	58025444 	.word	0x58025444
 800e1c8:	58025458 	.word	0x58025458
 800e1cc:	5802546c 	.word	0x5802546c
 800e1d0:	58025480 	.word	0x58025480
 800e1d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f003 0320 	and.w	r3, r3, #32
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d160      	bne.n	800e2a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a7f      	ldr	r2, [pc, #508]	; (800e3e4 <HAL_DMA_IRQHandler+0xc74>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d04a      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a7d      	ldr	r2, [pc, #500]	; (800e3e8 <HAL_DMA_IRQHandler+0xc78>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d045      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a7c      	ldr	r2, [pc, #496]	; (800e3ec <HAL_DMA_IRQHandler+0xc7c>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d040      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a7a      	ldr	r2, [pc, #488]	; (800e3f0 <HAL_DMA_IRQHandler+0xc80>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d03b      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a79      	ldr	r2, [pc, #484]	; (800e3f4 <HAL_DMA_IRQHandler+0xc84>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d036      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a77      	ldr	r2, [pc, #476]	; (800e3f8 <HAL_DMA_IRQHandler+0xc88>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d031      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a76      	ldr	r2, [pc, #472]	; (800e3fc <HAL_DMA_IRQHandler+0xc8c>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d02c      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a74      	ldr	r2, [pc, #464]	; (800e400 <HAL_DMA_IRQHandler+0xc90>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d027      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a73      	ldr	r2, [pc, #460]	; (800e404 <HAL_DMA_IRQHandler+0xc94>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d022      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a71      	ldr	r2, [pc, #452]	; (800e408 <HAL_DMA_IRQHandler+0xc98>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d01d      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a70      	ldr	r2, [pc, #448]	; (800e40c <HAL_DMA_IRQHandler+0xc9c>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d018      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a6e      	ldr	r2, [pc, #440]	; (800e410 <HAL_DMA_IRQHandler+0xca0>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d013      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a6d      	ldr	r2, [pc, #436]	; (800e414 <HAL_DMA_IRQHandler+0xca4>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d00e      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a6b      	ldr	r2, [pc, #428]	; (800e418 <HAL_DMA_IRQHandler+0xca8>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d009      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a6a      	ldr	r2, [pc, #424]	; (800e41c <HAL_DMA_IRQHandler+0xcac>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d004      	beq.n	800e282 <HAL_DMA_IRQHandler+0xb12>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a68      	ldr	r2, [pc, #416]	; (800e420 <HAL_DMA_IRQHandler+0xcb0>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d108      	bne.n	800e294 <HAL_DMA_IRQHandler+0xb24>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f022 0208 	bic.w	r2, r2, #8
 800e290:	601a      	str	r2, [r3, #0]
 800e292:	e007      	b.n	800e2a4 <HAL_DMA_IRQHandler+0xb34>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f022 0204 	bic.w	r2, r2, #4
 800e2a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f000 8165 	beq.w	800e578 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e2b6:	e15f      	b.n	800e578 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2bc:	f003 031f 	and.w	r3, r3, #31
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	409a      	lsls	r2, r3
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 80c5 	beq.w	800e458 <HAL_DMA_IRQHandler+0xce8>
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f003 0302 	and.w	r3, r3, #2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80bf 	beq.w	800e458 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2de:	f003 031f 	and.w	r3, r3, #31
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	409a      	lsls	r2, r3
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d018      	beq.n	800e326 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d109      	bne.n	800e312 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 813a 	beq.w	800e57c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e310:	e134      	b.n	800e57c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 8130 	beq.w	800e57c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e324:	e12a      	b.n	800e57c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	f003 0320 	and.w	r3, r3, #32
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f040 8089 	bne.w	800e444 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a2b      	ldr	r2, [pc, #172]	; (800e3e4 <HAL_DMA_IRQHandler+0xc74>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d04a      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a29      	ldr	r2, [pc, #164]	; (800e3e8 <HAL_DMA_IRQHandler+0xc78>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d045      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a28      	ldr	r2, [pc, #160]	; (800e3ec <HAL_DMA_IRQHandler+0xc7c>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d040      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a26      	ldr	r2, [pc, #152]	; (800e3f0 <HAL_DMA_IRQHandler+0xc80>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d03b      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a25      	ldr	r2, [pc, #148]	; (800e3f4 <HAL_DMA_IRQHandler+0xc84>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d036      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a23      	ldr	r2, [pc, #140]	; (800e3f8 <HAL_DMA_IRQHandler+0xc88>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d031      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a22      	ldr	r2, [pc, #136]	; (800e3fc <HAL_DMA_IRQHandler+0xc8c>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d02c      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a20      	ldr	r2, [pc, #128]	; (800e400 <HAL_DMA_IRQHandler+0xc90>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d027      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a1f      	ldr	r2, [pc, #124]	; (800e404 <HAL_DMA_IRQHandler+0xc94>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d022      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a1d      	ldr	r2, [pc, #116]	; (800e408 <HAL_DMA_IRQHandler+0xc98>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d01d      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a1c      	ldr	r2, [pc, #112]	; (800e40c <HAL_DMA_IRQHandler+0xc9c>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d018      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a1a      	ldr	r2, [pc, #104]	; (800e410 <HAL_DMA_IRQHandler+0xca0>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d013      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a19      	ldr	r2, [pc, #100]	; (800e414 <HAL_DMA_IRQHandler+0xca4>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d00e      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a17      	ldr	r2, [pc, #92]	; (800e418 <HAL_DMA_IRQHandler+0xca8>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d009      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a16      	ldr	r2, [pc, #88]	; (800e41c <HAL_DMA_IRQHandler+0xcac>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d004      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0xc62>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a14      	ldr	r2, [pc, #80]	; (800e420 <HAL_DMA_IRQHandler+0xcb0>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d128      	bne.n	800e424 <HAL_DMA_IRQHandler+0xcb4>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f022 0214 	bic.w	r2, r2, #20
 800e3e0:	601a      	str	r2, [r3, #0]
 800e3e2:	e027      	b.n	800e434 <HAL_DMA_IRQHandler+0xcc4>
 800e3e4:	40020010 	.word	0x40020010
 800e3e8:	40020028 	.word	0x40020028
 800e3ec:	40020040 	.word	0x40020040
 800e3f0:	40020058 	.word	0x40020058
 800e3f4:	40020070 	.word	0x40020070
 800e3f8:	40020088 	.word	0x40020088
 800e3fc:	400200a0 	.word	0x400200a0
 800e400:	400200b8 	.word	0x400200b8
 800e404:	40020410 	.word	0x40020410
 800e408:	40020428 	.word	0x40020428
 800e40c:	40020440 	.word	0x40020440
 800e410:	40020458 	.word	0x40020458
 800e414:	40020470 	.word	0x40020470
 800e418:	40020488 	.word	0x40020488
 800e41c:	400204a0 	.word	0x400204a0
 800e420:	400204b8 	.word	0x400204b8
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f022 020a 	bic.w	r2, r2, #10
 800e432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 8097 	beq.w	800e57c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e456:	e091      	b.n	800e57c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e45c:	f003 031f 	and.w	r3, r3, #31
 800e460:	2208      	movs	r2, #8
 800e462:	409a      	lsls	r2, r3
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	4013      	ands	r3, r2
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 8088 	beq.w	800e57e <HAL_DMA_IRQHandler+0xe0e>
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	f003 0308 	and.w	r3, r3, #8
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 8082 	beq.w	800e57e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a41      	ldr	r2, [pc, #260]	; (800e584 <HAL_DMA_IRQHandler+0xe14>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d04a      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a3f      	ldr	r2, [pc, #252]	; (800e588 <HAL_DMA_IRQHandler+0xe18>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d045      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a3e      	ldr	r2, [pc, #248]	; (800e58c <HAL_DMA_IRQHandler+0xe1c>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d040      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a3c      	ldr	r2, [pc, #240]	; (800e590 <HAL_DMA_IRQHandler+0xe20>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d03b      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a3b      	ldr	r2, [pc, #236]	; (800e594 <HAL_DMA_IRQHandler+0xe24>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d036      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a39      	ldr	r2, [pc, #228]	; (800e598 <HAL_DMA_IRQHandler+0xe28>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d031      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a38      	ldr	r2, [pc, #224]	; (800e59c <HAL_DMA_IRQHandler+0xe2c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d02c      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a36      	ldr	r2, [pc, #216]	; (800e5a0 <HAL_DMA_IRQHandler+0xe30>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d027      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a35      	ldr	r2, [pc, #212]	; (800e5a4 <HAL_DMA_IRQHandler+0xe34>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d022      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a33      	ldr	r2, [pc, #204]	; (800e5a8 <HAL_DMA_IRQHandler+0xe38>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d01d      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a32      	ldr	r2, [pc, #200]	; (800e5ac <HAL_DMA_IRQHandler+0xe3c>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d018      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a30      	ldr	r2, [pc, #192]	; (800e5b0 <HAL_DMA_IRQHandler+0xe40>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d013      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a2f      	ldr	r2, [pc, #188]	; (800e5b4 <HAL_DMA_IRQHandler+0xe44>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d00e      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a2d      	ldr	r2, [pc, #180]	; (800e5b8 <HAL_DMA_IRQHandler+0xe48>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d009      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a2c      	ldr	r2, [pc, #176]	; (800e5bc <HAL_DMA_IRQHandler+0xe4c>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d004      	beq.n	800e51a <HAL_DMA_IRQHandler+0xdaa>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a2a      	ldr	r2, [pc, #168]	; (800e5c0 <HAL_DMA_IRQHandler+0xe50>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d108      	bne.n	800e52c <HAL_DMA_IRQHandler+0xdbc>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f022 021c 	bic.w	r2, r2, #28
 800e528:	601a      	str	r2, [r3, #0]
 800e52a:	e007      	b.n	800e53c <HAL_DMA_IRQHandler+0xdcc>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f022 020e 	bic.w	r2, r2, #14
 800e53a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e540:	f003 031f 	and.w	r3, r3, #31
 800e544:	2201      	movs	r2, #1
 800e546:	409a      	lsls	r2, r3
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d009      	beq.n	800e57e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	4798      	blx	r3
 800e572:	e004      	b.n	800e57e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e574:	bf00      	nop
 800e576:	e002      	b.n	800e57e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e578:	bf00      	nop
 800e57a:	e000      	b.n	800e57e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e57c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e57e:	3728      	adds	r7, #40	; 0x28
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	40020010 	.word	0x40020010
 800e588:	40020028 	.word	0x40020028
 800e58c:	40020040 	.word	0x40020040
 800e590:	40020058 	.word	0x40020058
 800e594:	40020070 	.word	0x40020070
 800e598:	40020088 	.word	0x40020088
 800e59c:	400200a0 	.word	0x400200a0
 800e5a0:	400200b8 	.word	0x400200b8
 800e5a4:	40020410 	.word	0x40020410
 800e5a8:	40020428 	.word	0x40020428
 800e5ac:	40020440 	.word	0x40020440
 800e5b0:	40020458 	.word	0x40020458
 800e5b4:	40020470 	.word	0x40020470
 800e5b8:	40020488 	.word	0x40020488
 800e5bc:	400204a0 	.word	0x400204a0
 800e5c0:	400204b8 	.word	0x400204b8

0800e5c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e5d2:	b2db      	uxtb	r3, r3
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a42      	ldr	r2, [pc, #264]	; (800e6f8 <DMA_CalcBaseAndBitshift+0x118>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d04a      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a41      	ldr	r2, [pc, #260]	; (800e6fc <DMA_CalcBaseAndBitshift+0x11c>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d045      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a3f      	ldr	r2, [pc, #252]	; (800e700 <DMA_CalcBaseAndBitshift+0x120>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d040      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a3e      	ldr	r2, [pc, #248]	; (800e704 <DMA_CalcBaseAndBitshift+0x124>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d03b      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a3c      	ldr	r2, [pc, #240]	; (800e708 <DMA_CalcBaseAndBitshift+0x128>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d036      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a3b      	ldr	r2, [pc, #236]	; (800e70c <DMA_CalcBaseAndBitshift+0x12c>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d031      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a39      	ldr	r2, [pc, #228]	; (800e710 <DMA_CalcBaseAndBitshift+0x130>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d02c      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a38      	ldr	r2, [pc, #224]	; (800e714 <DMA_CalcBaseAndBitshift+0x134>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d027      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a36      	ldr	r2, [pc, #216]	; (800e718 <DMA_CalcBaseAndBitshift+0x138>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d022      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a35      	ldr	r2, [pc, #212]	; (800e71c <DMA_CalcBaseAndBitshift+0x13c>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d01d      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a33      	ldr	r2, [pc, #204]	; (800e720 <DMA_CalcBaseAndBitshift+0x140>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d018      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a32      	ldr	r2, [pc, #200]	; (800e724 <DMA_CalcBaseAndBitshift+0x144>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d013      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a30      	ldr	r2, [pc, #192]	; (800e728 <DMA_CalcBaseAndBitshift+0x148>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d00e      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a2f      	ldr	r2, [pc, #188]	; (800e72c <DMA_CalcBaseAndBitshift+0x14c>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d009      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a2d      	ldr	r2, [pc, #180]	; (800e730 <DMA_CalcBaseAndBitshift+0x150>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d004      	beq.n	800e688 <DMA_CalcBaseAndBitshift+0xa8>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a2c      	ldr	r2, [pc, #176]	; (800e734 <DMA_CalcBaseAndBitshift+0x154>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d101      	bne.n	800e68c <DMA_CalcBaseAndBitshift+0xac>
 800e688:	2301      	movs	r3, #1
 800e68a:	e000      	b.n	800e68e <DMA_CalcBaseAndBitshift+0xae>
 800e68c:	2300      	movs	r3, #0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d024      	beq.n	800e6dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	3b10      	subs	r3, #16
 800e69a:	4a27      	ldr	r2, [pc, #156]	; (800e738 <DMA_CalcBaseAndBitshift+0x158>)
 800e69c:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a0:	091b      	lsrs	r3, r3, #4
 800e6a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f003 0307 	and.w	r3, r3, #7
 800e6aa:	4a24      	ldr	r2, [pc, #144]	; (800e73c <DMA_CalcBaseAndBitshift+0x15c>)
 800e6ac:	5cd3      	ldrb	r3, [r2, r3]
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	d908      	bls.n	800e6cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	4b1f      	ldr	r3, [pc, #124]	; (800e740 <DMA_CalcBaseAndBitshift+0x160>)
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	1d1a      	adds	r2, r3, #4
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	659a      	str	r2, [r3, #88]	; 0x58
 800e6ca:	e00d      	b.n	800e6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4b1b      	ldr	r3, [pc, #108]	; (800e740 <DMA_CalcBaseAndBitshift+0x160>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	6593      	str	r3, [r2, #88]	; 0x58
 800e6da:	e005      	b.n	800e6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr
 800e6f8:	40020010 	.word	0x40020010
 800e6fc:	40020028 	.word	0x40020028
 800e700:	40020040 	.word	0x40020040
 800e704:	40020058 	.word	0x40020058
 800e708:	40020070 	.word	0x40020070
 800e70c:	40020088 	.word	0x40020088
 800e710:	400200a0 	.word	0x400200a0
 800e714:	400200b8 	.word	0x400200b8
 800e718:	40020410 	.word	0x40020410
 800e71c:	40020428 	.word	0x40020428
 800e720:	40020440 	.word	0x40020440
 800e724:	40020458 	.word	0x40020458
 800e728:	40020470 	.word	0x40020470
 800e72c:	40020488 	.word	0x40020488
 800e730:	400204a0 	.word	0x400204a0
 800e734:	400204b8 	.word	0x400204b8
 800e738:	aaaaaaab 	.word	0xaaaaaaab
 800e73c:	08037ac8 	.word	0x08037ac8
 800e740:	fffffc00 	.word	0xfffffc00

0800e744 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	699b      	ldr	r3, [r3, #24]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d120      	bne.n	800e79a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d858      	bhi.n	800e812 <DMA_CheckFifoParam+0xce>
 800e760:	a201      	add	r2, pc, #4	; (adr r2, 800e768 <DMA_CheckFifoParam+0x24>)
 800e762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e766:	bf00      	nop
 800e768:	0800e779 	.word	0x0800e779
 800e76c:	0800e78b 	.word	0x0800e78b
 800e770:	0800e779 	.word	0x0800e779
 800e774:	0800e813 	.word	0x0800e813
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d048      	beq.n	800e816 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e788:	e045      	b.n	800e816 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e792:	d142      	bne.n	800e81a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e798:	e03f      	b.n	800e81a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7a2:	d123      	bne.n	800e7ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d838      	bhi.n	800e81e <DMA_CheckFifoParam+0xda>
 800e7ac:	a201      	add	r2, pc, #4	; (adr r2, 800e7b4 <DMA_CheckFifoParam+0x70>)
 800e7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b2:	bf00      	nop
 800e7b4:	0800e7c5 	.word	0x0800e7c5
 800e7b8:	0800e7cb 	.word	0x0800e7cb
 800e7bc:	0800e7c5 	.word	0x0800e7c5
 800e7c0:	0800e7dd 	.word	0x0800e7dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	73fb      	strb	r3, [r7, #15]
        break;
 800e7c8:	e030      	b.n	800e82c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d025      	beq.n	800e822 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e7da:	e022      	b.n	800e822 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e7e4:	d11f      	bne.n	800e826 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e7ea:	e01c      	b.n	800e826 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d902      	bls.n	800e7fa <DMA_CheckFifoParam+0xb6>
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d003      	beq.n	800e800 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e7f8:	e018      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]
        break;
 800e7fe:	e015      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00e      	beq.n	800e82a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e80c:	2301      	movs	r3, #1
 800e80e:	73fb      	strb	r3, [r7, #15]
    break;
 800e810:	e00b      	b.n	800e82a <DMA_CheckFifoParam+0xe6>
        break;
 800e812:	bf00      	nop
 800e814:	e00a      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        break;
 800e816:	bf00      	nop
 800e818:	e008      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        break;
 800e81a:	bf00      	nop
 800e81c:	e006      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        break;
 800e81e:	bf00      	nop
 800e820:	e004      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        break;
 800e822:	bf00      	nop
 800e824:	e002      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
        break;
 800e826:	bf00      	nop
 800e828:	e000      	b.n	800e82c <DMA_CheckFifoParam+0xe8>
    break;
 800e82a:	bf00      	nop
    }
  }

  return status;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop

0800e83c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a38      	ldr	r2, [pc, #224]	; (800e930 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d022      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a36      	ldr	r2, [pc, #216]	; (800e934 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d01d      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a35      	ldr	r2, [pc, #212]	; (800e938 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d018      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a33      	ldr	r2, [pc, #204]	; (800e93c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d013      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a32      	ldr	r2, [pc, #200]	; (800e940 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d00e      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a30      	ldr	r2, [pc, #192]	; (800e944 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d009      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a2f      	ldr	r2, [pc, #188]	; (800e948 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d004      	beq.n	800e89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a2d      	ldr	r2, [pc, #180]	; (800e94c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d101      	bne.n	800e89e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e000      	b.n	800e8a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01a      	beq.n	800e8da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	3b08      	subs	r3, #8
 800e8ac:	4a28      	ldr	r2, [pc, #160]	; (800e950 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e8b2:	091b      	lsrs	r3, r3, #4
 800e8b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	4b26      	ldr	r3, [pc, #152]	; (800e954 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e8ba:	4413      	add	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	461a      	mov	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a24      	ldr	r2, [pc, #144]	; (800e958 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e8c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f003 031f 	and.w	r3, r3, #31
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	409a      	lsls	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e8d8:	e024      	b.n	800e924 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	3b10      	subs	r3, #16
 800e8e2:	4a1e      	ldr	r2, [pc, #120]	; (800e95c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e8:	091b      	lsrs	r3, r3, #4
 800e8ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	4a1c      	ldr	r2, [pc, #112]	; (800e960 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d806      	bhi.n	800e902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	4a1b      	ldr	r2, [pc, #108]	; (800e964 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d902      	bls.n	800e902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	3308      	adds	r3, #8
 800e900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	4b18      	ldr	r3, [pc, #96]	; (800e968 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e906:	4413      	add	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	461a      	mov	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a16      	ldr	r2, [pc, #88]	; (800e96c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e914:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f003 031f 	and.w	r3, r3, #31
 800e91c:	2201      	movs	r2, #1
 800e91e:	409a      	lsls	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e924:	bf00      	nop
 800e926:	3714      	adds	r7, #20
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr
 800e930:	58025408 	.word	0x58025408
 800e934:	5802541c 	.word	0x5802541c
 800e938:	58025430 	.word	0x58025430
 800e93c:	58025444 	.word	0x58025444
 800e940:	58025458 	.word	0x58025458
 800e944:	5802546c 	.word	0x5802546c
 800e948:	58025480 	.word	0x58025480
 800e94c:	58025494 	.word	0x58025494
 800e950:	cccccccd 	.word	0xcccccccd
 800e954:	16009600 	.word	0x16009600
 800e958:	58025880 	.word	0x58025880
 800e95c:	aaaaaaab 	.word	0xaaaaaaab
 800e960:	400204b8 	.word	0x400204b8
 800e964:	4002040f 	.word	0x4002040f
 800e968:	10008200 	.word	0x10008200
 800e96c:	40020880 	.word	0x40020880

0800e970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d04a      	beq.n	800ea1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b08      	cmp	r3, #8
 800e98a:	d847      	bhi.n	800ea1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a25      	ldr	r2, [pc, #148]	; (800ea28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d022      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a24      	ldr	r2, [pc, #144]	; (800ea2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d01d      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a22      	ldr	r2, [pc, #136]	; (800ea30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d018      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a21      	ldr	r2, [pc, #132]	; (800ea34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d013      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a1f      	ldr	r2, [pc, #124]	; (800ea38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d00e      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ea3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d009      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a1c      	ldr	r2, [pc, #112]	; (800ea40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d004      	beq.n	800e9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a1b      	ldr	r2, [pc, #108]	; (800ea44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d101      	bne.n	800e9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e000      	b.n	800e9e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00a      	beq.n	800e9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e9ea:	4413      	add	r3, r2
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a15      	ldr	r2, [pc, #84]	; (800ea4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e9f8:	671a      	str	r2, [r3, #112]	; 0x70
 800e9fa:	e009      	b.n	800ea10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	4b14      	ldr	r3, [pc, #80]	; (800ea50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ea00:	4413      	add	r3, r2
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	461a      	mov	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a11      	ldr	r2, [pc, #68]	; (800ea54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ea0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	2201      	movs	r2, #1
 800ea16:	409a      	lsls	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ea1c:	bf00      	nop
 800ea1e:	3714      	adds	r7, #20
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	58025408 	.word	0x58025408
 800ea2c:	5802541c 	.word	0x5802541c
 800ea30:	58025430 	.word	0x58025430
 800ea34:	58025444 	.word	0x58025444
 800ea38:	58025458 	.word	0x58025458
 800ea3c:	5802546c 	.word	0x5802546c
 800ea40:	58025480 	.word	0x58025480
 800ea44:	58025494 	.word	0x58025494
 800ea48:	1600963f 	.word	0x1600963f
 800ea4c:	58025940 	.word	0x58025940
 800ea50:	1000823f 	.word	0x1000823f
 800ea54:	40020940 	.word	0x40020940

0800ea58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b089      	sub	sp, #36	; 0x24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ea62:	2300      	movs	r3, #0
 800ea64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ea66:	4b89      	ldr	r3, [pc, #548]	; (800ec8c <HAL_GPIO_Init+0x234>)
 800ea68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ea6a:	e194      	b.n	800ed96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	2101      	movs	r1, #1
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	fa01 f303 	lsl.w	r3, r1, r3
 800ea78:	4013      	ands	r3, r2
 800ea7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 8186 	beq.w	800ed90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	f003 0303 	and.w	r3, r3, #3
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d005      	beq.n	800ea9c <HAL_GPIO_Init+0x44>
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	f003 0303 	and.w	r3, r3, #3
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d130      	bne.n	800eafe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	2203      	movs	r2, #3
 800eaa8:	fa02 f303 	lsl.w	r3, r2, r3
 800eaac:	43db      	mvns	r3, r3
 800eaae:	69ba      	ldr	r2, [r7, #24]
 800eab0:	4013      	ands	r3, r2
 800eab2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	68da      	ldr	r2, [r3, #12]
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	fa02 f303 	lsl.w	r3, r2, r3
 800eac0:	69ba      	ldr	r2, [r7, #24]
 800eac2:	4313      	orrs	r3, r2
 800eac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ead2:	2201      	movs	r2, #1
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	fa02 f303 	lsl.w	r3, r2, r3
 800eada:	43db      	mvns	r3, r3
 800eadc:	69ba      	ldr	r2, [r7, #24]
 800eade:	4013      	ands	r3, r2
 800eae0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	091b      	lsrs	r3, r3, #4
 800eae8:	f003 0201 	and.w	r2, r3, #1
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	69ba      	ldr	r2, [r7, #24]
 800eafc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	f003 0303 	and.w	r3, r3, #3
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d017      	beq.n	800eb3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	2203      	movs	r2, #3
 800eb16:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1a:	43db      	mvns	r3, r3
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	4013      	ands	r3, r2
 800eb20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	689a      	ldr	r2, [r3, #8]
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	69ba      	ldr	r2, [r7, #24]
 800eb38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	f003 0303 	and.w	r3, r3, #3
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d123      	bne.n	800eb8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	08da      	lsrs	r2, r3, #3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	3208      	adds	r2, #8
 800eb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	220f      	movs	r2, #15
 800eb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb62:	43db      	mvns	r3, r3
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	4013      	ands	r3, r2
 800eb68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	691a      	ldr	r2, [r3, #16]
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	f003 0307 	and.w	r3, r3, #7
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	69ba      	ldr	r2, [r7, #24]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	08da      	lsrs	r2, r3, #3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3208      	adds	r2, #8
 800eb88:	69b9      	ldr	r1, [r7, #24]
 800eb8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	2203      	movs	r2, #3
 800eb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb9e:	43db      	mvns	r3, r3
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	4013      	ands	r3, r2
 800eba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	f003 0203 	and.w	r2, r3, #3
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebb6:	69ba      	ldr	r2, [r7, #24]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	69ba      	ldr	r2, [r7, #24]
 800ebc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f000 80e0 	beq.w	800ed90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ebd0:	4b2f      	ldr	r3, [pc, #188]	; (800ec90 <HAL_GPIO_Init+0x238>)
 800ebd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ebd6:	4a2e      	ldr	r2, [pc, #184]	; (800ec90 <HAL_GPIO_Init+0x238>)
 800ebd8:	f043 0302 	orr.w	r3, r3, #2
 800ebdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ebe0:	4b2b      	ldr	r3, [pc, #172]	; (800ec90 <HAL_GPIO_Init+0x238>)
 800ebe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ebe6:	f003 0302 	and.w	r3, r3, #2
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ebee:	4a29      	ldr	r2, [pc, #164]	; (800ec94 <HAL_GPIO_Init+0x23c>)
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	089b      	lsrs	r3, r3, #2
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	f003 0303 	and.w	r3, r3, #3
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	220f      	movs	r2, #15
 800ec06:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0a:	43db      	mvns	r3, r3
 800ec0c:	69ba      	ldr	r2, [r7, #24]
 800ec0e:	4013      	ands	r3, r2
 800ec10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a20      	ldr	r2, [pc, #128]	; (800ec98 <HAL_GPIO_Init+0x240>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d052      	beq.n	800ecc0 <HAL_GPIO_Init+0x268>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4a1f      	ldr	r2, [pc, #124]	; (800ec9c <HAL_GPIO_Init+0x244>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d031      	beq.n	800ec86 <HAL_GPIO_Init+0x22e>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4a1e      	ldr	r2, [pc, #120]	; (800eca0 <HAL_GPIO_Init+0x248>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d02b      	beq.n	800ec82 <HAL_GPIO_Init+0x22a>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a1d      	ldr	r2, [pc, #116]	; (800eca4 <HAL_GPIO_Init+0x24c>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d025      	beq.n	800ec7e <HAL_GPIO_Init+0x226>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a1c      	ldr	r2, [pc, #112]	; (800eca8 <HAL_GPIO_Init+0x250>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d01f      	beq.n	800ec7a <HAL_GPIO_Init+0x222>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a1b      	ldr	r2, [pc, #108]	; (800ecac <HAL_GPIO_Init+0x254>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d019      	beq.n	800ec76 <HAL_GPIO_Init+0x21e>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4a1a      	ldr	r2, [pc, #104]	; (800ecb0 <HAL_GPIO_Init+0x258>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d013      	beq.n	800ec72 <HAL_GPIO_Init+0x21a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a19      	ldr	r2, [pc, #100]	; (800ecb4 <HAL_GPIO_Init+0x25c>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d00d      	beq.n	800ec6e <HAL_GPIO_Init+0x216>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a18      	ldr	r2, [pc, #96]	; (800ecb8 <HAL_GPIO_Init+0x260>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d007      	beq.n	800ec6a <HAL_GPIO_Init+0x212>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a17      	ldr	r2, [pc, #92]	; (800ecbc <HAL_GPIO_Init+0x264>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d101      	bne.n	800ec66 <HAL_GPIO_Init+0x20e>
 800ec62:	2309      	movs	r3, #9
 800ec64:	e02d      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec66:	230a      	movs	r3, #10
 800ec68:	e02b      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec6a:	2308      	movs	r3, #8
 800ec6c:	e029      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec6e:	2307      	movs	r3, #7
 800ec70:	e027      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec72:	2306      	movs	r3, #6
 800ec74:	e025      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec76:	2305      	movs	r3, #5
 800ec78:	e023      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec7a:	2304      	movs	r3, #4
 800ec7c:	e021      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e01f      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec82:	2302      	movs	r3, #2
 800ec84:	e01d      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec86:	2301      	movs	r3, #1
 800ec88:	e01b      	b.n	800ecc2 <HAL_GPIO_Init+0x26a>
 800ec8a:	bf00      	nop
 800ec8c:	58000080 	.word	0x58000080
 800ec90:	58024400 	.word	0x58024400
 800ec94:	58000400 	.word	0x58000400
 800ec98:	58020000 	.word	0x58020000
 800ec9c:	58020400 	.word	0x58020400
 800eca0:	58020800 	.word	0x58020800
 800eca4:	58020c00 	.word	0x58020c00
 800eca8:	58021000 	.word	0x58021000
 800ecac:	58021400 	.word	0x58021400
 800ecb0:	58021800 	.word	0x58021800
 800ecb4:	58021c00 	.word	0x58021c00
 800ecb8:	58022000 	.word	0x58022000
 800ecbc:	58022400 	.word	0x58022400
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	f002 0203 	and.w	r2, r2, #3
 800ecc8:	0092      	lsls	r2, r2, #2
 800ecca:	4093      	lsls	r3, r2
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ecd2:	4938      	ldr	r1, [pc, #224]	; (800edb4 <HAL_GPIO_Init+0x35c>)
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	089b      	lsrs	r3, r3, #2
 800ecd8:	3302      	adds	r3, #2
 800ecda:	69ba      	ldr	r2, [r7, #24]
 800ecdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ece0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	43db      	mvns	r3, r3
 800ecec:	69ba      	ldr	r2, [r7, #24]
 800ecee:	4013      	ands	r3, r2
 800ecf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d003      	beq.n	800ed06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ecfe:	69ba      	ldr	r2, [r7, #24]
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ed06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ed0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	43db      	mvns	r3, r3
 800ed1a:	69ba      	ldr	r2, [r7, #24]
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d003      	beq.n	800ed34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ed34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	43db      	mvns	r3, r3
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	4013      	ands	r3, r2
 800ed4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d003      	beq.n	800ed60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ed58:	69ba      	ldr	r2, [r7, #24]
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	43db      	mvns	r3, r3
 800ed70:	69ba      	ldr	r2, [r7, #24]
 800ed72:	4013      	ands	r3, r2
 800ed74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d003      	beq.n	800ed8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ed82:	69ba      	ldr	r2, [r7, #24]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	3301      	adds	r3, #1
 800ed94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f47f ae63 	bne.w	800ea6c <HAL_GPIO_Init+0x14>
  }
}
 800eda6:	bf00      	nop
 800eda8:	bf00      	nop
 800edaa:	3724      	adds	r7, #36	; 0x24
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	58000400 	.word	0x58000400

0800edb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	807b      	strh	r3, [r7, #2]
 800edc4:	4613      	mov	r3, r2
 800edc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800edc8:	787b      	ldrb	r3, [r7, #1]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800edce:	887a      	ldrh	r2, [r7, #2]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800edd4:	e003      	b.n	800edde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800edd6:	887b      	ldrh	r3, [r7, #2]
 800edd8:	041a      	lsls	r2, r3, #16
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	619a      	str	r2, [r3, #24]
}
 800edde:	bf00      	nop
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
	...

0800edec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e07f      	b.n	800eefe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f7fb fc42 	bl	800a69c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2224      	movs	r2, #36	; 0x24
 800ee1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f022 0201 	bic.w	r2, r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ee3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	689a      	ldr	r2, [r3, #8]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d107      	bne.n	800ee66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	689a      	ldr	r2, [r3, #8]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee62:	609a      	str	r2, [r3, #8]
 800ee64:	e006      	b.n	800ee74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	689a      	ldr	r2, [r3, #8]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ee72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d104      	bne.n	800ee86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	6859      	ldr	r1, [r3, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	4b1d      	ldr	r3, [pc, #116]	; (800ef08 <HAL_I2C_Init+0x11c>)
 800ee92:	430b      	orrs	r3, r1
 800ee94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68da      	ldr	r2, [r3, #12]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eea4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	691a      	ldr	r2, [r3, #16]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	430a      	orrs	r2, r1
 800eebe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	69d9      	ldr	r1, [r3, #28]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a1a      	ldr	r2, [r3, #32]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	430a      	orrs	r2, r1
 800eece:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f042 0201 	orr.w	r2, r2, #1
 800eede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2220      	movs	r2, #32
 800eeea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	02008000 	.word	0x02008000

0800ef0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d005      	beq.n	800ef38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	68f9      	ldr	r1, [r7, #12]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	4798      	blx	r3
  }
}
 800ef38:	bf00      	nop
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	0a1b      	lsrs	r3, r3, #8
 800ef5c:	f003 0301 	and.w	r3, r3, #1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d010      	beq.n	800ef86 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	09db      	lsrs	r3, r3, #7
 800ef68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00a      	beq.n	800ef86 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef74:	f043 0201 	orr.w	r2, r3, #1
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef84:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	0a9b      	lsrs	r3, r3, #10
 800ef8a:	f003 0301 	and.w	r3, r3, #1
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d010      	beq.n	800efb4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	09db      	lsrs	r3, r3, #7
 800ef96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00a      	beq.n	800efb4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efa2:	f043 0208 	orr.w	r2, r3, #8
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efb2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	0a5b      	lsrs	r3, r3, #9
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d010      	beq.n	800efe2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	09db      	lsrs	r3, r3, #7
 800efc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00a      	beq.n	800efe2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efd0:	f043 0202 	orr.w	r2, r3, #2
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efe0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efe6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f003 030b 	and.w	r3, r3, #11
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d003      	beq.n	800effa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800eff2:	68f9      	ldr	r1, [r7, #12]
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f000 fc77 	bl	800f8e8 <I2C_ITError>
  }
}
 800effa:	bf00      	nop
 800effc:	3718      	adds	r7, #24
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f002:	b480      	push	{r7}
 800f004:	b083      	sub	sp, #12
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f00a:	bf00      	nop
 800f00c:	370c      	adds	r7, #12
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f016:	b480      	push	{r7}
 800f018:	b083      	sub	sp, #12
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f01e:	bf00      	nop
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f02a:	b480      	push	{r7}
 800f02c:	b083      	sub	sp, #12
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	460b      	mov	r3, r1
 800f034:	70fb      	strb	r3, [r7, #3]
 800f036:	4613      	mov	r3, r2
 800f038:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f046:	b480      	push	{r7}
 800f048:	b083      	sub	sp, #12
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f04e:	bf00      	nop
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f05a:	b480      	push	{r7}
 800f05c:	b083      	sub	sp, #12
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f062:	bf00      	nop
 800f064:	370c      	adds	r7, #12
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f06e:	b480      	push	{r7}
 800f070:	b083      	sub	sp, #12
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f076:	bf00      	nop
 800f078:	370c      	adds	r7, #12
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr

0800f082 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b086      	sub	sp, #24
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f092:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d101      	bne.n	800f0a6 <I2C_Slave_ISR_IT+0x24>
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	e0ec      	b.n	800f280 <I2C_Slave_ISR_IT+0x1fe>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	095b      	lsrs	r3, r3, #5
 800f0b2:	f003 0301 	and.w	r3, r3, #1
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d009      	beq.n	800f0ce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	095b      	lsrs	r3, r3, #5
 800f0be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d003      	beq.n	800f0ce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f0c6:	6939      	ldr	r1, [r7, #16]
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 f9bf 	bl	800f44c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	091b      	lsrs	r3, r3, #4
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d04d      	beq.n	800f176 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	091b      	lsrs	r3, r3, #4
 800f0de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d047      	beq.n	800f176 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d128      	bne.n	800f142 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b28      	cmp	r3, #40	; 0x28
 800f0fa:	d108      	bne.n	800f10e <I2C_Slave_ISR_IT+0x8c>
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f102:	d104      	bne.n	800f10e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f104:	6939      	ldr	r1, [r7, #16]
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 fb98 	bl	800f83c <I2C_ITListenCplt>
 800f10c:	e032      	b.n	800f174 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b29      	cmp	r3, #41	; 0x29
 800f118:	d10e      	bne.n	800f138 <I2C_Slave_ISR_IT+0xb6>
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f120:	d00a      	beq.n	800f138 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2210      	movs	r2, #16
 800f128:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f000 fcd3 	bl	800fad6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f000 f92d 	bl	800f390 <I2C_ITSlaveSeqCplt>
 800f136:	e01d      	b.n	800f174 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2210      	movs	r2, #16
 800f13e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f140:	e096      	b.n	800f270 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2210      	movs	r2, #16
 800f148:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f14e:	f043 0204 	orr.w	r2, r3, #4
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d004      	beq.n	800f166 <I2C_Slave_ISR_IT+0xe4>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f162:	f040 8085 	bne.w	800f270 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f16a:	4619      	mov	r1, r3
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 fbbb 	bl	800f8e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f172:	e07d      	b.n	800f270 <I2C_Slave_ISR_IT+0x1ee>
 800f174:	e07c      	b.n	800f270 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	089b      	lsrs	r3, r3, #2
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d030      	beq.n	800f1e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	089b      	lsrs	r3, r3, #2
 800f186:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d02a      	beq.n	800f1e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f192:	b29b      	uxth	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d018      	beq.n	800f1ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a2:	b2d2      	uxtb	r2, r2
 800f1a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d14f      	bne.n	800f274 <I2C_Slave_ISR_IT+0x1f2>
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f1da:	d04b      	beq.n	800f274 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f000 f8d7 	bl	800f390 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f1e2:	e047      	b.n	800f274 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	08db      	lsrs	r3, r3, #3
 800f1e8:	f003 0301 	and.w	r3, r3, #1
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00a      	beq.n	800f206 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	08db      	lsrs	r3, r3, #3
 800f1f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f1fc:	6939      	ldr	r1, [r7, #16]
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f000 f842 	bl	800f288 <I2C_ITAddrCplt>
 800f204:	e037      	b.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	085b      	lsrs	r3, r3, #1
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d031      	beq.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	085b      	lsrs	r3, r3, #1
 800f216:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d02b      	beq.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f222:	b29b      	uxth	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	d018      	beq.n	800f25a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	1c5a      	adds	r2, r3, #1
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f242:	b29b      	uxth	r3, r3
 800f244:	3b01      	subs	r3, #1
 800f246:	b29a      	uxth	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f250:	3b01      	subs	r3, #1
 800f252:	b29a      	uxth	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	851a      	strh	r2, [r3, #40]	; 0x28
 800f258:	e00d      	b.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f260:	d002      	beq.n	800f268 <I2C_Slave_ISR_IT+0x1e6>
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f000 f891 	bl	800f390 <I2C_ITSlaveSeqCplt>
 800f26e:	e002      	b.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800f270:	bf00      	nop
 800f272:	e000      	b.n	800f276 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800f274:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2200      	movs	r2, #0
 800f27a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3718      	adds	r7, #24
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f29e:	2b28      	cmp	r3, #40	; 0x28
 800f2a0:	d16a      	bne.n	800f378 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	699b      	ldr	r3, [r3, #24]
 800f2a8:	0c1b      	lsrs	r3, r3, #16
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	f003 0301 	and.w	r3, r3, #1
 800f2b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	699b      	ldr	r3, [r3, #24]
 800f2b8:	0c1b      	lsrs	r3, r3, #16
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800f2c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800f2dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d138      	bne.n	800f358 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800f2e6:	897b      	ldrh	r3, [r7, #10]
 800f2e8:	09db      	lsrs	r3, r3, #7
 800f2ea:	b29a      	uxth	r2, r3
 800f2ec:	89bb      	ldrh	r3, [r7, #12]
 800f2ee:	4053      	eors	r3, r2
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	f003 0306 	and.w	r3, r3, #6
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d11c      	bne.n	800f334 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800f2fa:	897b      	ldrh	r3, [r7, #10]
 800f2fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d13b      	bne.n	800f388 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2208      	movs	r2, #8
 800f31c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f326:	89ba      	ldrh	r2, [r7, #12]
 800f328:	7bfb      	ldrb	r3, [r7, #15]
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff fe7c 	bl	800f02a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f332:	e029      	b.n	800f388 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800f334:	893b      	ldrh	r3, [r7, #8]
 800f336:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fc0c 	bl	800fb5a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f34a:	89ba      	ldrh	r2, [r7, #12]
 800f34c:	7bfb      	ldrb	r3, [r7, #15]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff fe6a 	bl	800f02a <HAL_I2C_AddrCallback>
}
 800f356:	e017      	b.n	800f388 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800f358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fbfc 	bl	800fb5a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800f36a:	89ba      	ldrh	r2, [r7, #12]
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	4619      	mov	r1, r3
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff fe5a 	bl	800f02a <HAL_I2C_AddrCallback>
}
 800f376:	e007      	b.n	800f388 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2208      	movs	r2, #8
 800f37e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	0b9b      	lsrs	r3, r3, #14
 800f3ac:	f003 0301 	and.w	r3, r3, #1
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d008      	beq.n	800f3c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f3c2:	601a      	str	r2, [r3, #0]
 800f3c4:	e00d      	b.n	800f3e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	0bdb      	lsrs	r3, r3, #15
 800f3ca:	f003 0301 	and.w	r3, r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f3e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b29      	cmp	r3, #41	; 0x29
 800f3ec:	d112      	bne.n	800f414 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2228      	movs	r2, #40	; 0x28
 800f3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2221      	movs	r2, #33	; 0x21
 800f3fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fbab 	bl	800fb5a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff fdf8 	bl	800f002 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f412:	e017      	b.n	800f444 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b2a      	cmp	r3, #42	; 0x2a
 800f41e:	d111      	bne.n	800f444 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2228      	movs	r2, #40	; 0x28
 800f424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2222      	movs	r2, #34	; 0x22
 800f42c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f42e:	2102      	movs	r1, #2
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fb92 	bl	800fb5a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7ff fde9 	bl	800f016 <HAL_I2C_SlaveRxCpltCallback>
}
 800f444:	bf00      	nop
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b086      	sub	sp, #24
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f468:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2220      	movs	r2, #32
 800f470:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b21      	cmp	r3, #33	; 0x21
 800f476:	d002      	beq.n	800f47e <I2C_ITSlaveCplt+0x32>
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	2b29      	cmp	r3, #41	; 0x29
 800f47c:	d108      	bne.n	800f490 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800f47e:	f248 0101 	movw	r1, #32769	; 0x8001
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fb69 	bl	800fb5a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2221      	movs	r2, #33	; 0x21
 800f48c:	631a      	str	r2, [r3, #48]	; 0x30
 800f48e:	e00d      	b.n	800f4ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	2b22      	cmp	r3, #34	; 0x22
 800f494:	d002      	beq.n	800f49c <I2C_ITSlaveCplt+0x50>
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	2b2a      	cmp	r3, #42	; 0x2a
 800f49a:	d107      	bne.n	800f4ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800f49c:	f248 0102 	movw	r1, #32770	; 0x8002
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fb5a 	bl	800fb5a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2222      	movs	r2, #34	; 0x22
 800f4aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6859      	ldr	r1, [r3, #4]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b80      	ldr	r3, [pc, #512]	; (800f6c8 <I2C_ITSlaveCplt+0x27c>)
 800f4c8:	400b      	ands	r3, r1
 800f4ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fb02 	bl	800fad6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	0b9b      	lsrs	r3, r3, #14
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d07a      	beq.n	800f5d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f4ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 8111 	beq.w	800f71a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4a73      	ldr	r2, [pc, #460]	; (800f6cc <I2C_ITSlaveCplt+0x280>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d059      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a71      	ldr	r2, [pc, #452]	; (800f6d0 <I2C_ITSlaveCplt+0x284>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d053      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a6f      	ldr	r2, [pc, #444]	; (800f6d4 <I2C_ITSlaveCplt+0x288>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d04d      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4a6d      	ldr	r2, [pc, #436]	; (800f6d8 <I2C_ITSlaveCplt+0x28c>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d047      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4a6b      	ldr	r2, [pc, #428]	; (800f6dc <I2C_ITSlaveCplt+0x290>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d041      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4a69      	ldr	r2, [pc, #420]	; (800f6e0 <I2C_ITSlaveCplt+0x294>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d03b      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a67      	ldr	r2, [pc, #412]	; (800f6e4 <I2C_ITSlaveCplt+0x298>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d035      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4a65      	ldr	r2, [pc, #404]	; (800f6e8 <I2C_ITSlaveCplt+0x29c>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d02f      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4a63      	ldr	r2, [pc, #396]	; (800f6ec <I2C_ITSlaveCplt+0x2a0>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d029      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a61      	ldr	r2, [pc, #388]	; (800f6f0 <I2C_ITSlaveCplt+0x2a4>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d023      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a5f      	ldr	r2, [pc, #380]	; (800f6f4 <I2C_ITSlaveCplt+0x2a8>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d01d      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4a5d      	ldr	r2, [pc, #372]	; (800f6f8 <I2C_ITSlaveCplt+0x2ac>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d017      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a5b      	ldr	r2, [pc, #364]	; (800f6fc <I2C_ITSlaveCplt+0x2b0>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d011      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a59      	ldr	r2, [pc, #356]	; (800f700 <I2C_ITSlaveCplt+0x2b4>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d00b      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a57      	ldr	r2, [pc, #348]	; (800f704 <I2C_ITSlaveCplt+0x2b8>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d005      	beq.n	800f5b8 <I2C_ITSlaveCplt+0x16c>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a55      	ldr	r2, [pc, #340]	; (800f708 <I2C_ITSlaveCplt+0x2bc>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d105      	bne.n	800f5c4 <I2C_ITSlaveCplt+0x178>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	e004      	b.n	800f5ce <I2C_ITSlaveCplt+0x182>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	8553      	strh	r3, [r2, #42]	; 0x2a
 800f5d2:	e0a2      	b.n	800f71a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	0bdb      	lsrs	r3, r3, #15
 800f5d8:	f003 0301 	and.w	r3, r3, #1
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 809c 	beq.w	800f71a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f5f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f000 808f 	beq.w	800f71a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a32      	ldr	r2, [pc, #200]	; (800f6cc <I2C_ITSlaveCplt+0x280>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d059      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a30      	ldr	r2, [pc, #192]	; (800f6d0 <I2C_ITSlaveCplt+0x284>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d053      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a2e      	ldr	r2, [pc, #184]	; (800f6d4 <I2C_ITSlaveCplt+0x288>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d04d      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a2c      	ldr	r2, [pc, #176]	; (800f6d8 <I2C_ITSlaveCplt+0x28c>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d047      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a2a      	ldr	r2, [pc, #168]	; (800f6dc <I2C_ITSlaveCplt+0x290>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d041      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4a28      	ldr	r2, [pc, #160]	; (800f6e0 <I2C_ITSlaveCplt+0x294>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d03b      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a26      	ldr	r2, [pc, #152]	; (800f6e4 <I2C_ITSlaveCplt+0x298>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d035      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a24      	ldr	r2, [pc, #144]	; (800f6e8 <I2C_ITSlaveCplt+0x29c>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d02f      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a22      	ldr	r2, [pc, #136]	; (800f6ec <I2C_ITSlaveCplt+0x2a0>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d029      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a20      	ldr	r2, [pc, #128]	; (800f6f0 <I2C_ITSlaveCplt+0x2a4>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d023      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a1e      	ldr	r2, [pc, #120]	; (800f6f4 <I2C_ITSlaveCplt+0x2a8>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d01d      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a1c      	ldr	r2, [pc, #112]	; (800f6f8 <I2C_ITSlaveCplt+0x2ac>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d017      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a1a      	ldr	r2, [pc, #104]	; (800f6fc <I2C_ITSlaveCplt+0x2b0>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d011      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4a18      	ldr	r2, [pc, #96]	; (800f700 <I2C_ITSlaveCplt+0x2b4>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d00b      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a16      	ldr	r2, [pc, #88]	; (800f704 <I2C_ITSlaveCplt+0x2b8>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d005      	beq.n	800f6bc <I2C_ITSlaveCplt+0x270>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a14      	ldr	r2, [pc, #80]	; (800f708 <I2C_ITSlaveCplt+0x2bc>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d127      	bne.n	800f70c <I2C_ITSlaveCplt+0x2c0>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	e026      	b.n	800f716 <I2C_ITSlaveCplt+0x2ca>
 800f6c8:	fe00e800 	.word	0xfe00e800
 800f6cc:	40020010 	.word	0x40020010
 800f6d0:	40020028 	.word	0x40020028
 800f6d4:	40020040 	.word	0x40020040
 800f6d8:	40020058 	.word	0x40020058
 800f6dc:	40020070 	.word	0x40020070
 800f6e0:	40020088 	.word	0x40020088
 800f6e4:	400200a0 	.word	0x400200a0
 800f6e8:	400200b8 	.word	0x400200b8
 800f6ec:	40020410 	.word	0x40020410
 800f6f0:	40020428 	.word	0x40020428
 800f6f4:	40020440 	.word	0x40020440
 800f6f8:	40020458 	.word	0x40020458
 800f6fc:	40020470 	.word	0x40020470
 800f700:	40020488 	.word	0x40020488
 800f704:	400204a0 	.word	0x400204a0
 800f708:	400204b8 	.word	0x400204b8
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	b29b      	uxth	r3, r3
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	089b      	lsrs	r3, r3, #2
 800f71e:	f003 0301 	and.w	r3, r3, #1
 800f722:	2b00      	cmp	r3, #0
 800f724:	d020      	beq.n	800f768 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f023 0304 	bic.w	r3, r3, #4
 800f72c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f738:	b2d2      	uxtb	r2, r2
 800f73a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00c      	beq.n	800f768 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f75e:	b29b      	uxth	r3, r3
 800f760:	3b01      	subs	r3, #1
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d005      	beq.n	800f77e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f776:	f043 0204 	orr.w	r2, r3, #4
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f790:	2b00      	cmp	r3, #0
 800f792:	d010      	beq.n	800f7b6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f798:	4619      	mov	r1, r3
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f8a4 	bl	800f8e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	2b28      	cmp	r3, #40	; 0x28
 800f7aa:	d141      	bne.n	800f830 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800f7ac:	6979      	ldr	r1, [r7, #20]
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f844 	bl	800f83c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f7b4:	e03c      	b.n	800f830 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f7be:	d014      	beq.n	800f7ea <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff fde5 	bl	800f390 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a1b      	ldr	r2, [pc, #108]	; (800f838 <I2C_ITSlaveCplt+0x3ec>)
 800f7ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7ff fc2f 	bl	800f046 <HAL_I2C_ListenCpltCallback>
}
 800f7e8:	e022      	b.n	800f830 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b22      	cmp	r3, #34	; 0x22
 800f7f4:	d10e      	bne.n	800f814 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2220      	movs	r2, #32
 800f7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7ff fc02 	bl	800f016 <HAL_I2C_SlaveRxCpltCallback>
}
 800f812:	e00d      	b.n	800f830 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2220      	movs	r2, #32
 800f818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f7ff fbe9 	bl	800f002 <HAL_I2C_SlaveTxCpltCallback>
}
 800f830:	bf00      	nop
 800f832:	3718      	adds	r7, #24
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	ffff0000 	.word	0xffff0000

0800f83c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a26      	ldr	r2, [pc, #152]	; (800f8e4 <I2C_ITListenCplt+0xa8>)
 800f84a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2220      	movs	r2, #32
 800f856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	089b      	lsrs	r3, r3, #2
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	d022      	beq.n	800f8ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f886:	1c5a      	adds	r2, r3, #1
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f890:	2b00      	cmp	r3, #0
 800f892:	d012      	beq.n	800f8ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f898:	3b01      	subs	r3, #1
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b2:	f043 0204 	orr.w	r2, r3, #4
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f8ba:	f248 0103 	movw	r1, #32771	; 0x8003
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f94b 	bl	800fb5a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2210      	movs	r2, #16
 800f8ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff fbb6 	bl	800f046 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800f8da:	bf00      	nop
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	ffff0000 	.word	0xffff0000

0800f8e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4a5d      	ldr	r2, [pc, #372]	; (800fa7c <I2C_ITError+0x194>)
 800f906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	431a      	orrs	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
 800f91c:	2b28      	cmp	r3, #40	; 0x28
 800f91e:	d005      	beq.n	800f92c <I2C_ITError+0x44>
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	2b29      	cmp	r3, #41	; 0x29
 800f924:	d002      	beq.n	800f92c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800f926:	7bfb      	ldrb	r3, [r7, #15]
 800f928:	2b2a      	cmp	r3, #42	; 0x2a
 800f92a:	d10b      	bne.n	800f944 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f92c:	2103      	movs	r1, #3
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f913 	bl	800fb5a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2228      	movs	r2, #40	; 0x28
 800f938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a50      	ldr	r2, [pc, #320]	; (800fa80 <I2C_ITError+0x198>)
 800f940:	635a      	str	r2, [r3, #52]	; 0x34
 800f942:	e011      	b.n	800f968 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800f944:	f248 0103 	movw	r1, #32771	; 0x8003
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f906 	bl	800fb5a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b60      	cmp	r3, #96	; 0x60
 800f958:	d003      	beq.n	800f962 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2220      	movs	r2, #32
 800f95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f972:	2b00      	cmp	r3, #0
 800f974:	d039      	beq.n	800f9ea <I2C_ITError+0x102>
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2b11      	cmp	r3, #17
 800f97a:	d002      	beq.n	800f982 <I2C_ITError+0x9a>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b21      	cmp	r3, #33	; 0x21
 800f980:	d133      	bne.n	800f9ea <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f98c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f990:	d107      	bne.n	800f9a2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f9a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fe fe0c 	bl	800e5c4 <HAL_DMA_GetState>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d017      	beq.n	800f9e2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b6:	4a33      	ldr	r2, [pc, #204]	; (800fa84 <I2C_ITError+0x19c>)
 800f9b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fd fc8c 	bl	800d2e4 <HAL_DMA_Abort_IT>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d04d      	beq.n	800fa6e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f9e0:	e045      	b.n	800fa6e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f850 	bl	800fa88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800f9e8:	e041      	b.n	800fa6e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d039      	beq.n	800fa66 <I2C_ITError+0x17e>
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b12      	cmp	r3, #18
 800f9f6:	d002      	beq.n	800f9fe <I2C_ITError+0x116>
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	2b22      	cmp	r3, #34	; 0x22
 800f9fc:	d133      	bne.n	800fa66 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa0c:	d107      	bne.n	800fa1e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fa1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fe fdce 	bl	800e5c4 <HAL_DMA_GetState>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d017      	beq.n	800fa5e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa32:	4a14      	ldr	r2, [pc, #80]	; (800fa84 <I2C_ITError+0x19c>)
 800fa34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fd fc4e 	bl	800d2e4 <HAL_DMA_Abort_IT>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d011      	beq.n	800fa72 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fa58:	4610      	mov	r0, r2
 800fa5a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa5c:	e009      	b.n	800fa72 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f812 	bl	800fa88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa64:	e005      	b.n	800fa72 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f80e 	bl	800fa88 <I2C_TreatErrorCallback>
  }
}
 800fa6c:	e002      	b.n	800fa74 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fa6e:	bf00      	nop
 800fa70:	e000      	b.n	800fa74 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa72:	bf00      	nop
}
 800fa74:	bf00      	nop
 800fa76:	3710      	adds	r7, #16
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	ffff0000 	.word	0xffff0000
 800fa80:	0800f083 	.word	0x0800f083
 800fa84:	0800fb1f 	.word	0x0800fb1f

0800fa88 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b60      	cmp	r3, #96	; 0x60
 800fa9a:	d10e      	bne.n	800faba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2220      	movs	r2, #32
 800faa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7ff fadb 	bl	800f06e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fab8:	e009      	b.n	800face <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff fac6 	bl	800f05a <HAL_I2C_ErrorCallback>
}
 800face:	bf00      	nop
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b083      	sub	sp, #12
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	f003 0302 	and.w	r3, r3, #2
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d103      	bne.n	800faf4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2200      	movs	r2, #0
 800faf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	f003 0301 	and.w	r3, r3, #1
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d007      	beq.n	800fb12 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	699a      	ldr	r2, [r3, #24]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f042 0201 	orr.w	r2, r2, #1
 800fb10:	619a      	str	r2, [r3, #24]
  }
}
 800fb12:	bf00      	nop
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr

0800fb1e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb2a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d003      	beq.n	800fb3c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb38:	2200      	movs	r2, #0
 800fb3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb48:	2200      	movs	r2, #0
 800fb4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff ff9b 	bl	800fa88 <I2C_TreatErrorCallback>
}
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800fb5a:	b480      	push	{r7}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	460b      	mov	r3, r1
 800fb64:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800fb66:	2300      	movs	r3, #0
 800fb68:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800fb6a:	887b      	ldrh	r3, [r7, #2]
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00f      	beq.n	800fb94 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800fb7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fb88:	2b28      	cmp	r3, #40	; 0x28
 800fb8a:	d003      	beq.n	800fb94 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800fb92:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800fb94:	887b      	ldrh	r3, [r7, #2]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00f      	beq.n	800fbbe <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800fba4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fbb2:	2b28      	cmp	r3, #40	; 0x28
 800fbb4:	d003      	beq.n	800fbbe <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800fbbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800fbbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	da03      	bge.n	800fbce <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800fbcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800fbce:	887b      	ldrh	r3, [r7, #2]
 800fbd0:	2b10      	cmp	r3, #16
 800fbd2:	d103      	bne.n	800fbdc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800fbda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800fbdc:	887b      	ldrh	r3, [r7, #2]
 800fbde:	2b20      	cmp	r3, #32
 800fbe0:	d103      	bne.n	800fbea <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f043 0320 	orr.w	r3, r3, #32
 800fbe8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800fbea:	887b      	ldrh	r3, [r7, #2]
 800fbec:	2b40      	cmp	r3, #64	; 0x40
 800fbee:	d103      	bne.n	800fbf8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	6819      	ldr	r1, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	43da      	mvns	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	400a      	ands	r2, r1
 800fc08:	601a      	str	r2, [r3, #0]
}
 800fc0a:	bf00      	nop
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b083      	sub	sp, #12
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b20      	cmp	r3, #32
 800fc2a:	d138      	bne.n	800fc9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d101      	bne.n	800fc3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800fc36:	2302      	movs	r3, #2
 800fc38:	e032      	b.n	800fca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2224      	movs	r2, #36	; 0x24
 800fc46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0201 	bic.w	r2, r2, #1
 800fc58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fc68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	6819      	ldr	r1, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	683a      	ldr	r2, [r7, #0]
 800fc76:	430a      	orrs	r2, r1
 800fc78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f042 0201 	orr.w	r2, r2, #1
 800fc88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e000      	b.n	800fca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fc9e:	2302      	movs	r3, #2
  }
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b20      	cmp	r3, #32
 800fcc0:	d139      	bne.n	800fd36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d101      	bne.n	800fcd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800fccc:	2302      	movs	r3, #2
 800fcce:	e033      	b.n	800fd38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2224      	movs	r2, #36	; 0x24
 800fcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f022 0201 	bic.w	r2, r2, #1
 800fcee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fcfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	021b      	lsls	r3, r3, #8
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f042 0201 	orr.w	r2, r2, #1
 800fd20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2220      	movs	r2, #32
 800fd26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e000      	b.n	800fd38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800fd36:	2302      	movs	r3, #2
  }
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd46:	b08f      	sub	sp, #60	; 0x3c
 800fd48:	af0a      	add	r7, sp, #40	; 0x28
 800fd4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	e116      	b.n	800ff84 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d106      	bne.n	800fd76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f00b fcc5 	bl	801b700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2203      	movs	r2, #3
 800fd7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d102      	bne.n	800fd90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f008 fbe8 	bl	801856a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	603b      	str	r3, [r7, #0]
 800fda0:	687e      	ldr	r6, [r7, #4]
 800fda2:	466d      	mov	r5, sp
 800fda4:	f106 0410 	add.w	r4, r6, #16
 800fda8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fdb4:	e885 0003 	stmia.w	r5, {r0, r1}
 800fdb8:	1d33      	adds	r3, r6, #4
 800fdba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fdbc:	6838      	ldr	r0, [r7, #0]
 800fdbe:	f008 fab3 	bl	8018328 <USB_CoreInit>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d005      	beq.n	800fdd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2202      	movs	r2, #2
 800fdcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e0d7      	b.n	800ff84 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2100      	movs	r1, #0
 800fdda:	4618      	mov	r0, r3
 800fddc:	f008 fbd6 	bl	801858c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]
 800fde4:	e04a      	b.n	800fe7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fde6:	7bfa      	ldrb	r2, [r7, #15]
 800fde8:	6879      	ldr	r1, [r7, #4]
 800fdea:	4613      	mov	r3, r2
 800fdec:	00db      	lsls	r3, r3, #3
 800fdee:	1a9b      	subs	r3, r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	440b      	add	r3, r1
 800fdf4:	333d      	adds	r3, #61	; 0x3d
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800fdfa:	7bfa      	ldrb	r2, [r7, #15]
 800fdfc:	6879      	ldr	r1, [r7, #4]
 800fdfe:	4613      	mov	r3, r2
 800fe00:	00db      	lsls	r3, r3, #3
 800fe02:	1a9b      	subs	r3, r3, r2
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	440b      	add	r3, r1
 800fe08:	333c      	adds	r3, #60	; 0x3c
 800fe0a:	7bfa      	ldrb	r2, [r7, #15]
 800fe0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800fe0e:	7bfa      	ldrb	r2, [r7, #15]
 800fe10:	7bfb      	ldrb	r3, [r7, #15]
 800fe12:	b298      	uxth	r0, r3
 800fe14:	6879      	ldr	r1, [r7, #4]
 800fe16:	4613      	mov	r3, r2
 800fe18:	00db      	lsls	r3, r3, #3
 800fe1a:	1a9b      	subs	r3, r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	440b      	add	r3, r1
 800fe20:	3342      	adds	r3, #66	; 0x42
 800fe22:	4602      	mov	r2, r0
 800fe24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fe26:	7bfa      	ldrb	r2, [r7, #15]
 800fe28:	6879      	ldr	r1, [r7, #4]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	00db      	lsls	r3, r3, #3
 800fe2e:	1a9b      	subs	r3, r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	440b      	add	r3, r1
 800fe34:	333f      	adds	r3, #63	; 0x3f
 800fe36:	2200      	movs	r2, #0
 800fe38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fe3a:	7bfa      	ldrb	r2, [r7, #15]
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	1a9b      	subs	r3, r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	440b      	add	r3, r1
 800fe48:	3344      	adds	r3, #68	; 0x44
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800fe4e:	7bfa      	ldrb	r2, [r7, #15]
 800fe50:	6879      	ldr	r1, [r7, #4]
 800fe52:	4613      	mov	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	1a9b      	subs	r3, r3, r2
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	440b      	add	r3, r1
 800fe5c:	3348      	adds	r3, #72	; 0x48
 800fe5e:	2200      	movs	r2, #0
 800fe60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fe62:	7bfa      	ldrb	r2, [r7, #15]
 800fe64:	6879      	ldr	r1, [r7, #4]
 800fe66:	4613      	mov	r3, r2
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	1a9b      	subs	r3, r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	440b      	add	r3, r1
 800fe70:	3350      	adds	r3, #80	; 0x50
 800fe72:	2200      	movs	r2, #0
 800fe74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	73fb      	strb	r3, [r7, #15]
 800fe7c:	7bfa      	ldrb	r2, [r7, #15]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d3af      	bcc.n	800fde6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fe86:	2300      	movs	r3, #0
 800fe88:	73fb      	strb	r3, [r7, #15]
 800fe8a:	e044      	b.n	800ff16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fe8c:	7bfa      	ldrb	r2, [r7, #15]
 800fe8e:	6879      	ldr	r1, [r7, #4]
 800fe90:	4613      	mov	r3, r2
 800fe92:	00db      	lsls	r3, r3, #3
 800fe94:	1a9b      	subs	r3, r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	440b      	add	r3, r1
 800fe9a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800fe9e:	2200      	movs	r2, #0
 800fea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800fea2:	7bfa      	ldrb	r2, [r7, #15]
 800fea4:	6879      	ldr	r1, [r7, #4]
 800fea6:	4613      	mov	r3, r2
 800fea8:	00db      	lsls	r3, r3, #3
 800feaa:	1a9b      	subs	r3, r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	440b      	add	r3, r1
 800feb0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800feb4:	7bfa      	ldrb	r2, [r7, #15]
 800feb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800feb8:	7bfa      	ldrb	r2, [r7, #15]
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	4613      	mov	r3, r2
 800febe:	00db      	lsls	r3, r3, #3
 800fec0:	1a9b      	subs	r3, r3, r2
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	440b      	add	r3, r1
 800fec6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800feca:	2200      	movs	r2, #0
 800fecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fece:	7bfa      	ldrb	r2, [r7, #15]
 800fed0:	6879      	ldr	r1, [r7, #4]
 800fed2:	4613      	mov	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	1a9b      	subs	r3, r3, r2
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	440b      	add	r3, r1
 800fedc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fee0:	2200      	movs	r2, #0
 800fee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fee4:	7bfa      	ldrb	r2, [r7, #15]
 800fee6:	6879      	ldr	r1, [r7, #4]
 800fee8:	4613      	mov	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	009b      	lsls	r3, r3, #2
 800fef0:	440b      	add	r3, r1
 800fef2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fef6:	2200      	movs	r2, #0
 800fef8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fefa:	7bfa      	ldrb	r2, [r7, #15]
 800fefc:	6879      	ldr	r1, [r7, #4]
 800fefe:	4613      	mov	r3, r2
 800ff00:	00db      	lsls	r3, r3, #3
 800ff02:	1a9b      	subs	r3, r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	440b      	add	r3, r1
 800ff08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ff10:	7bfb      	ldrb	r3, [r7, #15]
 800ff12:	3301      	adds	r3, #1
 800ff14:	73fb      	strb	r3, [r7, #15]
 800ff16:	7bfa      	ldrb	r2, [r7, #15]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d3b5      	bcc.n	800fe8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	603b      	str	r3, [r7, #0]
 800ff26:	687e      	ldr	r6, [r7, #4]
 800ff28:	466d      	mov	r5, sp
 800ff2a:	f106 0410 	add.w	r4, r6, #16
 800ff2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ff3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff3e:	1d33      	adds	r3, r6, #4
 800ff40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff42:	6838      	ldr	r0, [r7, #0]
 800ff44:	f008 fb6e 	bl	8018624 <USB_DevInit>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d005      	beq.n	800ff5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2202      	movs	r2, #2
 800ff52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e014      	b.n	800ff84 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2201      	movs	r2, #1
 800ff66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d102      	bne.n	800ff78 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f001 f886 	bl	8011084 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f009 fc06 	bl	801978e <USB_DevDisconnect>

  return HAL_OK;
 800ff82:	2300      	movs	r3, #0
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d101      	bne.n	800ffa8 <HAL_PCD_Start+0x1c>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	e020      	b.n	800ffea <HAL_PCD_Start+0x5e>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d109      	bne.n	800ffcc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d005      	beq.n	800ffcc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f008 fab9 	bl	8018548 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f009 fbb6 	bl	801974c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}

0800fff2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800fff2:	b590      	push	{r4, r7, lr}
 800fff4:	b08d      	sub	sp, #52	; 0x34
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4618      	mov	r0, r3
 801000a:	f009 fc74 	bl	80198f6 <USB_GetMode>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	f040 83be 	bne.w	8010792 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4618      	mov	r0, r3
 801001c:	f009 fbd8 	bl	80197d0 <USB_ReadInterrupts>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 83b4 	beq.w	8010790 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	f009 fbcf 	bl	80197d0 <USB_ReadInterrupts>
 8010032:	4603      	mov	r3, r0
 8010034:	f003 0302 	and.w	r3, r3, #2
 8010038:	2b02      	cmp	r3, #2
 801003a:	d107      	bne.n	801004c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	695a      	ldr	r2, [r3, #20]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f002 0202 	and.w	r2, r2, #2
 801004a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4618      	mov	r0, r3
 8010052:	f009 fbbd 	bl	80197d0 <USB_ReadInterrupts>
 8010056:	4603      	mov	r3, r0
 8010058:	f003 0310 	and.w	r3, r3, #16
 801005c:	2b10      	cmp	r3, #16
 801005e:	d161      	bne.n	8010124 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	699a      	ldr	r2, [r3, #24]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f022 0210 	bic.w	r2, r2, #16
 801006e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	6a1b      	ldr	r3, [r3, #32]
 8010074:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	f003 020f 	and.w	r2, r3, #15
 801007c:	4613      	mov	r3, r2
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	1a9b      	subs	r3, r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	4413      	add	r3, r2
 801008c:	3304      	adds	r3, #4
 801008e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	0c5b      	lsrs	r3, r3, #17
 8010094:	f003 030f 	and.w	r3, r3, #15
 8010098:	2b02      	cmp	r3, #2
 801009a:	d124      	bne.n	80100e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80100a2:	4013      	ands	r3, r2
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d035      	beq.n	8010114 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	091b      	lsrs	r3, r3, #4
 80100b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80100b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	461a      	mov	r2, r3
 80100ba:	6a38      	ldr	r0, [r7, #32]
 80100bc:	f009 f9f4 	bl	80194a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	68da      	ldr	r2, [r3, #12]
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	091b      	lsrs	r3, r3, #4
 80100c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100cc:	441a      	add	r2, r3
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	699a      	ldr	r2, [r3, #24]
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	091b      	lsrs	r3, r3, #4
 80100da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100de:	441a      	add	r2, r3
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	619a      	str	r2, [r3, #24]
 80100e4:	e016      	b.n	8010114 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	0c5b      	lsrs	r3, r3, #17
 80100ea:	f003 030f 	and.w	r3, r3, #15
 80100ee:	2b06      	cmp	r3, #6
 80100f0:	d110      	bne.n	8010114 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80100f8:	2208      	movs	r2, #8
 80100fa:	4619      	mov	r1, r3
 80100fc:	6a38      	ldr	r0, [r7, #32]
 80100fe:	f009 f9d3 	bl	80194a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	699a      	ldr	r2, [r3, #24]
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	091b      	lsrs	r3, r3, #4
 801010a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801010e:	441a      	add	r2, r3
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	699a      	ldr	r2, [r3, #24]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f042 0210 	orr.w	r2, r2, #16
 8010122:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4618      	mov	r0, r3
 801012a:	f009 fb51 	bl	80197d0 <USB_ReadInterrupts>
 801012e:	4603      	mov	r3, r0
 8010130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010134:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010138:	d16e      	bne.n	8010218 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801013a:	2300      	movs	r3, #0
 801013c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f009 fb57 	bl	80197f6 <USB_ReadDevAllOutEpInterrupt>
 8010148:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801014a:	e062      	b.n	8010212 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	f003 0301 	and.w	r3, r3, #1
 8010152:	2b00      	cmp	r3, #0
 8010154:	d057      	beq.n	8010206 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801015c:	b2d2      	uxtb	r2, r2
 801015e:	4611      	mov	r1, r2
 8010160:	4618      	mov	r0, r3
 8010162:	f009 fb7c 	bl	801985e <USB_ReadDevOutEPInterrupt>
 8010166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00c      	beq.n	801018c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010174:	015a      	lsls	r2, r3, #5
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	4413      	add	r3, r2
 801017a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017e:	461a      	mov	r2, r3
 8010180:	2301      	movs	r3, #1
 8010182:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 fdd2 	bl	8010d30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	f003 0308 	and.w	r3, r3, #8
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00c      	beq.n	80101b0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010198:	015a      	lsls	r2, r3, #5
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	4413      	add	r3, r2
 801019e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a2:	461a      	mov	r2, r3
 80101a4:	2308      	movs	r3, #8
 80101a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80101a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fecc 	bl	8010f48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	f003 0310 	and.w	r3, r3, #16
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d008      	beq.n	80101cc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101c6:	461a      	mov	r2, r3
 80101c8:	2310      	movs	r3, #16
 80101ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	f003 0320 	and.w	r3, r3, #32
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d008      	beq.n	80101e8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	015a      	lsls	r2, r3, #5
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	4413      	add	r3, r2
 80101de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e2:	461a      	mov	r2, r3
 80101e4:	2320      	movs	r3, #32
 80101e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d009      	beq.n	8010206 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	015a      	lsls	r2, r3, #5
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	4413      	add	r3, r2
 80101fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101fe:	461a      	mov	r2, r3
 8010200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010204:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010208:	3301      	adds	r3, #1
 801020a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801020c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020e:	085b      	lsrs	r3, r3, #1
 8010210:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010214:	2b00      	cmp	r3, #0
 8010216:	d199      	bne.n	801014c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4618      	mov	r0, r3
 801021e:	f009 fad7 	bl	80197d0 <USB_ReadInterrupts>
 8010222:	4603      	mov	r3, r0
 8010224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801022c:	f040 80c4 	bne.w	80103b8 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4618      	mov	r0, r3
 8010236:	f009 faf8 	bl	801982a <USB_ReadDevAllInEpInterrupt>
 801023a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801023c:	2300      	movs	r3, #0
 801023e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010240:	e0b6      	b.n	80103b0 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010244:	f003 0301 	and.w	r3, r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 80ab 	beq.w	80103a4 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010254:	b2d2      	uxtb	r2, r2
 8010256:	4611      	mov	r1, r2
 8010258:	4618      	mov	r0, r3
 801025a:	f009 fb1e 	bl	801989a <USB_ReadDevInEPInterrupt>
 801025e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	2b00      	cmp	r3, #0
 8010268:	d057      	beq.n	801031a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	f003 030f 	and.w	r3, r3, #15
 8010270:	2201      	movs	r2, #1
 8010272:	fa02 f303 	lsl.w	r3, r2, r3
 8010276:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801027e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	43db      	mvns	r3, r3
 8010284:	69f9      	ldr	r1, [r7, #28]
 8010286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801028a:	4013      	ands	r3, r2
 801028c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	015a      	lsls	r2, r3, #5
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	4413      	add	r3, r2
 8010296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029a:	461a      	mov	r2, r3
 801029c:	2301      	movs	r3, #1
 801029e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d132      	bne.n	801030e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80102a8:	6879      	ldr	r1, [r7, #4]
 80102aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ac:	4613      	mov	r3, r2
 80102ae:	00db      	lsls	r3, r3, #3
 80102b0:	1a9b      	subs	r3, r3, r2
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	440b      	add	r3, r1
 80102b6:	3348      	adds	r3, #72	; 0x48
 80102b8:	6819      	ldr	r1, [r3, #0]
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102be:	4613      	mov	r3, r2
 80102c0:	00db      	lsls	r3, r3, #3
 80102c2:	1a9b      	subs	r3, r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4403      	add	r3, r0
 80102c8:	3344      	adds	r3, #68	; 0x44
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4419      	add	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102d2:	4613      	mov	r3, r2
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	1a9b      	subs	r3, r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4403      	add	r3, r0
 80102dc:	3348      	adds	r3, #72	; 0x48
 80102de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d113      	bne.n	801030e <HAL_PCD_IRQHandler+0x31c>
 80102e6:	6879      	ldr	r1, [r7, #4]
 80102e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ea:	4613      	mov	r3, r2
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	440b      	add	r3, r1
 80102f4:	3350      	adds	r3, #80	; 0x50
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d108      	bne.n	801030e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010306:	461a      	mov	r2, r3
 8010308:	2101      	movs	r1, #1
 801030a:	f009 fb27 	bl	801995c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010310:	b2db      	uxtb	r3, r3
 8010312:	4619      	mov	r1, r3
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f00b fa9a 	bl	801b84e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	f003 0308 	and.w	r3, r3, #8
 8010320:	2b00      	cmp	r3, #0
 8010322:	d008      	beq.n	8010336 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	015a      	lsls	r2, r3, #5
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	4413      	add	r3, r2
 801032c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010330:	461a      	mov	r2, r3
 8010332:	2308      	movs	r3, #8
 8010334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	f003 0310 	and.w	r3, r3, #16
 801033c:	2b00      	cmp	r3, #0
 801033e:	d008      	beq.n	8010352 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010342:	015a      	lsls	r2, r3, #5
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	4413      	add	r3, r2
 8010348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801034c:	461a      	mov	r2, r3
 801034e:	2310      	movs	r3, #16
 8010350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010358:	2b00      	cmp	r3, #0
 801035a:	d008      	beq.n	801036e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	015a      	lsls	r2, r3, #5
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	4413      	add	r3, r2
 8010364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010368:	461a      	mov	r2, r3
 801036a:	2340      	movs	r3, #64	; 0x40
 801036c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	f003 0302 	and.w	r3, r3, #2
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00c      	beq.n	8010392 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801037a:	6a38      	ldr	r0, [r7, #32]
 801037c:	f008 fab0 	bl	80188e0 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	015a      	lsls	r2, r3, #5
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	4413      	add	r3, r2
 8010388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038c:	461a      	mov	r2, r3
 801038e:	2302      	movs	r3, #2
 8010390:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010398:	2b00      	cmp	r3, #0
 801039a:	d003      	beq.n	80103a4 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801039c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 fc38 	bl	8010c14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80103a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a6:	3301      	adds	r3, #1
 80103a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80103aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ac:	085b      	lsrs	r3, r3, #1
 80103ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f47f af45 	bne.w	8010242 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4618      	mov	r0, r3
 80103be:	f009 fa07 	bl	80197d0 <USB_ReadInterrupts>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103cc:	d122      	bne.n	8010414 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	69fa      	ldr	r2, [r7, #28]
 80103d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103dc:	f023 0301 	bic.w	r3, r3, #1
 80103e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d108      	bne.n	80103fe <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80103f4:	2100      	movs	r1, #0
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fe68 	bl	80110cc <HAL_PCDEx_LPM_Callback>
 80103fc:	e002      	b.n	8010404 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f00b fa9c 	bl	801b93c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	695a      	ldr	r2, [r3, #20]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4618      	mov	r0, r3
 801041a:	f009 f9d9 	bl	80197d0 <USB_ReadInterrupts>
 801041e:	4603      	mov	r3, r0
 8010420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010428:	d112      	bne.n	8010450 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f003 0301 	and.w	r3, r3, #1
 8010436:	2b01      	cmp	r3, #1
 8010438:	d102      	bne.n	8010440 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f00b fa58 	bl	801b8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	695a      	ldr	r2, [r3, #20]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801044e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4618      	mov	r0, r3
 8010456:	f009 f9bb 	bl	80197d0 <USB_ReadInterrupts>
 801045a:	4603      	mov	r3, r0
 801045c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010464:	d121      	bne.n	80104aa <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	695a      	ldr	r2, [r3, #20]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8010474:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801047c:	2b00      	cmp	r3, #0
 801047e:	d111      	bne.n	80104a4 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801048e:	089b      	lsrs	r3, r3, #2
 8010490:	f003 020f 	and.w	r2, r3, #15
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801049a:	2101      	movs	r1, #1
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fe15 	bl	80110cc <HAL_PCDEx_LPM_Callback>
 80104a2:	e002      	b.n	80104aa <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f00b fa23 	bl	801b8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f009 f98e 	bl	80197d0 <USB_ReadInterrupts>
 80104b4:	4603      	mov	r3, r0
 80104b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80104ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104be:	f040 80b7 	bne.w	8010630 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	69fa      	ldr	r2, [r7, #28]
 80104cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104d0:	f023 0301 	bic.w	r3, r3, #1
 80104d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2110      	movs	r1, #16
 80104dc:	4618      	mov	r0, r3
 80104de:	f008 f9ff 	bl	80188e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80104e2:	2300      	movs	r3, #0
 80104e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104e6:	e046      	b.n	8010576 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	015a      	lsls	r2, r3, #5
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	4413      	add	r3, r2
 80104f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104f4:	461a      	mov	r2, r3
 80104f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80104fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80104fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fe:	015a      	lsls	r2, r3, #5
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	4413      	add	r3, r2
 8010504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801050c:	0151      	lsls	r1, r2, #5
 801050e:	69fa      	ldr	r2, [r7, #28]
 8010510:	440a      	add	r2, r1
 8010512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801051a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010528:	461a      	mov	r2, r3
 801052a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801052e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010532:	015a      	lsls	r2, r3, #5
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	4413      	add	r3, r2
 8010538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010540:	0151      	lsls	r1, r2, #5
 8010542:	69fa      	ldr	r2, [r7, #28]
 8010544:	440a      	add	r2, r1
 8010546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801054a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801054e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	015a      	lsls	r2, r3, #5
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	4413      	add	r3, r2
 8010558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010560:	0151      	lsls	r1, r2, #5
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	440a      	add	r2, r1
 8010566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801056a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801056e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	3301      	adds	r3, #1
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801057c:	429a      	cmp	r2, r3
 801057e:	d3b3      	bcc.n	80104e8 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010586:	69db      	ldr	r3, [r3, #28]
 8010588:	69fa      	ldr	r2, [r7, #28]
 801058a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801058e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8010592:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010598:	2b00      	cmp	r3, #0
 801059a:	d016      	beq.n	80105ca <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105a6:	69fa      	ldr	r2, [r7, #28]
 80105a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105ac:	f043 030b 	orr.w	r3, r3, #11
 80105b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105bc:	69fa      	ldr	r2, [r7, #28]
 80105be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105c2:	f043 030b 	orr.w	r3, r3, #11
 80105c6:	6453      	str	r3, [r2, #68]	; 0x44
 80105c8:	e015      	b.n	80105f6 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105d0:	695a      	ldr	r2, [r3, #20]
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105d8:	4619      	mov	r1, r3
 80105da:	f242 032b 	movw	r3, #8235	; 0x202b
 80105de:	4313      	orrs	r3, r2
 80105e0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	69fa      	ldr	r2, [r7, #28]
 80105ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105f0:	f043 030b 	orr.w	r3, r3, #11
 80105f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	69fa      	ldr	r2, [r7, #28]
 8010600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010604:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010608:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801061a:	461a      	mov	r2, r3
 801061c:	f009 f99e 	bl	801995c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	695a      	ldr	r2, [r3, #20]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801062e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4618      	mov	r0, r3
 8010636:	f009 f8cb 	bl	80197d0 <USB_ReadInterrupts>
 801063a:	4603      	mov	r3, r0
 801063c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010644:	d124      	bne.n	8010690 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4618      	mov	r0, r3
 801064c:	f009 f962 	bl	8019914 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4618      	mov	r0, r3
 8010656:	f008 f9bc 	bl	80189d2 <USB_GetDevSpeed>
 801065a:	4603      	mov	r3, r0
 801065c:	461a      	mov	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681c      	ldr	r4, [r3, #0]
 8010666:	f001 fce5 	bl	8012034 <HAL_RCC_GetHCLKFreq>
 801066a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010670:	b2db      	uxtb	r3, r3
 8010672:	461a      	mov	r2, r3
 8010674:	4620      	mov	r0, r4
 8010676:	f007 fec5 	bl	8018404 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f00b f90f 	bl	801b89e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	695a      	ldr	r2, [r3, #20]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801068e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f009 f89b 	bl	80197d0 <USB_ReadInterrupts>
 801069a:	4603      	mov	r3, r0
 801069c:	f003 0308 	and.w	r3, r3, #8
 80106a0:	2b08      	cmp	r3, #8
 80106a2:	d10a      	bne.n	80106ba <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f00b f8ec 	bl	801b882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	695a      	ldr	r2, [r3, #20]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f002 0208 	and.w	r2, r2, #8
 80106b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4618      	mov	r0, r3
 80106c0:	f009 f886 	bl	80197d0 <USB_ReadInterrupts>
 80106c4:	4603      	mov	r3, r0
 80106c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80106ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106ce:	d10f      	bne.n	80106f0 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80106d0:	2300      	movs	r3, #0
 80106d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f00b f94e 	bl	801b97c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	695a      	ldr	r2, [r3, #20]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80106ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f009 f86b 	bl	80197d0 <USB_ReadInterrupts>
 80106fa:	4603      	mov	r3, r0
 80106fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010704:	d10f      	bne.n	8010726 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8010706:	2300      	movs	r3, #0
 8010708:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	b2db      	uxtb	r3, r3
 801070e:	4619      	mov	r1, r3
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f00b f921 	bl	801b958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	695a      	ldr	r2, [r3, #20]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8010724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4618      	mov	r0, r3
 801072c:	f009 f850 	bl	80197d0 <USB_ReadInterrupts>
 8010730:	4603      	mov	r3, r0
 8010732:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801073a:	d10a      	bne.n	8010752 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f00b f92f 	bl	801b9a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	695a      	ldr	r2, [r3, #20]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8010750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4618      	mov	r0, r3
 8010758:	f009 f83a 	bl	80197d0 <USB_ReadInterrupts>
 801075c:	4603      	mov	r3, r0
 801075e:	f003 0304 	and.w	r3, r3, #4
 8010762:	2b04      	cmp	r3, #4
 8010764:	d115      	bne.n	8010792 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	f003 0304 	and.w	r3, r3, #4
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f00b f91f 	bl	801b9bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6859      	ldr	r1, [r3, #4]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	69ba      	ldr	r2, [r7, #24]
 801078a:	430a      	orrs	r2, r1
 801078c:	605a      	str	r2, [r3, #4]
 801078e:	e000      	b.n	8010792 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8010790:	bf00      	nop
    }
  }
}
 8010792:	3734      	adds	r7, #52	; 0x34
 8010794:	46bd      	mov	sp, r7
 8010796:	bd90      	pop	{r4, r7, pc}

08010798 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d101      	bne.n	80107b2 <HAL_PCD_SetAddress+0x1a>
 80107ae:	2302      	movs	r3, #2
 80107b0:	e013      	b.n	80107da <HAL_PCD_SetAddress+0x42>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2201      	movs	r2, #1
 80107b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	78fa      	ldrb	r2, [r7, #3]
 80107be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	78fa      	ldrb	r2, [r7, #3]
 80107c8:	4611      	mov	r1, r2
 80107ca:	4618      	mov	r0, r3
 80107cc:	f008 ff98 	bl	8019700 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b084      	sub	sp, #16
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	4608      	mov	r0, r1
 80107ec:	4611      	mov	r1, r2
 80107ee:	461a      	mov	r2, r3
 80107f0:	4603      	mov	r3, r0
 80107f2:	70fb      	strb	r3, [r7, #3]
 80107f4:	460b      	mov	r3, r1
 80107f6:	803b      	strh	r3, [r7, #0]
 80107f8:	4613      	mov	r3, r2
 80107fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8010800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010804:	2b00      	cmp	r3, #0
 8010806:	da0f      	bge.n	8010828 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010808:	78fb      	ldrb	r3, [r7, #3]
 801080a:	f003 020f 	and.w	r2, r3, #15
 801080e:	4613      	mov	r3, r2
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	1a9b      	subs	r3, r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	3338      	adds	r3, #56	; 0x38
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	4413      	add	r3, r2
 801081c:	3304      	adds	r3, #4
 801081e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2201      	movs	r2, #1
 8010824:	705a      	strb	r2, [r3, #1]
 8010826:	e00f      	b.n	8010848 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010828:	78fb      	ldrb	r3, [r7, #3]
 801082a:	f003 020f 	and.w	r2, r3, #15
 801082e:	4613      	mov	r3, r2
 8010830:	00db      	lsls	r3, r3, #3
 8010832:	1a9b      	subs	r3, r3, r2
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	4413      	add	r3, r2
 801083e:	3304      	adds	r3, #4
 8010840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2200      	movs	r2, #0
 8010846:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8010848:	78fb      	ldrb	r3, [r7, #3]
 801084a:	f003 030f 	and.w	r3, r3, #15
 801084e:	b2da      	uxtb	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8010854:	883a      	ldrh	r2, [r7, #0]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	78ba      	ldrb	r2, [r7, #2]
 801085e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	785b      	ldrb	r3, [r3, #1]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d004      	beq.n	8010872 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	b29a      	uxth	r2, r3
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010872:	78bb      	ldrb	r3, [r7, #2]
 8010874:	2b02      	cmp	r3, #2
 8010876:	d102      	bne.n	801087e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010884:	2b01      	cmp	r3, #1
 8010886:	d101      	bne.n	801088c <HAL_PCD_EP_Open+0xaa>
 8010888:	2302      	movs	r3, #2
 801088a:	e00e      	b.n	80108aa <HAL_PCD_EP_Open+0xc8>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2201      	movs	r2, #1
 8010890:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	68f9      	ldr	r1, [r7, #12]
 801089a:	4618      	mov	r0, r3
 801089c:	f008 f8be 	bl	8018a1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80108a8:	7afb      	ldrb	r3, [r7, #11]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80108be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	da0f      	bge.n	80108e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80108c6:	78fb      	ldrb	r3, [r7, #3]
 80108c8:	f003 020f 	and.w	r2, r3, #15
 80108cc:	4613      	mov	r3, r2
 80108ce:	00db      	lsls	r3, r3, #3
 80108d0:	1a9b      	subs	r3, r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	3338      	adds	r3, #56	; 0x38
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	4413      	add	r3, r2
 80108da:	3304      	adds	r3, #4
 80108dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2201      	movs	r2, #1
 80108e2:	705a      	strb	r2, [r3, #1]
 80108e4:	e00f      	b.n	8010906 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80108e6:	78fb      	ldrb	r3, [r7, #3]
 80108e8:	f003 020f 	and.w	r2, r3, #15
 80108ec:	4613      	mov	r3, r2
 80108ee:	00db      	lsls	r3, r3, #3
 80108f0:	1a9b      	subs	r3, r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	4413      	add	r3, r2
 80108fc:	3304      	adds	r3, #4
 80108fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2200      	movs	r2, #0
 8010904:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8010906:	78fb      	ldrb	r3, [r7, #3]
 8010908:	f003 030f 	and.w	r3, r3, #15
 801090c:	b2da      	uxtb	r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010918:	2b01      	cmp	r3, #1
 801091a:	d101      	bne.n	8010920 <HAL_PCD_EP_Close+0x6e>
 801091c:	2302      	movs	r3, #2
 801091e:	e00e      	b.n	801093e <HAL_PCD_EP_Close+0x8c>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2201      	movs	r2, #1
 8010924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68f9      	ldr	r1, [r7, #12]
 801092e:	4618      	mov	r0, r3
 8010930:	f008 f8fc 	bl	8018b2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801093c:	2300      	movs	r3, #0
}
 801093e:	4618      	mov	r0, r3
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b086      	sub	sp, #24
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	607a      	str	r2, [r7, #4]
 8010950:	603b      	str	r3, [r7, #0]
 8010952:	460b      	mov	r3, r1
 8010954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010956:	7afb      	ldrb	r3, [r7, #11]
 8010958:	f003 020f 	and.w	r2, r3, #15
 801095c:	4613      	mov	r3, r2
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	1a9b      	subs	r3, r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	4413      	add	r3, r2
 801096c:	3304      	adds	r3, #4
 801096e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	2200      	movs	r2, #0
 8010980:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	2200      	movs	r2, #0
 8010986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010988:	7afb      	ldrb	r3, [r7, #11]
 801098a:	f003 030f 	and.w	r3, r3, #15
 801098e:	b2da      	uxtb	r2, r3
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	2b01      	cmp	r3, #1
 801099a:	d102      	bne.n	80109a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80109a2:	7afb      	ldrb	r3, [r7, #11]
 80109a4:	f003 030f 	and.w	r3, r3, #15
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d109      	bne.n	80109c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6818      	ldr	r0, [r3, #0]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	461a      	mov	r2, r3
 80109b8:	6979      	ldr	r1, [r7, #20]
 80109ba:	f008 fbdf 	bl	801917c <USB_EP0StartXfer>
 80109be:	e008      	b.n	80109d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6818      	ldr	r0, [r3, #0]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	461a      	mov	r2, r3
 80109cc:	6979      	ldr	r1, [r7, #20]
 80109ce:	f008 f989 	bl	8018ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80109e8:	78fb      	ldrb	r3, [r7, #3]
 80109ea:	f003 020f 	and.w	r2, r3, #15
 80109ee:	6879      	ldr	r1, [r7, #4]
 80109f0:	4613      	mov	r3, r2
 80109f2:	00db      	lsls	r3, r3, #3
 80109f4:	1a9b      	subs	r3, r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	440b      	add	r3, r1
 80109fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80109fe:	681b      	ldr	r3, [r3, #0]
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010a1c:	7afb      	ldrb	r3, [r7, #11]
 8010a1e:	f003 020f 	and.w	r2, r3, #15
 8010a22:	4613      	mov	r3, r2
 8010a24:	00db      	lsls	r3, r3, #3
 8010a26:	1a9b      	subs	r3, r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	3338      	adds	r3, #56	; 0x38
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	4413      	add	r3, r2
 8010a30:	3304      	adds	r3, #4
 8010a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	2200      	movs	r2, #0
 8010a44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010a4c:	7afb      	ldrb	r3, [r7, #11]
 8010a4e:	f003 030f 	and.w	r3, r3, #15
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	691b      	ldr	r3, [r3, #16]
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d102      	bne.n	8010a66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010a66:	7afb      	ldrb	r3, [r7, #11]
 8010a68:	f003 030f 	and.w	r3, r3, #15
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d109      	bne.n	8010a84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	6979      	ldr	r1, [r7, #20]
 8010a7e:	f008 fb7d 	bl	801917c <USB_EP0StartXfer>
 8010a82:	e008      	b.n	8010a96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6818      	ldr	r0, [r3, #0]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	461a      	mov	r2, r3
 8010a90:	6979      	ldr	r1, [r7, #20]
 8010a92:	f008 f927 	bl	8018ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3718      	adds	r7, #24
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	f003 020f 	and.w	r2, r3, #15
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d901      	bls.n	8010abe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8010aba:	2301      	movs	r3, #1
 8010abc:	e050      	b.n	8010b60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	da0f      	bge.n	8010ae6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010ac6:	78fb      	ldrb	r3, [r7, #3]
 8010ac8:	f003 020f 	and.w	r2, r3, #15
 8010acc:	4613      	mov	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	1a9b      	subs	r3, r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	3338      	adds	r3, #56	; 0x38
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4413      	add	r3, r2
 8010ada:	3304      	adds	r3, #4
 8010adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	705a      	strb	r2, [r3, #1]
 8010ae4:	e00d      	b.n	8010b02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010ae6:	78fa      	ldrb	r2, [r7, #3]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	4413      	add	r3, r2
 8010af8:	3304      	adds	r3, #4
 8010afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2200      	movs	r2, #0
 8010b00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2201      	movs	r2, #1
 8010b06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010b08:	78fb      	ldrb	r3, [r7, #3]
 8010b0a:	f003 030f 	and.w	r3, r3, #15
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d101      	bne.n	8010b22 <HAL_PCD_EP_SetStall+0x82>
 8010b1e:	2302      	movs	r3, #2
 8010b20:	e01e      	b.n	8010b60 <HAL_PCD_EP_SetStall+0xc0>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68f9      	ldr	r1, [r7, #12]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f008 fd11 	bl	8019558 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010b36:	78fb      	ldrb	r3, [r7, #3]
 8010b38:	f003 030f 	and.w	r3, r3, #15
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10a      	bne.n	8010b56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	691b      	ldr	r3, [r3, #16]
 8010b48:	b2d9      	uxtb	r1, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010b50:	461a      	mov	r2, r3
 8010b52:	f008 ff03 	bl	801995c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	460b      	mov	r3, r1
 8010b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010b74:	78fb      	ldrb	r3, [r7, #3]
 8010b76:	f003 020f 	and.w	r2, r3, #15
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d901      	bls.n	8010b86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8010b82:	2301      	movs	r3, #1
 8010b84:	e042      	b.n	8010c0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	da0f      	bge.n	8010bae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010b8e:	78fb      	ldrb	r3, [r7, #3]
 8010b90:	f003 020f 	and.w	r2, r3, #15
 8010b94:	4613      	mov	r3, r2
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	1a9b      	subs	r3, r3, r2
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	3338      	adds	r3, #56	; 0x38
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	705a      	strb	r2, [r3, #1]
 8010bac:	e00f      	b.n	8010bce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010bae:	78fb      	ldrb	r3, [r7, #3]
 8010bb0:	f003 020f 	and.w	r2, r3, #15
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	00db      	lsls	r3, r3, #3
 8010bb8:	1a9b      	subs	r3, r3, r2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010bd4:	78fb      	ldrb	r3, [r7, #3]
 8010bd6:	f003 030f 	and.w	r3, r3, #15
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d101      	bne.n	8010bee <HAL_PCD_EP_ClrStall+0x86>
 8010bea:	2302      	movs	r3, #2
 8010bec:	e00e      	b.n	8010c0c <HAL_PCD_EP_ClrStall+0xa4>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	68f9      	ldr	r1, [r7, #12]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f008 fd19 	bl	8019634 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08a      	sub	sp, #40	; 0x28
 8010c18:	af02      	add	r7, sp, #8
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8010c28:	683a      	ldr	r2, [r7, #0]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	00db      	lsls	r3, r3, #3
 8010c2e:	1a9b      	subs	r3, r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	3338      	adds	r3, #56	; 0x38
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	4413      	add	r3, r2
 8010c38:	3304      	adds	r3, #4
 8010c3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	699a      	ldr	r2, [r3, #24]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d901      	bls.n	8010c4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e06c      	b.n	8010d26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	695a      	ldr	r2, [r3, #20]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	699b      	ldr	r3, [r3, #24]
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	689b      	ldr	r3, [r3, #8]
 8010c5c:	69fa      	ldr	r2, [r7, #28]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d902      	bls.n	8010c68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	3303      	adds	r3, #3
 8010c6c:	089b      	lsrs	r3, r3, #2
 8010c6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010c70:	e02b      	b.n	8010cca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	695a      	ldr	r2, [r3, #20]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	699b      	ldr	r3, [r3, #24]
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	69fa      	ldr	r2, [r7, #28]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d902      	bls.n	8010c8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	3303      	adds	r3, #3
 8010c92:	089b      	lsrs	r3, r3, #2
 8010c94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	68d9      	ldr	r1, [r3, #12]
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	4603      	mov	r3, r0
 8010cac:	6978      	ldr	r0, [r7, #20]
 8010cae:	f008 fbbd 	bl	801942c <USB_WritePacket>

    ep->xfer_buff  += len;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	68da      	ldr	r2, [r3, #12]
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	441a      	add	r2, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	699a      	ldr	r2, [r3, #24]
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	441a      	add	r2, r3
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	015a      	lsls	r2, r3, #5
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	69ba      	ldr	r2, [r7, #24]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d809      	bhi.n	8010cf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	699a      	ldr	r2, [r3, #24]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d203      	bcs.n	8010cf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	695b      	ldr	r3, [r3, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1be      	bne.n	8010c72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	695a      	ldr	r2, [r3, #20]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	699b      	ldr	r3, [r3, #24]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d811      	bhi.n	8010d24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	f003 030f 	and.w	r3, r3, #15
 8010d06:	2201      	movs	r2, #1
 8010d08:	fa02 f303 	lsl.w	r3, r2, r3
 8010d0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	43db      	mvns	r3, r3
 8010d1a:	6939      	ldr	r1, [r7, #16]
 8010d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d20:	4013      	ands	r3, r2
 8010d22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3720      	adds	r7, #32
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
	...

08010d30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b086      	sub	sp, #24
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	333c      	adds	r3, #60	; 0x3c
 8010d48:	3304      	adds	r3, #4
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	015a      	lsls	r2, r3, #5
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	4413      	add	r3, r2
 8010d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	f040 80a0 	bne.w	8010ea8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	f003 0308 	and.w	r3, r3, #8
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d015      	beq.n	8010d9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	4a72      	ldr	r2, [pc, #456]	; (8010f40 <PCD_EP_OutXfrComplete_int+0x210>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	f240 80dd 	bls.w	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f000 80d7 	beq.w	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	015a      	lsls	r2, r3, #5
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	4413      	add	r3, r2
 8010d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d94:	461a      	mov	r2, r3
 8010d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d9a:	6093      	str	r3, [r2, #8]
 8010d9c:	e0cb      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f003 0320 	and.w	r3, r3, #32
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d009      	beq.n	8010dbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	015a      	lsls	r2, r3, #5
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	4413      	add	r3, r2
 8010db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010db4:	461a      	mov	r2, r3
 8010db6:	2320      	movs	r3, #32
 8010db8:	6093      	str	r3, [r2, #8]
 8010dba:	e0bc      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f040 80b7 	bne.w	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	4a5d      	ldr	r2, [pc, #372]	; (8010f40 <PCD_EP_OutXfrComplete_int+0x210>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d90f      	bls.n	8010df0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00a      	beq.n	8010df0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	015a      	lsls	r2, r3, #5
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	4413      	add	r3, r2
 8010de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010de6:	461a      	mov	r2, r3
 8010de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dec:	6093      	str	r3, [r2, #8]
 8010dee:	e0a2      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8010df0:	6879      	ldr	r1, [r7, #4]
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	4613      	mov	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	1a9b      	subs	r3, r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	440b      	add	r3, r1
 8010dfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010e02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	0159      	lsls	r1, r3, #5
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	440b      	add	r3, r1
 8010e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8010e16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	683a      	ldr	r2, [r7, #0]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	00db      	lsls	r3, r3, #3
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4403      	add	r3, r0
 8010e26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010e2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	4613      	mov	r3, r2
 8010e32:	00db      	lsls	r3, r3, #3
 8010e34:	1a9b      	subs	r3, r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	440b      	add	r3, r1
 8010e3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010e3e:	6819      	ldr	r1, [r3, #0]
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	683a      	ldr	r2, [r7, #0]
 8010e44:	4613      	mov	r3, r2
 8010e46:	00db      	lsls	r3, r3, #3
 8010e48:	1a9b      	subs	r3, r3, r2
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4403      	add	r3, r0
 8010e4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4419      	add	r1, r3
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	00db      	lsls	r3, r3, #3
 8010e5e:	1a9b      	subs	r3, r3, r2
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	4403      	add	r3, r0
 8010e64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010e68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d114      	bne.n	8010e9a <PCD_EP_OutXfrComplete_int+0x16a>
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	683a      	ldr	r2, [r7, #0]
 8010e74:	4613      	mov	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	1a9b      	subs	r3, r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	440b      	add	r3, r1
 8010e7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d108      	bne.n	8010e9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6818      	ldr	r0, [r3, #0]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010e92:	461a      	mov	r2, r3
 8010e94:	2101      	movs	r1, #1
 8010e96:	f008 fd61 	bl	801995c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f00a fcb9 	bl	801b818 <HAL_PCD_DataOutStageCallback>
 8010ea6:	e046      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4a26      	ldr	r2, [pc, #152]	; (8010f44 <PCD_EP_OutXfrComplete_int+0x214>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d124      	bne.n	8010efa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00a      	beq.n	8010ed0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	015a      	lsls	r2, r3, #5
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ecc:	6093      	str	r3, [r2, #8]
 8010ece:	e032      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	f003 0320 	and.w	r3, r3, #32
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d008      	beq.n	8010eec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	015a      	lsls	r2, r3, #5
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	2320      	movs	r3, #32
 8010eea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f00a fc90 	bl	801b818 <HAL_PCD_DataOutStageCallback>
 8010ef8:	e01d      	b.n	8010f36 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d114      	bne.n	8010f2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8010f00:	6879      	ldr	r1, [r7, #4]
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	4613      	mov	r3, r2
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	1a9b      	subs	r3, r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	440b      	add	r3, r1
 8010f0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d108      	bne.n	8010f2a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6818      	ldr	r0, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010f22:	461a      	mov	r2, r3
 8010f24:	2100      	movs	r1, #0
 8010f26:	f008 fd19 	bl	801995c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	4619      	mov	r1, r3
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f00a fc71 	bl	801b818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	4f54300a 	.word	0x4f54300a
 8010f44:	4f54310a 	.word	0x4f54310a

08010f48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	333c      	adds	r3, #60	; 0x3c
 8010f60:	3304      	adds	r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	015a      	lsls	r2, r3, #5
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	4a15      	ldr	r2, [pc, #84]	; (8010fd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d90e      	bls.n	8010f9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d009      	beq.n	8010f9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	015a      	lsls	r2, r3, #5
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	4413      	add	r3, r2
 8010f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f94:	461a      	mov	r2, r3
 8010f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f00a fc29 	bl	801b7f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	4a0a      	ldr	r2, [pc, #40]	; (8010fd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d90c      	bls.n	8010fc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	691b      	ldr	r3, [r3, #16]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d108      	bne.n	8010fc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6818      	ldr	r0, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	2101      	movs	r1, #1
 8010fc0:	f008 fccc 	bl	801995c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3718      	adds	r7, #24
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	4f54300a 	.word	0x4f54300a

08010fd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70fb      	strb	r3, [r7, #3]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010fec:	78fb      	ldrb	r3, [r7, #3]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d107      	bne.n	8011002 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010ff2:	883b      	ldrh	r3, [r7, #0]
 8010ff4:	0419      	lsls	r1, r3, #16
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	68ba      	ldr	r2, [r7, #8]
 8010ffc:	430a      	orrs	r2, r1
 8010ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8011000:	e028      	b.n	8011054 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011008:	0c1b      	lsrs	r3, r3, #16
 801100a:	68ba      	ldr	r2, [r7, #8]
 801100c:	4413      	add	r3, r2
 801100e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
 8011014:	e00d      	b.n	8011032 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	7bfb      	ldrb	r3, [r7, #15]
 801101c:	3340      	adds	r3, #64	; 0x40
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	0c1b      	lsrs	r3, r3, #16
 8011026:	68ba      	ldr	r2, [r7, #8]
 8011028:	4413      	add	r3, r2
 801102a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801102c:	7bfb      	ldrb	r3, [r7, #15]
 801102e:	3301      	adds	r3, #1
 8011030:	73fb      	strb	r3, [r7, #15]
 8011032:	7bfa      	ldrb	r2, [r7, #15]
 8011034:	78fb      	ldrb	r3, [r7, #3]
 8011036:	3b01      	subs	r3, #1
 8011038:	429a      	cmp	r2, r3
 801103a:	d3ec      	bcc.n	8011016 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801103c:	883b      	ldrh	r3, [r7, #0]
 801103e:	0418      	lsls	r0, r3, #16
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6819      	ldr	r1, [r3, #0]
 8011044:	78fb      	ldrb	r3, [r7, #3]
 8011046:	3b01      	subs	r3, #1
 8011048:	68ba      	ldr	r2, [r7, #8]
 801104a:	4302      	orrs	r2, r0
 801104c:	3340      	adds	r3, #64	; 0x40
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	440b      	add	r3, r1
 8011052:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3714      	adds	r7, #20
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr

08011062 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011062:	b480      	push	{r7}
 8011064:	b083      	sub	sp, #12
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	460b      	mov	r3, r1
 801106c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	887a      	ldrh	r2, [r7, #2]
 8011074:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2201      	movs	r2, #1
 8011096:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2200      	movs	r2, #0
 801109e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110b2:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80110b4:	4313      	orrs	r3, r2
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr
 80110c8:	10000003 	.word	0x10000003

080110cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	460b      	mov	r3, r1
 80110d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80110ec:	4b19      	ldr	r3, [pc, #100]	; (8011154 <HAL_PWREx_ConfigSupply+0x70>)
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	f003 0304 	and.w	r3, r3, #4
 80110f4:	2b04      	cmp	r3, #4
 80110f6:	d00a      	beq.n	801110e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80110f8:	4b16      	ldr	r3, [pc, #88]	; (8011154 <HAL_PWREx_ConfigSupply+0x70>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	f003 0307 	and.w	r3, r3, #7
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d001      	beq.n	801110a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	e01f      	b.n	801114a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	e01d      	b.n	801114a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801110e:	4b11      	ldr	r3, [pc, #68]	; (8011154 <HAL_PWREx_ConfigSupply+0x70>)
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	f023 0207 	bic.w	r2, r3, #7
 8011116:	490f      	ldr	r1, [pc, #60]	; (8011154 <HAL_PWREx_ConfigSupply+0x70>)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4313      	orrs	r3, r2
 801111c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801111e:	f7fa fd6b 	bl	800bbf8 <HAL_GetTick>
 8011122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011124:	e009      	b.n	801113a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011126:	f7fa fd67 	bl	800bbf8 <HAL_GetTick>
 801112a:	4602      	mov	r2, r0
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011134:	d901      	bls.n	801113a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011136:	2301      	movs	r3, #1
 8011138:	e007      	b.n	801114a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801113a:	4b06      	ldr	r3, [pc, #24]	; (8011154 <HAL_PWREx_ConfigSupply+0x70>)
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011146:	d1ee      	bne.n	8011126 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	58024800 	.word	0x58024800

08011158 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011158:	b480      	push	{r7}
 801115a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 801115c:	4b05      	ldr	r3, [pc, #20]	; (8011174 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	4a04      	ldr	r2, [pc, #16]	; (8011174 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011166:	60d3      	str	r3, [r2, #12]
}
 8011168:	bf00      	nop
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	58024800 	.word	0x58024800

08011178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b08c      	sub	sp, #48	; 0x30
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d102      	bne.n	801118c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011186:	2301      	movs	r3, #1
 8011188:	f000 bc1d 	b.w	80119c6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f003 0301 	and.w	r3, r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	f000 8087 	beq.w	80112a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801119a:	4b99      	ldr	r3, [pc, #612]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80111a4:	4b96      	ldr	r3, [pc, #600]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80111aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ac:	2b10      	cmp	r3, #16
 80111ae:	d007      	beq.n	80111c0 <HAL_RCC_OscConfig+0x48>
 80111b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b2:	2b18      	cmp	r3, #24
 80111b4:	d110      	bne.n	80111d8 <HAL_RCC_OscConfig+0x60>
 80111b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b8:	f003 0303 	and.w	r3, r3, #3
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d10b      	bne.n	80111d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80111c0:	4b8f      	ldr	r3, [pc, #572]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d06c      	beq.n	80112a6 <HAL_RCC_OscConfig+0x12e>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d168      	bne.n	80112a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80111d4:	2301      	movs	r3, #1
 80111d6:	e3f6      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111e0:	d106      	bne.n	80111f0 <HAL_RCC_OscConfig+0x78>
 80111e2:	4b87      	ldr	r3, [pc, #540]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a86      	ldr	r2, [pc, #536]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80111ec:	6013      	str	r3, [r2, #0]
 80111ee:	e02e      	b.n	801124e <HAL_RCC_OscConfig+0xd6>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d10c      	bne.n	8011212 <HAL_RCC_OscConfig+0x9a>
 80111f8:	4b81      	ldr	r3, [pc, #516]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4a80      	ldr	r2, [pc, #512]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80111fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011202:	6013      	str	r3, [r2, #0]
 8011204:	4b7e      	ldr	r3, [pc, #504]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a7d      	ldr	r2, [pc, #500]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	e01d      	b.n	801124e <HAL_RCC_OscConfig+0xd6>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801121a:	d10c      	bne.n	8011236 <HAL_RCC_OscConfig+0xbe>
 801121c:	4b78      	ldr	r3, [pc, #480]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a77      	ldr	r2, [pc, #476]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011226:	6013      	str	r3, [r2, #0]
 8011228:	4b75      	ldr	r3, [pc, #468]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a74      	ldr	r2, [pc, #464]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801122e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011232:	6013      	str	r3, [r2, #0]
 8011234:	e00b      	b.n	801124e <HAL_RCC_OscConfig+0xd6>
 8011236:	4b72      	ldr	r3, [pc, #456]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a71      	ldr	r2, [pc, #452]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	4b6f      	ldr	r3, [pc, #444]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	4a6e      	ldr	r2, [pc, #440]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801124c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d013      	beq.n	801127e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011256:	f7fa fccf 	bl	800bbf8 <HAL_GetTick>
 801125a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801125c:	e008      	b.n	8011270 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801125e:	f7fa fccb 	bl	800bbf8 <HAL_GetTick>
 8011262:	4602      	mov	r2, r0
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	2b64      	cmp	r3, #100	; 0x64
 801126a:	d901      	bls.n	8011270 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 801126c:	2303      	movs	r3, #3
 801126e:	e3aa      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011270:	4b63      	ldr	r3, [pc, #396]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011278:	2b00      	cmp	r3, #0
 801127a:	d0f0      	beq.n	801125e <HAL_RCC_OscConfig+0xe6>
 801127c:	e014      	b.n	80112a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801127e:	f7fa fcbb 	bl	800bbf8 <HAL_GetTick>
 8011282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011284:	e008      	b.n	8011298 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011286:	f7fa fcb7 	bl	800bbf8 <HAL_GetTick>
 801128a:	4602      	mov	r2, r0
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	2b64      	cmp	r3, #100	; 0x64
 8011292:	d901      	bls.n	8011298 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e396      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011298:	4b59      	ldr	r3, [pc, #356]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d1f0      	bne.n	8011286 <HAL_RCC_OscConfig+0x10e>
 80112a4:	e000      	b.n	80112a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f003 0302 	and.w	r3, r3, #2
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f000 80cb 	beq.w	801144c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80112b6:	4b52      	ldr	r3, [pc, #328]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80112c0:	4b4f      	ldr	r3, [pc, #316]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80112c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d007      	beq.n	80112dc <HAL_RCC_OscConfig+0x164>
 80112cc:	6a3b      	ldr	r3, [r7, #32]
 80112ce:	2b18      	cmp	r3, #24
 80112d0:	d156      	bne.n	8011380 <HAL_RCC_OscConfig+0x208>
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	f003 0303 	and.w	r3, r3, #3
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d151      	bne.n	8011380 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112dc:	4b48      	ldr	r3, [pc, #288]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 0304 	and.w	r3, r3, #4
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d005      	beq.n	80112f4 <HAL_RCC_OscConfig+0x17c>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d101      	bne.n	80112f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e368      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80112f4:	4b42      	ldr	r3, [pc, #264]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f023 0219 	bic.w	r2, r3, #25
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	493f      	ldr	r1, [pc, #252]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011302:	4313      	orrs	r3, r2
 8011304:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011306:	f7fa fc77 	bl	800bbf8 <HAL_GetTick>
 801130a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801130c:	e008      	b.n	8011320 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801130e:	f7fa fc73 	bl	800bbf8 <HAL_GetTick>
 8011312:	4602      	mov	r2, r0
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	2b02      	cmp	r3, #2
 801131a:	d901      	bls.n	8011320 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 801131c:	2303      	movs	r3, #3
 801131e:	e352      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011320:	4b37      	ldr	r3, [pc, #220]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 0304 	and.w	r3, r3, #4
 8011328:	2b00      	cmp	r3, #0
 801132a:	d0f0      	beq.n	801130e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801132c:	f7fa fc94 	bl	800bc58 <HAL_GetREVID>
 8011330:	4603      	mov	r3, r0
 8011332:	f241 0203 	movw	r2, #4099	; 0x1003
 8011336:	4293      	cmp	r3, r2
 8011338:	d817      	bhi.n	801136a <HAL_RCC_OscConfig+0x1f2>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	691b      	ldr	r3, [r3, #16]
 801133e:	2b40      	cmp	r3, #64	; 0x40
 8011340:	d108      	bne.n	8011354 <HAL_RCC_OscConfig+0x1dc>
 8011342:	4b2f      	ldr	r3, [pc, #188]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801134a:	4a2d      	ldr	r2, [pc, #180]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011350:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011352:	e07b      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011354:	4b2a      	ldr	r3, [pc, #168]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	031b      	lsls	r3, r3, #12
 8011362:	4927      	ldr	r1, [pc, #156]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011364:	4313      	orrs	r3, r2
 8011366:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011368:	e070      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801136a:	4b25      	ldr	r3, [pc, #148]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	061b      	lsls	r3, r3, #24
 8011378:	4921      	ldr	r1, [pc, #132]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801137a:	4313      	orrs	r3, r2
 801137c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801137e:	e065      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d048      	beq.n	801141a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011388:	4b1d      	ldr	r3, [pc, #116]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f023 0219 	bic.w	r2, r3, #25
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	491a      	ldr	r1, [pc, #104]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 8011396:	4313      	orrs	r3, r2
 8011398:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801139a:	f7fa fc2d 	bl	800bbf8 <HAL_GetTick>
 801139e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113a0:	e008      	b.n	80113b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80113a2:	f7fa fc29 	bl	800bbf8 <HAL_GetTick>
 80113a6:	4602      	mov	r2, r0
 80113a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113aa:	1ad3      	subs	r3, r2, r3
 80113ac:	2b02      	cmp	r3, #2
 80113ae:	d901      	bls.n	80113b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80113b0:	2303      	movs	r3, #3
 80113b2:	e308      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113b4:	4b12      	ldr	r3, [pc, #72]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f003 0304 	and.w	r3, r3, #4
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d0f0      	beq.n	80113a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113c0:	f7fa fc4a 	bl	800bc58 <HAL_GetREVID>
 80113c4:	4603      	mov	r3, r0
 80113c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d81a      	bhi.n	8011404 <HAL_RCC_OscConfig+0x28c>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	2b40      	cmp	r3, #64	; 0x40
 80113d4:	d108      	bne.n	80113e8 <HAL_RCC_OscConfig+0x270>
 80113d6:	4b0a      	ldr	r3, [pc, #40]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80113de:	4a08      	ldr	r2, [pc, #32]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80113e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113e4:	6053      	str	r3, [r2, #4]
 80113e6:	e031      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
 80113e8:	4b05      	ldr	r3, [pc, #20]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	031b      	lsls	r3, r3, #12
 80113f6:	4902      	ldr	r1, [pc, #8]	; (8011400 <HAL_RCC_OscConfig+0x288>)
 80113f8:	4313      	orrs	r3, r2
 80113fa:	604b      	str	r3, [r1, #4]
 80113fc:	e026      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
 80113fe:	bf00      	nop
 8011400:	58024400 	.word	0x58024400
 8011404:	4b9a      	ldr	r3, [pc, #616]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	061b      	lsls	r3, r3, #24
 8011412:	4997      	ldr	r1, [pc, #604]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011414:	4313      	orrs	r3, r2
 8011416:	604b      	str	r3, [r1, #4]
 8011418:	e018      	b.n	801144c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801141a:	4b95      	ldr	r3, [pc, #596]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	4a94      	ldr	r2, [pc, #592]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011420:	f023 0301 	bic.w	r3, r3, #1
 8011424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011426:	f7fa fbe7 	bl	800bbf8 <HAL_GetTick>
 801142a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801142c:	e008      	b.n	8011440 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801142e:	f7fa fbe3 	bl	800bbf8 <HAL_GetTick>
 8011432:	4602      	mov	r2, r0
 8011434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	2b02      	cmp	r3, #2
 801143a:	d901      	bls.n	8011440 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801143c:	2303      	movs	r3, #3
 801143e:	e2c2      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011440:	4b8b      	ldr	r3, [pc, #556]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f003 0304 	and.w	r3, r3, #4
 8011448:	2b00      	cmp	r3, #0
 801144a:	d1f0      	bne.n	801142e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f003 0310 	and.w	r3, r3, #16
 8011454:	2b00      	cmp	r3, #0
 8011456:	f000 80a9 	beq.w	80115ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801145a:	4b85      	ldr	r3, [pc, #532]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011462:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011464:	4b82      	ldr	r3, [pc, #520]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011468:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	2b08      	cmp	r3, #8
 801146e:	d007      	beq.n	8011480 <HAL_RCC_OscConfig+0x308>
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	2b18      	cmp	r3, #24
 8011474:	d13a      	bne.n	80114ec <HAL_RCC_OscConfig+0x374>
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f003 0303 	and.w	r3, r3, #3
 801147c:	2b01      	cmp	r3, #1
 801147e:	d135      	bne.n	80114ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011480:	4b7b      	ldr	r3, [pc, #492]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011488:	2b00      	cmp	r3, #0
 801148a:	d005      	beq.n	8011498 <HAL_RCC_OscConfig+0x320>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	69db      	ldr	r3, [r3, #28]
 8011490:	2b80      	cmp	r3, #128	; 0x80
 8011492:	d001      	beq.n	8011498 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8011494:	2301      	movs	r3, #1
 8011496:	e296      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011498:	f7fa fbde 	bl	800bc58 <HAL_GetREVID>
 801149c:	4603      	mov	r3, r0
 801149e:	f241 0203 	movw	r2, #4099	; 0x1003
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d817      	bhi.n	80114d6 <HAL_RCC_OscConfig+0x35e>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6a1b      	ldr	r3, [r3, #32]
 80114aa:	2b20      	cmp	r3, #32
 80114ac:	d108      	bne.n	80114c0 <HAL_RCC_OscConfig+0x348>
 80114ae:	4b70      	ldr	r3, [pc, #448]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80114b6:	4a6e      	ldr	r2, [pc, #440]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80114be:	e075      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114c0:	4b6b      	ldr	r3, [pc, #428]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a1b      	ldr	r3, [r3, #32]
 80114cc:	069b      	lsls	r3, r3, #26
 80114ce:	4968      	ldr	r1, [pc, #416]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114d0:	4313      	orrs	r3, r2
 80114d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80114d4:	e06a      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114d6:	4b66      	ldr	r3, [pc, #408]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6a1b      	ldr	r3, [r3, #32]
 80114e2:	061b      	lsls	r3, r3, #24
 80114e4:	4962      	ldr	r1, [pc, #392]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114e6:	4313      	orrs	r3, r2
 80114e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80114ea:	e05f      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	69db      	ldr	r3, [r3, #28]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d042      	beq.n	801157a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80114f4:	4b5e      	ldr	r3, [pc, #376]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a5d      	ldr	r2, [pc, #372]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80114fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011500:	f7fa fb7a 	bl	800bbf8 <HAL_GetTick>
 8011504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011506:	e008      	b.n	801151a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011508:	f7fa fb76 	bl	800bbf8 <HAL_GetTick>
 801150c:	4602      	mov	r2, r0
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	2b02      	cmp	r3, #2
 8011514:	d901      	bls.n	801151a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8011516:	2303      	movs	r3, #3
 8011518:	e255      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801151a:	4b55      	ldr	r3, [pc, #340]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011522:	2b00      	cmp	r3, #0
 8011524:	d0f0      	beq.n	8011508 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011526:	f7fa fb97 	bl	800bc58 <HAL_GetREVID>
 801152a:	4603      	mov	r3, r0
 801152c:	f241 0203 	movw	r2, #4099	; 0x1003
 8011530:	4293      	cmp	r3, r2
 8011532:	d817      	bhi.n	8011564 <HAL_RCC_OscConfig+0x3ec>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a1b      	ldr	r3, [r3, #32]
 8011538:	2b20      	cmp	r3, #32
 801153a:	d108      	bne.n	801154e <HAL_RCC_OscConfig+0x3d6>
 801153c:	4b4c      	ldr	r3, [pc, #304]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011544:	4a4a      	ldr	r2, [pc, #296]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801154a:	6053      	str	r3, [r2, #4]
 801154c:	e02e      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
 801154e:	4b48      	ldr	r3, [pc, #288]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	069b      	lsls	r3, r3, #26
 801155c:	4944      	ldr	r1, [pc, #272]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801155e:	4313      	orrs	r3, r2
 8011560:	604b      	str	r3, [r1, #4]
 8011562:	e023      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
 8011564:	4b42      	ldr	r3, [pc, #264]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6a1b      	ldr	r3, [r3, #32]
 8011570:	061b      	lsls	r3, r3, #24
 8011572:	493f      	ldr	r1, [pc, #252]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011574:	4313      	orrs	r3, r2
 8011576:	60cb      	str	r3, [r1, #12]
 8011578:	e018      	b.n	80115ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801157a:	4b3d      	ldr	r3, [pc, #244]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	4a3c      	ldr	r2, [pc, #240]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011586:	f7fa fb37 	bl	800bbf8 <HAL_GetTick>
 801158a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801158c:	e008      	b.n	80115a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801158e:	f7fa fb33 	bl	800bbf8 <HAL_GetTick>
 8011592:	4602      	mov	r2, r0
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	2b02      	cmp	r3, #2
 801159a:	d901      	bls.n	80115a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801159c:	2303      	movs	r3, #3
 801159e:	e212      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80115a0:	4b33      	ldr	r3, [pc, #204]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d1f0      	bne.n	801158e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f003 0308 	and.w	r3, r3, #8
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d036      	beq.n	8011626 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	695b      	ldr	r3, [r3, #20]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d019      	beq.n	80115f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80115c0:	4b2b      	ldr	r3, [pc, #172]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115c4:	4a2a      	ldr	r2, [pc, #168]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115c6:	f043 0301 	orr.w	r3, r3, #1
 80115ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80115cc:	f7fa fb14 	bl	800bbf8 <HAL_GetTick>
 80115d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80115d2:	e008      	b.n	80115e6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80115d4:	f7fa fb10 	bl	800bbf8 <HAL_GetTick>
 80115d8:	4602      	mov	r2, r0
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d901      	bls.n	80115e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80115e2:	2303      	movs	r3, #3
 80115e4:	e1ef      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80115e6:	4b22      	ldr	r3, [pc, #136]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115ea:	f003 0302 	and.w	r3, r3, #2
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0f0      	beq.n	80115d4 <HAL_RCC_OscConfig+0x45c>
 80115f2:	e018      	b.n	8011626 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80115f4:	4b1e      	ldr	r3, [pc, #120]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115f8:	4a1d      	ldr	r2, [pc, #116]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 80115fa:	f023 0301 	bic.w	r3, r3, #1
 80115fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011600:	f7fa fafa 	bl	800bbf8 <HAL_GetTick>
 8011604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011606:	e008      	b.n	801161a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011608:	f7fa faf6 	bl	800bbf8 <HAL_GetTick>
 801160c:	4602      	mov	r2, r0
 801160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	2b02      	cmp	r3, #2
 8011614:	d901      	bls.n	801161a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8011616:	2303      	movs	r3, #3
 8011618:	e1d5      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801161a:	4b15      	ldr	r3, [pc, #84]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801161e:	f003 0302 	and.w	r3, r3, #2
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1f0      	bne.n	8011608 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f003 0320 	and.w	r3, r3, #32
 801162e:	2b00      	cmp	r3, #0
 8011630:	d039      	beq.n	80116a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	699b      	ldr	r3, [r3, #24]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d01c      	beq.n	8011674 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801163a:	4b0d      	ldr	r3, [pc, #52]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4a0c      	ldr	r2, [pc, #48]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011646:	f7fa fad7 	bl	800bbf8 <HAL_GetTick>
 801164a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801164c:	e008      	b.n	8011660 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801164e:	f7fa fad3 	bl	800bbf8 <HAL_GetTick>
 8011652:	4602      	mov	r2, r0
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	2b02      	cmp	r3, #2
 801165a:	d901      	bls.n	8011660 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801165c:	2303      	movs	r3, #3
 801165e:	e1b2      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011660:	4b03      	ldr	r3, [pc, #12]	; (8011670 <HAL_RCC_OscConfig+0x4f8>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011668:	2b00      	cmp	r3, #0
 801166a:	d0f0      	beq.n	801164e <HAL_RCC_OscConfig+0x4d6>
 801166c:	e01b      	b.n	80116a6 <HAL_RCC_OscConfig+0x52e>
 801166e:	bf00      	nop
 8011670:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011674:	4b9b      	ldr	r3, [pc, #620]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4a9a      	ldr	r2, [pc, #616]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801167a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801167e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011680:	f7fa faba 	bl	800bbf8 <HAL_GetTick>
 8011684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011686:	e008      	b.n	801169a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8011688:	f7fa fab6 	bl	800bbf8 <HAL_GetTick>
 801168c:	4602      	mov	r2, r0
 801168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	2b02      	cmp	r3, #2
 8011694:	d901      	bls.n	801169a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8011696:	2303      	movs	r3, #3
 8011698:	e195      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801169a:	4b92      	ldr	r3, [pc, #584]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1f0      	bne.n	8011688 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f003 0304 	and.w	r3, r3, #4
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	f000 8081 	beq.w	80117b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80116b4:	4b8c      	ldr	r3, [pc, #560]	; (80118e8 <HAL_RCC_OscConfig+0x770>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	4a8b      	ldr	r2, [pc, #556]	; (80118e8 <HAL_RCC_OscConfig+0x770>)
 80116ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80116c0:	f7fa fa9a 	bl	800bbf8 <HAL_GetTick>
 80116c4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80116c6:	e008      	b.n	80116da <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80116c8:	f7fa fa96 	bl	800bbf8 <HAL_GetTick>
 80116cc:	4602      	mov	r2, r0
 80116ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	2b64      	cmp	r3, #100	; 0x64
 80116d4:	d901      	bls.n	80116da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80116d6:	2303      	movs	r3, #3
 80116d8:	e175      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80116da:	4b83      	ldr	r3, [pc, #524]	; (80118e8 <HAL_RCC_OscConfig+0x770>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d0f0      	beq.n	80116c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d106      	bne.n	80116fc <HAL_RCC_OscConfig+0x584>
 80116ee:	4b7d      	ldr	r3, [pc, #500]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80116f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116f2:	4a7c      	ldr	r2, [pc, #496]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80116f4:	f043 0301 	orr.w	r3, r3, #1
 80116f8:	6713      	str	r3, [r2, #112]	; 0x70
 80116fa:	e02d      	b.n	8011758 <HAL_RCC_OscConfig+0x5e0>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10c      	bne.n	801171e <HAL_RCC_OscConfig+0x5a6>
 8011704:	4b77      	ldr	r3, [pc, #476]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011708:	4a76      	ldr	r2, [pc, #472]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801170a:	f023 0301 	bic.w	r3, r3, #1
 801170e:	6713      	str	r3, [r2, #112]	; 0x70
 8011710:	4b74      	ldr	r3, [pc, #464]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011714:	4a73      	ldr	r2, [pc, #460]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011716:	f023 0304 	bic.w	r3, r3, #4
 801171a:	6713      	str	r3, [r2, #112]	; 0x70
 801171c:	e01c      	b.n	8011758 <HAL_RCC_OscConfig+0x5e0>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	2b05      	cmp	r3, #5
 8011724:	d10c      	bne.n	8011740 <HAL_RCC_OscConfig+0x5c8>
 8011726:	4b6f      	ldr	r3, [pc, #444]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801172a:	4a6e      	ldr	r2, [pc, #440]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801172c:	f043 0304 	orr.w	r3, r3, #4
 8011730:	6713      	str	r3, [r2, #112]	; 0x70
 8011732:	4b6c      	ldr	r3, [pc, #432]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011736:	4a6b      	ldr	r2, [pc, #428]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011738:	f043 0301 	orr.w	r3, r3, #1
 801173c:	6713      	str	r3, [r2, #112]	; 0x70
 801173e:	e00b      	b.n	8011758 <HAL_RCC_OscConfig+0x5e0>
 8011740:	4b68      	ldr	r3, [pc, #416]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011744:	4a67      	ldr	r2, [pc, #412]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011746:	f023 0301 	bic.w	r3, r3, #1
 801174a:	6713      	str	r3, [r2, #112]	; 0x70
 801174c:	4b65      	ldr	r3, [pc, #404]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011750:	4a64      	ldr	r2, [pc, #400]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011752:	f023 0304 	bic.w	r3, r3, #4
 8011756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d015      	beq.n	801178c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011760:	f7fa fa4a 	bl	800bbf8 <HAL_GetTick>
 8011764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011766:	e00a      	b.n	801177e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011768:	f7fa fa46 	bl	800bbf8 <HAL_GetTick>
 801176c:	4602      	mov	r2, r0
 801176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	f241 3288 	movw	r2, #5000	; 0x1388
 8011776:	4293      	cmp	r3, r2
 8011778:	d901      	bls.n	801177e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801177a:	2303      	movs	r3, #3
 801177c:	e123      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801177e:	4b59      	ldr	r3, [pc, #356]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011782:	f003 0302 	and.w	r3, r3, #2
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0ee      	beq.n	8011768 <HAL_RCC_OscConfig+0x5f0>
 801178a:	e014      	b.n	80117b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801178c:	f7fa fa34 	bl	800bbf8 <HAL_GetTick>
 8011790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011792:	e00a      	b.n	80117aa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011794:	f7fa fa30 	bl	800bbf8 <HAL_GetTick>
 8011798:	4602      	mov	r2, r0
 801179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179c:	1ad3      	subs	r3, r2, r3
 801179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d901      	bls.n	80117aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80117a6:	2303      	movs	r3, #3
 80117a8:	e10d      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80117aa:	4b4e      	ldr	r3, [pc, #312]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80117ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ae:	f003 0302 	and.w	r3, r3, #2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1ee      	bne.n	8011794 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f000 8102 	beq.w	80119c4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80117c0:	4b48      	ldr	r3, [pc, #288]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80117c8:	2b18      	cmp	r3, #24
 80117ca:	f000 80bd 	beq.w	8011948 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d2:	2b02      	cmp	r3, #2
 80117d4:	f040 809e 	bne.w	8011914 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80117d8:	4b42      	ldr	r3, [pc, #264]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a41      	ldr	r2, [pc, #260]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80117de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80117e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117e4:	f7fa fa08 	bl	800bbf8 <HAL_GetTick>
 80117e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80117ea:	e008      	b.n	80117fe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80117ec:	f7fa fa04 	bl	800bbf8 <HAL_GetTick>
 80117f0:	4602      	mov	r2, r0
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	d901      	bls.n	80117fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80117fa:	2303      	movs	r3, #3
 80117fc:	e0e3      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80117fe:	4b39      	ldr	r3, [pc, #228]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1f0      	bne.n	80117ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801180a:	4b36      	ldr	r3, [pc, #216]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801180c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801180e:	4b37      	ldr	r3, [pc, #220]	; (80118ec <HAL_RCC_OscConfig+0x774>)
 8011810:	4013      	ands	r3, r2
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801181a:	0112      	lsls	r2, r2, #4
 801181c:	430a      	orrs	r2, r1
 801181e:	4931      	ldr	r1, [pc, #196]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011820:	4313      	orrs	r3, r2
 8011822:	628b      	str	r3, [r1, #40]	; 0x28
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011828:	3b01      	subs	r3, #1
 801182a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011832:	3b01      	subs	r3, #1
 8011834:	025b      	lsls	r3, r3, #9
 8011836:	b29b      	uxth	r3, r3
 8011838:	431a      	orrs	r2, r3
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801183e:	3b01      	subs	r3, #1
 8011840:	041b      	lsls	r3, r3, #16
 8011842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011846:	431a      	orrs	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801184c:	3b01      	subs	r3, #1
 801184e:	061b      	lsls	r3, r3, #24
 8011850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011854:	4923      	ldr	r1, [pc, #140]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011856:	4313      	orrs	r3, r2
 8011858:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801185a:	4b22      	ldr	r3, [pc, #136]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185e:	4a21      	ldr	r2, [pc, #132]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011860:	f023 0301 	bic.w	r3, r3, #1
 8011864:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011866:	4b1f      	ldr	r3, [pc, #124]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801186a:	4b21      	ldr	r3, [pc, #132]	; (80118f0 <HAL_RCC_OscConfig+0x778>)
 801186c:	4013      	ands	r3, r2
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011872:	00d2      	lsls	r2, r2, #3
 8011874:	491b      	ldr	r1, [pc, #108]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011876:	4313      	orrs	r3, r2
 8011878:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801187a:	4b1a      	ldr	r3, [pc, #104]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187e:	f023 020c 	bic.w	r2, r3, #12
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011886:	4917      	ldr	r1, [pc, #92]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 8011888:	4313      	orrs	r3, r2
 801188a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801188c:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011890:	f023 0202 	bic.w	r2, r3, #2
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011898:	4912      	ldr	r1, [pc, #72]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 801189a:	4313      	orrs	r3, r2
 801189c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801189e:	4b11      	ldr	r3, [pc, #68]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a2:	4a10      	ldr	r2, [pc, #64]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80118a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118aa:	4b0e      	ldr	r3, [pc, #56]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ae:	4a0d      	ldr	r2, [pc, #52]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80118b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80118b6:	4b0b      	ldr	r3, [pc, #44]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	4a0a      	ldr	r2, [pc, #40]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80118c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c6:	4a07      	ldr	r2, [pc, #28]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118c8:	f043 0301 	orr.w	r3, r3, #1
 80118cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80118ce:	4b05      	ldr	r3, [pc, #20]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	4a04      	ldr	r2, [pc, #16]	; (80118e4 <HAL_RCC_OscConfig+0x76c>)
 80118d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80118d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118da:	f7fa f98d 	bl	800bbf8 <HAL_GetTick>
 80118de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80118e0:	e011      	b.n	8011906 <HAL_RCC_OscConfig+0x78e>
 80118e2:	bf00      	nop
 80118e4:	58024400 	.word	0x58024400
 80118e8:	58024800 	.word	0x58024800
 80118ec:	fffffc0c 	.word	0xfffffc0c
 80118f0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118f4:	f7fa f980 	bl	800bbf8 <HAL_GetTick>
 80118f8:	4602      	mov	r2, r0
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d901      	bls.n	8011906 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8011902:	2303      	movs	r3, #3
 8011904:	e05f      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011906:	4b32      	ldr	r3, [pc, #200]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0f0      	beq.n	80118f4 <HAL_RCC_OscConfig+0x77c>
 8011912:	e057      	b.n	80119c4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011914:	4b2e      	ldr	r3, [pc, #184]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a2d      	ldr	r2, [pc, #180]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 801191a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011920:	f7fa f96a 	bl	800bbf8 <HAL_GetTick>
 8011924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011926:	e008      	b.n	801193a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011928:	f7fa f966 	bl	800bbf8 <HAL_GetTick>
 801192c:	4602      	mov	r2, r0
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	2b02      	cmp	r3, #2
 8011934:	d901      	bls.n	801193a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8011936:	2303      	movs	r3, #3
 8011938:	e045      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801193a:	4b25      	ldr	r3, [pc, #148]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1f0      	bne.n	8011928 <HAL_RCC_OscConfig+0x7b0>
 8011946:	e03d      	b.n	80119c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011948:	4b21      	ldr	r3, [pc, #132]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 801194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801194e:	4b20      	ldr	r3, [pc, #128]	; (80119d0 <HAL_RCC_OscConfig+0x858>)
 8011950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011952:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011958:	2b01      	cmp	r3, #1
 801195a:	d031      	beq.n	80119c0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	f003 0203 	and.w	r2, r3, #3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011966:	429a      	cmp	r2, r3
 8011968:	d12a      	bne.n	80119c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	091b      	lsrs	r3, r3, #4
 801196e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011976:	429a      	cmp	r2, r3
 8011978:	d122      	bne.n	80119c0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011984:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011986:	429a      	cmp	r2, r3
 8011988:	d11a      	bne.n	80119c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	0a5b      	lsrs	r3, r3, #9
 801198e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011996:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011998:	429a      	cmp	r2, r3
 801199a:	d111      	bne.n	80119c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	0c1b      	lsrs	r3, r3, #16
 80119a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d108      	bne.n	80119c0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	0e1b      	lsrs	r3, r3, #24
 80119b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80119bc:	429a      	cmp	r2, r3
 80119be:	d001      	beq.n	80119c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80119c0:	2301      	movs	r3, #1
 80119c2:	e000      	b.n	80119c6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3730      	adds	r7, #48	; 0x30
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	58024400 	.word	0x58024400

080119d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d101      	bne.n	80119e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119e4:	2301      	movs	r3, #1
 80119e6:	e19c      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80119e8:	4b8a      	ldr	r3, [pc, #552]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f003 030f 	and.w	r3, r3, #15
 80119f0:	683a      	ldr	r2, [r7, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d910      	bls.n	8011a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119f6:	4b87      	ldr	r3, [pc, #540]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f023 020f 	bic.w	r2, r3, #15
 80119fe:	4985      	ldr	r1, [pc, #532]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	4313      	orrs	r3, r2
 8011a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011a06:	4b83      	ldr	r3, [pc, #524]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f003 030f 	and.w	r3, r3, #15
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d001      	beq.n	8011a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011a14:	2301      	movs	r3, #1
 8011a16:	e184      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f003 0304 	and.w	r3, r3, #4
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d010      	beq.n	8011a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	691a      	ldr	r2, [r3, #16]
 8011a28:	4b7b      	ldr	r3, [pc, #492]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a2a:	699b      	ldr	r3, [r3, #24]
 8011a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d908      	bls.n	8011a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011a34:	4b78      	ldr	r3, [pc, #480]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	691b      	ldr	r3, [r3, #16]
 8011a40:	4975      	ldr	r1, [pc, #468]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a42:	4313      	orrs	r3, r2
 8011a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f003 0308 	and.w	r3, r3, #8
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d010      	beq.n	8011a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	695a      	ldr	r2, [r3, #20]
 8011a56:	4b70      	ldr	r3, [pc, #448]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a58:	69db      	ldr	r3, [r3, #28]
 8011a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d908      	bls.n	8011a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011a62:	4b6d      	ldr	r3, [pc, #436]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a64:	69db      	ldr	r3, [r3, #28]
 8011a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	496a      	ldr	r1, [pc, #424]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a70:	4313      	orrs	r3, r2
 8011a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f003 0310 	and.w	r3, r3, #16
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d010      	beq.n	8011aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	699a      	ldr	r2, [r3, #24]
 8011a84:	4b64      	ldr	r3, [pc, #400]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a86:	69db      	ldr	r3, [r3, #28]
 8011a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d908      	bls.n	8011aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011a90:	4b61      	ldr	r3, [pc, #388]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a92:	69db      	ldr	r3, [r3, #28]
 8011a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	495e      	ldr	r1, [pc, #376]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f003 0320 	and.w	r3, r3, #32
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d010      	beq.n	8011ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	69da      	ldr	r2, [r3, #28]
 8011ab2:	4b59      	ldr	r3, [pc, #356]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011ab4:	6a1b      	ldr	r3, [r3, #32]
 8011ab6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d908      	bls.n	8011ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8011abe:	4b56      	ldr	r3, [pc, #344]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011ac0:	6a1b      	ldr	r3, [r3, #32]
 8011ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	69db      	ldr	r3, [r3, #28]
 8011aca:	4953      	ldr	r1, [pc, #332]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011acc:	4313      	orrs	r3, r2
 8011ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f003 0302 	and.w	r3, r3, #2
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d010      	beq.n	8011afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	68da      	ldr	r2, [r3, #12]
 8011ae0:	4b4d      	ldr	r3, [pc, #308]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011ae2:	699b      	ldr	r3, [r3, #24]
 8011ae4:	f003 030f 	and.w	r3, r3, #15
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d908      	bls.n	8011afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011aec:	4b4a      	ldr	r3, [pc, #296]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011aee:	699b      	ldr	r3, [r3, #24]
 8011af0:	f023 020f 	bic.w	r2, r3, #15
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	4947      	ldr	r1, [pc, #284]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011afa:	4313      	orrs	r3, r2
 8011afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f003 0301 	and.w	r3, r3, #1
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d055      	beq.n	8011bb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011b0a:	4b43      	ldr	r3, [pc, #268]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	4940      	ldr	r1, [pc, #256]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b18:	4313      	orrs	r3, r2
 8011b1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	2b02      	cmp	r3, #2
 8011b22:	d107      	bne.n	8011b34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011b24:	4b3c      	ldr	r3, [pc, #240]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d121      	bne.n	8011b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e0f6      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	2b03      	cmp	r3, #3
 8011b3a:	d107      	bne.n	8011b4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011b3c:	4b36      	ldr	r3, [pc, #216]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d115      	bne.n	8011b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	e0ea      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	2b01      	cmp	r3, #1
 8011b52:	d107      	bne.n	8011b64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b54:	4b30      	ldr	r3, [pc, #192]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d109      	bne.n	8011b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011b60:	2301      	movs	r3, #1
 8011b62:	e0de      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011b64:	4b2c      	ldr	r3, [pc, #176]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f003 0304 	and.w	r3, r3, #4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011b70:	2301      	movs	r3, #1
 8011b72:	e0d6      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011b74:	4b28      	ldr	r3, [pc, #160]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b76:	691b      	ldr	r3, [r3, #16]
 8011b78:	f023 0207 	bic.w	r2, r3, #7
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	4925      	ldr	r1, [pc, #148]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011b82:	4313      	orrs	r3, r2
 8011b84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b86:	f7fa f837 	bl	800bbf8 <HAL_GetTick>
 8011b8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b8c:	e00a      	b.n	8011ba4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b8e:	f7fa f833 	bl	800bbf8 <HAL_GetTick>
 8011b92:	4602      	mov	r2, r0
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d901      	bls.n	8011ba4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	e0be      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ba4:	4b1c      	ldr	r3, [pc, #112]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011ba6:	691b      	ldr	r3, [r3, #16]
 8011ba8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	00db      	lsls	r3, r3, #3
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d1eb      	bne.n	8011b8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f003 0302 	and.w	r3, r3, #2
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d010      	beq.n	8011be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	68da      	ldr	r2, [r3, #12]
 8011bc6:	4b14      	ldr	r3, [pc, #80]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	f003 030f 	and.w	r3, r3, #15
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d208      	bcs.n	8011be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011bd2:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011bd4:	699b      	ldr	r3, [r3, #24]
 8011bd6:	f023 020f 	bic.w	r2, r3, #15
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	490e      	ldr	r1, [pc, #56]	; (8011c18 <HAL_RCC_ClockConfig+0x244>)
 8011be0:	4313      	orrs	r3, r2
 8011be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011be4:	4b0b      	ldr	r3, [pc, #44]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f003 030f 	and.w	r3, r3, #15
 8011bec:	683a      	ldr	r2, [r7, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d214      	bcs.n	8011c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bf2:	4b08      	ldr	r3, [pc, #32]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f023 020f 	bic.w	r2, r3, #15
 8011bfa:	4906      	ldr	r1, [pc, #24]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c02:	4b04      	ldr	r3, [pc, #16]	; (8011c14 <HAL_RCC_ClockConfig+0x240>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f003 030f 	and.w	r3, r3, #15
 8011c0a:	683a      	ldr	r2, [r7, #0]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d005      	beq.n	8011c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011c10:	2301      	movs	r3, #1
 8011c12:	e086      	b.n	8011d22 <HAL_RCC_ClockConfig+0x34e>
 8011c14:	52002000 	.word	0x52002000
 8011c18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 0304 	and.w	r3, r3, #4
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d010      	beq.n	8011c4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	691a      	ldr	r2, [r3, #16]
 8011c2c:	4b3f      	ldr	r3, [pc, #252]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d208      	bcs.n	8011c4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011c38:	4b3c      	ldr	r3, [pc, #240]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c3a:	699b      	ldr	r3, [r3, #24]
 8011c3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	691b      	ldr	r3, [r3, #16]
 8011c44:	4939      	ldr	r1, [pc, #228]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c46:	4313      	orrs	r3, r2
 8011c48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f003 0308 	and.w	r3, r3, #8
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d010      	beq.n	8011c78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	695a      	ldr	r2, [r3, #20]
 8011c5a:	4b34      	ldr	r3, [pc, #208]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c5c:	69db      	ldr	r3, [r3, #28]
 8011c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d208      	bcs.n	8011c78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c66:	4b31      	ldr	r3, [pc, #196]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c68:	69db      	ldr	r3, [r3, #28]
 8011c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	695b      	ldr	r3, [r3, #20]
 8011c72:	492e      	ldr	r1, [pc, #184]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c74:	4313      	orrs	r3, r2
 8011c76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f003 0310 	and.w	r3, r3, #16
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d010      	beq.n	8011ca6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	699a      	ldr	r2, [r3, #24]
 8011c88:	4b28      	ldr	r3, [pc, #160]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c8a:	69db      	ldr	r3, [r3, #28]
 8011c8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d208      	bcs.n	8011ca6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c94:	4b25      	ldr	r3, [pc, #148]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	4922      	ldr	r1, [pc, #136]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f003 0320 	and.w	r3, r3, #32
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d010      	beq.n	8011cd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	69da      	ldr	r2, [r3, #28]
 8011cb6:	4b1d      	ldr	r3, [pc, #116]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011cb8:	6a1b      	ldr	r3, [r3, #32]
 8011cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d208      	bcs.n	8011cd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8011cc2:	4b1a      	ldr	r3, [pc, #104]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011cc4:	6a1b      	ldr	r3, [r3, #32]
 8011cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	69db      	ldr	r3, [r3, #28]
 8011cce:	4917      	ldr	r1, [pc, #92]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011cd4:	f000 f834 	bl	8011d40 <HAL_RCC_GetSysClockFreq>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	4b14      	ldr	r3, [pc, #80]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011cdc:	699b      	ldr	r3, [r3, #24]
 8011cde:	0a1b      	lsrs	r3, r3, #8
 8011ce0:	f003 030f 	and.w	r3, r3, #15
 8011ce4:	4912      	ldr	r1, [pc, #72]	; (8011d30 <HAL_RCC_ClockConfig+0x35c>)
 8011ce6:	5ccb      	ldrb	r3, [r1, r3]
 8011ce8:	f003 031f 	and.w	r3, r3, #31
 8011cec:	fa22 f303 	lsr.w	r3, r2, r3
 8011cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011cf2:	4b0e      	ldr	r3, [pc, #56]	; (8011d2c <HAL_RCC_ClockConfig+0x358>)
 8011cf4:	699b      	ldr	r3, [r3, #24]
 8011cf6:	f003 030f 	and.w	r3, r3, #15
 8011cfa:	4a0d      	ldr	r2, [pc, #52]	; (8011d30 <HAL_RCC_ClockConfig+0x35c>)
 8011cfc:	5cd3      	ldrb	r3, [r2, r3]
 8011cfe:	f003 031f 	and.w	r3, r3, #31
 8011d02:	693a      	ldr	r2, [r7, #16]
 8011d04:	fa22 f303 	lsr.w	r3, r2, r3
 8011d08:	4a0a      	ldr	r2, [pc, #40]	; (8011d34 <HAL_RCC_ClockConfig+0x360>)
 8011d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011d0c:	4a0a      	ldr	r2, [pc, #40]	; (8011d38 <HAL_RCC_ClockConfig+0x364>)
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8011d12:	4b0a      	ldr	r3, [pc, #40]	; (8011d3c <HAL_RCC_ClockConfig+0x368>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7f9 ff24 	bl	800bb64 <HAL_InitTick>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3718      	adds	r7, #24
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	58024400 	.word	0x58024400
 8011d30:	08037ab8 	.word	0x08037ab8
 8011d34:	24000004 	.word	0x24000004
 8011d38:	24000000 	.word	0x24000000
 8011d3c:	24000008 	.word	0x24000008

08011d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b089      	sub	sp, #36	; 0x24
 8011d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011d46:	4bb3      	ldr	r3, [pc, #716]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011d4e:	2b18      	cmp	r3, #24
 8011d50:	f200 8155 	bhi.w	8011ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8011d54:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8011d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011dc1 	.word	0x08011dc1
 8011d60:	08011fff 	.word	0x08011fff
 8011d64:	08011fff 	.word	0x08011fff
 8011d68:	08011fff 	.word	0x08011fff
 8011d6c:	08011fff 	.word	0x08011fff
 8011d70:	08011fff 	.word	0x08011fff
 8011d74:	08011fff 	.word	0x08011fff
 8011d78:	08011fff 	.word	0x08011fff
 8011d7c:	08011de7 	.word	0x08011de7
 8011d80:	08011fff 	.word	0x08011fff
 8011d84:	08011fff 	.word	0x08011fff
 8011d88:	08011fff 	.word	0x08011fff
 8011d8c:	08011fff 	.word	0x08011fff
 8011d90:	08011fff 	.word	0x08011fff
 8011d94:	08011fff 	.word	0x08011fff
 8011d98:	08011fff 	.word	0x08011fff
 8011d9c:	08011ded 	.word	0x08011ded
 8011da0:	08011fff 	.word	0x08011fff
 8011da4:	08011fff 	.word	0x08011fff
 8011da8:	08011fff 	.word	0x08011fff
 8011dac:	08011fff 	.word	0x08011fff
 8011db0:	08011fff 	.word	0x08011fff
 8011db4:	08011fff 	.word	0x08011fff
 8011db8:	08011fff 	.word	0x08011fff
 8011dbc:	08011df3 	.word	0x08011df3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011dc0:	4b94      	ldr	r3, [pc, #592]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 0320 	and.w	r3, r3, #32
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d009      	beq.n	8011de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011dcc:	4b91      	ldr	r3, [pc, #580]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	08db      	lsrs	r3, r3, #3
 8011dd2:	f003 0303 	and.w	r3, r3, #3
 8011dd6:	4a90      	ldr	r2, [pc, #576]	; (8012018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8011ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011dde:	e111      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011de0:	4b8d      	ldr	r3, [pc, #564]	; (8012018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011de2:	61bb      	str	r3, [r7, #24]
    break;
 8011de4:	e10e      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8011de6:	4b8d      	ldr	r3, [pc, #564]	; (801201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011de8:	61bb      	str	r3, [r7, #24]
    break;
 8011dea:	e10b      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011dec:	4b8c      	ldr	r3, [pc, #560]	; (8012020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011dee:	61bb      	str	r3, [r7, #24]
    break;
 8011df0:	e108      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011df2:	4b88      	ldr	r3, [pc, #544]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011df6:	f003 0303 	and.w	r3, r3, #3
 8011dfa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011dfc:	4b85      	ldr	r3, [pc, #532]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e00:	091b      	lsrs	r3, r3, #4
 8011e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011e08:	4b82      	ldr	r3, [pc, #520]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011e12:	4b80      	ldr	r3, [pc, #512]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e16:	08db      	lsrs	r3, r3, #3
 8011e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	fb02 f303 	mul.w	r3, r2, r3
 8011e22:	ee07 3a90 	vmov	s15, r3
 8011e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 80e1 	beq.w	8011ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	f000 8083 	beq.w	8011f44 <HAL_RCC_GetSysClockFreq+0x204>
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	2b02      	cmp	r3, #2
 8011e42:	f200 80a1 	bhi.w	8011f88 <HAL_RCC_GetSysClockFreq+0x248>
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d003      	beq.n	8011e54 <HAL_RCC_GetSysClockFreq+0x114>
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d056      	beq.n	8011f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011e52:	e099      	b.n	8011f88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e54:	4b6f      	ldr	r3, [pc, #444]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f003 0320 	and.w	r3, r3, #32
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d02d      	beq.n	8011ebc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011e60:	4b6c      	ldr	r3, [pc, #432]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	08db      	lsrs	r3, r3, #3
 8011e66:	f003 0303 	and.w	r3, r3, #3
 8011e6a:	4a6b      	ldr	r2, [pc, #428]	; (8012018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8011e70:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	ee07 3a90 	vmov	s15, r3
 8011e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	ee07 3a90 	vmov	s15, r3
 8011e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e8a:	4b62      	ldr	r3, [pc, #392]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e92:	ee07 3a90 	vmov	s15, r3
 8011e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8011eba:	e087      	b.n	8011fcc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	ee07 3a90 	vmov	s15, r3
 8011ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ec6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ece:	4b51      	ldr	r3, [pc, #324]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ed6:	ee07 3a90 	vmov	s15, r3
 8011eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ee2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011efe:	e065      	b.n	8011fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	ee07 3a90 	vmov	s15, r3
 8011f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f12:	4b40      	ldr	r3, [pc, #256]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f1a:	ee07 3a90 	vmov	s15, r3
 8011f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011f42:	e043      	b.n	8011fcc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	ee07 3a90 	vmov	s15, r3
 8011f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f56:	4b2f      	ldr	r3, [pc, #188]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f5e:	ee07 3a90 	vmov	s15, r3
 8011f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011f86:	e021      	b.n	8011fcc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	ee07 3a90 	vmov	s15, r3
 8011f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f92:	eddf 6a26 	vldr	s13, [pc, #152]	; 801202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f9a:	4b1e      	ldr	r3, [pc, #120]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fa2:	ee07 3a90 	vmov	s15, r3
 8011fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8011fae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011fca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011fcc:	4b11      	ldr	r3, [pc, #68]	; (8012014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fd0:	0a5b      	lsrs	r3, r3, #9
 8011fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	ee07 3a90 	vmov	s15, r3
 8011fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8011fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ff0:	ee17 3a90 	vmov	r3, s15
 8011ff4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8011ff6:	e005      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	61bb      	str	r3, [r7, #24]
    break;
 8011ffc:	e002      	b.n	8012004 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011ffe:	4b07      	ldr	r3, [pc, #28]	; (801201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012000:	61bb      	str	r3, [r7, #24]
    break;
 8012002:	bf00      	nop
  }

  return sysclockfreq;
 8012004:	69bb      	ldr	r3, [r7, #24]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3724      	adds	r7, #36	; 0x24
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	58024400 	.word	0x58024400
 8012018:	03d09000 	.word	0x03d09000
 801201c:	003d0900 	.word	0x003d0900
 8012020:	017d7840 	.word	0x017d7840
 8012024:	46000000 	.word	0x46000000
 8012028:	4c742400 	.word	0x4c742400
 801202c:	4a742400 	.word	0x4a742400
 8012030:	4bbebc20 	.word	0x4bbebc20

08012034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801203a:	f7ff fe81 	bl	8011d40 <HAL_RCC_GetSysClockFreq>
 801203e:	4602      	mov	r2, r0
 8012040:	4b10      	ldr	r3, [pc, #64]	; (8012084 <HAL_RCC_GetHCLKFreq+0x50>)
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	0a1b      	lsrs	r3, r3, #8
 8012046:	f003 030f 	and.w	r3, r3, #15
 801204a:	490f      	ldr	r1, [pc, #60]	; (8012088 <HAL_RCC_GetHCLKFreq+0x54>)
 801204c:	5ccb      	ldrb	r3, [r1, r3]
 801204e:	f003 031f 	and.w	r3, r3, #31
 8012052:	fa22 f303 	lsr.w	r3, r2, r3
 8012056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012058:	4b0a      	ldr	r3, [pc, #40]	; (8012084 <HAL_RCC_GetHCLKFreq+0x50>)
 801205a:	699b      	ldr	r3, [r3, #24]
 801205c:	f003 030f 	and.w	r3, r3, #15
 8012060:	4a09      	ldr	r2, [pc, #36]	; (8012088 <HAL_RCC_GetHCLKFreq+0x54>)
 8012062:	5cd3      	ldrb	r3, [r2, r3]
 8012064:	f003 031f 	and.w	r3, r3, #31
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	fa22 f303 	lsr.w	r3, r2, r3
 801206e:	4a07      	ldr	r2, [pc, #28]	; (801208c <HAL_RCC_GetHCLKFreq+0x58>)
 8012070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012072:	4a07      	ldr	r2, [pc, #28]	; (8012090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012078:	4b04      	ldr	r3, [pc, #16]	; (801208c <HAL_RCC_GetHCLKFreq+0x58>)
 801207a:	681b      	ldr	r3, [r3, #0]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	58024400 	.word	0x58024400
 8012088:	08037ab8 	.word	0x08037ab8
 801208c:	24000004 	.word	0x24000004
 8012090:	24000000 	.word	0x24000000

08012094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012098:	f7ff ffcc 	bl	8012034 <HAL_RCC_GetHCLKFreq>
 801209c:	4602      	mov	r2, r0
 801209e:	4b06      	ldr	r3, [pc, #24]	; (80120b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80120a0:	69db      	ldr	r3, [r3, #28]
 80120a2:	091b      	lsrs	r3, r3, #4
 80120a4:	f003 0307 	and.w	r3, r3, #7
 80120a8:	4904      	ldr	r1, [pc, #16]	; (80120bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80120aa:	5ccb      	ldrb	r3, [r1, r3]
 80120ac:	f003 031f 	and.w	r3, r3, #31
 80120b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	58024400 	.word	0x58024400
 80120bc:	08037ab8 	.word	0x08037ab8

080120c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80120c4:	f7ff ffb6 	bl	8012034 <HAL_RCC_GetHCLKFreq>
 80120c8:	4602      	mov	r2, r0
 80120ca:	4b06      	ldr	r3, [pc, #24]	; (80120e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80120cc:	69db      	ldr	r3, [r3, #28]
 80120ce:	0a1b      	lsrs	r3, r3, #8
 80120d0:	f003 0307 	and.w	r3, r3, #7
 80120d4:	4904      	ldr	r1, [pc, #16]	; (80120e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80120d6:	5ccb      	ldrb	r3, [r1, r3]
 80120d8:	f003 031f 	and.w	r3, r3, #31
 80120dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	58024400 	.word	0x58024400
 80120e8:	08037ab8 	.word	0x08037ab8

080120ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80120f4:	2300      	movs	r3, #0
 80120f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80120f8:	2300      	movs	r3, #0
 80120fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012104:	2b00      	cmp	r3, #0
 8012106:	d03f      	beq.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801210c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012110:	d02a      	beq.n	8012168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012112:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012116:	d824      	bhi.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801211c:	d018      	beq.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801211e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012122:	d81e      	bhi.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012124:	2b00      	cmp	r3, #0
 8012126:	d003      	beq.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801212c:	d007      	beq.n	801213e <HAL_RCCEx_PeriphCLKConfig+0x52>
 801212e:	e018      	b.n	8012162 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012130:	4ba3      	ldr	r3, [pc, #652]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012134:	4aa2      	ldr	r2, [pc, #648]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801213a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801213c:	e015      	b.n	801216a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	3304      	adds	r3, #4
 8012142:	2102      	movs	r1, #2
 8012144:	4618      	mov	r0, r3
 8012146:	f001 f9d5 	bl	80134f4 <RCCEx_PLL2_Config>
 801214a:	4603      	mov	r3, r0
 801214c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801214e:	e00c      	b.n	801216a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3324      	adds	r3, #36	; 0x24
 8012154:	2102      	movs	r1, #2
 8012156:	4618      	mov	r0, r3
 8012158:	f001 fa7e 	bl	8013658 <RCCEx_PLL3_Config>
 801215c:	4603      	mov	r3, r0
 801215e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012160:	e003      	b.n	801216a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	75fb      	strb	r3, [r7, #23]
      break;
 8012166:	e000      	b.n	801216a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012168:	bf00      	nop
    }

    if(ret == HAL_OK)
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d109      	bne.n	8012184 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012170:	4b93      	ldr	r3, [pc, #588]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801217c:	4990      	ldr	r1, [pc, #576]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801217e:	4313      	orrs	r3, r2
 8012180:	650b      	str	r3, [r1, #80]	; 0x50
 8012182:	e001      	b.n	8012188 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012184:	7dfb      	ldrb	r3, [r7, #23]
 8012186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012190:	2b00      	cmp	r3, #0
 8012192:	d03d      	beq.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012198:	2b04      	cmp	r3, #4
 801219a:	d826      	bhi.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801219c:	a201      	add	r2, pc, #4	; (adr r2, 80121a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 801219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a2:	bf00      	nop
 80121a4:	080121b9 	.word	0x080121b9
 80121a8:	080121c7 	.word	0x080121c7
 80121ac:	080121d9 	.word	0x080121d9
 80121b0:	080121f1 	.word	0x080121f1
 80121b4:	080121f1 	.word	0x080121f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121b8:	4b81      	ldr	r3, [pc, #516]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80121ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121bc:	4a80      	ldr	r2, [pc, #512]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80121be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80121c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80121c4:	e015      	b.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3304      	adds	r3, #4
 80121ca:	2100      	movs	r1, #0
 80121cc:	4618      	mov	r0, r3
 80121ce:	f001 f991 	bl	80134f4 <RCCEx_PLL2_Config>
 80121d2:	4603      	mov	r3, r0
 80121d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80121d6:	e00c      	b.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3324      	adds	r3, #36	; 0x24
 80121dc:	2100      	movs	r1, #0
 80121de:	4618      	mov	r0, r3
 80121e0:	f001 fa3a 	bl	8013658 <RCCEx_PLL3_Config>
 80121e4:	4603      	mov	r3, r0
 80121e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80121e8:	e003      	b.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80121ea:	2301      	movs	r3, #1
 80121ec:	75fb      	strb	r3, [r7, #23]
      break;
 80121ee:	e000      	b.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80121f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121f8:	4b71      	ldr	r3, [pc, #452]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80121fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121fc:	f023 0207 	bic.w	r2, r3, #7
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012204:	496e      	ldr	r1, [pc, #440]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012206:	4313      	orrs	r3, r2
 8012208:	650b      	str	r3, [r1, #80]	; 0x50
 801220a:	e001      	b.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801220c:	7dfb      	ldrb	r3, [r7, #23]
 801220e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012218:	2b00      	cmp	r3, #0
 801221a:	d042      	beq.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012224:	d02b      	beq.n	801227e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8012226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801222a:	d825      	bhi.n	8012278 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801222c:	2bc0      	cmp	r3, #192	; 0xc0
 801222e:	d028      	beq.n	8012282 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012230:	2bc0      	cmp	r3, #192	; 0xc0
 8012232:	d821      	bhi.n	8012278 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012234:	2b80      	cmp	r3, #128	; 0x80
 8012236:	d016      	beq.n	8012266 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8012238:	2b80      	cmp	r3, #128	; 0x80
 801223a:	d81d      	bhi.n	8012278 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801223c:	2b00      	cmp	r3, #0
 801223e:	d002      	beq.n	8012246 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8012240:	2b40      	cmp	r3, #64	; 0x40
 8012242:	d007      	beq.n	8012254 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8012244:	e018      	b.n	8012278 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012246:	4b5e      	ldr	r3, [pc, #376]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224a:	4a5d      	ldr	r2, [pc, #372]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012252:	e017      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	3304      	adds	r3, #4
 8012258:	2100      	movs	r1, #0
 801225a:	4618      	mov	r0, r3
 801225c:	f001 f94a 	bl	80134f4 <RCCEx_PLL2_Config>
 8012260:	4603      	mov	r3, r0
 8012262:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012264:	e00e      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	3324      	adds	r3, #36	; 0x24
 801226a:	2100      	movs	r1, #0
 801226c:	4618      	mov	r0, r3
 801226e:	f001 f9f3 	bl	8013658 <RCCEx_PLL3_Config>
 8012272:	4603      	mov	r3, r0
 8012274:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012276:	e005      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012278:	2301      	movs	r3, #1
 801227a:	75fb      	strb	r3, [r7, #23]
      break;
 801227c:	e002      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801227e:	bf00      	nop
 8012280:	e000      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012284:	7dfb      	ldrb	r3, [r7, #23]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d109      	bne.n	801229e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801228a:	4b4d      	ldr	r3, [pc, #308]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801228c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801228e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012296:	494a      	ldr	r1, [pc, #296]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012298:	4313      	orrs	r3, r2
 801229a:	650b      	str	r3, [r1, #80]	; 0x50
 801229c:	e001      	b.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801229e:	7dfb      	ldrb	r3, [r7, #23]
 80122a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d049      	beq.n	8012342 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80122b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80122b8:	d030      	beq.n	801231c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80122ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80122be:	d82a      	bhi.n	8012316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80122c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80122c4:	d02c      	beq.n	8012320 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80122c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80122ca:	d824      	bhi.n	8012316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80122cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80122d0:	d018      	beq.n	8012304 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80122d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80122d6:	d81e      	bhi.n	8012316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d003      	beq.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80122dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122e0:	d007      	beq.n	80122f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80122e2:	e018      	b.n	8012316 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122e4:	4b36      	ldr	r3, [pc, #216]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80122e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e8:	4a35      	ldr	r2, [pc, #212]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80122ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80122ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80122f0:	e017      	b.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	3304      	adds	r3, #4
 80122f6:	2100      	movs	r1, #0
 80122f8:	4618      	mov	r0, r3
 80122fa:	f001 f8fb 	bl	80134f4 <RCCEx_PLL2_Config>
 80122fe:	4603      	mov	r3, r0
 8012300:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012302:	e00e      	b.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3324      	adds	r3, #36	; 0x24
 8012308:	2100      	movs	r1, #0
 801230a:	4618      	mov	r0, r3
 801230c:	f001 f9a4 	bl	8013658 <RCCEx_PLL3_Config>
 8012310:	4603      	mov	r3, r0
 8012312:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012314:	e005      	b.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012316:	2301      	movs	r3, #1
 8012318:	75fb      	strb	r3, [r7, #23]
      break;
 801231a:	e002      	b.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801231c:	bf00      	nop
 801231e:	e000      	b.n	8012322 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012322:	7dfb      	ldrb	r3, [r7, #23]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10a      	bne.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012328:	4b25      	ldr	r3, [pc, #148]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801232c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012336:	4922      	ldr	r1, [pc, #136]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012338:	4313      	orrs	r3, r2
 801233a:	658b      	str	r3, [r1, #88]	; 0x58
 801233c:	e001      	b.n	8012342 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801233e:	7dfb      	ldrb	r3, [r7, #23]
 8012340:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801234a:	2b00      	cmp	r3, #0
 801234c:	d04b      	beq.n	80123e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012358:	d030      	beq.n	80123bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801235a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801235e:	d82a      	bhi.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012364:	d02e      	beq.n	80123c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8012366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801236a:	d824      	bhi.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801236c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012370:	d018      	beq.n	80123a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8012372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012376:	d81e      	bhi.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012378:	2b00      	cmp	r3, #0
 801237a:	d003      	beq.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012380:	d007      	beq.n	8012392 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8012382:	e018      	b.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012384:	4b0e      	ldr	r3, [pc, #56]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	4a0d      	ldr	r2, [pc, #52]	; (80123c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801238a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801238e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012390:	e019      	b.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	3304      	adds	r3, #4
 8012396:	2100      	movs	r1, #0
 8012398:	4618      	mov	r0, r3
 801239a:	f001 f8ab 	bl	80134f4 <RCCEx_PLL2_Config>
 801239e:	4603      	mov	r3, r0
 80123a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80123a2:	e010      	b.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	3324      	adds	r3, #36	; 0x24
 80123a8:	2100      	movs	r1, #0
 80123aa:	4618      	mov	r0, r3
 80123ac:	f001 f954 	bl	8013658 <RCCEx_PLL3_Config>
 80123b0:	4603      	mov	r3, r0
 80123b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80123b4:	e007      	b.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80123b6:	2301      	movs	r3, #1
 80123b8:	75fb      	strb	r3, [r7, #23]
      break;
 80123ba:	e004      	b.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80123bc:	bf00      	nop
 80123be:	e002      	b.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80123c0:	58024400 	.word	0x58024400
      break;
 80123c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80123c6:	7dfb      	ldrb	r3, [r7, #23]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d10a      	bne.n	80123e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80123cc:	4b99      	ldr	r3, [pc, #612]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80123ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80123da:	4996      	ldr	r1, [pc, #600]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80123dc:	4313      	orrs	r3, r2
 80123de:	658b      	str	r3, [r1, #88]	; 0x58
 80123e0:	e001      	b.n	80123e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123e2:	7dfb      	ldrb	r3, [r7, #23]
 80123e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d032      	beq.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123f6:	2b30      	cmp	r3, #48	; 0x30
 80123f8:	d01c      	beq.n	8012434 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80123fa:	2b30      	cmp	r3, #48	; 0x30
 80123fc:	d817      	bhi.n	801242e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80123fe:	2b20      	cmp	r3, #32
 8012400:	d00c      	beq.n	801241c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8012402:	2b20      	cmp	r3, #32
 8012404:	d813      	bhi.n	801242e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8012406:	2b00      	cmp	r3, #0
 8012408:	d016      	beq.n	8012438 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801240a:	2b10      	cmp	r3, #16
 801240c:	d10f      	bne.n	801242e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801240e:	4b89      	ldr	r3, [pc, #548]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012412:	4a88      	ldr	r2, [pc, #544]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801241a:	e00e      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3304      	adds	r3, #4
 8012420:	2102      	movs	r1, #2
 8012422:	4618      	mov	r0, r3
 8012424:	f001 f866 	bl	80134f4 <RCCEx_PLL2_Config>
 8012428:	4603      	mov	r3, r0
 801242a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801242c:	e005      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	75fb      	strb	r3, [r7, #23]
      break;
 8012432:	e002      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8012434:	bf00      	nop
 8012436:	e000      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8012438:	bf00      	nop
    }

    if(ret == HAL_OK)
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d109      	bne.n	8012454 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012440:	4b7c      	ldr	r3, [pc, #496]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801244c:	4979      	ldr	r1, [pc, #484]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801244e:	4313      	orrs	r3, r2
 8012450:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012452:	e001      	b.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012454:	7dfb      	ldrb	r3, [r7, #23]
 8012456:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012460:	2b00      	cmp	r3, #0
 8012462:	d047      	beq.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801246c:	d030      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801246e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012472:	d82a      	bhi.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8012474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012478:	d02c      	beq.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 801247a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801247e:	d824      	bhi.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8012480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012484:	d018      	beq.n	80124b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8012486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801248a:	d81e      	bhi.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801248c:	2b00      	cmp	r3, #0
 801248e:	d003      	beq.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8012490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012494:	d007      	beq.n	80124a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8012496:	e018      	b.n	80124ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012498:	4b66      	ldr	r3, [pc, #408]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801249c:	4a65      	ldr	r2, [pc, #404]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801249e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80124a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80124a4:	e017      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3304      	adds	r3, #4
 80124aa:	2100      	movs	r1, #0
 80124ac:	4618      	mov	r0, r3
 80124ae:	f001 f821 	bl	80134f4 <RCCEx_PLL2_Config>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80124b6:	e00e      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	3324      	adds	r3, #36	; 0x24
 80124bc:	2100      	movs	r1, #0
 80124be:	4618      	mov	r0, r3
 80124c0:	f001 f8ca 	bl	8013658 <RCCEx_PLL3_Config>
 80124c4:	4603      	mov	r3, r0
 80124c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80124c8:	e005      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80124ca:	2301      	movs	r3, #1
 80124cc:	75fb      	strb	r3, [r7, #23]
      break;
 80124ce:	e002      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80124d0:	bf00      	nop
 80124d2:	e000      	b.n	80124d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80124d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80124d6:	7dfb      	ldrb	r3, [r7, #23]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d109      	bne.n	80124f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80124dc:	4b55      	ldr	r3, [pc, #340]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80124de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124e8:	4952      	ldr	r1, [pc, #328]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80124ea:	4313      	orrs	r3, r2
 80124ec:	650b      	str	r3, [r1, #80]	; 0x50
 80124ee:	e001      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124f0:	7dfb      	ldrb	r3, [r7, #23]
 80124f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d049      	beq.n	8012594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012508:	d02e      	beq.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 801250a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801250e:	d828      	bhi.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8012510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012514:	d02a      	beq.n	801256c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8012516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801251a:	d822      	bhi.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801251c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012520:	d026      	beq.n	8012570 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8012522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012526:	d81c      	bhi.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8012528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801252c:	d010      	beq.n	8012550 <HAL_RCCEx_PeriphCLKConfig+0x464>
 801252e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012532:	d816      	bhi.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8012534:	2b00      	cmp	r3, #0
 8012536:	d01d      	beq.n	8012574 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8012538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801253c:	d111      	bne.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	3304      	adds	r3, #4
 8012542:	2101      	movs	r1, #1
 8012544:	4618      	mov	r0, r3
 8012546:	f000 ffd5 	bl	80134f4 <RCCEx_PLL2_Config>
 801254a:	4603      	mov	r3, r0
 801254c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801254e:	e012      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	3324      	adds	r3, #36	; 0x24
 8012554:	2101      	movs	r1, #1
 8012556:	4618      	mov	r0, r3
 8012558:	f001 f87e 	bl	8013658 <RCCEx_PLL3_Config>
 801255c:	4603      	mov	r3, r0
 801255e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8012560:	e009      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012562:	2301      	movs	r3, #1
 8012564:	75fb      	strb	r3, [r7, #23]
      break;
 8012566:	e006      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8012568:	bf00      	nop
 801256a:	e004      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801256c:	bf00      	nop
 801256e:	e002      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8012570:	bf00      	nop
 8012572:	e000      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8012574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012576:	7dfb      	ldrb	r3, [r7, #23]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d109      	bne.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801257c:	4b2d      	ldr	r3, [pc, #180]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801257e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012580:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012588:	492a      	ldr	r1, [pc, #168]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801258a:	4313      	orrs	r3, r2
 801258c:	650b      	str	r3, [r1, #80]	; 0x50
 801258e:	e001      	b.n	8012594 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012590:	7dfb      	ldrb	r3, [r7, #23]
 8012592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801259c:	2b00      	cmp	r3, #0
 801259e:	d04d      	beq.n	801263c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80125a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80125aa:	d02e      	beq.n	801260a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80125ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80125b0:	d828      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80125b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125b6:	d02a      	beq.n	801260e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80125b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125bc:	d822      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80125be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80125c2:	d026      	beq.n	8012612 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80125c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80125c8:	d81c      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80125ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125ce:	d010      	beq.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80125d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125d4:	d816      	bhi.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d01d      	beq.n	8012616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80125da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80125de:	d111      	bne.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3304      	adds	r3, #4
 80125e4:	2101      	movs	r1, #1
 80125e6:	4618      	mov	r0, r3
 80125e8:	f000 ff84 	bl	80134f4 <RCCEx_PLL2_Config>
 80125ec:	4603      	mov	r3, r0
 80125ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80125f0:	e012      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3324      	adds	r3, #36	; 0x24
 80125f6:	2101      	movs	r1, #1
 80125f8:	4618      	mov	r0, r3
 80125fa:	f001 f82d 	bl	8013658 <RCCEx_PLL3_Config>
 80125fe:	4603      	mov	r3, r0
 8012600:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8012602:	e009      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8012604:	2301      	movs	r3, #1
 8012606:	75fb      	strb	r3, [r7, #23]
      break;
 8012608:	e006      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801260a:	bf00      	nop
 801260c:	e004      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801260e:	bf00      	nop
 8012610:	e002      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8012612:	bf00      	nop
 8012614:	e000      	b.n	8012618 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8012616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012618:	7dfb      	ldrb	r3, [r7, #23]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10c      	bne.n	8012638 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801261e:	4b05      	ldr	r3, [pc, #20]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012622:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801262c:	4901      	ldr	r1, [pc, #4]	; (8012634 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801262e:	4313      	orrs	r3, r2
 8012630:	658b      	str	r3, [r1, #88]	; 0x58
 8012632:	e003      	b.n	801263c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8012634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012638:	7dfb      	ldrb	r3, [r7, #23]
 801263a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012644:	2b00      	cmp	r3, #0
 8012646:	d02f      	beq.n	80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801264c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012650:	d00e      	beq.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8012652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012656:	d814      	bhi.n	8012682 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8012658:	2b00      	cmp	r3, #0
 801265a:	d015      	beq.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 801265c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012660:	d10f      	bne.n	8012682 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012662:	4baf      	ldr	r3, [pc, #700]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012666:	4aae      	ldr	r2, [pc, #696]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801266c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801266e:	e00c      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3304      	adds	r3, #4
 8012674:	2101      	movs	r1, #1
 8012676:	4618      	mov	r0, r3
 8012678:	f000 ff3c 	bl	80134f4 <RCCEx_PLL2_Config>
 801267c:	4603      	mov	r3, r0
 801267e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8012680:	e003      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	75fb      	strb	r3, [r7, #23]
      break;
 8012686:	e000      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8012688:	bf00      	nop
    }

    if(ret == HAL_OK)
 801268a:	7dfb      	ldrb	r3, [r7, #23]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d109      	bne.n	80126a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012690:	4ba3      	ldr	r3, [pc, #652]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012694:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269c:	49a0      	ldr	r1, [pc, #640]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801269e:	4313      	orrs	r3, r2
 80126a0:	650b      	str	r3, [r1, #80]	; 0x50
 80126a2:	e001      	b.n	80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126a4:	7dfb      	ldrb	r3, [r7, #23]
 80126a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d032      	beq.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126b8:	2b03      	cmp	r3, #3
 80126ba:	d81b      	bhi.n	80126f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80126bc:	a201      	add	r2, pc, #4	; (adr r2, 80126c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80126be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126c2:	bf00      	nop
 80126c4:	080126fb 	.word	0x080126fb
 80126c8:	080126d5 	.word	0x080126d5
 80126cc:	080126e3 	.word	0x080126e3
 80126d0:	080126fb 	.word	0x080126fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126d4:	4b92      	ldr	r3, [pc, #584]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80126d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126d8:	4a91      	ldr	r2, [pc, #580]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80126da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80126e0:	e00c      	b.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	3304      	adds	r3, #4
 80126e6:	2102      	movs	r1, #2
 80126e8:	4618      	mov	r0, r3
 80126ea:	f000 ff03 	bl	80134f4 <RCCEx_PLL2_Config>
 80126ee:	4603      	mov	r3, r0
 80126f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80126f2:	e003      	b.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80126f4:	2301      	movs	r3, #1
 80126f6:	75fb      	strb	r3, [r7, #23]
      break;
 80126f8:	e000      	b.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80126fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80126fc:	7dfb      	ldrb	r3, [r7, #23]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d109      	bne.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012702:	4b87      	ldr	r3, [pc, #540]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012706:	f023 0203 	bic.w	r2, r3, #3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801270e:	4984      	ldr	r1, [pc, #528]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012710:	4313      	orrs	r3, r2
 8012712:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012714:	e001      	b.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012716:	7dfb      	ldrb	r3, [r7, #23]
 8012718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012722:	2b00      	cmp	r3, #0
 8012724:	f000 8086 	beq.w	8012834 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012728:	4b7e      	ldr	r3, [pc, #504]	; (8012924 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a7d      	ldr	r2, [pc, #500]	; (8012924 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012734:	f7f9 fa60 	bl	800bbf8 <HAL_GetTick>
 8012738:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801273a:	e009      	b.n	8012750 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801273c:	f7f9 fa5c 	bl	800bbf8 <HAL_GetTick>
 8012740:	4602      	mov	r2, r0
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	1ad3      	subs	r3, r2, r3
 8012746:	2b64      	cmp	r3, #100	; 0x64
 8012748:	d902      	bls.n	8012750 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 801274a:	2303      	movs	r3, #3
 801274c:	75fb      	strb	r3, [r7, #23]
        break;
 801274e:	e005      	b.n	801275c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012750:	4b74      	ldr	r3, [pc, #464]	; (8012924 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012758:	2b00      	cmp	r3, #0
 801275a:	d0ef      	beq.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 801275c:	7dfb      	ldrb	r3, [r7, #23]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d166      	bne.n	8012830 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012762:	4b6f      	ldr	r3, [pc, #444]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801276c:	4053      	eors	r3, r2
 801276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012772:	2b00      	cmp	r3, #0
 8012774:	d013      	beq.n	801279e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012776:	4b6a      	ldr	r3, [pc, #424]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801277e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012780:	4b67      	ldr	r3, [pc, #412]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012784:	4a66      	ldr	r2, [pc, #408]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801278a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801278c:	4b64      	ldr	r3, [pc, #400]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012790:	4a63      	ldr	r2, [pc, #396]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012796:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012798:	4a61      	ldr	r2, [pc, #388]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80127a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127a8:	d115      	bne.n	80127d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127aa:	f7f9 fa25 	bl	800bbf8 <HAL_GetTick>
 80127ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80127b0:	e00b      	b.n	80127ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127b2:	f7f9 fa21 	bl	800bbf8 <HAL_GetTick>
 80127b6:	4602      	mov	r2, r0
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	1ad3      	subs	r3, r2, r3
 80127bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d902      	bls.n	80127ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80127c4:	2303      	movs	r3, #3
 80127c6:	75fb      	strb	r3, [r7, #23]
            break;
 80127c8:	e005      	b.n	80127d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80127ca:	4b55      	ldr	r3, [pc, #340]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80127cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ce:	f003 0302 	and.w	r3, r3, #2
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0ed      	beq.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80127d6:	7dfb      	ldrb	r3, [r7, #23]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d126      	bne.n	801282a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80127e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80127ea:	d10d      	bne.n	8012808 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80127ec:	4b4c      	ldr	r3, [pc, #304]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80127fa:	0919      	lsrs	r1, r3, #4
 80127fc:	4b4a      	ldr	r3, [pc, #296]	; (8012928 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80127fe:	400b      	ands	r3, r1
 8012800:	4947      	ldr	r1, [pc, #284]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012802:	4313      	orrs	r3, r2
 8012804:	610b      	str	r3, [r1, #16]
 8012806:	e005      	b.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8012808:	4b45      	ldr	r3, [pc, #276]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801280a:	691b      	ldr	r3, [r3, #16]
 801280c:	4a44      	ldr	r2, [pc, #272]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801280e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012812:	6113      	str	r3, [r2, #16]
 8012814:	4b42      	ldr	r3, [pc, #264]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012822:	493f      	ldr	r1, [pc, #252]	; (8012920 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8012824:	4313      	orrs	r3, r2
 8012826:	670b      	str	r3, [r1, #112]	; 0x70
 8012828:	e004      	b.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801282a:	7dfb      	ldrb	r3, [r7, #23]
 801282c:	75bb      	strb	r3, [r7, #22]
 801282e:	e001      	b.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012830:	7dfb      	ldrb	r3, [r7, #23]
 8012832:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 0301 	and.w	r3, r3, #1
 801283c:	2b00      	cmp	r3, #0
 801283e:	f000 8085 	beq.w	801294c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012846:	2b28      	cmp	r3, #40	; 0x28
 8012848:	d866      	bhi.n	8012918 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 801284a:	a201      	add	r2, pc, #4	; (adr r2, 8012850 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 801284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012850:	0801292d 	.word	0x0801292d
 8012854:	08012919 	.word	0x08012919
 8012858:	08012919 	.word	0x08012919
 801285c:	08012919 	.word	0x08012919
 8012860:	08012919 	.word	0x08012919
 8012864:	08012919 	.word	0x08012919
 8012868:	08012919 	.word	0x08012919
 801286c:	08012919 	.word	0x08012919
 8012870:	080128f5 	.word	0x080128f5
 8012874:	08012919 	.word	0x08012919
 8012878:	08012919 	.word	0x08012919
 801287c:	08012919 	.word	0x08012919
 8012880:	08012919 	.word	0x08012919
 8012884:	08012919 	.word	0x08012919
 8012888:	08012919 	.word	0x08012919
 801288c:	08012919 	.word	0x08012919
 8012890:	08012907 	.word	0x08012907
 8012894:	08012919 	.word	0x08012919
 8012898:	08012919 	.word	0x08012919
 801289c:	08012919 	.word	0x08012919
 80128a0:	08012919 	.word	0x08012919
 80128a4:	08012919 	.word	0x08012919
 80128a8:	08012919 	.word	0x08012919
 80128ac:	08012919 	.word	0x08012919
 80128b0:	0801292d 	.word	0x0801292d
 80128b4:	08012919 	.word	0x08012919
 80128b8:	08012919 	.word	0x08012919
 80128bc:	08012919 	.word	0x08012919
 80128c0:	08012919 	.word	0x08012919
 80128c4:	08012919 	.word	0x08012919
 80128c8:	08012919 	.word	0x08012919
 80128cc:	08012919 	.word	0x08012919
 80128d0:	0801292d 	.word	0x0801292d
 80128d4:	08012919 	.word	0x08012919
 80128d8:	08012919 	.word	0x08012919
 80128dc:	08012919 	.word	0x08012919
 80128e0:	08012919 	.word	0x08012919
 80128e4:	08012919 	.word	0x08012919
 80128e8:	08012919 	.word	0x08012919
 80128ec:	08012919 	.word	0x08012919
 80128f0:	0801292d 	.word	0x0801292d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3304      	adds	r3, #4
 80128f8:	2101      	movs	r1, #1
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 fdfa 	bl	80134f4 <RCCEx_PLL2_Config>
 8012900:	4603      	mov	r3, r0
 8012902:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012904:	e013      	b.n	801292e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	3324      	adds	r3, #36	; 0x24
 801290a:	2101      	movs	r1, #1
 801290c:	4618      	mov	r0, r3
 801290e:	f000 fea3 	bl	8013658 <RCCEx_PLL3_Config>
 8012912:	4603      	mov	r3, r0
 8012914:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012916:	e00a      	b.n	801292e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012918:	2301      	movs	r3, #1
 801291a:	75fb      	strb	r3, [r7, #23]
      break;
 801291c:	e007      	b.n	801292e <HAL_RCCEx_PeriphCLKConfig+0x842>
 801291e:	bf00      	nop
 8012920:	58024400 	.word	0x58024400
 8012924:	58024800 	.word	0x58024800
 8012928:	00ffffcf 	.word	0x00ffffcf
      break;
 801292c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d109      	bne.n	8012948 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012934:	4b96      	ldr	r3, [pc, #600]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012938:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012940:	4993      	ldr	r1, [pc, #588]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012942:	4313      	orrs	r3, r2
 8012944:	654b      	str	r3, [r1, #84]	; 0x54
 8012946:	e001      	b.n	801294c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f003 0302 	and.w	r3, r3, #2
 8012954:	2b00      	cmp	r3, #0
 8012956:	d038      	beq.n	80129ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801295c:	2b05      	cmp	r3, #5
 801295e:	d821      	bhi.n	80129a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8012960:	a201      	add	r2, pc, #4	; (adr r2, 8012968 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8012962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012966:	bf00      	nop
 8012968:	080129ab 	.word	0x080129ab
 801296c:	08012981 	.word	0x08012981
 8012970:	08012993 	.word	0x08012993
 8012974:	080129ab 	.word	0x080129ab
 8012978:	080129ab 	.word	0x080129ab
 801297c:	080129ab 	.word	0x080129ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	3304      	adds	r3, #4
 8012984:	2101      	movs	r1, #1
 8012986:	4618      	mov	r0, r3
 8012988:	f000 fdb4 	bl	80134f4 <RCCEx_PLL2_Config>
 801298c:	4603      	mov	r3, r0
 801298e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8012990:	e00c      	b.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	3324      	adds	r3, #36	; 0x24
 8012996:	2101      	movs	r1, #1
 8012998:	4618      	mov	r0, r3
 801299a:	f000 fe5d 	bl	8013658 <RCCEx_PLL3_Config>
 801299e:	4603      	mov	r3, r0
 80129a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80129a2:	e003      	b.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80129a4:	2301      	movs	r3, #1
 80129a6:	75fb      	strb	r3, [r7, #23]
      break;
 80129a8:	e000      	b.n	80129ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80129aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80129ac:	7dfb      	ldrb	r3, [r7, #23]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d109      	bne.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80129b2:	4b77      	ldr	r3, [pc, #476]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80129b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129b6:	f023 0207 	bic.w	r2, r3, #7
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129be:	4974      	ldr	r1, [pc, #464]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80129c0:	4313      	orrs	r3, r2
 80129c2:	654b      	str	r3, [r1, #84]	; 0x54
 80129c4:	e001      	b.n	80129ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f003 0304 	and.w	r3, r3, #4
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d03a      	beq.n	8012a4c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129dc:	2b05      	cmp	r3, #5
 80129de:	d821      	bhi.n	8012a24 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80129e0:	a201      	add	r2, pc, #4	; (adr r2, 80129e8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80129e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e6:	bf00      	nop
 80129e8:	08012a2b 	.word	0x08012a2b
 80129ec:	08012a01 	.word	0x08012a01
 80129f0:	08012a13 	.word	0x08012a13
 80129f4:	08012a2b 	.word	0x08012a2b
 80129f8:	08012a2b 	.word	0x08012a2b
 80129fc:	08012a2b 	.word	0x08012a2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	3304      	adds	r3, #4
 8012a04:	2101      	movs	r1, #1
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 fd74 	bl	80134f4 <RCCEx_PLL2_Config>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8012a10:	e00c      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	3324      	adds	r3, #36	; 0x24
 8012a16:	2101      	movs	r1, #1
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f000 fe1d 	bl	8013658 <RCCEx_PLL3_Config>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8012a22:	e003      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	75fb      	strb	r3, [r7, #23]
      break;
 8012a28:	e000      	b.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8012a2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012a2c:	7dfb      	ldrb	r3, [r7, #23]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10a      	bne.n	8012a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012a32:	4b57      	ldr	r3, [pc, #348]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a36:	f023 0207 	bic.w	r2, r3, #7
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a40:	4953      	ldr	r1, [pc, #332]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012a42:	4313      	orrs	r3, r2
 8012a44:	658b      	str	r3, [r1, #88]	; 0x58
 8012a46:	e001      	b.n	8012a4c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a48:	7dfb      	ldrb	r3, [r7, #23]
 8012a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f003 0320 	and.w	r3, r3, #32
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d04b      	beq.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012a62:	d02e      	beq.n	8012ac2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8012a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012a68:	d828      	bhi.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a6e:	d02a      	beq.n	8012ac6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8012a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a74:	d822      	bhi.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012a7a:	d026      	beq.n	8012aca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8012a7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012a80:	d81c      	bhi.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012a86:	d010      	beq.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8012a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012a8c:	d816      	bhi.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d01d      	beq.n	8012ace <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8012a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012a96:	d111      	bne.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	3304      	adds	r3, #4
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f000 fd28 	bl	80134f4 <RCCEx_PLL2_Config>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8012aa8:	e012      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	3324      	adds	r3, #36	; 0x24
 8012aae:	2102      	movs	r1, #2
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 fdd1 	bl	8013658 <RCCEx_PLL3_Config>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8012aba:	e009      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012abc:	2301      	movs	r3, #1
 8012abe:	75fb      	strb	r3, [r7, #23]
      break;
 8012ac0:	e006      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8012ac2:	bf00      	nop
 8012ac4:	e004      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8012ac6:	bf00      	nop
 8012ac8:	e002      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8012aca:	bf00      	nop
 8012acc:	e000      	b.n	8012ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8012ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012ad0:	7dfb      	ldrb	r3, [r7, #23]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d10a      	bne.n	8012aec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012ad6:	4b2e      	ldr	r3, [pc, #184]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ada:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ae4:	492a      	ldr	r1, [pc, #168]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	654b      	str	r3, [r1, #84]	; 0x54
 8012aea:	e001      	b.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012aec:	7dfb      	ldrb	r3, [r7, #23]
 8012aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d04d      	beq.n	8012b98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012b02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012b06:	d02e      	beq.n	8012b66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8012b08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012b0c:	d828      	bhi.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b12:	d02a      	beq.n	8012b6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8012b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b18:	d822      	bhi.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b1e:	d026      	beq.n	8012b6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8012b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b24:	d81c      	bhi.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b2a:	d010      	beq.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8012b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b30:	d816      	bhi.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d01d      	beq.n	8012b72 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8012b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b3a:	d111      	bne.n	8012b60 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	3304      	adds	r3, #4
 8012b40:	2100      	movs	r1, #0
 8012b42:	4618      	mov	r0, r3
 8012b44:	f000 fcd6 	bl	80134f4 <RCCEx_PLL2_Config>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8012b4c:	e012      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	3324      	adds	r3, #36	; 0x24
 8012b52:	2102      	movs	r1, #2
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 fd7f 	bl	8013658 <RCCEx_PLL3_Config>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8012b5e:	e009      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012b60:	2301      	movs	r3, #1
 8012b62:	75fb      	strb	r3, [r7, #23]
      break;
 8012b64:	e006      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012b66:	bf00      	nop
 8012b68:	e004      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012b6a:	bf00      	nop
 8012b6c:	e002      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012b6e:	bf00      	nop
 8012b70:	e000      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012b74:	7dfb      	ldrb	r3, [r7, #23]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10c      	bne.n	8012b94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012b7a:	4b05      	ldr	r3, [pc, #20]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012b88:	4901      	ldr	r1, [pc, #4]	; (8012b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8012b8e:	e003      	b.n	8012b98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8012b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b94:	7dfb      	ldrb	r3, [r7, #23]
 8012b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d04b      	beq.n	8012c3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012baa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8012bae:	d02e      	beq.n	8012c0e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8012bb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8012bb4:	d828      	bhi.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8012bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012bba:	d02a      	beq.n	8012c12 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8012bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012bc0:	d822      	bhi.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8012bc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8012bc6:	d026      	beq.n	8012c16 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8012bc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8012bcc:	d81c      	bhi.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8012bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012bd2:	d010      	beq.n	8012bf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8012bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012bd8:	d816      	bhi.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d01d      	beq.n	8012c1a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8012bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012be2:	d111      	bne.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	3304      	adds	r3, #4
 8012be8:	2100      	movs	r1, #0
 8012bea:	4618      	mov	r0, r3
 8012bec:	f000 fc82 	bl	80134f4 <RCCEx_PLL2_Config>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012bf4:	e012      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3324      	adds	r3, #36	; 0x24
 8012bfa:	2102      	movs	r1, #2
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f000 fd2b 	bl	8013658 <RCCEx_PLL3_Config>
 8012c02:	4603      	mov	r3, r0
 8012c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8012c06:	e009      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8012c0c:	e006      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012c0e:	bf00      	nop
 8012c10:	e004      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012c12:	bf00      	nop
 8012c14:	e002      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012c16:	bf00      	nop
 8012c18:	e000      	b.n	8012c1c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012c1c:	7dfb      	ldrb	r3, [r7, #23]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d10a      	bne.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012c22:	4b9d      	ldr	r3, [pc, #628]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012c30:	4999      	ldr	r1, [pc, #612]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012c32:	4313      	orrs	r3, r2
 8012c34:	658b      	str	r3, [r1, #88]	; 0x58
 8012c36:	e001      	b.n	8012c3c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c38:	7dfb      	ldrb	r3, [r7, #23]
 8012c3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f003 0308 	and.w	r3, r3, #8
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01a      	beq.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c52:	d10a      	bne.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	3324      	adds	r3, #36	; 0x24
 8012c58:	2102      	movs	r1, #2
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f000 fcfc 	bl	8013658 <RCCEx_PLL3_Config>
 8012c60:	4603      	mov	r3, r0
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d001      	beq.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8012c66:	2301      	movs	r3, #1
 8012c68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8012c6a:	4b8b      	ldr	r3, [pc, #556]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c78:	4987      	ldr	r1, [pc, #540]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f003 0310 	and.w	r3, r3, #16
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d01a      	beq.n	8012cc0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c94:	d10a      	bne.n	8012cac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	3324      	adds	r3, #36	; 0x24
 8012c9a:	2102      	movs	r1, #2
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f000 fcdb 	bl	8013658 <RCCEx_PLL3_Config>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d001      	beq.n	8012cac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012cac:	4b7a      	ldr	r3, [pc, #488]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012cba:	4977      	ldr	r1, [pc, #476]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d034      	beq.n	8012d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012cd6:	d01d      	beq.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8012cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012cdc:	d817      	bhi.n	8012d0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d003      	beq.n	8012cea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8012ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ce6:	d009      	beq.n	8012cfc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8012ce8:	e011      	b.n	8012d0e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	3304      	adds	r3, #4
 8012cee:	2100      	movs	r1, #0
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f000 fbff 	bl	80134f4 <RCCEx_PLL2_Config>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012cfa:	e00c      	b.n	8012d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	3324      	adds	r3, #36	; 0x24
 8012d00:	2102      	movs	r1, #2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fca8 	bl	8013658 <RCCEx_PLL3_Config>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8012d0c:	e003      	b.n	8012d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	75fb      	strb	r3, [r7, #23]
      break;
 8012d12:	e000      	b.n	8012d16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8012d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d16:	7dfb      	ldrb	r3, [r7, #23]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10a      	bne.n	8012d32 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012d1c:	4b5e      	ldr	r3, [pc, #376]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012d2a:	495b      	ldr	r1, [pc, #364]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	658b      	str	r3, [r1, #88]	; 0x58
 8012d30:	e001      	b.n	8012d36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d32:	7dfb      	ldrb	r3, [r7, #23]
 8012d34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d033      	beq.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012d4c:	d01c      	beq.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8012d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012d52:	d816      	bhi.n	8012d82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8012d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d58:	d003      	beq.n	8012d62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8012d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012d5e:	d007      	beq.n	8012d70 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8012d60:	e00f      	b.n	8012d82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d62:	4b4d      	ldr	r3, [pc, #308]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d66:	4a4c      	ldr	r2, [pc, #304]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8012d6e:	e00c      	b.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	3324      	adds	r3, #36	; 0x24
 8012d74:	2101      	movs	r1, #1
 8012d76:	4618      	mov	r0, r3
 8012d78:	f000 fc6e 	bl	8013658 <RCCEx_PLL3_Config>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8012d80:	e003      	b.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012d82:	2301      	movs	r3, #1
 8012d84:	75fb      	strb	r3, [r7, #23]
      break;
 8012d86:	e000      	b.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8012d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d8a:	7dfb      	ldrb	r3, [r7, #23]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d10a      	bne.n	8012da6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012d90:	4b41      	ldr	r3, [pc, #260]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d9e:	493e      	ldr	r1, [pc, #248]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012da0:	4313      	orrs	r3, r2
 8012da2:	654b      	str	r3, [r1, #84]	; 0x54
 8012da4:	e001      	b.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012da6:	7dfb      	ldrb	r3, [r7, #23]
 8012da8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d029      	beq.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d003      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8012dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dc2:	d007      	beq.n	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8012dc4:	e00f      	b.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012dc6:	4b34      	ldr	r3, [pc, #208]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dca:	4a33      	ldr	r2, [pc, #204]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8012dd2:	e00b      	b.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	3304      	adds	r3, #4
 8012dd8:	2102      	movs	r1, #2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fb8a 	bl	80134f4 <RCCEx_PLL2_Config>
 8012de0:	4603      	mov	r3, r0
 8012de2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8012de4:	e002      	b.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	75fb      	strb	r3, [r7, #23]
      break;
 8012dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012dec:	7dfb      	ldrb	r3, [r7, #23]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d109      	bne.n	8012e06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012df2:	4b29      	ldr	r3, [pc, #164]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dfe:	4926      	ldr	r1, [pc, #152]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012e00:	4313      	orrs	r3, r2
 8012e02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012e04:	e001      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e06:	7dfb      	ldrb	r3, [r7, #23]
 8012e08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00a      	beq.n	8012e2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	3324      	adds	r3, #36	; 0x24
 8012e1a:	2102      	movs	r1, #2
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f000 fc1b 	bl	8013658 <RCCEx_PLL3_Config>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d033      	beq.n	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e40:	d017      	beq.n	8012e72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8012e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e46:	d811      	bhi.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e4c:	d013      	beq.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8012e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e52:	d80b      	bhi.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d010      	beq.n	8012e7a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8012e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e5c:	d106      	bne.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e5e:	4b0e      	ldr	r3, [pc, #56]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e62:	4a0d      	ldr	r2, [pc, #52]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8012e6a:	e007      	b.n	8012e7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8012e70:	e004      	b.n	8012e7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012e72:	bf00      	nop
 8012e74:	e002      	b.n	8012e7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012e76:	bf00      	nop
 8012e78:	e000      	b.n	8012e7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d10c      	bne.n	8012e9c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012e82:	4b05      	ldr	r3, [pc, #20]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012e8e:	4902      	ldr	r1, [pc, #8]	; (8012e98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012e90:	4313      	orrs	r3, r2
 8012e92:	654b      	str	r3, [r1, #84]	; 0x54
 8012e94:	e004      	b.n	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8012e96:	bf00      	nop
 8012e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e9c:	7dfb      	ldrb	r3, [r7, #23]
 8012e9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d008      	beq.n	8012ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012eac:	4b31      	ldr	r3, [pc, #196]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eb8:	492e      	ldr	r1, [pc, #184]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012eba:	4313      	orrs	r3, r2
 8012ebc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d009      	beq.n	8012ede <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8012eca:	4b2a      	ldr	r3, [pc, #168]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012ed8:	4926      	ldr	r1, [pc, #152]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012eda:	4313      	orrs	r3, r2
 8012edc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d008      	beq.n	8012efc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012eea:	4b22      	ldr	r3, [pc, #136]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ef6:	491f      	ldr	r1, [pc, #124]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012ef8:	4313      	orrs	r3, r2
 8012efa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d00d      	beq.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012f08:	4b1a      	ldr	r3, [pc, #104]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f0a:	691b      	ldr	r3, [r3, #16]
 8012f0c:	4a19      	ldr	r2, [pc, #100]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012f12:	6113      	str	r3, [r2, #16]
 8012f14:	4b17      	ldr	r3, [pc, #92]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f16:	691a      	ldr	r2, [r3, #16]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012f1e:	4915      	ldr	r1, [pc, #84]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f20:	4313      	orrs	r3, r2
 8012f22:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	da08      	bge.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012f2c:	4b11      	ldr	r3, [pc, #68]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f38:	490e      	ldr	r1, [pc, #56]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d009      	beq.n	8012f5e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012f4a:	4b0a      	ldr	r3, [pc, #40]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f58:	4906      	ldr	r1, [pc, #24]	; (8012f74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8012f5e:	7dbb      	ldrb	r3, [r7, #22]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8012f64:	2300      	movs	r3, #0
 8012f66:	e000      	b.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	58024400 	.word	0x58024400

08012f78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012f7c:	f7ff f85a 	bl	8012034 <HAL_RCC_GetHCLKFreq>
 8012f80:	4602      	mov	r2, r0
 8012f82:	4b06      	ldr	r3, [pc, #24]	; (8012f9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012f84:	6a1b      	ldr	r3, [r3, #32]
 8012f86:	091b      	lsrs	r3, r3, #4
 8012f88:	f003 0307 	and.w	r3, r3, #7
 8012f8c:	4904      	ldr	r1, [pc, #16]	; (8012fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012f8e:	5ccb      	ldrb	r3, [r1, r3]
 8012f90:	f003 031f 	and.w	r3, r3, #31
 8012f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	58024400 	.word	0x58024400
 8012fa0:	08037ab8 	.word	0x08037ab8

08012fa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b089      	sub	sp, #36	; 0x24
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012fac:	4ba1      	ldr	r3, [pc, #644]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fb0:	f003 0303 	and.w	r3, r3, #3
 8012fb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8012fb6:	4b9f      	ldr	r3, [pc, #636]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fba:	0b1b      	lsrs	r3, r3, #12
 8012fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012fc2:	4b9c      	ldr	r3, [pc, #624]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc6:	091b      	lsrs	r3, r3, #4
 8012fc8:	f003 0301 	and.w	r3, r3, #1
 8012fcc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8012fce:	4b99      	ldr	r3, [pc, #612]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fd2:	08db      	lsrs	r3, r3, #3
 8012fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fd8:	693a      	ldr	r2, [r7, #16]
 8012fda:	fb02 f303 	mul.w	r3, r2, r3
 8012fde:	ee07 3a90 	vmov	s15, r3
 8012fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f000 8111 	beq.w	8013214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	2b02      	cmp	r3, #2
 8012ff6:	f000 8083 	beq.w	8013100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	f200 80a1 	bhi.w	8013144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d003      	beq.n	8013010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d056      	beq.n	80130bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801300e:	e099      	b.n	8013144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013010:	4b88      	ldr	r3, [pc, #544]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f003 0320 	and.w	r3, r3, #32
 8013018:	2b00      	cmp	r3, #0
 801301a:	d02d      	beq.n	8013078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801301c:	4b85      	ldr	r3, [pc, #532]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	08db      	lsrs	r3, r3, #3
 8013022:	f003 0303 	and.w	r3, r3, #3
 8013026:	4a84      	ldr	r2, [pc, #528]	; (8013238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013028:	fa22 f303 	lsr.w	r3, r2, r3
 801302c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	ee07 3a90 	vmov	s15, r3
 8013034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	ee07 3a90 	vmov	s15, r3
 801303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013046:	4b7b      	ldr	r3, [pc, #492]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801304a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801304e:	ee07 3a90 	vmov	s15, r3
 8013052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013056:	ed97 6a03 	vldr	s12, [r7, #12]
 801305a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801323c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801305e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801306a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801306e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013072:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013076:	e087      	b.n	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	ee07 3a90 	vmov	s15, r3
 801307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801308a:	4b6a      	ldr	r3, [pc, #424]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013092:	ee07 3a90 	vmov	s15, r3
 8013096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801309a:	ed97 6a03 	vldr	s12, [r7, #12]
 801309e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801323c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80130ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80130ba:	e065      	b.n	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	ee07 3a90 	vmov	s15, r3
 80130c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80130ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130ce:	4b59      	ldr	r3, [pc, #356]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130d6:	ee07 3a90 	vmov	s15, r3
 80130da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130de:	ed97 6a03 	vldr	s12, [r7, #12]
 80130e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801323c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80130f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80130fe:	e043      	b.n	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	ee07 3a90 	vmov	s15, r3
 8013106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801310a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013112:	4b48      	ldr	r3, [pc, #288]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801311a:	ee07 3a90 	vmov	s15, r3
 801311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013122:	ed97 6a03 	vldr	s12, [r7, #12]
 8013126:	eddf 5a45 	vldr	s11, [pc, #276]	; 801323c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801313e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013142:	e021      	b.n	8013188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	ee07 3a90 	vmov	s15, r3
 801314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801314e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013156:	4b37      	ldr	r3, [pc, #220]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801315e:	ee07 3a90 	vmov	s15, r3
 8013162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013166:	ed97 6a03 	vldr	s12, [r7, #12]
 801316a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801323c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013188:	4b2a      	ldr	r3, [pc, #168]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801318c:	0a5b      	lsrs	r3, r3, #9
 801318e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013192:	ee07 3a90 	vmov	s15, r3
 8013196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801319a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801319e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80131a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131ae:	ee17 2a90 	vmov	r2, s15
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80131b6:	4b1f      	ldr	r3, [pc, #124]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ba:	0c1b      	lsrs	r3, r3, #16
 80131bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131c0:	ee07 3a90 	vmov	s15, r3
 80131c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80131cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80131d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131dc:	ee17 2a90 	vmov	r2, s15
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80131e4:	4b13      	ldr	r3, [pc, #76]	; (8013234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131e8:	0e1b      	lsrs	r3, r3, #24
 80131ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131ee:	ee07 3a90 	vmov	s15, r3
 80131f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80131fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8013202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801320a:	ee17 2a90 	vmov	r2, s15
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013212:	e008      	b.n	8013226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	609a      	str	r2, [r3, #8]
}
 8013226:	bf00      	nop
 8013228:	3724      	adds	r7, #36	; 0x24
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	58024400 	.word	0x58024400
 8013238:	03d09000 	.word	0x03d09000
 801323c:	46000000 	.word	0x46000000
 8013240:	4c742400 	.word	0x4c742400
 8013244:	4a742400 	.word	0x4a742400
 8013248:	4bbebc20 	.word	0x4bbebc20

0801324c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801324c:	b480      	push	{r7}
 801324e:	b089      	sub	sp, #36	; 0x24
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013254:	4ba1      	ldr	r3, [pc, #644]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013258:	f003 0303 	and.w	r3, r3, #3
 801325c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801325e:	4b9f      	ldr	r3, [pc, #636]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013262:	0d1b      	lsrs	r3, r3, #20
 8013264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801326a:	4b9c      	ldr	r3, [pc, #624]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326e:	0a1b      	lsrs	r3, r3, #8
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013276:	4b99      	ldr	r3, [pc, #612]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801327a:	08db      	lsrs	r3, r3, #3
 801327c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013280:	693a      	ldr	r2, [r7, #16]
 8013282:	fb02 f303 	mul.w	r3, r2, r3
 8013286:	ee07 3a90 	vmov	s15, r3
 801328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801328e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2b00      	cmp	r3, #0
 8013296:	f000 8111 	beq.w	80134bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	2b02      	cmp	r3, #2
 801329e:	f000 8083 	beq.w	80133a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	f200 80a1 	bhi.w	80133ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d003      	beq.n	80132b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d056      	beq.n	8013364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80132b6:	e099      	b.n	80133ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132b8:	4b88      	ldr	r3, [pc, #544]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f003 0320 	and.w	r3, r3, #32
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d02d      	beq.n	8013320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80132c4:	4b85      	ldr	r3, [pc, #532]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	08db      	lsrs	r3, r3, #3
 80132ca:	f003 0303 	and.w	r3, r3, #3
 80132ce:	4a84      	ldr	r2, [pc, #528]	; (80134e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80132d0:	fa22 f303 	lsr.w	r3, r2, r3
 80132d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	ee07 3a90 	vmov	s15, r3
 80132dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	ee07 3a90 	vmov	s15, r3
 80132e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80132ee:	4b7b      	ldr	r3, [pc, #492]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f6:	ee07 3a90 	vmov	s15, r3
 80132fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013302:	eddf 5a78 	vldr	s11, [pc, #480]	; 80134e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801330a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801330e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801331a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801331e:	e087      	b.n	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	ee07 3a90 	vmov	s15, r3
 8013326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801332a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80134e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801332e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013332:	4b6a      	ldr	r3, [pc, #424]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801333a:	ee07 3a90 	vmov	s15, r3
 801333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013342:	ed97 6a03 	vldr	s12, [r7, #12]
 8013346:	eddf 5a67 	vldr	s11, [pc, #412]	; 80134e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801334a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801334e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801335e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013362:	e065      	b.n	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	ee07 3a90 	vmov	s15, r3
 801336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801336e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80134ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013376:	4b59      	ldr	r3, [pc, #356]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013386:	ed97 6a03 	vldr	s12, [r7, #12]
 801338a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80134e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801338e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801339a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80133a6:	e043      	b.n	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	ee07 3a90 	vmov	s15, r3
 80133ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80134f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80133b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133ba:	4b48      	ldr	r3, [pc, #288]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80133bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80133ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80134e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80133ea:	e021      	b.n	8013430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	ee07 3a90 	vmov	s15, r3
 80133f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80134ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80133fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133fe:	4b37      	ldr	r3, [pc, #220]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801340e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013412:	eddf 5a34 	vldr	s11, [pc, #208]	; 80134e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801341a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801341e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013426:	ee67 7a27 	vmul.f32	s15, s14, s15
 801342a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801342e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013430:	4b2a      	ldr	r3, [pc, #168]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013434:	0a5b      	lsrs	r3, r3, #9
 8013436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801343a:	ee07 3a90 	vmov	s15, r3
 801343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013446:	ee37 7a87 	vadd.f32	s14, s15, s14
 801344a:	edd7 6a07 	vldr	s13, [r7, #28]
 801344e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013456:	ee17 2a90 	vmov	r2, s15
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801345e:	4b1f      	ldr	r3, [pc, #124]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013462:	0c1b      	lsrs	r3, r3, #16
 8013464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013468:	ee07 3a90 	vmov	s15, r3
 801346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013478:	edd7 6a07 	vldr	s13, [r7, #28]
 801347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013484:	ee17 2a90 	vmov	r2, s15
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801348c:	4b13      	ldr	r3, [pc, #76]	; (80134dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013490:	0e1b      	lsrs	r3, r3, #24
 8013492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013496:	ee07 3a90 	vmov	s15, r3
 801349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801349e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80134a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80134aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134b2:	ee17 2a90 	vmov	r2, s15
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80134ba:	e008      	b.n	80134ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2200      	movs	r2, #0
 80134c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2200      	movs	r2, #0
 80134c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2200      	movs	r2, #0
 80134cc:	609a      	str	r2, [r3, #8]
}
 80134ce:	bf00      	nop
 80134d0:	3724      	adds	r7, #36	; 0x24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	58024400 	.word	0x58024400
 80134e0:	03d09000 	.word	0x03d09000
 80134e4:	46000000 	.word	0x46000000
 80134e8:	4c742400 	.word	0x4c742400
 80134ec:	4a742400 	.word	0x4a742400
 80134f0:	4bbebc20 	.word	0x4bbebc20

080134f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80134fe:	2300      	movs	r3, #0
 8013500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013502:	4b53      	ldr	r3, [pc, #332]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013506:	f003 0303 	and.w	r3, r3, #3
 801350a:	2b03      	cmp	r3, #3
 801350c:	d101      	bne.n	8013512 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801350e:	2301      	movs	r3, #1
 8013510:	e099      	b.n	8013646 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013512:	4b4f      	ldr	r3, [pc, #316]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4a4e      	ldr	r2, [pc, #312]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013518:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801351c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801351e:	f7f8 fb6b 	bl	800bbf8 <HAL_GetTick>
 8013522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013524:	e008      	b.n	8013538 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8013526:	f7f8 fb67 	bl	800bbf8 <HAL_GetTick>
 801352a:	4602      	mov	r2, r0
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	2b02      	cmp	r3, #2
 8013532:	d901      	bls.n	8013538 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013534:	2303      	movs	r3, #3
 8013536:	e086      	b.n	8013646 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013538:	4b45      	ldr	r3, [pc, #276]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1f0      	bne.n	8013526 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013544:	4b42      	ldr	r3, [pc, #264]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013548:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	031b      	lsls	r3, r3, #12
 8013552:	493f      	ldr	r1, [pc, #252]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013554:	4313      	orrs	r3, r2
 8013556:	628b      	str	r3, [r1, #40]	; 0x28
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	3b01      	subs	r3, #1
 801355e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	3b01      	subs	r3, #1
 8013568:	025b      	lsls	r3, r3, #9
 801356a:	b29b      	uxth	r3, r3
 801356c:	431a      	orrs	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	3b01      	subs	r3, #1
 8013574:	041b      	lsls	r3, r3, #16
 8013576:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801357a:	431a      	orrs	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	3b01      	subs	r3, #1
 8013582:	061b      	lsls	r3, r3, #24
 8013584:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013588:	4931      	ldr	r1, [pc, #196]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 801358a:	4313      	orrs	r3, r2
 801358c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801358e:	4b30      	ldr	r3, [pc, #192]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013592:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	492d      	ldr	r1, [pc, #180]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 801359c:	4313      	orrs	r3, r2
 801359e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80135a0:	4b2b      	ldr	r3, [pc, #172]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	f023 0220 	bic.w	r2, r3, #32
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	699b      	ldr	r3, [r3, #24]
 80135ac:	4928      	ldr	r1, [pc, #160]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135ae:	4313      	orrs	r3, r2
 80135b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80135b2:	4b27      	ldr	r3, [pc, #156]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b6:	4a26      	ldr	r2, [pc, #152]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135b8:	f023 0310 	bic.w	r3, r3, #16
 80135bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80135be:	4b24      	ldr	r3, [pc, #144]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135c2:	4b24      	ldr	r3, [pc, #144]	; (8013654 <RCCEx_PLL2_Config+0x160>)
 80135c4:	4013      	ands	r3, r2
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	69d2      	ldr	r2, [r2, #28]
 80135ca:	00d2      	lsls	r2, r2, #3
 80135cc:	4920      	ldr	r1, [pc, #128]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135ce:	4313      	orrs	r3, r2
 80135d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80135d2:	4b1f      	ldr	r3, [pc, #124]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d6:	4a1e      	ldr	r2, [pc, #120]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135d8:	f043 0310 	orr.w	r3, r3, #16
 80135dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d106      	bne.n	80135f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80135e4:	4b1a      	ldr	r3, [pc, #104]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e8:	4a19      	ldr	r2, [pc, #100]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80135ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80135f0:	e00f      	b.n	8013612 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d106      	bne.n	8013606 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80135f8:	4b15      	ldr	r3, [pc, #84]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135fc:	4a14      	ldr	r2, [pc, #80]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 80135fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013604:	e005      	b.n	8013612 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013606:	4b12      	ldr	r3, [pc, #72]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801360a:	4a11      	ldr	r2, [pc, #68]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 801360c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013610:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013612:	4b0f      	ldr	r3, [pc, #60]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4a0e      	ldr	r2, [pc, #56]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 8013618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801361c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801361e:	f7f8 faeb 	bl	800bbf8 <HAL_GetTick>
 8013622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013624:	e008      	b.n	8013638 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8013626:	f7f8 fae7 	bl	800bbf8 <HAL_GetTick>
 801362a:	4602      	mov	r2, r0
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	2b02      	cmp	r3, #2
 8013632:	d901      	bls.n	8013638 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013634:	2303      	movs	r3, #3
 8013636:	e006      	b.n	8013646 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013638:	4b05      	ldr	r3, [pc, #20]	; (8013650 <RCCEx_PLL2_Config+0x15c>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013640:	2b00      	cmp	r3, #0
 8013642:	d0f0      	beq.n	8013626 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013644:	7bfb      	ldrb	r3, [r7, #15]
}
 8013646:	4618      	mov	r0, r3
 8013648:	3710      	adds	r7, #16
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	58024400 	.word	0x58024400
 8013654:	ffff0007 	.word	0xffff0007

08013658 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013662:	2300      	movs	r3, #0
 8013664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013666:	4b53      	ldr	r3, [pc, #332]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801366a:	f003 0303 	and.w	r3, r3, #3
 801366e:	2b03      	cmp	r3, #3
 8013670:	d101      	bne.n	8013676 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013672:	2301      	movs	r3, #1
 8013674:	e099      	b.n	80137aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013676:	4b4f      	ldr	r3, [pc, #316]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	4a4e      	ldr	r2, [pc, #312]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801367c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013682:	f7f8 fab9 	bl	800bbf8 <HAL_GetTick>
 8013686:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013688:	e008      	b.n	801369c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801368a:	f7f8 fab5 	bl	800bbf8 <HAL_GetTick>
 801368e:	4602      	mov	r2, r0
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	1ad3      	subs	r3, r2, r3
 8013694:	2b02      	cmp	r3, #2
 8013696:	d901      	bls.n	801369c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013698:	2303      	movs	r3, #3
 801369a:	e086      	b.n	80137aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801369c:	4b45      	ldr	r3, [pc, #276]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1f0      	bne.n	801368a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80136a8:	4b42      	ldr	r3, [pc, #264]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 80136aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	051b      	lsls	r3, r3, #20
 80136b6:	493f      	ldr	r1, [pc, #252]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 80136b8:	4313      	orrs	r3, r2
 80136ba:	628b      	str	r3, [r1, #40]	; 0x28
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	3b01      	subs	r3, #1
 80136c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	3b01      	subs	r3, #1
 80136cc:	025b      	lsls	r3, r3, #9
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	431a      	orrs	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	3b01      	subs	r3, #1
 80136d8:	041b      	lsls	r3, r3, #16
 80136da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80136de:	431a      	orrs	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	691b      	ldr	r3, [r3, #16]
 80136e4:	3b01      	subs	r3, #1
 80136e6:	061b      	lsls	r3, r3, #24
 80136e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80136ec:	4931      	ldr	r1, [pc, #196]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 80136ee:	4313      	orrs	r3, r2
 80136f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80136f2:	4b30      	ldr	r3, [pc, #192]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 80136f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	695b      	ldr	r3, [r3, #20]
 80136fe:	492d      	ldr	r1, [pc, #180]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013700:	4313      	orrs	r3, r2
 8013702:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013704:	4b2b      	ldr	r3, [pc, #172]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013708:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	699b      	ldr	r3, [r3, #24]
 8013710:	4928      	ldr	r1, [pc, #160]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013712:	4313      	orrs	r3, r2
 8013714:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013716:	4b27      	ldr	r3, [pc, #156]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801371a:	4a26      	ldr	r2, [pc, #152]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801371c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013722:	4b24      	ldr	r3, [pc, #144]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013726:	4b24      	ldr	r3, [pc, #144]	; (80137b8 <RCCEx_PLL3_Config+0x160>)
 8013728:	4013      	ands	r3, r2
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	69d2      	ldr	r2, [r2, #28]
 801372e:	00d2      	lsls	r2, r2, #3
 8013730:	4920      	ldr	r1, [pc, #128]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013732:	4313      	orrs	r3, r2
 8013734:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013736:	4b1f      	ldr	r3, [pc, #124]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801373a:	4a1e      	ldr	r2, [pc, #120]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013748:	4b1a      	ldr	r3, [pc, #104]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374c:	4a19      	ldr	r2, [pc, #100]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801374e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013754:	e00f      	b.n	8013776 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d106      	bne.n	801376a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801375c:	4b15      	ldr	r3, [pc, #84]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013760:	4a14      	ldr	r2, [pc, #80]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013762:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013768:	e005      	b.n	8013776 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801376a:	4b12      	ldr	r3, [pc, #72]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801376e:	4a11      	ldr	r2, [pc, #68]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013774:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013776:	4b0f      	ldr	r3, [pc, #60]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4a0e      	ldr	r2, [pc, #56]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013782:	f7f8 fa39 	bl	800bbf8 <HAL_GetTick>
 8013786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013788:	e008      	b.n	801379c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801378a:	f7f8 fa35 	bl	800bbf8 <HAL_GetTick>
 801378e:	4602      	mov	r2, r0
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	1ad3      	subs	r3, r2, r3
 8013794:	2b02      	cmp	r3, #2
 8013796:	d901      	bls.n	801379c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013798:	2303      	movs	r3, #3
 801379a:	e006      	b.n	80137aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801379c:	4b05      	ldr	r3, [pc, #20]	; (80137b4 <RCCEx_PLL3_Config+0x15c>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0f0      	beq.n	801378a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80137a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	58024400 	.word	0x58024400
 80137b8:	ffff0007 	.word	0xffff0007

080137bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d101      	bne.n	80137ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80137ca:	2301      	movs	r3, #1
 80137cc:	e0f1      	b.n	80139b2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2200      	movs	r2, #0
 80137d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4a78      	ldr	r2, [pc, #480]	; (80139bc <HAL_SPI_Init+0x200>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d00f      	beq.n	80137fe <HAL_SPI_Init+0x42>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	4a77      	ldr	r2, [pc, #476]	; (80139c0 <HAL_SPI_Init+0x204>)
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d00a      	beq.n	80137fe <HAL_SPI_Init+0x42>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4a75      	ldr	r2, [pc, #468]	; (80139c4 <HAL_SPI_Init+0x208>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d005      	beq.n	80137fe <HAL_SPI_Init+0x42>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	2b0f      	cmp	r3, #15
 80137f8:	d901      	bls.n	80137fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80137fa:	2301      	movs	r3, #1
 80137fc:	e0d9      	b.n	80139b2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f001 faa2 	bl	8014d48 <SPI_GetPacketSize>
 8013804:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	4a6c      	ldr	r2, [pc, #432]	; (80139bc <HAL_SPI_Init+0x200>)
 801380c:	4293      	cmp	r3, r2
 801380e:	d00c      	beq.n	801382a <HAL_SPI_Init+0x6e>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	4a6a      	ldr	r2, [pc, #424]	; (80139c0 <HAL_SPI_Init+0x204>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d007      	beq.n	801382a <HAL_SPI_Init+0x6e>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	4a69      	ldr	r2, [pc, #420]	; (80139c4 <HAL_SPI_Init+0x208>)
 8013820:	4293      	cmp	r3, r2
 8013822:	d002      	beq.n	801382a <HAL_SPI_Init+0x6e>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2b08      	cmp	r3, #8
 8013828:	d811      	bhi.n	801384e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801382e:	4a63      	ldr	r2, [pc, #396]	; (80139bc <HAL_SPI_Init+0x200>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d009      	beq.n	8013848 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a61      	ldr	r2, [pc, #388]	; (80139c0 <HAL_SPI_Init+0x204>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d004      	beq.n	8013848 <HAL_SPI_Init+0x8c>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4a60      	ldr	r2, [pc, #384]	; (80139c4 <HAL_SPI_Init+0x208>)
 8013844:	4293      	cmp	r3, r2
 8013846:	d104      	bne.n	8013852 <HAL_SPI_Init+0x96>
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2b10      	cmp	r3, #16
 801384c:	d901      	bls.n	8013852 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801384e:	2301      	movs	r3, #1
 8013850:	e0af      	b.n	80139b2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013858:	b2db      	uxtb	r3, r3
 801385a:	2b00      	cmp	r3, #0
 801385c:	d106      	bne.n	801386c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2200      	movs	r2, #0
 8013862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7f7 f986 	bl	800ab78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2202      	movs	r2, #2
 8013870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	681a      	ldr	r2, [r3, #0]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f022 0201 	bic.w	r2, r2, #1
 8013882:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801388e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	699b      	ldr	r3, [r3, #24]
 8013894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013898:	d119      	bne.n	80138ce <HAL_SPI_Init+0x112>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80138a2:	d103      	bne.n	80138ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d008      	beq.n	80138be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d10c      	bne.n	80138ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80138b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80138bc:	d107      	bne.n	80138ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80138cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	69da      	ldr	r2, [r3, #28]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138d6:	431a      	orrs	r2, r3
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	431a      	orrs	r2, r3
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138e0:	ea42 0103 	orr.w	r1, r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	68da      	ldr	r2, [r3, #12]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	430a      	orrs	r2, r1
 80138ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f8:	431a      	orrs	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138fe:	431a      	orrs	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	699b      	ldr	r3, [r3, #24]
 8013904:	431a      	orrs	r2, r3
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	691b      	ldr	r3, [r3, #16]
 801390a:	431a      	orrs	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	695b      	ldr	r3, [r3, #20]
 8013910:	431a      	orrs	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6a1b      	ldr	r3, [r3, #32]
 8013916:	431a      	orrs	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	431a      	orrs	r2, r3
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013922:	431a      	orrs	r2, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	689b      	ldr	r3, [r3, #8]
 8013928:	431a      	orrs	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801392e:	ea42 0103 	orr.w	r1, r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	430a      	orrs	r2, r1
 801393c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d113      	bne.n	801396e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013958:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801396c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	f022 0201 	bic.w	r2, r2, #1
 801397c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	68db      	ldr	r3, [r3, #12]
 8013990:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	430a      	orrs	r2, r1
 801399e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2201      	movs	r2, #1
 80139ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3710      	adds	r7, #16
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	40013000 	.word	0x40013000
 80139c0:	40003800 	.word	0x40003800
 80139c4:	40003c00 	.word	0x40003c00

080139c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b08a      	sub	sp, #40	; 0x28
 80139cc:	af02      	add	r7, sp, #8
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	4613      	mov	r3, r2
 80139d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3320      	adds	r3, #32
 80139de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80139e0:	2300      	movs	r3, #0
 80139e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d101      	bne.n	80139f2 <HAL_SPI_Transmit+0x2a>
 80139ee:	2302      	movs	r3, #2
 80139f0:	e1d7      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2201      	movs	r2, #1
 80139f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80139fa:	f7f8 f8fd 	bl	800bbf8 <HAL_GetTick>
 80139fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d007      	beq.n	8013a1c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8013a18:	7efb      	ldrb	r3, [r7, #27]
 8013a1a:	e1c2      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d002      	beq.n	8013a28 <HAL_SPI_Transmit+0x60>
 8013a22:	88fb      	ldrh	r3, [r7, #6]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d107      	bne.n	8013a38 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8013a34:	7efb      	ldrb	r3, [r7, #27]
 8013a36:	e1b4      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2203      	movs	r2, #3
 8013a3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	88fa      	ldrh	r2, [r7, #6]
 8013a52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	88fa      	ldrh	r2, [r7, #6]
 8013a5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2200      	movs	r2, #0
 8013a62:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2200      	movs	r2, #0
 8013a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2200      	movs	r2, #0
 8013a78:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8013a88:	d107      	bne.n	8013a9a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	685a      	ldr	r2, [r3, #4]
 8013aa0:	4b96      	ldr	r3, [pc, #600]	; (8013cfc <HAL_SPI_Transmit+0x334>)
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	88f9      	ldrh	r1, [r7, #6]
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	6812      	ldr	r2, [r2, #0]
 8013aaa:	430b      	orrs	r3, r1
 8013aac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681a      	ldr	r2, [r3, #0]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	f042 0201 	orr.w	r2, r2, #1
 8013abc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013ac6:	d107      	bne.n	8013ad8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	2b0f      	cmp	r3, #15
 8013ade:	d947      	bls.n	8013b70 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013ae0:	e03f      	b.n	8013b62 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	f003 0302 	and.w	r3, r3, #2
 8013aec:	2b02      	cmp	r3, #2
 8013aee:	d114      	bne.n	8013b1a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	6812      	ldr	r2, [r2, #0]
 8013afa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b00:	1d1a      	adds	r2, r3, #4
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013b18:	e023      	b.n	8013b62 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013b1a:	f7f8 f86d 	bl	800bbf8 <HAL_GetTick>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	683a      	ldr	r2, [r7, #0]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d803      	bhi.n	8013b32 <HAL_SPI_Transmit+0x16a>
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b30:	d102      	bne.n	8013b38 <HAL_SPI_Transmit+0x170>
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d114      	bne.n	8013b62 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f001 f837 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2200      	movs	r2, #0
 8013b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013b5e:	2303      	movs	r3, #3
 8013b60:	e11f      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d1b9      	bne.n	8013ae2 <HAL_SPI_Transmit+0x11a>
 8013b6e:	e0f2      	b.n	8013d56 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	2b07      	cmp	r3, #7
 8013b76:	f240 80e7 	bls.w	8013d48 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8013b7a:	e05d      	b.n	8013c38 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	695b      	ldr	r3, [r3, #20]
 8013b82:	f003 0302 	and.w	r3, r3, #2
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	d132      	bne.n	8013bf0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d918      	bls.n	8013bc8 <HAL_SPI_Transmit+0x200>
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d014      	beq.n	8013bc8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	6812      	ldr	r2, [r2, #0]
 8013ba8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bae:	1d1a      	adds	r2, r3, #4
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	3b02      	subs	r3, #2
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013bc6:	e037      	b.n	8013c38 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bcc:	881a      	ldrh	r2, [r3, #0]
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bd6:	1c9a      	adds	r2, r3, #2
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	3b01      	subs	r3, #1
 8013be6:	b29a      	uxth	r2, r3
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013bee:	e023      	b.n	8013c38 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013bf0:	f7f8 f802 	bl	800bbf8 <HAL_GetTick>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	1ad3      	subs	r3, r2, r3
 8013bfa:	683a      	ldr	r2, [r7, #0]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d803      	bhi.n	8013c08 <HAL_SPI_Transmit+0x240>
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c06:	d102      	bne.n	8013c0e <HAL_SPI_Transmit+0x246>
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d114      	bne.n	8013c38 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013c0e:	68f8      	ldr	r0, [r7, #12]
 8013c10:	f000 ffcc 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2201      	movs	r2, #1
 8013c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013c34:	2303      	movs	r3, #3
 8013c36:	e0b4      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d19b      	bne.n	8013b7c <HAL_SPI_Transmit+0x1b4>
 8013c44:	e087      	b.n	8013d56 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	695b      	ldr	r3, [r3, #20]
 8013c4c:	f003 0302 	and.w	r3, r3, #2
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d155      	bne.n	8013d00 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	2b03      	cmp	r3, #3
 8013c5e:	d918      	bls.n	8013c92 <HAL_SPI_Transmit+0x2ca>
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c64:	2b40      	cmp	r3, #64	; 0x40
 8013c66:	d914      	bls.n	8013c92 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	6812      	ldr	r2, [r2, #0]
 8013c72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c78:	1d1a      	adds	r2, r3, #4
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	3b04      	subs	r3, #4
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013c90:	e05a      	b.n	8013d48 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d917      	bls.n	8013cce <HAL_SPI_Transmit+0x306>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d013      	beq.n	8013cce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013caa:	881a      	ldrh	r2, [r3, #0]
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013cb4:	1c9a      	adds	r2, r3, #2
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	3b02      	subs	r3, #2
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013ccc:	e03c      	b.n	8013d48 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	3320      	adds	r3, #32
 8013cd8:	7812      	ldrb	r2, [r2, #0]
 8013cda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ce0:	1c5a      	adds	r2, r3, #1
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8013cf8:	e026      	b.n	8013d48 <HAL_SPI_Transmit+0x380>
 8013cfa:	bf00      	nop
 8013cfc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d00:	f7f7 ff7a 	bl	800bbf8 <HAL_GetTick>
 8013d04:	4602      	mov	r2, r0
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	683a      	ldr	r2, [r7, #0]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d803      	bhi.n	8013d18 <HAL_SPI_Transmit+0x350>
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d16:	d102      	bne.n	8013d1e <HAL_SPI_Transmit+0x356>
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d114      	bne.n	8013d48 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013d1e:	68f8      	ldr	r0, [r7, #12]
 8013d20:	f000 ff44 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2200      	movs	r2, #0
 8013d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013d44:	2303      	movs	r3, #3
 8013d46:	e02c      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f47f af78 	bne.w	8013c46 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	9300      	str	r3, [sp, #0]
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	2108      	movs	r1, #8
 8013d60:	68f8      	ldr	r0, [r7, #12]
 8013d62:	f000 ffc3 	bl	8014cec <SPI_WaitOnFlagUntilTimeout>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d007      	beq.n	8013d7c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d72:	f043 0220 	orr.w	r2, r3, #32
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f000 ff15 	bl	8014bac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2200      	movs	r2, #0
 8013d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e000      	b.n	8013da2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8013da0:	7efb      	ldrb	r3, [r7, #27]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3720      	adds	r7, #32
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop

08013dac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b08a      	sub	sp, #40	; 0x28
 8013db0:	af02      	add	r7, sp, #8
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	603b      	str	r3, [r7, #0]
 8013db8:	4613      	mov	r3, r2
 8013dba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	3330      	adds	r3, #48	; 0x30
 8013dc6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	685b      	ldr	r3, [r3, #4]
 8013dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013dd0:	d112      	bne.n	8013df8 <HAL_SPI_Receive+0x4c>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	689b      	ldr	r3, [r3, #8]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d10e      	bne.n	8013df8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2204      	movs	r2, #4
 8013dde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013de2:	88fa      	ldrh	r2, [r7, #6]
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	9300      	str	r3, [sp, #0]
 8013de8:	4613      	mov	r3, r2
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	68b9      	ldr	r1, [r7, #8]
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f000 f9ce 	bl	8014190 <HAL_SPI_TransmitReceive>
 8013df4:	4603      	mov	r3, r0
 8013df6:	e1c7      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	d101      	bne.n	8013e06 <HAL_SPI_Receive+0x5a>
 8013e02:	2302      	movs	r3, #2
 8013e04:	e1c0      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2201      	movs	r2, #1
 8013e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013e0e:	f7f7 fef3 	bl	800bbf8 <HAL_GetTick>
 8013e12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d007      	beq.n	8013e30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8013e20:	2302      	movs	r3, #2
 8013e22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2200      	movs	r2, #0
 8013e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8013e2c:	7ffb      	ldrb	r3, [r7, #31]
 8013e2e:	e1ab      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d002      	beq.n	8013e3c <HAL_SPI_Receive+0x90>
 8013e36:	88fb      	ldrh	r3, [r7, #6]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d107      	bne.n	8013e4c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8013e48:	7ffb      	ldrb	r3, [r7, #31]
 8013e4a:	e19d      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2204      	movs	r2, #4
 8013e50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2200      	movs	r2, #0
 8013e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	88fa      	ldrh	r2, [r7, #6]
 8013e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	88fa      	ldrh	r2, [r7, #6]
 8013e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2200      	movs	r2, #0
 8013e76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2200      	movs	r2, #0
 8013e92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	689b      	ldr	r3, [r3, #8]
 8013e98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8013e9c:	d107      	bne.n	8013eae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	681a      	ldr	r2, [r3, #0]
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	685a      	ldr	r2, [r3, #4]
 8013eb4:	4b94      	ldr	r3, [pc, #592]	; (8014108 <HAL_SPI_Receive+0x35c>)
 8013eb6:	4013      	ands	r3, r2
 8013eb8:	88f9      	ldrh	r1, [r7, #6]
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	6812      	ldr	r2, [r2, #0]
 8013ebe:	430b      	orrs	r3, r1
 8013ec0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f042 0201 	orr.w	r2, r2, #1
 8013ed0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013eda:	d107      	bne.n	8013eec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013eea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	2b0f      	cmp	r3, #15
 8013ef2:	d948      	bls.n	8013f86 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8013ef4:	e040      	b.n	8013f78 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	695a      	ldr	r2, [r3, #20]
 8013efc:	f248 0308 	movw	r3, #32776	; 0x8008
 8013f00:	4013      	ands	r3, r2
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d014      	beq.n	8013f30 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013f10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013f16:	1d1a      	adds	r2, r3, #4
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	3b01      	subs	r3, #1
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013f2e:	e023      	b.n	8013f78 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013f30:	f7f7 fe62 	bl	800bbf8 <HAL_GetTick>
 8013f34:	4602      	mov	r2, r0
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	1ad3      	subs	r3, r2, r3
 8013f3a:	683a      	ldr	r2, [r7, #0]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d803      	bhi.n	8013f48 <HAL_SPI_Receive+0x19c>
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f46:	d102      	bne.n	8013f4e <HAL_SPI_Receive+0x1a2>
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d114      	bne.n	8013f78 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8013f4e:	68f8      	ldr	r0, [r7, #12]
 8013f50:	f000 fe2c 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2200      	movs	r2, #0
 8013f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2201      	movs	r2, #1
 8013f70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8013f74:	2303      	movs	r3, #3
 8013f76:	e107      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d1b8      	bne.n	8013ef6 <HAL_SPI_Receive+0x14a>
 8013f84:	e0ed      	b.n	8014162 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	2b07      	cmp	r3, #7
 8013f8c:	f240 80e2 	bls.w	8014154 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8013f90:	e05b      	b.n	801404a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	695b      	ldr	r3, [r3, #20]
 8013f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d030      	beq.n	8014002 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	695b      	ldr	r3, [r3, #20]
 8013fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d014      	beq.n	8013fd8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013fb8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fbe:	1d1a      	adds	r2, r3, #4
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	3b02      	subs	r3, #2
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013fd6:	e038      	b.n	801404a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fdc:	69ba      	ldr	r2, [r7, #24]
 8013fde:	8812      	ldrh	r2, [r2, #0]
 8013fe0:	b292      	uxth	r2, r2
 8013fe2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fe8:	1c9a      	adds	r2, r3, #2
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014000:	e023      	b.n	801404a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014002:	f7f7 fdf9 	bl	800bbf8 <HAL_GetTick>
 8014006:	4602      	mov	r2, r0
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d803      	bhi.n	801401a <HAL_SPI_Receive+0x26e>
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014018:	d102      	bne.n	8014020 <HAL_SPI_Receive+0x274>
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d114      	bne.n	801404a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 fdc3 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2201      	movs	r2, #1
 8014042:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014046:	2303      	movs	r3, #3
 8014048:	e09e      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014050:	b29b      	uxth	r3, r3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d19d      	bne.n	8013f92 <HAL_SPI_Receive+0x1e6>
 8014056:	e084      	b.n	8014162 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	695b      	ldr	r3, [r3, #20]
 801405e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014062:	2b00      	cmp	r3, #0
 8014064:	d052      	beq.n	801410c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014070:	2b00      	cmp	r3, #0
 8014072:	d014      	beq.n	801409e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801407c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801407e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014084:	1d1a      	adds	r2, r3, #4
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014090:	b29b      	uxth	r3, r3
 8014092:	3b04      	subs	r3, #4
 8014094:	b29a      	uxth	r2, r3
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801409c:	e05a      	b.n	8014154 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	695b      	ldr	r3, [r3, #20]
 80140a4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80140a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80140ac:	d914      	bls.n	80140d8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140b2:	69ba      	ldr	r2, [r7, #24]
 80140b4:	8812      	ldrh	r2, [r2, #0]
 80140b6:	b292      	uxth	r2, r2
 80140b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140be:	1c9a      	adds	r2, r3, #2
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	3b02      	subs	r3, #2
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80140d6:	e03d      	b.n	8014154 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140e4:	7812      	ldrb	r2, [r2, #0]
 80140e6:	b2d2      	uxtb	r2, r2
 80140e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140ee:	1c5a      	adds	r2, r3, #1
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	3b01      	subs	r3, #1
 80140fe:	b29a      	uxth	r2, r3
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014106:	e025      	b.n	8014154 <HAL_SPI_Receive+0x3a8>
 8014108:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801410c:	f7f7 fd74 	bl	800bbf8 <HAL_GetTick>
 8014110:	4602      	mov	r2, r0
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	1ad3      	subs	r3, r2, r3
 8014116:	683a      	ldr	r2, [r7, #0]
 8014118:	429a      	cmp	r2, r3
 801411a:	d803      	bhi.n	8014124 <HAL_SPI_Receive+0x378>
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014122:	d102      	bne.n	801412a <HAL_SPI_Receive+0x37e>
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d114      	bne.n	8014154 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f000 fd3e 	bl	8014bac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2200      	movs	r2, #0
 8014134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801413e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2201      	movs	r2, #1
 801414c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8014150:	2303      	movs	r3, #3
 8014152:	e019      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801415a:	b29b      	uxth	r3, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	f47f af7b 	bne.w	8014058 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f000 fd22 	bl	8014bac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2200      	movs	r2, #0
 801416c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2201      	movs	r2, #1
 8014174:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801417e:	2b00      	cmp	r3, #0
 8014180:	d001      	beq.n	8014186 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8014182:	2301      	movs	r3, #1
 8014184:	e000      	b.n	8014188 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8014186:	7ffb      	ldrb	r3, [r7, #31]
}
 8014188:	4618      	mov	r0, r3
 801418a:	3720      	adds	r7, #32
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b08e      	sub	sp, #56	; 0x38
 8014194:	af02      	add	r7, sp, #8
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
 801419c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3320      	adds	r3, #32
 80141aa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	3330      	adds	r3, #48	; 0x30
 80141b2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d101      	bne.n	80141c2 <HAL_SPI_TransmitReceive+0x32>
 80141be:	2302      	movs	r3, #2
 80141c0:	e2ce      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2201      	movs	r2, #1
 80141c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80141ca:	f7f7 fd15 	bl	800bbf8 <HAL_GetTick>
 80141ce:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80141d0:	887b      	ldrh	r3, [r7, #2]
 80141d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80141d4:	887b      	ldrh	r3, [r7, #2]
 80141d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80141de:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80141e6:	7efb      	ldrb	r3, [r7, #27]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d014      	beq.n	8014216 <HAL_SPI_TransmitReceive+0x86>
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80141f2:	d106      	bne.n	8014202 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d102      	bne.n	8014202 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80141fc:	7efb      	ldrb	r3, [r7, #27]
 80141fe:	2b04      	cmp	r3, #4
 8014200:	d009      	beq.n	8014216 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014202:	2302      	movs	r3, #2
 8014204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	2200      	movs	r2, #0
 801420c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014214:	e2a4      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d005      	beq.n	8014228 <HAL_SPI_TransmitReceive+0x98>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d002      	beq.n	8014228 <HAL_SPI_TransmitReceive+0x98>
 8014222:	887b      	ldrh	r3, [r7, #2]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d109      	bne.n	801423c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8014228:	2301      	movs	r3, #1
 801422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2200      	movs	r2, #0
 8014232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801423a:	e291      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014242:	b2db      	uxtb	r3, r3
 8014244:	2b04      	cmp	r3, #4
 8014246:	d003      	beq.n	8014250 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2205      	movs	r2, #5
 801424c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2200      	movs	r2, #0
 8014254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	687a      	ldr	r2, [r7, #4]
 801425c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	887a      	ldrh	r2, [r7, #2]
 8014262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	887a      	ldrh	r2, [r7, #2]
 801426a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	68ba      	ldr	r2, [r7, #8]
 8014272:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	887a      	ldrh	r2, [r7, #2]
 8014278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	887a      	ldrh	r2, [r7, #2]
 8014280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2200      	movs	r2, #0
 8014288:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2200      	movs	r2, #0
 801428e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	685a      	ldr	r2, [r3, #4]
 8014296:	4b81      	ldr	r3, [pc, #516]	; (801449c <HAL_SPI_TransmitReceive+0x30c>)
 8014298:	4013      	ands	r3, r2
 801429a:	8879      	ldrh	r1, [r7, #2]
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	6812      	ldr	r2, [r2, #0]
 80142a0:	430b      	orrs	r3, r1
 80142a2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f042 0201 	orr.w	r2, r2, #1
 80142b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80142bc:	d107      	bne.n	80142ce <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80142cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	68db      	ldr	r3, [r3, #12]
 80142d2:	2b0f      	cmp	r3, #15
 80142d4:	d970      	bls.n	80143b8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80142d6:	e068      	b.n	80143aa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	695b      	ldr	r3, [r3, #20]
 80142de:	f003 0302 	and.w	r3, r3, #2
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d11a      	bne.n	801431c <HAL_SPI_TransmitReceive+0x18c>
 80142e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d017      	beq.n	801431c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	6812      	ldr	r2, [r2, #0]
 80142f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80142fc:	1d1a      	adds	r2, r3, #4
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014308:	b29b      	uxth	r3, r3
 801430a:	3b01      	subs	r3, #1
 801430c:	b29a      	uxth	r2, r3
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801431a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	695a      	ldr	r2, [r3, #20]
 8014322:	f248 0308 	movw	r3, #32776	; 0x8008
 8014326:	4013      	ands	r3, r2
 8014328:	2b00      	cmp	r3, #0
 801432a:	d01a      	beq.n	8014362 <HAL_SPI_TransmitReceive+0x1d2>
 801432c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801432e:	2b00      	cmp	r3, #0
 8014330:	d017      	beq.n	8014362 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681a      	ldr	r2, [r3, #0]
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801433a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801433c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014342:	1d1a      	adds	r2, r3, #4
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801434e:	b29b      	uxth	r3, r3
 8014350:	3b01      	subs	r3, #1
 8014352:	b29a      	uxth	r2, r3
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014360:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014362:	f7f7 fc49 	bl	800bbf8 <HAL_GetTick>
 8014366:	4602      	mov	r2, r0
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801436e:	429a      	cmp	r2, r3
 8014370:	d803      	bhi.n	801437a <HAL_SPI_TransmitReceive+0x1ea>
 8014372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014378:	d102      	bne.n	8014380 <HAL_SPI_TransmitReceive+0x1f0>
 801437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437c:	2b00      	cmp	r3, #0
 801437e:	d114      	bne.n	80143aa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8014380:	68f8      	ldr	r0, [r7, #12]
 8014382:	f000 fc13 	bl	8014bac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2200      	movs	r2, #0
 801438a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	2201      	movs	r2, #1
 80143a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80143a6:	2303      	movs	r3, #3
 80143a8:	e1da      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80143aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d193      	bne.n	80142d8 <HAL_SPI_TransmitReceive+0x148>
 80143b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d190      	bne.n	80142d8 <HAL_SPI_TransmitReceive+0x148>
 80143b6:	e1ac      	b.n	8014712 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	2b07      	cmp	r3, #7
 80143be:	f240 81a0 	bls.w	8014702 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80143c2:	e0a9      	b.n	8014518 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	695b      	ldr	r3, [r3, #20]
 80143ca:	f003 0302 	and.w	r3, r3, #2
 80143ce:	2b02      	cmp	r3, #2
 80143d0:	d139      	bne.n	8014446 <HAL_SPI_TransmitReceive+0x2b6>
 80143d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d036      	beq.n	8014446 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80143d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d91c      	bls.n	8014418 <HAL_SPI_TransmitReceive+0x288>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d018      	beq.n	8014418 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	6812      	ldr	r2, [r2, #0]
 80143f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143f6:	1d1a      	adds	r2, r3, #4
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014402:	b29b      	uxth	r3, r3
 8014404:	3b02      	subs	r3, #2
 8014406:	b29a      	uxth	r2, r3
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014414:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8014416:	e016      	b.n	8014446 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801441c:	881a      	ldrh	r2, [r3, #0]
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014426:	1c9a      	adds	r2, r3, #2
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014432:	b29b      	uxth	r3, r3
 8014434:	3b01      	subs	r3, #1
 8014436:	b29a      	uxth	r2, r3
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014444:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	695b      	ldr	r3, [r3, #20]
 801444c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014450:	2b00      	cmp	r3, #0
 8014452:	d03d      	beq.n	80144d0 <HAL_SPI_TransmitReceive+0x340>
 8014454:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014456:	2b00      	cmp	r3, #0
 8014458:	d03a      	beq.n	80144d0 <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	695b      	ldr	r3, [r3, #20]
 8014460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014464:	2b00      	cmp	r3, #0
 8014466:	d01b      	beq.n	80144a0 <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014472:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014478:	1d1a      	adds	r2, r3, #4
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014484:	b29b      	uxth	r3, r3
 8014486:	3b02      	subs	r3, #2
 8014488:	b29a      	uxth	r2, r3
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014496:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014498:	e01a      	b.n	80144d0 <HAL_SPI_TransmitReceive+0x340>
 801449a:	bf00      	nop
 801449c:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144a4:	6a3a      	ldr	r2, [r7, #32]
 80144a6:	8812      	ldrh	r2, [r2, #0]
 80144a8:	b292      	uxth	r2, r2
 80144aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144b0:	1c9a      	adds	r2, r3, #2
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80144bc:	b29b      	uxth	r3, r3
 80144be:	3b01      	subs	r3, #1
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80144ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80144d0:	f7f7 fb92 	bl	800bbf8 <HAL_GetTick>
 80144d4:	4602      	mov	r2, r0
 80144d6:	69fb      	ldr	r3, [r7, #28]
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144dc:	429a      	cmp	r2, r3
 80144de:	d803      	bhi.n	80144e8 <HAL_SPI_TransmitReceive+0x358>
 80144e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144e6:	d102      	bne.n	80144ee <HAL_SPI_TransmitReceive+0x35e>
 80144e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d114      	bne.n	8014518 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f000 fb5c 	bl	8014bac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2200      	movs	r2, #0
 80144f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2201      	movs	r2, #1
 8014510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8014514:	2303      	movs	r3, #3
 8014516:	e123      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801451a:	2b00      	cmp	r3, #0
 801451c:	f47f af52 	bne.w	80143c4 <HAL_SPI_TransmitReceive+0x234>
 8014520:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014522:	2b00      	cmp	r3, #0
 8014524:	f47f af4e 	bne.w	80143c4 <HAL_SPI_TransmitReceive+0x234>
 8014528:	e0f3      	b.n	8014712 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	695b      	ldr	r3, [r3, #20]
 8014530:	f003 0302 	and.w	r3, r3, #2
 8014534:	2b02      	cmp	r3, #2
 8014536:	d15a      	bne.n	80145ee <HAL_SPI_TransmitReceive+0x45e>
 8014538:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801453a:	2b00      	cmp	r3, #0
 801453c:	d057      	beq.n	80145ee <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801453e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014540:	2b03      	cmp	r3, #3
 8014542:	d91c      	bls.n	801457e <HAL_SPI_TransmitReceive+0x3ee>
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014548:	2b40      	cmp	r3, #64	; 0x40
 801454a:	d918      	bls.n	801457e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	6812      	ldr	r2, [r2, #0]
 8014556:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801455c:	1d1a      	adds	r2, r3, #4
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014568:	b29b      	uxth	r3, r3
 801456a:	3b04      	subs	r3, #4
 801456c:	b29a      	uxth	r2, r3
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801457a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801457c:	e037      	b.n	80145ee <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801457e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014580:	2b01      	cmp	r3, #1
 8014582:	d91b      	bls.n	80145bc <HAL_SPI_TransmitReceive+0x42c>
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014588:	2b00      	cmp	r3, #0
 801458a:	d017      	beq.n	80145bc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014590:	881a      	ldrh	r2, [r3, #0]
 8014592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014594:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801459a:	1c9a      	adds	r2, r3, #2
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	3b02      	subs	r3, #2
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80145ba:	e018      	b.n	80145ee <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	3320      	adds	r3, #32
 80145c6:	7812      	ldrb	r2, [r2, #0]
 80145c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80145ce:	1c5a      	adds	r2, r3, #1
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145da:	b29b      	uxth	r3, r3
 80145dc:	3b01      	subs	r3, #1
 80145de:	b29a      	uxth	r2, r3
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	695b      	ldr	r3, [r3, #20]
 80145f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d05e      	beq.n	80146ba <HAL_SPI_TransmitReceive+0x52a>
 80145fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d05b      	beq.n	80146ba <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	695b      	ldr	r3, [r3, #20]
 8014608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801460c:	2b00      	cmp	r3, #0
 801460e:	d018      	beq.n	8014642 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801461a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014620:	1d1a      	adds	r2, r3, #4
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801462c:	b29b      	uxth	r3, r3
 801462e:	3b04      	subs	r3, #4
 8014630:	b29a      	uxth	r2, r3
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801463e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014640:	e03b      	b.n	80146ba <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	695b      	ldr	r3, [r3, #20]
 8014648:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 801464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014650:	d918      	bls.n	8014684 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014656:	6a3a      	ldr	r2, [r7, #32]
 8014658:	8812      	ldrh	r2, [r2, #0]
 801465a:	b292      	uxth	r2, r2
 801465c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014662:	1c9a      	adds	r2, r3, #2
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801466e:	b29b      	uxth	r3, r3
 8014670:	3b02      	subs	r3, #2
 8014672:	b29a      	uxth	r2, r3
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014680:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8014682:	e01a      	b.n	80146ba <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014690:	7812      	ldrb	r2, [r2, #0]
 8014692:	b2d2      	uxtb	r2, r2
 8014694:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801469a:	1c5a      	adds	r2, r3, #1
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	3b01      	subs	r3, #1
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80146b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80146ba:	f7f7 fa9d 	bl	800bbf8 <HAL_GetTick>
 80146be:	4602      	mov	r2, r0
 80146c0:	69fb      	ldr	r3, [r7, #28]
 80146c2:	1ad3      	subs	r3, r2, r3
 80146c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d803      	bhi.n	80146d2 <HAL_SPI_TransmitReceive+0x542>
 80146ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146d0:	d102      	bne.n	80146d8 <HAL_SPI_TransmitReceive+0x548>
 80146d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d114      	bne.n	8014702 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f000 fa67 	bl	8014bac <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2200      	movs	r2, #0
 80146e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80146ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2201      	movs	r2, #1
 80146fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80146fe:	2303      	movs	r3, #3
 8014700:	e02e      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014704:	2b00      	cmp	r3, #0
 8014706:	f47f af10 	bne.w	801452a <HAL_SPI_TransmitReceive+0x39a>
 801470a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801470c:	2b00      	cmp	r3, #0
 801470e:	f47f af0c 	bne.w	801452a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8014712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014714:	9300      	str	r3, [sp, #0]
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	2200      	movs	r2, #0
 801471a:	2108      	movs	r1, #8
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f000 fae5 	bl	8014cec <SPI_WaitOnFlagUntilTimeout>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d007      	beq.n	8014738 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801472e:	f043 0220 	orr.w	r2, r3, #32
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f000 fa37 	bl	8014bac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2200      	movs	r2, #0
 8014742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2201      	movs	r2, #1
 801474a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	e001      	b.n	8014760 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 801475c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014760:	4618      	mov	r0, r3
 8014762:	3730      	adds	r7, #48	; 0x30
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}

08014768 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b08a      	sub	sp, #40	; 0x28
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	695b      	ldr	r3, [r3, #20]
 801477e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8014780:	6a3a      	ldr	r2, [r7, #32]
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	4013      	ands	r3, r2
 8014786:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	689b      	ldr	r3, [r3, #8]
 801478e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8014790:	2300      	movs	r3, #0
 8014792:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801479a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3330      	adds	r3, #48	; 0x30
 80147a2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80147a4:	69bb      	ldr	r3, [r7, #24]
 80147a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d113      	bne.n	80147d6 <HAL_SPI_IRQHandler+0x6e>
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	f003 0320 	and.w	r3, r3, #32
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10e      	bne.n	80147d6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d009      	beq.n	80147d6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	4798      	blx	r3
    handled = 1UL;
 80147d2:	2301      	movs	r3, #1
 80147d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80147d6:	69bb      	ldr	r3, [r7, #24]
 80147d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10f      	bne.n	8014800 <HAL_SPI_IRQHandler+0x98>
 80147e0:	69bb      	ldr	r3, [r7, #24]
 80147e2:	f003 0301 	and.w	r3, r3, #1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d00a      	beq.n	8014800 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d105      	bne.n	8014800 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	4798      	blx	r3
    handled = 1UL;
 80147fc:	2301      	movs	r3, #1
 80147fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	f003 0320 	and.w	r3, r3, #32
 8014806:	2b00      	cmp	r3, #0
 8014808:	d10f      	bne.n	801482a <HAL_SPI_IRQHandler+0xc2>
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	f003 0302 	and.w	r3, r3, #2
 8014810:	2b00      	cmp	r3, #0
 8014812:	d00a      	beq.n	801482a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8014814:	69bb      	ldr	r3, [r7, #24]
 8014816:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801481a:	2b00      	cmp	r3, #0
 801481c:	d105      	bne.n	801482a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	4798      	blx	r3
    handled = 1UL;
 8014826:	2301      	movs	r3, #1
 8014828:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482c:	2b00      	cmp	r3, #0
 801482e:	f040 816f 	bne.w	8014b10 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	f003 0308 	and.w	r3, r3, #8
 8014838:	2b00      	cmp	r3, #0
 801483a:	f000 80a0 	beq.w	801497e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	699a      	ldr	r2, [r3, #24]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f042 0208 	orr.w	r2, r2, #8
 801484c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	699a      	ldr	r2, [r3, #24]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f042 0210 	orr.w	r2, r2, #16
 801485c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	699a      	ldr	r2, [r3, #24]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801486c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	691a      	ldr	r2, [r3, #16]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	f022 0208 	bic.w	r2, r2, #8
 801487c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014884:	2b00      	cmp	r3, #0
 8014886:	d00f      	beq.n	80148a8 <HAL_SPI_IRQHandler+0x140>
 8014888:	7cfb      	ldrb	r3, [r7, #19]
 801488a:	2b04      	cmp	r3, #4
 801488c:	d004      	beq.n	8014898 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014892:	69db      	ldr	r3, [r3, #28]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d007      	beq.n	80148a8 <HAL_SPI_IRQHandler+0x140>
 8014898:	7cfb      	ldrb	r3, [r7, #19]
 801489a:	2b03      	cmp	r3, #3
 801489c:	d059      	beq.n	8014952 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148a2:	69db      	ldr	r3, [r3, #28]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d154      	bne.n	8014952 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d13d      	bne.n	8014932 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80148b6:	e036      	b.n	8014926 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	2b0f      	cmp	r3, #15
 80148be:	d90b      	bls.n	80148d8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681a      	ldr	r2, [r3, #0]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80148ca:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148d0:	1d1a      	adds	r2, r3, #4
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	665a      	str	r2, [r3, #100]	; 0x64
 80148d6:	e01d      	b.n	8014914 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	2b07      	cmp	r3, #7
 80148de:	d90b      	bls.n	80148f8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148e4:	68fa      	ldr	r2, [r7, #12]
 80148e6:	8812      	ldrh	r2, [r2, #0]
 80148e8:	b292      	uxth	r2, r2
 80148ea:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148f0:	1c9a      	adds	r2, r3, #2
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	665a      	str	r2, [r3, #100]	; 0x64
 80148f6:	e00d      	b.n	8014914 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014904:	7812      	ldrb	r2, [r2, #0]
 8014906:	b2d2      	uxtb	r2, r2
 8014908:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801490e:	1c5a      	adds	r2, r3, #1
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801491a:	b29b      	uxth	r3, r3
 801491c:	3b01      	subs	r3, #1
 801491e:	b29a      	uxth	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801492c:	b29b      	uxth	r3, r3
 801492e:	2b00      	cmp	r3, #0
 8014930:	d1c2      	bne.n	80148b8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 f93a 	bl	8014bac <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2201      	movs	r2, #1
 801493c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014946:	2b00      	cmp	r3, #0
 8014948:	d003      	beq.n	8014952 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f90a 	bl	8014b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8014950:	e0e3      	b.n	8014b1a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8014952:	7cfb      	ldrb	r3, [r7, #19]
 8014954:	2b05      	cmp	r3, #5
 8014956:	d103      	bne.n	8014960 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 f8f9 	bl	8014b50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801495e:	e0d9      	b.n	8014b14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8014960:	7cfb      	ldrb	r3, [r7, #19]
 8014962:	2b04      	cmp	r3, #4
 8014964:	d103      	bne.n	801496e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 f8e8 	bl	8014b3c <HAL_SPI_RxCpltCallback>
    return;
 801496c:	e0d2      	b.n	8014b14 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801496e:	7cfb      	ldrb	r3, [r7, #19]
 8014970:	2b03      	cmp	r3, #3
 8014972:	f040 80cf 	bne.w	8014b14 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f000 f8d6 	bl	8014b28 <HAL_SPI_TxCpltCallback>
    return;
 801497c:	e0ca      	b.n	8014b14 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014984:	2b00      	cmp	r3, #0
 8014986:	d00d      	beq.n	80149a4 <HAL_SPI_IRQHandler+0x23c>
 8014988:	6a3b      	ldr	r3, [r7, #32]
 801498a:	f003 0308 	and.w	r3, r3, #8
 801498e:	2b00      	cmp	r3, #0
 8014990:	d008      	beq.n	80149a4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	699a      	ldr	r2, [r3, #24]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80149a0:	619a      	str	r2, [r3, #24]

    return;
 80149a2:	e0ba      	b.n	8014b1a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f000 80b5 	beq.w	8014b1a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d00f      	beq.n	80149da <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149c0:	f043 0204 	orr.w	r2, r3, #4
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	699a      	ldr	r2, [r3, #24]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80149d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00f      	beq.n	8014a04 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149ea:	f043 0201 	orr.w	r2, r3, #1
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	699a      	ldr	r2, [r3, #24]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014a02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d00f      	beq.n	8014a2e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a14:	f043 0208 	orr.w	r2, r3, #8
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	699a      	ldr	r2, [r3, #24]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014a2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8014a2e:	69bb      	ldr	r3, [r7, #24]
 8014a30:	f003 0320 	and.w	r3, r3, #32
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00f      	beq.n	8014a58 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	699a      	ldr	r2, [r3, #24]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	f042 0220 	orr.w	r2, r2, #32
 8014a56:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d05a      	beq.n	8014b18 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f022 0201 	bic.w	r2, r2, #1
 8014a70:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	6919      	ldr	r1, [r3, #16]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	4b28      	ldr	r3, [pc, #160]	; (8014b20 <HAL_SPI_IRQHandler+0x3b8>)
 8014a7e:	400b      	ands	r3, r1
 8014a80:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014a88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8014a8c:	d138      	bne.n	8014b00 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	689a      	ldr	r2, [r3, #8]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014a9c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d013      	beq.n	8014ace <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aaa:	4a1e      	ldr	r2, [pc, #120]	; (8014b24 <HAL_SPI_IRQHandler+0x3bc>)
 8014aac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f8 fc16 	bl	800d2e4 <HAL_DMA_Abort_IT>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d007      	beq.n	8014ace <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d020      	beq.n	8014b18 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ada:	4a12      	ldr	r2, [pc, #72]	; (8014b24 <HAL_SPI_IRQHandler+0x3bc>)
 8014adc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7f8 fbfe 	bl	800d2e4 <HAL_DMA_Abort_IT>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d014      	beq.n	8014b18 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014af4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014afe:	e00b      	b.n	8014b18 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2201      	movs	r2, #1
 8014b04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f000 f82b 	bl	8014b64 <HAL_SPI_ErrorCallback>
    return;
 8014b0e:	e003      	b.n	8014b18 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8014b10:	bf00      	nop
 8014b12:	e002      	b.n	8014b1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8014b14:	bf00      	nop
 8014b16:	e000      	b.n	8014b1a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8014b18:	bf00      	nop
  }
}
 8014b1a:	3728      	adds	r7, #40	; 0x28
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	fffffc94 	.word	0xfffffc94
 8014b24:	08014b79 	.word	0x08014b79

08014b28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8014b30:	bf00      	nop
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr

08014b3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014b44:	bf00      	nop
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8014b58:	bf00      	nop
 8014b5a:	370c      	adds	r7, #12
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr

08014b64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014b6c:	bf00      	nop
 8014b6e:	370c      	adds	r7, #12
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr

08014b78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2201      	movs	r2, #1
 8014b9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f7ff ffe0 	bl	8014b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ba4:	bf00      	nop
 8014ba6:	3710      	adds	r7, #16
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}

08014bac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b085      	sub	sp, #20
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	695b      	ldr	r3, [r3, #20]
 8014bba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	699a      	ldr	r2, [r3, #24]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	f042 0208 	orr.w	r2, r2, #8
 8014bca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	699a      	ldr	r2, [r3, #24]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f042 0210 	orr.w	r2, r2, #16
 8014bda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f022 0201 	bic.w	r2, r2, #1
 8014bea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	6919      	ldr	r1, [r3, #16]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681a      	ldr	r2, [r3, #0]
 8014bf6:	4b3c      	ldr	r3, [pc, #240]	; (8014ce8 <SPI_CloseTransfer+0x13c>)
 8014bf8:	400b      	ands	r3, r1
 8014bfa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689a      	ldr	r2, [r3, #8]
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014c0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	2b04      	cmp	r3, #4
 8014c16:	d014      	beq.n	8014c42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f003 0320 	and.w	r3, r3, #32
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00f      	beq.n	8014c42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	699a      	ldr	r2, [r3, #24]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	f042 0220 	orr.w	r2, r2, #32
 8014c40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	2b03      	cmp	r3, #3
 8014c4c:	d014      	beq.n	8014c78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00f      	beq.n	8014c78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c5e:	f043 0204 	orr.w	r2, r3, #4
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	699a      	ldr	r2, [r3, #24]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00f      	beq.n	8014ca2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c88:	f043 0201 	orr.w	r2, r3, #1
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	699a      	ldr	r2, [r3, #24]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ca0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00f      	beq.n	8014ccc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cb2:	f043 0208 	orr.w	r2, r3, #8
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	699a      	ldr	r2, [r3, #24]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014cca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8014cdc:	bf00      	nop
 8014cde:	3714      	adds	r7, #20
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr
 8014ce8:	fffffc90 	.word	0xfffffc90

08014cec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	603b      	str	r3, [r7, #0]
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8014cfc:	e010      	b.n	8014d20 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cfe:	f7f6 ff7b 	bl	800bbf8 <HAL_GetTick>
 8014d02:	4602      	mov	r2, r0
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	69ba      	ldr	r2, [r7, #24]
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d803      	bhi.n	8014d16 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d14:	d102      	bne.n	8014d1c <SPI_WaitOnFlagUntilTimeout+0x30>
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d101      	bne.n	8014d20 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8014d1c:	2303      	movs	r3, #3
 8014d1e:	e00f      	b.n	8014d40 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	695a      	ldr	r2, [r3, #20]
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	4013      	ands	r3, r2
 8014d2a:	68ba      	ldr	r2, [r7, #8]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	bf0c      	ite	eq
 8014d30:	2301      	moveq	r3, #1
 8014d32:	2300      	movne	r3, #0
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	461a      	mov	r2, r3
 8014d38:	79fb      	ldrb	r3, [r7, #7]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d0df      	beq.n	8014cfe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8014d3e:	2300      	movs	r3, #0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3710      	adds	r7, #16
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d54:	095b      	lsrs	r3, r3, #5
 8014d56:	3301      	adds	r3, #1
 8014d58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	68db      	ldr	r3, [r3, #12]
 8014d5e:	3301      	adds	r3, #1
 8014d60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	3307      	adds	r3, #7
 8014d66:	08db      	lsrs	r3, r3, #3
 8014d68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3714      	adds	r7, #20
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b082      	sub	sp, #8
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d101      	bne.n	8014d90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e049      	b.n	8014e24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d106      	bne.n	8014daa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7f6 fadd 	bl	800b364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2202      	movs	r2, #2
 8014dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681a      	ldr	r2, [r3, #0]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	3304      	adds	r3, #4
 8014dba:	4619      	mov	r1, r3
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	f000 faed 	bl	801539c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2201      	movs	r2, #1
 8014dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2201      	movs	r2, #1
 8014dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2201      	movs	r2, #1
 8014de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2201      	movs	r2, #1
 8014dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2201      	movs	r2, #1
 8014df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2201      	movs	r2, #1
 8014e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2201      	movs	r2, #1
 8014e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2201      	movs	r2, #1
 8014e16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014e22:	2300      	movs	r3, #0
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b085      	sub	sp, #20
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d001      	beq.n	8014e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014e40:	2301      	movs	r3, #1
 8014e42:	e054      	b.n	8014eee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2202      	movs	r2, #2
 8014e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	68da      	ldr	r2, [r3, #12]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	f042 0201 	orr.w	r2, r2, #1
 8014e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	4a26      	ldr	r2, [pc, #152]	; (8014efc <HAL_TIM_Base_Start_IT+0xd0>)
 8014e62:	4293      	cmp	r3, r2
 8014e64:	d022      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e6e:	d01d      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	4a22      	ldr	r2, [pc, #136]	; (8014f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d018      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4a21      	ldr	r2, [pc, #132]	; (8014f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d013      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	4a1f      	ldr	r2, [pc, #124]	; (8014f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d00e      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	4a1e      	ldr	r2, [pc, #120]	; (8014f0c <HAL_TIM_Base_Start_IT+0xe0>)
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d009      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	4a1c      	ldr	r2, [pc, #112]	; (8014f10 <HAL_TIM_Base_Start_IT+0xe4>)
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d004      	beq.n	8014eac <HAL_TIM_Base_Start_IT+0x80>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4a1b      	ldr	r2, [pc, #108]	; (8014f14 <HAL_TIM_Base_Start_IT+0xe8>)
 8014ea8:	4293      	cmp	r3, r2
 8014eaa:	d115      	bne.n	8014ed8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	689a      	ldr	r2, [r3, #8]
 8014eb2:	4b19      	ldr	r3, [pc, #100]	; (8014f18 <HAL_TIM_Base_Start_IT+0xec>)
 8014eb4:	4013      	ands	r3, r2
 8014eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b06      	cmp	r3, #6
 8014ebc:	d015      	beq.n	8014eea <HAL_TIM_Base_Start_IT+0xbe>
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ec4:	d011      	beq.n	8014eea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	681a      	ldr	r2, [r3, #0]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	f042 0201 	orr.w	r2, r2, #1
 8014ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014ed6:	e008      	b.n	8014eea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	681a      	ldr	r2, [r3, #0]
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f042 0201 	orr.w	r2, r2, #1
 8014ee6:	601a      	str	r2, [r3, #0]
 8014ee8:	e000      	b.n	8014eec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014eec:	2300      	movs	r3, #0
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3714      	adds	r7, #20
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef8:	4770      	bx	lr
 8014efa:	bf00      	nop
 8014efc:	40010000 	.word	0x40010000
 8014f00:	40000400 	.word	0x40000400
 8014f04:	40000800 	.word	0x40000800
 8014f08:	40000c00 	.word	0x40000c00
 8014f0c:	40010400 	.word	0x40010400
 8014f10:	40001800 	.word	0x40001800
 8014f14:	40014000 	.word	0x40014000
 8014f18:	00010007 	.word	0x00010007

08014f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	691b      	ldr	r3, [r3, #16]
 8014f2a:	f003 0302 	and.w	r3, r3, #2
 8014f2e:	2b02      	cmp	r3, #2
 8014f30:	d122      	bne.n	8014f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	68db      	ldr	r3, [r3, #12]
 8014f38:	f003 0302 	and.w	r3, r3, #2
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d11b      	bne.n	8014f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f06f 0202 	mvn.w	r2, #2
 8014f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	699b      	ldr	r3, [r3, #24]
 8014f56:	f003 0303 	and.w	r3, r3, #3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d003      	beq.n	8014f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 f9fe 	bl	8015360 <HAL_TIM_IC_CaptureCallback>
 8014f64:	e005      	b.n	8014f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f000 f9f0 	bl	801534c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f000 fa01 	bl	8015374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2200      	movs	r2, #0
 8014f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	691b      	ldr	r3, [r3, #16]
 8014f7e:	f003 0304 	and.w	r3, r3, #4
 8014f82:	2b04      	cmp	r3, #4
 8014f84:	d122      	bne.n	8014fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	f003 0304 	and.w	r3, r3, #4
 8014f90:	2b04      	cmp	r3, #4
 8014f92:	d11b      	bne.n	8014fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	f06f 0204 	mvn.w	r2, #4
 8014f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2202      	movs	r2, #2
 8014fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d003      	beq.n	8014fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f9d4 	bl	8015360 <HAL_TIM_IC_CaptureCallback>
 8014fb8:	e005      	b.n	8014fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 f9c6 	bl	801534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f000 f9d7 	bl	8015374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	691b      	ldr	r3, [r3, #16]
 8014fd2:	f003 0308 	and.w	r3, r3, #8
 8014fd6:	2b08      	cmp	r3, #8
 8014fd8:	d122      	bne.n	8015020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	f003 0308 	and.w	r3, r3, #8
 8014fe4:	2b08      	cmp	r3, #8
 8014fe6:	d11b      	bne.n	8015020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f06f 0208 	mvn.w	r2, #8
 8014ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2204      	movs	r2, #4
 8014ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	69db      	ldr	r3, [r3, #28]
 8014ffe:	f003 0303 	and.w	r3, r3, #3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d003      	beq.n	801500e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f000 f9aa 	bl	8015360 <HAL_TIM_IC_CaptureCallback>
 801500c:	e005      	b.n	801501a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 f99c 	bl	801534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 f9ad 	bl	8015374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	691b      	ldr	r3, [r3, #16]
 8015026:	f003 0310 	and.w	r3, r3, #16
 801502a:	2b10      	cmp	r3, #16
 801502c:	d122      	bne.n	8015074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	f003 0310 	and.w	r3, r3, #16
 8015038:	2b10      	cmp	r3, #16
 801503a:	d11b      	bne.n	8015074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	f06f 0210 	mvn.w	r2, #16
 8015044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2208      	movs	r2, #8
 801504a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	69db      	ldr	r3, [r3, #28]
 8015052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015056:	2b00      	cmp	r3, #0
 8015058:	d003      	beq.n	8015062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 f980 	bl	8015360 <HAL_TIM_IC_CaptureCallback>
 8015060:	e005      	b.n	801506e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 f972 	bl	801534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 f983 	bl	8015374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2200      	movs	r2, #0
 8015072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	691b      	ldr	r3, [r3, #16]
 801507a:	f003 0301 	and.w	r3, r3, #1
 801507e:	2b01      	cmp	r3, #1
 8015080:	d10e      	bne.n	80150a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	f003 0301 	and.w	r3, r3, #1
 801508c:	2b01      	cmp	r3, #1
 801508e:	d107      	bne.n	80150a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f06f 0201 	mvn.w	r2, #1
 8015098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f7f5 fcf6 	bl	800aa8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	691b      	ldr	r3, [r3, #16]
 80150a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150aa:	2b80      	cmp	r3, #128	; 0x80
 80150ac:	d10e      	bne.n	80150cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	68db      	ldr	r3, [r3, #12]
 80150b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150b8:	2b80      	cmp	r3, #128	; 0x80
 80150ba:	d107      	bne.n	80150cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80150c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f000 fb38 	bl	801573c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150da:	d10e      	bne.n	80150fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150e6:	2b80      	cmp	r3, #128	; 0x80
 80150e8:	d107      	bne.n	80150fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80150f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f000 fb2b 	bl	8015750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	691b      	ldr	r3, [r3, #16]
 8015100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015104:	2b40      	cmp	r3, #64	; 0x40
 8015106:	d10e      	bne.n	8015126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	68db      	ldr	r3, [r3, #12]
 801510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015112:	2b40      	cmp	r3, #64	; 0x40
 8015114:	d107      	bne.n	8015126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f000 f931 	bl	8015388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	691b      	ldr	r3, [r3, #16]
 801512c:	f003 0320 	and.w	r3, r3, #32
 8015130:	2b20      	cmp	r3, #32
 8015132:	d10e      	bne.n	8015152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	f003 0320 	and.w	r3, r3, #32
 801513e:	2b20      	cmp	r3, #32
 8015140:	d107      	bne.n	8015152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	f06f 0220 	mvn.w	r2, #32
 801514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 faeb 	bl	8015728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015152:	bf00      	nop
 8015154:	3708      	adds	r7, #8
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
	...

0801515c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015166:	2300      	movs	r3, #0
 8015168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015170:	2b01      	cmp	r3, #1
 8015172:	d101      	bne.n	8015178 <HAL_TIM_ConfigClockSource+0x1c>
 8015174:	2302      	movs	r3, #2
 8015176:	e0dc      	b.n	8015332 <HAL_TIM_ConfigClockSource+0x1d6>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2201      	movs	r2, #1
 801517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	2202      	movs	r2, #2
 8015184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	689b      	ldr	r3, [r3, #8]
 801518e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	4b6a      	ldr	r3, [pc, #424]	; (801533c <HAL_TIM_ConfigClockSource+0x1e0>)
 8015194:	4013      	ands	r3, r2
 8015196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801519e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	4a64      	ldr	r2, [pc, #400]	; (8015340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80151ae:	4293      	cmp	r3, r2
 80151b0:	f000 80a9 	beq.w	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 80151b4:	4a62      	ldr	r2, [pc, #392]	; (8015340 <HAL_TIM_ConfigClockSource+0x1e4>)
 80151b6:	4293      	cmp	r3, r2
 80151b8:	f200 80ae 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 80151bc:	4a61      	ldr	r2, [pc, #388]	; (8015344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80151be:	4293      	cmp	r3, r2
 80151c0:	f000 80a1 	beq.w	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 80151c4:	4a5f      	ldr	r2, [pc, #380]	; (8015344 <HAL_TIM_ConfigClockSource+0x1e8>)
 80151c6:	4293      	cmp	r3, r2
 80151c8:	f200 80a6 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 80151cc:	4a5e      	ldr	r2, [pc, #376]	; (8015348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80151ce:	4293      	cmp	r3, r2
 80151d0:	f000 8099 	beq.w	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 80151d4:	4a5c      	ldr	r2, [pc, #368]	; (8015348 <HAL_TIM_ConfigClockSource+0x1ec>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	f200 809e 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 80151dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80151e0:	f000 8091 	beq.w	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 80151e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80151e8:	f200 8096 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 80151ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80151f0:	f000 8089 	beq.w	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 80151f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80151f8:	f200 808e 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 80151fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015200:	d03e      	beq.n	8015280 <HAL_TIM_ConfigClockSource+0x124>
 8015202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015206:	f200 8087 	bhi.w	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 801520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801520e:	f000 8086 	beq.w	801531e <HAL_TIM_ConfigClockSource+0x1c2>
 8015212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015216:	d87f      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015218:	2b70      	cmp	r3, #112	; 0x70
 801521a:	d01a      	beq.n	8015252 <HAL_TIM_ConfigClockSource+0xf6>
 801521c:	2b70      	cmp	r3, #112	; 0x70
 801521e:	d87b      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015220:	2b60      	cmp	r3, #96	; 0x60
 8015222:	d050      	beq.n	80152c6 <HAL_TIM_ConfigClockSource+0x16a>
 8015224:	2b60      	cmp	r3, #96	; 0x60
 8015226:	d877      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015228:	2b50      	cmp	r3, #80	; 0x50
 801522a:	d03c      	beq.n	80152a6 <HAL_TIM_ConfigClockSource+0x14a>
 801522c:	2b50      	cmp	r3, #80	; 0x50
 801522e:	d873      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015230:	2b40      	cmp	r3, #64	; 0x40
 8015232:	d058      	beq.n	80152e6 <HAL_TIM_ConfigClockSource+0x18a>
 8015234:	2b40      	cmp	r3, #64	; 0x40
 8015236:	d86f      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015238:	2b30      	cmp	r3, #48	; 0x30
 801523a:	d064      	beq.n	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 801523c:	2b30      	cmp	r3, #48	; 0x30
 801523e:	d86b      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015240:	2b20      	cmp	r3, #32
 8015242:	d060      	beq.n	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 8015244:	2b20      	cmp	r3, #32
 8015246:	d867      	bhi.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
 8015248:	2b00      	cmp	r3, #0
 801524a:	d05c      	beq.n	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 801524c:	2b10      	cmp	r3, #16
 801524e:	d05a      	beq.n	8015306 <HAL_TIM_ConfigClockSource+0x1aa>
 8015250:	e062      	b.n	8015318 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6818      	ldr	r0, [r3, #0]
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	6899      	ldr	r1, [r3, #8]
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	685a      	ldr	r2, [r3, #4]
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	f000 f9b3 	bl	80155cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	689b      	ldr	r3, [r3, #8]
 801526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	68ba      	ldr	r2, [r7, #8]
 801527c:	609a      	str	r2, [r3, #8]
      break;
 801527e:	e04f      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6818      	ldr	r0, [r3, #0]
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	6899      	ldr	r1, [r3, #8]
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	68db      	ldr	r3, [r3, #12]
 8015290:	f000 f99c 	bl	80155cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	689a      	ldr	r2, [r3, #8]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80152a2:	609a      	str	r2, [r3, #8]
      break;
 80152a4:	e03c      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6818      	ldr	r0, [r3, #0]
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	6859      	ldr	r1, [r3, #4]
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	461a      	mov	r2, r3
 80152b4:	f000 f90c 	bl	80154d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2150      	movs	r1, #80	; 0x50
 80152be:	4618      	mov	r0, r3
 80152c0:	f000 f966 	bl	8015590 <TIM_ITRx_SetConfig>
      break;
 80152c4:	e02c      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6818      	ldr	r0, [r3, #0]
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	6859      	ldr	r1, [r3, #4]
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	68db      	ldr	r3, [r3, #12]
 80152d2:	461a      	mov	r2, r3
 80152d4:	f000 f92b 	bl	801552e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2160      	movs	r1, #96	; 0x60
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 f956 	bl	8015590 <TIM_ITRx_SetConfig>
      break;
 80152e4:	e01c      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6818      	ldr	r0, [r3, #0]
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	6859      	ldr	r1, [r3, #4]
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	68db      	ldr	r3, [r3, #12]
 80152f2:	461a      	mov	r2, r3
 80152f4:	f000 f8ec 	bl	80154d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2140      	movs	r1, #64	; 0x40
 80152fe:	4618      	mov	r0, r3
 8015300:	f000 f946 	bl	8015590 <TIM_ITRx_SetConfig>
      break;
 8015304:	e00c      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	4619      	mov	r1, r3
 8015310:	4610      	mov	r0, r2
 8015312:	f000 f93d 	bl	8015590 <TIM_ITRx_SetConfig>
      break;
 8015316:	e003      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8015318:	2301      	movs	r3, #1
 801531a:	73fb      	strb	r3, [r7, #15]
      break;
 801531c:	e000      	b.n	8015320 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2201      	movs	r2, #1
 8015324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2200      	movs	r2, #0
 801532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015330:	7bfb      	ldrb	r3, [r7, #15]
}
 8015332:	4618      	mov	r0, r3
 8015334:	3710      	adds	r7, #16
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	ffceff88 	.word	0xffceff88
 8015340:	00100040 	.word	0x00100040
 8015344:	00100030 	.word	0x00100030
 8015348:	00100020 	.word	0x00100020

0801534c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801534c:	b480      	push	{r7}
 801534e:	b083      	sub	sp, #12
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015354:	bf00      	nop
 8015356:	370c      	adds	r7, #12
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr

08015360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015360:	b480      	push	{r7}
 8015362:	b083      	sub	sp, #12
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015368:	bf00      	nop
 801536a:	370c      	adds	r7, #12
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr

08015374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015374:	b480      	push	{r7}
 8015376:	b083      	sub	sp, #12
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801537c:	bf00      	nop
 801537e:	370c      	adds	r7, #12
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr

08015388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015390:	bf00      	nop
 8015392:	370c      	adds	r7, #12
 8015394:	46bd      	mov	sp, r7
 8015396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539a:	4770      	bx	lr

0801539c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801539c:	b480      	push	{r7}
 801539e:	b085      	sub	sp, #20
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	4a40      	ldr	r2, [pc, #256]	; (80154b0 <TIM_Base_SetConfig+0x114>)
 80153b0:	4293      	cmp	r3, r2
 80153b2:	d013      	beq.n	80153dc <TIM_Base_SetConfig+0x40>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80153ba:	d00f      	beq.n	80153dc <TIM_Base_SetConfig+0x40>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	4a3d      	ldr	r2, [pc, #244]	; (80154b4 <TIM_Base_SetConfig+0x118>)
 80153c0:	4293      	cmp	r3, r2
 80153c2:	d00b      	beq.n	80153dc <TIM_Base_SetConfig+0x40>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	4a3c      	ldr	r2, [pc, #240]	; (80154b8 <TIM_Base_SetConfig+0x11c>)
 80153c8:	4293      	cmp	r3, r2
 80153ca:	d007      	beq.n	80153dc <TIM_Base_SetConfig+0x40>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	4a3b      	ldr	r2, [pc, #236]	; (80154bc <TIM_Base_SetConfig+0x120>)
 80153d0:	4293      	cmp	r3, r2
 80153d2:	d003      	beq.n	80153dc <TIM_Base_SetConfig+0x40>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	4a3a      	ldr	r2, [pc, #232]	; (80154c0 <TIM_Base_SetConfig+0x124>)
 80153d8:	4293      	cmp	r3, r2
 80153da:	d108      	bne.n	80153ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80153e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	4a2f      	ldr	r2, [pc, #188]	; (80154b0 <TIM_Base_SetConfig+0x114>)
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d01f      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80153fc:	d01b      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4a2c      	ldr	r2, [pc, #176]	; (80154b4 <TIM_Base_SetConfig+0x118>)
 8015402:	4293      	cmp	r3, r2
 8015404:	d017      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	4a2b      	ldr	r2, [pc, #172]	; (80154b8 <TIM_Base_SetConfig+0x11c>)
 801540a:	4293      	cmp	r3, r2
 801540c:	d013      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	4a2a      	ldr	r2, [pc, #168]	; (80154bc <TIM_Base_SetConfig+0x120>)
 8015412:	4293      	cmp	r3, r2
 8015414:	d00f      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	4a29      	ldr	r2, [pc, #164]	; (80154c0 <TIM_Base_SetConfig+0x124>)
 801541a:	4293      	cmp	r3, r2
 801541c:	d00b      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4a28      	ldr	r2, [pc, #160]	; (80154c4 <TIM_Base_SetConfig+0x128>)
 8015422:	4293      	cmp	r3, r2
 8015424:	d007      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	4a27      	ldr	r2, [pc, #156]	; (80154c8 <TIM_Base_SetConfig+0x12c>)
 801542a:	4293      	cmp	r3, r2
 801542c:	d003      	beq.n	8015436 <TIM_Base_SetConfig+0x9a>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	4a26      	ldr	r2, [pc, #152]	; (80154cc <TIM_Base_SetConfig+0x130>)
 8015432:	4293      	cmp	r3, r2
 8015434:	d108      	bne.n	8015448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	68fa      	ldr	r2, [r7, #12]
 8015444:	4313      	orrs	r3, r2
 8015446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	695b      	ldr	r3, [r3, #20]
 8015452:	4313      	orrs	r3, r2
 8015454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	68fa      	ldr	r2, [r7, #12]
 801545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	689a      	ldr	r2, [r3, #8]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	4a10      	ldr	r2, [pc, #64]	; (80154b0 <TIM_Base_SetConfig+0x114>)
 8015470:	4293      	cmp	r3, r2
 8015472:	d00f      	beq.n	8015494 <TIM_Base_SetConfig+0xf8>
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	4a12      	ldr	r2, [pc, #72]	; (80154c0 <TIM_Base_SetConfig+0x124>)
 8015478:	4293      	cmp	r3, r2
 801547a:	d00b      	beq.n	8015494 <TIM_Base_SetConfig+0xf8>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	4a11      	ldr	r2, [pc, #68]	; (80154c4 <TIM_Base_SetConfig+0x128>)
 8015480:	4293      	cmp	r3, r2
 8015482:	d007      	beq.n	8015494 <TIM_Base_SetConfig+0xf8>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	4a10      	ldr	r2, [pc, #64]	; (80154c8 <TIM_Base_SetConfig+0x12c>)
 8015488:	4293      	cmp	r3, r2
 801548a:	d003      	beq.n	8015494 <TIM_Base_SetConfig+0xf8>
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	4a0f      	ldr	r2, [pc, #60]	; (80154cc <TIM_Base_SetConfig+0x130>)
 8015490:	4293      	cmp	r3, r2
 8015492:	d103      	bne.n	801549c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	691a      	ldr	r2, [r3, #16]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2201      	movs	r2, #1
 80154a0:	615a      	str	r2, [r3, #20]
}
 80154a2:	bf00      	nop
 80154a4:	3714      	adds	r7, #20
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr
 80154ae:	bf00      	nop
 80154b0:	40010000 	.word	0x40010000
 80154b4:	40000400 	.word	0x40000400
 80154b8:	40000800 	.word	0x40000800
 80154bc:	40000c00 	.word	0x40000c00
 80154c0:	40010400 	.word	0x40010400
 80154c4:	40014000 	.word	0x40014000
 80154c8:	40014400 	.word	0x40014400
 80154cc:	40014800 	.word	0x40014800

080154d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b087      	sub	sp, #28
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6a1b      	ldr	r3, [r3, #32]
 80154e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	6a1b      	ldr	r3, [r3, #32]
 80154e6:	f023 0201 	bic.w	r2, r3, #1
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	699b      	ldr	r3, [r3, #24]
 80154f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80154fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	011b      	lsls	r3, r3, #4
 8015500:	693a      	ldr	r2, [r7, #16]
 8015502:	4313      	orrs	r3, r2
 8015504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	f023 030a 	bic.w	r3, r3, #10
 801550c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	4313      	orrs	r3, r2
 8015514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	693a      	ldr	r2, [r7, #16]
 801551a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	621a      	str	r2, [r3, #32]
}
 8015522:	bf00      	nop
 8015524:	371c      	adds	r7, #28
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr

0801552e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801552e:	b480      	push	{r7}
 8015530:	b087      	sub	sp, #28
 8015532:	af00      	add	r7, sp, #0
 8015534:	60f8      	str	r0, [r7, #12]
 8015536:	60b9      	str	r1, [r7, #8]
 8015538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	6a1b      	ldr	r3, [r3, #32]
 801553e:	f023 0210 	bic.w	r2, r3, #16
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	699b      	ldr	r3, [r3, #24]
 801554a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	6a1b      	ldr	r3, [r3, #32]
 8015550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	031b      	lsls	r3, r3, #12
 801555e:	697a      	ldr	r2, [r7, #20]
 8015560:	4313      	orrs	r3, r2
 8015562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801556a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	011b      	lsls	r3, r3, #4
 8015570:	693a      	ldr	r2, [r7, #16]
 8015572:	4313      	orrs	r3, r2
 8015574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	697a      	ldr	r2, [r7, #20]
 801557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	693a      	ldr	r2, [r7, #16]
 8015580:	621a      	str	r2, [r3, #32]
}
 8015582:	bf00      	nop
 8015584:	371c      	adds	r7, #28
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr
	...

08015590 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015590:	b480      	push	{r7}
 8015592:	b085      	sub	sp, #20
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	689b      	ldr	r3, [r3, #8]
 801559e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80155a0:	68fa      	ldr	r2, [r7, #12]
 80155a2:	4b09      	ldr	r3, [pc, #36]	; (80155c8 <TIM_ITRx_SetConfig+0x38>)
 80155a4:	4013      	ands	r3, r2
 80155a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80155a8:	683a      	ldr	r2, [r7, #0]
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	4313      	orrs	r3, r2
 80155ae:	f043 0307 	orr.w	r3, r3, #7
 80155b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	609a      	str	r2, [r3, #8]
}
 80155ba:	bf00      	nop
 80155bc:	3714      	adds	r7, #20
 80155be:	46bd      	mov	sp, r7
 80155c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c4:	4770      	bx	lr
 80155c6:	bf00      	nop
 80155c8:	ffcfff8f 	.word	0xffcfff8f

080155cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80155cc:	b480      	push	{r7}
 80155ce:	b087      	sub	sp, #28
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	689b      	ldr	r3, [r3, #8]
 80155de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80155e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	021a      	lsls	r2, r3, #8
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	431a      	orrs	r2, r3
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	4313      	orrs	r3, r2
 80155f4:	697a      	ldr	r2, [r7, #20]
 80155f6:	4313      	orrs	r3, r2
 80155f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	697a      	ldr	r2, [r7, #20]
 80155fe:	609a      	str	r2, [r3, #8]
}
 8015600:	bf00      	nop
 8015602:	371c      	adds	r7, #28
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801560c:	b480      	push	{r7}
 801560e:	b085      	sub	sp, #20
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801561c:	2b01      	cmp	r3, #1
 801561e:	d101      	bne.n	8015624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015620:	2302      	movs	r3, #2
 8015622:	e06d      	b.n	8015700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2201      	movs	r2, #1
 8015628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2202      	movs	r2, #2
 8015630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	689b      	ldr	r3, [r3, #8]
 8015642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	4a30      	ldr	r2, [pc, #192]	; (801570c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801564a:	4293      	cmp	r3, r2
 801564c:	d004      	beq.n	8015658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4a2f      	ldr	r2, [pc, #188]	; (8015710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015654:	4293      	cmp	r3, r2
 8015656:	d108      	bne.n	801566a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801565e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	68fa      	ldr	r2, [r7, #12]
 8015666:	4313      	orrs	r3, r2
 8015668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	68fa      	ldr	r2, [r7, #12]
 8015678:	4313      	orrs	r3, r2
 801567a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	68fa      	ldr	r2, [r7, #12]
 8015682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	4a20      	ldr	r2, [pc, #128]	; (801570c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801568a:	4293      	cmp	r3, r2
 801568c:	d022      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015696:	d01d      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	4a1d      	ldr	r2, [pc, #116]	; (8015714 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801569e:	4293      	cmp	r3, r2
 80156a0:	d018      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4a1c      	ldr	r2, [pc, #112]	; (8015718 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80156a8:	4293      	cmp	r3, r2
 80156aa:	d013      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4a1a      	ldr	r2, [pc, #104]	; (801571c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80156b2:	4293      	cmp	r3, r2
 80156b4:	d00e      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4a15      	ldr	r2, [pc, #84]	; (8015710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80156bc:	4293      	cmp	r3, r2
 80156be:	d009      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	4a16      	ldr	r2, [pc, #88]	; (8015720 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80156c6:	4293      	cmp	r3, r2
 80156c8:	d004      	beq.n	80156d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	4a15      	ldr	r2, [pc, #84]	; (8015724 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d10c      	bne.n	80156ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80156da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	68ba      	ldr	r2, [r7, #8]
 80156e2:	4313      	orrs	r3, r2
 80156e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	68ba      	ldr	r2, [r7, #8]
 80156ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2201      	movs	r2, #1
 80156f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80156fe:	2300      	movs	r3, #0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3714      	adds	r7, #20
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr
 801570c:	40010000 	.word	0x40010000
 8015710:	40010400 	.word	0x40010400
 8015714:	40000400 	.word	0x40000400
 8015718:	40000800 	.word	0x40000800
 801571c:	40000c00 	.word	0x40000c00
 8015720:	40001800 	.word	0x40001800
 8015724:	40014000 	.word	0x40014000

08015728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015730:	bf00      	nop
 8015732:	370c      	adds	r7, #12
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801573c:	b480      	push	{r7}
 801573e:	b083      	sub	sp, #12
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015744:	bf00      	nop
 8015746:	370c      	adds	r7, #12
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015758:	bf00      	nop
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015772:	2301      	movs	r3, #1
 8015774:	e042      	b.n	80157fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801577c:	2b00      	cmp	r3, #0
 801577e:	d106      	bne.n	801578e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f7f5 ffe1 	bl	800b750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2224      	movs	r2, #36	; 0x24
 8015792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f022 0201 	bic.w	r2, r2, #1
 80157a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fd74 	bl	8016294 <UART_SetConfig>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b01      	cmp	r3, #1
 80157b0:	d101      	bne.n	80157b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80157b2:	2301      	movs	r3, #1
 80157b4:	e022      	b.n	80157fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d002      	beq.n	80157c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f001 fad0 	bl	8016d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	685a      	ldr	r2, [r3, #4]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80157d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	689a      	ldr	r2, [r3, #8]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80157e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f042 0201 	orr.w	r2, r2, #1
 80157f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f001 fb57 	bl	8016ea8 <UART_CheckIdleState>
 80157fa:	4603      	mov	r3, r0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b08a      	sub	sp, #40	; 0x28
 8015808:	af02      	add	r7, sp, #8
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	603b      	str	r3, [r7, #0]
 8015810:	4613      	mov	r3, r2
 8015812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801581a:	2b20      	cmp	r3, #32
 801581c:	f040 8083 	bne.w	8015926 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d002      	beq.n	801582c <HAL_UART_Transmit+0x28>
 8015826:	88fb      	ldrh	r3, [r7, #6]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801582c:	2301      	movs	r3, #1
 801582e:	e07b      	b.n	8015928 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015836:	2b01      	cmp	r3, #1
 8015838:	d101      	bne.n	801583e <HAL_UART_Transmit+0x3a>
 801583a:	2302      	movs	r3, #2
 801583c:	e074      	b.n	8015928 <HAL_UART_Transmit+0x124>
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2201      	movs	r2, #1
 8015842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2200      	movs	r2, #0
 801584a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2221      	movs	r2, #33	; 0x21
 8015852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015856:	f7f6 f9cf 	bl	800bbf8 <HAL_GetTick>
 801585a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	88fa      	ldrh	r2, [r7, #6]
 8015860:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	88fa      	ldrh	r2, [r7, #6]
 8015868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	689b      	ldr	r3, [r3, #8]
 8015870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015874:	d108      	bne.n	8015888 <HAL_UART_Transmit+0x84>
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	691b      	ldr	r3, [r3, #16]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d104      	bne.n	8015888 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	61bb      	str	r3, [r7, #24]
 8015886:	e003      	b.n	8015890 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801588c:	2300      	movs	r3, #0
 801588e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2200      	movs	r2, #0
 8015894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8015898:	e02c      	b.n	80158f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	2200      	movs	r2, #0
 80158a2:	2180      	movs	r1, #128	; 0x80
 80158a4:	68f8      	ldr	r0, [r7, #12]
 80158a6:	f001 fb4a 	bl	8016f3e <UART_WaitOnFlagUntilTimeout>
 80158aa:	4603      	mov	r3, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d001      	beq.n	80158b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80158b0:	2303      	movs	r3, #3
 80158b2:	e039      	b.n	8015928 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80158b4:	69fb      	ldr	r3, [r7, #28]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d10b      	bne.n	80158d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	881b      	ldrh	r3, [r3, #0]
 80158be:	461a      	mov	r2, r3
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80158c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	3302      	adds	r3, #2
 80158ce:	61bb      	str	r3, [r7, #24]
 80158d0:	e007      	b.n	80158e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	781a      	ldrb	r2, [r3, #0]
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	3301      	adds	r3, #1
 80158e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	3b01      	subs	r3, #1
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d1cc      	bne.n	801589a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	9300      	str	r3, [sp, #0]
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	2200      	movs	r2, #0
 8015908:	2140      	movs	r1, #64	; 0x40
 801590a:	68f8      	ldr	r0, [r7, #12]
 801590c:	f001 fb17 	bl	8016f3e <UART_WaitOnFlagUntilTimeout>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d001      	beq.n	801591a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8015916:	2303      	movs	r3, #3
 8015918:	e006      	b.n	8015928 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2220      	movs	r2, #32
 801591e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8015922:	2300      	movs	r3, #0
 8015924:	e000      	b.n	8015928 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8015926:	2302      	movs	r3, #2
  }
}
 8015928:	4618      	mov	r0, r3
 801592a:	3720      	adds	r7, #32
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015930:	b480      	push	{r7}
 8015932:	b091      	sub	sp, #68	; 0x44
 8015934:	af00      	add	r7, sp, #0
 8015936:	60f8      	str	r0, [r7, #12]
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	4613      	mov	r3, r2
 801593c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015944:	2b20      	cmp	r3, #32
 8015946:	f040 808c 	bne.w	8015a62 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d002      	beq.n	8015956 <HAL_UART_Transmit_IT+0x26>
 8015950:	88fb      	ldrh	r3, [r7, #6]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d101      	bne.n	801595a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015956:	2301      	movs	r3, #1
 8015958:	e084      	b.n	8015a64 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015960:	2b01      	cmp	r3, #1
 8015962:	d101      	bne.n	8015968 <HAL_UART_Transmit_IT+0x38>
 8015964:	2302      	movs	r3, #2
 8015966:	e07d      	b.n	8015a64 <HAL_UART_Transmit_IT+0x134>
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2201      	movs	r2, #1
 801596c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	88fa      	ldrh	r2, [r7, #6]
 801597a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	88fa      	ldrh	r2, [r7, #6]
 8015982:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2200      	movs	r2, #0
 801598a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2200      	movs	r2, #0
 8015990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2221      	movs	r2, #33	; 0x21
 8015998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80159a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80159a4:	d12e      	bne.n	8015a04 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	689b      	ldr	r3, [r3, #8]
 80159aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159ae:	d107      	bne.n	80159c0 <HAL_UART_Transmit_IT+0x90>
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	691b      	ldr	r3, [r3, #16]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d103      	bne.n	80159c0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	4a2d      	ldr	r2, [pc, #180]	; (8015a70 <HAL_UART_Transmit_IT+0x140>)
 80159bc:	675a      	str	r2, [r3, #116]	; 0x74
 80159be:	e002      	b.n	80159c6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	4a2c      	ldr	r2, [pc, #176]	; (8015a74 <HAL_UART_Transmit_IT+0x144>)
 80159c4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	3308      	adds	r3, #8
 80159d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d8:	e853 3f00 	ldrex	r3, [r3]
 80159dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80159de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80159e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	3308      	adds	r3, #8
 80159ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159ee:	637a      	str	r2, [r7, #52]	; 0x34
 80159f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159f6:	e841 2300 	strex	r3, r2, [r1]
 80159fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80159fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d1e5      	bne.n	80159ce <HAL_UART_Transmit_IT+0x9e>
 8015a02:	e02c      	b.n	8015a5e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	689b      	ldr	r3, [r3, #8]
 8015a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a0c:	d107      	bne.n	8015a1e <HAL_UART_Transmit_IT+0xee>
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	691b      	ldr	r3, [r3, #16]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d103      	bne.n	8015a1e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	4a17      	ldr	r2, [pc, #92]	; (8015a78 <HAL_UART_Transmit_IT+0x148>)
 8015a1a:	675a      	str	r2, [r3, #116]	; 0x74
 8015a1c:	e002      	b.n	8015a24 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	4a16      	ldr	r2, [pc, #88]	; (8015a7c <HAL_UART_Transmit_IT+0x14c>)
 8015a22:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2200      	movs	r2, #0
 8015a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	e853 3f00 	ldrex	r3, [r3]
 8015a38:	613b      	str	r3, [r7, #16]
   return(result);
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	461a      	mov	r2, r3
 8015a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a4a:	623b      	str	r3, [r7, #32]
 8015a4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a4e:	69f9      	ldr	r1, [r7, #28]
 8015a50:	6a3a      	ldr	r2, [r7, #32]
 8015a52:	e841 2300 	strex	r3, r2, [r1]
 8015a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d1e6      	bne.n	8015a2c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e000      	b.n	8015a64 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8015a62:	2302      	movs	r3, #2
  }
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3744      	adds	r7, #68	; 0x44
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr
 8015a70:	08017677 	.word	0x08017677
 8015a74:	08017597 	.word	0x08017597
 8015a78:	080174d5 	.word	0x080174d5
 8015a7c:	0801741d 	.word	0x0801741d

08015a80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b08a      	sub	sp, #40	; 0x28
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a94:	2b20      	cmp	r3, #32
 8015a96:	d142      	bne.n	8015b1e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d002      	beq.n	8015aa4 <HAL_UART_Receive_IT+0x24>
 8015a9e:	88fb      	ldrh	r3, [r7, #6]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d101      	bne.n	8015aa8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	e03b      	b.n	8015b20 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d101      	bne.n	8015ab6 <HAL_UART_Receive_IT+0x36>
 8015ab2:	2302      	movs	r3, #2
 8015ab4:	e034      	b.n	8015b20 <HAL_UART_Receive_IT+0xa0>
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2201      	movs	r2, #1
 8015aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	4a17      	ldr	r2, [pc, #92]	; (8015b28 <HAL_UART_Receive_IT+0xa8>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d01f      	beq.n	8015b0e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d018      	beq.n	8015b0e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	e853 3f00 	ldrex	r3, [r3]
 8015ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015af0:	627b      	str	r3, [r7, #36]	; 0x24
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	461a      	mov	r2, r3
 8015af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afa:	623b      	str	r3, [r7, #32]
 8015afc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015afe:	69f9      	ldr	r1, [r7, #28]
 8015b00:	6a3a      	ldr	r2, [r7, #32]
 8015b02:	e841 2300 	strex	r3, r2, [r1]
 8015b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8015b08:	69bb      	ldr	r3, [r7, #24]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1e6      	bne.n	8015adc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015b0e:	88fb      	ldrh	r3, [r7, #6]
 8015b10:	461a      	mov	r2, r3
 8015b12:	68b9      	ldr	r1, [r7, #8]
 8015b14:	68f8      	ldr	r0, [r7, #12]
 8015b16:	f001 fadb 	bl	80170d0 <UART_Start_Receive_IT>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	e000      	b.n	8015b20 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015b1e:	2302      	movs	r3, #2
  }
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3728      	adds	r7, #40	; 0x28
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	58000c00 	.word	0x58000c00

08015b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b0ba      	sub	sp, #232	; 0xe8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	69db      	ldr	r3, [r3, #28]
 8015b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	689b      	ldr	r3, [r3, #8]
 8015b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015b52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d11b      	bne.n	8015ba0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b6c:	f003 0320 	and.w	r3, r3, #32
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d015      	beq.n	8015ba0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015b78:	f003 0320 	and.w	r3, r3, #32
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d105      	bne.n	8015b8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d009      	beq.n	8015ba0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	f000 835a 	beq.w	801624a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	4798      	blx	r3
      }
      return;
 8015b9e:	e354      	b.n	801624a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	f000 811f 	beq.w	8015de8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015baa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015bae:	4b8b      	ldr	r3, [pc, #556]	; (8015ddc <HAL_UART_IRQHandler+0x2b0>)
 8015bb0:	4013      	ands	r3, r2
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d106      	bne.n	8015bc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015bba:	4b89      	ldr	r3, [pc, #548]	; (8015de0 <HAL_UART_IRQHandler+0x2b4>)
 8015bbc:	4013      	ands	r3, r2
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f000 8112 	beq.w	8015de8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bc8:	f003 0301 	and.w	r3, r3, #1
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d011      	beq.n	8015bf4 <HAL_UART_IRQHandler+0xc8>
 8015bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d00b      	beq.n	8015bf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2201      	movs	r2, #1
 8015be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015bea:	f043 0201 	orr.w	r2, r3, #1
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bf8:	f003 0302 	and.w	r3, r3, #2
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d011      	beq.n	8015c24 <HAL_UART_IRQHandler+0xf8>
 8015c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c04:	f003 0301 	and.w	r3, r3, #1
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d00b      	beq.n	8015c24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2202      	movs	r2, #2
 8015c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c1a:	f043 0204 	orr.w	r2, r3, #4
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c28:	f003 0304 	and.w	r3, r3, #4
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d011      	beq.n	8015c54 <HAL_UART_IRQHandler+0x128>
 8015c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c34:	f003 0301 	and.w	r3, r3, #1
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d00b      	beq.n	8015c54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2204      	movs	r2, #4
 8015c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c4a:	f043 0202 	orr.w	r2, r3, #2
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c58:	f003 0308 	and.w	r3, r3, #8
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d017      	beq.n	8015c90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c64:	f003 0320 	and.w	r3, r3, #32
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d105      	bne.n	8015c78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015c6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015c70:	4b5a      	ldr	r3, [pc, #360]	; (8015ddc <HAL_UART_IRQHandler+0x2b0>)
 8015c72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00b      	beq.n	8015c90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2208      	movs	r2, #8
 8015c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c86:	f043 0208 	orr.w	r2, r3, #8
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d012      	beq.n	8015cc2 <HAL_UART_IRQHandler+0x196>
 8015c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d00c      	beq.n	8015cc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015cb8:	f043 0220 	orr.w	r2, r3, #32
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f000 82c0 	beq.w	801624e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015cd2:	f003 0320 	and.w	r3, r3, #32
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d013      	beq.n	8015d02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015cde:	f003 0320 	and.w	r3, r3, #32
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d105      	bne.n	8015cf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d007      	beq.n	8015d02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d003      	beq.n	8015d02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	689b      	ldr	r3, [r3, #8]
 8015d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d16:	2b40      	cmp	r3, #64	; 0x40
 8015d18:	d005      	beq.n	8015d26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d04f      	beq.n	8015dc6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f001 fafc 	bl	8017324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	689b      	ldr	r3, [r3, #8]
 8015d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d36:	2b40      	cmp	r3, #64	; 0x40
 8015d38:	d141      	bne.n	8015dbe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	3308      	adds	r3, #8
 8015d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015d48:	e853 3f00 	ldrex	r3, [r3]
 8015d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	3308      	adds	r3, #8
 8015d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015d66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015d76:	e841 2300 	strex	r3, r2, [r1]
 8015d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1d9      	bne.n	8015d3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d013      	beq.n	8015db6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d92:	4a14      	ldr	r2, [pc, #80]	; (8015de4 <HAL_UART_IRQHandler+0x2b8>)
 8015d94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7f7 faa2 	bl	800d2e4 <HAL_DMA_Abort_IT>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d017      	beq.n	8015dd6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8015db0:	4610      	mov	r0, r2
 8015db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015db4:	e00f      	b.n	8015dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 fa56 	bl	8016268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015dbc:	e00b      	b.n	8015dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f000 fa52 	bl	8016268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015dc4:	e007      	b.n	8015dd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f000 fa4e 	bl	8016268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8015dd4:	e23b      	b.n	801624e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015dd6:	bf00      	nop
    return;
 8015dd8:	e239      	b.n	801624e <HAL_UART_IRQHandler+0x722>
 8015dda:	bf00      	nop
 8015ddc:	10000001 	.word	0x10000001
 8015de0:	04000120 	.word	0x04000120
 8015de4:	080173f1 	.word	0x080173f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dec:	2b01      	cmp	r3, #1
 8015dee:	f040 81ce 	bne.w	801618e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015df6:	f003 0310 	and.w	r3, r3, #16
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	f000 81c7 	beq.w	801618e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e04:	f003 0310 	and.w	r3, r3, #16
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f000 81c0 	beq.w	801618e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	2210      	movs	r2, #16
 8015e14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	689b      	ldr	r3, [r3, #8]
 8015e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e20:	2b40      	cmp	r3, #64	; 0x40
 8015e22:	f040 813b 	bne.w	801609c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	4a8b      	ldr	r2, [pc, #556]	; (801605c <HAL_UART_IRQHandler+0x530>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d059      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	4a89      	ldr	r2, [pc, #548]	; (8016060 <HAL_UART_IRQHandler+0x534>)
 8015e3a:	4293      	cmp	r3, r2
 8015e3c:	d053      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4a87      	ldr	r2, [pc, #540]	; (8016064 <HAL_UART_IRQHandler+0x538>)
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d04d      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4a85      	ldr	r2, [pc, #532]	; (8016068 <HAL_UART_IRQHandler+0x53c>)
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d047      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4a83      	ldr	r2, [pc, #524]	; (801606c <HAL_UART_IRQHandler+0x540>)
 8015e5e:	4293      	cmp	r3, r2
 8015e60:	d041      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	4a81      	ldr	r2, [pc, #516]	; (8016070 <HAL_UART_IRQHandler+0x544>)
 8015e6a:	4293      	cmp	r3, r2
 8015e6c:	d03b      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	4a7f      	ldr	r2, [pc, #508]	; (8016074 <HAL_UART_IRQHandler+0x548>)
 8015e76:	4293      	cmp	r3, r2
 8015e78:	d035      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	4a7d      	ldr	r2, [pc, #500]	; (8016078 <HAL_UART_IRQHandler+0x54c>)
 8015e82:	4293      	cmp	r3, r2
 8015e84:	d02f      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	4a7b      	ldr	r2, [pc, #492]	; (801607c <HAL_UART_IRQHandler+0x550>)
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	d029      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	4a79      	ldr	r2, [pc, #484]	; (8016080 <HAL_UART_IRQHandler+0x554>)
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	d023      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4a77      	ldr	r2, [pc, #476]	; (8016084 <HAL_UART_IRQHandler+0x558>)
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	d01d      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4a75      	ldr	r2, [pc, #468]	; (8016088 <HAL_UART_IRQHandler+0x55c>)
 8015eb2:	4293      	cmp	r3, r2
 8015eb4:	d017      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	4a73      	ldr	r2, [pc, #460]	; (801608c <HAL_UART_IRQHandler+0x560>)
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	d011      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4a71      	ldr	r2, [pc, #452]	; (8016090 <HAL_UART_IRQHandler+0x564>)
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d00b      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	4a6f      	ldr	r2, [pc, #444]	; (8016094 <HAL_UART_IRQHandler+0x568>)
 8015ed6:	4293      	cmp	r3, r2
 8015ed8:	d005      	beq.n	8015ee6 <HAL_UART_IRQHandler+0x3ba>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4a6d      	ldr	r2, [pc, #436]	; (8016098 <HAL_UART_IRQHandler+0x56c>)
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d105      	bne.n	8015ef2 <HAL_UART_IRQHandler+0x3c6>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	e004      	b.n	8015efc <HAL_UART_IRQHandler+0x3d0>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f000 81a4 	beq.w	8016252 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015f14:	429a      	cmp	r2, r3
 8015f16:	f080 819c 	bcs.w	8016252 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015f20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015f28:	69db      	ldr	r3, [r3, #28]
 8015f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f2e:	f000 8086 	beq.w	801603e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015f3e:	e853 3f00 	ldrex	r3, [r3]
 8015f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	461a      	mov	r2, r3
 8015f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015f60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015f68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015f6c:	e841 2300 	strex	r3, r2, [r1]
 8015f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d1da      	bne.n	8015f32 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	3308      	adds	r3, #8
 8015f82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015f86:	e853 3f00 	ldrex	r3, [r3]
 8015f8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015f8e:	f023 0301 	bic.w	r3, r3, #1
 8015f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	3308      	adds	r3, #8
 8015f9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015fa0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015fac:	e841 2300 	strex	r3, r2, [r1]
 8015fb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d1e1      	bne.n	8015f7c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	3308      	adds	r3, #8
 8015fbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fc2:	e853 3f00 	ldrex	r3, [r3]
 8015fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	3308      	adds	r3, #8
 8015fd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015fdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015fde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fe0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015fe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015fe4:	e841 2300 	strex	r3, r2, [r1]
 8015fe8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d1e3      	bne.n	8015fb8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2220      	movs	r2, #32
 8015ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016006:	e853 3f00 	ldrex	r3, [r3]
 801600a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801600e:	f023 0310 	bic.w	r3, r3, #16
 8016012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	461a      	mov	r2, r3
 801601c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016020:	65bb      	str	r3, [r7, #88]	; 0x58
 8016022:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016028:	e841 2300 	strex	r3, r2, [r1]
 801602c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016030:	2b00      	cmp	r3, #0
 8016032:	d1e4      	bne.n	8015ffe <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016038:	4618      	mov	r0, r3
 801603a:	f7f6 fe35 	bl	800cca8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801604a:	b29b      	uxth	r3, r3
 801604c:	1ad3      	subs	r3, r2, r3
 801604e:	b29b      	uxth	r3, r3
 8016050:	4619      	mov	r1, r3
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 f912 	bl	801627c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016058:	e0fb      	b.n	8016252 <HAL_UART_IRQHandler+0x726>
 801605a:	bf00      	nop
 801605c:	40020010 	.word	0x40020010
 8016060:	40020028 	.word	0x40020028
 8016064:	40020040 	.word	0x40020040
 8016068:	40020058 	.word	0x40020058
 801606c:	40020070 	.word	0x40020070
 8016070:	40020088 	.word	0x40020088
 8016074:	400200a0 	.word	0x400200a0
 8016078:	400200b8 	.word	0x400200b8
 801607c:	40020410 	.word	0x40020410
 8016080:	40020428 	.word	0x40020428
 8016084:	40020440 	.word	0x40020440
 8016088:	40020458 	.word	0x40020458
 801608c:	40020470 	.word	0x40020470
 8016090:	40020488 	.word	0x40020488
 8016094:	400204a0 	.word	0x400204a0
 8016098:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	1ad3      	subs	r3, r2, r3
 80160ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f000 80cc 	beq.w	8016256 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80160be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f000 80c7 	beq.w	8016256 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160d0:	e853 3f00 	ldrex	r3, [r3]
 80160d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80160d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80160dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	461a      	mov	r2, r3
 80160e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80160ea:	647b      	str	r3, [r7, #68]	; 0x44
 80160ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80160f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80160f2:	e841 2300 	strex	r3, r2, [r1]
 80160f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80160f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d1e4      	bne.n	80160c8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	3308      	adds	r3, #8
 8016104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	e853 3f00 	ldrex	r3, [r3]
 801610c:	623b      	str	r3, [r7, #32]
   return(result);
 801610e:	6a3a      	ldr	r2, [r7, #32]
 8016110:	4b54      	ldr	r3, [pc, #336]	; (8016264 <HAL_UART_IRQHandler+0x738>)
 8016112:	4013      	ands	r3, r2
 8016114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	3308      	adds	r3, #8
 801611e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016122:	633a      	str	r2, [r7, #48]	; 0x30
 8016124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801612a:	e841 2300 	strex	r3, r2, [r1]
 801612e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016132:	2b00      	cmp	r3, #0
 8016134:	d1e3      	bne.n	80160fe <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2220      	movs	r2, #32
 801613a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2200      	movs	r2, #0
 8016142:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2200      	movs	r2, #0
 8016148:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	e853 3f00 	ldrex	r3, [r3]
 8016156:	60fb      	str	r3, [r7, #12]
   return(result);
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f023 0310 	bic.w	r3, r3, #16
 801615e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	461a      	mov	r2, r3
 8016168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801616c:	61fb      	str	r3, [r7, #28]
 801616e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016170:	69b9      	ldr	r1, [r7, #24]
 8016172:	69fa      	ldr	r2, [r7, #28]
 8016174:	e841 2300 	strex	r3, r2, [r1]
 8016178:	617b      	str	r3, [r7, #20]
   return(result);
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d1e4      	bne.n	801614a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016184:	4619      	mov	r1, r3
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f000 f878 	bl	801627c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801618c:	e063      	b.n	8016256 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016196:	2b00      	cmp	r3, #0
 8016198:	d00e      	beq.n	80161b8 <HAL_UART_IRQHandler+0x68c>
 801619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801619e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d008      	beq.n	80161b8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80161ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f001 ff5d 	bl	8018070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80161b6:	e051      	b.n	801625c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80161b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d014      	beq.n	80161ee <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80161c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d105      	bne.n	80161dc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80161d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80161d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d008      	beq.n	80161ee <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d03a      	beq.n	801625a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	4798      	blx	r3
    }
    return;
 80161ec:	e035      	b.n	801625a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80161ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d009      	beq.n	801620e <HAL_UART_IRQHandler+0x6e2>
 80161fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016202:	2b00      	cmp	r3, #0
 8016204:	d003      	beq.n	801620e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f001 faaa 	bl	8017760 <UART_EndTransmit_IT>
    return;
 801620c:	e026      	b.n	801625c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016216:	2b00      	cmp	r3, #0
 8016218:	d009      	beq.n	801622e <HAL_UART_IRQHandler+0x702>
 801621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801621e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016222:	2b00      	cmp	r3, #0
 8016224:	d003      	beq.n	801622e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f001 ff36 	bl	8018098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801622c:	e016      	b.n	801625c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016236:	2b00      	cmp	r3, #0
 8016238:	d010      	beq.n	801625c <HAL_UART_IRQHandler+0x730>
 801623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801623e:	2b00      	cmp	r3, #0
 8016240:	da0c      	bge.n	801625c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f001 ff1e 	bl	8018084 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016248:	e008      	b.n	801625c <HAL_UART_IRQHandler+0x730>
      return;
 801624a:	bf00      	nop
 801624c:	e006      	b.n	801625c <HAL_UART_IRQHandler+0x730>
    return;
 801624e:	bf00      	nop
 8016250:	e004      	b.n	801625c <HAL_UART_IRQHandler+0x730>
      return;
 8016252:	bf00      	nop
 8016254:	e002      	b.n	801625c <HAL_UART_IRQHandler+0x730>
      return;
 8016256:	bf00      	nop
 8016258:	e000      	b.n	801625c <HAL_UART_IRQHandler+0x730>
    return;
 801625a:	bf00      	nop
  }
}
 801625c:	37e8      	adds	r7, #232	; 0xe8
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	effffffe 	.word	0xeffffffe

08016268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016268:	b480      	push	{r7}
 801626a:	b083      	sub	sp, #12
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016270:	bf00      	nop
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr

0801627c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801627c:	b480      	push	{r7}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	460b      	mov	r3, r1
 8016286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016288:	bf00      	nop
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr

08016294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016298:	b092      	sub	sp, #72	; 0x48
 801629a:	af00      	add	r7, sp, #0
 801629c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801629e:	2300      	movs	r3, #0
 80162a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	689a      	ldr	r2, [r3, #8]
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	691b      	ldr	r3, [r3, #16]
 80162ac:	431a      	orrs	r2, r3
 80162ae:	697b      	ldr	r3, [r7, #20]
 80162b0:	695b      	ldr	r3, [r3, #20]
 80162b2:	431a      	orrs	r2, r3
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	69db      	ldr	r3, [r3, #28]
 80162b8:	4313      	orrs	r3, r2
 80162ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	681a      	ldr	r2, [r3, #0]
 80162c2:	4bbe      	ldr	r3, [pc, #760]	; (80165bc <UART_SetConfig+0x328>)
 80162c4:	4013      	ands	r3, r2
 80162c6:	697a      	ldr	r2, [r7, #20]
 80162c8:	6812      	ldr	r2, [r2, #0]
 80162ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80162cc:	430b      	orrs	r3, r1
 80162ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	68da      	ldr	r2, [r3, #12]
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	430a      	orrs	r2, r1
 80162e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	699b      	ldr	r3, [r3, #24]
 80162ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	4ab3      	ldr	r2, [pc, #716]	; (80165c0 <UART_SetConfig+0x32c>)
 80162f2:	4293      	cmp	r3, r2
 80162f4:	d004      	beq.n	8016300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	6a1b      	ldr	r3, [r3, #32]
 80162fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80162fc:	4313      	orrs	r3, r2
 80162fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	4baf      	ldr	r3, [pc, #700]	; (80165c4 <UART_SetConfig+0x330>)
 8016308:	4013      	ands	r3, r2
 801630a:	697a      	ldr	r2, [r7, #20]
 801630c:	6812      	ldr	r2, [r2, #0]
 801630e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016310:	430b      	orrs	r3, r1
 8016312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631a:	f023 010f 	bic.w	r1, r3, #15
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	430a      	orrs	r2, r1
 8016328:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4aa6      	ldr	r2, [pc, #664]	; (80165c8 <UART_SetConfig+0x334>)
 8016330:	4293      	cmp	r3, r2
 8016332:	d177      	bne.n	8016424 <UART_SetConfig+0x190>
 8016334:	4ba5      	ldr	r3, [pc, #660]	; (80165cc <UART_SetConfig+0x338>)
 8016336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801633c:	2b28      	cmp	r3, #40	; 0x28
 801633e:	d86d      	bhi.n	801641c <UART_SetConfig+0x188>
 8016340:	a201      	add	r2, pc, #4	; (adr r2, 8016348 <UART_SetConfig+0xb4>)
 8016342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016346:	bf00      	nop
 8016348:	080163ed 	.word	0x080163ed
 801634c:	0801641d 	.word	0x0801641d
 8016350:	0801641d 	.word	0x0801641d
 8016354:	0801641d 	.word	0x0801641d
 8016358:	0801641d 	.word	0x0801641d
 801635c:	0801641d 	.word	0x0801641d
 8016360:	0801641d 	.word	0x0801641d
 8016364:	0801641d 	.word	0x0801641d
 8016368:	080163f5 	.word	0x080163f5
 801636c:	0801641d 	.word	0x0801641d
 8016370:	0801641d 	.word	0x0801641d
 8016374:	0801641d 	.word	0x0801641d
 8016378:	0801641d 	.word	0x0801641d
 801637c:	0801641d 	.word	0x0801641d
 8016380:	0801641d 	.word	0x0801641d
 8016384:	0801641d 	.word	0x0801641d
 8016388:	080163fd 	.word	0x080163fd
 801638c:	0801641d 	.word	0x0801641d
 8016390:	0801641d 	.word	0x0801641d
 8016394:	0801641d 	.word	0x0801641d
 8016398:	0801641d 	.word	0x0801641d
 801639c:	0801641d 	.word	0x0801641d
 80163a0:	0801641d 	.word	0x0801641d
 80163a4:	0801641d 	.word	0x0801641d
 80163a8:	08016405 	.word	0x08016405
 80163ac:	0801641d 	.word	0x0801641d
 80163b0:	0801641d 	.word	0x0801641d
 80163b4:	0801641d 	.word	0x0801641d
 80163b8:	0801641d 	.word	0x0801641d
 80163bc:	0801641d 	.word	0x0801641d
 80163c0:	0801641d 	.word	0x0801641d
 80163c4:	0801641d 	.word	0x0801641d
 80163c8:	0801640d 	.word	0x0801640d
 80163cc:	0801641d 	.word	0x0801641d
 80163d0:	0801641d 	.word	0x0801641d
 80163d4:	0801641d 	.word	0x0801641d
 80163d8:	0801641d 	.word	0x0801641d
 80163dc:	0801641d 	.word	0x0801641d
 80163e0:	0801641d 	.word	0x0801641d
 80163e4:	0801641d 	.word	0x0801641d
 80163e8:	08016415 	.word	0x08016415
 80163ec:	2301      	movs	r3, #1
 80163ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163f2:	e222      	b.n	801683a <UART_SetConfig+0x5a6>
 80163f4:	2304      	movs	r3, #4
 80163f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163fa:	e21e      	b.n	801683a <UART_SetConfig+0x5a6>
 80163fc:	2308      	movs	r3, #8
 80163fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016402:	e21a      	b.n	801683a <UART_SetConfig+0x5a6>
 8016404:	2310      	movs	r3, #16
 8016406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801640a:	e216      	b.n	801683a <UART_SetConfig+0x5a6>
 801640c:	2320      	movs	r3, #32
 801640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016412:	e212      	b.n	801683a <UART_SetConfig+0x5a6>
 8016414:	2340      	movs	r3, #64	; 0x40
 8016416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801641a:	e20e      	b.n	801683a <UART_SetConfig+0x5a6>
 801641c:	2380      	movs	r3, #128	; 0x80
 801641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016422:	e20a      	b.n	801683a <UART_SetConfig+0x5a6>
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	4a69      	ldr	r2, [pc, #420]	; (80165d0 <UART_SetConfig+0x33c>)
 801642a:	4293      	cmp	r3, r2
 801642c:	d130      	bne.n	8016490 <UART_SetConfig+0x1fc>
 801642e:	4b67      	ldr	r3, [pc, #412]	; (80165cc <UART_SetConfig+0x338>)
 8016430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016432:	f003 0307 	and.w	r3, r3, #7
 8016436:	2b05      	cmp	r3, #5
 8016438:	d826      	bhi.n	8016488 <UART_SetConfig+0x1f4>
 801643a:	a201      	add	r2, pc, #4	; (adr r2, 8016440 <UART_SetConfig+0x1ac>)
 801643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016440:	08016459 	.word	0x08016459
 8016444:	08016461 	.word	0x08016461
 8016448:	08016469 	.word	0x08016469
 801644c:	08016471 	.word	0x08016471
 8016450:	08016479 	.word	0x08016479
 8016454:	08016481 	.word	0x08016481
 8016458:	2300      	movs	r3, #0
 801645a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801645e:	e1ec      	b.n	801683a <UART_SetConfig+0x5a6>
 8016460:	2304      	movs	r3, #4
 8016462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016466:	e1e8      	b.n	801683a <UART_SetConfig+0x5a6>
 8016468:	2308      	movs	r3, #8
 801646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801646e:	e1e4      	b.n	801683a <UART_SetConfig+0x5a6>
 8016470:	2310      	movs	r3, #16
 8016472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016476:	e1e0      	b.n	801683a <UART_SetConfig+0x5a6>
 8016478:	2320      	movs	r3, #32
 801647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801647e:	e1dc      	b.n	801683a <UART_SetConfig+0x5a6>
 8016480:	2340      	movs	r3, #64	; 0x40
 8016482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016486:	e1d8      	b.n	801683a <UART_SetConfig+0x5a6>
 8016488:	2380      	movs	r3, #128	; 0x80
 801648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801648e:	e1d4      	b.n	801683a <UART_SetConfig+0x5a6>
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	4a4f      	ldr	r2, [pc, #316]	; (80165d4 <UART_SetConfig+0x340>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d130      	bne.n	80164fc <UART_SetConfig+0x268>
 801649a:	4b4c      	ldr	r3, [pc, #304]	; (80165cc <UART_SetConfig+0x338>)
 801649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801649e:	f003 0307 	and.w	r3, r3, #7
 80164a2:	2b05      	cmp	r3, #5
 80164a4:	d826      	bhi.n	80164f4 <UART_SetConfig+0x260>
 80164a6:	a201      	add	r2, pc, #4	; (adr r2, 80164ac <UART_SetConfig+0x218>)
 80164a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164ac:	080164c5 	.word	0x080164c5
 80164b0:	080164cd 	.word	0x080164cd
 80164b4:	080164d5 	.word	0x080164d5
 80164b8:	080164dd 	.word	0x080164dd
 80164bc:	080164e5 	.word	0x080164e5
 80164c0:	080164ed 	.word	0x080164ed
 80164c4:	2300      	movs	r3, #0
 80164c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164ca:	e1b6      	b.n	801683a <UART_SetConfig+0x5a6>
 80164cc:	2304      	movs	r3, #4
 80164ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164d2:	e1b2      	b.n	801683a <UART_SetConfig+0x5a6>
 80164d4:	2308      	movs	r3, #8
 80164d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164da:	e1ae      	b.n	801683a <UART_SetConfig+0x5a6>
 80164dc:	2310      	movs	r3, #16
 80164de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164e2:	e1aa      	b.n	801683a <UART_SetConfig+0x5a6>
 80164e4:	2320      	movs	r3, #32
 80164e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164ea:	e1a6      	b.n	801683a <UART_SetConfig+0x5a6>
 80164ec:	2340      	movs	r3, #64	; 0x40
 80164ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164f2:	e1a2      	b.n	801683a <UART_SetConfig+0x5a6>
 80164f4:	2380      	movs	r3, #128	; 0x80
 80164f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164fa:	e19e      	b.n	801683a <UART_SetConfig+0x5a6>
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a35      	ldr	r2, [pc, #212]	; (80165d8 <UART_SetConfig+0x344>)
 8016502:	4293      	cmp	r3, r2
 8016504:	d130      	bne.n	8016568 <UART_SetConfig+0x2d4>
 8016506:	4b31      	ldr	r3, [pc, #196]	; (80165cc <UART_SetConfig+0x338>)
 8016508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801650a:	f003 0307 	and.w	r3, r3, #7
 801650e:	2b05      	cmp	r3, #5
 8016510:	d826      	bhi.n	8016560 <UART_SetConfig+0x2cc>
 8016512:	a201      	add	r2, pc, #4	; (adr r2, 8016518 <UART_SetConfig+0x284>)
 8016514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016518:	08016531 	.word	0x08016531
 801651c:	08016539 	.word	0x08016539
 8016520:	08016541 	.word	0x08016541
 8016524:	08016549 	.word	0x08016549
 8016528:	08016551 	.word	0x08016551
 801652c:	08016559 	.word	0x08016559
 8016530:	2300      	movs	r3, #0
 8016532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016536:	e180      	b.n	801683a <UART_SetConfig+0x5a6>
 8016538:	2304      	movs	r3, #4
 801653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801653e:	e17c      	b.n	801683a <UART_SetConfig+0x5a6>
 8016540:	2308      	movs	r3, #8
 8016542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016546:	e178      	b.n	801683a <UART_SetConfig+0x5a6>
 8016548:	2310      	movs	r3, #16
 801654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801654e:	e174      	b.n	801683a <UART_SetConfig+0x5a6>
 8016550:	2320      	movs	r3, #32
 8016552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016556:	e170      	b.n	801683a <UART_SetConfig+0x5a6>
 8016558:	2340      	movs	r3, #64	; 0x40
 801655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801655e:	e16c      	b.n	801683a <UART_SetConfig+0x5a6>
 8016560:	2380      	movs	r3, #128	; 0x80
 8016562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016566:	e168      	b.n	801683a <UART_SetConfig+0x5a6>
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4a1b      	ldr	r2, [pc, #108]	; (80165dc <UART_SetConfig+0x348>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d142      	bne.n	80165f8 <UART_SetConfig+0x364>
 8016572:	4b16      	ldr	r3, [pc, #88]	; (80165cc <UART_SetConfig+0x338>)
 8016574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016576:	f003 0307 	and.w	r3, r3, #7
 801657a:	2b05      	cmp	r3, #5
 801657c:	d838      	bhi.n	80165f0 <UART_SetConfig+0x35c>
 801657e:	a201      	add	r2, pc, #4	; (adr r2, 8016584 <UART_SetConfig+0x2f0>)
 8016580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016584:	0801659d 	.word	0x0801659d
 8016588:	080165a5 	.word	0x080165a5
 801658c:	080165ad 	.word	0x080165ad
 8016590:	080165b5 	.word	0x080165b5
 8016594:	080165e1 	.word	0x080165e1
 8016598:	080165e9 	.word	0x080165e9
 801659c:	2300      	movs	r3, #0
 801659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165a2:	e14a      	b.n	801683a <UART_SetConfig+0x5a6>
 80165a4:	2304      	movs	r3, #4
 80165a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165aa:	e146      	b.n	801683a <UART_SetConfig+0x5a6>
 80165ac:	2308      	movs	r3, #8
 80165ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165b2:	e142      	b.n	801683a <UART_SetConfig+0x5a6>
 80165b4:	2310      	movs	r3, #16
 80165b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165ba:	e13e      	b.n	801683a <UART_SetConfig+0x5a6>
 80165bc:	cfff69f3 	.word	0xcfff69f3
 80165c0:	58000c00 	.word	0x58000c00
 80165c4:	11fff4ff 	.word	0x11fff4ff
 80165c8:	40011000 	.word	0x40011000
 80165cc:	58024400 	.word	0x58024400
 80165d0:	40004400 	.word	0x40004400
 80165d4:	40004800 	.word	0x40004800
 80165d8:	40004c00 	.word	0x40004c00
 80165dc:	40005000 	.word	0x40005000
 80165e0:	2320      	movs	r3, #32
 80165e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165e6:	e128      	b.n	801683a <UART_SetConfig+0x5a6>
 80165e8:	2340      	movs	r3, #64	; 0x40
 80165ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165ee:	e124      	b.n	801683a <UART_SetConfig+0x5a6>
 80165f0:	2380      	movs	r3, #128	; 0x80
 80165f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80165f6:	e120      	b.n	801683a <UART_SetConfig+0x5a6>
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	4acb      	ldr	r2, [pc, #812]	; (801692c <UART_SetConfig+0x698>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	d176      	bne.n	80166f0 <UART_SetConfig+0x45c>
 8016602:	4bcb      	ldr	r3, [pc, #812]	; (8016930 <UART_SetConfig+0x69c>)
 8016604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801660a:	2b28      	cmp	r3, #40	; 0x28
 801660c:	d86c      	bhi.n	80166e8 <UART_SetConfig+0x454>
 801660e:	a201      	add	r2, pc, #4	; (adr r2, 8016614 <UART_SetConfig+0x380>)
 8016610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016614:	080166b9 	.word	0x080166b9
 8016618:	080166e9 	.word	0x080166e9
 801661c:	080166e9 	.word	0x080166e9
 8016620:	080166e9 	.word	0x080166e9
 8016624:	080166e9 	.word	0x080166e9
 8016628:	080166e9 	.word	0x080166e9
 801662c:	080166e9 	.word	0x080166e9
 8016630:	080166e9 	.word	0x080166e9
 8016634:	080166c1 	.word	0x080166c1
 8016638:	080166e9 	.word	0x080166e9
 801663c:	080166e9 	.word	0x080166e9
 8016640:	080166e9 	.word	0x080166e9
 8016644:	080166e9 	.word	0x080166e9
 8016648:	080166e9 	.word	0x080166e9
 801664c:	080166e9 	.word	0x080166e9
 8016650:	080166e9 	.word	0x080166e9
 8016654:	080166c9 	.word	0x080166c9
 8016658:	080166e9 	.word	0x080166e9
 801665c:	080166e9 	.word	0x080166e9
 8016660:	080166e9 	.word	0x080166e9
 8016664:	080166e9 	.word	0x080166e9
 8016668:	080166e9 	.word	0x080166e9
 801666c:	080166e9 	.word	0x080166e9
 8016670:	080166e9 	.word	0x080166e9
 8016674:	080166d1 	.word	0x080166d1
 8016678:	080166e9 	.word	0x080166e9
 801667c:	080166e9 	.word	0x080166e9
 8016680:	080166e9 	.word	0x080166e9
 8016684:	080166e9 	.word	0x080166e9
 8016688:	080166e9 	.word	0x080166e9
 801668c:	080166e9 	.word	0x080166e9
 8016690:	080166e9 	.word	0x080166e9
 8016694:	080166d9 	.word	0x080166d9
 8016698:	080166e9 	.word	0x080166e9
 801669c:	080166e9 	.word	0x080166e9
 80166a0:	080166e9 	.word	0x080166e9
 80166a4:	080166e9 	.word	0x080166e9
 80166a8:	080166e9 	.word	0x080166e9
 80166ac:	080166e9 	.word	0x080166e9
 80166b0:	080166e9 	.word	0x080166e9
 80166b4:	080166e1 	.word	0x080166e1
 80166b8:	2301      	movs	r3, #1
 80166ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166be:	e0bc      	b.n	801683a <UART_SetConfig+0x5a6>
 80166c0:	2304      	movs	r3, #4
 80166c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166c6:	e0b8      	b.n	801683a <UART_SetConfig+0x5a6>
 80166c8:	2308      	movs	r3, #8
 80166ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ce:	e0b4      	b.n	801683a <UART_SetConfig+0x5a6>
 80166d0:	2310      	movs	r3, #16
 80166d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166d6:	e0b0      	b.n	801683a <UART_SetConfig+0x5a6>
 80166d8:	2320      	movs	r3, #32
 80166da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166de:	e0ac      	b.n	801683a <UART_SetConfig+0x5a6>
 80166e0:	2340      	movs	r3, #64	; 0x40
 80166e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166e6:	e0a8      	b.n	801683a <UART_SetConfig+0x5a6>
 80166e8:	2380      	movs	r3, #128	; 0x80
 80166ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ee:	e0a4      	b.n	801683a <UART_SetConfig+0x5a6>
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a8f      	ldr	r2, [pc, #572]	; (8016934 <UART_SetConfig+0x6a0>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d130      	bne.n	801675c <UART_SetConfig+0x4c8>
 80166fa:	4b8d      	ldr	r3, [pc, #564]	; (8016930 <UART_SetConfig+0x69c>)
 80166fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166fe:	f003 0307 	and.w	r3, r3, #7
 8016702:	2b05      	cmp	r3, #5
 8016704:	d826      	bhi.n	8016754 <UART_SetConfig+0x4c0>
 8016706:	a201      	add	r2, pc, #4	; (adr r2, 801670c <UART_SetConfig+0x478>)
 8016708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801670c:	08016725 	.word	0x08016725
 8016710:	0801672d 	.word	0x0801672d
 8016714:	08016735 	.word	0x08016735
 8016718:	0801673d 	.word	0x0801673d
 801671c:	08016745 	.word	0x08016745
 8016720:	0801674d 	.word	0x0801674d
 8016724:	2300      	movs	r3, #0
 8016726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801672a:	e086      	b.n	801683a <UART_SetConfig+0x5a6>
 801672c:	2304      	movs	r3, #4
 801672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016732:	e082      	b.n	801683a <UART_SetConfig+0x5a6>
 8016734:	2308      	movs	r3, #8
 8016736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801673a:	e07e      	b.n	801683a <UART_SetConfig+0x5a6>
 801673c:	2310      	movs	r3, #16
 801673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016742:	e07a      	b.n	801683a <UART_SetConfig+0x5a6>
 8016744:	2320      	movs	r3, #32
 8016746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801674a:	e076      	b.n	801683a <UART_SetConfig+0x5a6>
 801674c:	2340      	movs	r3, #64	; 0x40
 801674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016752:	e072      	b.n	801683a <UART_SetConfig+0x5a6>
 8016754:	2380      	movs	r3, #128	; 0x80
 8016756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801675a:	e06e      	b.n	801683a <UART_SetConfig+0x5a6>
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	4a75      	ldr	r2, [pc, #468]	; (8016938 <UART_SetConfig+0x6a4>)
 8016762:	4293      	cmp	r3, r2
 8016764:	d130      	bne.n	80167c8 <UART_SetConfig+0x534>
 8016766:	4b72      	ldr	r3, [pc, #456]	; (8016930 <UART_SetConfig+0x69c>)
 8016768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801676a:	f003 0307 	and.w	r3, r3, #7
 801676e:	2b05      	cmp	r3, #5
 8016770:	d826      	bhi.n	80167c0 <UART_SetConfig+0x52c>
 8016772:	a201      	add	r2, pc, #4	; (adr r2, 8016778 <UART_SetConfig+0x4e4>)
 8016774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016778:	08016791 	.word	0x08016791
 801677c:	08016799 	.word	0x08016799
 8016780:	080167a1 	.word	0x080167a1
 8016784:	080167a9 	.word	0x080167a9
 8016788:	080167b1 	.word	0x080167b1
 801678c:	080167b9 	.word	0x080167b9
 8016790:	2300      	movs	r3, #0
 8016792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016796:	e050      	b.n	801683a <UART_SetConfig+0x5a6>
 8016798:	2304      	movs	r3, #4
 801679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801679e:	e04c      	b.n	801683a <UART_SetConfig+0x5a6>
 80167a0:	2308      	movs	r3, #8
 80167a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167a6:	e048      	b.n	801683a <UART_SetConfig+0x5a6>
 80167a8:	2310      	movs	r3, #16
 80167aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167ae:	e044      	b.n	801683a <UART_SetConfig+0x5a6>
 80167b0:	2320      	movs	r3, #32
 80167b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167b6:	e040      	b.n	801683a <UART_SetConfig+0x5a6>
 80167b8:	2340      	movs	r3, #64	; 0x40
 80167ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167be:	e03c      	b.n	801683a <UART_SetConfig+0x5a6>
 80167c0:	2380      	movs	r3, #128	; 0x80
 80167c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167c6:	e038      	b.n	801683a <UART_SetConfig+0x5a6>
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4a5b      	ldr	r2, [pc, #364]	; (801693c <UART_SetConfig+0x6a8>)
 80167ce:	4293      	cmp	r3, r2
 80167d0:	d130      	bne.n	8016834 <UART_SetConfig+0x5a0>
 80167d2:	4b57      	ldr	r3, [pc, #348]	; (8016930 <UART_SetConfig+0x69c>)
 80167d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167d6:	f003 0307 	and.w	r3, r3, #7
 80167da:	2b05      	cmp	r3, #5
 80167dc:	d826      	bhi.n	801682c <UART_SetConfig+0x598>
 80167de:	a201      	add	r2, pc, #4	; (adr r2, 80167e4 <UART_SetConfig+0x550>)
 80167e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167e4:	080167fd 	.word	0x080167fd
 80167e8:	08016805 	.word	0x08016805
 80167ec:	0801680d 	.word	0x0801680d
 80167f0:	08016815 	.word	0x08016815
 80167f4:	0801681d 	.word	0x0801681d
 80167f8:	08016825 	.word	0x08016825
 80167fc:	2302      	movs	r3, #2
 80167fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016802:	e01a      	b.n	801683a <UART_SetConfig+0x5a6>
 8016804:	2304      	movs	r3, #4
 8016806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801680a:	e016      	b.n	801683a <UART_SetConfig+0x5a6>
 801680c:	2308      	movs	r3, #8
 801680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016812:	e012      	b.n	801683a <UART_SetConfig+0x5a6>
 8016814:	2310      	movs	r3, #16
 8016816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801681a:	e00e      	b.n	801683a <UART_SetConfig+0x5a6>
 801681c:	2320      	movs	r3, #32
 801681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016822:	e00a      	b.n	801683a <UART_SetConfig+0x5a6>
 8016824:	2340      	movs	r3, #64	; 0x40
 8016826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801682a:	e006      	b.n	801683a <UART_SetConfig+0x5a6>
 801682c:	2380      	movs	r3, #128	; 0x80
 801682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016832:	e002      	b.n	801683a <UART_SetConfig+0x5a6>
 8016834:	2380      	movs	r3, #128	; 0x80
 8016836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4a3f      	ldr	r2, [pc, #252]	; (801693c <UART_SetConfig+0x6a8>)
 8016840:	4293      	cmp	r3, r2
 8016842:	f040 80f8 	bne.w	8016a36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016846:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801684a:	2b20      	cmp	r3, #32
 801684c:	dc46      	bgt.n	80168dc <UART_SetConfig+0x648>
 801684e:	2b02      	cmp	r3, #2
 8016850:	f2c0 8082 	blt.w	8016958 <UART_SetConfig+0x6c4>
 8016854:	3b02      	subs	r3, #2
 8016856:	2b1e      	cmp	r3, #30
 8016858:	d87e      	bhi.n	8016958 <UART_SetConfig+0x6c4>
 801685a:	a201      	add	r2, pc, #4	; (adr r2, 8016860 <UART_SetConfig+0x5cc>)
 801685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016860:	080168e3 	.word	0x080168e3
 8016864:	08016959 	.word	0x08016959
 8016868:	080168eb 	.word	0x080168eb
 801686c:	08016959 	.word	0x08016959
 8016870:	08016959 	.word	0x08016959
 8016874:	08016959 	.word	0x08016959
 8016878:	080168fb 	.word	0x080168fb
 801687c:	08016959 	.word	0x08016959
 8016880:	08016959 	.word	0x08016959
 8016884:	08016959 	.word	0x08016959
 8016888:	08016959 	.word	0x08016959
 801688c:	08016959 	.word	0x08016959
 8016890:	08016959 	.word	0x08016959
 8016894:	08016959 	.word	0x08016959
 8016898:	0801690b 	.word	0x0801690b
 801689c:	08016959 	.word	0x08016959
 80168a0:	08016959 	.word	0x08016959
 80168a4:	08016959 	.word	0x08016959
 80168a8:	08016959 	.word	0x08016959
 80168ac:	08016959 	.word	0x08016959
 80168b0:	08016959 	.word	0x08016959
 80168b4:	08016959 	.word	0x08016959
 80168b8:	08016959 	.word	0x08016959
 80168bc:	08016959 	.word	0x08016959
 80168c0:	08016959 	.word	0x08016959
 80168c4:	08016959 	.word	0x08016959
 80168c8:	08016959 	.word	0x08016959
 80168cc:	08016959 	.word	0x08016959
 80168d0:	08016959 	.word	0x08016959
 80168d4:	08016959 	.word	0x08016959
 80168d8:	0801694b 	.word	0x0801694b
 80168dc:	2b40      	cmp	r3, #64	; 0x40
 80168de:	d037      	beq.n	8016950 <UART_SetConfig+0x6bc>
 80168e0:	e03a      	b.n	8016958 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80168e2:	f7fc fb49 	bl	8012f78 <HAL_RCCEx_GetD3PCLK1Freq>
 80168e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80168e8:	e03c      	b.n	8016964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80168ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fc fb58 	bl	8012fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80168f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80168f8:	e034      	b.n	8016964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80168fa:	f107 0318 	add.w	r3, r7, #24
 80168fe:	4618      	mov	r0, r3
 8016900:	f7fc fca4 	bl	801324c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016908:	e02c      	b.n	8016964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801690a:	4b09      	ldr	r3, [pc, #36]	; (8016930 <UART_SetConfig+0x69c>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	f003 0320 	and.w	r3, r3, #32
 8016912:	2b00      	cmp	r3, #0
 8016914:	d016      	beq.n	8016944 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016916:	4b06      	ldr	r3, [pc, #24]	; (8016930 <UART_SetConfig+0x69c>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	08db      	lsrs	r3, r3, #3
 801691c:	f003 0303 	and.w	r3, r3, #3
 8016920:	4a07      	ldr	r2, [pc, #28]	; (8016940 <UART_SetConfig+0x6ac>)
 8016922:	fa22 f303 	lsr.w	r3, r2, r3
 8016926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016928:	e01c      	b.n	8016964 <UART_SetConfig+0x6d0>
 801692a:	bf00      	nop
 801692c:	40011400 	.word	0x40011400
 8016930:	58024400 	.word	0x58024400
 8016934:	40007800 	.word	0x40007800
 8016938:	40007c00 	.word	0x40007c00
 801693c:	58000c00 	.word	0x58000c00
 8016940:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8016944:	4b9d      	ldr	r3, [pc, #628]	; (8016bbc <UART_SetConfig+0x928>)
 8016946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016948:	e00c      	b.n	8016964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801694a:	4b9d      	ldr	r3, [pc, #628]	; (8016bc0 <UART_SetConfig+0x92c>)
 801694c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801694e:	e009      	b.n	8016964 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016956:	e005      	b.n	8016964 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8016958:	2300      	movs	r3, #0
 801695a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801695c:	2301      	movs	r3, #1
 801695e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016962:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016966:	2b00      	cmp	r3, #0
 8016968:	f000 81de 	beq.w	8016d28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016970:	4a94      	ldr	r2, [pc, #592]	; (8016bc4 <UART_SetConfig+0x930>)
 8016972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016976:	461a      	mov	r2, r3
 8016978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801697a:	fbb3 f3f2 	udiv	r3, r3, r2
 801697e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	685a      	ldr	r2, [r3, #4]
 8016984:	4613      	mov	r3, r2
 8016986:	005b      	lsls	r3, r3, #1
 8016988:	4413      	add	r3, r2
 801698a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801698c:	429a      	cmp	r2, r3
 801698e:	d305      	bcc.n	801699c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016990:	697b      	ldr	r3, [r7, #20]
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016998:	429a      	cmp	r2, r3
 801699a:	d903      	bls.n	80169a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801699c:	2301      	movs	r3, #1
 801699e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80169a2:	e1c1      	b.n	8016d28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80169a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169a6:	2200      	movs	r2, #0
 80169a8:	60bb      	str	r3, [r7, #8]
 80169aa:	60fa      	str	r2, [r7, #12]
 80169ac:	697b      	ldr	r3, [r7, #20]
 80169ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b0:	4a84      	ldr	r2, [pc, #528]	; (8016bc4 <UART_SetConfig+0x930>)
 80169b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	2200      	movs	r2, #0
 80169ba:	603b      	str	r3, [r7, #0]
 80169bc:	607a      	str	r2, [r7, #4]
 80169be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80169c6:	f7e9 fcdb 	bl	8000380 <__aeabi_uldivmod>
 80169ca:	4602      	mov	r2, r0
 80169cc:	460b      	mov	r3, r1
 80169ce:	4610      	mov	r0, r2
 80169d0:	4619      	mov	r1, r3
 80169d2:	f04f 0200 	mov.w	r2, #0
 80169d6:	f04f 0300 	mov.w	r3, #0
 80169da:	020b      	lsls	r3, r1, #8
 80169dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80169e0:	0202      	lsls	r2, r0, #8
 80169e2:	6979      	ldr	r1, [r7, #20]
 80169e4:	6849      	ldr	r1, [r1, #4]
 80169e6:	0849      	lsrs	r1, r1, #1
 80169e8:	2000      	movs	r0, #0
 80169ea:	460c      	mov	r4, r1
 80169ec:	4605      	mov	r5, r0
 80169ee:	eb12 0804 	adds.w	r8, r2, r4
 80169f2:	eb43 0905 	adc.w	r9, r3, r5
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	2200      	movs	r2, #0
 80169fc:	469a      	mov	sl, r3
 80169fe:	4693      	mov	fp, r2
 8016a00:	4652      	mov	r2, sl
 8016a02:	465b      	mov	r3, fp
 8016a04:	4640      	mov	r0, r8
 8016a06:	4649      	mov	r1, r9
 8016a08:	f7e9 fcba 	bl	8000380 <__aeabi_uldivmod>
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	460b      	mov	r3, r1
 8016a10:	4613      	mov	r3, r2
 8016a12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016a1a:	d308      	bcc.n	8016a2e <UART_SetConfig+0x79a>
 8016a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016a22:	d204      	bcs.n	8016a2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a2a:	60da      	str	r2, [r3, #12]
 8016a2c:	e17c      	b.n	8016d28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8016a2e:	2301      	movs	r3, #1
 8016a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016a34:	e178      	b.n	8016d28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	69db      	ldr	r3, [r3, #28]
 8016a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016a3e:	f040 80c5 	bne.w	8016bcc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8016a42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016a46:	2b20      	cmp	r3, #32
 8016a48:	dc48      	bgt.n	8016adc <UART_SetConfig+0x848>
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	db7b      	blt.n	8016b46 <UART_SetConfig+0x8b2>
 8016a4e:	2b20      	cmp	r3, #32
 8016a50:	d879      	bhi.n	8016b46 <UART_SetConfig+0x8b2>
 8016a52:	a201      	add	r2, pc, #4	; (adr r2, 8016a58 <UART_SetConfig+0x7c4>)
 8016a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a58:	08016ae3 	.word	0x08016ae3
 8016a5c:	08016aeb 	.word	0x08016aeb
 8016a60:	08016b47 	.word	0x08016b47
 8016a64:	08016b47 	.word	0x08016b47
 8016a68:	08016af3 	.word	0x08016af3
 8016a6c:	08016b47 	.word	0x08016b47
 8016a70:	08016b47 	.word	0x08016b47
 8016a74:	08016b47 	.word	0x08016b47
 8016a78:	08016b03 	.word	0x08016b03
 8016a7c:	08016b47 	.word	0x08016b47
 8016a80:	08016b47 	.word	0x08016b47
 8016a84:	08016b47 	.word	0x08016b47
 8016a88:	08016b47 	.word	0x08016b47
 8016a8c:	08016b47 	.word	0x08016b47
 8016a90:	08016b47 	.word	0x08016b47
 8016a94:	08016b47 	.word	0x08016b47
 8016a98:	08016b13 	.word	0x08016b13
 8016a9c:	08016b47 	.word	0x08016b47
 8016aa0:	08016b47 	.word	0x08016b47
 8016aa4:	08016b47 	.word	0x08016b47
 8016aa8:	08016b47 	.word	0x08016b47
 8016aac:	08016b47 	.word	0x08016b47
 8016ab0:	08016b47 	.word	0x08016b47
 8016ab4:	08016b47 	.word	0x08016b47
 8016ab8:	08016b47 	.word	0x08016b47
 8016abc:	08016b47 	.word	0x08016b47
 8016ac0:	08016b47 	.word	0x08016b47
 8016ac4:	08016b47 	.word	0x08016b47
 8016ac8:	08016b47 	.word	0x08016b47
 8016acc:	08016b47 	.word	0x08016b47
 8016ad0:	08016b47 	.word	0x08016b47
 8016ad4:	08016b47 	.word	0x08016b47
 8016ad8:	08016b39 	.word	0x08016b39
 8016adc:	2b40      	cmp	r3, #64	; 0x40
 8016ade:	d02e      	beq.n	8016b3e <UART_SetConfig+0x8aa>
 8016ae0:	e031      	b.n	8016b46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016ae2:	f7fb fad7 	bl	8012094 <HAL_RCC_GetPCLK1Freq>
 8016ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016ae8:	e033      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016aea:	f7fb fae9 	bl	80120c0 <HAL_RCC_GetPCLK2Freq>
 8016aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016af0:	e02f      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fc fa54 	bl	8012fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b00:	e027      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016b02:	f107 0318 	add.w	r3, r7, #24
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fc fba0 	bl	801324c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b10:	e01f      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016b12:	4b2d      	ldr	r3, [pc, #180]	; (8016bc8 <UART_SetConfig+0x934>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	f003 0320 	and.w	r3, r3, #32
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d009      	beq.n	8016b32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016b1e:	4b2a      	ldr	r3, [pc, #168]	; (8016bc8 <UART_SetConfig+0x934>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	08db      	lsrs	r3, r3, #3
 8016b24:	f003 0303 	and.w	r3, r3, #3
 8016b28:	4a24      	ldr	r2, [pc, #144]	; (8016bbc <UART_SetConfig+0x928>)
 8016b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8016b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016b30:	e00f      	b.n	8016b52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8016b32:	4b22      	ldr	r3, [pc, #136]	; (8016bbc <UART_SetConfig+0x928>)
 8016b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b36:	e00c      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016b38:	4b21      	ldr	r3, [pc, #132]	; (8016bc0 <UART_SetConfig+0x92c>)
 8016b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b3c:	e009      	b.n	8016b52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b44:	e005      	b.n	8016b52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8016b46:	2300      	movs	r3, #0
 8016b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	f000 80e7 	beq.w	8016d28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b5e:	4a19      	ldr	r2, [pc, #100]	; (8016bc4 <UART_SetConfig+0x930>)
 8016b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b64:	461a      	mov	r2, r3
 8016b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b6c:	005a      	lsls	r2, r3, #1
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	085b      	lsrs	r3, r3, #1
 8016b74:	441a      	add	r2, r3
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	685b      	ldr	r3, [r3, #4]
 8016b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b82:	2b0f      	cmp	r3, #15
 8016b84:	d916      	bls.n	8016bb4 <UART_SetConfig+0x920>
 8016b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b8c:	d212      	bcs.n	8016bb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b90:	b29b      	uxth	r3, r3
 8016b92:	f023 030f 	bic.w	r3, r3, #15
 8016b96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b9a:	085b      	lsrs	r3, r3, #1
 8016b9c:	b29b      	uxth	r3, r3
 8016b9e:	f003 0307 	and.w	r3, r3, #7
 8016ba2:	b29a      	uxth	r2, r3
 8016ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ba6:	4313      	orrs	r3, r2
 8016ba8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016bb0:	60da      	str	r2, [r3, #12]
 8016bb2:	e0b9      	b.n	8016d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016bba:	e0b5      	b.n	8016d28 <UART_SetConfig+0xa94>
 8016bbc:	03d09000 	.word	0x03d09000
 8016bc0:	003d0900 	.word	0x003d0900
 8016bc4:	08037ad0 	.word	0x08037ad0
 8016bc8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8016bcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016bd0:	2b20      	cmp	r3, #32
 8016bd2:	dc49      	bgt.n	8016c68 <UART_SetConfig+0x9d4>
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	db7c      	blt.n	8016cd2 <UART_SetConfig+0xa3e>
 8016bd8:	2b20      	cmp	r3, #32
 8016bda:	d87a      	bhi.n	8016cd2 <UART_SetConfig+0xa3e>
 8016bdc:	a201      	add	r2, pc, #4	; (adr r2, 8016be4 <UART_SetConfig+0x950>)
 8016bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016be2:	bf00      	nop
 8016be4:	08016c6f 	.word	0x08016c6f
 8016be8:	08016c77 	.word	0x08016c77
 8016bec:	08016cd3 	.word	0x08016cd3
 8016bf0:	08016cd3 	.word	0x08016cd3
 8016bf4:	08016c7f 	.word	0x08016c7f
 8016bf8:	08016cd3 	.word	0x08016cd3
 8016bfc:	08016cd3 	.word	0x08016cd3
 8016c00:	08016cd3 	.word	0x08016cd3
 8016c04:	08016c8f 	.word	0x08016c8f
 8016c08:	08016cd3 	.word	0x08016cd3
 8016c0c:	08016cd3 	.word	0x08016cd3
 8016c10:	08016cd3 	.word	0x08016cd3
 8016c14:	08016cd3 	.word	0x08016cd3
 8016c18:	08016cd3 	.word	0x08016cd3
 8016c1c:	08016cd3 	.word	0x08016cd3
 8016c20:	08016cd3 	.word	0x08016cd3
 8016c24:	08016c9f 	.word	0x08016c9f
 8016c28:	08016cd3 	.word	0x08016cd3
 8016c2c:	08016cd3 	.word	0x08016cd3
 8016c30:	08016cd3 	.word	0x08016cd3
 8016c34:	08016cd3 	.word	0x08016cd3
 8016c38:	08016cd3 	.word	0x08016cd3
 8016c3c:	08016cd3 	.word	0x08016cd3
 8016c40:	08016cd3 	.word	0x08016cd3
 8016c44:	08016cd3 	.word	0x08016cd3
 8016c48:	08016cd3 	.word	0x08016cd3
 8016c4c:	08016cd3 	.word	0x08016cd3
 8016c50:	08016cd3 	.word	0x08016cd3
 8016c54:	08016cd3 	.word	0x08016cd3
 8016c58:	08016cd3 	.word	0x08016cd3
 8016c5c:	08016cd3 	.word	0x08016cd3
 8016c60:	08016cd3 	.word	0x08016cd3
 8016c64:	08016cc5 	.word	0x08016cc5
 8016c68:	2b40      	cmp	r3, #64	; 0x40
 8016c6a:	d02e      	beq.n	8016cca <UART_SetConfig+0xa36>
 8016c6c:	e031      	b.n	8016cd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016c6e:	f7fb fa11 	bl	8012094 <HAL_RCC_GetPCLK1Freq>
 8016c72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016c74:	e033      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016c76:	f7fb fa23 	bl	80120c0 <HAL_RCC_GetPCLK2Freq>
 8016c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016c7c:	e02f      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7fc f98e 	bl	8012fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c8c:	e027      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016c8e:	f107 0318 	add.w	r3, r7, #24
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7fc fada 	bl	801324c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c9c:	e01f      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016c9e:	4b2d      	ldr	r3, [pc, #180]	; (8016d54 <UART_SetConfig+0xac0>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	f003 0320 	and.w	r3, r3, #32
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d009      	beq.n	8016cbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016caa:	4b2a      	ldr	r3, [pc, #168]	; (8016d54 <UART_SetConfig+0xac0>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	08db      	lsrs	r3, r3, #3
 8016cb0:	f003 0303 	and.w	r3, r3, #3
 8016cb4:	4a28      	ldr	r2, [pc, #160]	; (8016d58 <UART_SetConfig+0xac4>)
 8016cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8016cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016cbc:	e00f      	b.n	8016cde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8016cbe:	4b26      	ldr	r3, [pc, #152]	; (8016d58 <UART_SetConfig+0xac4>)
 8016cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016cc2:	e00c      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016cc4:	4b25      	ldr	r3, [pc, #148]	; (8016d5c <UART_SetConfig+0xac8>)
 8016cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016cc8:	e009      	b.n	8016cde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016cd0:	e005      	b.n	8016cde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8016cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d021      	beq.n	8016d28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce8:	4a1d      	ldr	r2, [pc, #116]	; (8016d60 <UART_SetConfig+0xacc>)
 8016cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	685b      	ldr	r3, [r3, #4]
 8016cfa:	085b      	lsrs	r3, r3, #1
 8016cfc:	441a      	add	r2, r3
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	685b      	ldr	r3, [r3, #4]
 8016d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0a:	2b0f      	cmp	r3, #15
 8016d0c:	d909      	bls.n	8016d22 <UART_SetConfig+0xa8e>
 8016d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d14:	d205      	bcs.n	8016d22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	60da      	str	r2, [r3, #12]
 8016d20:	e002      	b.n	8016d28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016d22:	2301      	movs	r3, #1
 8016d24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	2201      	movs	r2, #1
 8016d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	2201      	movs	r2, #1
 8016d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	2200      	movs	r2, #0
 8016d42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8016d44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3748      	adds	r7, #72	; 0x48
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016d52:	bf00      	nop
 8016d54:	58024400 	.word	0x58024400
 8016d58:	03d09000 	.word	0x03d09000
 8016d5c:	003d0900 	.word	0x003d0900
 8016d60:	08037ad0 	.word	0x08037ad0

08016d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016d64:	b480      	push	{r7}
 8016d66:	b083      	sub	sp, #12
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d70:	f003 0301 	and.w	r3, r3, #1
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d00a      	beq.n	8016d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	430a      	orrs	r2, r1
 8016d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d92:	f003 0302 	and.w	r3, r3, #2
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d00a      	beq.n	8016db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	430a      	orrs	r2, r1
 8016dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016db4:	f003 0304 	and.w	r3, r3, #4
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00a      	beq.n	8016dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	430a      	orrs	r2, r1
 8016dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dd6:	f003 0308 	and.w	r3, r3, #8
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d00a      	beq.n	8016df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	430a      	orrs	r2, r1
 8016df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016df8:	f003 0310 	and.w	r3, r3, #16
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d00a      	beq.n	8016e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	689b      	ldr	r3, [r3, #8]
 8016e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	430a      	orrs	r2, r1
 8016e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e1a:	f003 0320 	and.w	r3, r3, #32
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d00a      	beq.n	8016e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	689b      	ldr	r3, [r3, #8]
 8016e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	430a      	orrs	r2, r1
 8016e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d01a      	beq.n	8016e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	430a      	orrs	r2, r1
 8016e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016e62:	d10a      	bne.n	8016e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	430a      	orrs	r2, r1
 8016e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d00a      	beq.n	8016e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	430a      	orrs	r2, r1
 8016e9a:	605a      	str	r2, [r3, #4]
  }
}
 8016e9c:	bf00      	nop
 8016e9e:	370c      	adds	r7, #12
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea6:	4770      	bx	lr

08016ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b086      	sub	sp, #24
 8016eac:	af02      	add	r7, sp, #8
 8016eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016eb8:	f7f4 fe9e 	bl	800bbf8 <HAL_GetTick>
 8016ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	f003 0308 	and.w	r3, r3, #8
 8016ec8:	2b08      	cmp	r3, #8
 8016eca:	d10e      	bne.n	8016eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016ed0:	9300      	str	r3, [sp, #0]
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f000 f82f 	bl	8016f3e <UART_WaitOnFlagUntilTimeout>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d001      	beq.n	8016eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016ee6:	2303      	movs	r3, #3
 8016ee8:	e025      	b.n	8016f36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	f003 0304 	and.w	r3, r3, #4
 8016ef4:	2b04      	cmp	r3, #4
 8016ef6:	d10e      	bne.n	8016f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2200      	movs	r2, #0
 8016f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f000 f819 	bl	8016f3e <UART_WaitOnFlagUntilTimeout>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016f12:	2303      	movs	r3, #3
 8016f14:	e00f      	b.n	8016f36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2220      	movs	r2, #32
 8016f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2220      	movs	r2, #32
 8016f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016f34:	2300      	movs	r3, #0
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3710      	adds	r7, #16
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}

08016f3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016f3e:	b580      	push	{r7, lr}
 8016f40:	b09c      	sub	sp, #112	; 0x70
 8016f42:	af00      	add	r7, sp, #0
 8016f44:	60f8      	str	r0, [r7, #12]
 8016f46:	60b9      	str	r1, [r7, #8]
 8016f48:	603b      	str	r3, [r7, #0]
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f4e:	e0a9      	b.n	80170a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f56:	f000 80a5 	beq.w	80170a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016f5a:	f7f4 fe4d 	bl	800bbf8 <HAL_GetTick>
 8016f5e:	4602      	mov	r2, r0
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	1ad3      	subs	r3, r2, r3
 8016f64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d302      	bcc.n	8016f70 <UART_WaitOnFlagUntilTimeout+0x32>
 8016f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d140      	bne.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f78:	e853 3f00 	ldrex	r3, [r3]
 8016f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016f84:	667b      	str	r3, [r7, #100]	; 0x64
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016f90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016f96:	e841 2300 	strex	r3, r2, [r1]
 8016f9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1e6      	bne.n	8016f70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	3308      	adds	r3, #8
 8016fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fac:	e853 3f00 	ldrex	r3, [r3]
 8016fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fb4:	f023 0301 	bic.w	r3, r3, #1
 8016fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	3308      	adds	r3, #8
 8016fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016fc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8016fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fca:	e841 2300 	strex	r3, r2, [r1]
 8016fce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d1e5      	bne.n	8016fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	2220      	movs	r2, #32
 8016fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2220      	movs	r2, #32
 8016fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8016fee:	2303      	movs	r3, #3
 8016ff0:	e069      	b.n	80170c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f003 0304 	and.w	r3, r3, #4
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d051      	beq.n	80170a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	69db      	ldr	r3, [r3, #28]
 8017006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801700a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801700e:	d149      	bne.n	80170a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017018:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	e853 3f00 	ldrex	r3, [r3]
 8017026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801702e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	461a      	mov	r2, r3
 8017036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017038:	637b      	str	r3, [r7, #52]	; 0x34
 801703a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801703c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801703e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017040:	e841 2300 	strex	r3, r2, [r1]
 8017044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017048:	2b00      	cmp	r3, #0
 801704a:	d1e6      	bne.n	801701a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	3308      	adds	r3, #8
 8017052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	e853 3f00 	ldrex	r3, [r3]
 801705a:	613b      	str	r3, [r7, #16]
   return(result);
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	f023 0301 	bic.w	r3, r3, #1
 8017062:	66bb      	str	r3, [r7, #104]	; 0x68
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	3308      	adds	r3, #8
 801706a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801706c:	623a      	str	r2, [r7, #32]
 801706e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017070:	69f9      	ldr	r1, [r7, #28]
 8017072:	6a3a      	ldr	r2, [r7, #32]
 8017074:	e841 2300 	strex	r3, r2, [r1]
 8017078:	61bb      	str	r3, [r7, #24]
   return(result);
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1e5      	bne.n	801704c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2220      	movs	r2, #32
 8017084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2220      	movs	r2, #32
 801708c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	2220      	movs	r2, #32
 8017094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2200      	movs	r2, #0
 801709c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80170a0:	2303      	movs	r3, #3
 80170a2:	e010      	b.n	80170c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	69da      	ldr	r2, [r3, #28]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	4013      	ands	r3, r2
 80170ae:	68ba      	ldr	r2, [r7, #8]
 80170b0:	429a      	cmp	r2, r3
 80170b2:	bf0c      	ite	eq
 80170b4:	2301      	moveq	r3, #1
 80170b6:	2300      	movne	r3, #0
 80170b8:	b2db      	uxtb	r3, r3
 80170ba:	461a      	mov	r2, r3
 80170bc:	79fb      	ldrb	r3, [r7, #7]
 80170be:	429a      	cmp	r2, r3
 80170c0:	f43f af46 	beq.w	8016f50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80170c4:	2300      	movs	r3, #0
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3770      	adds	r7, #112	; 0x70
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
	...

080170d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b0a3      	sub	sp, #140	; 0x8c
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60f8      	str	r0, [r7, #12]
 80170d8:	60b9      	str	r1, [r7, #8]
 80170da:	4613      	mov	r3, r2
 80170dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	88fa      	ldrh	r2, [r7, #6]
 80170e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	88fa      	ldrh	r2, [r7, #6]
 80170f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2200      	movs	r2, #0
 80170f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	689b      	ldr	r3, [r3, #8]
 80170fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017102:	d10e      	bne.n	8017122 <UART_Start_Receive_IT+0x52>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	691b      	ldr	r3, [r3, #16]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d105      	bne.n	8017118 <UART_Start_Receive_IT+0x48>
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017116:	e02d      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	22ff      	movs	r2, #255	; 0xff
 801711c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017120:	e028      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	689b      	ldr	r3, [r3, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d10d      	bne.n	8017146 <UART_Start_Receive_IT+0x76>
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	691b      	ldr	r3, [r3, #16]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d104      	bne.n	801713c <UART_Start_Receive_IT+0x6c>
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	22ff      	movs	r2, #255	; 0xff
 8017136:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801713a:	e01b      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	227f      	movs	r2, #127	; 0x7f
 8017140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017144:	e016      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	689b      	ldr	r3, [r3, #8]
 801714a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801714e:	d10d      	bne.n	801716c <UART_Start_Receive_IT+0x9c>
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	691b      	ldr	r3, [r3, #16]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d104      	bne.n	8017162 <UART_Start_Receive_IT+0x92>
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	227f      	movs	r2, #127	; 0x7f
 801715c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017160:	e008      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	223f      	movs	r2, #63	; 0x3f
 8017166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801716a:	e003      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2200      	movs	r2, #0
 8017170:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2200      	movs	r2, #0
 8017178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2222      	movs	r2, #34	; 0x22
 8017180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	3308      	adds	r3, #8
 801718a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801718c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801718e:	e853 3f00 	ldrex	r3, [r3]
 8017192:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017196:	f043 0301 	orr.w	r3, r3, #1
 801719a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	3308      	adds	r3, #8
 80171a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80171a8:	673a      	str	r2, [r7, #112]	; 0x70
 80171aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80171ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80171b0:	e841 2300 	strex	r3, r2, [r1]
 80171b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80171b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d1e3      	bne.n	8017184 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80171c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80171c4:	d153      	bne.n	801726e <UART_Start_Receive_IT+0x19e>
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80171cc:	88fa      	ldrh	r2, [r7, #6]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d34d      	bcc.n	801726e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80171da:	d107      	bne.n	80171ec <UART_Start_Receive_IT+0x11c>
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	691b      	ldr	r3, [r3, #16]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d103      	bne.n	80171ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	4a4b      	ldr	r2, [pc, #300]	; (8017314 <UART_Start_Receive_IT+0x244>)
 80171e8:	671a      	str	r2, [r3, #112]	; 0x70
 80171ea:	e002      	b.n	80171f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	4a4a      	ldr	r2, [pc, #296]	; (8017318 <UART_Start_Receive_IT+0x248>)
 80171f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2200      	movs	r2, #0
 80171f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	691b      	ldr	r3, [r3, #16]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d01a      	beq.n	8017238 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801720a:	e853 3f00 	ldrex	r3, [r3]
 801720e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	461a      	mov	r2, r3
 8017220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017226:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017228:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801722a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801722c:	e841 2300 	strex	r3, r2, [r1]
 8017230:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1e4      	bne.n	8017202 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	3308      	adds	r3, #8
 801723e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017242:	e853 3f00 	ldrex	r3, [r3]
 8017246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801724a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801724e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	3308      	adds	r3, #8
 8017256:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017258:	64ba      	str	r2, [r7, #72]	; 0x48
 801725a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801725c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801725e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017260:	e841 2300 	strex	r3, r2, [r1]
 8017264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017268:	2b00      	cmp	r3, #0
 801726a:	d1e5      	bne.n	8017238 <UART_Start_Receive_IT+0x168>
 801726c:	e04a      	b.n	8017304 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	689b      	ldr	r3, [r3, #8]
 8017272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017276:	d107      	bne.n	8017288 <UART_Start_Receive_IT+0x1b8>
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	691b      	ldr	r3, [r3, #16]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d103      	bne.n	8017288 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4a26      	ldr	r2, [pc, #152]	; (801731c <UART_Start_Receive_IT+0x24c>)
 8017284:	671a      	str	r2, [r3, #112]	; 0x70
 8017286:	e002      	b.n	801728e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	4a25      	ldr	r2, [pc, #148]	; (8017320 <UART_Start_Receive_IT+0x250>)
 801728c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2200      	movs	r2, #0
 8017292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	691b      	ldr	r3, [r3, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d019      	beq.n	80172d2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a6:	e853 3f00 	ldrex	r3, [r3]
 80172aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80172ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80172b2:	677b      	str	r3, [r7, #116]	; 0x74
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	461a      	mov	r2, r3
 80172ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80172bc:	637b      	str	r3, [r7, #52]	; 0x34
 80172be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80172c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172c4:	e841 2300 	strex	r3, r2, [r1]
 80172c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80172ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d1e6      	bne.n	801729e <UART_Start_Receive_IT+0x1ce>
 80172d0:	e018      	b.n	8017304 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	e853 3f00 	ldrex	r3, [r3]
 80172de:	613b      	str	r3, [r7, #16]
   return(result);
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	f043 0320 	orr.w	r3, r3, #32
 80172e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	461a      	mov	r2, r3
 80172ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80172f0:	623b      	str	r3, [r7, #32]
 80172f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172f4:	69f9      	ldr	r1, [r7, #28]
 80172f6:	6a3a      	ldr	r2, [r7, #32]
 80172f8:	e841 2300 	strex	r3, r2, [r1]
 80172fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80172fe:	69bb      	ldr	r3, [r7, #24]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d1e6      	bne.n	80172d2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8017304:	2300      	movs	r3, #0
}
 8017306:	4618      	mov	r0, r3
 8017308:	378c      	adds	r7, #140	; 0x8c
 801730a:	46bd      	mov	sp, r7
 801730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017310:	4770      	bx	lr
 8017312:	bf00      	nop
 8017314:	08017d71 	.word	0x08017d71
 8017318:	08017a79 	.word	0x08017a79
 801731c:	08017917 	.word	0x08017917
 8017320:	080177b7 	.word	0x080177b7

08017324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017324:	b480      	push	{r7}
 8017326:	b095      	sub	sp, #84	; 0x54
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017334:	e853 3f00 	ldrex	r3, [r3]
 8017338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801734a:	643b      	str	r3, [r7, #64]	; 0x40
 801734c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801734e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017352:	e841 2300 	strex	r3, r2, [r1]
 8017356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801735a:	2b00      	cmp	r3, #0
 801735c:	d1e6      	bne.n	801732c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	3308      	adds	r3, #8
 8017364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017366:	6a3b      	ldr	r3, [r7, #32]
 8017368:	e853 3f00 	ldrex	r3, [r3]
 801736c:	61fb      	str	r3, [r7, #28]
   return(result);
 801736e:	69fa      	ldr	r2, [r7, #28]
 8017370:	4b1e      	ldr	r3, [pc, #120]	; (80173ec <UART_EndRxTransfer+0xc8>)
 8017372:	4013      	ands	r3, r2
 8017374:	64bb      	str	r3, [r7, #72]	; 0x48
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	3308      	adds	r3, #8
 801737c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801737e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017386:	e841 2300 	strex	r3, r2, [r1]
 801738a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738e:	2b00      	cmp	r3, #0
 8017390:	d1e5      	bne.n	801735e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017396:	2b01      	cmp	r3, #1
 8017398:	d118      	bne.n	80173cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	e853 3f00 	ldrex	r3, [r3]
 80173a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	f023 0310 	bic.w	r3, r3, #16
 80173ae:	647b      	str	r3, [r7, #68]	; 0x44
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	461a      	mov	r2, r3
 80173b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173b8:	61bb      	str	r3, [r7, #24]
 80173ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173bc:	6979      	ldr	r1, [r7, #20]
 80173be:	69ba      	ldr	r2, [r7, #24]
 80173c0:	e841 2300 	strex	r3, r2, [r1]
 80173c4:	613b      	str	r3, [r7, #16]
   return(result);
 80173c6:	693b      	ldr	r3, [r7, #16]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d1e6      	bne.n	801739a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2220      	movs	r2, #32
 80173d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2200      	movs	r2, #0
 80173d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2200      	movs	r2, #0
 80173de:	671a      	str	r2, [r3, #112]	; 0x70
}
 80173e0:	bf00      	nop
 80173e2:	3754      	adds	r7, #84	; 0x54
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr
 80173ec:	effffffe 	.word	0xeffffffe

080173f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	2200      	movs	r2, #0
 8017402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2200      	movs	r2, #0
 801740a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f7fe ff2a 	bl	8016268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017414:	bf00      	nop
 8017416:	3710      	adds	r7, #16
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801741c:	b480      	push	{r7}
 801741e:	b08f      	sub	sp, #60	; 0x3c
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801742a:	2b21      	cmp	r3, #33	; 0x21
 801742c:	d14c      	bne.n	80174c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017434:	b29b      	uxth	r3, r3
 8017436:	2b00      	cmp	r3, #0
 8017438:	d132      	bne.n	80174a0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017440:	6a3b      	ldr	r3, [r7, #32]
 8017442:	e853 3f00 	ldrex	r3, [r3]
 8017446:	61fb      	str	r3, [r7, #28]
   return(result);
 8017448:	69fb      	ldr	r3, [r7, #28]
 801744a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801744e:	637b      	str	r3, [r7, #52]	; 0x34
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	461a      	mov	r2, r3
 8017456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801745a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801745c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801745e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017460:	e841 2300 	strex	r3, r2, [r1]
 8017464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017468:	2b00      	cmp	r3, #0
 801746a:	d1e6      	bne.n	801743a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	e853 3f00 	ldrex	r3, [r3]
 8017478:	60bb      	str	r3, [r7, #8]
   return(result);
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017480:	633b      	str	r3, [r7, #48]	; 0x30
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	461a      	mov	r2, r3
 8017488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748a:	61bb      	str	r3, [r7, #24]
 801748c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801748e:	6979      	ldr	r1, [r7, #20]
 8017490:	69ba      	ldr	r2, [r7, #24]
 8017492:	e841 2300 	strex	r3, r2, [r1]
 8017496:	613b      	str	r3, [r7, #16]
   return(result);
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d1e6      	bne.n	801746c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801749e:	e013      	b.n	80174c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174a4:	781a      	ldrb	r2, [r3, #0]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174b0:	1c5a      	adds	r2, r3, #1
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80174bc:	b29b      	uxth	r3, r3
 80174be:	3b01      	subs	r3, #1
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80174c8:	bf00      	nop
 80174ca:	373c      	adds	r7, #60	; 0x3c
 80174cc:	46bd      	mov	sp, r7
 80174ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d2:	4770      	bx	lr

080174d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80174d4:	b480      	push	{r7}
 80174d6:	b091      	sub	sp, #68	; 0x44
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80174e2:	2b21      	cmp	r3, #33	; 0x21
 80174e4:	d151      	bne.n	801758a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d132      	bne.n	8017558 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174fa:	e853 3f00 	ldrex	r3, [r3]
 80174fe:	623b      	str	r3, [r7, #32]
   return(result);
 8017500:	6a3b      	ldr	r3, [r7, #32]
 8017502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017506:	63bb      	str	r3, [r7, #56]	; 0x38
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	461a      	mov	r2, r3
 801750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017510:	633b      	str	r3, [r7, #48]	; 0x30
 8017512:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017518:	e841 2300 	strex	r3, r2, [r1]
 801751c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017520:	2b00      	cmp	r3, #0
 8017522:	d1e6      	bne.n	80174f2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	e853 3f00 	ldrex	r3, [r3]
 8017530:	60fb      	str	r3, [r7, #12]
   return(result);
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017538:	637b      	str	r3, [r7, #52]	; 0x34
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	461a      	mov	r2, r3
 8017540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017542:	61fb      	str	r3, [r7, #28]
 8017544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017546:	69b9      	ldr	r1, [r7, #24]
 8017548:	69fa      	ldr	r2, [r7, #28]
 801754a:	e841 2300 	strex	r3, r2, [r1]
 801754e:	617b      	str	r3, [r7, #20]
   return(result);
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d1e6      	bne.n	8017524 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8017556:	e018      	b.n	801758a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801755c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017560:	881b      	ldrh	r3, [r3, #0]
 8017562:	461a      	mov	r2, r3
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801756c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017572:	1c9a      	adds	r2, r3, #2
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801757e:	b29b      	uxth	r3, r3
 8017580:	3b01      	subs	r3, #1
 8017582:	b29a      	uxth	r2, r3
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801758a:	bf00      	nop
 801758c:	3744      	adds	r7, #68	; 0x44
 801758e:	46bd      	mov	sp, r7
 8017590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017594:	4770      	bx	lr

08017596 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017596:	b480      	push	{r7}
 8017598:	b091      	sub	sp, #68	; 0x44
 801759a:	af00      	add	r7, sp, #0
 801759c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80175a4:	2b21      	cmp	r3, #33	; 0x21
 80175a6:	d160      	bne.n	801766a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80175ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80175b0:	e057      	b.n	8017662 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80175b8:	b29b      	uxth	r3, r3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d133      	bne.n	8017626 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	3308      	adds	r3, #8
 80175c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	e853 3f00 	ldrex	r3, [r3]
 80175cc:	623b      	str	r3, [r7, #32]
   return(result);
 80175ce:	6a3b      	ldr	r3, [r7, #32]
 80175d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80175d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	3308      	adds	r3, #8
 80175dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80175de:	633a      	str	r2, [r7, #48]	; 0x30
 80175e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175e6:	e841 2300 	strex	r3, r2, [r1]
 80175ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80175ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d1e5      	bne.n	80175be <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	e853 3f00 	ldrex	r3, [r3]
 80175fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017606:	637b      	str	r3, [r7, #52]	; 0x34
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	461a      	mov	r2, r3
 801760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017610:	61fb      	str	r3, [r7, #28]
 8017612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017614:	69b9      	ldr	r1, [r7, #24]
 8017616:	69fa      	ldr	r2, [r7, #28]
 8017618:	e841 2300 	strex	r3, r2, [r1]
 801761c:	617b      	str	r3, [r7, #20]
   return(result);
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d1e6      	bne.n	80175f2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8017624:	e021      	b.n	801766a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	69db      	ldr	r3, [r3, #28]
 801762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017630:	2b00      	cmp	r3, #0
 8017632:	d013      	beq.n	801765c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017638:	781a      	ldrb	r2, [r3, #0]
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017644:	1c5a      	adds	r2, r3, #1
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017650:	b29b      	uxth	r3, r3
 8017652:	3b01      	subs	r3, #1
 8017654:	b29a      	uxth	r2, r3
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801765c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801765e:	3b01      	subs	r3, #1
 8017660:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017662:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017664:	2b00      	cmp	r3, #0
 8017666:	d1a4      	bne.n	80175b2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8017668:	e7ff      	b.n	801766a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801766a:	bf00      	nop
 801766c:	3744      	adds	r7, #68	; 0x44
 801766e:	46bd      	mov	sp, r7
 8017670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017674:	4770      	bx	lr

08017676 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017676:	b480      	push	{r7}
 8017678:	b091      	sub	sp, #68	; 0x44
 801767a:	af00      	add	r7, sp, #0
 801767c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017684:	2b21      	cmp	r3, #33	; 0x21
 8017686:	d165      	bne.n	8017754 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801768e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017690:	e05c      	b.n	801774c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017698:	b29b      	uxth	r3, r3
 801769a:	2b00      	cmp	r3, #0
 801769c:	d133      	bne.n	8017706 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	3308      	adds	r3, #8
 80176a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176a6:	6a3b      	ldr	r3, [r7, #32]
 80176a8:	e853 3f00 	ldrex	r3, [r3]
 80176ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80176ae:	69fb      	ldr	r3, [r7, #28]
 80176b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80176b4:	637b      	str	r3, [r7, #52]	; 0x34
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	3308      	adds	r3, #8
 80176bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80176be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80176c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176c6:	e841 2300 	strex	r3, r2, [r1]
 80176ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80176cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d1e5      	bne.n	801769e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	e853 3f00 	ldrex	r3, [r3]
 80176de:	60bb      	str	r3, [r7, #8]
   return(result);
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176e6:	633b      	str	r3, [r7, #48]	; 0x30
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	461a      	mov	r2, r3
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	61bb      	str	r3, [r7, #24]
 80176f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176f4:	6979      	ldr	r1, [r7, #20]
 80176f6:	69ba      	ldr	r2, [r7, #24]
 80176f8:	e841 2300 	strex	r3, r2, [r1]
 80176fc:	613b      	str	r3, [r7, #16]
   return(result);
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d1e6      	bne.n	80176d2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8017704:	e026      	b.n	8017754 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	69db      	ldr	r3, [r3, #28]
 801770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017710:	2b00      	cmp	r3, #0
 8017712:	d018      	beq.n	8017746 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017718:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	461a      	mov	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017728:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801772e:	1c9a      	adds	r2, r3, #2
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801773a:	b29b      	uxth	r3, r3
 801773c:	3b01      	subs	r3, #1
 801773e:	b29a      	uxth	r2, r3
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017746:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017748:	3b01      	subs	r3, #1
 801774a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801774c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801774e:	2b00      	cmp	r3, #0
 8017750:	d19f      	bne.n	8017692 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8017752:	e7ff      	b.n	8017754 <UART_TxISR_16BIT_FIFOEN+0xde>
 8017754:	bf00      	nop
 8017756:	3744      	adds	r7, #68	; 0x44
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b088      	sub	sp, #32
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	e853 3f00 	ldrex	r3, [r3]
 8017774:	60bb      	str	r3, [r7, #8]
   return(result);
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801777c:	61fb      	str	r3, [r7, #28]
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	461a      	mov	r2, r3
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	61bb      	str	r3, [r7, #24]
 8017788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801778a:	6979      	ldr	r1, [r7, #20]
 801778c:	69ba      	ldr	r2, [r7, #24]
 801778e:	e841 2300 	strex	r3, r2, [r1]
 8017792:	613b      	str	r3, [r7, #16]
   return(result);
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d1e6      	bne.n	8017768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2220      	movs	r2, #32
 801779e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2200      	movs	r2, #0
 80177a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f7f3 f95d 	bl	800aa68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80177ae:	bf00      	nop
 80177b0:	3720      	adds	r7, #32
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80177b6:	b580      	push	{r7, lr}
 80177b8:	b096      	sub	sp, #88	; 0x58
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80177c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80177ce:	2b22      	cmp	r3, #34	; 0x22
 80177d0:	f040 8095 	bne.w	80178fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80177de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80177e2:	b2d9      	uxtb	r1, r3
 80177e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80177e8:	b2da      	uxtb	r2, r3
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177ee:	400a      	ands	r2, r1
 80177f0:	b2d2      	uxtb	r2, r2
 80177f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177f8:	1c5a      	adds	r2, r3, #1
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017804:	b29b      	uxth	r3, r3
 8017806:	3b01      	subs	r3, #1
 8017808:	b29a      	uxth	r2, r3
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017816:	b29b      	uxth	r3, r3
 8017818:	2b00      	cmp	r3, #0
 801781a:	d178      	bne.n	801790e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017824:	e853 3f00 	ldrex	r3, [r3]
 8017828:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801782c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017830:	653b      	str	r3, [r7, #80]	; 0x50
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	461a      	mov	r2, r3
 8017838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801783a:	647b      	str	r3, [r7, #68]	; 0x44
 801783c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801783e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017842:	e841 2300 	strex	r3, r2, [r1]
 8017846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1e6      	bne.n	801781c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	3308      	adds	r3, #8
 8017854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017858:	e853 3f00 	ldrex	r3, [r3]
 801785c:	623b      	str	r3, [r7, #32]
   return(result);
 801785e:	6a3b      	ldr	r3, [r7, #32]
 8017860:	f023 0301 	bic.w	r3, r3, #1
 8017864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	3308      	adds	r3, #8
 801786c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801786e:	633a      	str	r2, [r7, #48]	; 0x30
 8017870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017876:	e841 2300 	strex	r3, r2, [r1]
 801787a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1e5      	bne.n	801784e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2220      	movs	r2, #32
 8017886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2200      	movs	r2, #0
 801788e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017894:	2b01      	cmp	r3, #1
 8017896:	d12e      	bne.n	80178f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2200      	movs	r2, #0
 801789c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	e853 3f00 	ldrex	r3, [r3]
 80178aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	f023 0310 	bic.w	r3, r3, #16
 80178b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	461a      	mov	r2, r3
 80178ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80178bc:	61fb      	str	r3, [r7, #28]
 80178be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178c0:	69b9      	ldr	r1, [r7, #24]
 80178c2:	69fa      	ldr	r2, [r7, #28]
 80178c4:	e841 2300 	strex	r3, r2, [r1]
 80178c8:	617b      	str	r3, [r7, #20]
   return(result);
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d1e6      	bne.n	801789e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	69db      	ldr	r3, [r3, #28]
 80178d6:	f003 0310 	and.w	r3, r3, #16
 80178da:	2b10      	cmp	r3, #16
 80178dc:	d103      	bne.n	80178e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2210      	movs	r2, #16
 80178e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80178ec:	4619      	mov	r1, r3
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7fe fcc4 	bl	801627c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80178f4:	e00b      	b.n	801790e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f7f3 f8a4 	bl	800aa44 <HAL_UART_RxCpltCallback>
}
 80178fc:	e007      	b.n	801790e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	699a      	ldr	r2, [r3, #24]
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f042 0208 	orr.w	r2, r2, #8
 801790c:	619a      	str	r2, [r3, #24]
}
 801790e:	bf00      	nop
 8017910:	3758      	adds	r7, #88	; 0x58
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}

08017916 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017916:	b580      	push	{r7, lr}
 8017918:	b096      	sub	sp, #88	; 0x58
 801791a:	af00      	add	r7, sp, #0
 801791c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801792e:	2b22      	cmp	r3, #34	; 0x22
 8017930:	f040 8095 	bne.w	8017a5e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017942:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8017944:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8017948:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801794c:	4013      	ands	r3, r2
 801794e:	b29a      	uxth	r2, r3
 8017950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017952:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017958:	1c9a      	adds	r2, r3, #2
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017964:	b29b      	uxth	r3, r3
 8017966:	3b01      	subs	r3, #1
 8017968:	b29a      	uxth	r2, r3
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017976:	b29b      	uxth	r3, r3
 8017978:	2b00      	cmp	r3, #0
 801797a:	d178      	bne.n	8017a6e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017984:	e853 3f00 	ldrex	r3, [r3]
 8017988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801798c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	461a      	mov	r2, r3
 8017998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801799a:	643b      	str	r3, [r7, #64]	; 0x40
 801799c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801799e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80179a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80179a2:	e841 2300 	strex	r3, r2, [r1]
 80179a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80179a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d1e6      	bne.n	801797c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	3308      	adds	r3, #8
 80179b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179b6:	6a3b      	ldr	r3, [r7, #32]
 80179b8:	e853 3f00 	ldrex	r3, [r3]
 80179bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80179be:	69fb      	ldr	r3, [r7, #28]
 80179c0:	f023 0301 	bic.w	r3, r3, #1
 80179c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	3308      	adds	r3, #8
 80179cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80179ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80179d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80179d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179d6:	e841 2300 	strex	r3, r2, [r1]
 80179da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80179dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d1e5      	bne.n	80179ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2220      	movs	r2, #32
 80179e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2200      	movs	r2, #0
 80179ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d12e      	bne.n	8017a56 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2200      	movs	r2, #0
 80179fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	e853 3f00 	ldrex	r3, [r3]
 8017a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	f023 0310 	bic.w	r3, r3, #16
 8017a12:	647b      	str	r3, [r7, #68]	; 0x44
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	461a      	mov	r2, r3
 8017a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a1c:	61bb      	str	r3, [r7, #24]
 8017a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a20:	6979      	ldr	r1, [r7, #20]
 8017a22:	69ba      	ldr	r2, [r7, #24]
 8017a24:	e841 2300 	strex	r3, r2, [r1]
 8017a28:	613b      	str	r3, [r7, #16]
   return(result);
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d1e6      	bne.n	80179fe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	69db      	ldr	r3, [r3, #28]
 8017a36:	f003 0310 	and.w	r3, r3, #16
 8017a3a:	2b10      	cmp	r3, #16
 8017a3c:	d103      	bne.n	8017a46 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2210      	movs	r2, #16
 8017a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	6878      	ldr	r0, [r7, #4]
 8017a50:	f7fe fc14 	bl	801627c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017a54:	e00b      	b.n	8017a6e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f7f2 fff4 	bl	800aa44 <HAL_UART_RxCpltCallback>
}
 8017a5c:	e007      	b.n	8017a6e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	699a      	ldr	r2, [r3, #24]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f042 0208 	orr.w	r2, r2, #8
 8017a6c:	619a      	str	r2, [r3, #24]
}
 8017a6e:	bf00      	nop
 8017a70:	3758      	adds	r7, #88	; 0x58
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
	...

08017a78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b0a6      	sub	sp, #152	; 0x98
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017a86:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	69db      	ldr	r3, [r3, #28]
 8017a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	689b      	ldr	r3, [r3, #8]
 8017aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017aae:	2b22      	cmp	r3, #34	; 0x22
 8017ab0:	f040 814d 	bne.w	8017d4e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017aba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017abe:	e0f4      	b.n	8017caa <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017aca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8017ace:	b2d9      	uxtb	r1, r3
 8017ad0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8017ad4:	b2da      	uxtb	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ada:	400a      	ands	r2, r1
 8017adc:	b2d2      	uxtb	r2, r2
 8017ade:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ae4:	1c5a      	adds	r2, r3, #1
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	3b01      	subs	r3, #1
 8017af4:	b29a      	uxth	r2, r3
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	69db      	ldr	r3, [r3, #28]
 8017b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b0a:	f003 0307 	and.w	r3, r3, #7
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d053      	beq.n	8017bba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b16:	f003 0301 	and.w	r3, r3, #1
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d011      	beq.n	8017b42 <UART_RxISR_8BIT_FIFOEN+0xca>
 8017b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d00b      	beq.n	8017b42 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	2201      	movs	r2, #1
 8017b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b38:	f043 0201 	orr.w	r2, r3, #1
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b46:	f003 0302 	and.w	r3, r3, #2
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d011      	beq.n	8017b72 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8017b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017b52:	f003 0301 	and.w	r3, r3, #1
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d00b      	beq.n	8017b72 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	2202      	movs	r2, #2
 8017b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b68:	f043 0204 	orr.w	r2, r3, #4
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017b76:	f003 0304 	and.w	r3, r3, #4
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d011      	beq.n	8017ba2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8017b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017b82:	f003 0301 	and.w	r3, r3, #1
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d00b      	beq.n	8017ba2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2204      	movs	r2, #4
 8017b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b98:	f043 0202 	orr.w	r2, r3, #2
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d006      	beq.n	8017bba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f7fe fb5b 	bl	8016268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d171      	bne.n	8017caa <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017bce:	e853 3f00 	ldrex	r3, [r3]
 8017bd2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8017bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	461a      	mov	r2, r3
 8017be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8017bea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017bee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017bf0:	e841 2300 	strex	r3, r2, [r1]
 8017bf4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1e4      	bne.n	8017bc6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	3308      	adds	r3, #8
 8017c02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c06:	e853 3f00 	ldrex	r3, [r3]
 8017c0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c0e:	4b56      	ldr	r3, [pc, #344]	; (8017d68 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8017c10:	4013      	ands	r3, r2
 8017c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	3308      	adds	r3, #8
 8017c1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017c1c:	657a      	str	r2, [r7, #84]	; 0x54
 8017c1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c24:	e841 2300 	strex	r3, r2, [r1]
 8017c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d1e5      	bne.n	8017bfc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	2220      	movs	r2, #32
 8017c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c42:	2b01      	cmp	r3, #1
 8017c44:	d12e      	bne.n	8017ca4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2200      	movs	r2, #0
 8017c4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c54:	e853 3f00 	ldrex	r3, [r3]
 8017c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c5c:	f023 0310 	bic.w	r3, r3, #16
 8017c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	461a      	mov	r2, r3
 8017c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8017c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c72:	e841 2300 	strex	r3, r2, [r1]
 8017c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d1e6      	bne.n	8017c4c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	69db      	ldr	r3, [r3, #28]
 8017c84:	f003 0310 	and.w	r3, r3, #16
 8017c88:	2b10      	cmp	r3, #16
 8017c8a:	d103      	bne.n	8017c94 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2210      	movs	r2, #16
 8017c92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f7fe faed 	bl	801627c <HAL_UARTEx_RxEventCallback>
 8017ca2:	e002      	b.n	8017caa <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f7f2 fecd 	bl	800aa44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d006      	beq.n	8017cc0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8017cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017cb6:	f003 0320 	and.w	r3, r3, #32
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	f47f af00 	bne.w	8017ac0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017cc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017cca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d045      	beq.n	8017d5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017cd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d23e      	bcs.n	8017d5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	3308      	adds	r3, #8
 8017ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ce8:	6a3b      	ldr	r3, [r7, #32]
 8017cea:	e853 3f00 	ldrex	r3, [r3]
 8017cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	3308      	adds	r3, #8
 8017cfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017d00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d08:	e841 2300 	strex	r3, r2, [r1]
 8017d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1e5      	bne.n	8017ce0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	4a15      	ldr	r2, [pc, #84]	; (8017d6c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8017d18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	e853 3f00 	ldrex	r3, [r3]
 8017d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	f043 0320 	orr.w	r3, r3, #32
 8017d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	461a      	mov	r2, r3
 8017d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d38:	61bb      	str	r3, [r7, #24]
 8017d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d3c:	6979      	ldr	r1, [r7, #20]
 8017d3e:	69ba      	ldr	r2, [r7, #24]
 8017d40:	e841 2300 	strex	r3, r2, [r1]
 8017d44:	613b      	str	r3, [r7, #16]
   return(result);
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d1e6      	bne.n	8017d1a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017d4c:	e007      	b.n	8017d5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	699a      	ldr	r2, [r3, #24]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f042 0208 	orr.w	r2, r2, #8
 8017d5c:	619a      	str	r2, [r3, #24]
}
 8017d5e:	bf00      	nop
 8017d60:	3798      	adds	r7, #152	; 0x98
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	effffffe 	.word	0xeffffffe
 8017d6c:	080177b7 	.word	0x080177b7

08017d70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b0a8      	sub	sp, #160	; 0xa0
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d7e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	69db      	ldr	r3, [r3, #28]
 8017d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	689b      	ldr	r3, [r3, #8]
 8017d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017da6:	2b22      	cmp	r3, #34	; 0x22
 8017da8:	f040 8151 	bne.w	801804e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017db2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017db6:	e0f8      	b.n	8017faa <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8017dca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8017dce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8017dd2:	4013      	ands	r3, r2
 8017dd4:	b29a      	uxth	r2, r3
 8017dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017dda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017de0:	1c9a      	adds	r2, r3, #2
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	3b01      	subs	r3, #1
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	69db      	ldr	r3, [r3, #28]
 8017dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e06:	f003 0307 	and.w	r3, r3, #7
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d053      	beq.n	8017eb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e12:	f003 0301 	and.w	r3, r3, #1
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d011      	beq.n	8017e3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8017e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d00b      	beq.n	8017e3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2201      	movs	r2, #1
 8017e2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e34:	f043 0201 	orr.w	r2, r3, #1
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e42:	f003 0302 	and.w	r3, r3, #2
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d011      	beq.n	8017e6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8017e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e4e:	f003 0301 	and.w	r3, r3, #1
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d00b      	beq.n	8017e6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	2202      	movs	r2, #2
 8017e5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e64:	f043 0204 	orr.w	r2, r3, #4
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e72:	f003 0304 	and.w	r3, r3, #4
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d011      	beq.n	8017e9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8017e7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e7e:	f003 0301 	and.w	r3, r3, #1
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d00b      	beq.n	8017e9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	2204      	movs	r2, #4
 8017e8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e94:	f043 0202 	orr.w	r2, r3, #2
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d006      	beq.n	8017eb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017ea8:	6878      	ldr	r0, [r7, #4]
 8017eaa:	f7fe f9dd 	bl	8016268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d173      	bne.n	8017faa <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017eca:	e853 3f00 	ldrex	r3, [r3]
 8017ece:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	461a      	mov	r2, r3
 8017ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017ee6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ee8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017eea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017eec:	e841 2300 	strex	r3, r2, [r1]
 8017ef0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1e4      	bne.n	8017ec2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	3308      	adds	r3, #8
 8017efe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f02:	e853 3f00 	ldrex	r3, [r3]
 8017f06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017f0a:	4b57      	ldr	r3, [pc, #348]	; (8018068 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8017f0c:	4013      	ands	r3, r2
 8017f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	3308      	adds	r3, #8
 8017f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017f1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8017f1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017f22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f24:	e841 2300 	strex	r3, r2, [r1]
 8017f28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d1e3      	bne.n	8017ef8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	2220      	movs	r2, #32
 8017f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d12e      	bne.n	8017fa4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2200      	movs	r2, #0
 8017f4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f54:	e853 3f00 	ldrex	r3, [r3]
 8017f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f5c:	f023 0310 	bic.w	r3, r3, #16
 8017f60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	461a      	mov	r2, r3
 8017f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8017f6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f72:	e841 2300 	strex	r3, r2, [r1]
 8017f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d1e6      	bne.n	8017f4c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	69db      	ldr	r3, [r3, #28]
 8017f84:	f003 0310 	and.w	r3, r3, #16
 8017f88:	2b10      	cmp	r3, #16
 8017f8a:	d103      	bne.n	8017f94 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	2210      	movs	r2, #16
 8017f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f7fe f96d 	bl	801627c <HAL_UARTEx_RxEventCallback>
 8017fa2:	e002      	b.n	8017faa <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f7f2 fd4d 	bl	800aa44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017faa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d006      	beq.n	8017fc0 <UART_RxISR_16BIT_FIFOEN+0x250>
 8017fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017fb6:	f003 0320 	and.w	r3, r3, #32
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	f47f aefc 	bne.w	8017db8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fc6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017fca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d045      	beq.n	801805e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017fd8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d23e      	bcs.n	801805e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	3308      	adds	r3, #8
 8017fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fea:	e853 3f00 	ldrex	r3, [r3]
 8017fee:	623b      	str	r3, [r7, #32]
   return(result);
 8017ff0:	6a3b      	ldr	r3, [r7, #32]
 8017ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017ff6:	677b      	str	r3, [r7, #116]	; 0x74
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	3308      	adds	r3, #8
 8017ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018000:	633a      	str	r2, [r7, #48]	; 0x30
 8018002:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018008:	e841 2300 	strex	r3, r2, [r1]
 801800c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018010:	2b00      	cmp	r3, #0
 8018012:	d1e5      	bne.n	8017fe0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	4a15      	ldr	r2, [pc, #84]	; (801806c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8018018:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	e853 3f00 	ldrex	r3, [r3]
 8018026:	60fb      	str	r3, [r7, #12]
   return(result);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	f043 0320 	orr.w	r3, r3, #32
 801802e:	673b      	str	r3, [r7, #112]	; 0x70
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	461a      	mov	r2, r3
 8018036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018038:	61fb      	str	r3, [r7, #28]
 801803a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801803c:	69b9      	ldr	r1, [r7, #24]
 801803e:	69fa      	ldr	r2, [r7, #28]
 8018040:	e841 2300 	strex	r3, r2, [r1]
 8018044:	617b      	str	r3, [r7, #20]
   return(result);
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d1e6      	bne.n	801801a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801804c:	e007      	b.n	801805e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	699a      	ldr	r2, [r3, #24]
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	f042 0208 	orr.w	r2, r2, #8
 801805c:	619a      	str	r2, [r3, #24]
}
 801805e:	bf00      	nop
 8018060:	37a0      	adds	r7, #160	; 0xa0
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}
 8018066:	bf00      	nop
 8018068:	effffffe 	.word	0xeffffffe
 801806c:	08017917 	.word	0x08017917

08018070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018070:	b480      	push	{r7}
 8018072:	b083      	sub	sp, #12
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018078:	bf00      	nop
 801807a:	370c      	adds	r7, #12
 801807c:	46bd      	mov	sp, r7
 801807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018082:	4770      	bx	lr

08018084 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018084:	b480      	push	{r7}
 8018086:	b083      	sub	sp, #12
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801808c:	bf00      	nop
 801808e:	370c      	adds	r7, #12
 8018090:	46bd      	mov	sp, r7
 8018092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018096:	4770      	bx	lr

08018098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018098:	b480      	push	{r7}
 801809a:	b083      	sub	sp, #12
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80180a0:	bf00      	nop
 80180a2:	370c      	adds	r7, #12
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d101      	bne.n	80180c2 <HAL_UARTEx_EnableFifoMode+0x16>
 80180be:	2302      	movs	r3, #2
 80180c0:	e02b      	b.n	801811a <HAL_UARTEx_EnableFifoMode+0x6e>
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2201      	movs	r2, #1
 80180c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2224      	movs	r2, #36	; 0x24
 80180ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	681a      	ldr	r2, [r3, #0]
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	f022 0201 	bic.w	r2, r2, #1
 80180e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80180f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80180f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	68fa      	ldr	r2, [r7, #12]
 8018100:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f000 f8c2 	bl	801828c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2220      	movs	r2, #32
 801810c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2200      	movs	r2, #0
 8018114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018118:	2300      	movs	r3, #0
}
 801811a:	4618      	mov	r0, r3
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}

08018122 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018122:	b480      	push	{r7}
 8018124:	b085      	sub	sp, #20
 8018126:	af00      	add	r7, sp, #0
 8018128:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018130:	2b01      	cmp	r3, #1
 8018132:	d101      	bne.n	8018138 <HAL_UARTEx_DisableFifoMode+0x16>
 8018134:	2302      	movs	r3, #2
 8018136:	e027      	b.n	8018188 <HAL_UARTEx_DisableFifoMode+0x66>
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2201      	movs	r2, #1
 801813c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2224      	movs	r2, #36	; 0x24
 8018144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	f022 0201 	bic.w	r2, r2, #1
 801815e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018166:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2200      	movs	r2, #0
 801816c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	68fa      	ldr	r2, [r7, #12]
 8018174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	2220      	movs	r2, #32
 801817a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2200      	movs	r2, #0
 8018182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018186:	2300      	movs	r3, #0
}
 8018188:	4618      	mov	r0, r3
 801818a:	3714      	adds	r7, #20
 801818c:	46bd      	mov	sp, r7
 801818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018192:	4770      	bx	lr

08018194 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b084      	sub	sp, #16
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
 801819c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80181a4:	2b01      	cmp	r3, #1
 80181a6:	d101      	bne.n	80181ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80181a8:	2302      	movs	r3, #2
 80181aa:	e02d      	b.n	8018208 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2201      	movs	r2, #1
 80181b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	2224      	movs	r2, #36	; 0x24
 80181b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	681a      	ldr	r2, [r3, #0]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	f022 0201 	bic.w	r2, r2, #1
 80181d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	689b      	ldr	r3, [r3, #8]
 80181da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	683a      	ldr	r2, [r7, #0]
 80181e4:	430a      	orrs	r2, r1
 80181e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	f000 f84f 	bl	801828c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	68fa      	ldr	r2, [r7, #12]
 80181f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2220      	movs	r2, #32
 80181fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	2200      	movs	r2, #0
 8018202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018206:	2300      	movs	r3, #0
}
 8018208:	4618      	mov	r0, r3
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b084      	sub	sp, #16
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018220:	2b01      	cmp	r3, #1
 8018222:	d101      	bne.n	8018228 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018224:	2302      	movs	r3, #2
 8018226:	e02d      	b.n	8018284 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2201      	movs	r2, #1
 801822c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2224      	movs	r2, #36	; 0x24
 8018234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	681a      	ldr	r2, [r3, #0]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	f022 0201 	bic.w	r2, r2, #1
 801824e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	689b      	ldr	r3, [r3, #8]
 8018256:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	683a      	ldr	r2, [r7, #0]
 8018260:	430a      	orrs	r2, r1
 8018262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f000 f811 	bl	801828c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	68fa      	ldr	r2, [r7, #12]
 8018270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	2220      	movs	r2, #32
 8018276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	2200      	movs	r2, #0
 801827e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018282:	2300      	movs	r3, #0
}
 8018284:	4618      	mov	r0, r3
 8018286:	3710      	adds	r7, #16
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801828c:	b480      	push	{r7}
 801828e:	b085      	sub	sp, #20
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018298:	2b00      	cmp	r3, #0
 801829a:	d108      	bne.n	80182ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2201      	movs	r2, #1
 80182a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2201      	movs	r2, #1
 80182a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80182ac:	e031      	b.n	8018312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80182ae:	2310      	movs	r3, #16
 80182b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80182b2:	2310      	movs	r3, #16
 80182b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	689b      	ldr	r3, [r3, #8]
 80182bc:	0e5b      	lsrs	r3, r3, #25
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	f003 0307 	and.w	r3, r3, #7
 80182c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	689b      	ldr	r3, [r3, #8]
 80182cc:	0f5b      	lsrs	r3, r3, #29
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	f003 0307 	and.w	r3, r3, #7
 80182d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80182d6:	7bbb      	ldrb	r3, [r7, #14]
 80182d8:	7b3a      	ldrb	r2, [r7, #12]
 80182da:	4911      	ldr	r1, [pc, #68]	; (8018320 <UARTEx_SetNbDataToProcess+0x94>)
 80182dc:	5c8a      	ldrb	r2, [r1, r2]
 80182de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80182e2:	7b3a      	ldrb	r2, [r7, #12]
 80182e4:	490f      	ldr	r1, [pc, #60]	; (8018324 <UARTEx_SetNbDataToProcess+0x98>)
 80182e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80182e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80182f4:	7bfb      	ldrb	r3, [r7, #15]
 80182f6:	7b7a      	ldrb	r2, [r7, #13]
 80182f8:	4909      	ldr	r1, [pc, #36]	; (8018320 <UARTEx_SetNbDataToProcess+0x94>)
 80182fa:	5c8a      	ldrb	r2, [r1, r2]
 80182fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018300:	7b7a      	ldrb	r2, [r7, #13]
 8018302:	4908      	ldr	r1, [pc, #32]	; (8018324 <UARTEx_SetNbDataToProcess+0x98>)
 8018304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018306:	fb93 f3f2 	sdiv	r3, r3, r2
 801830a:	b29a      	uxth	r2, r3
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018312:	bf00      	nop
 8018314:	3714      	adds	r7, #20
 8018316:	46bd      	mov	sp, r7
 8018318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831c:	4770      	bx	lr
 801831e:	bf00      	nop
 8018320:	08037ae8 	.word	0x08037ae8
 8018324:	08037af0 	.word	0x08037af0

08018328 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018328:	b084      	sub	sp, #16
 801832a:	b580      	push	{r7, lr}
 801832c:	b084      	sub	sp, #16
 801832e:	af00      	add	r7, sp, #0
 8018330:	6078      	str	r0, [r7, #4]
 8018332:	f107 001c 	add.w	r0, r7, #28
 8018336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833c:	2b01      	cmp	r3, #1
 801833e:	d120      	bne.n	8018382 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	68da      	ldr	r2, [r3, #12]
 8018350:	4b2a      	ldr	r3, [pc, #168]	; (80183fc <USB_CoreInit+0xd4>)
 8018352:	4013      	ands	r3, r2
 8018354:	687a      	ldr	r2, [r7, #4]
 8018356:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8018364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018366:	2b01      	cmp	r3, #1
 8018368:	d105      	bne.n	8018376 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	68db      	ldr	r3, [r3, #12]
 801836e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018376:	6878      	ldr	r0, [r7, #4]
 8018378:	f001 fb4e 	bl	8019a18 <USB_CoreReset>
 801837c:	4603      	mov	r3, r0
 801837e:	73fb      	strb	r3, [r7, #15]
 8018380:	e01a      	b.n	80183b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	f001 fb42 	bl	8019a18 <USB_CoreReset>
 8018394:	4603      	mov	r3, r0
 8018396:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801839a:	2b00      	cmp	r3, #0
 801839c:	d106      	bne.n	80183ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	639a      	str	r2, [r3, #56]	; 0x38
 80183aa:	e005      	b.n	80183b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80183b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ba:	2b01      	cmp	r3, #1
 80183bc:	d116      	bne.n	80183ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183c2:	b29a      	uxth	r2, r3
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80183cc:	4b0c      	ldr	r3, [pc, #48]	; (8018400 <USB_CoreInit+0xd8>)
 80183ce:	4313      	orrs	r3, r2
 80183d0:	687a      	ldr	r2, [r7, #4]
 80183d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	f043 0206 	orr.w	r2, r3, #6
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	689b      	ldr	r3, [r3, #8]
 80183e4:	f043 0220 	orr.w	r2, r3, #32
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80183ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3710      	adds	r7, #16
 80183f2:	46bd      	mov	sp, r7
 80183f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80183f8:	b004      	add	sp, #16
 80183fa:	4770      	bx	lr
 80183fc:	ffbdffbf 	.word	0xffbdffbf
 8018400:	03ee0000 	.word	0x03ee0000

08018404 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018404:	b480      	push	{r7}
 8018406:	b087      	sub	sp, #28
 8018408:	af00      	add	r7, sp, #0
 801840a:	60f8      	str	r0, [r7, #12]
 801840c:	60b9      	str	r1, [r7, #8]
 801840e:	4613      	mov	r3, r2
 8018410:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018412:	79fb      	ldrb	r3, [r7, #7]
 8018414:	2b02      	cmp	r3, #2
 8018416:	d165      	bne.n	80184e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	4a41      	ldr	r2, [pc, #260]	; (8018520 <USB_SetTurnaroundTime+0x11c>)
 801841c:	4293      	cmp	r3, r2
 801841e:	d906      	bls.n	801842e <USB_SetTurnaroundTime+0x2a>
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	4a40      	ldr	r2, [pc, #256]	; (8018524 <USB_SetTurnaroundTime+0x120>)
 8018424:	4293      	cmp	r3, r2
 8018426:	d202      	bcs.n	801842e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8018428:	230f      	movs	r3, #15
 801842a:	617b      	str	r3, [r7, #20]
 801842c:	e062      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	4a3c      	ldr	r2, [pc, #240]	; (8018524 <USB_SetTurnaroundTime+0x120>)
 8018432:	4293      	cmp	r3, r2
 8018434:	d306      	bcc.n	8018444 <USB_SetTurnaroundTime+0x40>
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	4a3b      	ldr	r2, [pc, #236]	; (8018528 <USB_SetTurnaroundTime+0x124>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d202      	bcs.n	8018444 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801843e:	230e      	movs	r3, #14
 8018440:	617b      	str	r3, [r7, #20]
 8018442:	e057      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	4a38      	ldr	r2, [pc, #224]	; (8018528 <USB_SetTurnaroundTime+0x124>)
 8018448:	4293      	cmp	r3, r2
 801844a:	d306      	bcc.n	801845a <USB_SetTurnaroundTime+0x56>
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	4a37      	ldr	r2, [pc, #220]	; (801852c <USB_SetTurnaroundTime+0x128>)
 8018450:	4293      	cmp	r3, r2
 8018452:	d202      	bcs.n	801845a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8018454:	230d      	movs	r3, #13
 8018456:	617b      	str	r3, [r7, #20]
 8018458:	e04c      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	4a33      	ldr	r2, [pc, #204]	; (801852c <USB_SetTurnaroundTime+0x128>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d306      	bcc.n	8018470 <USB_SetTurnaroundTime+0x6c>
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	4a32      	ldr	r2, [pc, #200]	; (8018530 <USB_SetTurnaroundTime+0x12c>)
 8018466:	4293      	cmp	r3, r2
 8018468:	d802      	bhi.n	8018470 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801846a:	230c      	movs	r3, #12
 801846c:	617b      	str	r3, [r7, #20]
 801846e:	e041      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	4a2f      	ldr	r2, [pc, #188]	; (8018530 <USB_SetTurnaroundTime+0x12c>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d906      	bls.n	8018486 <USB_SetTurnaroundTime+0x82>
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	4a2e      	ldr	r2, [pc, #184]	; (8018534 <USB_SetTurnaroundTime+0x130>)
 801847c:	4293      	cmp	r3, r2
 801847e:	d802      	bhi.n	8018486 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8018480:	230b      	movs	r3, #11
 8018482:	617b      	str	r3, [r7, #20]
 8018484:	e036      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	4a2a      	ldr	r2, [pc, #168]	; (8018534 <USB_SetTurnaroundTime+0x130>)
 801848a:	4293      	cmp	r3, r2
 801848c:	d906      	bls.n	801849c <USB_SetTurnaroundTime+0x98>
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	4a29      	ldr	r2, [pc, #164]	; (8018538 <USB_SetTurnaroundTime+0x134>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d802      	bhi.n	801849c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8018496:	230a      	movs	r3, #10
 8018498:	617b      	str	r3, [r7, #20]
 801849a:	e02b      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	4a26      	ldr	r2, [pc, #152]	; (8018538 <USB_SetTurnaroundTime+0x134>)
 80184a0:	4293      	cmp	r3, r2
 80184a2:	d906      	bls.n	80184b2 <USB_SetTurnaroundTime+0xae>
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	4a25      	ldr	r2, [pc, #148]	; (801853c <USB_SetTurnaroundTime+0x138>)
 80184a8:	4293      	cmp	r3, r2
 80184aa:	d202      	bcs.n	80184b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80184ac:	2309      	movs	r3, #9
 80184ae:	617b      	str	r3, [r7, #20]
 80184b0:	e020      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	4a21      	ldr	r2, [pc, #132]	; (801853c <USB_SetTurnaroundTime+0x138>)
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d306      	bcc.n	80184c8 <USB_SetTurnaroundTime+0xc4>
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	4a20      	ldr	r2, [pc, #128]	; (8018540 <USB_SetTurnaroundTime+0x13c>)
 80184be:	4293      	cmp	r3, r2
 80184c0:	d802      	bhi.n	80184c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80184c2:	2308      	movs	r3, #8
 80184c4:	617b      	str	r3, [r7, #20]
 80184c6:	e015      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	4a1d      	ldr	r2, [pc, #116]	; (8018540 <USB_SetTurnaroundTime+0x13c>)
 80184cc:	4293      	cmp	r3, r2
 80184ce:	d906      	bls.n	80184de <USB_SetTurnaroundTime+0xda>
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	4a1c      	ldr	r2, [pc, #112]	; (8018544 <USB_SetTurnaroundTime+0x140>)
 80184d4:	4293      	cmp	r3, r2
 80184d6:	d202      	bcs.n	80184de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80184d8:	2307      	movs	r3, #7
 80184da:	617b      	str	r3, [r7, #20]
 80184dc:	e00a      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80184de:	2306      	movs	r3, #6
 80184e0:	617b      	str	r3, [r7, #20]
 80184e2:	e007      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80184e4:	79fb      	ldrb	r3, [r7, #7]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d102      	bne.n	80184f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80184ea:	2309      	movs	r3, #9
 80184ec:	617b      	str	r3, [r7, #20]
 80184ee:	e001      	b.n	80184f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80184f0:	2309      	movs	r3, #9
 80184f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	68da      	ldr	r2, [r3, #12]
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	029b      	lsls	r3, r3, #10
 8018508:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801850c:	431a      	orrs	r2, r3
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8018512:	2300      	movs	r3, #0
}
 8018514:	4618      	mov	r0, r3
 8018516:	371c      	adds	r7, #28
 8018518:	46bd      	mov	sp, r7
 801851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851e:	4770      	bx	lr
 8018520:	00d8acbf 	.word	0x00d8acbf
 8018524:	00e4e1c0 	.word	0x00e4e1c0
 8018528:	00f42400 	.word	0x00f42400
 801852c:	01067380 	.word	0x01067380
 8018530:	011a499f 	.word	0x011a499f
 8018534:	01312cff 	.word	0x01312cff
 8018538:	014ca43f 	.word	0x014ca43f
 801853c:	016e3600 	.word	0x016e3600
 8018540:	01a6ab1f 	.word	0x01a6ab1f
 8018544:	01e84800 	.word	0x01e84800

08018548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018548:	b480      	push	{r7}
 801854a:	b083      	sub	sp, #12
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	689b      	ldr	r3, [r3, #8]
 8018554:	f043 0201 	orr.w	r2, r3, #1
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801855c:	2300      	movs	r3, #0
}
 801855e:	4618      	mov	r0, r3
 8018560:	370c      	adds	r7, #12
 8018562:	46bd      	mov	sp, r7
 8018564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018568:	4770      	bx	lr

0801856a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801856a:	b480      	push	{r7}
 801856c:	b083      	sub	sp, #12
 801856e:	af00      	add	r7, sp, #0
 8018570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	689b      	ldr	r3, [r3, #8]
 8018576:	f023 0201 	bic.w	r2, r3, #1
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801857e:	2300      	movs	r3, #0
}
 8018580:	4618      	mov	r0, r3
 8018582:	370c      	adds	r7, #12
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr

0801858c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b084      	sub	sp, #16
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	460b      	mov	r3, r1
 8018596:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8018598:	2300      	movs	r3, #0
 801859a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	68db      	ldr	r3, [r3, #12]
 80185a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80185a8:	78fb      	ldrb	r3, [r7, #3]
 80185aa:	2b01      	cmp	r3, #1
 80185ac:	d115      	bne.n	80185da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80185ba:	2001      	movs	r0, #1
 80185bc:	f7f3 fb28 	bl	800bc10 <HAL_Delay>
      ms++;
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	3301      	adds	r3, #1
 80185c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80185c6:	6878      	ldr	r0, [r7, #4]
 80185c8:	f001 f995 	bl	80198f6 <USB_GetMode>
 80185cc:	4603      	mov	r3, r0
 80185ce:	2b01      	cmp	r3, #1
 80185d0:	d01e      	beq.n	8018610 <USB_SetCurrentMode+0x84>
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	2b31      	cmp	r3, #49	; 0x31
 80185d6:	d9f0      	bls.n	80185ba <USB_SetCurrentMode+0x2e>
 80185d8:	e01a      	b.n	8018610 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80185da:	78fb      	ldrb	r3, [r7, #3]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d115      	bne.n	801860c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	68db      	ldr	r3, [r3, #12]
 80185e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80185ec:	2001      	movs	r0, #1
 80185ee:	f7f3 fb0f 	bl	800bc10 <HAL_Delay>
      ms++;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	3301      	adds	r3, #1
 80185f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80185f8:	6878      	ldr	r0, [r7, #4]
 80185fa:	f001 f97c 	bl	80198f6 <USB_GetMode>
 80185fe:	4603      	mov	r3, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	d005      	beq.n	8018610 <USB_SetCurrentMode+0x84>
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2b31      	cmp	r3, #49	; 0x31
 8018608:	d9f0      	bls.n	80185ec <USB_SetCurrentMode+0x60>
 801860a:	e001      	b.n	8018610 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801860c:	2301      	movs	r3, #1
 801860e:	e005      	b.n	801861c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	2b32      	cmp	r3, #50	; 0x32
 8018614:	d101      	bne.n	801861a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8018616:	2301      	movs	r3, #1
 8018618:	e000      	b.n	801861c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801861a:	2300      	movs	r3, #0
}
 801861c:	4618      	mov	r0, r3
 801861e:	3710      	adds	r7, #16
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}

08018624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018624:	b084      	sub	sp, #16
 8018626:	b580      	push	{r7, lr}
 8018628:	b086      	sub	sp, #24
 801862a:	af00      	add	r7, sp, #0
 801862c:	6078      	str	r0, [r7, #4]
 801862e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8018636:	2300      	movs	r3, #0
 8018638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801863e:	2300      	movs	r3, #0
 8018640:	613b      	str	r3, [r7, #16]
 8018642:	e009      	b.n	8018658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8018644:	687a      	ldr	r2, [r7, #4]
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	3340      	adds	r3, #64	; 0x40
 801864a:	009b      	lsls	r3, r3, #2
 801864c:	4413      	add	r3, r2
 801864e:	2200      	movs	r2, #0
 8018650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	3301      	adds	r3, #1
 8018656:	613b      	str	r3, [r7, #16]
 8018658:	693b      	ldr	r3, [r7, #16]
 801865a:	2b0e      	cmp	r3, #14
 801865c:	d9f2      	bls.n	8018644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801865e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018660:	2b00      	cmp	r3, #0
 8018662:	d11c      	bne.n	801869e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801866a:	685b      	ldr	r3, [r3, #4]
 801866c:	68fa      	ldr	r2, [r7, #12]
 801866e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018672:	f043 0302 	orr.w	r3, r3, #2
 8018676:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801867c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	601a      	str	r2, [r3, #0]
 801869c:	e005      	b.n	80186aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80186b0:	461a      	mov	r2, r3
 80186b2:	2300      	movs	r3, #0
 80186b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80186bc:	4619      	mov	r1, r3
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80186c4:	461a      	mov	r2, r3
 80186c6:	680b      	ldr	r3, [r1, #0]
 80186c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80186ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d10c      	bne.n	80186ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d104      	bne.n	80186e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80186d6:	2100      	movs	r1, #0
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f000 f961 	bl	80189a0 <USB_SetDevSpeed>
 80186de:	e008      	b.n	80186f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80186e0:	2101      	movs	r1, #1
 80186e2:	6878      	ldr	r0, [r7, #4]
 80186e4:	f000 f95c 	bl	80189a0 <USB_SetDevSpeed>
 80186e8:	e003      	b.n	80186f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80186ea:	2103      	movs	r1, #3
 80186ec:	6878      	ldr	r0, [r7, #4]
 80186ee:	f000 f957 	bl	80189a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80186f2:	2110      	movs	r1, #16
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f000 f8f3 	bl	80188e0 <USB_FlushTxFifo>
 80186fa:	4603      	mov	r3, r0
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d001      	beq.n	8018704 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8018700:	2301      	movs	r3, #1
 8018702:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 f91d 	bl	8018944 <USB_FlushRxFifo>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d001      	beq.n	8018714 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8018710:	2301      	movs	r3, #1
 8018712:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801871a:	461a      	mov	r2, r3
 801871c:	2300      	movs	r3, #0
 801871e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018726:	461a      	mov	r2, r3
 8018728:	2300      	movs	r3, #0
 801872a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018732:	461a      	mov	r2, r3
 8018734:	2300      	movs	r3, #0
 8018736:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018738:	2300      	movs	r3, #0
 801873a:	613b      	str	r3, [r7, #16]
 801873c:	e043      	b.n	80187c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801873e:	693b      	ldr	r3, [r7, #16]
 8018740:	015a      	lsls	r2, r3, #5
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	4413      	add	r3, r2
 8018746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018754:	d118      	bne.n	8018788 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d10a      	bne.n	8018772 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801875c:	693b      	ldr	r3, [r7, #16]
 801875e:	015a      	lsls	r2, r3, #5
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	4413      	add	r3, r2
 8018764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018768:	461a      	mov	r2, r3
 801876a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801876e:	6013      	str	r3, [r2, #0]
 8018770:	e013      	b.n	801879a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8018772:	693b      	ldr	r3, [r7, #16]
 8018774:	015a      	lsls	r2, r3, #5
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	4413      	add	r3, r2
 801877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801877e:	461a      	mov	r2, r3
 8018780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018784:	6013      	str	r3, [r2, #0]
 8018786:	e008      	b.n	801879a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8018788:	693b      	ldr	r3, [r7, #16]
 801878a:	015a      	lsls	r2, r3, #5
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	4413      	add	r3, r2
 8018790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018794:	461a      	mov	r2, r3
 8018796:	2300      	movs	r3, #0
 8018798:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	015a      	lsls	r2, r3, #5
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	4413      	add	r3, r2
 80187a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80187a6:	461a      	mov	r2, r3
 80187a8:	2300      	movs	r3, #0
 80187aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	015a      	lsls	r2, r3, #5
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	4413      	add	r3, r2
 80187b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80187b8:	461a      	mov	r2, r3
 80187ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80187be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	3301      	adds	r3, #1
 80187c4:	613b      	str	r3, [r7, #16]
 80187c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c8:	693a      	ldr	r2, [r7, #16]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d3b7      	bcc.n	801873e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80187ce:	2300      	movs	r3, #0
 80187d0:	613b      	str	r3, [r7, #16]
 80187d2:	e043      	b.n	801885c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80187d4:	693b      	ldr	r3, [r7, #16]
 80187d6:	015a      	lsls	r2, r3, #5
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	4413      	add	r3, r2
 80187dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80187e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80187ea:	d118      	bne.n	801881e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d10a      	bne.n	8018808 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	015a      	lsls	r2, r3, #5
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	4413      	add	r3, r2
 80187fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80187fe:	461a      	mov	r2, r3
 8018800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018804:	6013      	str	r3, [r2, #0]
 8018806:	e013      	b.n	8018830 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	015a      	lsls	r2, r3, #5
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	4413      	add	r3, r2
 8018810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018814:	461a      	mov	r2, r3
 8018816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801881a:	6013      	str	r3, [r2, #0]
 801881c:	e008      	b.n	8018830 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	015a      	lsls	r2, r3, #5
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	4413      	add	r3, r2
 8018826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801882a:	461a      	mov	r2, r3
 801882c:	2300      	movs	r3, #0
 801882e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	015a      	lsls	r2, r3, #5
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	4413      	add	r3, r2
 8018838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801883c:	461a      	mov	r2, r3
 801883e:	2300      	movs	r3, #0
 8018840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	015a      	lsls	r2, r3, #5
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	4413      	add	r3, r2
 801884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801884e:	461a      	mov	r2, r3
 8018850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018856:	693b      	ldr	r3, [r7, #16]
 8018858:	3301      	adds	r3, #1
 801885a:	613b      	str	r3, [r7, #16]
 801885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801885e:	693a      	ldr	r2, [r7, #16]
 8018860:	429a      	cmp	r2, r3
 8018862:	d3b7      	bcc.n	80187d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801886a:	691b      	ldr	r3, [r3, #16]
 801886c:	68fa      	ldr	r2, [r7, #12]
 801886e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018876:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2200      	movs	r2, #0
 801887c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8018884:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8018886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018888:	2b00      	cmp	r3, #0
 801888a:	d105      	bne.n	8018898 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	699b      	ldr	r3, [r3, #24]
 8018890:	f043 0210 	orr.w	r2, r3, #16
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	699a      	ldr	r2, [r3, #24]
 801889c:	4b0e      	ldr	r3, [pc, #56]	; (80188d8 <USB_DevInit+0x2b4>)
 801889e:	4313      	orrs	r3, r2
 80188a0:	687a      	ldr	r2, [r7, #4]
 80188a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80188a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d005      	beq.n	80188b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	699b      	ldr	r3, [r3, #24]
 80188ae:	f043 0208 	orr.w	r2, r3, #8
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80188b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d105      	bne.n	80188c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	699a      	ldr	r2, [r3, #24]
 80188c0:	4b06      	ldr	r3, [pc, #24]	; (80188dc <USB_DevInit+0x2b8>)
 80188c2:	4313      	orrs	r3, r2
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80188c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3718      	adds	r7, #24
 80188ce:	46bd      	mov	sp, r7
 80188d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80188d4:	b004      	add	sp, #16
 80188d6:	4770      	bx	lr
 80188d8:	803c3800 	.word	0x803c3800
 80188dc:	40000004 	.word	0x40000004

080188e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80188e0:	b480      	push	{r7}
 80188e2:	b085      	sub	sp, #20
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80188ea:	2300      	movs	r3, #0
 80188ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	3301      	adds	r3, #1
 80188f2:	60fb      	str	r3, [r7, #12]
 80188f4:	4a12      	ldr	r2, [pc, #72]	; (8018940 <USB_FlushTxFifo+0x60>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d901      	bls.n	80188fe <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80188fa:	2303      	movs	r3, #3
 80188fc:	e01a      	b.n	8018934 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	691b      	ldr	r3, [r3, #16]
 8018902:	2b00      	cmp	r3, #0
 8018904:	daf3      	bge.n	80188ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8018906:	2300      	movs	r3, #0
 8018908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	019b      	lsls	r3, r3, #6
 801890e:	f043 0220 	orr.w	r2, r3, #32
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	3301      	adds	r3, #1
 801891a:	60fb      	str	r3, [r7, #12]
 801891c:	4a08      	ldr	r2, [pc, #32]	; (8018940 <USB_FlushTxFifo+0x60>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d901      	bls.n	8018926 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8018922:	2303      	movs	r3, #3
 8018924:	e006      	b.n	8018934 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	691b      	ldr	r3, [r3, #16]
 801892a:	f003 0320 	and.w	r3, r3, #32
 801892e:	2b20      	cmp	r3, #32
 8018930:	d0f1      	beq.n	8018916 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8018932:	2300      	movs	r3, #0
}
 8018934:	4618      	mov	r0, r3
 8018936:	3714      	adds	r7, #20
 8018938:	46bd      	mov	sp, r7
 801893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893e:	4770      	bx	lr
 8018940:	00030d40 	.word	0x00030d40

08018944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8018944:	b480      	push	{r7}
 8018946:	b085      	sub	sp, #20
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801894c:	2300      	movs	r3, #0
 801894e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	3301      	adds	r3, #1
 8018954:	60fb      	str	r3, [r7, #12]
 8018956:	4a11      	ldr	r2, [pc, #68]	; (801899c <USB_FlushRxFifo+0x58>)
 8018958:	4293      	cmp	r3, r2
 801895a:	d901      	bls.n	8018960 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 801895c:	2303      	movs	r3, #3
 801895e:	e017      	b.n	8018990 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	691b      	ldr	r3, [r3, #16]
 8018964:	2b00      	cmp	r3, #0
 8018966:	daf3      	bge.n	8018950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8018968:	2300      	movs	r3, #0
 801896a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2210      	movs	r2, #16
 8018970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	3301      	adds	r3, #1
 8018976:	60fb      	str	r3, [r7, #12]
 8018978:	4a08      	ldr	r2, [pc, #32]	; (801899c <USB_FlushRxFifo+0x58>)
 801897a:	4293      	cmp	r3, r2
 801897c:	d901      	bls.n	8018982 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 801897e:	2303      	movs	r3, #3
 8018980:	e006      	b.n	8018990 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	691b      	ldr	r3, [r3, #16]
 8018986:	f003 0310 	and.w	r3, r3, #16
 801898a:	2b10      	cmp	r3, #16
 801898c:	d0f1      	beq.n	8018972 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 801898e:	2300      	movs	r3, #0
}
 8018990:	4618      	mov	r0, r3
 8018992:	3714      	adds	r7, #20
 8018994:	46bd      	mov	sp, r7
 8018996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899a:	4770      	bx	lr
 801899c:	00030d40 	.word	0x00030d40

080189a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80189a0:	b480      	push	{r7}
 80189a2:	b085      	sub	sp, #20
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
 80189a8:	460b      	mov	r3, r1
 80189aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80189b6:	681a      	ldr	r2, [r3, #0]
 80189b8:	78fb      	ldrb	r3, [r7, #3]
 80189ba:	68f9      	ldr	r1, [r7, #12]
 80189bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80189c0:	4313      	orrs	r3, r2
 80189c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3714      	adds	r7, #20
 80189ca:	46bd      	mov	sp, r7
 80189cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d0:	4770      	bx	lr

080189d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80189d2:	b480      	push	{r7}
 80189d4:	b087      	sub	sp, #28
 80189d6:	af00      	add	r7, sp, #0
 80189d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80189e4:	689b      	ldr	r3, [r3, #8]
 80189e6:	f003 0306 	and.w	r3, r3, #6
 80189ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d102      	bne.n	80189f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80189f2:	2300      	movs	r3, #0
 80189f4:	75fb      	strb	r3, [r7, #23]
 80189f6:	e00a      	b.n	8018a0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	2b02      	cmp	r3, #2
 80189fc:	d002      	beq.n	8018a04 <USB_GetDevSpeed+0x32>
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	2b06      	cmp	r3, #6
 8018a02:	d102      	bne.n	8018a0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8018a04:	2302      	movs	r3, #2
 8018a06:	75fb      	strb	r3, [r7, #23]
 8018a08:	e001      	b.n	8018a0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8018a0a:	230f      	movs	r3, #15
 8018a0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8018a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	371c      	adds	r7, #28
 8018a14:	46bd      	mov	sp, r7
 8018a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1a:	4770      	bx	lr

08018a1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	b085      	sub	sp, #20
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
 8018a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8018a30:	683b      	ldr	r3, [r7, #0]
 8018a32:	785b      	ldrb	r3, [r3, #1]
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	d139      	bne.n	8018aac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018a3e:	69da      	ldr	r2, [r3, #28]
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	f003 030f 	and.w	r3, r3, #15
 8018a48:	2101      	movs	r1, #1
 8018a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	68f9      	ldr	r1, [r7, #12]
 8018a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018a56:	4313      	orrs	r3, r2
 8018a58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8018a5a:	68bb      	ldr	r3, [r7, #8]
 8018a5c:	015a      	lsls	r2, r3, #5
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	4413      	add	r3, r2
 8018a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d153      	bne.n	8018b18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	015a      	lsls	r2, r3, #5
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	4413      	add	r3, r2
 8018a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	689b      	ldr	r3, [r3, #8]
 8018a82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	78db      	ldrb	r3, [r3, #3]
 8018a8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8018a8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8018a8e:	68bb      	ldr	r3, [r7, #8]
 8018a90:	059b      	lsls	r3, r3, #22
 8018a92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8018a94:	431a      	orrs	r2, r3
 8018a96:	68bb      	ldr	r3, [r7, #8]
 8018a98:	0159      	lsls	r1, r3, #5
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	440b      	add	r3, r1
 8018a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018aa2:	4619      	mov	r1, r3
 8018aa4:	4b20      	ldr	r3, [pc, #128]	; (8018b28 <USB_ActivateEndpoint+0x10c>)
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	600b      	str	r3, [r1, #0]
 8018aaa:	e035      	b.n	8018b18 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018ab2:	69da      	ldr	r2, [r3, #28]
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	f003 030f 	and.w	r3, r3, #15
 8018abc:	2101      	movs	r1, #1
 8018abe:	fa01 f303 	lsl.w	r3, r1, r3
 8018ac2:	041b      	lsls	r3, r3, #16
 8018ac4:	68f9      	ldr	r1, [r7, #12]
 8018ac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018aca:	4313      	orrs	r3, r2
 8018acc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	015a      	lsls	r2, r3, #5
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	4413      	add	r3, r2
 8018ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d119      	bne.n	8018b18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	015a      	lsls	r2, r3, #5
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	4413      	add	r3, r2
 8018aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018af0:	681a      	ldr	r2, [r3, #0]
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	689b      	ldr	r3, [r3, #8]
 8018af6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	78db      	ldrb	r3, [r3, #3]
 8018afe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8018b00:	430b      	orrs	r3, r1
 8018b02:	431a      	orrs	r2, r3
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	0159      	lsls	r1, r3, #5
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	440b      	add	r3, r1
 8018b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018b10:	4619      	mov	r1, r3
 8018b12:	4b05      	ldr	r3, [pc, #20]	; (8018b28 <USB_ActivateEndpoint+0x10c>)
 8018b14:	4313      	orrs	r3, r2
 8018b16:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8018b18:	2300      	movs	r3, #0
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3714      	adds	r7, #20
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b24:	4770      	bx	lr
 8018b26:	bf00      	nop
 8018b28:	10008000 	.word	0x10008000

08018b2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8018b2c:	b480      	push	{r7}
 8018b2e:	b085      	sub	sp, #20
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
 8018b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	781b      	ldrb	r3, [r3, #0]
 8018b3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	785b      	ldrb	r3, [r3, #1]
 8018b44:	2b01      	cmp	r3, #1
 8018b46:	d161      	bne.n	8018c0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	015a      	lsls	r2, r3, #5
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	4413      	add	r3, r2
 8018b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018b5e:	d11f      	bne.n	8018ba0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	015a      	lsls	r2, r3, #5
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	4413      	add	r3, r2
 8018b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	68ba      	ldr	r2, [r7, #8]
 8018b70:	0151      	lsls	r1, r2, #5
 8018b72:	68fa      	ldr	r2, [r7, #12]
 8018b74:	440a      	add	r2, r1
 8018b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018b7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018b7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	015a      	lsls	r2, r3, #5
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	4413      	add	r3, r2
 8018b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	0151      	lsls	r1, r2, #5
 8018b92:	68fa      	ldr	r2, [r7, #12]
 8018b94:	440a      	add	r2, r1
 8018b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	781b      	ldrb	r3, [r3, #0]
 8018bac:	f003 030f 	and.w	r3, r3, #15
 8018bb0:	2101      	movs	r1, #1
 8018bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	43db      	mvns	r3, r3
 8018bba:	68f9      	ldr	r1, [r7, #12]
 8018bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018bc0:	4013      	ands	r3, r2
 8018bc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018bca:	69da      	ldr	r2, [r3, #28]
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	781b      	ldrb	r3, [r3, #0]
 8018bd0:	f003 030f 	and.w	r3, r3, #15
 8018bd4:	2101      	movs	r1, #1
 8018bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	43db      	mvns	r3, r3
 8018bde:	68f9      	ldr	r1, [r7, #12]
 8018be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018be4:	4013      	ands	r3, r2
 8018be6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	015a      	lsls	r2, r3, #5
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	4413      	add	r3, r2
 8018bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018bf4:	681a      	ldr	r2, [r3, #0]
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	0159      	lsls	r1, r3, #5
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	440b      	add	r3, r1
 8018bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018c02:	4619      	mov	r1, r3
 8018c04:	4b35      	ldr	r3, [pc, #212]	; (8018cdc <USB_DeactivateEndpoint+0x1b0>)
 8018c06:	4013      	ands	r3, r2
 8018c08:	600b      	str	r3, [r1, #0]
 8018c0a:	e060      	b.n	8018cce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018c0c:	68bb      	ldr	r3, [r7, #8]
 8018c0e:	015a      	lsls	r2, r3, #5
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	4413      	add	r3, r2
 8018c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018c22:	d11f      	bne.n	8018c64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	015a      	lsls	r2, r3, #5
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	4413      	add	r3, r2
 8018c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	68ba      	ldr	r2, [r7, #8]
 8018c34:	0151      	lsls	r1, r2, #5
 8018c36:	68fa      	ldr	r2, [r7, #12]
 8018c38:	440a      	add	r2, r1
 8018c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8018c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018c42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	015a      	lsls	r2, r3, #5
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	4413      	add	r3, r2
 8018c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	68ba      	ldr	r2, [r7, #8]
 8018c54:	0151      	lsls	r1, r2, #5
 8018c56:	68fa      	ldr	r2, [r7, #12]
 8018c58:	440a      	add	r2, r1
 8018c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8018c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018c62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	f003 030f 	and.w	r3, r3, #15
 8018c74:	2101      	movs	r1, #1
 8018c76:	fa01 f303 	lsl.w	r3, r1, r3
 8018c7a:	041b      	lsls	r3, r3, #16
 8018c7c:	43db      	mvns	r3, r3
 8018c7e:	68f9      	ldr	r1, [r7, #12]
 8018c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018c84:	4013      	ands	r3, r2
 8018c86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018c8e:	69da      	ldr	r2, [r3, #28]
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	781b      	ldrb	r3, [r3, #0]
 8018c94:	f003 030f 	and.w	r3, r3, #15
 8018c98:	2101      	movs	r1, #1
 8018c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8018c9e:	041b      	lsls	r3, r3, #16
 8018ca0:	43db      	mvns	r3, r3
 8018ca2:	68f9      	ldr	r1, [r7, #12]
 8018ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018ca8:	4013      	ands	r3, r2
 8018caa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8018cac:	68bb      	ldr	r3, [r7, #8]
 8018cae:	015a      	lsls	r2, r3, #5
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	4413      	add	r3, r2
 8018cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018cb8:	681a      	ldr	r2, [r3, #0]
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	0159      	lsls	r1, r3, #5
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	440b      	add	r3, r1
 8018cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	4b05      	ldr	r3, [pc, #20]	; (8018ce0 <USB_DeactivateEndpoint+0x1b4>)
 8018cca:	4013      	ands	r3, r2
 8018ccc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8018cce:	2300      	movs	r3, #0
}
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	3714      	adds	r7, #20
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cda:	4770      	bx	lr
 8018cdc:	ec337800 	.word	0xec337800
 8018ce0:	eff37800 	.word	0xeff37800

08018ce4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b08a      	sub	sp, #40	; 0x28
 8018ce8:	af02      	add	r7, sp, #8
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	4613      	mov	r3, r2
 8018cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	785b      	ldrb	r3, [r3, #1]
 8018d00:	2b01      	cmp	r3, #1
 8018d02:	f040 8163 	bne.w	8018fcc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	695b      	ldr	r3, [r3, #20]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d132      	bne.n	8018d74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8018d0e:	69bb      	ldr	r3, [r7, #24]
 8018d10:	015a      	lsls	r2, r3, #5
 8018d12:	69fb      	ldr	r3, [r7, #28]
 8018d14:	4413      	add	r3, r2
 8018d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d1a:	691a      	ldr	r2, [r3, #16]
 8018d1c:	69bb      	ldr	r3, [r7, #24]
 8018d1e:	0159      	lsls	r1, r3, #5
 8018d20:	69fb      	ldr	r3, [r7, #28]
 8018d22:	440b      	add	r3, r1
 8018d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d28:	4619      	mov	r1, r3
 8018d2a:	4ba5      	ldr	r3, [pc, #660]	; (8018fc0 <USB_EPStartXfer+0x2dc>)
 8018d2c:	4013      	ands	r3, r2
 8018d2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8018d30:	69bb      	ldr	r3, [r7, #24]
 8018d32:	015a      	lsls	r2, r3, #5
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	4413      	add	r3, r2
 8018d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d3c:	691b      	ldr	r3, [r3, #16]
 8018d3e:	69ba      	ldr	r2, [r7, #24]
 8018d40:	0151      	lsls	r1, r2, #5
 8018d42:	69fa      	ldr	r2, [r7, #28]
 8018d44:	440a      	add	r2, r1
 8018d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8018d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8018d50:	69bb      	ldr	r3, [r7, #24]
 8018d52:	015a      	lsls	r2, r3, #5
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	4413      	add	r3, r2
 8018d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d5c:	691a      	ldr	r2, [r3, #16]
 8018d5e:	69bb      	ldr	r3, [r7, #24]
 8018d60:	0159      	lsls	r1, r3, #5
 8018d62:	69fb      	ldr	r3, [r7, #28]
 8018d64:	440b      	add	r3, r1
 8018d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	4b95      	ldr	r3, [pc, #596]	; (8018fc4 <USB_EPStartXfer+0x2e0>)
 8018d6e:	4013      	ands	r3, r2
 8018d70:	610b      	str	r3, [r1, #16]
 8018d72:	e074      	b.n	8018e5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8018d74:	69bb      	ldr	r3, [r7, #24]
 8018d76:	015a      	lsls	r2, r3, #5
 8018d78:	69fb      	ldr	r3, [r7, #28]
 8018d7a:	4413      	add	r3, r2
 8018d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d80:	691a      	ldr	r2, [r3, #16]
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	0159      	lsls	r1, r3, #5
 8018d86:	69fb      	ldr	r3, [r7, #28]
 8018d88:	440b      	add	r3, r1
 8018d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018d8e:	4619      	mov	r1, r3
 8018d90:	4b8c      	ldr	r3, [pc, #560]	; (8018fc4 <USB_EPStartXfer+0x2e0>)
 8018d92:	4013      	ands	r3, r2
 8018d94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8018d96:	69bb      	ldr	r3, [r7, #24]
 8018d98:	015a      	lsls	r2, r3, #5
 8018d9a:	69fb      	ldr	r3, [r7, #28]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018da2:	691a      	ldr	r2, [r3, #16]
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	0159      	lsls	r1, r3, #5
 8018da8:	69fb      	ldr	r3, [r7, #28]
 8018daa:	440b      	add	r3, r1
 8018dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018db0:	4619      	mov	r1, r3
 8018db2:	4b83      	ldr	r3, [pc, #524]	; (8018fc0 <USB_EPStartXfer+0x2dc>)
 8018db4:	4013      	ands	r3, r2
 8018db6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	015a      	lsls	r2, r3, #5
 8018dbc:	69fb      	ldr	r3, [r7, #28]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018dc4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8018dc6:	68bb      	ldr	r3, [r7, #8]
 8018dc8:	6959      	ldr	r1, [r3, #20]
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	689b      	ldr	r3, [r3, #8]
 8018dce:	440b      	add	r3, r1
 8018dd0:	1e59      	subs	r1, r3, #1
 8018dd2:	68bb      	ldr	r3, [r7, #8]
 8018dd4:	689b      	ldr	r3, [r3, #8]
 8018dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8018dda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8018ddc:	4b7a      	ldr	r3, [pc, #488]	; (8018fc8 <USB_EPStartXfer+0x2e4>)
 8018dde:	400b      	ands	r3, r1
 8018de0:	69b9      	ldr	r1, [r7, #24]
 8018de2:	0148      	lsls	r0, r1, #5
 8018de4:	69f9      	ldr	r1, [r7, #28]
 8018de6:	4401      	add	r1, r0
 8018de8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8018dec:	4313      	orrs	r3, r2
 8018dee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8018df0:	69bb      	ldr	r3, [r7, #24]
 8018df2:	015a      	lsls	r2, r3, #5
 8018df4:	69fb      	ldr	r3, [r7, #28]
 8018df6:	4413      	add	r3, r2
 8018df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018dfc:	691a      	ldr	r2, [r3, #16]
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	695b      	ldr	r3, [r3, #20]
 8018e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018e06:	69b9      	ldr	r1, [r7, #24]
 8018e08:	0148      	lsls	r0, r1, #5
 8018e0a:	69f9      	ldr	r1, [r7, #28]
 8018e0c:	4401      	add	r1, r0
 8018e0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8018e12:	4313      	orrs	r3, r2
 8018e14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	78db      	ldrb	r3, [r3, #3]
 8018e1a:	2b01      	cmp	r3, #1
 8018e1c:	d11f      	bne.n	8018e5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8018e1e:	69bb      	ldr	r3, [r7, #24]
 8018e20:	015a      	lsls	r2, r3, #5
 8018e22:	69fb      	ldr	r3, [r7, #28]
 8018e24:	4413      	add	r3, r2
 8018e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e2a:	691b      	ldr	r3, [r3, #16]
 8018e2c:	69ba      	ldr	r2, [r7, #24]
 8018e2e:	0151      	lsls	r1, r2, #5
 8018e30:	69fa      	ldr	r2, [r7, #28]
 8018e32:	440a      	add	r2, r1
 8018e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018e38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8018e3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8018e3e:	69bb      	ldr	r3, [r7, #24]
 8018e40:	015a      	lsls	r2, r3, #5
 8018e42:	69fb      	ldr	r3, [r7, #28]
 8018e44:	4413      	add	r3, r2
 8018e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e4a:	691b      	ldr	r3, [r3, #16]
 8018e4c:	69ba      	ldr	r2, [r7, #24]
 8018e4e:	0151      	lsls	r1, r2, #5
 8018e50:	69fa      	ldr	r2, [r7, #28]
 8018e52:	440a      	add	r2, r1
 8018e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018e5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8018e5e:	79fb      	ldrb	r3, [r7, #7]
 8018e60:	2b01      	cmp	r3, #1
 8018e62:	d14b      	bne.n	8018efc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	691b      	ldr	r3, [r3, #16]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d009      	beq.n	8018e80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8018e6c:	69bb      	ldr	r3, [r7, #24]
 8018e6e:	015a      	lsls	r2, r3, #5
 8018e70:	69fb      	ldr	r3, [r7, #28]
 8018e72:	4413      	add	r3, r2
 8018e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018e78:	461a      	mov	r2, r3
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	691b      	ldr	r3, [r3, #16]
 8018e7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	78db      	ldrb	r3, [r3, #3]
 8018e84:	2b01      	cmp	r3, #1
 8018e86:	d128      	bne.n	8018eda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8018e88:	69fb      	ldr	r3, [r7, #28]
 8018e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e8e:	689b      	ldr	r3, [r3, #8]
 8018e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d110      	bne.n	8018eba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8018e98:	69bb      	ldr	r3, [r7, #24]
 8018e9a:	015a      	lsls	r2, r3, #5
 8018e9c:	69fb      	ldr	r3, [r7, #28]
 8018e9e:	4413      	add	r3, r2
 8018ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	69ba      	ldr	r2, [r7, #24]
 8018ea8:	0151      	lsls	r1, r2, #5
 8018eaa:	69fa      	ldr	r2, [r7, #28]
 8018eac:	440a      	add	r2, r1
 8018eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018eb6:	6013      	str	r3, [r2, #0]
 8018eb8:	e00f      	b.n	8018eda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8018eba:	69bb      	ldr	r3, [r7, #24]
 8018ebc:	015a      	lsls	r2, r3, #5
 8018ebe:	69fb      	ldr	r3, [r7, #28]
 8018ec0:	4413      	add	r3, r2
 8018ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	69ba      	ldr	r2, [r7, #24]
 8018eca:	0151      	lsls	r1, r2, #5
 8018ecc:	69fa      	ldr	r2, [r7, #28]
 8018ece:	440a      	add	r2, r1
 8018ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018ed8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8018eda:	69bb      	ldr	r3, [r7, #24]
 8018edc:	015a      	lsls	r2, r3, #5
 8018ede:	69fb      	ldr	r3, [r7, #28]
 8018ee0:	4413      	add	r3, r2
 8018ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	69ba      	ldr	r2, [r7, #24]
 8018eea:	0151      	lsls	r1, r2, #5
 8018eec:	69fa      	ldr	r2, [r7, #28]
 8018eee:	440a      	add	r2, r1
 8018ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018ef4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8018ef8:	6013      	str	r3, [r2, #0]
 8018efa:	e133      	b.n	8019164 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8018efc:	69bb      	ldr	r3, [r7, #24]
 8018efe:	015a      	lsls	r2, r3, #5
 8018f00:	69fb      	ldr	r3, [r7, #28]
 8018f02:	4413      	add	r3, r2
 8018f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	69ba      	ldr	r2, [r7, #24]
 8018f0c:	0151      	lsls	r1, r2, #5
 8018f0e:	69fa      	ldr	r2, [r7, #28]
 8018f10:	440a      	add	r2, r1
 8018f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018f16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8018f1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018f1c:	68bb      	ldr	r3, [r7, #8]
 8018f1e:	78db      	ldrb	r3, [r3, #3]
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	d015      	beq.n	8018f50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	695b      	ldr	r3, [r3, #20]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f000 811b 	beq.w	8019164 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8018f2e:	69fb      	ldr	r3, [r7, #28]
 8018f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	781b      	ldrb	r3, [r3, #0]
 8018f3a:	f003 030f 	and.w	r3, r3, #15
 8018f3e:	2101      	movs	r1, #1
 8018f40:	fa01 f303 	lsl.w	r3, r1, r3
 8018f44:	69f9      	ldr	r1, [r7, #28]
 8018f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018f4a:	4313      	orrs	r3, r2
 8018f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8018f4e:	e109      	b.n	8019164 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8018f50:	69fb      	ldr	r3, [r7, #28]
 8018f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018f56:	689b      	ldr	r3, [r3, #8]
 8018f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d110      	bne.n	8018f82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	015a      	lsls	r2, r3, #5
 8018f64:	69fb      	ldr	r3, [r7, #28]
 8018f66:	4413      	add	r3, r2
 8018f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	69ba      	ldr	r2, [r7, #24]
 8018f70:	0151      	lsls	r1, r2, #5
 8018f72:	69fa      	ldr	r2, [r7, #28]
 8018f74:	440a      	add	r2, r1
 8018f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018f7e:	6013      	str	r3, [r2, #0]
 8018f80:	e00f      	b.n	8018fa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8018f82:	69bb      	ldr	r3, [r7, #24]
 8018f84:	015a      	lsls	r2, r3, #5
 8018f86:	69fb      	ldr	r3, [r7, #28]
 8018f88:	4413      	add	r3, r2
 8018f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	69ba      	ldr	r2, [r7, #24]
 8018f92:	0151      	lsls	r1, r2, #5
 8018f94:	69fa      	ldr	r2, [r7, #28]
 8018f96:	440a      	add	r2, r1
 8018f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018fa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	68d9      	ldr	r1, [r3, #12]
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	781a      	ldrb	r2, [r3, #0]
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	695b      	ldr	r3, [r3, #20]
 8018fae:	b298      	uxth	r0, r3
 8018fb0:	79fb      	ldrb	r3, [r7, #7]
 8018fb2:	9300      	str	r3, [sp, #0]
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	68f8      	ldr	r0, [r7, #12]
 8018fb8:	f000 fa38 	bl	801942c <USB_WritePacket>
 8018fbc:	e0d2      	b.n	8019164 <USB_EPStartXfer+0x480>
 8018fbe:	bf00      	nop
 8018fc0:	e007ffff 	.word	0xe007ffff
 8018fc4:	fff80000 	.word	0xfff80000
 8018fc8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8018fcc:	69bb      	ldr	r3, [r7, #24]
 8018fce:	015a      	lsls	r2, r3, #5
 8018fd0:	69fb      	ldr	r3, [r7, #28]
 8018fd2:	4413      	add	r3, r2
 8018fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fd8:	691a      	ldr	r2, [r3, #16]
 8018fda:	69bb      	ldr	r3, [r7, #24]
 8018fdc:	0159      	lsls	r1, r3, #5
 8018fde:	69fb      	ldr	r3, [r7, #28]
 8018fe0:	440b      	add	r3, r1
 8018fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fe6:	4619      	mov	r1, r3
 8018fe8:	4b61      	ldr	r3, [pc, #388]	; (8019170 <USB_EPStartXfer+0x48c>)
 8018fea:	4013      	ands	r3, r2
 8018fec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8018fee:	69bb      	ldr	r3, [r7, #24]
 8018ff0:	015a      	lsls	r2, r3, #5
 8018ff2:	69fb      	ldr	r3, [r7, #28]
 8018ff4:	4413      	add	r3, r2
 8018ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018ffa:	691a      	ldr	r2, [r3, #16]
 8018ffc:	69bb      	ldr	r3, [r7, #24]
 8018ffe:	0159      	lsls	r1, r3, #5
 8019000:	69fb      	ldr	r3, [r7, #28]
 8019002:	440b      	add	r3, r1
 8019004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019008:	4619      	mov	r1, r3
 801900a:	4b5a      	ldr	r3, [pc, #360]	; (8019174 <USB_EPStartXfer+0x490>)
 801900c:	4013      	ands	r3, r2
 801900e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	695b      	ldr	r3, [r3, #20]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d123      	bne.n	8019060 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	015a      	lsls	r2, r3, #5
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	4413      	add	r3, r2
 8019020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019024:	691a      	ldr	r2, [r3, #16]
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	689b      	ldr	r3, [r3, #8]
 801902a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801902e:	69b9      	ldr	r1, [r7, #24]
 8019030:	0148      	lsls	r0, r1, #5
 8019032:	69f9      	ldr	r1, [r7, #28]
 8019034:	4401      	add	r1, r0
 8019036:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801903a:	4313      	orrs	r3, r2
 801903c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801903e:	69bb      	ldr	r3, [r7, #24]
 8019040:	015a      	lsls	r2, r3, #5
 8019042:	69fb      	ldr	r3, [r7, #28]
 8019044:	4413      	add	r3, r2
 8019046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801904a:	691b      	ldr	r3, [r3, #16]
 801904c:	69ba      	ldr	r2, [r7, #24]
 801904e:	0151      	lsls	r1, r2, #5
 8019050:	69fa      	ldr	r2, [r7, #28]
 8019052:	440a      	add	r2, r1
 8019054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801905c:	6113      	str	r3, [r2, #16]
 801905e:	e033      	b.n	80190c8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	695a      	ldr	r2, [r3, #20]
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	689b      	ldr	r3, [r3, #8]
 8019068:	4413      	add	r3, r2
 801906a:	1e5a      	subs	r2, r3, #1
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	689b      	ldr	r3, [r3, #8]
 8019070:	fbb2 f3f3 	udiv	r3, r2, r3
 8019074:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	015a      	lsls	r2, r3, #5
 801907a:	69fb      	ldr	r3, [r7, #28]
 801907c:	4413      	add	r3, r2
 801907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019082:	691a      	ldr	r2, [r3, #16]
 8019084:	8afb      	ldrh	r3, [r7, #22]
 8019086:	04d9      	lsls	r1, r3, #19
 8019088:	4b3b      	ldr	r3, [pc, #236]	; (8019178 <USB_EPStartXfer+0x494>)
 801908a:	400b      	ands	r3, r1
 801908c:	69b9      	ldr	r1, [r7, #24]
 801908e:	0148      	lsls	r0, r1, #5
 8019090:	69f9      	ldr	r1, [r7, #28]
 8019092:	4401      	add	r1, r0
 8019094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019098:	4313      	orrs	r3, r2
 801909a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801909c:	69bb      	ldr	r3, [r7, #24]
 801909e:	015a      	lsls	r2, r3, #5
 80190a0:	69fb      	ldr	r3, [r7, #28]
 80190a2:	4413      	add	r3, r2
 80190a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80190a8:	691a      	ldr	r2, [r3, #16]
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	689b      	ldr	r3, [r3, #8]
 80190ae:	8af9      	ldrh	r1, [r7, #22]
 80190b0:	fb01 f303 	mul.w	r3, r1, r3
 80190b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190b8:	69b9      	ldr	r1, [r7, #24]
 80190ba:	0148      	lsls	r0, r1, #5
 80190bc:	69f9      	ldr	r1, [r7, #28]
 80190be:	4401      	add	r1, r0
 80190c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80190c4:	4313      	orrs	r3, r2
 80190c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80190c8:	79fb      	ldrb	r3, [r7, #7]
 80190ca:	2b01      	cmp	r3, #1
 80190cc:	d10d      	bne.n	80190ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80190ce:	68bb      	ldr	r3, [r7, #8]
 80190d0:	68db      	ldr	r3, [r3, #12]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d009      	beq.n	80190ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	68d9      	ldr	r1, [r3, #12]
 80190da:	69bb      	ldr	r3, [r7, #24]
 80190dc:	015a      	lsls	r2, r3, #5
 80190de:	69fb      	ldr	r3, [r7, #28]
 80190e0:	4413      	add	r3, r2
 80190e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80190e6:	460a      	mov	r2, r1
 80190e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80190ea:	68bb      	ldr	r3, [r7, #8]
 80190ec:	78db      	ldrb	r3, [r3, #3]
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	d128      	bne.n	8019144 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80190f2:	69fb      	ldr	r3, [r7, #28]
 80190f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80190f8:	689b      	ldr	r3, [r3, #8]
 80190fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d110      	bne.n	8019124 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	015a      	lsls	r2, r3, #5
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	4413      	add	r3, r2
 801910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	69ba      	ldr	r2, [r7, #24]
 8019112:	0151      	lsls	r1, r2, #5
 8019114:	69fa      	ldr	r2, [r7, #28]
 8019116:	440a      	add	r2, r1
 8019118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801911c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019120:	6013      	str	r3, [r2, #0]
 8019122:	e00f      	b.n	8019144 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8019124:	69bb      	ldr	r3, [r7, #24]
 8019126:	015a      	lsls	r2, r3, #5
 8019128:	69fb      	ldr	r3, [r7, #28]
 801912a:	4413      	add	r3, r2
 801912c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	69ba      	ldr	r2, [r7, #24]
 8019134:	0151      	lsls	r1, r2, #5
 8019136:	69fa      	ldr	r2, [r7, #28]
 8019138:	440a      	add	r2, r1
 801913a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801913e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019142:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019144:	69bb      	ldr	r3, [r7, #24]
 8019146:	015a      	lsls	r2, r3, #5
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	4413      	add	r3, r2
 801914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	69ba      	ldr	r2, [r7, #24]
 8019154:	0151      	lsls	r1, r2, #5
 8019156:	69fa      	ldr	r2, [r7, #28]
 8019158:	440a      	add	r2, r1
 801915a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801915e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019164:	2300      	movs	r3, #0
}
 8019166:	4618      	mov	r0, r3
 8019168:	3720      	adds	r7, #32
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	fff80000 	.word	0xfff80000
 8019174:	e007ffff 	.word	0xe007ffff
 8019178:	1ff80000 	.word	0x1ff80000

0801917c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801917c:	b480      	push	{r7}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	4613      	mov	r3, r2
 8019188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	785b      	ldrb	r3, [r3, #1]
 8019198:	2b01      	cmp	r3, #1
 801919a:	f040 80cd 	bne.w	8019338 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801919e:	68bb      	ldr	r3, [r7, #8]
 80191a0:	695b      	ldr	r3, [r3, #20]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d132      	bne.n	801920c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80191a6:	693b      	ldr	r3, [r7, #16]
 80191a8:	015a      	lsls	r2, r3, #5
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	4413      	add	r3, r2
 80191ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191b2:	691a      	ldr	r2, [r3, #16]
 80191b4:	693b      	ldr	r3, [r7, #16]
 80191b6:	0159      	lsls	r1, r3, #5
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	440b      	add	r3, r1
 80191bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191c0:	4619      	mov	r1, r3
 80191c2:	4b98      	ldr	r3, [pc, #608]	; (8019424 <USB_EP0StartXfer+0x2a8>)
 80191c4:	4013      	ands	r3, r2
 80191c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80191c8:	693b      	ldr	r3, [r7, #16]
 80191ca:	015a      	lsls	r2, r3, #5
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	4413      	add	r3, r2
 80191d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191d4:	691b      	ldr	r3, [r3, #16]
 80191d6:	693a      	ldr	r2, [r7, #16]
 80191d8:	0151      	lsls	r1, r2, #5
 80191da:	697a      	ldr	r2, [r7, #20]
 80191dc:	440a      	add	r2, r1
 80191de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80191e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80191e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	015a      	lsls	r2, r3, #5
 80191ec:	697b      	ldr	r3, [r7, #20]
 80191ee:	4413      	add	r3, r2
 80191f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191f4:	691a      	ldr	r2, [r3, #16]
 80191f6:	693b      	ldr	r3, [r7, #16]
 80191f8:	0159      	lsls	r1, r3, #5
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	440b      	add	r3, r1
 80191fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019202:	4619      	mov	r1, r3
 8019204:	4b88      	ldr	r3, [pc, #544]	; (8019428 <USB_EP0StartXfer+0x2ac>)
 8019206:	4013      	ands	r3, r2
 8019208:	610b      	str	r3, [r1, #16]
 801920a:	e04e      	b.n	80192aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801920c:	693b      	ldr	r3, [r7, #16]
 801920e:	015a      	lsls	r2, r3, #5
 8019210:	697b      	ldr	r3, [r7, #20]
 8019212:	4413      	add	r3, r2
 8019214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019218:	691a      	ldr	r2, [r3, #16]
 801921a:	693b      	ldr	r3, [r7, #16]
 801921c:	0159      	lsls	r1, r3, #5
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	440b      	add	r3, r1
 8019222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019226:	4619      	mov	r1, r3
 8019228:	4b7f      	ldr	r3, [pc, #508]	; (8019428 <USB_EP0StartXfer+0x2ac>)
 801922a:	4013      	ands	r3, r2
 801922c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	015a      	lsls	r2, r3, #5
 8019232:	697b      	ldr	r3, [r7, #20]
 8019234:	4413      	add	r3, r2
 8019236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801923a:	691a      	ldr	r2, [r3, #16]
 801923c:	693b      	ldr	r3, [r7, #16]
 801923e:	0159      	lsls	r1, r3, #5
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	440b      	add	r3, r1
 8019244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019248:	4619      	mov	r1, r3
 801924a:	4b76      	ldr	r3, [pc, #472]	; (8019424 <USB_EP0StartXfer+0x2a8>)
 801924c:	4013      	ands	r3, r2
 801924e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	695a      	ldr	r2, [r3, #20]
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	689b      	ldr	r3, [r3, #8]
 8019258:	429a      	cmp	r2, r3
 801925a:	d903      	bls.n	8019264 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801925c:	68bb      	ldr	r3, [r7, #8]
 801925e:	689a      	ldr	r2, [r3, #8]
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	015a      	lsls	r2, r3, #5
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	4413      	add	r3, r2
 801926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019270:	691b      	ldr	r3, [r3, #16]
 8019272:	693a      	ldr	r2, [r7, #16]
 8019274:	0151      	lsls	r1, r2, #5
 8019276:	697a      	ldr	r2, [r7, #20]
 8019278:	440a      	add	r2, r1
 801927a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801927e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	015a      	lsls	r2, r3, #5
 8019288:	697b      	ldr	r3, [r7, #20]
 801928a:	4413      	add	r3, r2
 801928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019290:	691a      	ldr	r2, [r3, #16]
 8019292:	68bb      	ldr	r3, [r7, #8]
 8019294:	695b      	ldr	r3, [r3, #20]
 8019296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801929a:	6939      	ldr	r1, [r7, #16]
 801929c:	0148      	lsls	r0, r1, #5
 801929e:	6979      	ldr	r1, [r7, #20]
 80192a0:	4401      	add	r1, r0
 80192a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80192a6:	4313      	orrs	r3, r2
 80192a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80192aa:	79fb      	ldrb	r3, [r7, #7]
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	d11e      	bne.n	80192ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	691b      	ldr	r3, [r3, #16]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d009      	beq.n	80192cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	015a      	lsls	r2, r3, #5
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	4413      	add	r3, r2
 80192c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192c4:	461a      	mov	r2, r3
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	691b      	ldr	r3, [r3, #16]
 80192ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	015a      	lsls	r2, r3, #5
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	4413      	add	r3, r2
 80192d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	693a      	ldr	r2, [r7, #16]
 80192dc:	0151      	lsls	r1, r2, #5
 80192de:	697a      	ldr	r2, [r7, #20]
 80192e0:	440a      	add	r2, r1
 80192e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80192e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80192ea:	6013      	str	r3, [r2, #0]
 80192ec:	e092      	b.n	8019414 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	015a      	lsls	r2, r3, #5
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	4413      	add	r3, r2
 80192f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	693a      	ldr	r2, [r7, #16]
 80192fe:	0151      	lsls	r1, r2, #5
 8019300:	697a      	ldr	r2, [r7, #20]
 8019302:	440a      	add	r2, r1
 8019304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019308:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801930c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801930e:	68bb      	ldr	r3, [r7, #8]
 8019310:	695b      	ldr	r3, [r3, #20]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d07e      	beq.n	8019414 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019316:	697b      	ldr	r3, [r7, #20]
 8019318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801931c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801931e:	68bb      	ldr	r3, [r7, #8]
 8019320:	781b      	ldrb	r3, [r3, #0]
 8019322:	f003 030f 	and.w	r3, r3, #15
 8019326:	2101      	movs	r1, #1
 8019328:	fa01 f303 	lsl.w	r3, r1, r3
 801932c:	6979      	ldr	r1, [r7, #20]
 801932e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019332:	4313      	orrs	r3, r2
 8019334:	634b      	str	r3, [r1, #52]	; 0x34
 8019336:	e06d      	b.n	8019414 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	015a      	lsls	r2, r3, #5
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	4413      	add	r3, r2
 8019340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019344:	691a      	ldr	r2, [r3, #16]
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	0159      	lsls	r1, r3, #5
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	440b      	add	r3, r1
 801934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019352:	4619      	mov	r1, r3
 8019354:	4b34      	ldr	r3, [pc, #208]	; (8019428 <USB_EP0StartXfer+0x2ac>)
 8019356:	4013      	ands	r3, r2
 8019358:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	015a      	lsls	r2, r3, #5
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	4413      	add	r3, r2
 8019362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019366:	691a      	ldr	r2, [r3, #16]
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	0159      	lsls	r1, r3, #5
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	440b      	add	r3, r1
 8019370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019374:	4619      	mov	r1, r3
 8019376:	4b2b      	ldr	r3, [pc, #172]	; (8019424 <USB_EP0StartXfer+0x2a8>)
 8019378:	4013      	ands	r3, r2
 801937a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	695b      	ldr	r3, [r3, #20]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d003      	beq.n	801938c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8019384:	68bb      	ldr	r3, [r7, #8]
 8019386:	689a      	ldr	r2, [r3, #8]
 8019388:	68bb      	ldr	r3, [r7, #8]
 801938a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801938c:	693b      	ldr	r3, [r7, #16]
 801938e:	015a      	lsls	r2, r3, #5
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	4413      	add	r3, r2
 8019394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019398:	691b      	ldr	r3, [r3, #16]
 801939a:	693a      	ldr	r2, [r7, #16]
 801939c:	0151      	lsls	r1, r2, #5
 801939e:	697a      	ldr	r2, [r7, #20]
 80193a0:	440a      	add	r2, r1
 80193a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80193a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80193aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	015a      	lsls	r2, r3, #5
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	4413      	add	r3, r2
 80193b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193b8:	691a      	ldr	r2, [r3, #16]
 80193ba:	68bb      	ldr	r3, [r7, #8]
 80193bc:	689b      	ldr	r3, [r3, #8]
 80193be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80193c2:	6939      	ldr	r1, [r7, #16]
 80193c4:	0148      	lsls	r0, r1, #5
 80193c6:	6979      	ldr	r1, [r7, #20]
 80193c8:	4401      	add	r1, r0
 80193ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80193ce:	4313      	orrs	r3, r2
 80193d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80193d2:	79fb      	ldrb	r3, [r7, #7]
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	d10d      	bne.n	80193f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d009      	beq.n	80193f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	68d9      	ldr	r1, [r3, #12]
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	015a      	lsls	r2, r3, #5
 80193e8:	697b      	ldr	r3, [r7, #20]
 80193ea:	4413      	add	r3, r2
 80193ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193f0:	460a      	mov	r2, r1
 80193f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80193f4:	693b      	ldr	r3, [r7, #16]
 80193f6:	015a      	lsls	r2, r3, #5
 80193f8:	697b      	ldr	r3, [r7, #20]
 80193fa:	4413      	add	r3, r2
 80193fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	693a      	ldr	r2, [r7, #16]
 8019404:	0151      	lsls	r1, r2, #5
 8019406:	697a      	ldr	r2, [r7, #20]
 8019408:	440a      	add	r2, r1
 801940a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801940e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019414:	2300      	movs	r3, #0
}
 8019416:	4618      	mov	r0, r3
 8019418:	371c      	adds	r7, #28
 801941a:	46bd      	mov	sp, r7
 801941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019420:	4770      	bx	lr
 8019422:	bf00      	nop
 8019424:	e007ffff 	.word	0xe007ffff
 8019428:	fff80000 	.word	0xfff80000

0801942c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801942c:	b480      	push	{r7}
 801942e:	b089      	sub	sp, #36	; 0x24
 8019430:	af00      	add	r7, sp, #0
 8019432:	60f8      	str	r0, [r7, #12]
 8019434:	60b9      	str	r1, [r7, #8]
 8019436:	4611      	mov	r1, r2
 8019438:	461a      	mov	r2, r3
 801943a:	460b      	mov	r3, r1
 801943c:	71fb      	strb	r3, [r7, #7]
 801943e:	4613      	mov	r3, r2
 8019440:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8019446:	68bb      	ldr	r3, [r7, #8]
 8019448:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801944a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801944e:	2b00      	cmp	r3, #0
 8019450:	d123      	bne.n	801949a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8019452:	88bb      	ldrh	r3, [r7, #4]
 8019454:	3303      	adds	r3, #3
 8019456:	089b      	lsrs	r3, r3, #2
 8019458:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801945a:	2300      	movs	r3, #0
 801945c:	61bb      	str	r3, [r7, #24]
 801945e:	e018      	b.n	8019492 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8019460:	79fb      	ldrb	r3, [r7, #7]
 8019462:	031a      	lsls	r2, r3, #12
 8019464:	697b      	ldr	r3, [r7, #20]
 8019466:	4413      	add	r3, r2
 8019468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801946c:	461a      	mov	r2, r3
 801946e:	69fb      	ldr	r3, [r7, #28]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	6013      	str	r3, [r2, #0]
      pSrc++;
 8019474:	69fb      	ldr	r3, [r7, #28]
 8019476:	3301      	adds	r3, #1
 8019478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801947a:	69fb      	ldr	r3, [r7, #28]
 801947c:	3301      	adds	r3, #1
 801947e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019480:	69fb      	ldr	r3, [r7, #28]
 8019482:	3301      	adds	r3, #1
 8019484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019486:	69fb      	ldr	r3, [r7, #28]
 8019488:	3301      	adds	r3, #1
 801948a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801948c:	69bb      	ldr	r3, [r7, #24]
 801948e:	3301      	adds	r3, #1
 8019490:	61bb      	str	r3, [r7, #24]
 8019492:	69ba      	ldr	r2, [r7, #24]
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	429a      	cmp	r2, r3
 8019498:	d3e2      	bcc.n	8019460 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801949a:	2300      	movs	r3, #0
}
 801949c:	4618      	mov	r0, r3
 801949e:	3724      	adds	r7, #36	; 0x24
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr

080194a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80194a8:	b480      	push	{r7}
 80194aa:	b08b      	sub	sp, #44	; 0x2c
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	60f8      	str	r0, [r7, #12]
 80194b0:	60b9      	str	r1, [r7, #8]
 80194b2:	4613      	mov	r3, r2
 80194b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80194be:	88fb      	ldrh	r3, [r7, #6]
 80194c0:	089b      	lsrs	r3, r3, #2
 80194c2:	b29b      	uxth	r3, r3
 80194c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80194c6:	88fb      	ldrh	r3, [r7, #6]
 80194c8:	f003 0303 	and.w	r3, r3, #3
 80194cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80194ce:	2300      	movs	r3, #0
 80194d0:	623b      	str	r3, [r7, #32]
 80194d2:	e014      	b.n	80194fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80194d4:	69bb      	ldr	r3, [r7, #24]
 80194d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194de:	601a      	str	r2, [r3, #0]
    pDest++;
 80194e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e2:	3301      	adds	r3, #1
 80194e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80194e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e8:	3301      	adds	r3, #1
 80194ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80194ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ee:	3301      	adds	r3, #1
 80194f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80194f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f4:	3301      	adds	r3, #1
 80194f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80194f8:	6a3b      	ldr	r3, [r7, #32]
 80194fa:	3301      	adds	r3, #1
 80194fc:	623b      	str	r3, [r7, #32]
 80194fe:	6a3a      	ldr	r2, [r7, #32]
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	429a      	cmp	r2, r3
 8019504:	d3e6      	bcc.n	80194d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8019506:	8bfb      	ldrh	r3, [r7, #30]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d01e      	beq.n	801954a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801950c:	2300      	movs	r3, #0
 801950e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8019510:	69bb      	ldr	r3, [r7, #24]
 8019512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019516:	461a      	mov	r2, r3
 8019518:	f107 0310 	add.w	r3, r7, #16
 801951c:	6812      	ldr	r2, [r2, #0]
 801951e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8019520:	693a      	ldr	r2, [r7, #16]
 8019522:	6a3b      	ldr	r3, [r7, #32]
 8019524:	b2db      	uxtb	r3, r3
 8019526:	00db      	lsls	r3, r3, #3
 8019528:	fa22 f303 	lsr.w	r3, r2, r3
 801952c:	b2da      	uxtb	r2, r3
 801952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019530:	701a      	strb	r2, [r3, #0]
      i++;
 8019532:	6a3b      	ldr	r3, [r7, #32]
 8019534:	3301      	adds	r3, #1
 8019536:	623b      	str	r3, [r7, #32]
      pDest++;
 8019538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801953a:	3301      	adds	r3, #1
 801953c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801953e:	8bfb      	ldrh	r3, [r7, #30]
 8019540:	3b01      	subs	r3, #1
 8019542:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8019544:	8bfb      	ldrh	r3, [r7, #30]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d1ea      	bne.n	8019520 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801954c:	4618      	mov	r0, r3
 801954e:	372c      	adds	r7, #44	; 0x2c
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr

08019558 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019558:	b480      	push	{r7}
 801955a:	b085      	sub	sp, #20
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
 8019560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	785b      	ldrb	r3, [r3, #1]
 8019570:	2b01      	cmp	r3, #1
 8019572:	d12c      	bne.n	80195ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019574:	68bb      	ldr	r3, [r7, #8]
 8019576:	015a      	lsls	r2, r3, #5
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	4413      	add	r3, r2
 801957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	2b00      	cmp	r3, #0
 8019584:	db12      	blt.n	80195ac <USB_EPSetStall+0x54>
 8019586:	68bb      	ldr	r3, [r7, #8]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00f      	beq.n	80195ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	015a      	lsls	r2, r3, #5
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	4413      	add	r3, r2
 8019594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	68ba      	ldr	r2, [r7, #8]
 801959c:	0151      	lsls	r1, r2, #5
 801959e:	68fa      	ldr	r2, [r7, #12]
 80195a0:	440a      	add	r2, r1
 80195a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80195aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	015a      	lsls	r2, r3, #5
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	4413      	add	r3, r2
 80195b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	68ba      	ldr	r2, [r7, #8]
 80195bc:	0151      	lsls	r1, r2, #5
 80195be:	68fa      	ldr	r2, [r7, #12]
 80195c0:	440a      	add	r2, r1
 80195c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80195ca:	6013      	str	r3, [r2, #0]
 80195cc:	e02b      	b.n	8019626 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80195ce:	68bb      	ldr	r3, [r7, #8]
 80195d0:	015a      	lsls	r2, r3, #5
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	4413      	add	r3, r2
 80195d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	db12      	blt.n	8019606 <USB_EPSetStall+0xae>
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d00f      	beq.n	8019606 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	015a      	lsls	r2, r3, #5
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	4413      	add	r3, r2
 80195ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	68ba      	ldr	r2, [r7, #8]
 80195f6:	0151      	lsls	r1, r2, #5
 80195f8:	68fa      	ldr	r2, [r7, #12]
 80195fa:	440a      	add	r2, r1
 80195fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019600:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019604:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	015a      	lsls	r2, r3, #5
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	4413      	add	r3, r2
 801960e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	68ba      	ldr	r2, [r7, #8]
 8019616:	0151      	lsls	r1, r2, #5
 8019618:	68fa      	ldr	r2, [r7, #12]
 801961a:	440a      	add	r2, r1
 801961c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019624:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019626:	2300      	movs	r3, #0
}
 8019628:	4618      	mov	r0, r3
 801962a:	3714      	adds	r7, #20
 801962c:	46bd      	mov	sp, r7
 801962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019632:	4770      	bx	lr

08019634 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019634:	b480      	push	{r7}
 8019636:	b085      	sub	sp, #20
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	785b      	ldrb	r3, [r3, #1]
 801964c:	2b01      	cmp	r3, #1
 801964e:	d128      	bne.n	80196a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	015a      	lsls	r2, r3, #5
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	4413      	add	r3, r2
 8019658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	68ba      	ldr	r2, [r7, #8]
 8019660:	0151      	lsls	r1, r2, #5
 8019662:	68fa      	ldr	r2, [r7, #12]
 8019664:	440a      	add	r2, r1
 8019666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801966a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801966e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	78db      	ldrb	r3, [r3, #3]
 8019674:	2b03      	cmp	r3, #3
 8019676:	d003      	beq.n	8019680 <USB_EPClearStall+0x4c>
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	78db      	ldrb	r3, [r3, #3]
 801967c:	2b02      	cmp	r3, #2
 801967e:	d138      	bne.n	80196f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019680:	68bb      	ldr	r3, [r7, #8]
 8019682:	015a      	lsls	r2, r3, #5
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	4413      	add	r3, r2
 8019688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	68ba      	ldr	r2, [r7, #8]
 8019690:	0151      	lsls	r1, r2, #5
 8019692:	68fa      	ldr	r2, [r7, #12]
 8019694:	440a      	add	r2, r1
 8019696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801969a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801969e:	6013      	str	r3, [r2, #0]
 80196a0:	e027      	b.n	80196f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	015a      	lsls	r2, r3, #5
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	4413      	add	r3, r2
 80196aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	68ba      	ldr	r2, [r7, #8]
 80196b2:	0151      	lsls	r1, r2, #5
 80196b4:	68fa      	ldr	r2, [r7, #12]
 80196b6:	440a      	add	r2, r1
 80196b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80196bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80196c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80196c2:	683b      	ldr	r3, [r7, #0]
 80196c4:	78db      	ldrb	r3, [r3, #3]
 80196c6:	2b03      	cmp	r3, #3
 80196c8:	d003      	beq.n	80196d2 <USB_EPClearStall+0x9e>
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	78db      	ldrb	r3, [r3, #3]
 80196ce:	2b02      	cmp	r3, #2
 80196d0:	d10f      	bne.n	80196f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80196d2:	68bb      	ldr	r3, [r7, #8]
 80196d4:	015a      	lsls	r2, r3, #5
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	4413      	add	r3, r2
 80196da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	68ba      	ldr	r2, [r7, #8]
 80196e2:	0151      	lsls	r1, r2, #5
 80196e4:	68fa      	ldr	r2, [r7, #12]
 80196e6:	440a      	add	r2, r1
 80196e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80196ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80196f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80196f2:	2300      	movs	r3, #0
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3714      	adds	r7, #20
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr

08019700 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8019700:	b480      	push	{r7}
 8019702:	b085      	sub	sp, #20
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
 8019708:	460b      	mov	r3, r1
 801970a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	68fa      	ldr	r2, [r7, #12]
 801971a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801971e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8019722:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801972a:	681a      	ldr	r2, [r3, #0]
 801972c:	78fb      	ldrb	r3, [r7, #3]
 801972e:	011b      	lsls	r3, r3, #4
 8019730:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8019734:	68f9      	ldr	r1, [r7, #12]
 8019736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801973a:	4313      	orrs	r3, r2
 801973c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801973e:	2300      	movs	r3, #0
}
 8019740:	4618      	mov	r0, r3
 8019742:	3714      	adds	r7, #20
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr

0801974c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801974c:	b480      	push	{r7}
 801974e:	b085      	sub	sp, #20
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	68fa      	ldr	r2, [r7, #12]
 8019762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019766:	f023 0303 	bic.w	r3, r3, #3
 801976a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801977a:	f023 0302 	bic.w	r3, r3, #2
 801977e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8019780:	2300      	movs	r3, #0
}
 8019782:	4618      	mov	r0, r3
 8019784:	3714      	adds	r7, #20
 8019786:	46bd      	mov	sp, r7
 8019788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978c:	4770      	bx	lr

0801978e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801978e:	b480      	push	{r7}
 8019790:	b085      	sub	sp, #20
 8019792:	af00      	add	r7, sp, #0
 8019794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	68fa      	ldr	r2, [r7, #12]
 80197a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80197a8:	f023 0303 	bic.w	r3, r3, #3
 80197ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80197b4:	685b      	ldr	r3, [r3, #4]
 80197b6:	68fa      	ldr	r2, [r7, #12]
 80197b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80197bc:	f043 0302 	orr.w	r3, r3, #2
 80197c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80197c2:	2300      	movs	r3, #0
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3714      	adds	r7, #20
 80197c8:	46bd      	mov	sp, r7
 80197ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ce:	4770      	bx	lr

080197d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80197d0:	b480      	push	{r7}
 80197d2:	b085      	sub	sp, #20
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	695b      	ldr	r3, [r3, #20]
 80197dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	699b      	ldr	r3, [r3, #24]
 80197e2:	68fa      	ldr	r2, [r7, #12]
 80197e4:	4013      	ands	r3, r2
 80197e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80197e8:	68fb      	ldr	r3, [r7, #12]
}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3714      	adds	r7, #20
 80197ee:	46bd      	mov	sp, r7
 80197f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f4:	4770      	bx	lr

080197f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80197f6:	b480      	push	{r7}
 80197f8:	b085      	sub	sp, #20
 80197fa:	af00      	add	r7, sp, #0
 80197fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019808:	699b      	ldr	r3, [r3, #24]
 801980a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019812:	69db      	ldr	r3, [r3, #28]
 8019814:	68ba      	ldr	r2, [r7, #8]
 8019816:	4013      	ands	r3, r2
 8019818:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	0c1b      	lsrs	r3, r3, #16
}
 801981e:	4618      	mov	r0, r3
 8019820:	3714      	adds	r7, #20
 8019822:	46bd      	mov	sp, r7
 8019824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019828:	4770      	bx	lr

0801982a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801982a:	b480      	push	{r7}
 801982c:	b085      	sub	sp, #20
 801982e:	af00      	add	r7, sp, #0
 8019830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801983c:	699b      	ldr	r3, [r3, #24]
 801983e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019846:	69db      	ldr	r3, [r3, #28]
 8019848:	68ba      	ldr	r2, [r7, #8]
 801984a:	4013      	ands	r3, r2
 801984c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	b29b      	uxth	r3, r3
}
 8019852:	4618      	mov	r0, r3
 8019854:	3714      	adds	r7, #20
 8019856:	46bd      	mov	sp, r7
 8019858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985c:	4770      	bx	lr

0801985e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801985e:	b480      	push	{r7}
 8019860:	b085      	sub	sp, #20
 8019862:	af00      	add	r7, sp, #0
 8019864:	6078      	str	r0, [r7, #4]
 8019866:	460b      	mov	r3, r1
 8019868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801986e:	78fb      	ldrb	r3, [r7, #3]
 8019870:	015a      	lsls	r2, r3, #5
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	4413      	add	r3, r2
 8019876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801987a:	689b      	ldr	r3, [r3, #8]
 801987c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019884:	695b      	ldr	r3, [r3, #20]
 8019886:	68ba      	ldr	r2, [r7, #8]
 8019888:	4013      	ands	r3, r2
 801988a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801988c:	68bb      	ldr	r3, [r7, #8]
}
 801988e:	4618      	mov	r0, r3
 8019890:	3714      	adds	r7, #20
 8019892:	46bd      	mov	sp, r7
 8019894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019898:	4770      	bx	lr

0801989a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801989a:	b480      	push	{r7}
 801989c:	b087      	sub	sp, #28
 801989e:	af00      	add	r7, sp, #0
 80198a0:	6078      	str	r0, [r7, #4]
 80198a2:	460b      	mov	r3, r1
 80198a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80198aa:	697b      	ldr	r3, [r7, #20]
 80198ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80198b0:	691b      	ldr	r3, [r3, #16]
 80198b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80198ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80198be:	78fb      	ldrb	r3, [r7, #3]
 80198c0:	f003 030f 	and.w	r3, r3, #15
 80198c4:	68fa      	ldr	r2, [r7, #12]
 80198c6:	fa22 f303 	lsr.w	r3, r2, r3
 80198ca:	01db      	lsls	r3, r3, #7
 80198cc:	b2db      	uxtb	r3, r3
 80198ce:	693a      	ldr	r2, [r7, #16]
 80198d0:	4313      	orrs	r3, r2
 80198d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80198d4:	78fb      	ldrb	r3, [r7, #3]
 80198d6:	015a      	lsls	r2, r3, #5
 80198d8:	697b      	ldr	r3, [r7, #20]
 80198da:	4413      	add	r3, r2
 80198dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80198e0:	689b      	ldr	r3, [r3, #8]
 80198e2:	693a      	ldr	r2, [r7, #16]
 80198e4:	4013      	ands	r3, r2
 80198e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80198e8:	68bb      	ldr	r3, [r7, #8]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	371c      	adds	r7, #28
 80198ee:	46bd      	mov	sp, r7
 80198f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f4:	4770      	bx	lr

080198f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80198f6:	b480      	push	{r7}
 80198f8:	b083      	sub	sp, #12
 80198fa:	af00      	add	r7, sp, #0
 80198fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	695b      	ldr	r3, [r3, #20]
 8019902:	f003 0301 	and.w	r3, r3, #1
}
 8019906:	4618      	mov	r0, r3
 8019908:	370c      	adds	r7, #12
 801990a:	46bd      	mov	sp, r7
 801990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019910:	4770      	bx	lr
	...

08019914 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8019914:	b480      	push	{r7}
 8019916:	b085      	sub	sp, #20
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019926:	681a      	ldr	r2, [r3, #0]
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801992e:	4619      	mov	r1, r3
 8019930:	4b09      	ldr	r3, [pc, #36]	; (8019958 <USB_ActivateSetup+0x44>)
 8019932:	4013      	ands	r3, r2
 8019934:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801993c:	685b      	ldr	r3, [r3, #4]
 801993e:	68fa      	ldr	r2, [r7, #12]
 8019940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019948:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801994a:	2300      	movs	r3, #0
}
 801994c:	4618      	mov	r0, r3
 801994e:	3714      	adds	r7, #20
 8019950:	46bd      	mov	sp, r7
 8019952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019956:	4770      	bx	lr
 8019958:	fffff800 	.word	0xfffff800

0801995c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801995c:	b480      	push	{r7}
 801995e:	b087      	sub	sp, #28
 8019960:	af00      	add	r7, sp, #0
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	460b      	mov	r3, r1
 8019966:	607a      	str	r2, [r7, #4]
 8019968:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	333c      	adds	r3, #60	; 0x3c
 8019972:	3304      	adds	r3, #4
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	4a26      	ldr	r2, [pc, #152]	; (8019a14 <USB_EP0_OutStart+0xb8>)
 801997c:	4293      	cmp	r3, r2
 801997e:	d90a      	bls.n	8019996 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801998c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019990:	d101      	bne.n	8019996 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8019992:	2300      	movs	r3, #0
 8019994:	e037      	b.n	8019a06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8019996:	697b      	ldr	r3, [r7, #20]
 8019998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801999c:	461a      	mov	r2, r3
 801999e:	2300      	movs	r3, #0
 80199a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199a8:	691b      	ldr	r3, [r3, #16]
 80199aa:	697a      	ldr	r2, [r7, #20]
 80199ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80199b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80199b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80199b6:	697b      	ldr	r3, [r7, #20]
 80199b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199bc:	691b      	ldr	r3, [r3, #16]
 80199be:	697a      	ldr	r2, [r7, #20]
 80199c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80199c4:	f043 0318 	orr.w	r3, r3, #24
 80199c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199d0:	691b      	ldr	r3, [r3, #16]
 80199d2:	697a      	ldr	r2, [r7, #20]
 80199d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80199d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80199dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80199de:	7afb      	ldrb	r3, [r7, #11]
 80199e0:	2b01      	cmp	r3, #1
 80199e2:	d10f      	bne.n	8019a04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199ea:	461a      	mov	r2, r3
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80199f0:	697b      	ldr	r3, [r7, #20]
 80199f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	697a      	ldr	r2, [r7, #20]
 80199fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80199fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8019a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019a04:	2300      	movs	r3, #0
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	371c      	adds	r7, #28
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	4f54300a 	.word	0x4f54300a

08019a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019a20:	2300      	movs	r3, #0
 8019a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	3301      	adds	r3, #1
 8019a28:	60fb      	str	r3, [r7, #12]
 8019a2a:	4a13      	ldr	r2, [pc, #76]	; (8019a78 <USB_CoreReset+0x60>)
 8019a2c:	4293      	cmp	r3, r2
 8019a2e:	d901      	bls.n	8019a34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8019a30:	2303      	movs	r3, #3
 8019a32:	e01a      	b.n	8019a6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	691b      	ldr	r3, [r3, #16]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	daf3      	bge.n	8019a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	691b      	ldr	r3, [r3, #16]
 8019a44:	f043 0201 	orr.w	r2, r3, #1
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	3301      	adds	r3, #1
 8019a50:	60fb      	str	r3, [r7, #12]
 8019a52:	4a09      	ldr	r2, [pc, #36]	; (8019a78 <USB_CoreReset+0x60>)
 8019a54:	4293      	cmp	r3, r2
 8019a56:	d901      	bls.n	8019a5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8019a58:	2303      	movs	r3, #3
 8019a5a:	e006      	b.n	8019a6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	691b      	ldr	r3, [r3, #16]
 8019a60:	f003 0301 	and.w	r3, r3, #1
 8019a64:	2b01      	cmp	r3, #1
 8019a66:	d0f1      	beq.n	8019a4c <USB_CoreReset+0x34>

  return HAL_OK;
 8019a68:	2300      	movs	r3, #0
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3714      	adds	r7, #20
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a74:	4770      	bx	lr
 8019a76:	bf00      	nop
 8019a78:	00030d40 	.word	0x00030d40

08019a7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b084      	sub	sp, #16
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
 8019a84:	460b      	mov	r3, r1
 8019a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8019a88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8019a8c:	f002 f932 	bl	801bcf4 <USBD_static_malloc>
 8019a90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d105      	bne.n	8019aa4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8019aa0:	2302      	movs	r3, #2
 8019aa2:	e066      	b.n	8019b72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	68fa      	ldr	r2, [r7, #12]
 8019aa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	7c1b      	ldrb	r3, [r3, #16]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d119      	bne.n	8019ae8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019ab8:	2202      	movs	r2, #2
 8019aba:	2181      	movs	r1, #129	; 0x81
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f001 fff6 	bl	801baae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019acc:	2202      	movs	r2, #2
 8019ace:	2101      	movs	r1, #1
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f001 ffec 	bl	801baae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	2201      	movs	r2, #1
 8019ada:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	2210      	movs	r2, #16
 8019ae2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8019ae6:	e016      	b.n	8019b16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019ae8:	2340      	movs	r3, #64	; 0x40
 8019aea:	2202      	movs	r2, #2
 8019aec:	2181      	movs	r1, #129	; 0x81
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f001 ffdd 	bl	801baae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2201      	movs	r2, #1
 8019af8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019afa:	2340      	movs	r3, #64	; 0x40
 8019afc:	2202      	movs	r2, #2
 8019afe:	2101      	movs	r1, #1
 8019b00:	6878      	ldr	r0, [r7, #4]
 8019b02:	f001 ffd4 	bl	801baae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	2201      	movs	r2, #1
 8019b0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2210      	movs	r2, #16
 8019b12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8019b16:	2308      	movs	r3, #8
 8019b18:	2203      	movs	r2, #3
 8019b1a:	2182      	movs	r1, #130	; 0x82
 8019b1c:	6878      	ldr	r0, [r7, #4]
 8019b1e:	f001 ffc6 	bl	801baae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2201      	movs	r2, #1
 8019b26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2200      	movs	r2, #0
 8019b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	2200      	movs	r2, #0
 8019b40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	7c1b      	ldrb	r3, [r3, #16]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d109      	bne.n	8019b60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b56:	2101      	movs	r1, #1
 8019b58:	6878      	ldr	r0, [r7, #4]
 8019b5a:	f002 f897 	bl	801bc8c <USBD_LL_PrepareReceive>
 8019b5e:	e007      	b.n	8019b70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019b66:	2340      	movs	r3, #64	; 0x40
 8019b68:	2101      	movs	r1, #1
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f002 f88e 	bl	801bc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8019b70:	2300      	movs	r3, #0
}
 8019b72:	4618      	mov	r0, r3
 8019b74:	3710      	adds	r7, #16
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}

08019b7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019b7a:	b580      	push	{r7, lr}
 8019b7c:	b082      	sub	sp, #8
 8019b7e:	af00      	add	r7, sp, #0
 8019b80:	6078      	str	r0, [r7, #4]
 8019b82:	460b      	mov	r3, r1
 8019b84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8019b86:	2181      	movs	r1, #129	; 0x81
 8019b88:	6878      	ldr	r0, [r7, #4]
 8019b8a:	f001 ffb6 	bl	801bafa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	2200      	movs	r2, #0
 8019b92:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8019b94:	2101      	movs	r1, #1
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f001 ffaf 	bl	801bafa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8019ba4:	2182      	movs	r1, #130	; 0x82
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f001 ffa7 	bl	801bafa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d00e      	beq.n	8019be4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019bcc:	685b      	ldr	r3, [r3, #4]
 8019bce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f002 f89a 	bl	801bd10 <USBD_static_free>
    pdev->pClassData = NULL;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2200      	movs	r2, #0
 8019be0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8019be4:	2300      	movs	r3, #0
}
 8019be6:	4618      	mov	r0, r3
 8019be8:	3708      	adds	r7, #8
 8019bea:	46bd      	mov	sp, r7
 8019bec:	bd80      	pop	{r7, pc}
	...

08019bf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b086      	sub	sp, #24
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
 8019bf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019c00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8019c02:	2300      	movs	r3, #0
 8019c04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8019c06:	2300      	movs	r3, #0
 8019c08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d101      	bne.n	8019c18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8019c14:	2303      	movs	r3, #3
 8019c16:	e0af      	b.n	8019d78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d03f      	beq.n	8019ca4 <USBD_CDC_Setup+0xb4>
 8019c24:	2b20      	cmp	r3, #32
 8019c26:	f040 809f 	bne.w	8019d68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	88db      	ldrh	r3, [r3, #6]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d02e      	beq.n	8019c90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	b25b      	sxtb	r3, r3
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	da16      	bge.n	8019c6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019c42:	689b      	ldr	r3, [r3, #8]
 8019c44:	683a      	ldr	r2, [r7, #0]
 8019c46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8019c48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019c4a:	683a      	ldr	r2, [r7, #0]
 8019c4c:	88d2      	ldrh	r2, [r2, #6]
 8019c4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	88db      	ldrh	r3, [r3, #6]
 8019c54:	2b07      	cmp	r3, #7
 8019c56:	bf28      	it	cs
 8019c58:	2307      	movcs	r3, #7
 8019c5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8019c5c:	693b      	ldr	r3, [r7, #16]
 8019c5e:	89fa      	ldrh	r2, [r7, #14]
 8019c60:	4619      	mov	r1, r3
 8019c62:	6878      	ldr	r0, [r7, #4]
 8019c64:	f001 fae9 	bl	801b23a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8019c68:	e085      	b.n	8019d76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	785a      	ldrb	r2, [r3, #1]
 8019c6e:	693b      	ldr	r3, [r7, #16]
 8019c70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	88db      	ldrh	r3, [r3, #6]
 8019c78:	b2da      	uxtb	r2, r3
 8019c7a:	693b      	ldr	r3, [r7, #16]
 8019c7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8019c80:	6939      	ldr	r1, [r7, #16]
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	88db      	ldrh	r3, [r3, #6]
 8019c86:	461a      	mov	r2, r3
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f001 fb02 	bl	801b292 <USBD_CtlPrepareRx>
      break;
 8019c8e:	e072      	b.n	8019d76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019c96:	689b      	ldr	r3, [r3, #8]
 8019c98:	683a      	ldr	r2, [r7, #0]
 8019c9a:	7850      	ldrb	r0, [r2, #1]
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	6839      	ldr	r1, [r7, #0]
 8019ca0:	4798      	blx	r3
      break;
 8019ca2:	e068      	b.n	8019d76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	785b      	ldrb	r3, [r3, #1]
 8019ca8:	2b0b      	cmp	r3, #11
 8019caa:	d852      	bhi.n	8019d52 <USBD_CDC_Setup+0x162>
 8019cac:	a201      	add	r2, pc, #4	; (adr r2, 8019cb4 <USBD_CDC_Setup+0xc4>)
 8019cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cb2:	bf00      	nop
 8019cb4:	08019ce5 	.word	0x08019ce5
 8019cb8:	08019d61 	.word	0x08019d61
 8019cbc:	08019d53 	.word	0x08019d53
 8019cc0:	08019d53 	.word	0x08019d53
 8019cc4:	08019d53 	.word	0x08019d53
 8019cc8:	08019d53 	.word	0x08019d53
 8019ccc:	08019d53 	.word	0x08019d53
 8019cd0:	08019d53 	.word	0x08019d53
 8019cd4:	08019d53 	.word	0x08019d53
 8019cd8:	08019d53 	.word	0x08019d53
 8019cdc:	08019d0f 	.word	0x08019d0f
 8019ce0:	08019d39 	.word	0x08019d39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019cea:	b2db      	uxtb	r3, r3
 8019cec:	2b03      	cmp	r3, #3
 8019cee:	d107      	bne.n	8019d00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8019cf0:	f107 030a 	add.w	r3, r7, #10
 8019cf4:	2202      	movs	r2, #2
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	6878      	ldr	r0, [r7, #4]
 8019cfa:	f001 fa9e 	bl	801b23a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019cfe:	e032      	b.n	8019d66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8019d00:	6839      	ldr	r1, [r7, #0]
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f001 fa28 	bl	801b158 <USBD_CtlError>
            ret = USBD_FAIL;
 8019d08:	2303      	movs	r3, #3
 8019d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8019d0c:	e02b      	b.n	8019d66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	2b03      	cmp	r3, #3
 8019d18:	d107      	bne.n	8019d2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8019d1a:	f107 030d 	add.w	r3, r7, #13
 8019d1e:	2201      	movs	r2, #1
 8019d20:	4619      	mov	r1, r3
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f001 fa89 	bl	801b23a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019d28:	e01d      	b.n	8019d66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8019d2a:	6839      	ldr	r1, [r7, #0]
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f001 fa13 	bl	801b158 <USBD_CtlError>
            ret = USBD_FAIL;
 8019d32:	2303      	movs	r3, #3
 8019d34:	75fb      	strb	r3, [r7, #23]
          break;
 8019d36:	e016      	b.n	8019d66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	2b03      	cmp	r3, #3
 8019d42:	d00f      	beq.n	8019d64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8019d44:	6839      	ldr	r1, [r7, #0]
 8019d46:	6878      	ldr	r0, [r7, #4]
 8019d48:	f001 fa06 	bl	801b158 <USBD_CtlError>
            ret = USBD_FAIL;
 8019d4c:	2303      	movs	r3, #3
 8019d4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8019d50:	e008      	b.n	8019d64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8019d52:	6839      	ldr	r1, [r7, #0]
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f001 f9ff 	bl	801b158 <USBD_CtlError>
          ret = USBD_FAIL;
 8019d5a:	2303      	movs	r3, #3
 8019d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8019d5e:	e002      	b.n	8019d66 <USBD_CDC_Setup+0x176>
          break;
 8019d60:	bf00      	nop
 8019d62:	e008      	b.n	8019d76 <USBD_CDC_Setup+0x186>
          break;
 8019d64:	bf00      	nop
      }
      break;
 8019d66:	e006      	b.n	8019d76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8019d68:	6839      	ldr	r1, [r7, #0]
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f001 f9f4 	bl	801b158 <USBD_CtlError>
      ret = USBD_FAIL;
 8019d70:	2303      	movs	r3, #3
 8019d72:	75fb      	strb	r3, [r7, #23]
      break;
 8019d74:	bf00      	nop
  }

  return (uint8_t)ret;
 8019d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3718      	adds	r7, #24
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}

08019d80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b084      	sub	sp, #16
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
 8019d88:	460b      	mov	r3, r1
 8019d8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019d92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d101      	bne.n	8019da2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019d9e:	2303      	movs	r3, #3
 8019da0:	e04f      	b.n	8019e42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019da8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8019daa:	78fa      	ldrb	r2, [r7, #3]
 8019dac:	6879      	ldr	r1, [r7, #4]
 8019dae:	4613      	mov	r3, r2
 8019db0:	009b      	lsls	r3, r3, #2
 8019db2:	4413      	add	r3, r2
 8019db4:	009b      	lsls	r3, r3, #2
 8019db6:	440b      	add	r3, r1
 8019db8:	3318      	adds	r3, #24
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d029      	beq.n	8019e14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019dc0:	78fa      	ldrb	r2, [r7, #3]
 8019dc2:	6879      	ldr	r1, [r7, #4]
 8019dc4:	4613      	mov	r3, r2
 8019dc6:	009b      	lsls	r3, r3, #2
 8019dc8:	4413      	add	r3, r2
 8019dca:	009b      	lsls	r3, r3, #2
 8019dcc:	440b      	add	r3, r1
 8019dce:	3318      	adds	r3, #24
 8019dd0:	681a      	ldr	r2, [r3, #0]
 8019dd2:	78f9      	ldrb	r1, [r7, #3]
 8019dd4:	68f8      	ldr	r0, [r7, #12]
 8019dd6:	460b      	mov	r3, r1
 8019dd8:	00db      	lsls	r3, r3, #3
 8019dda:	1a5b      	subs	r3, r3, r1
 8019ddc:	009b      	lsls	r3, r3, #2
 8019dde:	4403      	add	r3, r0
 8019de0:	3344      	adds	r3, #68	; 0x44
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	fbb2 f1f3 	udiv	r1, r2, r3
 8019de8:	fb01 f303 	mul.w	r3, r1, r3
 8019dec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d110      	bne.n	8019e14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8019df2:	78fa      	ldrb	r2, [r7, #3]
 8019df4:	6879      	ldr	r1, [r7, #4]
 8019df6:	4613      	mov	r3, r2
 8019df8:	009b      	lsls	r3, r3, #2
 8019dfa:	4413      	add	r3, r2
 8019dfc:	009b      	lsls	r3, r3, #2
 8019dfe:	440b      	add	r3, r1
 8019e00:	3318      	adds	r3, #24
 8019e02:	2200      	movs	r2, #0
 8019e04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019e06:	78f9      	ldrb	r1, [r7, #3]
 8019e08:	2300      	movs	r3, #0
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f001 ff1c 	bl	801bc4a <USBD_LL_Transmit>
 8019e12:	e015      	b.n	8019e40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	2200      	movs	r2, #0
 8019e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e22:	691b      	ldr	r3, [r3, #16]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d00b      	beq.n	8019e40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e2e:	691b      	ldr	r3, [r3, #16]
 8019e30:	68ba      	ldr	r2, [r7, #8]
 8019e32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8019e36:	68ba      	ldr	r2, [r7, #8]
 8019e38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8019e3c:	78fa      	ldrb	r2, [r7, #3]
 8019e3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019e40:	2300      	movs	r3, #0
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3710      	adds	r7, #16
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}

08019e4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019e4a:	b580      	push	{r7, lr}
 8019e4c:	b084      	sub	sp, #16
 8019e4e:	af00      	add	r7, sp, #0
 8019e50:	6078      	str	r0, [r7, #4]
 8019e52:	460b      	mov	r3, r1
 8019e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019e5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d101      	bne.n	8019e6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019e68:	2303      	movs	r3, #3
 8019e6a:	e015      	b.n	8019e98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019e6c:	78fb      	ldrb	r3, [r7, #3]
 8019e6e:	4619      	mov	r1, r3
 8019e70:	6878      	ldr	r0, [r7, #4]
 8019e72:	f001 ff2c 	bl	801bcce <USBD_LL_GetRxDataSize>
 8019e76:	4602      	mov	r2, r0
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019e84:	68db      	ldr	r3, [r3, #12]
 8019e86:	68fa      	ldr	r2, [r7, #12]
 8019e88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8019e92:	4611      	mov	r1, r2
 8019e94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8019e96:	2300      	movs	r3, #0
}
 8019e98:	4618      	mov	r0, r3
 8019e9a:	3710      	adds	r7, #16
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	bd80      	pop	{r7, pc}

08019ea0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b084      	sub	sp, #16
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019eae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d101      	bne.n	8019eba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8019eb6:	2303      	movs	r3, #3
 8019eb8:	e01b      	b.n	8019ef2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d015      	beq.n	8019ef0 <USBD_CDC_EP0_RxReady+0x50>
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8019eca:	2bff      	cmp	r3, #255	; 0xff
 8019ecc:	d010      	beq.n	8019ef0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ed4:	689b      	ldr	r3, [r3, #8]
 8019ed6:	68fa      	ldr	r2, [r7, #12]
 8019ed8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8019edc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8019ede:	68fa      	ldr	r2, [r7, #12]
 8019ee0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019ee4:	b292      	uxth	r2, r2
 8019ee6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	22ff      	movs	r2, #255	; 0xff
 8019eec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8019ef0:	2300      	movs	r3, #0
}
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	3710      	adds	r7, #16
 8019ef6:	46bd      	mov	sp, r7
 8019ef8:	bd80      	pop	{r7, pc}
	...

08019efc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8019efc:	b480      	push	{r7}
 8019efe:	b083      	sub	sp, #12
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	2243      	movs	r2, #67	; 0x43
 8019f08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8019f0a:	4b03      	ldr	r3, [pc, #12]	; (8019f18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	370c      	adds	r7, #12
 8019f10:	46bd      	mov	sp, r7
 8019f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f16:	4770      	bx	lr
 8019f18:	24000098 	.word	0x24000098

08019f1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	b083      	sub	sp, #12
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2243      	movs	r2, #67	; 0x43
 8019f28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8019f2a:	4b03      	ldr	r3, [pc, #12]	; (8019f38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	370c      	adds	r7, #12
 8019f30:	46bd      	mov	sp, r7
 8019f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f36:	4770      	bx	lr
 8019f38:	24000054 	.word	0x24000054

08019f3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	b083      	sub	sp, #12
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	2243      	movs	r2, #67	; 0x43
 8019f48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8019f4a:	4b03      	ldr	r3, [pc, #12]	; (8019f58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	370c      	adds	r7, #12
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr
 8019f58:	240000dc 	.word	0x240000dc

08019f5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b083      	sub	sp, #12
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	220a      	movs	r2, #10
 8019f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8019f6a:	4b03      	ldr	r3, [pc, #12]	; (8019f78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	370c      	adds	r7, #12
 8019f70:	46bd      	mov	sp, r7
 8019f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f76:	4770      	bx	lr
 8019f78:	24000010 	.word	0x24000010

08019f7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b083      	sub	sp, #12
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
 8019f84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d101      	bne.n	8019f90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8019f8c:	2303      	movs	r3, #3
 8019f8e:	e004      	b.n	8019f9a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	683a      	ldr	r2, [r7, #0]
 8019f94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8019f98:	2300      	movs	r3, #0
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	370c      	adds	r7, #12
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa4:	4770      	bx	lr

08019fa6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8019fa6:	b480      	push	{r7}
 8019fa8:	b087      	sub	sp, #28
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	60f8      	str	r0, [r7, #12]
 8019fae:	60b9      	str	r1, [r7, #8]
 8019fb0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019fb8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8019fba:	697b      	ldr	r3, [r7, #20]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d101      	bne.n	8019fc4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019fc0:	2303      	movs	r3, #3
 8019fc2:	e008      	b.n	8019fd6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	68ba      	ldr	r2, [r7, #8]
 8019fc8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8019fcc:	697b      	ldr	r3, [r7, #20]
 8019fce:	687a      	ldr	r2, [r7, #4]
 8019fd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8019fd4:	2300      	movs	r3, #0
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	371c      	adds	r7, #28
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe0:	4770      	bx	lr

08019fe2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8019fe2:	b480      	push	{r7}
 8019fe4:	b085      	sub	sp, #20
 8019fe6:	af00      	add	r7, sp, #0
 8019fe8:	6078      	str	r0, [r7, #4]
 8019fea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019ff2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d101      	bne.n	8019ffe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8019ffa:	2303      	movs	r3, #3
 8019ffc:	e004      	b.n	801a008 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	683a      	ldr	r2, [r7, #0]
 801a002:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801a006:	2300      	movs	r3, #0
}
 801a008:	4618      	mov	r0, r3
 801a00a:	3714      	adds	r7, #20
 801a00c:	46bd      	mov	sp, r7
 801a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a012:	4770      	bx	lr

0801a014 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b084      	sub	sp, #16
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801a02e:	2303      	movs	r3, #3
 801a030:	e016      	b.n	801a060 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	7c1b      	ldrb	r3, [r3, #16]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d109      	bne.n	801a04e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a040:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a044:	2101      	movs	r1, #1
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	f001 fe20 	bl	801bc8c <USBD_LL_PrepareReceive>
 801a04c:	e007      	b.n	801a05e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a054:	2340      	movs	r3, #64	; 0x40
 801a056:	2101      	movs	r1, #1
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	f001 fe17 	bl	801bc8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a05e:	2300      	movs	r3, #0
}
 801a060:	4618      	mov	r0, r3
 801a062:	3710      	adds	r7, #16
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}

0801a068 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b086      	sub	sp, #24
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	4613      	mov	r3, r2
 801a074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d101      	bne.n	801a080 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a07c:	2303      	movs	r3, #3
 801a07e:	e01f      	b.n	801a0c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	2200      	movs	r2, #0
 801a084:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	2200      	movs	r2, #0
 801a08c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	2200      	movs	r2, #0
 801a094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d003      	beq.n	801a0a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	68ba      	ldr	r2, [r7, #8]
 801a0a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	2201      	movs	r2, #1
 801a0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	79fa      	ldrb	r2, [r7, #7]
 801a0b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801a0b4:	68f8      	ldr	r0, [r7, #12]
 801a0b6:	f001 fc8f 	bl	801b9d8 <USBD_LL_Init>
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 801a0be:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	3718      	adds	r7, #24
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b084      	sub	sp, #16
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
 801a0d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d101      	bne.n	801a0e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801a0dc:	2303      	movs	r3, #3
 801a0de:	e016      	b.n	801a10e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	683a      	ldr	r2, [r7, #0]
 801a0e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d00b      	beq.n	801a10c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0fc:	f107 020e 	add.w	r2, r7, #14
 801a100:	4610      	mov	r0, r2
 801a102:	4798      	blx	r3
 801a104:	4602      	mov	r2, r0
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801a10c:	2300      	movs	r3, #0
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3710      	adds	r7, #16
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}

0801a116 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a116:	b580      	push	{r7, lr}
 801a118:	b082      	sub	sp, #8
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801a11e:	6878      	ldr	r0, [r7, #4]
 801a120:	f001 fcaa 	bl	801ba78 <USBD_LL_Start>
 801a124:	4603      	mov	r3, r0
}
 801a126:	4618      	mov	r0, r3
 801a128:	3708      	adds	r7, #8
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bd80      	pop	{r7, pc}

0801a12e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a12e:	b480      	push	{r7}
 801a130:	b083      	sub	sp, #12
 801a132:	af00      	add	r7, sp, #0
 801a134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a136:	2300      	movs	r3, #0
}
 801a138:	4618      	mov	r0, r3
 801a13a:	370c      	adds	r7, #12
 801a13c:	46bd      	mov	sp, r7
 801a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a142:	4770      	bx	lr

0801a144 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
 801a14c:	460b      	mov	r3, r1
 801a14e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a150:	2303      	movs	r3, #3
 801a152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d009      	beq.n	801a172 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	78fa      	ldrb	r2, [r7, #3]
 801a168:	4611      	mov	r1, r2
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	4798      	blx	r3
 801a16e:	4603      	mov	r3, r0
 801a170:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801a172:	7bfb      	ldrb	r3, [r7, #15]
}
 801a174:	4618      	mov	r0, r3
 801a176:	3710      	adds	r7, #16
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}

0801a17c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b082      	sub	sp, #8
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
 801a184:	460b      	mov	r3, r1
 801a186:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d007      	beq.n	801a1a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	78fa      	ldrb	r2, [r7, #3]
 801a19c:	4611      	mov	r1, r2
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	4798      	blx	r3
  }

  return USBD_OK;
 801a1a2:	2300      	movs	r3, #0
}
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	3708      	adds	r7, #8
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b084      	sub	sp, #16
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
 801a1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a1bc:	6839      	ldr	r1, [r7, #0]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f000 ff90 	bl	801b0e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2201      	movs	r2, #1
 801a1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a1e0:	f003 031f 	and.w	r3, r3, #31
 801a1e4:	2b02      	cmp	r3, #2
 801a1e6:	d01a      	beq.n	801a21e <USBD_LL_SetupStage+0x72>
 801a1e8:	2b02      	cmp	r3, #2
 801a1ea:	d822      	bhi.n	801a232 <USBD_LL_SetupStage+0x86>
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d002      	beq.n	801a1f6 <USBD_LL_SetupStage+0x4a>
 801a1f0:	2b01      	cmp	r3, #1
 801a1f2:	d00a      	beq.n	801a20a <USBD_LL_SetupStage+0x5e>
 801a1f4:	e01d      	b.n	801a232 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	6878      	ldr	r0, [r7, #4]
 801a200:	f000 fa62 	bl	801a6c8 <USBD_StdDevReq>
 801a204:	4603      	mov	r3, r0
 801a206:	73fb      	strb	r3, [r7, #15]
      break;
 801a208:	e020      	b.n	801a24c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a210:	4619      	mov	r1, r3
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	f000 fac6 	bl	801a7a4 <USBD_StdItfReq>
 801a218:	4603      	mov	r3, r0
 801a21a:	73fb      	strb	r3, [r7, #15]
      break;
 801a21c:	e016      	b.n	801a24c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a224:	4619      	mov	r1, r3
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f000 fb05 	bl	801a836 <USBD_StdEPReq>
 801a22c:	4603      	mov	r3, r0
 801a22e:	73fb      	strb	r3, [r7, #15]
      break;
 801a230:	e00c      	b.n	801a24c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a23c:	b2db      	uxtb	r3, r3
 801a23e:	4619      	mov	r1, r3
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f001 fc79 	bl	801bb38 <USBD_LL_StallEP>
 801a246:	4603      	mov	r3, r0
 801a248:	73fb      	strb	r3, [r7, #15]
      break;
 801a24a:	bf00      	nop
  }

  return ret;
 801a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a24e:	4618      	mov	r0, r3
 801a250:	3710      	adds	r7, #16
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}

0801a256 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a256:	b580      	push	{r7, lr}
 801a258:	b086      	sub	sp, #24
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	60f8      	str	r0, [r7, #12]
 801a25e:	460b      	mov	r3, r1
 801a260:	607a      	str	r2, [r7, #4]
 801a262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a264:	7afb      	ldrb	r3, [r7, #11]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d138      	bne.n	801a2dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a270:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a278:	2b03      	cmp	r3, #3
 801a27a:	d14a      	bne.n	801a312 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	689a      	ldr	r2, [r3, #8]
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	68db      	ldr	r3, [r3, #12]
 801a284:	429a      	cmp	r2, r3
 801a286:	d913      	bls.n	801a2b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a288:	693b      	ldr	r3, [r7, #16]
 801a28a:	689a      	ldr	r2, [r3, #8]
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	68db      	ldr	r3, [r3, #12]
 801a290:	1ad2      	subs	r2, r2, r3
 801a292:	693b      	ldr	r3, [r7, #16]
 801a294:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	68da      	ldr	r2, [r3, #12]
 801a29a:	693b      	ldr	r3, [r7, #16]
 801a29c:	689b      	ldr	r3, [r3, #8]
 801a29e:	4293      	cmp	r3, r2
 801a2a0:	bf28      	it	cs
 801a2a2:	4613      	movcs	r3, r2
 801a2a4:	461a      	mov	r2, r3
 801a2a6:	6879      	ldr	r1, [r7, #4]
 801a2a8:	68f8      	ldr	r0, [r7, #12]
 801a2aa:	f001 f80f 	bl	801b2cc <USBD_CtlContinueRx>
 801a2ae:	e030      	b.n	801a312 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2b6:	b2db      	uxtb	r3, r3
 801a2b8:	2b03      	cmp	r3, #3
 801a2ba:	d10b      	bne.n	801a2d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2c2:	691b      	ldr	r3, [r3, #16]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d005      	beq.n	801a2d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ce:	691b      	ldr	r3, [r3, #16]
 801a2d0:	68f8      	ldr	r0, [r7, #12]
 801a2d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a2d4:	68f8      	ldr	r0, [r7, #12]
 801a2d6:	f001 f80a 	bl	801b2ee <USBD_CtlSendStatus>
 801a2da:	e01a      	b.n	801a312 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	2b03      	cmp	r3, #3
 801a2e6:	d114      	bne.n	801a312 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ee:	699b      	ldr	r3, [r3, #24]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d00e      	beq.n	801a312 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2fa:	699b      	ldr	r3, [r3, #24]
 801a2fc:	7afa      	ldrb	r2, [r7, #11]
 801a2fe:	4611      	mov	r1, r2
 801a300:	68f8      	ldr	r0, [r7, #12]
 801a302:	4798      	blx	r3
 801a304:	4603      	mov	r3, r0
 801a306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a308:	7dfb      	ldrb	r3, [r7, #23]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d001      	beq.n	801a312 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a30e:	7dfb      	ldrb	r3, [r7, #23]
 801a310:	e000      	b.n	801a314 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a312:	2300      	movs	r3, #0
}
 801a314:	4618      	mov	r0, r3
 801a316:	3718      	adds	r7, #24
 801a318:	46bd      	mov	sp, r7
 801a31a:	bd80      	pop	{r7, pc}

0801a31c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b086      	sub	sp, #24
 801a320:	af00      	add	r7, sp, #0
 801a322:	60f8      	str	r0, [r7, #12]
 801a324:	460b      	mov	r3, r1
 801a326:	607a      	str	r2, [r7, #4]
 801a328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a32a:	7afb      	ldrb	r3, [r7, #11]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d16b      	bne.n	801a408 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	3314      	adds	r3, #20
 801a334:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a33c:	2b02      	cmp	r3, #2
 801a33e:	d156      	bne.n	801a3ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	689a      	ldr	r2, [r3, #8]
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	68db      	ldr	r3, [r3, #12]
 801a348:	429a      	cmp	r2, r3
 801a34a:	d914      	bls.n	801a376 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a34c:	693b      	ldr	r3, [r7, #16]
 801a34e:	689a      	ldr	r2, [r3, #8]
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	68db      	ldr	r3, [r3, #12]
 801a354:	1ad2      	subs	r2, r2, r3
 801a356:	693b      	ldr	r3, [r7, #16]
 801a358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	689b      	ldr	r3, [r3, #8]
 801a35e:	461a      	mov	r2, r3
 801a360:	6879      	ldr	r1, [r7, #4]
 801a362:	68f8      	ldr	r0, [r7, #12]
 801a364:	f000 ff84 	bl	801b270 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a368:	2300      	movs	r3, #0
 801a36a:	2200      	movs	r2, #0
 801a36c:	2100      	movs	r1, #0
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f001 fc8c 	bl	801bc8c <USBD_LL_PrepareReceive>
 801a374:	e03b      	b.n	801a3ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	68da      	ldr	r2, [r3, #12]
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	689b      	ldr	r3, [r3, #8]
 801a37e:	429a      	cmp	r2, r3
 801a380:	d11c      	bne.n	801a3bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a382:	693b      	ldr	r3, [r7, #16]
 801a384:	685a      	ldr	r2, [r3, #4]
 801a386:	693b      	ldr	r3, [r7, #16]
 801a388:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d316      	bcc.n	801a3bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a38e:	693b      	ldr	r3, [r7, #16]
 801a390:	685a      	ldr	r2, [r3, #4]
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a398:	429a      	cmp	r2, r3
 801a39a:	d20f      	bcs.n	801a3bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a39c:	2200      	movs	r2, #0
 801a39e:	2100      	movs	r1, #0
 801a3a0:	68f8      	ldr	r0, [r7, #12]
 801a3a2:	f000 ff65 	bl	801b270 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	2100      	movs	r1, #0
 801a3b4:	68f8      	ldr	r0, [r7, #12]
 801a3b6:	f001 fc69 	bl	801bc8c <USBD_LL_PrepareReceive>
 801a3ba:	e018      	b.n	801a3ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	2b03      	cmp	r3, #3
 801a3c6:	d10b      	bne.n	801a3e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3ce:	68db      	ldr	r3, [r3, #12]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d005      	beq.n	801a3e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3da:	68db      	ldr	r3, [r3, #12]
 801a3dc:	68f8      	ldr	r0, [r7, #12]
 801a3de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a3e0:	2180      	movs	r1, #128	; 0x80
 801a3e2:	68f8      	ldr	r0, [r7, #12]
 801a3e4:	f001 fba8 	bl	801bb38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a3e8:	68f8      	ldr	r0, [r7, #12]
 801a3ea:	f000 ff93 	bl	801b314 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a3f4:	2b01      	cmp	r3, #1
 801a3f6:	d122      	bne.n	801a43e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a3f8:	68f8      	ldr	r0, [r7, #12]
 801a3fa:	f7ff fe98 	bl	801a12e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	2200      	movs	r2, #0
 801a402:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a406:	e01a      	b.n	801a43e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a40e:	b2db      	uxtb	r3, r3
 801a410:	2b03      	cmp	r3, #3
 801a412:	d114      	bne.n	801a43e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a41a:	695b      	ldr	r3, [r3, #20]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d00e      	beq.n	801a43e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a426:	695b      	ldr	r3, [r3, #20]
 801a428:	7afa      	ldrb	r2, [r7, #11]
 801a42a:	4611      	mov	r1, r2
 801a42c:	68f8      	ldr	r0, [r7, #12]
 801a42e:	4798      	blx	r3
 801a430:	4603      	mov	r3, r0
 801a432:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a434:	7dfb      	ldrb	r3, [r7, #23]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d001      	beq.n	801a43e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a43a:	7dfb      	ldrb	r3, [r7, #23]
 801a43c:	e000      	b.n	801a440 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a43e:	2300      	movs	r3, #0
}
 801a440:	4618      	mov	r0, r3
 801a442:	3718      	adds	r7, #24
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}

0801a448 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2201      	movs	r2, #1
 801a454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2200      	movs	r2, #0
 801a45c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2200      	movs	r2, #0
 801a464:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	2200      	movs	r2, #0
 801a46a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a474:	2b00      	cmp	r3, #0
 801a476:	d101      	bne.n	801a47c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a478:	2303      	movs	r3, #3
 801a47a:	e02f      	b.n	801a4dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a482:	2b00      	cmp	r3, #0
 801a484:	d00f      	beq.n	801a4a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d009      	beq.n	801a4a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	687a      	ldr	r2, [r7, #4]
 801a49c:	6852      	ldr	r2, [r2, #4]
 801a49e:	b2d2      	uxtb	r2, r2
 801a4a0:	4611      	mov	r1, r2
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a4a6:	2340      	movs	r3, #64	; 0x40
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	2100      	movs	r1, #0
 801a4ac:	6878      	ldr	r0, [r7, #4]
 801a4ae:	f001 fafe 	bl	801baae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2201      	movs	r2, #1
 801a4b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	2240      	movs	r2, #64	; 0x40
 801a4be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a4c2:	2340      	movs	r3, #64	; 0x40
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	2180      	movs	r1, #128	; 0x80
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f001 faf0 	bl	801baae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2201      	movs	r2, #1
 801a4d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	2240      	movs	r2, #64	; 0x40
 801a4d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a4da:	2300      	movs	r3, #0
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3708      	adds	r7, #8
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b083      	sub	sp, #12
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
 801a4ec:	460b      	mov	r3, r1
 801a4ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	78fa      	ldrb	r2, [r7, #3]
 801a4f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a4f6:	2300      	movs	r3, #0
}
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	370c      	adds	r7, #12
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a502:	4770      	bx	lr

0801a504 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a504:	b480      	push	{r7}
 801a506:	b083      	sub	sp, #12
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a512:	b2da      	uxtb	r2, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2204      	movs	r2, #4
 801a51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a522:	2300      	movs	r3, #0
}
 801a524:	4618      	mov	r0, r3
 801a526:	370c      	adds	r7, #12
 801a528:	46bd      	mov	sp, r7
 801a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52e:	4770      	bx	lr

0801a530 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a530:	b480      	push	{r7}
 801a532:	b083      	sub	sp, #12
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a53e:	b2db      	uxtb	r3, r3
 801a540:	2b04      	cmp	r3, #4
 801a542:	d106      	bne.n	801a552 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a54a:	b2da      	uxtb	r2, r3
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a552:	2300      	movs	r3, #0
}
 801a554:	4618      	mov	r0, r3
 801a556:	370c      	adds	r7, #12
 801a558:	46bd      	mov	sp, r7
 801a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55e:	4770      	bx	lr

0801a560 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b082      	sub	sp, #8
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d101      	bne.n	801a576 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a572:	2303      	movs	r3, #3
 801a574:	e012      	b.n	801a59c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a57c:	b2db      	uxtb	r3, r3
 801a57e:	2b03      	cmp	r3, #3
 801a580:	d10b      	bne.n	801a59a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a588:	69db      	ldr	r3, [r3, #28]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d005      	beq.n	801a59a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a594:	69db      	ldr	r3, [r3, #28]
 801a596:	6878      	ldr	r0, [r7, #4]
 801a598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a59a:	2300      	movs	r3, #0
}
 801a59c:	4618      	mov	r0, r3
 801a59e:	3708      	adds	r7, #8
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	460b      	mov	r3, r1
 801a5ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d101      	bne.n	801a5be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a5ba:	2303      	movs	r3, #3
 801a5bc:	e014      	b.n	801a5e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a5c4:	b2db      	uxtb	r3, r3
 801a5c6:	2b03      	cmp	r3, #3
 801a5c8:	d10d      	bne.n	801a5e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5d0:	6a1b      	ldr	r3, [r3, #32]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d007      	beq.n	801a5e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5dc:	6a1b      	ldr	r3, [r3, #32]
 801a5de:	78fa      	ldrb	r2, [r7, #3]
 801a5e0:	4611      	mov	r1, r2
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a5e6:	2300      	movs	r3, #0
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3708      	adds	r7, #8
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}

0801a5f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b082      	sub	sp, #8
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	6078      	str	r0, [r7, #4]
 801a5f8:	460b      	mov	r3, r1
 801a5fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a602:	2b00      	cmp	r3, #0
 801a604:	d101      	bne.n	801a60a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a606:	2303      	movs	r3, #3
 801a608:	e014      	b.n	801a634 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a610:	b2db      	uxtb	r3, r3
 801a612:	2b03      	cmp	r3, #3
 801a614:	d10d      	bne.n	801a632 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d007      	beq.n	801a632 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a62a:	78fa      	ldrb	r2, [r7, #3]
 801a62c:	4611      	mov	r1, r2
 801a62e:	6878      	ldr	r0, [r7, #4]
 801a630:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a632:	2300      	movs	r3, #0
}
 801a634:	4618      	mov	r0, r3
 801a636:	3708      	adds	r7, #8
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}

0801a63c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a63c:	b480      	push	{r7}
 801a63e:	b083      	sub	sp, #12
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a644:	2300      	movs	r3, #0
}
 801a646:	4618      	mov	r0, r3
 801a648:	370c      	adds	r7, #12
 801a64a:	46bd      	mov	sp, r7
 801a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a650:	4770      	bx	lr

0801a652 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a652:	b580      	push	{r7, lr}
 801a654:	b082      	sub	sp, #8
 801a656:	af00      	add	r7, sp, #0
 801a658:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	2201      	movs	r2, #1
 801a65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d009      	beq.n	801a680 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a672:	685b      	ldr	r3, [r3, #4]
 801a674:	687a      	ldr	r2, [r7, #4]
 801a676:	6852      	ldr	r2, [r2, #4]
 801a678:	b2d2      	uxtb	r2, r2
 801a67a:	4611      	mov	r1, r2
 801a67c:	6878      	ldr	r0, [r7, #4]
 801a67e:	4798      	blx	r3
  }

  return USBD_OK;
 801a680:	2300      	movs	r3, #0
}
 801a682:	4618      	mov	r0, r3
 801a684:	3708      	adds	r7, #8
 801a686:	46bd      	mov	sp, r7
 801a688:	bd80      	pop	{r7, pc}

0801a68a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a68a:	b480      	push	{r7}
 801a68c:	b087      	sub	sp, #28
 801a68e:	af00      	add	r7, sp, #0
 801a690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a696:	697b      	ldr	r3, [r7, #20]
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a69c:	697b      	ldr	r3, [r7, #20]
 801a69e:	3301      	adds	r3, #1
 801a6a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a6a2:	697b      	ldr	r3, [r7, #20]
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a6a8:	8a3b      	ldrh	r3, [r7, #16]
 801a6aa:	021b      	lsls	r3, r3, #8
 801a6ac:	b21a      	sxth	r2, r3
 801a6ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	b21b      	sxth	r3, r3
 801a6b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a6b8:	89fb      	ldrh	r3, [r7, #14]
}
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	371c      	adds	r7, #28
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c4:	4770      	bx	lr
	...

0801a6c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b084      	sub	sp, #16
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
 801a6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a6d6:	683b      	ldr	r3, [r7, #0]
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a6de:	2b40      	cmp	r3, #64	; 0x40
 801a6e0:	d005      	beq.n	801a6ee <USBD_StdDevReq+0x26>
 801a6e2:	2b40      	cmp	r3, #64	; 0x40
 801a6e4:	d853      	bhi.n	801a78e <USBD_StdDevReq+0xc6>
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d00b      	beq.n	801a702 <USBD_StdDevReq+0x3a>
 801a6ea:	2b20      	cmp	r3, #32
 801a6ec:	d14f      	bne.n	801a78e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6f4:	689b      	ldr	r3, [r3, #8]
 801a6f6:	6839      	ldr	r1, [r7, #0]
 801a6f8:	6878      	ldr	r0, [r7, #4]
 801a6fa:	4798      	blx	r3
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	73fb      	strb	r3, [r7, #15]
      break;
 801a700:	e04a      	b.n	801a798 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	785b      	ldrb	r3, [r3, #1]
 801a706:	2b09      	cmp	r3, #9
 801a708:	d83b      	bhi.n	801a782 <USBD_StdDevReq+0xba>
 801a70a:	a201      	add	r2, pc, #4	; (adr r2, 801a710 <USBD_StdDevReq+0x48>)
 801a70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a710:	0801a765 	.word	0x0801a765
 801a714:	0801a779 	.word	0x0801a779
 801a718:	0801a783 	.word	0x0801a783
 801a71c:	0801a76f 	.word	0x0801a76f
 801a720:	0801a783 	.word	0x0801a783
 801a724:	0801a743 	.word	0x0801a743
 801a728:	0801a739 	.word	0x0801a739
 801a72c:	0801a783 	.word	0x0801a783
 801a730:	0801a75b 	.word	0x0801a75b
 801a734:	0801a74d 	.word	0x0801a74d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a738:	6839      	ldr	r1, [r7, #0]
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f000 f9de 	bl	801aafc <USBD_GetDescriptor>
          break;
 801a740:	e024      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a742:	6839      	ldr	r1, [r7, #0]
 801a744:	6878      	ldr	r0, [r7, #4]
 801a746:	f000 fb43 	bl	801add0 <USBD_SetAddress>
          break;
 801a74a:	e01f      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a74c:	6839      	ldr	r1, [r7, #0]
 801a74e:	6878      	ldr	r0, [r7, #4]
 801a750:	f000 fb82 	bl	801ae58 <USBD_SetConfig>
 801a754:	4603      	mov	r3, r0
 801a756:	73fb      	strb	r3, [r7, #15]
          break;
 801a758:	e018      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a75a:	6839      	ldr	r1, [r7, #0]
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f000 fc21 	bl	801afa4 <USBD_GetConfig>
          break;
 801a762:	e013      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a764:	6839      	ldr	r1, [r7, #0]
 801a766:	6878      	ldr	r0, [r7, #4]
 801a768:	f000 fc52 	bl	801b010 <USBD_GetStatus>
          break;
 801a76c:	e00e      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a76e:	6839      	ldr	r1, [r7, #0]
 801a770:	6878      	ldr	r0, [r7, #4]
 801a772:	f000 fc81 	bl	801b078 <USBD_SetFeature>
          break;
 801a776:	e009      	b.n	801a78c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a778:	6839      	ldr	r1, [r7, #0]
 801a77a:	6878      	ldr	r0, [r7, #4]
 801a77c:	f000 fc90 	bl	801b0a0 <USBD_ClrFeature>
          break;
 801a780:	e004      	b.n	801a78c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a782:	6839      	ldr	r1, [r7, #0]
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	f000 fce7 	bl	801b158 <USBD_CtlError>
          break;
 801a78a:	bf00      	nop
      }
      break;
 801a78c:	e004      	b.n	801a798 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a78e:	6839      	ldr	r1, [r7, #0]
 801a790:	6878      	ldr	r0, [r7, #4]
 801a792:	f000 fce1 	bl	801b158 <USBD_CtlError>
      break;
 801a796:	bf00      	nop
  }

  return ret;
 801a798:	7bfb      	ldrb	r3, [r7, #15]
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	3710      	adds	r7, #16
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop

0801a7a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a7a4:	b580      	push	{r7, lr}
 801a7a6:	b084      	sub	sp, #16
 801a7a8:	af00      	add	r7, sp, #0
 801a7aa:	6078      	str	r0, [r7, #4]
 801a7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a7ae:	2300      	movs	r3, #0
 801a7b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	781b      	ldrb	r3, [r3, #0]
 801a7b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a7ba:	2b40      	cmp	r3, #64	; 0x40
 801a7bc:	d005      	beq.n	801a7ca <USBD_StdItfReq+0x26>
 801a7be:	2b40      	cmp	r3, #64	; 0x40
 801a7c0:	d82f      	bhi.n	801a822 <USBD_StdItfReq+0x7e>
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d001      	beq.n	801a7ca <USBD_StdItfReq+0x26>
 801a7c6:	2b20      	cmp	r3, #32
 801a7c8:	d12b      	bne.n	801a822 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7d0:	b2db      	uxtb	r3, r3
 801a7d2:	3b01      	subs	r3, #1
 801a7d4:	2b02      	cmp	r3, #2
 801a7d6:	d81d      	bhi.n	801a814 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	889b      	ldrh	r3, [r3, #4]
 801a7dc:	b2db      	uxtb	r3, r3
 801a7de:	2b01      	cmp	r3, #1
 801a7e0:	d813      	bhi.n	801a80a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a7e8:	689b      	ldr	r3, [r3, #8]
 801a7ea:	6839      	ldr	r1, [r7, #0]
 801a7ec:	6878      	ldr	r0, [r7, #4]
 801a7ee:	4798      	blx	r3
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	88db      	ldrh	r3, [r3, #6]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d110      	bne.n	801a81e <USBD_StdItfReq+0x7a>
 801a7fc:	7bfb      	ldrb	r3, [r7, #15]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d10d      	bne.n	801a81e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f000 fd73 	bl	801b2ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a808:	e009      	b.n	801a81e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a80a:	6839      	ldr	r1, [r7, #0]
 801a80c:	6878      	ldr	r0, [r7, #4]
 801a80e:	f000 fca3 	bl	801b158 <USBD_CtlError>
          break;
 801a812:	e004      	b.n	801a81e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a814:	6839      	ldr	r1, [r7, #0]
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f000 fc9e 	bl	801b158 <USBD_CtlError>
          break;
 801a81c:	e000      	b.n	801a820 <USBD_StdItfReq+0x7c>
          break;
 801a81e:	bf00      	nop
      }
      break;
 801a820:	e004      	b.n	801a82c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a822:	6839      	ldr	r1, [r7, #0]
 801a824:	6878      	ldr	r0, [r7, #4]
 801a826:	f000 fc97 	bl	801b158 <USBD_CtlError>
      break;
 801a82a:	bf00      	nop
  }

  return ret;
 801a82c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3710      	adds	r7, #16
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}

0801a836 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a836:	b580      	push	{r7, lr}
 801a838:	b084      	sub	sp, #16
 801a83a:	af00      	add	r7, sp, #0
 801a83c:	6078      	str	r0, [r7, #4]
 801a83e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a840:	2300      	movs	r3, #0
 801a842:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	889b      	ldrh	r3, [r3, #4]
 801a848:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a84a:	683b      	ldr	r3, [r7, #0]
 801a84c:	781b      	ldrb	r3, [r3, #0]
 801a84e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a852:	2b40      	cmp	r3, #64	; 0x40
 801a854:	d007      	beq.n	801a866 <USBD_StdEPReq+0x30>
 801a856:	2b40      	cmp	r3, #64	; 0x40
 801a858:	f200 8145 	bhi.w	801aae6 <USBD_StdEPReq+0x2b0>
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d00c      	beq.n	801a87a <USBD_StdEPReq+0x44>
 801a860:	2b20      	cmp	r3, #32
 801a862:	f040 8140 	bne.w	801aae6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a86c:	689b      	ldr	r3, [r3, #8]
 801a86e:	6839      	ldr	r1, [r7, #0]
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	4798      	blx	r3
 801a874:	4603      	mov	r3, r0
 801a876:	73fb      	strb	r3, [r7, #15]
      break;
 801a878:	e13a      	b.n	801aaf0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	785b      	ldrb	r3, [r3, #1]
 801a87e:	2b03      	cmp	r3, #3
 801a880:	d007      	beq.n	801a892 <USBD_StdEPReq+0x5c>
 801a882:	2b03      	cmp	r3, #3
 801a884:	f300 8129 	bgt.w	801aada <USBD_StdEPReq+0x2a4>
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d07f      	beq.n	801a98c <USBD_StdEPReq+0x156>
 801a88c:	2b01      	cmp	r3, #1
 801a88e:	d03c      	beq.n	801a90a <USBD_StdEPReq+0xd4>
 801a890:	e123      	b.n	801aada <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	2b02      	cmp	r3, #2
 801a89c:	d002      	beq.n	801a8a4 <USBD_StdEPReq+0x6e>
 801a89e:	2b03      	cmp	r3, #3
 801a8a0:	d016      	beq.n	801a8d0 <USBD_StdEPReq+0x9a>
 801a8a2:	e02c      	b.n	801a8fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a8a4:	7bbb      	ldrb	r3, [r7, #14]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d00d      	beq.n	801a8c6 <USBD_StdEPReq+0x90>
 801a8aa:	7bbb      	ldrb	r3, [r7, #14]
 801a8ac:	2b80      	cmp	r3, #128	; 0x80
 801a8ae:	d00a      	beq.n	801a8c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a8b0:	7bbb      	ldrb	r3, [r7, #14]
 801a8b2:	4619      	mov	r1, r3
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f001 f93f 	bl	801bb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a8ba:	2180      	movs	r1, #128	; 0x80
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	f001 f93b 	bl	801bb38 <USBD_LL_StallEP>
 801a8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a8c4:	e020      	b.n	801a908 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a8c6:	6839      	ldr	r1, [r7, #0]
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f000 fc45 	bl	801b158 <USBD_CtlError>
              break;
 801a8ce:	e01b      	b.n	801a908 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	885b      	ldrh	r3, [r3, #2]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d10e      	bne.n	801a8f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a8d8:	7bbb      	ldrb	r3, [r7, #14]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d00b      	beq.n	801a8f6 <USBD_StdEPReq+0xc0>
 801a8de:	7bbb      	ldrb	r3, [r7, #14]
 801a8e0:	2b80      	cmp	r3, #128	; 0x80
 801a8e2:	d008      	beq.n	801a8f6 <USBD_StdEPReq+0xc0>
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	88db      	ldrh	r3, [r3, #6]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d104      	bne.n	801a8f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a8ec:	7bbb      	ldrb	r3, [r7, #14]
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f001 f921 	bl	801bb38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	f000 fcf9 	bl	801b2ee <USBD_CtlSendStatus>

              break;
 801a8fc:	e004      	b.n	801a908 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a8fe:	6839      	ldr	r1, [r7, #0]
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f000 fc29 	bl	801b158 <USBD_CtlError>
              break;
 801a906:	bf00      	nop
          }
          break;
 801a908:	e0ec      	b.n	801aae4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a910:	b2db      	uxtb	r3, r3
 801a912:	2b02      	cmp	r3, #2
 801a914:	d002      	beq.n	801a91c <USBD_StdEPReq+0xe6>
 801a916:	2b03      	cmp	r3, #3
 801a918:	d016      	beq.n	801a948 <USBD_StdEPReq+0x112>
 801a91a:	e030      	b.n	801a97e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a91c:	7bbb      	ldrb	r3, [r7, #14]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d00d      	beq.n	801a93e <USBD_StdEPReq+0x108>
 801a922:	7bbb      	ldrb	r3, [r7, #14]
 801a924:	2b80      	cmp	r3, #128	; 0x80
 801a926:	d00a      	beq.n	801a93e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a928:	7bbb      	ldrb	r3, [r7, #14]
 801a92a:	4619      	mov	r1, r3
 801a92c:	6878      	ldr	r0, [r7, #4]
 801a92e:	f001 f903 	bl	801bb38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a932:	2180      	movs	r1, #128	; 0x80
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	f001 f8ff 	bl	801bb38 <USBD_LL_StallEP>
 801a93a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a93c:	e025      	b.n	801a98a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a93e:	6839      	ldr	r1, [r7, #0]
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f000 fc09 	bl	801b158 <USBD_CtlError>
              break;
 801a946:	e020      	b.n	801a98a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	885b      	ldrh	r3, [r3, #2]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d11b      	bne.n	801a988 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a950:	7bbb      	ldrb	r3, [r7, #14]
 801a952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a956:	2b00      	cmp	r3, #0
 801a958:	d004      	beq.n	801a964 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a95a:	7bbb      	ldrb	r3, [r7, #14]
 801a95c:	4619      	mov	r1, r3
 801a95e:	6878      	ldr	r0, [r7, #4]
 801a960:	f001 f909 	bl	801bb76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a964:	6878      	ldr	r0, [r7, #4]
 801a966:	f000 fcc2 	bl	801b2ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a970:	689b      	ldr	r3, [r3, #8]
 801a972:	6839      	ldr	r1, [r7, #0]
 801a974:	6878      	ldr	r0, [r7, #4]
 801a976:	4798      	blx	r3
 801a978:	4603      	mov	r3, r0
 801a97a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a97c:	e004      	b.n	801a988 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a97e:	6839      	ldr	r1, [r7, #0]
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f000 fbe9 	bl	801b158 <USBD_CtlError>
              break;
 801a986:	e000      	b.n	801a98a <USBD_StdEPReq+0x154>
              break;
 801a988:	bf00      	nop
          }
          break;
 801a98a:	e0ab      	b.n	801aae4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a992:	b2db      	uxtb	r3, r3
 801a994:	2b02      	cmp	r3, #2
 801a996:	d002      	beq.n	801a99e <USBD_StdEPReq+0x168>
 801a998:	2b03      	cmp	r3, #3
 801a99a:	d032      	beq.n	801aa02 <USBD_StdEPReq+0x1cc>
 801a99c:	e097      	b.n	801aace <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a99e:	7bbb      	ldrb	r3, [r7, #14]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d007      	beq.n	801a9b4 <USBD_StdEPReq+0x17e>
 801a9a4:	7bbb      	ldrb	r3, [r7, #14]
 801a9a6:	2b80      	cmp	r3, #128	; 0x80
 801a9a8:	d004      	beq.n	801a9b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a9aa:	6839      	ldr	r1, [r7, #0]
 801a9ac:	6878      	ldr	r0, [r7, #4]
 801a9ae:	f000 fbd3 	bl	801b158 <USBD_CtlError>
                break;
 801a9b2:	e091      	b.n	801aad8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a9b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	da0b      	bge.n	801a9d4 <USBD_StdEPReq+0x19e>
 801a9bc:	7bbb      	ldrb	r3, [r7, #14]
 801a9be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a9c2:	4613      	mov	r3, r2
 801a9c4:	009b      	lsls	r3, r3, #2
 801a9c6:	4413      	add	r3, r2
 801a9c8:	009b      	lsls	r3, r3, #2
 801a9ca:	3310      	adds	r3, #16
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	4413      	add	r3, r2
 801a9d0:	3304      	adds	r3, #4
 801a9d2:	e00b      	b.n	801a9ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a9d4:	7bbb      	ldrb	r3, [r7, #14]
 801a9d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a9da:	4613      	mov	r3, r2
 801a9dc:	009b      	lsls	r3, r3, #2
 801a9de:	4413      	add	r3, r2
 801a9e0:	009b      	lsls	r3, r3, #2
 801a9e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a9e6:	687a      	ldr	r2, [r7, #4]
 801a9e8:	4413      	add	r3, r2
 801a9ea:	3304      	adds	r3, #4
 801a9ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a9ee:	68bb      	ldr	r3, [r7, #8]
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	2202      	movs	r2, #2
 801a9f8:	4619      	mov	r1, r3
 801a9fa:	6878      	ldr	r0, [r7, #4]
 801a9fc:	f000 fc1d 	bl	801b23a <USBD_CtlSendData>
              break;
 801aa00:	e06a      	b.n	801aad8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801aa02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	da11      	bge.n	801aa2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801aa0a:	7bbb      	ldrb	r3, [r7, #14]
 801aa0c:	f003 020f 	and.w	r2, r3, #15
 801aa10:	6879      	ldr	r1, [r7, #4]
 801aa12:	4613      	mov	r3, r2
 801aa14:	009b      	lsls	r3, r3, #2
 801aa16:	4413      	add	r3, r2
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	440b      	add	r3, r1
 801aa1c:	3324      	adds	r3, #36	; 0x24
 801aa1e:	881b      	ldrh	r3, [r3, #0]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d117      	bne.n	801aa54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801aa24:	6839      	ldr	r1, [r7, #0]
 801aa26:	6878      	ldr	r0, [r7, #4]
 801aa28:	f000 fb96 	bl	801b158 <USBD_CtlError>
                  break;
 801aa2c:	e054      	b.n	801aad8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801aa2e:	7bbb      	ldrb	r3, [r7, #14]
 801aa30:	f003 020f 	and.w	r2, r3, #15
 801aa34:	6879      	ldr	r1, [r7, #4]
 801aa36:	4613      	mov	r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	4413      	add	r3, r2
 801aa3c:	009b      	lsls	r3, r3, #2
 801aa3e:	440b      	add	r3, r1
 801aa40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801aa44:	881b      	ldrh	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d104      	bne.n	801aa54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801aa4a:	6839      	ldr	r1, [r7, #0]
 801aa4c:	6878      	ldr	r0, [r7, #4]
 801aa4e:	f000 fb83 	bl	801b158 <USBD_CtlError>
                  break;
 801aa52:	e041      	b.n	801aad8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aa54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	da0b      	bge.n	801aa74 <USBD_StdEPReq+0x23e>
 801aa5c:	7bbb      	ldrb	r3, [r7, #14]
 801aa5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aa62:	4613      	mov	r3, r2
 801aa64:	009b      	lsls	r3, r3, #2
 801aa66:	4413      	add	r3, r2
 801aa68:	009b      	lsls	r3, r3, #2
 801aa6a:	3310      	adds	r3, #16
 801aa6c:	687a      	ldr	r2, [r7, #4]
 801aa6e:	4413      	add	r3, r2
 801aa70:	3304      	adds	r3, #4
 801aa72:	e00b      	b.n	801aa8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801aa74:	7bbb      	ldrb	r3, [r7, #14]
 801aa76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aa7a:	4613      	mov	r3, r2
 801aa7c:	009b      	lsls	r3, r3, #2
 801aa7e:	4413      	add	r3, r2
 801aa80:	009b      	lsls	r3, r3, #2
 801aa82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801aa86:	687a      	ldr	r2, [r7, #4]
 801aa88:	4413      	add	r3, r2
 801aa8a:	3304      	adds	r3, #4
 801aa8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801aa8e:	7bbb      	ldrb	r3, [r7, #14]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d002      	beq.n	801aa9a <USBD_StdEPReq+0x264>
 801aa94:	7bbb      	ldrb	r3, [r7, #14]
 801aa96:	2b80      	cmp	r3, #128	; 0x80
 801aa98:	d103      	bne.n	801aaa2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	601a      	str	r2, [r3, #0]
 801aaa0:	e00e      	b.n	801aac0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801aaa2:	7bbb      	ldrb	r3, [r7, #14]
 801aaa4:	4619      	mov	r1, r3
 801aaa6:	6878      	ldr	r0, [r7, #4]
 801aaa8:	f001 f884 	bl	801bbb4 <USBD_LL_IsStallEP>
 801aaac:	4603      	mov	r3, r0
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d003      	beq.n	801aaba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	2201      	movs	r2, #1
 801aab6:	601a      	str	r2, [r3, #0]
 801aab8:	e002      	b.n	801aac0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	2200      	movs	r2, #0
 801aabe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	2202      	movs	r2, #2
 801aac4:	4619      	mov	r1, r3
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f000 fbb7 	bl	801b23a <USBD_CtlSendData>
              break;
 801aacc:	e004      	b.n	801aad8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801aace:	6839      	ldr	r1, [r7, #0]
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	f000 fb41 	bl	801b158 <USBD_CtlError>
              break;
 801aad6:	bf00      	nop
          }
          break;
 801aad8:	e004      	b.n	801aae4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801aada:	6839      	ldr	r1, [r7, #0]
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	f000 fb3b 	bl	801b158 <USBD_CtlError>
          break;
 801aae2:	bf00      	nop
      }
      break;
 801aae4:	e004      	b.n	801aaf0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801aae6:	6839      	ldr	r1, [r7, #0]
 801aae8:	6878      	ldr	r0, [r7, #4]
 801aaea:	f000 fb35 	bl	801b158 <USBD_CtlError>
      break;
 801aaee:	bf00      	nop
  }

  return ret;
 801aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3710      	adds	r7, #16
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}
	...

0801aafc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
 801ab04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ab06:	2300      	movs	r3, #0
 801ab08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ab0e:	2300      	movs	r3, #0
 801ab10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	885b      	ldrh	r3, [r3, #2]
 801ab16:	0a1b      	lsrs	r3, r3, #8
 801ab18:	b29b      	uxth	r3, r3
 801ab1a:	3b01      	subs	r3, #1
 801ab1c:	2b06      	cmp	r3, #6
 801ab1e:	f200 8128 	bhi.w	801ad72 <USBD_GetDescriptor+0x276>
 801ab22:	a201      	add	r2, pc, #4	; (adr r2, 801ab28 <USBD_GetDescriptor+0x2c>)
 801ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab28:	0801ab45 	.word	0x0801ab45
 801ab2c:	0801ab5d 	.word	0x0801ab5d
 801ab30:	0801ab9d 	.word	0x0801ab9d
 801ab34:	0801ad73 	.word	0x0801ad73
 801ab38:	0801ad73 	.word	0x0801ad73
 801ab3c:	0801ad13 	.word	0x0801ad13
 801ab40:	0801ad3f 	.word	0x0801ad3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	687a      	ldr	r2, [r7, #4]
 801ab4e:	7c12      	ldrb	r2, [r2, #16]
 801ab50:	f107 0108 	add.w	r1, r7, #8
 801ab54:	4610      	mov	r0, r2
 801ab56:	4798      	blx	r3
 801ab58:	60f8      	str	r0, [r7, #12]
      break;
 801ab5a:	e112      	b.n	801ad82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	7c1b      	ldrb	r3, [r3, #16]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d10d      	bne.n	801ab80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab6c:	f107 0208 	add.w	r2, r7, #8
 801ab70:	4610      	mov	r0, r2
 801ab72:	4798      	blx	r3
 801ab74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	3301      	adds	r3, #1
 801ab7a:	2202      	movs	r2, #2
 801ab7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ab7e:	e100      	b.n	801ad82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab88:	f107 0208 	add.w	r2, r7, #8
 801ab8c:	4610      	mov	r0, r2
 801ab8e:	4798      	blx	r3
 801ab90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	3301      	adds	r3, #1
 801ab96:	2202      	movs	r2, #2
 801ab98:	701a      	strb	r2, [r3, #0]
      break;
 801ab9a:	e0f2      	b.n	801ad82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ab9c:	683b      	ldr	r3, [r7, #0]
 801ab9e:	885b      	ldrh	r3, [r3, #2]
 801aba0:	b2db      	uxtb	r3, r3
 801aba2:	2b05      	cmp	r3, #5
 801aba4:	f200 80ac 	bhi.w	801ad00 <USBD_GetDescriptor+0x204>
 801aba8:	a201      	add	r2, pc, #4	; (adr r2, 801abb0 <USBD_GetDescriptor+0xb4>)
 801abaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abae:	bf00      	nop
 801abb0:	0801abc9 	.word	0x0801abc9
 801abb4:	0801abfd 	.word	0x0801abfd
 801abb8:	0801ac31 	.word	0x0801ac31
 801abbc:	0801ac65 	.word	0x0801ac65
 801abc0:	0801ac99 	.word	0x0801ac99
 801abc4:	0801accd 	.word	0x0801accd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d00b      	beq.n	801abec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abda:	685b      	ldr	r3, [r3, #4]
 801abdc:	687a      	ldr	r2, [r7, #4]
 801abde:	7c12      	ldrb	r2, [r2, #16]
 801abe0:	f107 0108 	add.w	r1, r7, #8
 801abe4:	4610      	mov	r0, r2
 801abe6:	4798      	blx	r3
 801abe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abea:	e091      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801abec:	6839      	ldr	r1, [r7, #0]
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f000 fab2 	bl	801b158 <USBD_CtlError>
            err++;
 801abf4:	7afb      	ldrb	r3, [r7, #11]
 801abf6:	3301      	adds	r3, #1
 801abf8:	72fb      	strb	r3, [r7, #11]
          break;
 801abfa:	e089      	b.n	801ad10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac02:	689b      	ldr	r3, [r3, #8]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d00b      	beq.n	801ac20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac0e:	689b      	ldr	r3, [r3, #8]
 801ac10:	687a      	ldr	r2, [r7, #4]
 801ac12:	7c12      	ldrb	r2, [r2, #16]
 801ac14:	f107 0108 	add.w	r1, r7, #8
 801ac18:	4610      	mov	r0, r2
 801ac1a:	4798      	blx	r3
 801ac1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac1e:	e077      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ac20:	6839      	ldr	r1, [r7, #0]
 801ac22:	6878      	ldr	r0, [r7, #4]
 801ac24:	f000 fa98 	bl	801b158 <USBD_CtlError>
            err++;
 801ac28:	7afb      	ldrb	r3, [r7, #11]
 801ac2a:	3301      	adds	r3, #1
 801ac2c:	72fb      	strb	r3, [r7, #11]
          break;
 801ac2e:	e06f      	b.n	801ad10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac36:	68db      	ldr	r3, [r3, #12]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d00b      	beq.n	801ac54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac42:	68db      	ldr	r3, [r3, #12]
 801ac44:	687a      	ldr	r2, [r7, #4]
 801ac46:	7c12      	ldrb	r2, [r2, #16]
 801ac48:	f107 0108 	add.w	r1, r7, #8
 801ac4c:	4610      	mov	r0, r2
 801ac4e:	4798      	blx	r3
 801ac50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac52:	e05d      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ac54:	6839      	ldr	r1, [r7, #0]
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f000 fa7e 	bl	801b158 <USBD_CtlError>
            err++;
 801ac5c:	7afb      	ldrb	r3, [r7, #11]
 801ac5e:	3301      	adds	r3, #1
 801ac60:	72fb      	strb	r3, [r7, #11]
          break;
 801ac62:	e055      	b.n	801ad10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac6a:	691b      	ldr	r3, [r3, #16]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d00b      	beq.n	801ac88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac76:	691b      	ldr	r3, [r3, #16]
 801ac78:	687a      	ldr	r2, [r7, #4]
 801ac7a:	7c12      	ldrb	r2, [r2, #16]
 801ac7c:	f107 0108 	add.w	r1, r7, #8
 801ac80:	4610      	mov	r0, r2
 801ac82:	4798      	blx	r3
 801ac84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac86:	e043      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ac88:	6839      	ldr	r1, [r7, #0]
 801ac8a:	6878      	ldr	r0, [r7, #4]
 801ac8c:	f000 fa64 	bl	801b158 <USBD_CtlError>
            err++;
 801ac90:	7afb      	ldrb	r3, [r7, #11]
 801ac92:	3301      	adds	r3, #1
 801ac94:	72fb      	strb	r3, [r7, #11]
          break;
 801ac96:	e03b      	b.n	801ad10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac9e:	695b      	ldr	r3, [r3, #20]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d00b      	beq.n	801acbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acaa:	695b      	ldr	r3, [r3, #20]
 801acac:	687a      	ldr	r2, [r7, #4]
 801acae:	7c12      	ldrb	r2, [r2, #16]
 801acb0:	f107 0108 	add.w	r1, r7, #8
 801acb4:	4610      	mov	r0, r2
 801acb6:	4798      	blx	r3
 801acb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801acba:	e029      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801acbc:	6839      	ldr	r1, [r7, #0]
 801acbe:	6878      	ldr	r0, [r7, #4]
 801acc0:	f000 fa4a 	bl	801b158 <USBD_CtlError>
            err++;
 801acc4:	7afb      	ldrb	r3, [r7, #11]
 801acc6:	3301      	adds	r3, #1
 801acc8:	72fb      	strb	r3, [r7, #11]
          break;
 801acca:	e021      	b.n	801ad10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acd2:	699b      	ldr	r3, [r3, #24]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d00b      	beq.n	801acf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acde:	699b      	ldr	r3, [r3, #24]
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	7c12      	ldrb	r2, [r2, #16]
 801ace4:	f107 0108 	add.w	r1, r7, #8
 801ace8:	4610      	mov	r0, r2
 801acea:	4798      	blx	r3
 801acec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801acee:	e00f      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801acf0:	6839      	ldr	r1, [r7, #0]
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	f000 fa30 	bl	801b158 <USBD_CtlError>
            err++;
 801acf8:	7afb      	ldrb	r3, [r7, #11]
 801acfa:	3301      	adds	r3, #1
 801acfc:	72fb      	strb	r3, [r7, #11]
          break;
 801acfe:	e007      	b.n	801ad10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801ad00:	6839      	ldr	r1, [r7, #0]
 801ad02:	6878      	ldr	r0, [r7, #4]
 801ad04:	f000 fa28 	bl	801b158 <USBD_CtlError>
          err++;
 801ad08:	7afb      	ldrb	r3, [r7, #11]
 801ad0a:	3301      	adds	r3, #1
 801ad0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801ad0e:	bf00      	nop
      }
      break;
 801ad10:	e037      	b.n	801ad82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	7c1b      	ldrb	r3, [r3, #16]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d109      	bne.n	801ad2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ad20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad22:	f107 0208 	add.w	r2, r7, #8
 801ad26:	4610      	mov	r0, r2
 801ad28:	4798      	blx	r3
 801ad2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ad2c:	e029      	b.n	801ad82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ad2e:	6839      	ldr	r1, [r7, #0]
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	f000 fa11 	bl	801b158 <USBD_CtlError>
        err++;
 801ad36:	7afb      	ldrb	r3, [r7, #11]
 801ad38:	3301      	adds	r3, #1
 801ad3a:	72fb      	strb	r3, [r7, #11]
      break;
 801ad3c:	e021      	b.n	801ad82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	7c1b      	ldrb	r3, [r3, #16]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d10d      	bne.n	801ad62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad4e:	f107 0208 	add.w	r2, r7, #8
 801ad52:	4610      	mov	r0, r2
 801ad54:	4798      	blx	r3
 801ad56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	3301      	adds	r3, #1
 801ad5c:	2207      	movs	r2, #7
 801ad5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ad60:	e00f      	b.n	801ad82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801ad62:	6839      	ldr	r1, [r7, #0]
 801ad64:	6878      	ldr	r0, [r7, #4]
 801ad66:	f000 f9f7 	bl	801b158 <USBD_CtlError>
        err++;
 801ad6a:	7afb      	ldrb	r3, [r7, #11]
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	72fb      	strb	r3, [r7, #11]
      break;
 801ad70:	e007      	b.n	801ad82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801ad72:	6839      	ldr	r1, [r7, #0]
 801ad74:	6878      	ldr	r0, [r7, #4]
 801ad76:	f000 f9ef 	bl	801b158 <USBD_CtlError>
      err++;
 801ad7a:	7afb      	ldrb	r3, [r7, #11]
 801ad7c:	3301      	adds	r3, #1
 801ad7e:	72fb      	strb	r3, [r7, #11]
      break;
 801ad80:	bf00      	nop
  }

  if (err != 0U)
 801ad82:	7afb      	ldrb	r3, [r7, #11]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d11e      	bne.n	801adc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	88db      	ldrh	r3, [r3, #6]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d016      	beq.n	801adbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801ad90:	893b      	ldrh	r3, [r7, #8]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d00e      	beq.n	801adb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801ad96:	683b      	ldr	r3, [r7, #0]
 801ad98:	88da      	ldrh	r2, [r3, #6]
 801ad9a:	893b      	ldrh	r3, [r7, #8]
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	bf28      	it	cs
 801ada0:	4613      	movcs	r3, r2
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ada6:	893b      	ldrh	r3, [r7, #8]
 801ada8:	461a      	mov	r2, r3
 801adaa:	68f9      	ldr	r1, [r7, #12]
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	f000 fa44 	bl	801b23a <USBD_CtlSendData>
 801adb2:	e009      	b.n	801adc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801adb4:	6839      	ldr	r1, [r7, #0]
 801adb6:	6878      	ldr	r0, [r7, #4]
 801adb8:	f000 f9ce 	bl	801b158 <USBD_CtlError>
 801adbc:	e004      	b.n	801adc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f000 fa95 	bl	801b2ee <USBD_CtlSendStatus>
 801adc4:	e000      	b.n	801adc8 <USBD_GetDescriptor+0x2cc>
    return;
 801adc6:	bf00      	nop
  }
}
 801adc8:	3710      	adds	r7, #16
 801adca:	46bd      	mov	sp, r7
 801adcc:	bd80      	pop	{r7, pc}
 801adce:	bf00      	nop

0801add0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b084      	sub	sp, #16
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	889b      	ldrh	r3, [r3, #4]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d131      	bne.n	801ae46 <USBD_SetAddress+0x76>
 801ade2:	683b      	ldr	r3, [r7, #0]
 801ade4:	88db      	ldrh	r3, [r3, #6]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d12d      	bne.n	801ae46 <USBD_SetAddress+0x76>
 801adea:	683b      	ldr	r3, [r7, #0]
 801adec:	885b      	ldrh	r3, [r3, #2]
 801adee:	2b7f      	cmp	r3, #127	; 0x7f
 801adf0:	d829      	bhi.n	801ae46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	885b      	ldrh	r3, [r3, #2]
 801adf6:	b2db      	uxtb	r3, r3
 801adf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801adfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae04:	b2db      	uxtb	r3, r3
 801ae06:	2b03      	cmp	r3, #3
 801ae08:	d104      	bne.n	801ae14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801ae0a:	6839      	ldr	r1, [r7, #0]
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f000 f9a3 	bl	801b158 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae12:	e01d      	b.n	801ae50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	7bfa      	ldrb	r2, [r7, #15]
 801ae18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ae1c:	7bfb      	ldrb	r3, [r7, #15]
 801ae1e:	4619      	mov	r1, r3
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f000 fef3 	bl	801bc0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801ae26:	6878      	ldr	r0, [r7, #4]
 801ae28:	f000 fa61 	bl	801b2ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ae2c:	7bfb      	ldrb	r3, [r7, #15]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d004      	beq.n	801ae3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2202      	movs	r2, #2
 801ae36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae3a:	e009      	b.n	801ae50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2201      	movs	r2, #1
 801ae40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae44:	e004      	b.n	801ae50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ae46:	6839      	ldr	r1, [r7, #0]
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	f000 f985 	bl	801b158 <USBD_CtlError>
  }
}
 801ae4e:	bf00      	nop
 801ae50:	bf00      	nop
 801ae52:	3710      	adds	r7, #16
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bd80      	pop	{r7, pc}

0801ae58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b084      	sub	sp, #16
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
 801ae60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ae62:	2300      	movs	r3, #0
 801ae64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ae66:	683b      	ldr	r3, [r7, #0]
 801ae68:	885b      	ldrh	r3, [r3, #2]
 801ae6a:	b2da      	uxtb	r2, r3
 801ae6c:	4b4c      	ldr	r3, [pc, #304]	; (801afa0 <USBD_SetConfig+0x148>)
 801ae6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ae70:	4b4b      	ldr	r3, [pc, #300]	; (801afa0 <USBD_SetConfig+0x148>)
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	2b01      	cmp	r3, #1
 801ae76:	d905      	bls.n	801ae84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801ae78:	6839      	ldr	r1, [r7, #0]
 801ae7a:	6878      	ldr	r0, [r7, #4]
 801ae7c:	f000 f96c 	bl	801b158 <USBD_CtlError>
    return USBD_FAIL;
 801ae80:	2303      	movs	r3, #3
 801ae82:	e088      	b.n	801af96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	2b02      	cmp	r3, #2
 801ae8e:	d002      	beq.n	801ae96 <USBD_SetConfig+0x3e>
 801ae90:	2b03      	cmp	r3, #3
 801ae92:	d025      	beq.n	801aee0 <USBD_SetConfig+0x88>
 801ae94:	e071      	b.n	801af7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ae96:	4b42      	ldr	r3, [pc, #264]	; (801afa0 <USBD_SetConfig+0x148>)
 801ae98:	781b      	ldrb	r3, [r3, #0]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d01c      	beq.n	801aed8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ae9e:	4b40      	ldr	r3, [pc, #256]	; (801afa0 <USBD_SetConfig+0x148>)
 801aea0:	781b      	ldrb	r3, [r3, #0]
 801aea2:	461a      	mov	r2, r3
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801aea8:	4b3d      	ldr	r3, [pc, #244]	; (801afa0 <USBD_SetConfig+0x148>)
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	4619      	mov	r1, r3
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f7ff f948 	bl	801a144 <USBD_SetClassConfig>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801aeb8:	7bfb      	ldrb	r3, [r7, #15]
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d004      	beq.n	801aec8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801aebe:	6839      	ldr	r1, [r7, #0]
 801aec0:	6878      	ldr	r0, [r7, #4]
 801aec2:	f000 f949 	bl	801b158 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801aec6:	e065      	b.n	801af94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801aec8:	6878      	ldr	r0, [r7, #4]
 801aeca:	f000 fa10 	bl	801b2ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2203      	movs	r2, #3
 801aed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801aed6:	e05d      	b.n	801af94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f000 fa08 	bl	801b2ee <USBD_CtlSendStatus>
      break;
 801aede:	e059      	b.n	801af94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801aee0:	4b2f      	ldr	r3, [pc, #188]	; (801afa0 <USBD_SetConfig+0x148>)
 801aee2:	781b      	ldrb	r3, [r3, #0]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d112      	bne.n	801af0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	2202      	movs	r2, #2
 801aeec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801aef0:	4b2b      	ldr	r3, [pc, #172]	; (801afa0 <USBD_SetConfig+0x148>)
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	461a      	mov	r2, r3
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801aefa:	4b29      	ldr	r3, [pc, #164]	; (801afa0 <USBD_SetConfig+0x148>)
 801aefc:	781b      	ldrb	r3, [r3, #0]
 801aefe:	4619      	mov	r1, r3
 801af00:	6878      	ldr	r0, [r7, #4]
 801af02:	f7ff f93b 	bl	801a17c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	f000 f9f1 	bl	801b2ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801af0c:	e042      	b.n	801af94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801af0e:	4b24      	ldr	r3, [pc, #144]	; (801afa0 <USBD_SetConfig+0x148>)
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	461a      	mov	r2, r3
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	429a      	cmp	r2, r3
 801af1a:	d02a      	beq.n	801af72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	685b      	ldr	r3, [r3, #4]
 801af20:	b2db      	uxtb	r3, r3
 801af22:	4619      	mov	r1, r3
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7ff f929 	bl	801a17c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801af2a:	4b1d      	ldr	r3, [pc, #116]	; (801afa0 <USBD_SetConfig+0x148>)
 801af2c:	781b      	ldrb	r3, [r3, #0]
 801af2e:	461a      	mov	r2, r3
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801af34:	4b1a      	ldr	r3, [pc, #104]	; (801afa0 <USBD_SetConfig+0x148>)
 801af36:	781b      	ldrb	r3, [r3, #0]
 801af38:	4619      	mov	r1, r3
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f7ff f902 	bl	801a144 <USBD_SetClassConfig>
 801af40:	4603      	mov	r3, r0
 801af42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801af44:	7bfb      	ldrb	r3, [r7, #15]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d00f      	beq.n	801af6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801af4a:	6839      	ldr	r1, [r7, #0]
 801af4c:	6878      	ldr	r0, [r7, #4]
 801af4e:	f000 f903 	bl	801b158 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	b2db      	uxtb	r3, r3
 801af58:	4619      	mov	r1, r3
 801af5a:	6878      	ldr	r0, [r7, #4]
 801af5c:	f7ff f90e 	bl	801a17c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2202      	movs	r2, #2
 801af64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801af68:	e014      	b.n	801af94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f000 f9bf 	bl	801b2ee <USBD_CtlSendStatus>
      break;
 801af70:	e010      	b.n	801af94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801af72:	6878      	ldr	r0, [r7, #4]
 801af74:	f000 f9bb 	bl	801b2ee <USBD_CtlSendStatus>
      break;
 801af78:	e00c      	b.n	801af94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801af7a:	6839      	ldr	r1, [r7, #0]
 801af7c:	6878      	ldr	r0, [r7, #4]
 801af7e:	f000 f8eb 	bl	801b158 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801af82:	4b07      	ldr	r3, [pc, #28]	; (801afa0 <USBD_SetConfig+0x148>)
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	4619      	mov	r1, r3
 801af88:	6878      	ldr	r0, [r7, #4]
 801af8a:	f7ff f8f7 	bl	801a17c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801af8e:	2303      	movs	r3, #3
 801af90:	73fb      	strb	r3, [r7, #15]
      break;
 801af92:	bf00      	nop
  }

  return ret;
 801af94:	7bfb      	ldrb	r3, [r7, #15]
}
 801af96:	4618      	mov	r0, r3
 801af98:	3710      	adds	r7, #16
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bd80      	pop	{r7, pc}
 801af9e:	bf00      	nop
 801afa0:	24001b58 	.word	0x24001b58

0801afa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b082      	sub	sp, #8
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
 801afac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	88db      	ldrh	r3, [r3, #6]
 801afb2:	2b01      	cmp	r3, #1
 801afb4:	d004      	beq.n	801afc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801afb6:	6839      	ldr	r1, [r7, #0]
 801afb8:	6878      	ldr	r0, [r7, #4]
 801afba:	f000 f8cd 	bl	801b158 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801afbe:	e023      	b.n	801b008 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afc6:	b2db      	uxtb	r3, r3
 801afc8:	2b02      	cmp	r3, #2
 801afca:	dc02      	bgt.n	801afd2 <USBD_GetConfig+0x2e>
 801afcc:	2b00      	cmp	r3, #0
 801afce:	dc03      	bgt.n	801afd8 <USBD_GetConfig+0x34>
 801afd0:	e015      	b.n	801affe <USBD_GetConfig+0x5a>
 801afd2:	2b03      	cmp	r3, #3
 801afd4:	d00b      	beq.n	801afee <USBD_GetConfig+0x4a>
 801afd6:	e012      	b.n	801affe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2200      	movs	r2, #0
 801afdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	3308      	adds	r3, #8
 801afe2:	2201      	movs	r2, #1
 801afe4:	4619      	mov	r1, r3
 801afe6:	6878      	ldr	r0, [r7, #4]
 801afe8:	f000 f927 	bl	801b23a <USBD_CtlSendData>
        break;
 801afec:	e00c      	b.n	801b008 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	3304      	adds	r3, #4
 801aff2:	2201      	movs	r2, #1
 801aff4:	4619      	mov	r1, r3
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f000 f91f 	bl	801b23a <USBD_CtlSendData>
        break;
 801affc:	e004      	b.n	801b008 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801affe:	6839      	ldr	r1, [r7, #0]
 801b000:	6878      	ldr	r0, [r7, #4]
 801b002:	f000 f8a9 	bl	801b158 <USBD_CtlError>
        break;
 801b006:	bf00      	nop
}
 801b008:	bf00      	nop
 801b00a:	3708      	adds	r7, #8
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bd80      	pop	{r7, pc}

0801b010 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
 801b018:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b020:	b2db      	uxtb	r3, r3
 801b022:	3b01      	subs	r3, #1
 801b024:	2b02      	cmp	r3, #2
 801b026:	d81e      	bhi.n	801b066 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	88db      	ldrh	r3, [r3, #6]
 801b02c:	2b02      	cmp	r3, #2
 801b02e:	d004      	beq.n	801b03a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801b030:	6839      	ldr	r1, [r7, #0]
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f000 f890 	bl	801b158 <USBD_CtlError>
        break;
 801b038:	e01a      	b.n	801b070 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	2201      	movs	r2, #1
 801b03e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801b046:	2b00      	cmp	r3, #0
 801b048:	d005      	beq.n	801b056 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	68db      	ldr	r3, [r3, #12]
 801b04e:	f043 0202 	orr.w	r2, r3, #2
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	330c      	adds	r3, #12
 801b05a:	2202      	movs	r2, #2
 801b05c:	4619      	mov	r1, r3
 801b05e:	6878      	ldr	r0, [r7, #4]
 801b060:	f000 f8eb 	bl	801b23a <USBD_CtlSendData>
      break;
 801b064:	e004      	b.n	801b070 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801b066:	6839      	ldr	r1, [r7, #0]
 801b068:	6878      	ldr	r0, [r7, #4]
 801b06a:	f000 f875 	bl	801b158 <USBD_CtlError>
      break;
 801b06e:	bf00      	nop
  }
}
 801b070:	bf00      	nop
 801b072:	3708      	adds	r7, #8
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}

0801b078 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	885b      	ldrh	r3, [r3, #2]
 801b086:	2b01      	cmp	r3, #1
 801b088:	d106      	bne.n	801b098 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	2201      	movs	r2, #1
 801b08e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801b092:	6878      	ldr	r0, [r7, #4]
 801b094:	f000 f92b 	bl	801b2ee <USBD_CtlSendStatus>
  }
}
 801b098:	bf00      	nop
 801b09a:	3708      	adds	r7, #8
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}

0801b0a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b082      	sub	sp, #8
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	3b01      	subs	r3, #1
 801b0b4:	2b02      	cmp	r3, #2
 801b0b6:	d80b      	bhi.n	801b0d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	885b      	ldrh	r3, [r3, #2]
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	d10c      	bne.n	801b0da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f000 f910 	bl	801b2ee <USBD_CtlSendStatus>
      }
      break;
 801b0ce:	e004      	b.n	801b0da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801b0d0:	6839      	ldr	r1, [r7, #0]
 801b0d2:	6878      	ldr	r0, [r7, #4]
 801b0d4:	f000 f840 	bl	801b158 <USBD_CtlError>
      break;
 801b0d8:	e000      	b.n	801b0dc <USBD_ClrFeature+0x3c>
      break;
 801b0da:	bf00      	nop
  }
}
 801b0dc:	bf00      	nop
 801b0de:	3708      	adds	r7, #8
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	bd80      	pop	{r7, pc}

0801b0e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b084      	sub	sp, #16
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	781a      	ldrb	r2, [r3, #0]
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	781a      	ldrb	r2, [r3, #0]
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	3301      	adds	r3, #1
 801b10c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801b10e:	68f8      	ldr	r0, [r7, #12]
 801b110:	f7ff fabb 	bl	801a68a <SWAPBYTE>
 801b114:	4603      	mov	r3, r0
 801b116:	461a      	mov	r2, r3
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	3301      	adds	r3, #1
 801b120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	3301      	adds	r3, #1
 801b126:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801b128:	68f8      	ldr	r0, [r7, #12]
 801b12a:	f7ff faae 	bl	801a68a <SWAPBYTE>
 801b12e:	4603      	mov	r3, r0
 801b130:	461a      	mov	r2, r3
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	3301      	adds	r3, #1
 801b13a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	3301      	adds	r3, #1
 801b140:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801b142:	68f8      	ldr	r0, [r7, #12]
 801b144:	f7ff faa1 	bl	801a68a <SWAPBYTE>
 801b148:	4603      	mov	r3, r0
 801b14a:	461a      	mov	r2, r3
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	80da      	strh	r2, [r3, #6]
}
 801b150:	bf00      	nop
 801b152:	3710      	adds	r7, #16
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}

0801b158 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
 801b160:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801b162:	2180      	movs	r1, #128	; 0x80
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f000 fce7 	bl	801bb38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801b16a:	2100      	movs	r1, #0
 801b16c:	6878      	ldr	r0, [r7, #4]
 801b16e:	f000 fce3 	bl	801bb38 <USBD_LL_StallEP>
}
 801b172:	bf00      	nop
 801b174:	3708      	adds	r7, #8
 801b176:	46bd      	mov	sp, r7
 801b178:	bd80      	pop	{r7, pc}

0801b17a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b17a:	b580      	push	{r7, lr}
 801b17c:	b086      	sub	sp, #24
 801b17e:	af00      	add	r7, sp, #0
 801b180:	60f8      	str	r0, [r7, #12]
 801b182:	60b9      	str	r1, [r7, #8]
 801b184:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b186:	2300      	movs	r3, #0
 801b188:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d036      	beq.n	801b1fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801b194:	6938      	ldr	r0, [r7, #16]
 801b196:	f000 f836 	bl	801b206 <USBD_GetLen>
 801b19a:	4603      	mov	r3, r0
 801b19c:	3301      	adds	r3, #1
 801b19e:	b29b      	uxth	r3, r3
 801b1a0:	005b      	lsls	r3, r3, #1
 801b1a2:	b29a      	uxth	r2, r3
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801b1a8:	7dfb      	ldrb	r3, [r7, #23]
 801b1aa:	68ba      	ldr	r2, [r7, #8]
 801b1ac:	4413      	add	r3, r2
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	7812      	ldrb	r2, [r2, #0]
 801b1b2:	701a      	strb	r2, [r3, #0]
  idx++;
 801b1b4:	7dfb      	ldrb	r3, [r7, #23]
 801b1b6:	3301      	adds	r3, #1
 801b1b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801b1ba:	7dfb      	ldrb	r3, [r7, #23]
 801b1bc:	68ba      	ldr	r2, [r7, #8]
 801b1be:	4413      	add	r3, r2
 801b1c0:	2203      	movs	r2, #3
 801b1c2:	701a      	strb	r2, [r3, #0]
  idx++;
 801b1c4:	7dfb      	ldrb	r3, [r7, #23]
 801b1c6:	3301      	adds	r3, #1
 801b1c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b1ca:	e013      	b.n	801b1f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b1cc:	7dfb      	ldrb	r3, [r7, #23]
 801b1ce:	68ba      	ldr	r2, [r7, #8]
 801b1d0:	4413      	add	r3, r2
 801b1d2:	693a      	ldr	r2, [r7, #16]
 801b1d4:	7812      	ldrb	r2, [r2, #0]
 801b1d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b1d8:	693b      	ldr	r3, [r7, #16]
 801b1da:	3301      	adds	r3, #1
 801b1dc:	613b      	str	r3, [r7, #16]
    idx++;
 801b1de:	7dfb      	ldrb	r3, [r7, #23]
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b1e4:	7dfb      	ldrb	r3, [r7, #23]
 801b1e6:	68ba      	ldr	r2, [r7, #8]
 801b1e8:	4413      	add	r3, r2
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	701a      	strb	r2, [r3, #0]
    idx++;
 801b1ee:	7dfb      	ldrb	r3, [r7, #23]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b1f4:	693b      	ldr	r3, [r7, #16]
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d1e7      	bne.n	801b1cc <USBD_GetString+0x52>
 801b1fc:	e000      	b.n	801b200 <USBD_GetString+0x86>
    return;
 801b1fe:	bf00      	nop
  }
}
 801b200:	3718      	adds	r7, #24
 801b202:	46bd      	mov	sp, r7
 801b204:	bd80      	pop	{r7, pc}

0801b206 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b206:	b480      	push	{r7}
 801b208:	b085      	sub	sp, #20
 801b20a:	af00      	add	r7, sp, #0
 801b20c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b20e:	2300      	movs	r3, #0
 801b210:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b216:	e005      	b.n	801b224 <USBD_GetLen+0x1e>
  {
    len++;
 801b218:	7bfb      	ldrb	r3, [r7, #15]
 801b21a:	3301      	adds	r3, #1
 801b21c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	3301      	adds	r3, #1
 801b222:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	781b      	ldrb	r3, [r3, #0]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d1f5      	bne.n	801b218 <USBD_GetLen+0x12>
  }

  return len;
 801b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b22e:	4618      	mov	r0, r3
 801b230:	3714      	adds	r7, #20
 801b232:	46bd      	mov	sp, r7
 801b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b238:	4770      	bx	lr

0801b23a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b23a:	b580      	push	{r7, lr}
 801b23c:	b084      	sub	sp, #16
 801b23e:	af00      	add	r7, sp, #0
 801b240:	60f8      	str	r0, [r7, #12]
 801b242:	60b9      	str	r1, [r7, #8]
 801b244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	2202      	movs	r2, #2
 801b24a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	687a      	ldr	r2, [r7, #4]
 801b252:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	687a      	ldr	r2, [r7, #4]
 801b258:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	68ba      	ldr	r2, [r7, #8]
 801b25e:	2100      	movs	r1, #0
 801b260:	68f8      	ldr	r0, [r7, #12]
 801b262:	f000 fcf2 	bl	801bc4a <USBD_LL_Transmit>

  return USBD_OK;
 801b266:	2300      	movs	r3, #0
}
 801b268:	4618      	mov	r0, r3
 801b26a:	3710      	adds	r7, #16
 801b26c:	46bd      	mov	sp, r7
 801b26e:	bd80      	pop	{r7, pc}

0801b270 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b270:	b580      	push	{r7, lr}
 801b272:	b084      	sub	sp, #16
 801b274:	af00      	add	r7, sp, #0
 801b276:	60f8      	str	r0, [r7, #12]
 801b278:	60b9      	str	r1, [r7, #8]
 801b27a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	68ba      	ldr	r2, [r7, #8]
 801b280:	2100      	movs	r1, #0
 801b282:	68f8      	ldr	r0, [r7, #12]
 801b284:	f000 fce1 	bl	801bc4a <USBD_LL_Transmit>

  return USBD_OK;
 801b288:	2300      	movs	r3, #0
}
 801b28a:	4618      	mov	r0, r3
 801b28c:	3710      	adds	r7, #16
 801b28e:	46bd      	mov	sp, r7
 801b290:	bd80      	pop	{r7, pc}

0801b292 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b292:	b580      	push	{r7, lr}
 801b294:	b084      	sub	sp, #16
 801b296:	af00      	add	r7, sp, #0
 801b298:	60f8      	str	r0, [r7, #12]
 801b29a:	60b9      	str	r1, [r7, #8]
 801b29c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	2203      	movs	r2, #3
 801b2a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	687a      	ldr	r2, [r7, #4]
 801b2aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	687a      	ldr	r2, [r7, #4]
 801b2b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	68ba      	ldr	r2, [r7, #8]
 801b2ba:	2100      	movs	r1, #0
 801b2bc:	68f8      	ldr	r0, [r7, #12]
 801b2be:	f000 fce5 	bl	801bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2c2:	2300      	movs	r3, #0
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	3710      	adds	r7, #16
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}

0801b2cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b084      	sub	sp, #16
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	60f8      	str	r0, [r7, #12]
 801b2d4:	60b9      	str	r1, [r7, #8]
 801b2d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	68ba      	ldr	r2, [r7, #8]
 801b2dc:	2100      	movs	r1, #0
 801b2de:	68f8      	ldr	r0, [r7, #12]
 801b2e0:	f000 fcd4 	bl	801bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2e4:	2300      	movs	r3, #0
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3710      	adds	r7, #16
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}

0801b2ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b2ee:	b580      	push	{r7, lr}
 801b2f0:	b082      	sub	sp, #8
 801b2f2:	af00      	add	r7, sp, #0
 801b2f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	2204      	movs	r2, #4
 801b2fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b2fe:	2300      	movs	r3, #0
 801b300:	2200      	movs	r2, #0
 801b302:	2100      	movs	r1, #0
 801b304:	6878      	ldr	r0, [r7, #4]
 801b306:	f000 fca0 	bl	801bc4a <USBD_LL_Transmit>

  return USBD_OK;
 801b30a:	2300      	movs	r3, #0
}
 801b30c:	4618      	mov	r0, r3
 801b30e:	3708      	adds	r7, #8
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}

0801b314 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b082      	sub	sp, #8
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	2205      	movs	r2, #5
 801b320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b324:	2300      	movs	r3, #0
 801b326:	2200      	movs	r2, #0
 801b328:	2100      	movs	r1, #0
 801b32a:	6878      	ldr	r0, [r7, #4]
 801b32c:	f000 fcae 	bl	801bc8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b330:	2300      	movs	r3, #0
}
 801b332:	4618      	mov	r0, r3
 801b334:	3708      	adds	r7, #8
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
	...

0801b33c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b340:	2200      	movs	r2, #0
 801b342:	4913      	ldr	r1, [pc, #76]	; (801b390 <MX_USB_DEVICE_Init+0x54>)
 801b344:	4813      	ldr	r0, [pc, #76]	; (801b394 <MX_USB_DEVICE_Init+0x58>)
 801b346:	f7fe fe8f 	bl	801a068 <USBD_Init>
 801b34a:	4603      	mov	r3, r0
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d001      	beq.n	801b354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b350:	f7ef fbb4 	bl	800aabc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b354:	4910      	ldr	r1, [pc, #64]	; (801b398 <MX_USB_DEVICE_Init+0x5c>)
 801b356:	480f      	ldr	r0, [pc, #60]	; (801b394 <MX_USB_DEVICE_Init+0x58>)
 801b358:	f7fe feb6 	bl	801a0c8 <USBD_RegisterClass>
 801b35c:	4603      	mov	r3, r0
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d001      	beq.n	801b366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b362:	f7ef fbab 	bl	800aabc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b366:	490d      	ldr	r1, [pc, #52]	; (801b39c <MX_USB_DEVICE_Init+0x60>)
 801b368:	480a      	ldr	r0, [pc, #40]	; (801b394 <MX_USB_DEVICE_Init+0x58>)
 801b36a:	f7fe fe07 	bl	8019f7c <USBD_CDC_RegisterInterface>
 801b36e:	4603      	mov	r3, r0
 801b370:	2b00      	cmp	r3, #0
 801b372:	d001      	beq.n	801b378 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b374:	f7ef fba2 	bl	800aabc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b378:	4806      	ldr	r0, [pc, #24]	; (801b394 <MX_USB_DEVICE_Init+0x58>)
 801b37a:	f7fe fecc 	bl	801a116 <USBD_Start>
 801b37e:	4603      	mov	r3, r0
 801b380:	2b00      	cmp	r3, #0
 801b382:	d001      	beq.n	801b388 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b384:	f7ef fb9a 	bl	800aabc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801b388:	f7f5 fee6 	bl	8011158 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b38c:	bf00      	nop
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	24000134 	.word	0x24000134
 801b394:	24001b5c 	.word	0x24001b5c
 801b398:	2400001c 	.word	0x2400001c
 801b39c:	24000120 	.word	0x24000120

0801b3a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	4905      	ldr	r1, [pc, #20]	; (801b3bc <CDC_Init_FS+0x1c>)
 801b3a8:	4805      	ldr	r0, [pc, #20]	; (801b3c0 <CDC_Init_FS+0x20>)
 801b3aa:	f7fe fdfc 	bl	8019fa6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b3ae:	4905      	ldr	r1, [pc, #20]	; (801b3c4 <CDC_Init_FS+0x24>)
 801b3b0:	4803      	ldr	r0, [pc, #12]	; (801b3c0 <CDC_Init_FS+0x20>)
 801b3b2:	f7fe fe16 	bl	8019fe2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b3b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	bd80      	pop	{r7, pc}
 801b3bc:	2400262c 	.word	0x2400262c
 801b3c0:	24001b5c 	.word	0x24001b5c
 801b3c4:	24001e2c 	.word	0x24001e2c

0801b3c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b3c8:	b480      	push	{r7}
 801b3ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b3cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d6:	4770      	bx	lr

0801b3d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b3d8:	b480      	push	{r7}
 801b3da:	b083      	sub	sp, #12
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	4603      	mov	r3, r0
 801b3e0:	6039      	str	r1, [r7, #0]
 801b3e2:	71fb      	strb	r3, [r7, #7]
 801b3e4:	4613      	mov	r3, r2
 801b3e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b3e8:	79fb      	ldrb	r3, [r7, #7]
 801b3ea:	2b23      	cmp	r3, #35	; 0x23
 801b3ec:	d84a      	bhi.n	801b484 <CDC_Control_FS+0xac>
 801b3ee:	a201      	add	r2, pc, #4	; (adr r2, 801b3f4 <CDC_Control_FS+0x1c>)
 801b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3f4:	0801b485 	.word	0x0801b485
 801b3f8:	0801b485 	.word	0x0801b485
 801b3fc:	0801b485 	.word	0x0801b485
 801b400:	0801b485 	.word	0x0801b485
 801b404:	0801b485 	.word	0x0801b485
 801b408:	0801b485 	.word	0x0801b485
 801b40c:	0801b485 	.word	0x0801b485
 801b410:	0801b485 	.word	0x0801b485
 801b414:	0801b485 	.word	0x0801b485
 801b418:	0801b485 	.word	0x0801b485
 801b41c:	0801b485 	.word	0x0801b485
 801b420:	0801b485 	.word	0x0801b485
 801b424:	0801b485 	.word	0x0801b485
 801b428:	0801b485 	.word	0x0801b485
 801b42c:	0801b485 	.word	0x0801b485
 801b430:	0801b485 	.word	0x0801b485
 801b434:	0801b485 	.word	0x0801b485
 801b438:	0801b485 	.word	0x0801b485
 801b43c:	0801b485 	.word	0x0801b485
 801b440:	0801b485 	.word	0x0801b485
 801b444:	0801b485 	.word	0x0801b485
 801b448:	0801b485 	.word	0x0801b485
 801b44c:	0801b485 	.word	0x0801b485
 801b450:	0801b485 	.word	0x0801b485
 801b454:	0801b485 	.word	0x0801b485
 801b458:	0801b485 	.word	0x0801b485
 801b45c:	0801b485 	.word	0x0801b485
 801b460:	0801b485 	.word	0x0801b485
 801b464:	0801b485 	.word	0x0801b485
 801b468:	0801b485 	.word	0x0801b485
 801b46c:	0801b485 	.word	0x0801b485
 801b470:	0801b485 	.word	0x0801b485
 801b474:	0801b485 	.word	0x0801b485
 801b478:	0801b485 	.word	0x0801b485
 801b47c:	0801b485 	.word	0x0801b485
 801b480:	0801b485 	.word	0x0801b485
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b484:	bf00      	nop
  }

  return (USBD_OK);
 801b486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b488:	4618      	mov	r0, r3
 801b48a:	370c      	adds	r7, #12
 801b48c:	46bd      	mov	sp, r7
 801b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b492:	4770      	bx	lr

0801b494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b494:	b580      	push	{r7, lr}
 801b496:	b082      	sub	sp, #8
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
 801b49c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b49e:	6879      	ldr	r1, [r7, #4]
 801b4a0:	4805      	ldr	r0, [pc, #20]	; (801b4b8 <CDC_Receive_FS+0x24>)
 801b4a2:	f7fe fd9e 	bl	8019fe2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b4a6:	4804      	ldr	r0, [pc, #16]	; (801b4b8 <CDC_Receive_FS+0x24>)
 801b4a8:	f7fe fdb4 	bl	801a014 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801b4ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	3708      	adds	r7, #8
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	bd80      	pop	{r7, pc}
 801b4b6:	bf00      	nop
 801b4b8:	24001b5c 	.word	0x24001b5c

0801b4bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801b4bc:	b480      	push	{r7}
 801b4be:	b087      	sub	sp, #28
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	60f8      	str	r0, [r7, #12]
 801b4c4:	60b9      	str	r1, [r7, #8]
 801b4c6:	4613      	mov	r3, r2
 801b4c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801b4ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	371c      	adds	r7, #28
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4dc:	4770      	bx	lr
	...

0801b4e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b4e0:	b480      	push	{r7}
 801b4e2:	b083      	sub	sp, #12
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	6039      	str	r1, [r7, #0]
 801b4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b4ec:	683b      	ldr	r3, [r7, #0]
 801b4ee:	2212      	movs	r2, #18
 801b4f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b4f2:	4b03      	ldr	r3, [pc, #12]	; (801b500 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	370c      	adds	r7, #12
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fe:	4770      	bx	lr
 801b500:	24000150 	.word	0x24000150

0801b504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b504:	b480      	push	{r7}
 801b506:	b083      	sub	sp, #12
 801b508:	af00      	add	r7, sp, #0
 801b50a:	4603      	mov	r3, r0
 801b50c:	6039      	str	r1, [r7, #0]
 801b50e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b510:	683b      	ldr	r3, [r7, #0]
 801b512:	2204      	movs	r2, #4
 801b514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b516:	4b03      	ldr	r3, [pc, #12]	; (801b524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b518:	4618      	mov	r0, r3
 801b51a:	370c      	adds	r7, #12
 801b51c:	46bd      	mov	sp, r7
 801b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b522:	4770      	bx	lr
 801b524:	24000164 	.word	0x24000164

0801b528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b082      	sub	sp, #8
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	4603      	mov	r3, r0
 801b530:	6039      	str	r1, [r7, #0]
 801b532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b534:	79fb      	ldrb	r3, [r7, #7]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d105      	bne.n	801b546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b53a:	683a      	ldr	r2, [r7, #0]
 801b53c:	4907      	ldr	r1, [pc, #28]	; (801b55c <USBD_FS_ProductStrDescriptor+0x34>)
 801b53e:	4808      	ldr	r0, [pc, #32]	; (801b560 <USBD_FS_ProductStrDescriptor+0x38>)
 801b540:	f7ff fe1b 	bl	801b17a <USBD_GetString>
 801b544:	e004      	b.n	801b550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b546:	683a      	ldr	r2, [r7, #0]
 801b548:	4904      	ldr	r1, [pc, #16]	; (801b55c <USBD_FS_ProductStrDescriptor+0x34>)
 801b54a:	4805      	ldr	r0, [pc, #20]	; (801b560 <USBD_FS_ProductStrDescriptor+0x38>)
 801b54c:	f7ff fe15 	bl	801b17a <USBD_GetString>
  }
  return USBD_StrDesc;
 801b550:	4b02      	ldr	r3, [pc, #8]	; (801b55c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b552:	4618      	mov	r0, r3
 801b554:	3708      	adds	r7, #8
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}
 801b55a:	bf00      	nop
 801b55c:	24002e2c 	.word	0x24002e2c
 801b560:	0801d3f8 	.word	0x0801d3f8

0801b564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b082      	sub	sp, #8
 801b568:	af00      	add	r7, sp, #0
 801b56a:	4603      	mov	r3, r0
 801b56c:	6039      	str	r1, [r7, #0]
 801b56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b570:	683a      	ldr	r2, [r7, #0]
 801b572:	4904      	ldr	r1, [pc, #16]	; (801b584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b574:	4804      	ldr	r0, [pc, #16]	; (801b588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b576:	f7ff fe00 	bl	801b17a <USBD_GetString>
  return USBD_StrDesc;
 801b57a:	4b02      	ldr	r3, [pc, #8]	; (801b584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b57c:	4618      	mov	r0, r3
 801b57e:	3708      	adds	r7, #8
 801b580:	46bd      	mov	sp, r7
 801b582:	bd80      	pop	{r7, pc}
 801b584:	24002e2c 	.word	0x24002e2c
 801b588:	0801d410 	.word	0x0801d410

0801b58c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b082      	sub	sp, #8
 801b590:	af00      	add	r7, sp, #0
 801b592:	4603      	mov	r3, r0
 801b594:	6039      	str	r1, [r7, #0]
 801b596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b598:	683b      	ldr	r3, [r7, #0]
 801b59a:	221a      	movs	r2, #26
 801b59c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b59e:	f000 f843 	bl	801b628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b5a2:	4b02      	ldr	r3, [pc, #8]	; (801b5ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	3708      	adds	r7, #8
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	24000168 	.word	0x24000168

0801b5b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b082      	sub	sp, #8
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	4603      	mov	r3, r0
 801b5b8:	6039      	str	r1, [r7, #0]
 801b5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b5bc:	79fb      	ldrb	r3, [r7, #7]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d105      	bne.n	801b5ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b5c2:	683a      	ldr	r2, [r7, #0]
 801b5c4:	4907      	ldr	r1, [pc, #28]	; (801b5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b5c6:	4808      	ldr	r0, [pc, #32]	; (801b5e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b5c8:	f7ff fdd7 	bl	801b17a <USBD_GetString>
 801b5cc:	e004      	b.n	801b5d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b5ce:	683a      	ldr	r2, [r7, #0]
 801b5d0:	4904      	ldr	r1, [pc, #16]	; (801b5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b5d2:	4805      	ldr	r0, [pc, #20]	; (801b5e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b5d4:	f7ff fdd1 	bl	801b17a <USBD_GetString>
  }
  return USBD_StrDesc;
 801b5d8:	4b02      	ldr	r3, [pc, #8]	; (801b5e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b5da:	4618      	mov	r0, r3
 801b5dc:	3708      	adds	r7, #8
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	bd80      	pop	{r7, pc}
 801b5e2:	bf00      	nop
 801b5e4:	24002e2c 	.word	0x24002e2c
 801b5e8:	0801d424 	.word	0x0801d424

0801b5ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	6039      	str	r1, [r7, #0]
 801b5f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b5f8:	79fb      	ldrb	r3, [r7, #7]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d105      	bne.n	801b60a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b5fe:	683a      	ldr	r2, [r7, #0]
 801b600:	4907      	ldr	r1, [pc, #28]	; (801b620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b602:	4808      	ldr	r0, [pc, #32]	; (801b624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b604:	f7ff fdb9 	bl	801b17a <USBD_GetString>
 801b608:	e004      	b.n	801b614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b60a:	683a      	ldr	r2, [r7, #0]
 801b60c:	4904      	ldr	r1, [pc, #16]	; (801b620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b60e:	4805      	ldr	r0, [pc, #20]	; (801b624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b610:	f7ff fdb3 	bl	801b17a <USBD_GetString>
  }
  return USBD_StrDesc;
 801b614:	4b02      	ldr	r3, [pc, #8]	; (801b620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b616:	4618      	mov	r0, r3
 801b618:	3708      	adds	r7, #8
 801b61a:	46bd      	mov	sp, r7
 801b61c:	bd80      	pop	{r7, pc}
 801b61e:	bf00      	nop
 801b620:	24002e2c 	.word	0x24002e2c
 801b624:	0801d430 	.word	0x0801d430

0801b628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b084      	sub	sp, #16
 801b62c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b62e:	4b0f      	ldr	r3, [pc, #60]	; (801b66c <Get_SerialNum+0x44>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b634:	4b0e      	ldr	r3, [pc, #56]	; (801b670 <Get_SerialNum+0x48>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b63a:	4b0e      	ldr	r3, [pc, #56]	; (801b674 <Get_SerialNum+0x4c>)
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b640:	68fa      	ldr	r2, [r7, #12]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	4413      	add	r3, r2
 801b646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d009      	beq.n	801b662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b64e:	2208      	movs	r2, #8
 801b650:	4909      	ldr	r1, [pc, #36]	; (801b678 <Get_SerialNum+0x50>)
 801b652:	68f8      	ldr	r0, [r7, #12]
 801b654:	f000 f814 	bl	801b680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b658:	2204      	movs	r2, #4
 801b65a:	4908      	ldr	r1, [pc, #32]	; (801b67c <Get_SerialNum+0x54>)
 801b65c:	68b8      	ldr	r0, [r7, #8]
 801b65e:	f000 f80f 	bl	801b680 <IntToUnicode>
  }
}
 801b662:	bf00      	nop
 801b664:	3710      	adds	r7, #16
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}
 801b66a:	bf00      	nop
 801b66c:	1ff1e800 	.word	0x1ff1e800
 801b670:	1ff1e804 	.word	0x1ff1e804
 801b674:	1ff1e808 	.word	0x1ff1e808
 801b678:	2400016a 	.word	0x2400016a
 801b67c:	2400017a 	.word	0x2400017a

0801b680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b680:	b480      	push	{r7}
 801b682:	b087      	sub	sp, #28
 801b684:	af00      	add	r7, sp, #0
 801b686:	60f8      	str	r0, [r7, #12]
 801b688:	60b9      	str	r1, [r7, #8]
 801b68a:	4613      	mov	r3, r2
 801b68c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b68e:	2300      	movs	r3, #0
 801b690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b692:	2300      	movs	r3, #0
 801b694:	75fb      	strb	r3, [r7, #23]
 801b696:	e027      	b.n	801b6e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	0f1b      	lsrs	r3, r3, #28
 801b69c:	2b09      	cmp	r3, #9
 801b69e:	d80b      	bhi.n	801b6b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	0f1b      	lsrs	r3, r3, #28
 801b6a4:	b2da      	uxtb	r2, r3
 801b6a6:	7dfb      	ldrb	r3, [r7, #23]
 801b6a8:	005b      	lsls	r3, r3, #1
 801b6aa:	4619      	mov	r1, r3
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	440b      	add	r3, r1
 801b6b0:	3230      	adds	r2, #48	; 0x30
 801b6b2:	b2d2      	uxtb	r2, r2
 801b6b4:	701a      	strb	r2, [r3, #0]
 801b6b6:	e00a      	b.n	801b6ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	0f1b      	lsrs	r3, r3, #28
 801b6bc:	b2da      	uxtb	r2, r3
 801b6be:	7dfb      	ldrb	r3, [r7, #23]
 801b6c0:	005b      	lsls	r3, r3, #1
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	440b      	add	r3, r1
 801b6c8:	3237      	adds	r2, #55	; 0x37
 801b6ca:	b2d2      	uxtb	r2, r2
 801b6cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	011b      	lsls	r3, r3, #4
 801b6d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b6d4:	7dfb      	ldrb	r3, [r7, #23]
 801b6d6:	005b      	lsls	r3, r3, #1
 801b6d8:	3301      	adds	r3, #1
 801b6da:	68ba      	ldr	r2, [r7, #8]
 801b6dc:	4413      	add	r3, r2
 801b6de:	2200      	movs	r2, #0
 801b6e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b6e2:	7dfb      	ldrb	r3, [r7, #23]
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	75fb      	strb	r3, [r7, #23]
 801b6e8:	7dfa      	ldrb	r2, [r7, #23]
 801b6ea:	79fb      	ldrb	r3, [r7, #7]
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d3d3      	bcc.n	801b698 <IntToUnicode+0x18>
  }
}
 801b6f0:	bf00      	nop
 801b6f2:	bf00      	nop
 801b6f4:	371c      	adds	r7, #28
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fc:	4770      	bx	lr
	...

0801b700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b700:	b580      	push	{r7, lr}
 801b702:	b0b8      	sub	sp, #224	; 0xe0
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b70c:	2200      	movs	r2, #0
 801b70e:	601a      	str	r2, [r3, #0]
 801b710:	605a      	str	r2, [r3, #4]
 801b712:	609a      	str	r2, [r3, #8]
 801b714:	60da      	str	r2, [r3, #12]
 801b716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b718:	f107 0310 	add.w	r3, r7, #16
 801b71c:	22bc      	movs	r2, #188	; 0xbc
 801b71e:	2100      	movs	r1, #0
 801b720:	4618      	mov	r0, r3
 801b722:	f000 fbe9 	bl	801bef8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4a2f      	ldr	r2, [pc, #188]	; (801b7e8 <HAL_PCD_MspInit+0xe8>)
 801b72c:	4293      	cmp	r3, r2
 801b72e:	d156      	bne.n	801b7de <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801b730:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b734:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801b736:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801b73a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b73e:	f107 0310 	add.w	r3, r7, #16
 801b742:	4618      	mov	r0, r3
 801b744:	f7f6 fcd2 	bl	80120ec <HAL_RCCEx_PeriphCLKConfig>
 801b748:	4603      	mov	r3, r0
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d001      	beq.n	801b752 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801b74e:	f7ef f9b5 	bl	800aabc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801b752:	f7f5 fd01 	bl	8011158 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b756:	4b25      	ldr	r3, [pc, #148]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801b75c:	4a23      	ldr	r2, [pc, #140]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b75e:	f043 0301 	orr.w	r3, r3, #1
 801b762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801b766:	4b21      	ldr	r3, [pc, #132]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801b76c:	f003 0301 	and.w	r3, r3, #1
 801b770:	60fb      	str	r3, [r7, #12]
 801b772:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b774:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801b778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b77c:	2302      	movs	r3, #2
 801b77e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b782:	2300      	movs	r3, #0
 801b784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b788:	2300      	movs	r3, #0
 801b78a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801b78e:	230a      	movs	r3, #10
 801b790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b794:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801b798:	4619      	mov	r1, r3
 801b79a:	4815      	ldr	r0, [pc, #84]	; (801b7f0 <HAL_PCD_MspInit+0xf0>)
 801b79c:	f7f3 f95c 	bl	800ea58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b7a0:	4b12      	ldr	r3, [pc, #72]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b7a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801b7a6:	4a11      	ldr	r2, [pc, #68]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b7a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b7ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801b7b0:	4b0e      	ldr	r3, [pc, #56]	; (801b7ec <HAL_PCD_MspInit+0xec>)
 801b7b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801b7b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b7ba:	60bb      	str	r3, [r7, #8]
 801b7bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 801b7be:	2200      	movs	r2, #0
 801b7c0:	2100      	movs	r1, #0
 801b7c2:	2062      	movs	r0, #98	; 0x62
 801b7c4:	f7f0 fd17 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801b7c8:	2062      	movs	r0, #98	; 0x62
 801b7ca:	f7f0 fd2e 	bl	800c22a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	2100      	movs	r1, #0
 801b7d2:	2065      	movs	r0, #101	; 0x65
 801b7d4:	f7f0 fd0f 	bl	800c1f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b7d8:	2065      	movs	r0, #101	; 0x65
 801b7da:	f7f0 fd26 	bl	800c22a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b7de:	bf00      	nop
 801b7e0:	37e0      	adds	r7, #224	; 0xe0
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	bd80      	pop	{r7, pc}
 801b7e6:	bf00      	nop
 801b7e8:	40080000 	.word	0x40080000
 801b7ec:	58024400 	.word	0x58024400
 801b7f0:	58020000 	.word	0x58020000

0801b7f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b808:	4619      	mov	r1, r3
 801b80a:	4610      	mov	r0, r2
 801b80c:	f7fe fcce 	bl	801a1ac <USBD_LL_SetupStage>
}
 801b810:	bf00      	nop
 801b812:	3708      	adds	r7, #8
 801b814:	46bd      	mov	sp, r7
 801b816:	bd80      	pop	{r7, pc}

0801b818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	b082      	sub	sp, #8
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
 801b820:	460b      	mov	r3, r1
 801b822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801b82a:	78fa      	ldrb	r2, [r7, #3]
 801b82c:	6879      	ldr	r1, [r7, #4]
 801b82e:	4613      	mov	r3, r2
 801b830:	00db      	lsls	r3, r3, #3
 801b832:	1a9b      	subs	r3, r3, r2
 801b834:	009b      	lsls	r3, r3, #2
 801b836:	440b      	add	r3, r1
 801b838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b83c:	681a      	ldr	r2, [r3, #0]
 801b83e:	78fb      	ldrb	r3, [r7, #3]
 801b840:	4619      	mov	r1, r3
 801b842:	f7fe fd08 	bl	801a256 <USBD_LL_DataOutStage>
}
 801b846:	bf00      	nop
 801b848:	3708      	adds	r7, #8
 801b84a:	46bd      	mov	sp, r7
 801b84c:	bd80      	pop	{r7, pc}

0801b84e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b84e:	b580      	push	{r7, lr}
 801b850:	b082      	sub	sp, #8
 801b852:	af00      	add	r7, sp, #0
 801b854:	6078      	str	r0, [r7, #4]
 801b856:	460b      	mov	r3, r1
 801b858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801b860:	78fa      	ldrb	r2, [r7, #3]
 801b862:	6879      	ldr	r1, [r7, #4]
 801b864:	4613      	mov	r3, r2
 801b866:	00db      	lsls	r3, r3, #3
 801b868:	1a9b      	subs	r3, r3, r2
 801b86a:	009b      	lsls	r3, r3, #2
 801b86c:	440b      	add	r3, r1
 801b86e:	3348      	adds	r3, #72	; 0x48
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	78fb      	ldrb	r3, [r7, #3]
 801b874:	4619      	mov	r1, r3
 801b876:	f7fe fd51 	bl	801a31c <USBD_LL_DataInStage>
}
 801b87a:	bf00      	nop
 801b87c:	3708      	adds	r7, #8
 801b87e:	46bd      	mov	sp, r7
 801b880:	bd80      	pop	{r7, pc}

0801b882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b882:	b580      	push	{r7, lr}
 801b884:	b082      	sub	sp, #8
 801b886:	af00      	add	r7, sp, #0
 801b888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b890:	4618      	mov	r0, r3
 801b892:	f7fe fe65 	bl	801a560 <USBD_LL_SOF>
}
 801b896:	bf00      	nop
 801b898:	3708      	adds	r7, #8
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd80      	pop	{r7, pc}

0801b89e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b89e:	b580      	push	{r7, lr}
 801b8a0:	b084      	sub	sp, #16
 801b8a2:	af00      	add	r7, sp, #0
 801b8a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	68db      	ldr	r3, [r3, #12]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d102      	bne.n	801b8b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	73fb      	strb	r3, [r7, #15]
 801b8b6:	e008      	b.n	801b8ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	68db      	ldr	r3, [r3, #12]
 801b8bc:	2b02      	cmp	r3, #2
 801b8be:	d102      	bne.n	801b8c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	73fb      	strb	r3, [r7, #15]
 801b8c4:	e001      	b.n	801b8ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b8c6:	f7ef f8f9 	bl	800aabc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b8d0:	7bfa      	ldrb	r2, [r7, #15]
 801b8d2:	4611      	mov	r1, r2
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	f7fe fe05 	bl	801a4e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7fe fdb1 	bl	801a448 <USBD_LL_Reset>
}
 801b8e6:	bf00      	nop
 801b8e8:	3710      	adds	r7, #16
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	bd80      	pop	{r7, pc}
	...

0801b8f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b082      	sub	sp, #8
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7fe fe00 	bl	801a504 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	687a      	ldr	r2, [r7, #4]
 801b910:	6812      	ldr	r2, [r2, #0]
 801b912:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b916:	f043 0301 	orr.w	r3, r3, #1
 801b91a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	6a1b      	ldr	r3, [r3, #32]
 801b920:	2b00      	cmp	r3, #0
 801b922:	d005      	beq.n	801b930 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b924:	4b04      	ldr	r3, [pc, #16]	; (801b938 <HAL_PCD_SuspendCallback+0x48>)
 801b926:	691b      	ldr	r3, [r3, #16]
 801b928:	4a03      	ldr	r2, [pc, #12]	; (801b938 <HAL_PCD_SuspendCallback+0x48>)
 801b92a:	f043 0306 	orr.w	r3, r3, #6
 801b92e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b930:	bf00      	nop
 801b932:	3708      	adds	r7, #8
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	e000ed00 	.word	0xe000ed00

0801b93c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b082      	sub	sp, #8
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7fe fdf0 	bl	801a530 <USBD_LL_Resume>
}
 801b950:	bf00      	nop
 801b952:	3708      	adds	r7, #8
 801b954:	46bd      	mov	sp, r7
 801b956:	bd80      	pop	{r7, pc}

0801b958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b082      	sub	sp, #8
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	460b      	mov	r3, r1
 801b962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b96a:	78fa      	ldrb	r2, [r7, #3]
 801b96c:	4611      	mov	r1, r2
 801b96e:	4618      	mov	r0, r3
 801b970:	f7fe fe3e 	bl	801a5f0 <USBD_LL_IsoOUTIncomplete>
}
 801b974:	bf00      	nop
 801b976:	3708      	adds	r7, #8
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}

0801b97c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b082      	sub	sp, #8
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
 801b984:	460b      	mov	r3, r1
 801b986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b98e:	78fa      	ldrb	r2, [r7, #3]
 801b990:	4611      	mov	r1, r2
 801b992:	4618      	mov	r0, r3
 801b994:	f7fe fe06 	bl	801a5a4 <USBD_LL_IsoINIncomplete>
}
 801b998:	bf00      	nop
 801b99a:	3708      	adds	r7, #8
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}

0801b9a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b082      	sub	sp, #8
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7fe fe44 	bl	801a63c <USBD_LL_DevConnected>
}
 801b9b4:	bf00      	nop
 801b9b6:	3708      	adds	r7, #8
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}

0801b9bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b082      	sub	sp, #8
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f7fe fe41 	bl	801a652 <USBD_LL_DevDisconnected>
}
 801b9d0:	bf00      	nop
 801b9d2:	3708      	adds	r7, #8
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	bd80      	pop	{r7, pc}

0801b9d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	781b      	ldrb	r3, [r3, #0]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d13e      	bne.n	801ba66 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b9e8:	4a21      	ldr	r2, [pc, #132]	; (801ba70 <USBD_LL_Init+0x98>)
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	4a1f      	ldr	r2, [pc, #124]	; (801ba70 <USBD_LL_Init+0x98>)
 801b9f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b9f8:	4b1d      	ldr	r3, [pc, #116]	; (801ba70 <USBD_LL_Init+0x98>)
 801b9fa:	4a1e      	ldr	r2, [pc, #120]	; (801ba74 <USBD_LL_Init+0x9c>)
 801b9fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801b9fe:	4b1c      	ldr	r3, [pc, #112]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba00:	2209      	movs	r2, #9
 801ba02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ba04:	4b1a      	ldr	r3, [pc, #104]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba06:	2202      	movs	r2, #2
 801ba08:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ba0a:	4b19      	ldr	r3, [pc, #100]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ba10:	4b17      	ldr	r3, [pc, #92]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba12:	2202      	movs	r2, #2
 801ba14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ba16:	4b16      	ldr	r3, [pc, #88]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba18:	2200      	movs	r2, #0
 801ba1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ba1c:	4b14      	ldr	r3, [pc, #80]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba1e:	2200      	movs	r2, #0
 801ba20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ba22:	4b13      	ldr	r3, [pc, #76]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba24:	2200      	movs	r2, #0
 801ba26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801ba28:	4b11      	ldr	r3, [pc, #68]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ba2e:	4b10      	ldr	r3, [pc, #64]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba30:	2200      	movs	r2, #0
 801ba32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ba34:	4b0e      	ldr	r3, [pc, #56]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba36:	2200      	movs	r2, #0
 801ba38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ba3a:	480d      	ldr	r0, [pc, #52]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba3c:	f7f4 f982 	bl	800fd44 <HAL_PCD_Init>
 801ba40:	4603      	mov	r3, r0
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d001      	beq.n	801ba4a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ba46:	f7ef f839 	bl	800aabc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ba4a:	2180      	movs	r1, #128	; 0x80
 801ba4c:	4808      	ldr	r0, [pc, #32]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba4e:	f7f5 fb08 	bl	8011062 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ba52:	2240      	movs	r2, #64	; 0x40
 801ba54:	2100      	movs	r1, #0
 801ba56:	4806      	ldr	r0, [pc, #24]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba58:	f7f5 fabc 	bl	8010fd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ba5c:	2280      	movs	r2, #128	; 0x80
 801ba5e:	2101      	movs	r1, #1
 801ba60:	4803      	ldr	r0, [pc, #12]	; (801ba70 <USBD_LL_Init+0x98>)
 801ba62:	f7f5 fab7 	bl	8010fd4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801ba66:	2300      	movs	r3, #0
}
 801ba68:	4618      	mov	r0, r3
 801ba6a:	3708      	adds	r7, #8
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}
 801ba70:	2400302c 	.word	0x2400302c
 801ba74:	40080000 	.word	0x40080000

0801ba78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b084      	sub	sp, #16
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba80:	2300      	movs	r3, #0
 801ba82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ba84:	2300      	movs	r3, #0
 801ba86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7f4 fa7c 	bl	800ff8c <HAL_PCD_Start>
 801ba94:	4603      	mov	r3, r0
 801ba96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ba98:	7bfb      	ldrb	r3, [r7, #15]
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	f000 f942 	bl	801bd24 <USBD_Get_USB_Status>
 801baa0:	4603      	mov	r3, r0
 801baa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801baa4:	7bbb      	ldrb	r3, [r7, #14]
}
 801baa6:	4618      	mov	r0, r3
 801baa8:	3710      	adds	r7, #16
 801baaa:	46bd      	mov	sp, r7
 801baac:	bd80      	pop	{r7, pc}

0801baae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801baae:	b580      	push	{r7, lr}
 801bab0:	b084      	sub	sp, #16
 801bab2:	af00      	add	r7, sp, #0
 801bab4:	6078      	str	r0, [r7, #4]
 801bab6:	4608      	mov	r0, r1
 801bab8:	4611      	mov	r1, r2
 801baba:	461a      	mov	r2, r3
 801babc:	4603      	mov	r3, r0
 801babe:	70fb      	strb	r3, [r7, #3]
 801bac0:	460b      	mov	r3, r1
 801bac2:	70bb      	strb	r3, [r7, #2]
 801bac4:	4613      	mov	r3, r2
 801bac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bac8:	2300      	movs	r3, #0
 801baca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bacc:	2300      	movs	r3, #0
 801bace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801bad6:	78bb      	ldrb	r3, [r7, #2]
 801bad8:	883a      	ldrh	r2, [r7, #0]
 801bada:	78f9      	ldrb	r1, [r7, #3]
 801badc:	f7f4 fe81 	bl	80107e2 <HAL_PCD_EP_Open>
 801bae0:	4603      	mov	r3, r0
 801bae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bae4:	7bfb      	ldrb	r3, [r7, #15]
 801bae6:	4618      	mov	r0, r3
 801bae8:	f000 f91c 	bl	801bd24 <USBD_Get_USB_Status>
 801baec:	4603      	mov	r3, r0
 801baee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801baf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	3710      	adds	r7, #16
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bd80      	pop	{r7, pc}

0801bafa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bafa:	b580      	push	{r7, lr}
 801bafc:	b084      	sub	sp, #16
 801bafe:	af00      	add	r7, sp, #0
 801bb00:	6078      	str	r0, [r7, #4]
 801bb02:	460b      	mov	r3, r1
 801bb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb06:	2300      	movs	r3, #0
 801bb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bb14:	78fa      	ldrb	r2, [r7, #3]
 801bb16:	4611      	mov	r1, r2
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7f4 feca 	bl	80108b2 <HAL_PCD_EP_Close>
 801bb1e:	4603      	mov	r3, r0
 801bb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb22:	7bfb      	ldrb	r3, [r7, #15]
 801bb24:	4618      	mov	r0, r3
 801bb26:	f000 f8fd 	bl	801bd24 <USBD_Get_USB_Status>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801bb30:	4618      	mov	r0, r3
 801bb32:	3710      	adds	r7, #16
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bd80      	pop	{r7, pc}

0801bb38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b084      	sub	sp, #16
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
 801bb40:	460b      	mov	r3, r1
 801bb42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb44:	2300      	movs	r3, #0
 801bb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb48:	2300      	movs	r3, #0
 801bb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bb52:	78fa      	ldrb	r2, [r7, #3]
 801bb54:	4611      	mov	r1, r2
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7f4 ffa2 	bl	8010aa0 <HAL_PCD_EP_SetStall>
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb60:	7bfb      	ldrb	r3, [r7, #15]
 801bb62:	4618      	mov	r0, r3
 801bb64:	f000 f8de 	bl	801bd24 <USBD_Get_USB_Status>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3710      	adds	r7, #16
 801bb72:	46bd      	mov	sp, r7
 801bb74:	bd80      	pop	{r7, pc}

0801bb76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bb76:	b580      	push	{r7, lr}
 801bb78:	b084      	sub	sp, #16
 801bb7a:	af00      	add	r7, sp, #0
 801bb7c:	6078      	str	r0, [r7, #4]
 801bb7e:	460b      	mov	r3, r1
 801bb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb82:	2300      	movs	r3, #0
 801bb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb86:	2300      	movs	r3, #0
 801bb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bb90:	78fa      	ldrb	r2, [r7, #3]
 801bb92:	4611      	mov	r1, r2
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7f4 ffe7 	bl	8010b68 <HAL_PCD_EP_ClrStall>
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb9e:	7bfb      	ldrb	r3, [r7, #15]
 801bba0:	4618      	mov	r0, r3
 801bba2:	f000 f8bf 	bl	801bd24 <USBD_Get_USB_Status>
 801bba6:	4603      	mov	r3, r0
 801bba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801bbac:	4618      	mov	r0, r3
 801bbae:	3710      	adds	r7, #16
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	bd80      	pop	{r7, pc}

0801bbb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bbb4:	b480      	push	{r7}
 801bbb6:	b085      	sub	sp, #20
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
 801bbbc:	460b      	mov	r3, r1
 801bbbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bbc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bbc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	da0b      	bge.n	801bbe8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bbd0:	78fb      	ldrb	r3, [r7, #3]
 801bbd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bbd6:	68f9      	ldr	r1, [r7, #12]
 801bbd8:	4613      	mov	r3, r2
 801bbda:	00db      	lsls	r3, r3, #3
 801bbdc:	1a9b      	subs	r3, r3, r2
 801bbde:	009b      	lsls	r3, r3, #2
 801bbe0:	440b      	add	r3, r1
 801bbe2:	333e      	adds	r3, #62	; 0x3e
 801bbe4:	781b      	ldrb	r3, [r3, #0]
 801bbe6:	e00b      	b.n	801bc00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bbe8:	78fb      	ldrb	r3, [r7, #3]
 801bbea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bbee:	68f9      	ldr	r1, [r7, #12]
 801bbf0:	4613      	mov	r3, r2
 801bbf2:	00db      	lsls	r3, r3, #3
 801bbf4:	1a9b      	subs	r3, r3, r2
 801bbf6:	009b      	lsls	r3, r3, #2
 801bbf8:	440b      	add	r3, r1
 801bbfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bbfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bc00:	4618      	mov	r0, r3
 801bc02:	3714      	adds	r7, #20
 801bc04:	46bd      	mov	sp, r7
 801bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc0a:	4770      	bx	lr

0801bc0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
 801bc14:	460b      	mov	r3, r1
 801bc16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc18:	2300      	movs	r3, #0
 801bc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bc26:	78fa      	ldrb	r2, [r7, #3]
 801bc28:	4611      	mov	r1, r2
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7f4 fdb4 	bl	8010798 <HAL_PCD_SetAddress>
 801bc30:	4603      	mov	r3, r0
 801bc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc34:	7bfb      	ldrb	r3, [r7, #15]
 801bc36:	4618      	mov	r0, r3
 801bc38:	f000 f874 	bl	801bd24 <USBD_Get_USB_Status>
 801bc3c:	4603      	mov	r3, r0
 801bc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bc40:	7bbb      	ldrb	r3, [r7, #14]
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3710      	adds	r7, #16
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}

0801bc4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bc4a:	b580      	push	{r7, lr}
 801bc4c:	b086      	sub	sp, #24
 801bc4e:	af00      	add	r7, sp, #0
 801bc50:	60f8      	str	r0, [r7, #12]
 801bc52:	607a      	str	r2, [r7, #4]
 801bc54:	603b      	str	r3, [r7, #0]
 801bc56:	460b      	mov	r3, r1
 801bc58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc5e:	2300      	movs	r3, #0
 801bc60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801bc68:	7af9      	ldrb	r1, [r7, #11]
 801bc6a:	683b      	ldr	r3, [r7, #0]
 801bc6c:	687a      	ldr	r2, [r7, #4]
 801bc6e:	f7f4 fecd 	bl	8010a0c <HAL_PCD_EP_Transmit>
 801bc72:	4603      	mov	r3, r0
 801bc74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bc76:	7dfb      	ldrb	r3, [r7, #23]
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f000 f853 	bl	801bd24 <USBD_Get_USB_Status>
 801bc7e:	4603      	mov	r3, r0
 801bc80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bc82:	7dbb      	ldrb	r3, [r7, #22]
}
 801bc84:	4618      	mov	r0, r3
 801bc86:	3718      	adds	r7, #24
 801bc88:	46bd      	mov	sp, r7
 801bc8a:	bd80      	pop	{r7, pc}

0801bc8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801bc8c:	b580      	push	{r7, lr}
 801bc8e:	b086      	sub	sp, #24
 801bc90:	af00      	add	r7, sp, #0
 801bc92:	60f8      	str	r0, [r7, #12]
 801bc94:	607a      	str	r2, [r7, #4]
 801bc96:	603b      	str	r3, [r7, #0]
 801bc98:	460b      	mov	r3, r1
 801bc9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bca0:	2300      	movs	r3, #0
 801bca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801bcaa:	7af9      	ldrb	r1, [r7, #11]
 801bcac:	683b      	ldr	r3, [r7, #0]
 801bcae:	687a      	ldr	r2, [r7, #4]
 801bcb0:	f7f4 fe49 	bl	8010946 <HAL_PCD_EP_Receive>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bcb8:	7dfb      	ldrb	r3, [r7, #23]
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f000 f832 	bl	801bd24 <USBD_Get_USB_Status>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801bcc4:	7dbb      	ldrb	r3, [r7, #22]
}
 801bcc6:	4618      	mov	r0, r3
 801bcc8:	3718      	adds	r7, #24
 801bcca:	46bd      	mov	sp, r7
 801bccc:	bd80      	pop	{r7, pc}

0801bcce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bcce:	b580      	push	{r7, lr}
 801bcd0:	b082      	sub	sp, #8
 801bcd2:	af00      	add	r7, sp, #0
 801bcd4:	6078      	str	r0, [r7, #4]
 801bcd6:	460b      	mov	r3, r1
 801bcd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801bce0:	78fa      	ldrb	r2, [r7, #3]
 801bce2:	4611      	mov	r1, r2
 801bce4:	4618      	mov	r0, r3
 801bce6:	f7f4 fe79 	bl	80109dc <HAL_PCD_EP_GetRxCount>
 801bcea:	4603      	mov	r3, r0
}
 801bcec:	4618      	mov	r0, r3
 801bcee:	3708      	adds	r7, #8
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	bd80      	pop	{r7, pc}

0801bcf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801bcf4:	b480      	push	{r7}
 801bcf6:	b083      	sub	sp, #12
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bcfc:	4b03      	ldr	r3, [pc, #12]	; (801bd0c <USBD_static_malloc+0x18>)
}
 801bcfe:	4618      	mov	r0, r3
 801bd00:	370c      	adds	r7, #12
 801bd02:	46bd      	mov	sp, r7
 801bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd08:	4770      	bx	lr
 801bd0a:	bf00      	nop
 801bd0c:	24003434 	.word	0x24003434

0801bd10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801bd10:	b480      	push	{r7}
 801bd12:	b083      	sub	sp, #12
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]

}
 801bd18:	bf00      	nop
 801bd1a:	370c      	adds	r7, #12
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd22:	4770      	bx	lr

0801bd24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b085      	sub	sp, #20
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bd2e:	2300      	movs	r3, #0
 801bd30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801bd32:	79fb      	ldrb	r3, [r7, #7]
 801bd34:	2b03      	cmp	r3, #3
 801bd36:	d817      	bhi.n	801bd68 <USBD_Get_USB_Status+0x44>
 801bd38:	a201      	add	r2, pc, #4	; (adr r2, 801bd40 <USBD_Get_USB_Status+0x1c>)
 801bd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd3e:	bf00      	nop
 801bd40:	0801bd51 	.word	0x0801bd51
 801bd44:	0801bd57 	.word	0x0801bd57
 801bd48:	0801bd5d 	.word	0x0801bd5d
 801bd4c:	0801bd63 	.word	0x0801bd63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801bd50:	2300      	movs	r3, #0
 801bd52:	73fb      	strb	r3, [r7, #15]
    break;
 801bd54:	e00b      	b.n	801bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801bd56:	2303      	movs	r3, #3
 801bd58:	73fb      	strb	r3, [r7, #15]
    break;
 801bd5a:	e008      	b.n	801bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801bd5c:	2301      	movs	r3, #1
 801bd5e:	73fb      	strb	r3, [r7, #15]
    break;
 801bd60:	e005      	b.n	801bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801bd62:	2303      	movs	r3, #3
 801bd64:	73fb      	strb	r3, [r7, #15]
    break;
 801bd66:	e002      	b.n	801bd6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801bd68:	2303      	movs	r3, #3
 801bd6a:	73fb      	strb	r3, [r7, #15]
    break;
 801bd6c:	bf00      	nop
  }
  return usb_status;
 801bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd70:	4618      	mov	r0, r3
 801bd72:	3714      	adds	r7, #20
 801bd74:	46bd      	mov	sp, r7
 801bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7a:	4770      	bx	lr

0801bd7c <_ZdlPvj>:
 801bd7c:	f000 b817 	b.w	801bdae <_ZdlPv>

0801bd80 <_Znwj>:
 801bd80:	2801      	cmp	r0, #1
 801bd82:	bf38      	it	cc
 801bd84:	2001      	movcc	r0, #1
 801bd86:	b510      	push	{r4, lr}
 801bd88:	4604      	mov	r4, r0
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	f000 f87c 	bl	801be88 <malloc>
 801bd90:	b930      	cbnz	r0, 801bda0 <_Znwj+0x20>
 801bd92:	f000 f80f 	bl	801bdb4 <_ZSt15get_new_handlerv>
 801bd96:	b908      	cbnz	r0, 801bd9c <_Znwj+0x1c>
 801bd98:	f000 f814 	bl	801bdc4 <abort>
 801bd9c:	4780      	blx	r0
 801bd9e:	e7f4      	b.n	801bd8a <_Znwj+0xa>
 801bda0:	bd10      	pop	{r4, pc}

0801bda2 <_ZSt17__throw_bad_allocv>:
 801bda2:	b508      	push	{r3, lr}
 801bda4:	f000 f80e 	bl	801bdc4 <abort>

0801bda8 <_ZSt20__throw_length_errorPKc>:
 801bda8:	b508      	push	{r3, lr}
 801bdaa:	f000 f80b 	bl	801bdc4 <abort>

0801bdae <_ZdlPv>:
 801bdae:	f000 b873 	b.w	801be98 <free>
	...

0801bdb4 <_ZSt15get_new_handlerv>:
 801bdb4:	4b02      	ldr	r3, [pc, #8]	; (801bdc0 <_ZSt15get_new_handlerv+0xc>)
 801bdb6:	6818      	ldr	r0, [r3, #0]
 801bdb8:	f3bf 8f5b 	dmb	ish
 801bdbc:	4770      	bx	lr
 801bdbe:	bf00      	nop
 801bdc0:	24003654 	.word	0x24003654

0801bdc4 <abort>:
 801bdc4:	b508      	push	{r3, lr}
 801bdc6:	2006      	movs	r0, #6
 801bdc8:	f000 fca4 	bl	801c714 <raise>
 801bdcc:	2001      	movs	r0, #1
 801bdce:	f7ef f8a9 	bl	800af24 <_exit>
	...

0801bdd4 <__assert_func>:
 801bdd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bdd6:	4614      	mov	r4, r2
 801bdd8:	461a      	mov	r2, r3
 801bdda:	4b09      	ldr	r3, [pc, #36]	; (801be00 <__assert_func+0x2c>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	4605      	mov	r5, r0
 801bde0:	68d8      	ldr	r0, [r3, #12]
 801bde2:	b14c      	cbz	r4, 801bdf8 <__assert_func+0x24>
 801bde4:	4b07      	ldr	r3, [pc, #28]	; (801be04 <__assert_func+0x30>)
 801bde6:	9100      	str	r1, [sp, #0]
 801bde8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bdec:	4906      	ldr	r1, [pc, #24]	; (801be08 <__assert_func+0x34>)
 801bdee:	462b      	mov	r3, r5
 801bdf0:	f000 f814 	bl	801be1c <fiprintf>
 801bdf4:	f7ff ffe6 	bl	801bdc4 <abort>
 801bdf8:	4b04      	ldr	r3, [pc, #16]	; (801be0c <__assert_func+0x38>)
 801bdfa:	461c      	mov	r4, r3
 801bdfc:	e7f3      	b.n	801bde6 <__assert_func+0x12>
 801bdfe:	bf00      	nop
 801be00:	24000184 	.word	0x24000184
 801be04:	08037af8 	.word	0x08037af8
 801be08:	08037b05 	.word	0x08037b05
 801be0c:	08037b33 	.word	0x08037b33

0801be10 <__errno>:
 801be10:	4b01      	ldr	r3, [pc, #4]	; (801be18 <__errno+0x8>)
 801be12:	6818      	ldr	r0, [r3, #0]
 801be14:	4770      	bx	lr
 801be16:	bf00      	nop
 801be18:	24000184 	.word	0x24000184

0801be1c <fiprintf>:
 801be1c:	b40e      	push	{r1, r2, r3}
 801be1e:	b503      	push	{r0, r1, lr}
 801be20:	4601      	mov	r1, r0
 801be22:	ab03      	add	r3, sp, #12
 801be24:	4805      	ldr	r0, [pc, #20]	; (801be3c <fiprintf+0x20>)
 801be26:	f853 2b04 	ldr.w	r2, [r3], #4
 801be2a:	6800      	ldr	r0, [r0, #0]
 801be2c:	9301      	str	r3, [sp, #4]
 801be2e:	f000 f975 	bl	801c11c <_vfiprintf_r>
 801be32:	b002      	add	sp, #8
 801be34:	f85d eb04 	ldr.w	lr, [sp], #4
 801be38:	b003      	add	sp, #12
 801be3a:	4770      	bx	lr
 801be3c:	24000184 	.word	0x24000184

0801be40 <__libc_init_array>:
 801be40:	b570      	push	{r4, r5, r6, lr}
 801be42:	4d0d      	ldr	r5, [pc, #52]	; (801be78 <__libc_init_array+0x38>)
 801be44:	4c0d      	ldr	r4, [pc, #52]	; (801be7c <__libc_init_array+0x3c>)
 801be46:	1b64      	subs	r4, r4, r5
 801be48:	10a4      	asrs	r4, r4, #2
 801be4a:	2600      	movs	r6, #0
 801be4c:	42a6      	cmp	r6, r4
 801be4e:	d109      	bne.n	801be64 <__libc_init_array+0x24>
 801be50:	4d0b      	ldr	r5, [pc, #44]	; (801be80 <__libc_init_array+0x40>)
 801be52:	4c0c      	ldr	r4, [pc, #48]	; (801be84 <__libc_init_array+0x44>)
 801be54:	f001 f812 	bl	801ce7c <_init>
 801be58:	1b64      	subs	r4, r4, r5
 801be5a:	10a4      	asrs	r4, r4, #2
 801be5c:	2600      	movs	r6, #0
 801be5e:	42a6      	cmp	r6, r4
 801be60:	d105      	bne.n	801be6e <__libc_init_array+0x2e>
 801be62:	bd70      	pop	{r4, r5, r6, pc}
 801be64:	f855 3b04 	ldr.w	r3, [r5], #4
 801be68:	4798      	blx	r3
 801be6a:	3601      	adds	r6, #1
 801be6c:	e7ee      	b.n	801be4c <__libc_init_array+0xc>
 801be6e:	f855 3b04 	ldr.w	r3, [r5], #4
 801be72:	4798      	blx	r3
 801be74:	3601      	adds	r6, #1
 801be76:	e7f2      	b.n	801be5e <__libc_init_array+0x1e>
 801be78:	08037bd4 	.word	0x08037bd4
 801be7c:	08037bd4 	.word	0x08037bd4
 801be80:	08037bd4 	.word	0x08037bd4
 801be84:	08037bdc 	.word	0x08037bdc

0801be88 <malloc>:
 801be88:	4b02      	ldr	r3, [pc, #8]	; (801be94 <malloc+0xc>)
 801be8a:	4601      	mov	r1, r0
 801be8c:	6818      	ldr	r0, [r3, #0]
 801be8e:	f000 b8a7 	b.w	801bfe0 <_malloc_r>
 801be92:	bf00      	nop
 801be94:	24000184 	.word	0x24000184

0801be98 <free>:
 801be98:	4b02      	ldr	r3, [pc, #8]	; (801bea4 <free+0xc>)
 801be9a:	4601      	mov	r1, r0
 801be9c:	6818      	ldr	r0, [r3, #0]
 801be9e:	f000 b833 	b.w	801bf08 <_free_r>
 801bea2:	bf00      	nop
 801bea4:	24000184 	.word	0x24000184

0801bea8 <memcpy>:
 801bea8:	440a      	add	r2, r1
 801beaa:	4291      	cmp	r1, r2
 801beac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801beb0:	d100      	bne.n	801beb4 <memcpy+0xc>
 801beb2:	4770      	bx	lr
 801beb4:	b510      	push	{r4, lr}
 801beb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801beba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bebe:	4291      	cmp	r1, r2
 801bec0:	d1f9      	bne.n	801beb6 <memcpy+0xe>
 801bec2:	bd10      	pop	{r4, pc}

0801bec4 <memmove>:
 801bec4:	4288      	cmp	r0, r1
 801bec6:	b510      	push	{r4, lr}
 801bec8:	eb01 0402 	add.w	r4, r1, r2
 801becc:	d902      	bls.n	801bed4 <memmove+0x10>
 801bece:	4284      	cmp	r4, r0
 801bed0:	4623      	mov	r3, r4
 801bed2:	d807      	bhi.n	801bee4 <memmove+0x20>
 801bed4:	1e43      	subs	r3, r0, #1
 801bed6:	42a1      	cmp	r1, r4
 801bed8:	d008      	beq.n	801beec <memmove+0x28>
 801beda:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bede:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bee2:	e7f8      	b.n	801bed6 <memmove+0x12>
 801bee4:	4402      	add	r2, r0
 801bee6:	4601      	mov	r1, r0
 801bee8:	428a      	cmp	r2, r1
 801beea:	d100      	bne.n	801beee <memmove+0x2a>
 801beec:	bd10      	pop	{r4, pc}
 801beee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bef6:	e7f7      	b.n	801bee8 <memmove+0x24>

0801bef8 <memset>:
 801bef8:	4402      	add	r2, r0
 801befa:	4603      	mov	r3, r0
 801befc:	4293      	cmp	r3, r2
 801befe:	d100      	bne.n	801bf02 <memset+0xa>
 801bf00:	4770      	bx	lr
 801bf02:	f803 1b01 	strb.w	r1, [r3], #1
 801bf06:	e7f9      	b.n	801befc <memset+0x4>

0801bf08 <_free_r>:
 801bf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf0a:	2900      	cmp	r1, #0
 801bf0c:	d044      	beq.n	801bf98 <_free_r+0x90>
 801bf0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf12:	9001      	str	r0, [sp, #4]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	f1a1 0404 	sub.w	r4, r1, #4
 801bf1a:	bfb8      	it	lt
 801bf1c:	18e4      	addlt	r4, r4, r3
 801bf1e:	f000 fef5 	bl	801cd0c <__malloc_lock>
 801bf22:	4a1e      	ldr	r2, [pc, #120]	; (801bf9c <_free_r+0x94>)
 801bf24:	9801      	ldr	r0, [sp, #4]
 801bf26:	6813      	ldr	r3, [r2, #0]
 801bf28:	b933      	cbnz	r3, 801bf38 <_free_r+0x30>
 801bf2a:	6063      	str	r3, [r4, #4]
 801bf2c:	6014      	str	r4, [r2, #0]
 801bf2e:	b003      	add	sp, #12
 801bf30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bf34:	f000 bef0 	b.w	801cd18 <__malloc_unlock>
 801bf38:	42a3      	cmp	r3, r4
 801bf3a:	d908      	bls.n	801bf4e <_free_r+0x46>
 801bf3c:	6825      	ldr	r5, [r4, #0]
 801bf3e:	1961      	adds	r1, r4, r5
 801bf40:	428b      	cmp	r3, r1
 801bf42:	bf01      	itttt	eq
 801bf44:	6819      	ldreq	r1, [r3, #0]
 801bf46:	685b      	ldreq	r3, [r3, #4]
 801bf48:	1949      	addeq	r1, r1, r5
 801bf4a:	6021      	streq	r1, [r4, #0]
 801bf4c:	e7ed      	b.n	801bf2a <_free_r+0x22>
 801bf4e:	461a      	mov	r2, r3
 801bf50:	685b      	ldr	r3, [r3, #4]
 801bf52:	b10b      	cbz	r3, 801bf58 <_free_r+0x50>
 801bf54:	42a3      	cmp	r3, r4
 801bf56:	d9fa      	bls.n	801bf4e <_free_r+0x46>
 801bf58:	6811      	ldr	r1, [r2, #0]
 801bf5a:	1855      	adds	r5, r2, r1
 801bf5c:	42a5      	cmp	r5, r4
 801bf5e:	d10b      	bne.n	801bf78 <_free_r+0x70>
 801bf60:	6824      	ldr	r4, [r4, #0]
 801bf62:	4421      	add	r1, r4
 801bf64:	1854      	adds	r4, r2, r1
 801bf66:	42a3      	cmp	r3, r4
 801bf68:	6011      	str	r1, [r2, #0]
 801bf6a:	d1e0      	bne.n	801bf2e <_free_r+0x26>
 801bf6c:	681c      	ldr	r4, [r3, #0]
 801bf6e:	685b      	ldr	r3, [r3, #4]
 801bf70:	6053      	str	r3, [r2, #4]
 801bf72:	4421      	add	r1, r4
 801bf74:	6011      	str	r1, [r2, #0]
 801bf76:	e7da      	b.n	801bf2e <_free_r+0x26>
 801bf78:	d902      	bls.n	801bf80 <_free_r+0x78>
 801bf7a:	230c      	movs	r3, #12
 801bf7c:	6003      	str	r3, [r0, #0]
 801bf7e:	e7d6      	b.n	801bf2e <_free_r+0x26>
 801bf80:	6825      	ldr	r5, [r4, #0]
 801bf82:	1961      	adds	r1, r4, r5
 801bf84:	428b      	cmp	r3, r1
 801bf86:	bf04      	itt	eq
 801bf88:	6819      	ldreq	r1, [r3, #0]
 801bf8a:	685b      	ldreq	r3, [r3, #4]
 801bf8c:	6063      	str	r3, [r4, #4]
 801bf8e:	bf04      	itt	eq
 801bf90:	1949      	addeq	r1, r1, r5
 801bf92:	6021      	streq	r1, [r4, #0]
 801bf94:	6054      	str	r4, [r2, #4]
 801bf96:	e7ca      	b.n	801bf2e <_free_r+0x26>
 801bf98:	b003      	add	sp, #12
 801bf9a:	bd30      	pop	{r4, r5, pc}
 801bf9c:	24003658 	.word	0x24003658

0801bfa0 <sbrk_aligned>:
 801bfa0:	b570      	push	{r4, r5, r6, lr}
 801bfa2:	4e0e      	ldr	r6, [pc, #56]	; (801bfdc <sbrk_aligned+0x3c>)
 801bfa4:	460c      	mov	r4, r1
 801bfa6:	6831      	ldr	r1, [r6, #0]
 801bfa8:	4605      	mov	r5, r0
 801bfaa:	b911      	cbnz	r1, 801bfb2 <sbrk_aligned+0x12>
 801bfac:	f000 fb7a 	bl	801c6a4 <_sbrk_r>
 801bfb0:	6030      	str	r0, [r6, #0]
 801bfb2:	4621      	mov	r1, r4
 801bfb4:	4628      	mov	r0, r5
 801bfb6:	f000 fb75 	bl	801c6a4 <_sbrk_r>
 801bfba:	1c43      	adds	r3, r0, #1
 801bfbc:	d00a      	beq.n	801bfd4 <sbrk_aligned+0x34>
 801bfbe:	1cc4      	adds	r4, r0, #3
 801bfc0:	f024 0403 	bic.w	r4, r4, #3
 801bfc4:	42a0      	cmp	r0, r4
 801bfc6:	d007      	beq.n	801bfd8 <sbrk_aligned+0x38>
 801bfc8:	1a21      	subs	r1, r4, r0
 801bfca:	4628      	mov	r0, r5
 801bfcc:	f000 fb6a 	bl	801c6a4 <_sbrk_r>
 801bfd0:	3001      	adds	r0, #1
 801bfd2:	d101      	bne.n	801bfd8 <sbrk_aligned+0x38>
 801bfd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801bfd8:	4620      	mov	r0, r4
 801bfda:	bd70      	pop	{r4, r5, r6, pc}
 801bfdc:	2400365c 	.word	0x2400365c

0801bfe0 <_malloc_r>:
 801bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfe4:	1ccd      	adds	r5, r1, #3
 801bfe6:	f025 0503 	bic.w	r5, r5, #3
 801bfea:	3508      	adds	r5, #8
 801bfec:	2d0c      	cmp	r5, #12
 801bfee:	bf38      	it	cc
 801bff0:	250c      	movcc	r5, #12
 801bff2:	2d00      	cmp	r5, #0
 801bff4:	4607      	mov	r7, r0
 801bff6:	db01      	blt.n	801bffc <_malloc_r+0x1c>
 801bff8:	42a9      	cmp	r1, r5
 801bffa:	d905      	bls.n	801c008 <_malloc_r+0x28>
 801bffc:	230c      	movs	r3, #12
 801bffe:	603b      	str	r3, [r7, #0]
 801c000:	2600      	movs	r6, #0
 801c002:	4630      	mov	r0, r6
 801c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c008:	4e2e      	ldr	r6, [pc, #184]	; (801c0c4 <_malloc_r+0xe4>)
 801c00a:	f000 fe7f 	bl	801cd0c <__malloc_lock>
 801c00e:	6833      	ldr	r3, [r6, #0]
 801c010:	461c      	mov	r4, r3
 801c012:	bb34      	cbnz	r4, 801c062 <_malloc_r+0x82>
 801c014:	4629      	mov	r1, r5
 801c016:	4638      	mov	r0, r7
 801c018:	f7ff ffc2 	bl	801bfa0 <sbrk_aligned>
 801c01c:	1c43      	adds	r3, r0, #1
 801c01e:	4604      	mov	r4, r0
 801c020:	d14d      	bne.n	801c0be <_malloc_r+0xde>
 801c022:	6834      	ldr	r4, [r6, #0]
 801c024:	4626      	mov	r6, r4
 801c026:	2e00      	cmp	r6, #0
 801c028:	d140      	bne.n	801c0ac <_malloc_r+0xcc>
 801c02a:	6823      	ldr	r3, [r4, #0]
 801c02c:	4631      	mov	r1, r6
 801c02e:	4638      	mov	r0, r7
 801c030:	eb04 0803 	add.w	r8, r4, r3
 801c034:	f000 fb36 	bl	801c6a4 <_sbrk_r>
 801c038:	4580      	cmp	r8, r0
 801c03a:	d13a      	bne.n	801c0b2 <_malloc_r+0xd2>
 801c03c:	6821      	ldr	r1, [r4, #0]
 801c03e:	3503      	adds	r5, #3
 801c040:	1a6d      	subs	r5, r5, r1
 801c042:	f025 0503 	bic.w	r5, r5, #3
 801c046:	3508      	adds	r5, #8
 801c048:	2d0c      	cmp	r5, #12
 801c04a:	bf38      	it	cc
 801c04c:	250c      	movcc	r5, #12
 801c04e:	4629      	mov	r1, r5
 801c050:	4638      	mov	r0, r7
 801c052:	f7ff ffa5 	bl	801bfa0 <sbrk_aligned>
 801c056:	3001      	adds	r0, #1
 801c058:	d02b      	beq.n	801c0b2 <_malloc_r+0xd2>
 801c05a:	6823      	ldr	r3, [r4, #0]
 801c05c:	442b      	add	r3, r5
 801c05e:	6023      	str	r3, [r4, #0]
 801c060:	e00e      	b.n	801c080 <_malloc_r+0xa0>
 801c062:	6822      	ldr	r2, [r4, #0]
 801c064:	1b52      	subs	r2, r2, r5
 801c066:	d41e      	bmi.n	801c0a6 <_malloc_r+0xc6>
 801c068:	2a0b      	cmp	r2, #11
 801c06a:	d916      	bls.n	801c09a <_malloc_r+0xba>
 801c06c:	1961      	adds	r1, r4, r5
 801c06e:	42a3      	cmp	r3, r4
 801c070:	6025      	str	r5, [r4, #0]
 801c072:	bf18      	it	ne
 801c074:	6059      	strne	r1, [r3, #4]
 801c076:	6863      	ldr	r3, [r4, #4]
 801c078:	bf08      	it	eq
 801c07a:	6031      	streq	r1, [r6, #0]
 801c07c:	5162      	str	r2, [r4, r5]
 801c07e:	604b      	str	r3, [r1, #4]
 801c080:	4638      	mov	r0, r7
 801c082:	f104 060b 	add.w	r6, r4, #11
 801c086:	f000 fe47 	bl	801cd18 <__malloc_unlock>
 801c08a:	f026 0607 	bic.w	r6, r6, #7
 801c08e:	1d23      	adds	r3, r4, #4
 801c090:	1af2      	subs	r2, r6, r3
 801c092:	d0b6      	beq.n	801c002 <_malloc_r+0x22>
 801c094:	1b9b      	subs	r3, r3, r6
 801c096:	50a3      	str	r3, [r4, r2]
 801c098:	e7b3      	b.n	801c002 <_malloc_r+0x22>
 801c09a:	6862      	ldr	r2, [r4, #4]
 801c09c:	42a3      	cmp	r3, r4
 801c09e:	bf0c      	ite	eq
 801c0a0:	6032      	streq	r2, [r6, #0]
 801c0a2:	605a      	strne	r2, [r3, #4]
 801c0a4:	e7ec      	b.n	801c080 <_malloc_r+0xa0>
 801c0a6:	4623      	mov	r3, r4
 801c0a8:	6864      	ldr	r4, [r4, #4]
 801c0aa:	e7b2      	b.n	801c012 <_malloc_r+0x32>
 801c0ac:	4634      	mov	r4, r6
 801c0ae:	6876      	ldr	r6, [r6, #4]
 801c0b0:	e7b9      	b.n	801c026 <_malloc_r+0x46>
 801c0b2:	230c      	movs	r3, #12
 801c0b4:	603b      	str	r3, [r7, #0]
 801c0b6:	4638      	mov	r0, r7
 801c0b8:	f000 fe2e 	bl	801cd18 <__malloc_unlock>
 801c0bc:	e7a1      	b.n	801c002 <_malloc_r+0x22>
 801c0be:	6025      	str	r5, [r4, #0]
 801c0c0:	e7de      	b.n	801c080 <_malloc_r+0xa0>
 801c0c2:	bf00      	nop
 801c0c4:	24003658 	.word	0x24003658

0801c0c8 <__sfputc_r>:
 801c0c8:	6893      	ldr	r3, [r2, #8]
 801c0ca:	3b01      	subs	r3, #1
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	b410      	push	{r4}
 801c0d0:	6093      	str	r3, [r2, #8]
 801c0d2:	da08      	bge.n	801c0e6 <__sfputc_r+0x1e>
 801c0d4:	6994      	ldr	r4, [r2, #24]
 801c0d6:	42a3      	cmp	r3, r4
 801c0d8:	db01      	blt.n	801c0de <__sfputc_r+0x16>
 801c0da:	290a      	cmp	r1, #10
 801c0dc:	d103      	bne.n	801c0e6 <__sfputc_r+0x1e>
 801c0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0e2:	f000 bb33 	b.w	801c74c <__swbuf_r>
 801c0e6:	6813      	ldr	r3, [r2, #0]
 801c0e8:	1c58      	adds	r0, r3, #1
 801c0ea:	6010      	str	r0, [r2, #0]
 801c0ec:	7019      	strb	r1, [r3, #0]
 801c0ee:	4608      	mov	r0, r1
 801c0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0f4:	4770      	bx	lr

0801c0f6 <__sfputs_r>:
 801c0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0f8:	4606      	mov	r6, r0
 801c0fa:	460f      	mov	r7, r1
 801c0fc:	4614      	mov	r4, r2
 801c0fe:	18d5      	adds	r5, r2, r3
 801c100:	42ac      	cmp	r4, r5
 801c102:	d101      	bne.n	801c108 <__sfputs_r+0x12>
 801c104:	2000      	movs	r0, #0
 801c106:	e007      	b.n	801c118 <__sfputs_r+0x22>
 801c108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c10c:	463a      	mov	r2, r7
 801c10e:	4630      	mov	r0, r6
 801c110:	f7ff ffda 	bl	801c0c8 <__sfputc_r>
 801c114:	1c43      	adds	r3, r0, #1
 801c116:	d1f3      	bne.n	801c100 <__sfputs_r+0xa>
 801c118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c11c <_vfiprintf_r>:
 801c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c120:	460d      	mov	r5, r1
 801c122:	b09d      	sub	sp, #116	; 0x74
 801c124:	4614      	mov	r4, r2
 801c126:	4698      	mov	r8, r3
 801c128:	4606      	mov	r6, r0
 801c12a:	b118      	cbz	r0, 801c134 <_vfiprintf_r+0x18>
 801c12c:	6983      	ldr	r3, [r0, #24]
 801c12e:	b90b      	cbnz	r3, 801c134 <_vfiprintf_r+0x18>
 801c130:	f000 fce6 	bl	801cb00 <__sinit>
 801c134:	4b89      	ldr	r3, [pc, #548]	; (801c35c <_vfiprintf_r+0x240>)
 801c136:	429d      	cmp	r5, r3
 801c138:	d11b      	bne.n	801c172 <_vfiprintf_r+0x56>
 801c13a:	6875      	ldr	r5, [r6, #4]
 801c13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c13e:	07d9      	lsls	r1, r3, #31
 801c140:	d405      	bmi.n	801c14e <_vfiprintf_r+0x32>
 801c142:	89ab      	ldrh	r3, [r5, #12]
 801c144:	059a      	lsls	r2, r3, #22
 801c146:	d402      	bmi.n	801c14e <_vfiprintf_r+0x32>
 801c148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c14a:	f000 fd77 	bl	801cc3c <__retarget_lock_acquire_recursive>
 801c14e:	89ab      	ldrh	r3, [r5, #12]
 801c150:	071b      	lsls	r3, r3, #28
 801c152:	d501      	bpl.n	801c158 <_vfiprintf_r+0x3c>
 801c154:	692b      	ldr	r3, [r5, #16]
 801c156:	b9eb      	cbnz	r3, 801c194 <_vfiprintf_r+0x78>
 801c158:	4629      	mov	r1, r5
 801c15a:	4630      	mov	r0, r6
 801c15c:	f000 fb48 	bl	801c7f0 <__swsetup_r>
 801c160:	b1c0      	cbz	r0, 801c194 <_vfiprintf_r+0x78>
 801c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c164:	07dc      	lsls	r4, r3, #31
 801c166:	d50e      	bpl.n	801c186 <_vfiprintf_r+0x6a>
 801c168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c16c:	b01d      	add	sp, #116	; 0x74
 801c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c172:	4b7b      	ldr	r3, [pc, #492]	; (801c360 <_vfiprintf_r+0x244>)
 801c174:	429d      	cmp	r5, r3
 801c176:	d101      	bne.n	801c17c <_vfiprintf_r+0x60>
 801c178:	68b5      	ldr	r5, [r6, #8]
 801c17a:	e7df      	b.n	801c13c <_vfiprintf_r+0x20>
 801c17c:	4b79      	ldr	r3, [pc, #484]	; (801c364 <_vfiprintf_r+0x248>)
 801c17e:	429d      	cmp	r5, r3
 801c180:	bf08      	it	eq
 801c182:	68f5      	ldreq	r5, [r6, #12]
 801c184:	e7da      	b.n	801c13c <_vfiprintf_r+0x20>
 801c186:	89ab      	ldrh	r3, [r5, #12]
 801c188:	0598      	lsls	r0, r3, #22
 801c18a:	d4ed      	bmi.n	801c168 <_vfiprintf_r+0x4c>
 801c18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c18e:	f000 fd56 	bl	801cc3e <__retarget_lock_release_recursive>
 801c192:	e7e9      	b.n	801c168 <_vfiprintf_r+0x4c>
 801c194:	2300      	movs	r3, #0
 801c196:	9309      	str	r3, [sp, #36]	; 0x24
 801c198:	2320      	movs	r3, #32
 801c19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c19e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c1a2:	2330      	movs	r3, #48	; 0x30
 801c1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c368 <_vfiprintf_r+0x24c>
 801c1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c1ac:	f04f 0901 	mov.w	r9, #1
 801c1b0:	4623      	mov	r3, r4
 801c1b2:	469a      	mov	sl, r3
 801c1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1b8:	b10a      	cbz	r2, 801c1be <_vfiprintf_r+0xa2>
 801c1ba:	2a25      	cmp	r2, #37	; 0x25
 801c1bc:	d1f9      	bne.n	801c1b2 <_vfiprintf_r+0x96>
 801c1be:	ebba 0b04 	subs.w	fp, sl, r4
 801c1c2:	d00b      	beq.n	801c1dc <_vfiprintf_r+0xc0>
 801c1c4:	465b      	mov	r3, fp
 801c1c6:	4622      	mov	r2, r4
 801c1c8:	4629      	mov	r1, r5
 801c1ca:	4630      	mov	r0, r6
 801c1cc:	f7ff ff93 	bl	801c0f6 <__sfputs_r>
 801c1d0:	3001      	adds	r0, #1
 801c1d2:	f000 80aa 	beq.w	801c32a <_vfiprintf_r+0x20e>
 801c1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1d8:	445a      	add	r2, fp
 801c1da:	9209      	str	r2, [sp, #36]	; 0x24
 801c1dc:	f89a 3000 	ldrb.w	r3, [sl]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	f000 80a2 	beq.w	801c32a <_vfiprintf_r+0x20e>
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1f0:	f10a 0a01 	add.w	sl, sl, #1
 801c1f4:	9304      	str	r3, [sp, #16]
 801c1f6:	9307      	str	r3, [sp, #28]
 801c1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c1fc:	931a      	str	r3, [sp, #104]	; 0x68
 801c1fe:	4654      	mov	r4, sl
 801c200:	2205      	movs	r2, #5
 801c202:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c206:	4858      	ldr	r0, [pc, #352]	; (801c368 <_vfiprintf_r+0x24c>)
 801c208:	f7e4 f86a 	bl	80002e0 <memchr>
 801c20c:	9a04      	ldr	r2, [sp, #16]
 801c20e:	b9d8      	cbnz	r0, 801c248 <_vfiprintf_r+0x12c>
 801c210:	06d1      	lsls	r1, r2, #27
 801c212:	bf44      	itt	mi
 801c214:	2320      	movmi	r3, #32
 801c216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c21a:	0713      	lsls	r3, r2, #28
 801c21c:	bf44      	itt	mi
 801c21e:	232b      	movmi	r3, #43	; 0x2b
 801c220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c224:	f89a 3000 	ldrb.w	r3, [sl]
 801c228:	2b2a      	cmp	r3, #42	; 0x2a
 801c22a:	d015      	beq.n	801c258 <_vfiprintf_r+0x13c>
 801c22c:	9a07      	ldr	r2, [sp, #28]
 801c22e:	4654      	mov	r4, sl
 801c230:	2000      	movs	r0, #0
 801c232:	f04f 0c0a 	mov.w	ip, #10
 801c236:	4621      	mov	r1, r4
 801c238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c23c:	3b30      	subs	r3, #48	; 0x30
 801c23e:	2b09      	cmp	r3, #9
 801c240:	d94e      	bls.n	801c2e0 <_vfiprintf_r+0x1c4>
 801c242:	b1b0      	cbz	r0, 801c272 <_vfiprintf_r+0x156>
 801c244:	9207      	str	r2, [sp, #28]
 801c246:	e014      	b.n	801c272 <_vfiprintf_r+0x156>
 801c248:	eba0 0308 	sub.w	r3, r0, r8
 801c24c:	fa09 f303 	lsl.w	r3, r9, r3
 801c250:	4313      	orrs	r3, r2
 801c252:	9304      	str	r3, [sp, #16]
 801c254:	46a2      	mov	sl, r4
 801c256:	e7d2      	b.n	801c1fe <_vfiprintf_r+0xe2>
 801c258:	9b03      	ldr	r3, [sp, #12]
 801c25a:	1d19      	adds	r1, r3, #4
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	9103      	str	r1, [sp, #12]
 801c260:	2b00      	cmp	r3, #0
 801c262:	bfbb      	ittet	lt
 801c264:	425b      	neglt	r3, r3
 801c266:	f042 0202 	orrlt.w	r2, r2, #2
 801c26a:	9307      	strge	r3, [sp, #28]
 801c26c:	9307      	strlt	r3, [sp, #28]
 801c26e:	bfb8      	it	lt
 801c270:	9204      	strlt	r2, [sp, #16]
 801c272:	7823      	ldrb	r3, [r4, #0]
 801c274:	2b2e      	cmp	r3, #46	; 0x2e
 801c276:	d10c      	bne.n	801c292 <_vfiprintf_r+0x176>
 801c278:	7863      	ldrb	r3, [r4, #1]
 801c27a:	2b2a      	cmp	r3, #42	; 0x2a
 801c27c:	d135      	bne.n	801c2ea <_vfiprintf_r+0x1ce>
 801c27e:	9b03      	ldr	r3, [sp, #12]
 801c280:	1d1a      	adds	r2, r3, #4
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	9203      	str	r2, [sp, #12]
 801c286:	2b00      	cmp	r3, #0
 801c288:	bfb8      	it	lt
 801c28a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c28e:	3402      	adds	r4, #2
 801c290:	9305      	str	r3, [sp, #20]
 801c292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c378 <_vfiprintf_r+0x25c>
 801c296:	7821      	ldrb	r1, [r4, #0]
 801c298:	2203      	movs	r2, #3
 801c29a:	4650      	mov	r0, sl
 801c29c:	f7e4 f820 	bl	80002e0 <memchr>
 801c2a0:	b140      	cbz	r0, 801c2b4 <_vfiprintf_r+0x198>
 801c2a2:	2340      	movs	r3, #64	; 0x40
 801c2a4:	eba0 000a 	sub.w	r0, r0, sl
 801c2a8:	fa03 f000 	lsl.w	r0, r3, r0
 801c2ac:	9b04      	ldr	r3, [sp, #16]
 801c2ae:	4303      	orrs	r3, r0
 801c2b0:	3401      	adds	r4, #1
 801c2b2:	9304      	str	r3, [sp, #16]
 801c2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2b8:	482c      	ldr	r0, [pc, #176]	; (801c36c <_vfiprintf_r+0x250>)
 801c2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c2be:	2206      	movs	r2, #6
 801c2c0:	f7e4 f80e 	bl	80002e0 <memchr>
 801c2c4:	2800      	cmp	r0, #0
 801c2c6:	d03f      	beq.n	801c348 <_vfiprintf_r+0x22c>
 801c2c8:	4b29      	ldr	r3, [pc, #164]	; (801c370 <_vfiprintf_r+0x254>)
 801c2ca:	bb1b      	cbnz	r3, 801c314 <_vfiprintf_r+0x1f8>
 801c2cc:	9b03      	ldr	r3, [sp, #12]
 801c2ce:	3307      	adds	r3, #7
 801c2d0:	f023 0307 	bic.w	r3, r3, #7
 801c2d4:	3308      	adds	r3, #8
 801c2d6:	9303      	str	r3, [sp, #12]
 801c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2da:	443b      	add	r3, r7
 801c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 801c2de:	e767      	b.n	801c1b0 <_vfiprintf_r+0x94>
 801c2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2e4:	460c      	mov	r4, r1
 801c2e6:	2001      	movs	r0, #1
 801c2e8:	e7a5      	b.n	801c236 <_vfiprintf_r+0x11a>
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	3401      	adds	r4, #1
 801c2ee:	9305      	str	r3, [sp, #20]
 801c2f0:	4619      	mov	r1, r3
 801c2f2:	f04f 0c0a 	mov.w	ip, #10
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2fc:	3a30      	subs	r2, #48	; 0x30
 801c2fe:	2a09      	cmp	r2, #9
 801c300:	d903      	bls.n	801c30a <_vfiprintf_r+0x1ee>
 801c302:	2b00      	cmp	r3, #0
 801c304:	d0c5      	beq.n	801c292 <_vfiprintf_r+0x176>
 801c306:	9105      	str	r1, [sp, #20]
 801c308:	e7c3      	b.n	801c292 <_vfiprintf_r+0x176>
 801c30a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c30e:	4604      	mov	r4, r0
 801c310:	2301      	movs	r3, #1
 801c312:	e7f0      	b.n	801c2f6 <_vfiprintf_r+0x1da>
 801c314:	ab03      	add	r3, sp, #12
 801c316:	9300      	str	r3, [sp, #0]
 801c318:	462a      	mov	r2, r5
 801c31a:	4b16      	ldr	r3, [pc, #88]	; (801c374 <_vfiprintf_r+0x258>)
 801c31c:	a904      	add	r1, sp, #16
 801c31e:	4630      	mov	r0, r6
 801c320:	f3af 8000 	nop.w
 801c324:	4607      	mov	r7, r0
 801c326:	1c78      	adds	r0, r7, #1
 801c328:	d1d6      	bne.n	801c2d8 <_vfiprintf_r+0x1bc>
 801c32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c32c:	07d9      	lsls	r1, r3, #31
 801c32e:	d405      	bmi.n	801c33c <_vfiprintf_r+0x220>
 801c330:	89ab      	ldrh	r3, [r5, #12]
 801c332:	059a      	lsls	r2, r3, #22
 801c334:	d402      	bmi.n	801c33c <_vfiprintf_r+0x220>
 801c336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c338:	f000 fc81 	bl	801cc3e <__retarget_lock_release_recursive>
 801c33c:	89ab      	ldrh	r3, [r5, #12]
 801c33e:	065b      	lsls	r3, r3, #25
 801c340:	f53f af12 	bmi.w	801c168 <_vfiprintf_r+0x4c>
 801c344:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c346:	e711      	b.n	801c16c <_vfiprintf_r+0x50>
 801c348:	ab03      	add	r3, sp, #12
 801c34a:	9300      	str	r3, [sp, #0]
 801c34c:	462a      	mov	r2, r5
 801c34e:	4b09      	ldr	r3, [pc, #36]	; (801c374 <_vfiprintf_r+0x258>)
 801c350:	a904      	add	r1, sp, #16
 801c352:	4630      	mov	r0, r6
 801c354:	f000 f880 	bl	801c458 <_printf_i>
 801c358:	e7e4      	b.n	801c324 <_vfiprintf_r+0x208>
 801c35a:	bf00      	nop
 801c35c:	08037b8c 	.word	0x08037b8c
 801c360:	08037bac 	.word	0x08037bac
 801c364:	08037b6c 	.word	0x08037b6c
 801c368:	08037b38 	.word	0x08037b38
 801c36c:	08037b42 	.word	0x08037b42
 801c370:	00000000 	.word	0x00000000
 801c374:	0801c0f7 	.word	0x0801c0f7
 801c378:	08037b3e 	.word	0x08037b3e

0801c37c <_printf_common>:
 801c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c380:	4616      	mov	r6, r2
 801c382:	4699      	mov	r9, r3
 801c384:	688a      	ldr	r2, [r1, #8]
 801c386:	690b      	ldr	r3, [r1, #16]
 801c388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c38c:	4293      	cmp	r3, r2
 801c38e:	bfb8      	it	lt
 801c390:	4613      	movlt	r3, r2
 801c392:	6033      	str	r3, [r6, #0]
 801c394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c398:	4607      	mov	r7, r0
 801c39a:	460c      	mov	r4, r1
 801c39c:	b10a      	cbz	r2, 801c3a2 <_printf_common+0x26>
 801c39e:	3301      	adds	r3, #1
 801c3a0:	6033      	str	r3, [r6, #0]
 801c3a2:	6823      	ldr	r3, [r4, #0]
 801c3a4:	0699      	lsls	r1, r3, #26
 801c3a6:	bf42      	ittt	mi
 801c3a8:	6833      	ldrmi	r3, [r6, #0]
 801c3aa:	3302      	addmi	r3, #2
 801c3ac:	6033      	strmi	r3, [r6, #0]
 801c3ae:	6825      	ldr	r5, [r4, #0]
 801c3b0:	f015 0506 	ands.w	r5, r5, #6
 801c3b4:	d106      	bne.n	801c3c4 <_printf_common+0x48>
 801c3b6:	f104 0a19 	add.w	sl, r4, #25
 801c3ba:	68e3      	ldr	r3, [r4, #12]
 801c3bc:	6832      	ldr	r2, [r6, #0]
 801c3be:	1a9b      	subs	r3, r3, r2
 801c3c0:	42ab      	cmp	r3, r5
 801c3c2:	dc26      	bgt.n	801c412 <_printf_common+0x96>
 801c3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c3c8:	1e13      	subs	r3, r2, #0
 801c3ca:	6822      	ldr	r2, [r4, #0]
 801c3cc:	bf18      	it	ne
 801c3ce:	2301      	movne	r3, #1
 801c3d0:	0692      	lsls	r2, r2, #26
 801c3d2:	d42b      	bmi.n	801c42c <_printf_common+0xb0>
 801c3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c3d8:	4649      	mov	r1, r9
 801c3da:	4638      	mov	r0, r7
 801c3dc:	47c0      	blx	r8
 801c3de:	3001      	adds	r0, #1
 801c3e0:	d01e      	beq.n	801c420 <_printf_common+0xa4>
 801c3e2:	6823      	ldr	r3, [r4, #0]
 801c3e4:	68e5      	ldr	r5, [r4, #12]
 801c3e6:	6832      	ldr	r2, [r6, #0]
 801c3e8:	f003 0306 	and.w	r3, r3, #6
 801c3ec:	2b04      	cmp	r3, #4
 801c3ee:	bf08      	it	eq
 801c3f0:	1aad      	subeq	r5, r5, r2
 801c3f2:	68a3      	ldr	r3, [r4, #8]
 801c3f4:	6922      	ldr	r2, [r4, #16]
 801c3f6:	bf0c      	ite	eq
 801c3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c3fc:	2500      	movne	r5, #0
 801c3fe:	4293      	cmp	r3, r2
 801c400:	bfc4      	itt	gt
 801c402:	1a9b      	subgt	r3, r3, r2
 801c404:	18ed      	addgt	r5, r5, r3
 801c406:	2600      	movs	r6, #0
 801c408:	341a      	adds	r4, #26
 801c40a:	42b5      	cmp	r5, r6
 801c40c:	d11a      	bne.n	801c444 <_printf_common+0xc8>
 801c40e:	2000      	movs	r0, #0
 801c410:	e008      	b.n	801c424 <_printf_common+0xa8>
 801c412:	2301      	movs	r3, #1
 801c414:	4652      	mov	r2, sl
 801c416:	4649      	mov	r1, r9
 801c418:	4638      	mov	r0, r7
 801c41a:	47c0      	blx	r8
 801c41c:	3001      	adds	r0, #1
 801c41e:	d103      	bne.n	801c428 <_printf_common+0xac>
 801c420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c428:	3501      	adds	r5, #1
 801c42a:	e7c6      	b.n	801c3ba <_printf_common+0x3e>
 801c42c:	18e1      	adds	r1, r4, r3
 801c42e:	1c5a      	adds	r2, r3, #1
 801c430:	2030      	movs	r0, #48	; 0x30
 801c432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c436:	4422      	add	r2, r4
 801c438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c440:	3302      	adds	r3, #2
 801c442:	e7c7      	b.n	801c3d4 <_printf_common+0x58>
 801c444:	2301      	movs	r3, #1
 801c446:	4622      	mov	r2, r4
 801c448:	4649      	mov	r1, r9
 801c44a:	4638      	mov	r0, r7
 801c44c:	47c0      	blx	r8
 801c44e:	3001      	adds	r0, #1
 801c450:	d0e6      	beq.n	801c420 <_printf_common+0xa4>
 801c452:	3601      	adds	r6, #1
 801c454:	e7d9      	b.n	801c40a <_printf_common+0x8e>
	...

0801c458 <_printf_i>:
 801c458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c45c:	7e0f      	ldrb	r7, [r1, #24]
 801c45e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c460:	2f78      	cmp	r7, #120	; 0x78
 801c462:	4691      	mov	r9, r2
 801c464:	4680      	mov	r8, r0
 801c466:	460c      	mov	r4, r1
 801c468:	469a      	mov	sl, r3
 801c46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c46e:	d807      	bhi.n	801c480 <_printf_i+0x28>
 801c470:	2f62      	cmp	r7, #98	; 0x62
 801c472:	d80a      	bhi.n	801c48a <_printf_i+0x32>
 801c474:	2f00      	cmp	r7, #0
 801c476:	f000 80d8 	beq.w	801c62a <_printf_i+0x1d2>
 801c47a:	2f58      	cmp	r7, #88	; 0x58
 801c47c:	f000 80a3 	beq.w	801c5c6 <_printf_i+0x16e>
 801c480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c488:	e03a      	b.n	801c500 <_printf_i+0xa8>
 801c48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c48e:	2b15      	cmp	r3, #21
 801c490:	d8f6      	bhi.n	801c480 <_printf_i+0x28>
 801c492:	a101      	add	r1, pc, #4	; (adr r1, 801c498 <_printf_i+0x40>)
 801c494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c498:	0801c4f1 	.word	0x0801c4f1
 801c49c:	0801c505 	.word	0x0801c505
 801c4a0:	0801c481 	.word	0x0801c481
 801c4a4:	0801c481 	.word	0x0801c481
 801c4a8:	0801c481 	.word	0x0801c481
 801c4ac:	0801c481 	.word	0x0801c481
 801c4b0:	0801c505 	.word	0x0801c505
 801c4b4:	0801c481 	.word	0x0801c481
 801c4b8:	0801c481 	.word	0x0801c481
 801c4bc:	0801c481 	.word	0x0801c481
 801c4c0:	0801c481 	.word	0x0801c481
 801c4c4:	0801c611 	.word	0x0801c611
 801c4c8:	0801c535 	.word	0x0801c535
 801c4cc:	0801c5f3 	.word	0x0801c5f3
 801c4d0:	0801c481 	.word	0x0801c481
 801c4d4:	0801c481 	.word	0x0801c481
 801c4d8:	0801c633 	.word	0x0801c633
 801c4dc:	0801c481 	.word	0x0801c481
 801c4e0:	0801c535 	.word	0x0801c535
 801c4e4:	0801c481 	.word	0x0801c481
 801c4e8:	0801c481 	.word	0x0801c481
 801c4ec:	0801c5fb 	.word	0x0801c5fb
 801c4f0:	682b      	ldr	r3, [r5, #0]
 801c4f2:	1d1a      	adds	r2, r3, #4
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	602a      	str	r2, [r5, #0]
 801c4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c500:	2301      	movs	r3, #1
 801c502:	e0a3      	b.n	801c64c <_printf_i+0x1f4>
 801c504:	6820      	ldr	r0, [r4, #0]
 801c506:	6829      	ldr	r1, [r5, #0]
 801c508:	0606      	lsls	r6, r0, #24
 801c50a:	f101 0304 	add.w	r3, r1, #4
 801c50e:	d50a      	bpl.n	801c526 <_printf_i+0xce>
 801c510:	680e      	ldr	r6, [r1, #0]
 801c512:	602b      	str	r3, [r5, #0]
 801c514:	2e00      	cmp	r6, #0
 801c516:	da03      	bge.n	801c520 <_printf_i+0xc8>
 801c518:	232d      	movs	r3, #45	; 0x2d
 801c51a:	4276      	negs	r6, r6
 801c51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c520:	485e      	ldr	r0, [pc, #376]	; (801c69c <_printf_i+0x244>)
 801c522:	230a      	movs	r3, #10
 801c524:	e019      	b.n	801c55a <_printf_i+0x102>
 801c526:	680e      	ldr	r6, [r1, #0]
 801c528:	602b      	str	r3, [r5, #0]
 801c52a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c52e:	bf18      	it	ne
 801c530:	b236      	sxthne	r6, r6
 801c532:	e7ef      	b.n	801c514 <_printf_i+0xbc>
 801c534:	682b      	ldr	r3, [r5, #0]
 801c536:	6820      	ldr	r0, [r4, #0]
 801c538:	1d19      	adds	r1, r3, #4
 801c53a:	6029      	str	r1, [r5, #0]
 801c53c:	0601      	lsls	r1, r0, #24
 801c53e:	d501      	bpl.n	801c544 <_printf_i+0xec>
 801c540:	681e      	ldr	r6, [r3, #0]
 801c542:	e002      	b.n	801c54a <_printf_i+0xf2>
 801c544:	0646      	lsls	r6, r0, #25
 801c546:	d5fb      	bpl.n	801c540 <_printf_i+0xe8>
 801c548:	881e      	ldrh	r6, [r3, #0]
 801c54a:	4854      	ldr	r0, [pc, #336]	; (801c69c <_printf_i+0x244>)
 801c54c:	2f6f      	cmp	r7, #111	; 0x6f
 801c54e:	bf0c      	ite	eq
 801c550:	2308      	moveq	r3, #8
 801c552:	230a      	movne	r3, #10
 801c554:	2100      	movs	r1, #0
 801c556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c55a:	6865      	ldr	r5, [r4, #4]
 801c55c:	60a5      	str	r5, [r4, #8]
 801c55e:	2d00      	cmp	r5, #0
 801c560:	bfa2      	ittt	ge
 801c562:	6821      	ldrge	r1, [r4, #0]
 801c564:	f021 0104 	bicge.w	r1, r1, #4
 801c568:	6021      	strge	r1, [r4, #0]
 801c56a:	b90e      	cbnz	r6, 801c570 <_printf_i+0x118>
 801c56c:	2d00      	cmp	r5, #0
 801c56e:	d04d      	beq.n	801c60c <_printf_i+0x1b4>
 801c570:	4615      	mov	r5, r2
 801c572:	fbb6 f1f3 	udiv	r1, r6, r3
 801c576:	fb03 6711 	mls	r7, r3, r1, r6
 801c57a:	5dc7      	ldrb	r7, [r0, r7]
 801c57c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c580:	4637      	mov	r7, r6
 801c582:	42bb      	cmp	r3, r7
 801c584:	460e      	mov	r6, r1
 801c586:	d9f4      	bls.n	801c572 <_printf_i+0x11a>
 801c588:	2b08      	cmp	r3, #8
 801c58a:	d10b      	bne.n	801c5a4 <_printf_i+0x14c>
 801c58c:	6823      	ldr	r3, [r4, #0]
 801c58e:	07de      	lsls	r6, r3, #31
 801c590:	d508      	bpl.n	801c5a4 <_printf_i+0x14c>
 801c592:	6923      	ldr	r3, [r4, #16]
 801c594:	6861      	ldr	r1, [r4, #4]
 801c596:	4299      	cmp	r1, r3
 801c598:	bfde      	ittt	le
 801c59a:	2330      	movle	r3, #48	; 0x30
 801c59c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c5a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c5a4:	1b52      	subs	r2, r2, r5
 801c5a6:	6122      	str	r2, [r4, #16]
 801c5a8:	f8cd a000 	str.w	sl, [sp]
 801c5ac:	464b      	mov	r3, r9
 801c5ae:	aa03      	add	r2, sp, #12
 801c5b0:	4621      	mov	r1, r4
 801c5b2:	4640      	mov	r0, r8
 801c5b4:	f7ff fee2 	bl	801c37c <_printf_common>
 801c5b8:	3001      	adds	r0, #1
 801c5ba:	d14c      	bne.n	801c656 <_printf_i+0x1fe>
 801c5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5c0:	b004      	add	sp, #16
 801c5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5c6:	4835      	ldr	r0, [pc, #212]	; (801c69c <_printf_i+0x244>)
 801c5c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c5cc:	6829      	ldr	r1, [r5, #0]
 801c5ce:	6823      	ldr	r3, [r4, #0]
 801c5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 801c5d4:	6029      	str	r1, [r5, #0]
 801c5d6:	061d      	lsls	r5, r3, #24
 801c5d8:	d514      	bpl.n	801c604 <_printf_i+0x1ac>
 801c5da:	07df      	lsls	r7, r3, #31
 801c5dc:	bf44      	itt	mi
 801c5de:	f043 0320 	orrmi.w	r3, r3, #32
 801c5e2:	6023      	strmi	r3, [r4, #0]
 801c5e4:	b91e      	cbnz	r6, 801c5ee <_printf_i+0x196>
 801c5e6:	6823      	ldr	r3, [r4, #0]
 801c5e8:	f023 0320 	bic.w	r3, r3, #32
 801c5ec:	6023      	str	r3, [r4, #0]
 801c5ee:	2310      	movs	r3, #16
 801c5f0:	e7b0      	b.n	801c554 <_printf_i+0xfc>
 801c5f2:	6823      	ldr	r3, [r4, #0]
 801c5f4:	f043 0320 	orr.w	r3, r3, #32
 801c5f8:	6023      	str	r3, [r4, #0]
 801c5fa:	2378      	movs	r3, #120	; 0x78
 801c5fc:	4828      	ldr	r0, [pc, #160]	; (801c6a0 <_printf_i+0x248>)
 801c5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c602:	e7e3      	b.n	801c5cc <_printf_i+0x174>
 801c604:	0659      	lsls	r1, r3, #25
 801c606:	bf48      	it	mi
 801c608:	b2b6      	uxthmi	r6, r6
 801c60a:	e7e6      	b.n	801c5da <_printf_i+0x182>
 801c60c:	4615      	mov	r5, r2
 801c60e:	e7bb      	b.n	801c588 <_printf_i+0x130>
 801c610:	682b      	ldr	r3, [r5, #0]
 801c612:	6826      	ldr	r6, [r4, #0]
 801c614:	6961      	ldr	r1, [r4, #20]
 801c616:	1d18      	adds	r0, r3, #4
 801c618:	6028      	str	r0, [r5, #0]
 801c61a:	0635      	lsls	r5, r6, #24
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	d501      	bpl.n	801c624 <_printf_i+0x1cc>
 801c620:	6019      	str	r1, [r3, #0]
 801c622:	e002      	b.n	801c62a <_printf_i+0x1d2>
 801c624:	0670      	lsls	r0, r6, #25
 801c626:	d5fb      	bpl.n	801c620 <_printf_i+0x1c8>
 801c628:	8019      	strh	r1, [r3, #0]
 801c62a:	2300      	movs	r3, #0
 801c62c:	6123      	str	r3, [r4, #16]
 801c62e:	4615      	mov	r5, r2
 801c630:	e7ba      	b.n	801c5a8 <_printf_i+0x150>
 801c632:	682b      	ldr	r3, [r5, #0]
 801c634:	1d1a      	adds	r2, r3, #4
 801c636:	602a      	str	r2, [r5, #0]
 801c638:	681d      	ldr	r5, [r3, #0]
 801c63a:	6862      	ldr	r2, [r4, #4]
 801c63c:	2100      	movs	r1, #0
 801c63e:	4628      	mov	r0, r5
 801c640:	f7e3 fe4e 	bl	80002e0 <memchr>
 801c644:	b108      	cbz	r0, 801c64a <_printf_i+0x1f2>
 801c646:	1b40      	subs	r0, r0, r5
 801c648:	6060      	str	r0, [r4, #4]
 801c64a:	6863      	ldr	r3, [r4, #4]
 801c64c:	6123      	str	r3, [r4, #16]
 801c64e:	2300      	movs	r3, #0
 801c650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c654:	e7a8      	b.n	801c5a8 <_printf_i+0x150>
 801c656:	6923      	ldr	r3, [r4, #16]
 801c658:	462a      	mov	r2, r5
 801c65a:	4649      	mov	r1, r9
 801c65c:	4640      	mov	r0, r8
 801c65e:	47d0      	blx	sl
 801c660:	3001      	adds	r0, #1
 801c662:	d0ab      	beq.n	801c5bc <_printf_i+0x164>
 801c664:	6823      	ldr	r3, [r4, #0]
 801c666:	079b      	lsls	r3, r3, #30
 801c668:	d413      	bmi.n	801c692 <_printf_i+0x23a>
 801c66a:	68e0      	ldr	r0, [r4, #12]
 801c66c:	9b03      	ldr	r3, [sp, #12]
 801c66e:	4298      	cmp	r0, r3
 801c670:	bfb8      	it	lt
 801c672:	4618      	movlt	r0, r3
 801c674:	e7a4      	b.n	801c5c0 <_printf_i+0x168>
 801c676:	2301      	movs	r3, #1
 801c678:	4632      	mov	r2, r6
 801c67a:	4649      	mov	r1, r9
 801c67c:	4640      	mov	r0, r8
 801c67e:	47d0      	blx	sl
 801c680:	3001      	adds	r0, #1
 801c682:	d09b      	beq.n	801c5bc <_printf_i+0x164>
 801c684:	3501      	adds	r5, #1
 801c686:	68e3      	ldr	r3, [r4, #12]
 801c688:	9903      	ldr	r1, [sp, #12]
 801c68a:	1a5b      	subs	r3, r3, r1
 801c68c:	42ab      	cmp	r3, r5
 801c68e:	dcf2      	bgt.n	801c676 <_printf_i+0x21e>
 801c690:	e7eb      	b.n	801c66a <_printf_i+0x212>
 801c692:	2500      	movs	r5, #0
 801c694:	f104 0619 	add.w	r6, r4, #25
 801c698:	e7f5      	b.n	801c686 <_printf_i+0x22e>
 801c69a:	bf00      	nop
 801c69c:	08037b49 	.word	0x08037b49
 801c6a0:	08037b5a 	.word	0x08037b5a

0801c6a4 <_sbrk_r>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4d06      	ldr	r5, [pc, #24]	; (801c6c0 <_sbrk_r+0x1c>)
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4604      	mov	r4, r0
 801c6ac:	4608      	mov	r0, r1
 801c6ae:	602b      	str	r3, [r5, #0]
 801c6b0:	f7ee fcb0 	bl	800b014 <_sbrk>
 801c6b4:	1c43      	adds	r3, r0, #1
 801c6b6:	d102      	bne.n	801c6be <_sbrk_r+0x1a>
 801c6b8:	682b      	ldr	r3, [r5, #0]
 801c6ba:	b103      	cbz	r3, 801c6be <_sbrk_r+0x1a>
 801c6bc:	6023      	str	r3, [r4, #0]
 801c6be:	bd38      	pop	{r3, r4, r5, pc}
 801c6c0:	24003664 	.word	0x24003664

0801c6c4 <_raise_r>:
 801c6c4:	291f      	cmp	r1, #31
 801c6c6:	b538      	push	{r3, r4, r5, lr}
 801c6c8:	4604      	mov	r4, r0
 801c6ca:	460d      	mov	r5, r1
 801c6cc:	d904      	bls.n	801c6d8 <_raise_r+0x14>
 801c6ce:	2316      	movs	r3, #22
 801c6d0:	6003      	str	r3, [r0, #0]
 801c6d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c6d6:	bd38      	pop	{r3, r4, r5, pc}
 801c6d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c6da:	b112      	cbz	r2, 801c6e2 <_raise_r+0x1e>
 801c6dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c6e0:	b94b      	cbnz	r3, 801c6f6 <_raise_r+0x32>
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	f000 f830 	bl	801c748 <_getpid_r>
 801c6e8:	462a      	mov	r2, r5
 801c6ea:	4601      	mov	r1, r0
 801c6ec:	4620      	mov	r0, r4
 801c6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6f2:	f000 b817 	b.w	801c724 <_kill_r>
 801c6f6:	2b01      	cmp	r3, #1
 801c6f8:	d00a      	beq.n	801c710 <_raise_r+0x4c>
 801c6fa:	1c59      	adds	r1, r3, #1
 801c6fc:	d103      	bne.n	801c706 <_raise_r+0x42>
 801c6fe:	2316      	movs	r3, #22
 801c700:	6003      	str	r3, [r0, #0]
 801c702:	2001      	movs	r0, #1
 801c704:	e7e7      	b.n	801c6d6 <_raise_r+0x12>
 801c706:	2400      	movs	r4, #0
 801c708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c70c:	4628      	mov	r0, r5
 801c70e:	4798      	blx	r3
 801c710:	2000      	movs	r0, #0
 801c712:	e7e0      	b.n	801c6d6 <_raise_r+0x12>

0801c714 <raise>:
 801c714:	4b02      	ldr	r3, [pc, #8]	; (801c720 <raise+0xc>)
 801c716:	4601      	mov	r1, r0
 801c718:	6818      	ldr	r0, [r3, #0]
 801c71a:	f7ff bfd3 	b.w	801c6c4 <_raise_r>
 801c71e:	bf00      	nop
 801c720:	24000184 	.word	0x24000184

0801c724 <_kill_r>:
 801c724:	b538      	push	{r3, r4, r5, lr}
 801c726:	4d07      	ldr	r5, [pc, #28]	; (801c744 <_kill_r+0x20>)
 801c728:	2300      	movs	r3, #0
 801c72a:	4604      	mov	r4, r0
 801c72c:	4608      	mov	r0, r1
 801c72e:	4611      	mov	r1, r2
 801c730:	602b      	str	r3, [r5, #0]
 801c732:	f7ee fbe7 	bl	800af04 <_kill>
 801c736:	1c43      	adds	r3, r0, #1
 801c738:	d102      	bne.n	801c740 <_kill_r+0x1c>
 801c73a:	682b      	ldr	r3, [r5, #0]
 801c73c:	b103      	cbz	r3, 801c740 <_kill_r+0x1c>
 801c73e:	6023      	str	r3, [r4, #0]
 801c740:	bd38      	pop	{r3, r4, r5, pc}
 801c742:	bf00      	nop
 801c744:	24003664 	.word	0x24003664

0801c748 <_getpid_r>:
 801c748:	f7ee bbd4 	b.w	800aef4 <_getpid>

0801c74c <__swbuf_r>:
 801c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c74e:	460e      	mov	r6, r1
 801c750:	4614      	mov	r4, r2
 801c752:	4605      	mov	r5, r0
 801c754:	b118      	cbz	r0, 801c75e <__swbuf_r+0x12>
 801c756:	6983      	ldr	r3, [r0, #24]
 801c758:	b90b      	cbnz	r3, 801c75e <__swbuf_r+0x12>
 801c75a:	f000 f9d1 	bl	801cb00 <__sinit>
 801c75e:	4b21      	ldr	r3, [pc, #132]	; (801c7e4 <__swbuf_r+0x98>)
 801c760:	429c      	cmp	r4, r3
 801c762:	d12b      	bne.n	801c7bc <__swbuf_r+0x70>
 801c764:	686c      	ldr	r4, [r5, #4]
 801c766:	69a3      	ldr	r3, [r4, #24]
 801c768:	60a3      	str	r3, [r4, #8]
 801c76a:	89a3      	ldrh	r3, [r4, #12]
 801c76c:	071a      	lsls	r2, r3, #28
 801c76e:	d52f      	bpl.n	801c7d0 <__swbuf_r+0x84>
 801c770:	6923      	ldr	r3, [r4, #16]
 801c772:	b36b      	cbz	r3, 801c7d0 <__swbuf_r+0x84>
 801c774:	6923      	ldr	r3, [r4, #16]
 801c776:	6820      	ldr	r0, [r4, #0]
 801c778:	1ac0      	subs	r0, r0, r3
 801c77a:	6963      	ldr	r3, [r4, #20]
 801c77c:	b2f6      	uxtb	r6, r6
 801c77e:	4283      	cmp	r3, r0
 801c780:	4637      	mov	r7, r6
 801c782:	dc04      	bgt.n	801c78e <__swbuf_r+0x42>
 801c784:	4621      	mov	r1, r4
 801c786:	4628      	mov	r0, r5
 801c788:	f000 f926 	bl	801c9d8 <_fflush_r>
 801c78c:	bb30      	cbnz	r0, 801c7dc <__swbuf_r+0x90>
 801c78e:	68a3      	ldr	r3, [r4, #8]
 801c790:	3b01      	subs	r3, #1
 801c792:	60a3      	str	r3, [r4, #8]
 801c794:	6823      	ldr	r3, [r4, #0]
 801c796:	1c5a      	adds	r2, r3, #1
 801c798:	6022      	str	r2, [r4, #0]
 801c79a:	701e      	strb	r6, [r3, #0]
 801c79c:	6963      	ldr	r3, [r4, #20]
 801c79e:	3001      	adds	r0, #1
 801c7a0:	4283      	cmp	r3, r0
 801c7a2:	d004      	beq.n	801c7ae <__swbuf_r+0x62>
 801c7a4:	89a3      	ldrh	r3, [r4, #12]
 801c7a6:	07db      	lsls	r3, r3, #31
 801c7a8:	d506      	bpl.n	801c7b8 <__swbuf_r+0x6c>
 801c7aa:	2e0a      	cmp	r6, #10
 801c7ac:	d104      	bne.n	801c7b8 <__swbuf_r+0x6c>
 801c7ae:	4621      	mov	r1, r4
 801c7b0:	4628      	mov	r0, r5
 801c7b2:	f000 f911 	bl	801c9d8 <_fflush_r>
 801c7b6:	b988      	cbnz	r0, 801c7dc <__swbuf_r+0x90>
 801c7b8:	4638      	mov	r0, r7
 801c7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7bc:	4b0a      	ldr	r3, [pc, #40]	; (801c7e8 <__swbuf_r+0x9c>)
 801c7be:	429c      	cmp	r4, r3
 801c7c0:	d101      	bne.n	801c7c6 <__swbuf_r+0x7a>
 801c7c2:	68ac      	ldr	r4, [r5, #8]
 801c7c4:	e7cf      	b.n	801c766 <__swbuf_r+0x1a>
 801c7c6:	4b09      	ldr	r3, [pc, #36]	; (801c7ec <__swbuf_r+0xa0>)
 801c7c8:	429c      	cmp	r4, r3
 801c7ca:	bf08      	it	eq
 801c7cc:	68ec      	ldreq	r4, [r5, #12]
 801c7ce:	e7ca      	b.n	801c766 <__swbuf_r+0x1a>
 801c7d0:	4621      	mov	r1, r4
 801c7d2:	4628      	mov	r0, r5
 801c7d4:	f000 f80c 	bl	801c7f0 <__swsetup_r>
 801c7d8:	2800      	cmp	r0, #0
 801c7da:	d0cb      	beq.n	801c774 <__swbuf_r+0x28>
 801c7dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c7e0:	e7ea      	b.n	801c7b8 <__swbuf_r+0x6c>
 801c7e2:	bf00      	nop
 801c7e4:	08037b8c 	.word	0x08037b8c
 801c7e8:	08037bac 	.word	0x08037bac
 801c7ec:	08037b6c 	.word	0x08037b6c

0801c7f0 <__swsetup_r>:
 801c7f0:	4b32      	ldr	r3, [pc, #200]	; (801c8bc <__swsetup_r+0xcc>)
 801c7f2:	b570      	push	{r4, r5, r6, lr}
 801c7f4:	681d      	ldr	r5, [r3, #0]
 801c7f6:	4606      	mov	r6, r0
 801c7f8:	460c      	mov	r4, r1
 801c7fa:	b125      	cbz	r5, 801c806 <__swsetup_r+0x16>
 801c7fc:	69ab      	ldr	r3, [r5, #24]
 801c7fe:	b913      	cbnz	r3, 801c806 <__swsetup_r+0x16>
 801c800:	4628      	mov	r0, r5
 801c802:	f000 f97d 	bl	801cb00 <__sinit>
 801c806:	4b2e      	ldr	r3, [pc, #184]	; (801c8c0 <__swsetup_r+0xd0>)
 801c808:	429c      	cmp	r4, r3
 801c80a:	d10f      	bne.n	801c82c <__swsetup_r+0x3c>
 801c80c:	686c      	ldr	r4, [r5, #4]
 801c80e:	89a3      	ldrh	r3, [r4, #12]
 801c810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c814:	0719      	lsls	r1, r3, #28
 801c816:	d42c      	bmi.n	801c872 <__swsetup_r+0x82>
 801c818:	06dd      	lsls	r5, r3, #27
 801c81a:	d411      	bmi.n	801c840 <__swsetup_r+0x50>
 801c81c:	2309      	movs	r3, #9
 801c81e:	6033      	str	r3, [r6, #0]
 801c820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c824:	81a3      	strh	r3, [r4, #12]
 801c826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c82a:	e03e      	b.n	801c8aa <__swsetup_r+0xba>
 801c82c:	4b25      	ldr	r3, [pc, #148]	; (801c8c4 <__swsetup_r+0xd4>)
 801c82e:	429c      	cmp	r4, r3
 801c830:	d101      	bne.n	801c836 <__swsetup_r+0x46>
 801c832:	68ac      	ldr	r4, [r5, #8]
 801c834:	e7eb      	b.n	801c80e <__swsetup_r+0x1e>
 801c836:	4b24      	ldr	r3, [pc, #144]	; (801c8c8 <__swsetup_r+0xd8>)
 801c838:	429c      	cmp	r4, r3
 801c83a:	bf08      	it	eq
 801c83c:	68ec      	ldreq	r4, [r5, #12]
 801c83e:	e7e6      	b.n	801c80e <__swsetup_r+0x1e>
 801c840:	0758      	lsls	r0, r3, #29
 801c842:	d512      	bpl.n	801c86a <__swsetup_r+0x7a>
 801c844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c846:	b141      	cbz	r1, 801c85a <__swsetup_r+0x6a>
 801c848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c84c:	4299      	cmp	r1, r3
 801c84e:	d002      	beq.n	801c856 <__swsetup_r+0x66>
 801c850:	4630      	mov	r0, r6
 801c852:	f7ff fb59 	bl	801bf08 <_free_r>
 801c856:	2300      	movs	r3, #0
 801c858:	6363      	str	r3, [r4, #52]	; 0x34
 801c85a:	89a3      	ldrh	r3, [r4, #12]
 801c85c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c860:	81a3      	strh	r3, [r4, #12]
 801c862:	2300      	movs	r3, #0
 801c864:	6063      	str	r3, [r4, #4]
 801c866:	6923      	ldr	r3, [r4, #16]
 801c868:	6023      	str	r3, [r4, #0]
 801c86a:	89a3      	ldrh	r3, [r4, #12]
 801c86c:	f043 0308 	orr.w	r3, r3, #8
 801c870:	81a3      	strh	r3, [r4, #12]
 801c872:	6923      	ldr	r3, [r4, #16]
 801c874:	b94b      	cbnz	r3, 801c88a <__swsetup_r+0x9a>
 801c876:	89a3      	ldrh	r3, [r4, #12]
 801c878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c880:	d003      	beq.n	801c88a <__swsetup_r+0x9a>
 801c882:	4621      	mov	r1, r4
 801c884:	4630      	mov	r0, r6
 801c886:	f000 fa01 	bl	801cc8c <__smakebuf_r>
 801c88a:	89a0      	ldrh	r0, [r4, #12]
 801c88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c890:	f010 0301 	ands.w	r3, r0, #1
 801c894:	d00a      	beq.n	801c8ac <__swsetup_r+0xbc>
 801c896:	2300      	movs	r3, #0
 801c898:	60a3      	str	r3, [r4, #8]
 801c89a:	6963      	ldr	r3, [r4, #20]
 801c89c:	425b      	negs	r3, r3
 801c89e:	61a3      	str	r3, [r4, #24]
 801c8a0:	6923      	ldr	r3, [r4, #16]
 801c8a2:	b943      	cbnz	r3, 801c8b6 <__swsetup_r+0xc6>
 801c8a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c8a8:	d1ba      	bne.n	801c820 <__swsetup_r+0x30>
 801c8aa:	bd70      	pop	{r4, r5, r6, pc}
 801c8ac:	0781      	lsls	r1, r0, #30
 801c8ae:	bf58      	it	pl
 801c8b0:	6963      	ldrpl	r3, [r4, #20]
 801c8b2:	60a3      	str	r3, [r4, #8]
 801c8b4:	e7f4      	b.n	801c8a0 <__swsetup_r+0xb0>
 801c8b6:	2000      	movs	r0, #0
 801c8b8:	e7f7      	b.n	801c8aa <__swsetup_r+0xba>
 801c8ba:	bf00      	nop
 801c8bc:	24000184 	.word	0x24000184
 801c8c0:	08037b8c 	.word	0x08037b8c
 801c8c4:	08037bac 	.word	0x08037bac
 801c8c8:	08037b6c 	.word	0x08037b6c

0801c8cc <__sflush_r>:
 801c8cc:	898a      	ldrh	r2, [r1, #12]
 801c8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8d2:	4605      	mov	r5, r0
 801c8d4:	0710      	lsls	r0, r2, #28
 801c8d6:	460c      	mov	r4, r1
 801c8d8:	d458      	bmi.n	801c98c <__sflush_r+0xc0>
 801c8da:	684b      	ldr	r3, [r1, #4]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	dc05      	bgt.n	801c8ec <__sflush_r+0x20>
 801c8e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	dc02      	bgt.n	801c8ec <__sflush_r+0x20>
 801c8e6:	2000      	movs	r0, #0
 801c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c8ee:	2e00      	cmp	r6, #0
 801c8f0:	d0f9      	beq.n	801c8e6 <__sflush_r+0x1a>
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c8f8:	682f      	ldr	r7, [r5, #0]
 801c8fa:	602b      	str	r3, [r5, #0]
 801c8fc:	d032      	beq.n	801c964 <__sflush_r+0x98>
 801c8fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c900:	89a3      	ldrh	r3, [r4, #12]
 801c902:	075a      	lsls	r2, r3, #29
 801c904:	d505      	bpl.n	801c912 <__sflush_r+0x46>
 801c906:	6863      	ldr	r3, [r4, #4]
 801c908:	1ac0      	subs	r0, r0, r3
 801c90a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c90c:	b10b      	cbz	r3, 801c912 <__sflush_r+0x46>
 801c90e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c910:	1ac0      	subs	r0, r0, r3
 801c912:	2300      	movs	r3, #0
 801c914:	4602      	mov	r2, r0
 801c916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c918:	6a21      	ldr	r1, [r4, #32]
 801c91a:	4628      	mov	r0, r5
 801c91c:	47b0      	blx	r6
 801c91e:	1c43      	adds	r3, r0, #1
 801c920:	89a3      	ldrh	r3, [r4, #12]
 801c922:	d106      	bne.n	801c932 <__sflush_r+0x66>
 801c924:	6829      	ldr	r1, [r5, #0]
 801c926:	291d      	cmp	r1, #29
 801c928:	d82c      	bhi.n	801c984 <__sflush_r+0xb8>
 801c92a:	4a2a      	ldr	r2, [pc, #168]	; (801c9d4 <__sflush_r+0x108>)
 801c92c:	40ca      	lsrs	r2, r1
 801c92e:	07d6      	lsls	r6, r2, #31
 801c930:	d528      	bpl.n	801c984 <__sflush_r+0xb8>
 801c932:	2200      	movs	r2, #0
 801c934:	6062      	str	r2, [r4, #4]
 801c936:	04d9      	lsls	r1, r3, #19
 801c938:	6922      	ldr	r2, [r4, #16]
 801c93a:	6022      	str	r2, [r4, #0]
 801c93c:	d504      	bpl.n	801c948 <__sflush_r+0x7c>
 801c93e:	1c42      	adds	r2, r0, #1
 801c940:	d101      	bne.n	801c946 <__sflush_r+0x7a>
 801c942:	682b      	ldr	r3, [r5, #0]
 801c944:	b903      	cbnz	r3, 801c948 <__sflush_r+0x7c>
 801c946:	6560      	str	r0, [r4, #84]	; 0x54
 801c948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c94a:	602f      	str	r7, [r5, #0]
 801c94c:	2900      	cmp	r1, #0
 801c94e:	d0ca      	beq.n	801c8e6 <__sflush_r+0x1a>
 801c950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c954:	4299      	cmp	r1, r3
 801c956:	d002      	beq.n	801c95e <__sflush_r+0x92>
 801c958:	4628      	mov	r0, r5
 801c95a:	f7ff fad5 	bl	801bf08 <_free_r>
 801c95e:	2000      	movs	r0, #0
 801c960:	6360      	str	r0, [r4, #52]	; 0x34
 801c962:	e7c1      	b.n	801c8e8 <__sflush_r+0x1c>
 801c964:	6a21      	ldr	r1, [r4, #32]
 801c966:	2301      	movs	r3, #1
 801c968:	4628      	mov	r0, r5
 801c96a:	47b0      	blx	r6
 801c96c:	1c41      	adds	r1, r0, #1
 801c96e:	d1c7      	bne.n	801c900 <__sflush_r+0x34>
 801c970:	682b      	ldr	r3, [r5, #0]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d0c4      	beq.n	801c900 <__sflush_r+0x34>
 801c976:	2b1d      	cmp	r3, #29
 801c978:	d001      	beq.n	801c97e <__sflush_r+0xb2>
 801c97a:	2b16      	cmp	r3, #22
 801c97c:	d101      	bne.n	801c982 <__sflush_r+0xb6>
 801c97e:	602f      	str	r7, [r5, #0]
 801c980:	e7b1      	b.n	801c8e6 <__sflush_r+0x1a>
 801c982:	89a3      	ldrh	r3, [r4, #12]
 801c984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c988:	81a3      	strh	r3, [r4, #12]
 801c98a:	e7ad      	b.n	801c8e8 <__sflush_r+0x1c>
 801c98c:	690f      	ldr	r7, [r1, #16]
 801c98e:	2f00      	cmp	r7, #0
 801c990:	d0a9      	beq.n	801c8e6 <__sflush_r+0x1a>
 801c992:	0793      	lsls	r3, r2, #30
 801c994:	680e      	ldr	r6, [r1, #0]
 801c996:	bf08      	it	eq
 801c998:	694b      	ldreq	r3, [r1, #20]
 801c99a:	600f      	str	r7, [r1, #0]
 801c99c:	bf18      	it	ne
 801c99e:	2300      	movne	r3, #0
 801c9a0:	eba6 0807 	sub.w	r8, r6, r7
 801c9a4:	608b      	str	r3, [r1, #8]
 801c9a6:	f1b8 0f00 	cmp.w	r8, #0
 801c9aa:	dd9c      	ble.n	801c8e6 <__sflush_r+0x1a>
 801c9ac:	6a21      	ldr	r1, [r4, #32]
 801c9ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c9b0:	4643      	mov	r3, r8
 801c9b2:	463a      	mov	r2, r7
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	47b0      	blx	r6
 801c9b8:	2800      	cmp	r0, #0
 801c9ba:	dc06      	bgt.n	801c9ca <__sflush_r+0xfe>
 801c9bc:	89a3      	ldrh	r3, [r4, #12]
 801c9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9c2:	81a3      	strh	r3, [r4, #12]
 801c9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c9c8:	e78e      	b.n	801c8e8 <__sflush_r+0x1c>
 801c9ca:	4407      	add	r7, r0
 801c9cc:	eba8 0800 	sub.w	r8, r8, r0
 801c9d0:	e7e9      	b.n	801c9a6 <__sflush_r+0xda>
 801c9d2:	bf00      	nop
 801c9d4:	20400001 	.word	0x20400001

0801c9d8 <_fflush_r>:
 801c9d8:	b538      	push	{r3, r4, r5, lr}
 801c9da:	690b      	ldr	r3, [r1, #16]
 801c9dc:	4605      	mov	r5, r0
 801c9de:	460c      	mov	r4, r1
 801c9e0:	b913      	cbnz	r3, 801c9e8 <_fflush_r+0x10>
 801c9e2:	2500      	movs	r5, #0
 801c9e4:	4628      	mov	r0, r5
 801c9e6:	bd38      	pop	{r3, r4, r5, pc}
 801c9e8:	b118      	cbz	r0, 801c9f2 <_fflush_r+0x1a>
 801c9ea:	6983      	ldr	r3, [r0, #24]
 801c9ec:	b90b      	cbnz	r3, 801c9f2 <_fflush_r+0x1a>
 801c9ee:	f000 f887 	bl	801cb00 <__sinit>
 801c9f2:	4b14      	ldr	r3, [pc, #80]	; (801ca44 <_fflush_r+0x6c>)
 801c9f4:	429c      	cmp	r4, r3
 801c9f6:	d11b      	bne.n	801ca30 <_fflush_r+0x58>
 801c9f8:	686c      	ldr	r4, [r5, #4]
 801c9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d0ef      	beq.n	801c9e2 <_fflush_r+0xa>
 801ca02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ca04:	07d0      	lsls	r0, r2, #31
 801ca06:	d404      	bmi.n	801ca12 <_fflush_r+0x3a>
 801ca08:	0599      	lsls	r1, r3, #22
 801ca0a:	d402      	bmi.n	801ca12 <_fflush_r+0x3a>
 801ca0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca0e:	f000 f915 	bl	801cc3c <__retarget_lock_acquire_recursive>
 801ca12:	4628      	mov	r0, r5
 801ca14:	4621      	mov	r1, r4
 801ca16:	f7ff ff59 	bl	801c8cc <__sflush_r>
 801ca1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca1c:	07da      	lsls	r2, r3, #31
 801ca1e:	4605      	mov	r5, r0
 801ca20:	d4e0      	bmi.n	801c9e4 <_fflush_r+0xc>
 801ca22:	89a3      	ldrh	r3, [r4, #12]
 801ca24:	059b      	lsls	r3, r3, #22
 801ca26:	d4dd      	bmi.n	801c9e4 <_fflush_r+0xc>
 801ca28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca2a:	f000 f908 	bl	801cc3e <__retarget_lock_release_recursive>
 801ca2e:	e7d9      	b.n	801c9e4 <_fflush_r+0xc>
 801ca30:	4b05      	ldr	r3, [pc, #20]	; (801ca48 <_fflush_r+0x70>)
 801ca32:	429c      	cmp	r4, r3
 801ca34:	d101      	bne.n	801ca3a <_fflush_r+0x62>
 801ca36:	68ac      	ldr	r4, [r5, #8]
 801ca38:	e7df      	b.n	801c9fa <_fflush_r+0x22>
 801ca3a:	4b04      	ldr	r3, [pc, #16]	; (801ca4c <_fflush_r+0x74>)
 801ca3c:	429c      	cmp	r4, r3
 801ca3e:	bf08      	it	eq
 801ca40:	68ec      	ldreq	r4, [r5, #12]
 801ca42:	e7da      	b.n	801c9fa <_fflush_r+0x22>
 801ca44:	08037b8c 	.word	0x08037b8c
 801ca48:	08037bac 	.word	0x08037bac
 801ca4c:	08037b6c 	.word	0x08037b6c

0801ca50 <std>:
 801ca50:	2300      	movs	r3, #0
 801ca52:	b510      	push	{r4, lr}
 801ca54:	4604      	mov	r4, r0
 801ca56:	e9c0 3300 	strd	r3, r3, [r0]
 801ca5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca5e:	6083      	str	r3, [r0, #8]
 801ca60:	8181      	strh	r1, [r0, #12]
 801ca62:	6643      	str	r3, [r0, #100]	; 0x64
 801ca64:	81c2      	strh	r2, [r0, #14]
 801ca66:	6183      	str	r3, [r0, #24]
 801ca68:	4619      	mov	r1, r3
 801ca6a:	2208      	movs	r2, #8
 801ca6c:	305c      	adds	r0, #92	; 0x5c
 801ca6e:	f7ff fa43 	bl	801bef8 <memset>
 801ca72:	4b05      	ldr	r3, [pc, #20]	; (801ca88 <std+0x38>)
 801ca74:	6263      	str	r3, [r4, #36]	; 0x24
 801ca76:	4b05      	ldr	r3, [pc, #20]	; (801ca8c <std+0x3c>)
 801ca78:	62a3      	str	r3, [r4, #40]	; 0x28
 801ca7a:	4b05      	ldr	r3, [pc, #20]	; (801ca90 <std+0x40>)
 801ca7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ca7e:	4b05      	ldr	r3, [pc, #20]	; (801ca94 <std+0x44>)
 801ca80:	6224      	str	r4, [r4, #32]
 801ca82:	6323      	str	r3, [r4, #48]	; 0x30
 801ca84:	bd10      	pop	{r4, pc}
 801ca86:	bf00      	nop
 801ca88:	0801cd25 	.word	0x0801cd25
 801ca8c:	0801cd47 	.word	0x0801cd47
 801ca90:	0801cd7f 	.word	0x0801cd7f
 801ca94:	0801cda3 	.word	0x0801cda3

0801ca98 <_cleanup_r>:
 801ca98:	4901      	ldr	r1, [pc, #4]	; (801caa0 <_cleanup_r+0x8>)
 801ca9a:	f000 b8af 	b.w	801cbfc <_fwalk_reent>
 801ca9e:	bf00      	nop
 801caa0:	0801c9d9 	.word	0x0801c9d9

0801caa4 <__sfmoreglue>:
 801caa4:	b570      	push	{r4, r5, r6, lr}
 801caa6:	2268      	movs	r2, #104	; 0x68
 801caa8:	1e4d      	subs	r5, r1, #1
 801caaa:	4355      	muls	r5, r2
 801caac:	460e      	mov	r6, r1
 801caae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cab2:	f7ff fa95 	bl	801bfe0 <_malloc_r>
 801cab6:	4604      	mov	r4, r0
 801cab8:	b140      	cbz	r0, 801cacc <__sfmoreglue+0x28>
 801caba:	2100      	movs	r1, #0
 801cabc:	e9c0 1600 	strd	r1, r6, [r0]
 801cac0:	300c      	adds	r0, #12
 801cac2:	60a0      	str	r0, [r4, #8]
 801cac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cac8:	f7ff fa16 	bl	801bef8 <memset>
 801cacc:	4620      	mov	r0, r4
 801cace:	bd70      	pop	{r4, r5, r6, pc}

0801cad0 <__sfp_lock_acquire>:
 801cad0:	4801      	ldr	r0, [pc, #4]	; (801cad8 <__sfp_lock_acquire+0x8>)
 801cad2:	f000 b8b3 	b.w	801cc3c <__retarget_lock_acquire_recursive>
 801cad6:	bf00      	nop
 801cad8:	24003661 	.word	0x24003661

0801cadc <__sfp_lock_release>:
 801cadc:	4801      	ldr	r0, [pc, #4]	; (801cae4 <__sfp_lock_release+0x8>)
 801cade:	f000 b8ae 	b.w	801cc3e <__retarget_lock_release_recursive>
 801cae2:	bf00      	nop
 801cae4:	24003661 	.word	0x24003661

0801cae8 <__sinit_lock_acquire>:
 801cae8:	4801      	ldr	r0, [pc, #4]	; (801caf0 <__sinit_lock_acquire+0x8>)
 801caea:	f000 b8a7 	b.w	801cc3c <__retarget_lock_acquire_recursive>
 801caee:	bf00      	nop
 801caf0:	24003662 	.word	0x24003662

0801caf4 <__sinit_lock_release>:
 801caf4:	4801      	ldr	r0, [pc, #4]	; (801cafc <__sinit_lock_release+0x8>)
 801caf6:	f000 b8a2 	b.w	801cc3e <__retarget_lock_release_recursive>
 801cafa:	bf00      	nop
 801cafc:	24003662 	.word	0x24003662

0801cb00 <__sinit>:
 801cb00:	b510      	push	{r4, lr}
 801cb02:	4604      	mov	r4, r0
 801cb04:	f7ff fff0 	bl	801cae8 <__sinit_lock_acquire>
 801cb08:	69a3      	ldr	r3, [r4, #24]
 801cb0a:	b11b      	cbz	r3, 801cb14 <__sinit+0x14>
 801cb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb10:	f7ff bff0 	b.w	801caf4 <__sinit_lock_release>
 801cb14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cb18:	6523      	str	r3, [r4, #80]	; 0x50
 801cb1a:	4b13      	ldr	r3, [pc, #76]	; (801cb68 <__sinit+0x68>)
 801cb1c:	4a13      	ldr	r2, [pc, #76]	; (801cb6c <__sinit+0x6c>)
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	62a2      	str	r2, [r4, #40]	; 0x28
 801cb22:	42a3      	cmp	r3, r4
 801cb24:	bf04      	itt	eq
 801cb26:	2301      	moveq	r3, #1
 801cb28:	61a3      	streq	r3, [r4, #24]
 801cb2a:	4620      	mov	r0, r4
 801cb2c:	f000 f820 	bl	801cb70 <__sfp>
 801cb30:	6060      	str	r0, [r4, #4]
 801cb32:	4620      	mov	r0, r4
 801cb34:	f000 f81c 	bl	801cb70 <__sfp>
 801cb38:	60a0      	str	r0, [r4, #8]
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f000 f818 	bl	801cb70 <__sfp>
 801cb40:	2200      	movs	r2, #0
 801cb42:	60e0      	str	r0, [r4, #12]
 801cb44:	2104      	movs	r1, #4
 801cb46:	6860      	ldr	r0, [r4, #4]
 801cb48:	f7ff ff82 	bl	801ca50 <std>
 801cb4c:	68a0      	ldr	r0, [r4, #8]
 801cb4e:	2201      	movs	r2, #1
 801cb50:	2109      	movs	r1, #9
 801cb52:	f7ff ff7d 	bl	801ca50 <std>
 801cb56:	68e0      	ldr	r0, [r4, #12]
 801cb58:	2202      	movs	r2, #2
 801cb5a:	2112      	movs	r1, #18
 801cb5c:	f7ff ff78 	bl	801ca50 <std>
 801cb60:	2301      	movs	r3, #1
 801cb62:	61a3      	str	r3, [r4, #24]
 801cb64:	e7d2      	b.n	801cb0c <__sinit+0xc>
 801cb66:	bf00      	nop
 801cb68:	08037b34 	.word	0x08037b34
 801cb6c:	0801ca99 	.word	0x0801ca99

0801cb70 <__sfp>:
 801cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb72:	4607      	mov	r7, r0
 801cb74:	f7ff ffac 	bl	801cad0 <__sfp_lock_acquire>
 801cb78:	4b1e      	ldr	r3, [pc, #120]	; (801cbf4 <__sfp+0x84>)
 801cb7a:	681e      	ldr	r6, [r3, #0]
 801cb7c:	69b3      	ldr	r3, [r6, #24]
 801cb7e:	b913      	cbnz	r3, 801cb86 <__sfp+0x16>
 801cb80:	4630      	mov	r0, r6
 801cb82:	f7ff ffbd 	bl	801cb00 <__sinit>
 801cb86:	3648      	adds	r6, #72	; 0x48
 801cb88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cb8c:	3b01      	subs	r3, #1
 801cb8e:	d503      	bpl.n	801cb98 <__sfp+0x28>
 801cb90:	6833      	ldr	r3, [r6, #0]
 801cb92:	b30b      	cbz	r3, 801cbd8 <__sfp+0x68>
 801cb94:	6836      	ldr	r6, [r6, #0]
 801cb96:	e7f7      	b.n	801cb88 <__sfp+0x18>
 801cb98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cb9c:	b9d5      	cbnz	r5, 801cbd4 <__sfp+0x64>
 801cb9e:	4b16      	ldr	r3, [pc, #88]	; (801cbf8 <__sfp+0x88>)
 801cba0:	60e3      	str	r3, [r4, #12]
 801cba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cba6:	6665      	str	r5, [r4, #100]	; 0x64
 801cba8:	f000 f847 	bl	801cc3a <__retarget_lock_init_recursive>
 801cbac:	f7ff ff96 	bl	801cadc <__sfp_lock_release>
 801cbb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cbb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cbb8:	6025      	str	r5, [r4, #0]
 801cbba:	61a5      	str	r5, [r4, #24]
 801cbbc:	2208      	movs	r2, #8
 801cbbe:	4629      	mov	r1, r5
 801cbc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cbc4:	f7ff f998 	bl	801bef8 <memset>
 801cbc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cbcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbd4:	3468      	adds	r4, #104	; 0x68
 801cbd6:	e7d9      	b.n	801cb8c <__sfp+0x1c>
 801cbd8:	2104      	movs	r1, #4
 801cbda:	4638      	mov	r0, r7
 801cbdc:	f7ff ff62 	bl	801caa4 <__sfmoreglue>
 801cbe0:	4604      	mov	r4, r0
 801cbe2:	6030      	str	r0, [r6, #0]
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	d1d5      	bne.n	801cb94 <__sfp+0x24>
 801cbe8:	f7ff ff78 	bl	801cadc <__sfp_lock_release>
 801cbec:	230c      	movs	r3, #12
 801cbee:	603b      	str	r3, [r7, #0]
 801cbf0:	e7ee      	b.n	801cbd0 <__sfp+0x60>
 801cbf2:	bf00      	nop
 801cbf4:	08037b34 	.word	0x08037b34
 801cbf8:	ffff0001 	.word	0xffff0001

0801cbfc <_fwalk_reent>:
 801cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc00:	4606      	mov	r6, r0
 801cc02:	4688      	mov	r8, r1
 801cc04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cc08:	2700      	movs	r7, #0
 801cc0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cc0e:	f1b9 0901 	subs.w	r9, r9, #1
 801cc12:	d505      	bpl.n	801cc20 <_fwalk_reent+0x24>
 801cc14:	6824      	ldr	r4, [r4, #0]
 801cc16:	2c00      	cmp	r4, #0
 801cc18:	d1f7      	bne.n	801cc0a <_fwalk_reent+0xe>
 801cc1a:	4638      	mov	r0, r7
 801cc1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc20:	89ab      	ldrh	r3, [r5, #12]
 801cc22:	2b01      	cmp	r3, #1
 801cc24:	d907      	bls.n	801cc36 <_fwalk_reent+0x3a>
 801cc26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cc2a:	3301      	adds	r3, #1
 801cc2c:	d003      	beq.n	801cc36 <_fwalk_reent+0x3a>
 801cc2e:	4629      	mov	r1, r5
 801cc30:	4630      	mov	r0, r6
 801cc32:	47c0      	blx	r8
 801cc34:	4307      	orrs	r7, r0
 801cc36:	3568      	adds	r5, #104	; 0x68
 801cc38:	e7e9      	b.n	801cc0e <_fwalk_reent+0x12>

0801cc3a <__retarget_lock_init_recursive>:
 801cc3a:	4770      	bx	lr

0801cc3c <__retarget_lock_acquire_recursive>:
 801cc3c:	4770      	bx	lr

0801cc3e <__retarget_lock_release_recursive>:
 801cc3e:	4770      	bx	lr

0801cc40 <__swhatbuf_r>:
 801cc40:	b570      	push	{r4, r5, r6, lr}
 801cc42:	460e      	mov	r6, r1
 801cc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc48:	2900      	cmp	r1, #0
 801cc4a:	b096      	sub	sp, #88	; 0x58
 801cc4c:	4614      	mov	r4, r2
 801cc4e:	461d      	mov	r5, r3
 801cc50:	da08      	bge.n	801cc64 <__swhatbuf_r+0x24>
 801cc52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cc56:	2200      	movs	r2, #0
 801cc58:	602a      	str	r2, [r5, #0]
 801cc5a:	061a      	lsls	r2, r3, #24
 801cc5c:	d410      	bmi.n	801cc80 <__swhatbuf_r+0x40>
 801cc5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc62:	e00e      	b.n	801cc82 <__swhatbuf_r+0x42>
 801cc64:	466a      	mov	r2, sp
 801cc66:	f000 f8c3 	bl	801cdf0 <_fstat_r>
 801cc6a:	2800      	cmp	r0, #0
 801cc6c:	dbf1      	blt.n	801cc52 <__swhatbuf_r+0x12>
 801cc6e:	9a01      	ldr	r2, [sp, #4]
 801cc70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cc74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cc78:	425a      	negs	r2, r3
 801cc7a:	415a      	adcs	r2, r3
 801cc7c:	602a      	str	r2, [r5, #0]
 801cc7e:	e7ee      	b.n	801cc5e <__swhatbuf_r+0x1e>
 801cc80:	2340      	movs	r3, #64	; 0x40
 801cc82:	2000      	movs	r0, #0
 801cc84:	6023      	str	r3, [r4, #0]
 801cc86:	b016      	add	sp, #88	; 0x58
 801cc88:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cc8c <__smakebuf_r>:
 801cc8c:	898b      	ldrh	r3, [r1, #12]
 801cc8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc90:	079d      	lsls	r5, r3, #30
 801cc92:	4606      	mov	r6, r0
 801cc94:	460c      	mov	r4, r1
 801cc96:	d507      	bpl.n	801cca8 <__smakebuf_r+0x1c>
 801cc98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cc9c:	6023      	str	r3, [r4, #0]
 801cc9e:	6123      	str	r3, [r4, #16]
 801cca0:	2301      	movs	r3, #1
 801cca2:	6163      	str	r3, [r4, #20]
 801cca4:	b002      	add	sp, #8
 801cca6:	bd70      	pop	{r4, r5, r6, pc}
 801cca8:	ab01      	add	r3, sp, #4
 801ccaa:	466a      	mov	r2, sp
 801ccac:	f7ff ffc8 	bl	801cc40 <__swhatbuf_r>
 801ccb0:	9900      	ldr	r1, [sp, #0]
 801ccb2:	4605      	mov	r5, r0
 801ccb4:	4630      	mov	r0, r6
 801ccb6:	f7ff f993 	bl	801bfe0 <_malloc_r>
 801ccba:	b948      	cbnz	r0, 801ccd0 <__smakebuf_r+0x44>
 801ccbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccc0:	059a      	lsls	r2, r3, #22
 801ccc2:	d4ef      	bmi.n	801cca4 <__smakebuf_r+0x18>
 801ccc4:	f023 0303 	bic.w	r3, r3, #3
 801ccc8:	f043 0302 	orr.w	r3, r3, #2
 801cccc:	81a3      	strh	r3, [r4, #12]
 801ccce:	e7e3      	b.n	801cc98 <__smakebuf_r+0xc>
 801ccd0:	4b0d      	ldr	r3, [pc, #52]	; (801cd08 <__smakebuf_r+0x7c>)
 801ccd2:	62b3      	str	r3, [r6, #40]	; 0x28
 801ccd4:	89a3      	ldrh	r3, [r4, #12]
 801ccd6:	6020      	str	r0, [r4, #0]
 801ccd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ccdc:	81a3      	strh	r3, [r4, #12]
 801ccde:	9b00      	ldr	r3, [sp, #0]
 801cce0:	6163      	str	r3, [r4, #20]
 801cce2:	9b01      	ldr	r3, [sp, #4]
 801cce4:	6120      	str	r0, [r4, #16]
 801cce6:	b15b      	cbz	r3, 801cd00 <__smakebuf_r+0x74>
 801cce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ccec:	4630      	mov	r0, r6
 801ccee:	f000 f891 	bl	801ce14 <_isatty_r>
 801ccf2:	b128      	cbz	r0, 801cd00 <__smakebuf_r+0x74>
 801ccf4:	89a3      	ldrh	r3, [r4, #12]
 801ccf6:	f023 0303 	bic.w	r3, r3, #3
 801ccfa:	f043 0301 	orr.w	r3, r3, #1
 801ccfe:	81a3      	strh	r3, [r4, #12]
 801cd00:	89a0      	ldrh	r0, [r4, #12]
 801cd02:	4305      	orrs	r5, r0
 801cd04:	81a5      	strh	r5, [r4, #12]
 801cd06:	e7cd      	b.n	801cca4 <__smakebuf_r+0x18>
 801cd08:	0801ca99 	.word	0x0801ca99

0801cd0c <__malloc_lock>:
 801cd0c:	4801      	ldr	r0, [pc, #4]	; (801cd14 <__malloc_lock+0x8>)
 801cd0e:	f7ff bf95 	b.w	801cc3c <__retarget_lock_acquire_recursive>
 801cd12:	bf00      	nop
 801cd14:	24003660 	.word	0x24003660

0801cd18 <__malloc_unlock>:
 801cd18:	4801      	ldr	r0, [pc, #4]	; (801cd20 <__malloc_unlock+0x8>)
 801cd1a:	f7ff bf90 	b.w	801cc3e <__retarget_lock_release_recursive>
 801cd1e:	bf00      	nop
 801cd20:	24003660 	.word	0x24003660

0801cd24 <__sread>:
 801cd24:	b510      	push	{r4, lr}
 801cd26:	460c      	mov	r4, r1
 801cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd2c:	f000 f894 	bl	801ce58 <_read_r>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	bfab      	itete	ge
 801cd34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cd36:	89a3      	ldrhlt	r3, [r4, #12]
 801cd38:	181b      	addge	r3, r3, r0
 801cd3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cd3e:	bfac      	ite	ge
 801cd40:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd42:	81a3      	strhlt	r3, [r4, #12]
 801cd44:	bd10      	pop	{r4, pc}

0801cd46 <__swrite>:
 801cd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd4a:	461f      	mov	r7, r3
 801cd4c:	898b      	ldrh	r3, [r1, #12]
 801cd4e:	05db      	lsls	r3, r3, #23
 801cd50:	4605      	mov	r5, r0
 801cd52:	460c      	mov	r4, r1
 801cd54:	4616      	mov	r6, r2
 801cd56:	d505      	bpl.n	801cd64 <__swrite+0x1e>
 801cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd5c:	2302      	movs	r3, #2
 801cd5e:	2200      	movs	r2, #0
 801cd60:	f000 f868 	bl	801ce34 <_lseek_r>
 801cd64:	89a3      	ldrh	r3, [r4, #12]
 801cd66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd6e:	81a3      	strh	r3, [r4, #12]
 801cd70:	4632      	mov	r2, r6
 801cd72:	463b      	mov	r3, r7
 801cd74:	4628      	mov	r0, r5
 801cd76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd7a:	f000 b817 	b.w	801cdac <_write_r>

0801cd7e <__sseek>:
 801cd7e:	b510      	push	{r4, lr}
 801cd80:	460c      	mov	r4, r1
 801cd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd86:	f000 f855 	bl	801ce34 <_lseek_r>
 801cd8a:	1c43      	adds	r3, r0, #1
 801cd8c:	89a3      	ldrh	r3, [r4, #12]
 801cd8e:	bf15      	itete	ne
 801cd90:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd9a:	81a3      	strheq	r3, [r4, #12]
 801cd9c:	bf18      	it	ne
 801cd9e:	81a3      	strhne	r3, [r4, #12]
 801cda0:	bd10      	pop	{r4, pc}

0801cda2 <__sclose>:
 801cda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cda6:	f000 b813 	b.w	801cdd0 <_close_r>
	...

0801cdac <_write_r>:
 801cdac:	b538      	push	{r3, r4, r5, lr}
 801cdae:	4d07      	ldr	r5, [pc, #28]	; (801cdcc <_write_r+0x20>)
 801cdb0:	4604      	mov	r4, r0
 801cdb2:	4608      	mov	r0, r1
 801cdb4:	4611      	mov	r1, r2
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	602a      	str	r2, [r5, #0]
 801cdba:	461a      	mov	r2, r3
 801cdbc:	f7ee f8d9 	bl	800af72 <_write>
 801cdc0:	1c43      	adds	r3, r0, #1
 801cdc2:	d102      	bne.n	801cdca <_write_r+0x1e>
 801cdc4:	682b      	ldr	r3, [r5, #0]
 801cdc6:	b103      	cbz	r3, 801cdca <_write_r+0x1e>
 801cdc8:	6023      	str	r3, [r4, #0]
 801cdca:	bd38      	pop	{r3, r4, r5, pc}
 801cdcc:	24003664 	.word	0x24003664

0801cdd0 <_close_r>:
 801cdd0:	b538      	push	{r3, r4, r5, lr}
 801cdd2:	4d06      	ldr	r5, [pc, #24]	; (801cdec <_close_r+0x1c>)
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	4608      	mov	r0, r1
 801cdda:	602b      	str	r3, [r5, #0]
 801cddc:	f7ee f8e5 	bl	800afaa <_close>
 801cde0:	1c43      	adds	r3, r0, #1
 801cde2:	d102      	bne.n	801cdea <_close_r+0x1a>
 801cde4:	682b      	ldr	r3, [r5, #0]
 801cde6:	b103      	cbz	r3, 801cdea <_close_r+0x1a>
 801cde8:	6023      	str	r3, [r4, #0]
 801cdea:	bd38      	pop	{r3, r4, r5, pc}
 801cdec:	24003664 	.word	0x24003664

0801cdf0 <_fstat_r>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	4d07      	ldr	r5, [pc, #28]	; (801ce10 <_fstat_r+0x20>)
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	4608      	mov	r0, r1
 801cdfa:	4611      	mov	r1, r2
 801cdfc:	602b      	str	r3, [r5, #0]
 801cdfe:	f7ee f8e0 	bl	800afc2 <_fstat>
 801ce02:	1c43      	adds	r3, r0, #1
 801ce04:	d102      	bne.n	801ce0c <_fstat_r+0x1c>
 801ce06:	682b      	ldr	r3, [r5, #0]
 801ce08:	b103      	cbz	r3, 801ce0c <_fstat_r+0x1c>
 801ce0a:	6023      	str	r3, [r4, #0]
 801ce0c:	bd38      	pop	{r3, r4, r5, pc}
 801ce0e:	bf00      	nop
 801ce10:	24003664 	.word	0x24003664

0801ce14 <_isatty_r>:
 801ce14:	b538      	push	{r3, r4, r5, lr}
 801ce16:	4d06      	ldr	r5, [pc, #24]	; (801ce30 <_isatty_r+0x1c>)
 801ce18:	2300      	movs	r3, #0
 801ce1a:	4604      	mov	r4, r0
 801ce1c:	4608      	mov	r0, r1
 801ce1e:	602b      	str	r3, [r5, #0]
 801ce20:	f7ee f8df 	bl	800afe2 <_isatty>
 801ce24:	1c43      	adds	r3, r0, #1
 801ce26:	d102      	bne.n	801ce2e <_isatty_r+0x1a>
 801ce28:	682b      	ldr	r3, [r5, #0]
 801ce2a:	b103      	cbz	r3, 801ce2e <_isatty_r+0x1a>
 801ce2c:	6023      	str	r3, [r4, #0]
 801ce2e:	bd38      	pop	{r3, r4, r5, pc}
 801ce30:	24003664 	.word	0x24003664

0801ce34 <_lseek_r>:
 801ce34:	b538      	push	{r3, r4, r5, lr}
 801ce36:	4d07      	ldr	r5, [pc, #28]	; (801ce54 <_lseek_r+0x20>)
 801ce38:	4604      	mov	r4, r0
 801ce3a:	4608      	mov	r0, r1
 801ce3c:	4611      	mov	r1, r2
 801ce3e:	2200      	movs	r2, #0
 801ce40:	602a      	str	r2, [r5, #0]
 801ce42:	461a      	mov	r2, r3
 801ce44:	f7ee f8d8 	bl	800aff8 <_lseek>
 801ce48:	1c43      	adds	r3, r0, #1
 801ce4a:	d102      	bne.n	801ce52 <_lseek_r+0x1e>
 801ce4c:	682b      	ldr	r3, [r5, #0]
 801ce4e:	b103      	cbz	r3, 801ce52 <_lseek_r+0x1e>
 801ce50:	6023      	str	r3, [r4, #0]
 801ce52:	bd38      	pop	{r3, r4, r5, pc}
 801ce54:	24003664 	.word	0x24003664

0801ce58 <_read_r>:
 801ce58:	b538      	push	{r3, r4, r5, lr}
 801ce5a:	4d07      	ldr	r5, [pc, #28]	; (801ce78 <_read_r+0x20>)
 801ce5c:	4604      	mov	r4, r0
 801ce5e:	4608      	mov	r0, r1
 801ce60:	4611      	mov	r1, r2
 801ce62:	2200      	movs	r2, #0
 801ce64:	602a      	str	r2, [r5, #0]
 801ce66:	461a      	mov	r2, r3
 801ce68:	f7ee f866 	bl	800af38 <_read>
 801ce6c:	1c43      	adds	r3, r0, #1
 801ce6e:	d102      	bne.n	801ce76 <_read_r+0x1e>
 801ce70:	682b      	ldr	r3, [r5, #0]
 801ce72:	b103      	cbz	r3, 801ce76 <_read_r+0x1e>
 801ce74:	6023      	str	r3, [r4, #0]
 801ce76:	bd38      	pop	{r3, r4, r5, pc}
 801ce78:	24003664 	.word	0x24003664

0801ce7c <_init>:
 801ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce7e:	bf00      	nop
 801ce80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce82:	bc08      	pop	{r3}
 801ce84:	469e      	mov	lr, r3
 801ce86:	4770      	bx	lr

0801ce88 <_fini>:
 801ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce8a:	bf00      	nop
 801ce8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce8e:	bc08      	pop	{r3}
 801ce90:	469e      	mov	lr, r3
 801ce92:	4770      	bx	lr
