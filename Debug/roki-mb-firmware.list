
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001adb0  0801ddc8  0801ddc8  0002ddc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08038b78  08038b78  00048b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08038b80  08038b80  00048b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08038b88  08038b88  00048b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08038b90  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003590  24000168  08038cf4  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240036f8  08038cf4  000536f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00051cde  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007602  00000000  00000000  000a1e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003678  00000000  00000000  000a9478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000033f8  00000000  00000000  000acaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000afee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ac76  00000000  00000000  000f53d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018e8e1  00000000  00000000  0013004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002be92d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f8e8  00000000  00000000  002be980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000168 	.word	0x24000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ddb0 	.word	0x0801ddb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400016c 	.word	0x2400016c
 80002dc:	0801ddb0 	.word	0x0801ddb0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f01c fb30 	bl	801cd08 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	0801ddc8 	.word	0x0801ddc8
 80006b8:	0801ddd4 	.word	0x0801ddd4
 80006bc:	0801de00 	.word	0x0801de00

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faab 	bl	8000c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f008 fb60 	bl	8008dbe <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f008 fb3a 	bl	8008d8e <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fa15 	bl	8008b66 <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f008 faa7 	bl	8008cb4 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f008 fab2 	bl	8008cec <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fad7 	bl	8008d56 <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 fa02 	bl	8008bce <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f008 fa27 	bl	8008c46 <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f008 fbb9 	bl	8008f8c <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f008 fa22 	bl	8008c84 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fb95 	bl	8008f8c <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f008 f986 	bl	8008b9a <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f008 faaa 	bl	8008e12 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f98b 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f991 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f007 ffe5 	bl	80088c2 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f008 faae 	bl	8008e70 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f008 f8f6 	bl	8008b24 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000e0d 	.word	0x08000e0d
 800095c:	08000d89 	.word	0x08000d89
 8000960:	08000d0d 	.word	0x08000d0d
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	0801e3ec 	.word	0x0801e3ec
 800096c:	08000a11 	.word	0x08000a11

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 f9cc 	bl	8008d22 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d01d      	beq.n	80009cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f92c 	bl	8000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f932 	bl	8000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f007 ff86 	bl	80088c2 <bhy2_get_and_process_fifo>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d005      	beq.n	80009c8 <_ZN10BHYWrapper4PollEv+0x58>
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80009c0:	2166      	movs	r1, #102	; 0x66
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80009c4:	f01c f9a0 	bl	801cd08 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	0801de1c 	.word	0x0801de1c
 80009dc:	0801de70 	.word	0x0801de70
 80009e0:	0801de00 	.word	0x0801de00

080009e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009e4:	b4b0      	push	{r4, r5, r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f6:	4615      	mov	r5, r2
 80009f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	602b      	str	r3, [r5, #0]
}
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bcb0      	pop	{r4, r5, r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8000a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a14:	b08e      	sub	sp, #56	; 0x38
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8000a26:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8000a28:	4a40      	ldr	r2, [pc, #256]	; (8000b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8000a2a:	2177      	movs	r1, #119	; 0x77
 8000a2c:	4840      	ldr	r0, [pc, #256]	; (8000b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8000a2e:	f01c f96b 	bl	801cd08 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	3308      	adds	r3, #8
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b0b      	cmp	r3, #11
 8000a42:	d167      	bne.n	8000b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f107 0214 	add.w	r2, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 fc23 	bl	800a29a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	f04f 0a00 	mov.w	sl, #0
 8000a6c:	f04f 0b00 	mov.w	fp, #0
 8000a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	465b      	mov	r3, fp
 8000a80:	ebb2 0800 	subs.w	r8, r2, r0
 8000a84:	eb63 0901 	sbc.w	r9, r3, r1
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8000aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	00eb      	lsls	r3, r5, #3
 8000aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab2:	00e2      	lsls	r2, r4, #3
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	1823      	adds	r3, r4, r0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	eb45 0301 	adc.w	r3, r5, r1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ace:	a314      	add	r3, pc, #80	; (adr r3, 8000b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	f7ff fc54 	bl	8000380 <__aeabi_uldivmod>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000ae0:	6a3a      	ldr	r2, [r7, #32]
 8000ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	1ad2      	subs	r2, r2, r3
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8000af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	80da      	strh	r2, [r3, #6]
 8000b12:	e000      	b.n	8000b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8000b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b1e:	bf00      	nop
 8000b20:	3b9aca00 	.word	0x3b9aca00
 8000b24:	00000000 	.word	0x00000000
 8000b28:	0801de88 	.word	0x0801de88
 8000b2c:	0801de90 	.word	0x0801de90
 8000b30:	0801de00 	.word	0x0801de00
 8000b34:	3b9aca00 	.word	0x3b9aca00

08000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b4e:	2190      	movs	r1, #144	; 0x90
 8000b50:	4826      	ldr	r0, [pc, #152]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b52:	f01c f8d9 	bl	801cd08 <__assert_func>
	assert(size);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8000b60:	2191      	movs	r1, #145	; 0x91
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8000b64:	f01c f8d0 	bl	801cd08 <__assert_func>

	uint8_t *ptr = dest;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	7c1a      	ldrb	r2, [r3, #16]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2211      	movs	r2, #17
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0801dedc 	.word	0x0801dedc
 8000be8:	0801dee4 	.word	0x0801dee4
 8000bec:	0801de00 	.word	0x0801de00
 8000bf0:	0801df20 	.word	0x0801df20

08000bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f811 	bl	8000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24000184 	.word	0x24000184

08000c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f013 fc1d 	bl	80144b0 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f014 faa6 	bl	80151cc <HAL_SPI_GetState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d000      	beq.n	8000c92 <_Z11spiTransmitPht+0x36>
 8000c90:	e7f1      	b.n	8000c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_Z11spiTransmitPht+0x54>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25b      	sxtb	r3, r3
  }
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000184 	.word	0x24000184

08000cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f013 fd3b 	bl	8014744 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f014 fa7a 	bl	80151cc <HAL_SPI_GetState>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d000      	beq.n	8000cea <_Z9spiReceivPht+0x36>
 8000ce8:	e7f1      	b.n	8000cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_Z9spiReceivPht+0x54>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b25b      	sxtb	r3, r3
  }
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000184 	.word	0x24000184

08000d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4603      	mov	r3, r0
 8000d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000d24:	f107 030f 	add.w	r3, r7, #15
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff96 	bl	8000c5c <_Z11spiTransmitPht>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8000d40:	f06f 0301 	mvn.w	r3, #1
 8000d44:	e019      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff ffb1 	bl	8000cb4 <_Z9spiReceivPht>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d005      	beq.n	8000d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e005      	b.n	8000d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000d76:	f06f 0301 	mvn.w	r3, #1
  }
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58021000 	.word	0x58021000

08000d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b40      	cmp	r3, #64	; 0x40
 8000d9c:	d902      	bls.n	8000da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000d9e:	f06f 0303 	mvn.w	r3, #3
 8000da2:	e028      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f01c f813 	bl	801cddc <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000dca:	f7ff ff47 	bl	8000c5c <_Z11spiTransmitPht>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e005      	b.n	8000df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000188 	.word	0x24000188
 8000e04:	24000189 	.word	0x24000189
 8000e08:	58021000 	.word	0x58021000

08000e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1c:	d308      	bcc.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <_Z13bhy2_delay_usmPv+0x44>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00a ff3d 	bl	800bca8 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000e2e:	e00b      	b.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000e44:	bf00      	nop
    while( us-- ) {
 8000e46:	e7f3      	b.n	8000e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	10624dd3 	.word	0x10624dd3

08000e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e90:	d205      	bcs.n	8000e9e <_ZSt16__deque_buf_sizej+0x1c>
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	e000      	b.n	8000ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 f9d4 	bl	8002264 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fa40 	bl	8002356 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fa69 	bl	80023c0 <_ZNSaIhED1Ev>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fa4c 	bl	80023a0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffeb 	bl	8000ef8 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:

	size_t TimeoutS;

	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffb6 	bl	8000eac <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3328      	adds	r3, #40	; 0x28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f9f2 	bl	800232e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3354      	adds	r3, #84	; 0x54
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffdb 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	665a      	str	r2, [r3, #100]	; 0x64
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	669a      	str	r2, [r3, #104]	; 0x68
		assert(uart != NULL);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x4e>
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x58>)
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x5c>)
 8000f72:	214a      	movs	r1, #74	; 0x4a
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>)
 8000f76:	f01b fec7 	bl	801cd08 <__assert_func>
	}
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0801df28 	.word	0x0801df28
 8000f88:	0801df38 	.word	0x0801df38
 8000f8c:	0801df70 	.word	0x0801df70

08000f90 <_ZN11QueueSender14GetMessageModeERK7Request>:

	MessageModeT GetMessageMode(const Request &request) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
		return request.MetaInfo;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
	}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZN11QueueSender14SetMessageModeER8Responceh>:

	void SetMessageMode(Responce &responce, MessageModeT mode) {
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71fb      	strb	r3, [r7, #7]
		responce.MetaInfo = mode;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	735a      	strb	r2, [r3, #13]
	}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8000fca:	b590      	push	{r4, r7, lr}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
		switch (GetMessageMode(request)) {
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffda 	bl	8000f90 <_ZN11QueueSender14GetMessageModeERK7Request>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	dc02      	bgt.n	8000fe8 <_ZN11QueueSender10AddRequestEO7Request+0x1e>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da03      	bge.n	8000fee <_ZN11QueueSender10AddRequestEO7Request+0x24>
			break;
		case MessageMode::Priority:
			Requests.emplace_front(std::move(request));
			break;
		}
	}
 8000fe6:	e016      	b.n	8001016 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
		switch (GetMessageMode(request)) {
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d00a      	beq.n	8001002 <_ZN11QueueSender10AddRequestEO7Request+0x38>
	}
 8000fec:	e013      	b.n	8001016 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_back(std::move(request));
 8000fee:	687c      	ldr	r4, [r7, #4]
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f001 fa24 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f001 fa2a 	bl	8002454 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8001000:	e009      	b.n	8001016 <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_front(std::move(request));
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f001 fa1a 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	4620      	mov	r0, r4
 8001010:	f001 fa4b 	bl	80024aa <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
			break;
 8001014:	bf00      	nop
	}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}

0800101e <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3328      	adds	r3, #40	; 0x28
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fa69 	bl	8002502 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 8001030:	4603      	mov	r3, r0
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
	}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fa7b 	bl	800254c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffe5 	bl	8001040 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN8ResponceC1EOS_>:
struct Responce {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ffe5 	bl	8001060 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7b1a      	ldrb	r2, [r3, #12]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	731a      	strb	r2, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	7b5a      	ldrb	r2, [r3, #13]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	735a      	strb	r2, [r3, #13]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7b9a      	ldrb	r2, [r3, #14]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	739a      	strb	r2, [r3, #14]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN8ResponceD1Ev>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f9a0 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 80010de:	6838      	ldr	r0, [r7, #0]
 80010e0:	f7ff ff9d 	bl	800101e <_ZNK11QueueSender11HasResponceEv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d105      	bne.n	80010f6 <_ZN11QueueSender11GetResponceEv+0x22>
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <_ZN11QueueSender11GetResponceEv+0x54>)
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <_ZN11QueueSender11GetResponceEv+0x58>)
 80010ee:	2167      	movs	r1, #103	; 0x67
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <_ZN11QueueSender11GetResponceEv+0x5c>)
 80010f2:	f01b fe09 	bl	801cd08 <__assert_func>
		auto responce = std::move(Responces.front());
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3328      	adds	r3, #40	; 0x28
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fa0e 	bl	800251c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fa17 	bl	8002536 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffb7 	bl	8001080 <_ZN8ResponceC1EOS_>
		Responces.pop();
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3328      	adds	r3, #40	; 0x28
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fa33 	bl	8002582 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 800111c:	bf00      	nop
	}
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	0801df8c 	.word	0x0801df8c
 800112c:	0801df9c 	.word	0x0801df9c
 8001130:	0801df70 	.word	0x0801df70

08001134 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
		if (!Requests.empty() && !WaitResponce) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fa2b 	bl	800259a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8001144:	4603      	mov	r3, r0
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <_ZN11QueueSender15ProcessRequestsEv+0x30>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <_ZN11QueueSender15ProcessRequestsEv+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d078      	beq.n	800125c <_ZN11QueueSender15ProcessRequestsEv+0x128>
			auto &request = Requests.front();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fa26 	bl	80025be <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8001172:	62f8      	str	r0, [r7, #44]	; 0x2c
			auto &data = request.Data;
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28

			if (GetMessageMode(request) == MessageMode::Notify) {
 8001178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff08 	bl	8000f90 <_ZN11QueueSender14GetMessageModeERK7Request>
 8001180:	4603      	mov	r3, r0
 8001182:	2b02      	cmp	r3, #2
 8001184:	bf0c      	ite	eq
 8001186:	2301      	moveq	r3, #1
 8001188:	2300      	movne	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d026      	beq.n	80011de <_ZN11QueueSender15ProcessRequestsEv+0xaa>
				Responces.emplace(CreateResponce( { }, MessageMode::Notify));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff feb3 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 80011ac:	f107 000c 	add.w	r0, r7, #12
 80011b0:	f107 021c 	add.w	r2, r7, #28
 80011b4:	2302      	movs	r3, #2
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f000 f860 	bl	800127c <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4620      	mov	r0, r4
 80011c4:	f001 fa0f 	bl	80025e6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff73 	bl	80010b8 <_ZN8ResponceD1Ev>
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f916 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
				return;
 80011dc:	e03e      	b.n	800125c <_ZN11QueueSender15ProcessRequestsEv+0x128>
			}

			CurrentResponceBuffer.resize(request.ResponceSize);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4610      	mov	r0, r2
 80011ec:	f001 fa0d 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentRequestMode = GetMessageMode(request);
 80011f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fecc 	bl	8000f90 <_ZN11QueueSender14GetMessageModeERK7Request>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			WaitResponce = true;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3354      	adds	r3, #84	; 0x54
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fa2d 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001218:	4605      	mov	r5, r0
					CurrentResponceBuffer.size());
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3354      	adds	r3, #84	; 0x54
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fa36 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001224:	4603      	mov	r3, r0
			HAL_UART_Receive_IT(UartHandle, CurrentResponceBuffer.data(),
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4629      	mov	r1, r5
 800122c:	4620      	mov	r0, r4
 800122e:	f014 ffe7 	bl	8016200 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(UartHandle, data.data(), data.size(), TimeoutS);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8001236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001238:	f001 fa1b 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 800123c:	4605      	mov	r5, r0
 800123e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001240:	f001 fa26 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800124c:	4629      	mov	r1, r5
 800124e:	4620      	mov	r0, r4
 8001250:	f014 fe98 	bl	8015f84 <HAL_UART_Transmit>

			Requests.pop_front();
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fa29 	bl	80026ae <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
		}
	}
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}

08001262 <_ZN8ResponceC1Ev>:
struct Responce {
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe50 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN11QueueSender14CreateResponceERKSt6vectorIhSaIhEEh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	70fb      	strb	r3, [r7, #3]
			MessageModeT messageMode) {
		Responce responce;
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ffe9 	bl	8001262 <_ZN8ResponceC1Ev>
		responce.Data = data;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fa36 	bl	8002706 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	731a      	strb	r2, [r3, #12]
		responce.Error = 0;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	739a      	strb	r2, [r3, #14]
		SetMessageMode(responce, messageMode);
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	461a      	mov	r2, r3
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f7ff fe7c 	bl	8000faa <_ZN11QueueSender14SetMessageModeER8Responceh>
		return responce;
 80012b2:	bf00      	nop
	}
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 ffff 	bl	80022ca <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN7RequestC1Ev>:
struct Request {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe16 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN7RequestD1Ev>:
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 f884 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fae2 	bl	80028e4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3334      	adds	r3, #52	; 0x34
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffd6 	bl	80012d6 <_ZN7RequestC1Ev>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3348      	adds	r3, #72	; 0x48
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fdef 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	659a      	str	r2, [r3, #88]	; 0x58
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4e>
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x58>)
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8001352:	21b3      	movs	r1, #179	; 0xb3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 8001356:	f01b fcd7 	bl	801cd08 <__assert_func>
	}
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0801df28 	.word	0x0801df28
 8001368:	0801dfc0 	.word	0x0801dfc0
 800136c:	0801df70 	.word	0x0801df70

08001370 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3328      	adds	r3, #40	; 0x28
 8001386:	2201      	movs	r2, #1
 8001388:	4619      	mov	r1, r3
 800138a:	f014 ff39 	bl	8016200 <HAL_UART_Receive_IT>
	}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fab3 	bl	800290c <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
	}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b097      	sub	sp, #92	; 0x5c
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <_ZN13HeadInterface4SendERK8Responce+0x16>
 80013ca:	e7f9      	b.n	80013c0 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 f95e 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	3306      	adds	r3, #6
 80013d8:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3348      	adds	r3, #72	; 0x48
 80013de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f912 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3348      	adds	r3, #72	; 0x48
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 f941 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 80013f0:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 80013f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	653a      	str	r2, [r7, #80]	; 0x50
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 80013fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	653a      	str	r2, [r7, #80]	; 0x50
 8001402:	22aa      	movs	r2, #170	; 0xaa
 8001404:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8001406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	653a      	str	r2, [r7, #80]	; 0x50
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	7b12      	ldrb	r2, [r2, #12]
 8001410:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8001412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	653a      	str	r2, [r7, #80]	; 0x50
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	7b52      	ldrb	r2, [r2, #13]
 800141c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 800141e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	653a      	str	r2, [r7, #80]	; 0x50
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	7b92      	ldrb	r2, [r2, #14]
 8001428:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fa7a 	bl	8002926 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001432:	4604      	mov	r4, r0
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f92a 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4621      	mov	r1, r4
 8001442:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001444:	f01b fcca 	bl	801cddc <memcpy>

		ptr += responce.Data.size();
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f920 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001450:	4602      	mov	r2, r0
 8001452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001454:	4413      	add	r3, r2
 8001456:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8001458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145a:	22af      	movs	r2, #175	; 0xaf
 800145c:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	4618      	mov	r0, r3
 800146c:	f001 f910 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001470:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3348      	adds	r3, #72	; 0x48
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f8fb 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 800147c:	4601      	mov	r1, r0
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001484:	4618      	mov	r0, r3
 8001486:	f01b fca9 	bl	801cddc <memcpy>

		HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(), sz);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3348      	adds	r3, #72	; 0x48
 8001492:	4618      	mov	r0, r3
 8001494:	f001 f8ed 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001498:	4601      	mov	r1, r0
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	4620      	mov	r0, r4
 80014a2:	f014 fe05 	bl	80160b0 <HAL_UART_Transmit_IT>
	}
 80014a6:	bf00      	nop
 80014a8:	375c      	adds	r7, #92	; 0x5c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}

080014ae <_ZN7RequestC1EOS_>:
struct Request {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fdce 	bl	8001060 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7c1a      	ldrb	r2, [r3, #16]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	741a      	strb	r2, [r3, #16]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	7c5a      	ldrb	r2, [r3, #17]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	745a      	strb	r2, [r3, #17]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	f7ff ff4f 	bl	8001396 <_ZNK13HeadInterface10HasRequestEv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <_ZN13HeadInterface10GetRequestEv+0x22>
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <_ZN13HeadInterface10GetRequestEv+0x54>)
 8001502:	21e2      	movs	r1, #226	; 0xe2
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8001506:	f01b fbff 	bl	801cd08 <__assert_func>
		auto request = std::move(Requests.front());
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fa19 	bl	8002944 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f000 ff92 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffc5 	bl	80014ae <_ZN7RequestC1EOS_>
		Requests.pop();
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fa19 	bl	800295e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 800152c:	bf00      	nop
	}
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	0801dffc 	.word	0x0801dffc
 800153c:	0801e00c 	.word	0x0801e00c
 8001540:	0801df70 	.word	0x0801df70

08001544 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8001564:	2301      	movs	r3, #1
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZN7RequestaSEOS_>:
struct Request {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fa0a 	bl	800299a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7c1a      	ldrb	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	741a      	strb	r2, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7c5a      	ldrb	r2, [r3, #17]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	745a      	strb	r2, [r3, #17]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	f200 80d6 	bhi.w	8001766 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015e1 	.word	0x080015e1
 80015c4:	0800160b 	.word	0x0800160b
 80015c8:	08001635 	.word	0x08001635
 80015cc:	08001659 	.word	0x08001659
 80015d0:	0800168f 	.word	0x0800168f
 80015d4:	080016b3 	.word	0x080016b3
 80015d8:	080016e5 	.word	0x080016e5
 80015dc:	080016fd 	.word	0x080016fd
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d10b      	bne.n	8001602 <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3328      	adds	r3, #40	; 0x28
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f014 fe00 	bl	8016200 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8001600:	e0b5      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff feb4 	bl	8001370 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001608:	e0b1      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001610:	2baa      	cmp	r3, #170	; 0xaa
 8001612:	d10b      	bne.n	800162c <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3328      	adds	r3, #40	; 0x28
 8001622:	2201      	movs	r2, #1
 8001624:	4619      	mov	r1, r3
 8001626:	f014 fdeb 	bl	8016200 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 800162a:	e0a0      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe9f 	bl	8001370 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001632:	e09c      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3328      	adds	r3, #40	; 0x28
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f014 fdd5 	bl	8016200 <HAL_UART_Receive_IT>
			break;
 8001656:	e08a      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f000 ffca 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2204      	movs	r2, #4
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3328      	adds	r3, #40	; 0x28
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	f014 fdba 	bl	8016200 <HAL_UART_Receive_IT>
			break;
 800168c:	e06f      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3328      	adds	r3, #40	; 0x28
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	f014 fda8 	bl	8016200 <HAL_UART_Receive_IT>
			break;
 80016b0:	e05d      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2206      	movs	r2, #6
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3334      	adds	r3, #52	; 0x34
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 ffd0 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 80016d2:	4601      	mov	r1, r0
					RequestSize);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f014 fd8f 	bl	8016200 <HAL_UART_Receive_IT>
			break;
 80016e2:	e044      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2207      	movs	r2, #7
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3328      	adds	r3, #40	; 0x28
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f014 fd83 	bl	8016200 <HAL_UART_Receive_IT>
			break;
 80016fa:	e038      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001702:	2baf      	cmp	r3, #175	; 0xaf
 8001704:	d12b      	bne.n	800175e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.push(std::move(CurrentRequest));
 8001706:	687c      	ldr	r4, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3334      	adds	r3, #52	; 0x34
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fe96 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4620      	mov	r0, r4
 8001718:	f001 f92d 	bl	8002976 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>
				CurrentRequest = { };
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fbe5 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4619      	mov	r1, r3
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ff0e 	bl	8001570 <_ZN7RequestaSEOS_>
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fdc9 	bl	80012f0 <_ZN7RequestD1Ev>
			}
			ResetReadState();
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe06 	bl	8001370 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8001764:	e003      	b.n	800176e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe02 	bl	8001370 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop

08001778 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>:
};

struct IMUFrame: public BHYWrapper::BHYFrame {
	size_t Seq;

	IMUFrame(const BHYWrapper::BHYFrame &frame, size_t seq) :
 8001778:	b4b0      	push	{r4, r5, r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
			BHYFrame { frame }, Seq { seq } {
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	6023      	str	r3, [r4, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	615a      	str	r2, [r3, #20]
	}
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bcb0      	pop	{r4, r5, r7}
 80017a4:	4770      	bx	lr

080017a6 <_ZN17IMUFrameContainer5ResetEv>:

		static constexpr size_t Size = 2 * sizeof(uint16_t);
	};

public:
	void Reset() {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80017c0:	f001 f900 	bl	80029c4 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>
		FirstSeq = 0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
	}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 80017d2:	b590      	push	{r4, r7, lr}
 80017d4:	b089      	sub	sp, #36	; 0x24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front( { frame, TestSeq++ });
 80017dc:	687c      	ldr	r4, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	1c59      	adds	r1, r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80017e8:	f107 0008 	add.w	r0, r7, #8
 80017ec:	461a      	mov	r2, r3
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	f7ff ffc2 	bl	8001778 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4619      	mov	r1, r3
 80017fa:	4620      	mov	r0, r4
 80017fc:	f001 f8fd 	bl	80029fa <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>
	}
 8001800:	bf00      	nop
 8001802:	3724      	adds	r7, #36	; 0x24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		FirstSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f900 	bl	8002a1c <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8001822:	2300      	movs	r3, #0
 8001824:	e03a      	b.n	800189c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d30b      	bcc.n	8001848 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	f001 f904 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	4413      	add	r3, r2
 8001840:	3b01      	subs	r3, #1
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	d901      	bls.n	800184c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 800184c:	2300      	movs	r3, #0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8001852:	2300      	movs	r3, #0
 8001854:	e022      	b.n	800189c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8001856:	68fc      	ldr	r4, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 f8f0 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8001860:	4601      	mov	r1, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	440b      	add	r3, r1
 800186c:	3b01      	subs	r3, #1
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f001 f8f7 	bl	8002a64 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 8001876:	4603      	mov	r3, r0
 8001878:	f107 0410 	add.w	r4, r7, #16
 800187c:	461d      	mov	r5, r3
 800187e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001882:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001886:	e884 0003 	stmia.w	r4, {r0, r1}
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	461d      	mov	r5, r3
 800188e:	f107 0410 	add.w	r4, r7, #16
 8001892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	602b      	str	r3, [r5, #0]
		return true;
 800189a:	2301      	movs	r3, #1
	}
 800189c:	4618      	mov	r0, r3
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}

080018a4 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
		return {FirstSeq, FrameQueue.size()};
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	81bb      	strh	r3, [r7, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 f8c2 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29b      	uxth	r3, r3
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	2300      	movs	r3, #0
 80018c4:	89ba      	ldrh	r2, [r7, #12]
 80018c6:	f362 030f 	bfi	r3, r2, #0, #16
 80018ca:	89fa      	ldrh	r2, [r7, #14]
 80018cc:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
			return mode;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
		}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
			return meta;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
		}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ffe8 	bl	80018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8001928:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 800192a:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800192e:	482c      	ldr	r0, [pc, #176]	; (80019e0 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8001930:	f01b f9ea 	bl	801cd08 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fc94 	bl	8001262 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffc9 	bl	80018d8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2111      	movs	r1, #17
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fe59 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fe98 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001960:	4603      	mov	r3, r0
 8001962:	2b02      	cmp	r3, #2
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2203      	movs	r2, #3
 8001974:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 ffd4 	bl	8002926 <_ZNKSt6vectorIhSaIhEE4dataEv>
 800197e:	4603      	mov	r3, r0
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001986:	f107 0218 	add.w	r2, r7, #24
 800198a:	4619      	mov	r1, r3
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f7ff ff3b 	bl	8001808 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8001998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	739a      	strb	r2, [r3, #14]
			return responce;
 80019ac:	e00f      	b.n	80019ce <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fe5e 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 80019b6:	4601      	mov	r1, r0
 80019b8:	f107 0217 	add.w	r2, r7, #23
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f8b9 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	739a      	strb	r2, [r3, #14]

		return responce;
 80019cc:	bf00      	nop
	}
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0801e030 	.word	0x0801e030
 80019dc:	0801e078 	.word	0x0801e078
 80019e0:	0801df70 	.word	0x0801df70

080019e4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7c1b      	ldrb	r3, [r3, #16]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff7a 	bl	80018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d006      	beq.n	8001a10 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8001a06:	f240 11a5 	movw	r1, #421	; 0x1a5
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb4>)
 8001a0c:	f01b f97c 	bl	801cd08 <__assert_func>

		Responce responce;
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff fc26 	bl	8001262 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff ff5b 	bl	80018d8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fdeb 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fe2a 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fe0c 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001a5a:	6178      	str	r0, [r7, #20]
		auto info = container.GetInfo();
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7ff ff21 	bl	80018a4 <_ZNK17IMUFrameContainer7GetInfoEv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]

		*reinterpret_cast<uint16_t*>(ptr) = info.First;
 8001a66:	8a3a      	ldrh	r2, [r7, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	617b      	str	r3, [r7, #20]

		*reinterpret_cast<uint16_t*>(ptr) = info.NumAv;
 8001a72:	8a7a      	ldrh	r2, [r7, #18]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	801a      	strh	r2, [r3, #0]
		ptr += sizeof(uint16_t);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	617b      	str	r3, [r7, #20]

		responce.Error = ErrorCodes::Success;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	739a      	strb	r2, [r3, #14]

		return responce;
 8001a84:	bf00      	nop
	}
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0801e0cc 	.word	0x0801e0cc
 8001a94:	0801e10c 	.word	0x0801e10c
 8001a98:	0801df70 	.word	0x0801df70

08001a9c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request,
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7c1b      	ldrb	r3, [r3, #16]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff1e 	bl	80018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d006      	beq.n	8001ac8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 8001abe:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001ac2:	4821      	ldr	r0, [pc, #132]	; (8001b48 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8001ac4:	f01b f920 	bl	801cd08 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fbca 	bl	8001262 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7ff feff 	bl	80018d8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2111      	movs	r1, #17
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fd8f 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fdce 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2203      	movs	r2, #3
 8001b08:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe ff67 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fdaa 	bl	8002672 <_ZNSt6vectorIhSaIhEE4dataEv>
 8001b1e:	4601      	mov	r1, r0
 8001b20:	f107 0213 	add.w	r2, r7, #19
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f805 	bl	8000b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	739a      	strb	r2, [r3, #14]

		return responce;
 8001b34:	bf00      	nop
	}
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	0801e15c 	.word	0x0801e15c
 8001b44:	0801e1a4 	.word	0x0801e1a4
 8001b48:	0801df70 	.word	0x0801df70

08001b4c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request,
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
			IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Reset);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7c1b      	ldrb	r3, [r3, #16]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fec6 	bl	80018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d006      	beq.n	8001b78 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 8001b6e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001b72:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8001b74:	f01b f8c8 	bl	801cd08 <__assert_func>

		Responce responce;
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fb72 	bl	8001262 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f7ff fea7 	bl	80018d8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fd37 	bl	800260a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fd76 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f7ff fdf3 	bl	80017a6 <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	739a      	strb	r2, [r3, #14]

		return responce;
 8001bc6:	bf00      	nop
	}
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	0801e1f4 	.word	0x0801e1f4
 8001bd4:	0801e238 	.word	0x0801e238
 8001bd8:	0801df70 	.word	0x0801df70

08001bdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request,
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
				IMUFrameContainer &container, const BHYWrapper& IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7c5b      	ldrb	r3, [r3, #17]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d006      	beq.n	8001c00 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001bf6:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001bfa:	4821      	ldr	r0, [pc, #132]	; (8001c80 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001bfc:	f01b f884 	bl	801cd08 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7c1b      	ldrb	r3, [r3, #16]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe73 	bl	80018f0 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d827      	bhi.n	8001c60 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c37 	.word	0x08001c37
 8001c20:	08001c45 	.word	0x08001c45
 8001c24:	08001c53 	.word	0x08001c53
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	f7ff fe6a 	bl	8001908 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8001c34:	e01b      	b.n	8001c6e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	f7ff fed1 	bl	80019e4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8001c42:	e014      	b.n	8001c6e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	f7ff ff26 	bl	8001a9c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8001c50:	e00d      	b.n	8001c6e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
					return DoReset(request, container);
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	f7ff ff77 	bl	8001b4c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 8001c5e:	e006      	b.n	8001c6e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default: assert(0 && "Unknown Mode");
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8001c64:	f240 11f7 	movw	r1, #503	; 0x1f7
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 8001c6a:	f01b f84d 	bl	801cd08 <__assert_func>
		}
	}
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0801e280 	.word	0x0801e280
 8001c7c:	0801e2a8 	.word	0x0801e2a8
 8001c80:	0801df70 	.word	0x0801df70
 8001c84:	0801e304 	.word	0x0801e304

08001c88 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3348      	adds	r3, #72	; 0x48
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fbb7 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3334      	adds	r3, #52	; 0x34
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fb26 	bl	80012f0 <_ZN7RequestD1Ev>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb08 	bl	80012bc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3354      	adds	r3, #84	; 0x54
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fba0 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3328      	adds	r3, #40	; 0x28
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f8fa 	bl	8000ec6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 faf8 	bl	80022ca <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fed5 	bl	8002a9e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffeb 	bl	8001ce4 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN17IMUFrameContainerD1Ev>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fee8 	bl	8002b04 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8001d3e:	b084      	sub	sp, #16
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	f107 0014 	add.w	r0, r7, #20
 8001d4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		Head{conf.HeadUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fad8 	bl	800130c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3360      	adds	r3, #96	; 0x60
 8001d60:	69f9      	ldr	r1, [r7, #28]
 8001d62:	6a3a      	ldr	r2, [r7, #32]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8e1 	bl	8000f2c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	33cc      	adds	r3, #204	; 0xcc
 8001d6e:	2230      	movs	r2, #48	; 0x30
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f01b f85a 	bl	801ce2c <memset>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	33cc      	adds	r3, #204	; 0xcc
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ffbe 	bl	8001cfe <_ZN17IMUFrameContainerC1Ev>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fc79 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001daa:	b004      	add	sp, #16
 8001dac:	4770      	bx	lr

08001dae <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fd93 	bl	80028e4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3334      	adds	r3, #52	; 0x34
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa87 	bl	80012d6 <_ZN7RequestC1Ev>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3348      	adds	r3, #72	; 0x48
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f8a0 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f85c 	bl	8000eac <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3328      	adds	r3, #40	; 0x28
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fa98 	bl	800232e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3354      	adds	r3, #84	; 0x54
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f881 	bl	8000f12 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ffc2 	bl	8001dae <_ZN13HeadInterfaceC1Ev>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3360      	adds	r3, #96	; 0x60
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ffd8 	bl	8001de4 <_ZN11QueueSenderC1Ev>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	33cc      	adds	r3, #204	; 0xcc
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff60 	bl	8001cfe <_ZN17IMUFrameContainerC1Ev>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	33cc      	adds	r3, #204	; 0xcc
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5f 	bl	8001d24 <_ZN17IMUFrameContainerD1Ev>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff23 	bl	8001cb6 <_ZN11QueueSenderD1Ev>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff08 	bl	8001c88 <_ZN13HeadInterfaceD1Ev>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe5b 	bl	8002b4e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ffe5 	bl	8001e82 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3334      	adds	r3, #52	; 0x34
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f7ff fb45 	bl	8001570 <_ZN7RequestaSEOS_>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3348      	adds	r3, #72	; 0x48
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 fd51 	bl	800299a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fe20 	bl	8002b74 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fdfd 	bl	8002b4e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3328      	adds	r3, #40	; 0x28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7ff ffdc 	bl	8001f1e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3354      	adds	r3, #84	; 0x54
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f000 fd0b 	bl	800299a <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	665a      	str	r2, [r3, #100]	; 0x64
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	669a      	str	r2, [r3, #104]	; 0x68
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fded 	bl	8002b9a <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZN18MotherboardContextaSEOS_>:
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff59 	bl	8001ea2 <_ZN13HeadInterfaceaSEOS_>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3360      	adds	r3, #96	; 0x60
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7ff ff9e 	bl	8001f3e <_ZN11QueueSenderaSEOS_>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	33cc      	adds	r3, #204	; 0xcc
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f7ff ffcb 	bl	8001faa <_ZN17IMUFrameContaineraSEOS_>
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f502 7080 	add.w	r0, r2, #256	; 0x100
 800201c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002020:	f241 1250 	movw	r2, #4432	; 0x1150
 8002024:	4619      	mov	r1, r3
 8002026:	f01a fed9 	bl	801cddc <memcpy>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002030:	f893 2251 	ldrb.w	r2, [r3, #593]	; 0x251
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8002048:	b084      	sub	sp, #16
 800204a:	b590      	push	{r4, r7, lr}
 800204c:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 8002050:	b081      	sub	sp, #4
 8002052:	af02      	add	r7, sp, #8
 8002054:	f241 2468 	movw	r4, #4712	; 0x1268
 8002058:	443c      	add	r4, r7
 800205a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 800205e:	4c1d      	ldr	r4, [pc, #116]	; (80020d4 <MotherboardInit+0x8c>)
 8002060:	f241 2358 	movw	r3, #4696	; 0x1258
 8002064:	4423      	add	r3, r4
 8002066:	19dc      	adds	r4, r3, r7
 8002068:	466a      	mov	r2, sp
 800206a:	f241 2374 	movw	r3, #4724	; 0x1274
 800206e:	443b      	add	r3, r7
 8002070:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002074:	e882 0003 	stmia.w	r2, {r0, r1}
 8002078:	f241 2368 	movw	r3, #4712	; 0x1268
 800207c:	443b      	add	r3, r7
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fe5c 	bl	8001d3e <_ZN18MotherboardContextC1E17MotherboardConfig>
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <MotherboardInit+0x8c>)
 8002088:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800208c:	f103 0318 	add.w	r3, r3, #24
 8002090:	443b      	add	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4810      	ldr	r0, [pc, #64]	; (80020d8 <MotherboardInit+0x90>)
 8002096:	f7ff ffa0 	bl	8001fda <_ZN18MotherboardContextaSEOS_>
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MotherboardInit+0x8c>)
 800209c:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80020a0:	f103 0318 	add.w	r3, r3, #24
 80020a4:	443b      	add	r3, r7
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fed4 	bl	8001e54 <_ZN18MotherboardContextD1Ev>

	mbctx.Head.ResetReadState();
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <MotherboardInit+0x90>)
 80020ae:	f7ff f95f 	bl	8001370 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80020b2:	2100      	movs	r1, #0
 80020b4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80020dc <MotherboardInit+0x94>
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <MotherboardInit+0x98>)
 80020ba:	f7fe fb01 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 80020be:	4603      	mov	r3, r0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	f507 5792 	add.w	r7, r7, #4672	; 0x1240
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020ce:	b004      	add	sp, #16
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	ffffeda8 	.word	0xffffeda8
 80020d8:	240001d0 	.word	0x240001d0
 80020dc:	44480000 	.word	0x44480000
 80020e0:	240002d0 	.word	0x240002d0

080020e4 <MotherboardTick>:

int MotherboardTick() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b090      	sub	sp, #64	; 0x40
 80020e8:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <MotherboardTick+0xcc>)
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 80020f8:	482e      	ldr	r0, [pc, #184]	; (80021b4 <MotherboardTick+0xd0>)
 80020fa:	f7fe fc39 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 80020fe:	4603      	mov	r3, r0
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <MotherboardTick+0xcc>)
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251

	if (mbctx.Head.HasRequest()) {
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <MotherboardTick+0xcc>)
 8002112:	f7ff f940 	bl	8001396 <_ZNK13HeadInterface10HasRequestEv>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02d      	beq.n	8002178 <MotherboardTick+0x94>
		auto request = mbctx.Head.GetRequest();
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4924      	ldr	r1, [pc, #144]	; (80021b0 <MotherboardTick+0xcc>)
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f9e1 	bl	80014e8 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8002126:	7d7b      	ldrb	r3, [r7, #21]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <MotherboardTick+0x4e>
 800212c:	2b01      	cmp	r3, #1
 800212e:	d00a      	beq.n	8002146 <MotherboardTick+0x62>
 8002130:	e01e      	b.n	8002170 <MotherboardTick+0x8c>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f982 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 800213a:	4603      	mov	r3, r0
 800213c:	4619      	mov	r1, r3
 800213e:	481e      	ldr	r0, [pc, #120]	; (80021b8 <MotherboardTick+0xd4>)
 8002140:	f7fe ff43 	bl	8000fca <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8002144:	e014      	b.n	8002170 <MotherboardTick+0x8c>
		case Periphery::Imu:
			mbctx.Head.Send(
					mbctx.IMUHandler.Handle(request,
 8002146:	f107 0018 	add.w	r0, r7, #24
 800214a:	1d3a      	adds	r2, r7, #4
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MotherboardTick+0xd0>)
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MotherboardTick+0xd8>)
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <MotherboardTick+0xdc>)
 8002154:	f7ff fd42 	bl	8001bdc <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.Head.Send(
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	4619      	mov	r1, r3
 800215e:	4814      	ldr	r0, [pc, #80]	; (80021b0 <MotherboardTick+0xcc>)
 8002160:	f7ff f929 	bl	80013b6 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe ffa5 	bl	80010b8 <_ZN8ResponceD1Ev>
							mbctx.FrameContainer, mbctx.IMU));
			break;
 800216e:	bf00      	nop
		auto request = mbctx.Head.GetRequest();
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f8bc 	bl	80012f0 <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <MotherboardTick+0xd4>)
 800217a:	f7fe ff50 	bl	800101e <_ZNK11QueueSender11HasResponceEv>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <MotherboardTick+0xc2>
		mbctx.Head.Send(mbctx.Body.GetResponce());
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	490b      	ldr	r1, [pc, #44]	; (80021b8 <MotherboardTick+0xd4>)
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe ffa2 	bl	80010d4 <_ZN11QueueSender11GetResponceEv>
 8002190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002194:	4619      	mov	r1, r3
 8002196:	4806      	ldr	r0, [pc, #24]	; (80021b0 <MotherboardTick+0xcc>)
 8002198:	f7ff f90d 	bl	80013b6 <_ZN13HeadInterface4SendERK8Responce>
 800219c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff89 	bl	80010b8 <_ZN8ResponceD1Ev>
	}

	return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3738      	adds	r7, #56	; 0x38
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	240001d0 	.word	0x240001d0
 80021b4:	240002d0 	.word	0x240002d0
 80021b8:	24000230 	.word	0x24000230
 80021bc:	2400029c 	.word	0x2400029c
 80021c0:	24001420 	.word	0x24001420

080021c4 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4906      	ldr	r1, [pc, #24]	; (80021e8 <MotherboardOnStrobe+0x24>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fc08 	bl	80009e4 <_ZNK10BHYWrapper8GetFrameEv>
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MotherboardOnStrobe+0x28>)
 80021da:	f7ff fafa 	bl	80017d2 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	240002d0 	.word	0x240002d0
 80021ec:	2400029c 	.word	0x2400029c

080021f0 <MotherboardOnHeadRecieveComplete>:

void MotherboardOnBodyTransmitComplete() {
	mbctx.Body.ProcessResponces();
}

void MotherboardOnHeadRecieveComplete() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	mbctx.Head.ProcessRecievedData();
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <MotherboardOnHeadRecieveComplete+0x10>)
 80021f6:	f7ff f9d7 	bl	80015a8 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	240001d0 	.word	0x240001d0

08002204 <MotherboardOnHeadTransmitComplete>:

void MotherboardOnHeadTransmitComplete() {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	mbctx.Head.FinishTransmit();
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <MotherboardOnHeadTransmitComplete+0x10>)
 800220a:	f7ff f99b 	bl	8001544 <_ZN13HeadInterface14FinishTransmitEv>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	240001d0 	.word	0x240001d0

08002218 <MotherboardOnBodyTimerTick>:

void MotherboardOnBodyTimerTick() {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessRequests();
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <MotherboardOnBodyTimerTick+0x10>)
 800221e:	f7fe ff89 	bl	8001134 <_ZN11QueueSender15ProcessRequestsEv>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000230 	.word	0x24000230

0800222c <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <MotherboardOnImuTimerTick+0x1c>)
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	240001d0 	.word	0x240001d0

0800224c <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fcc3 	bl	8002be0 <_ZNSaI7RequestED1Ev>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fca6 	bl	8002bc0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fcbe 	bl	8002bf8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d010      	beq.n	80022b8 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800229e:	3304      	adds	r3, #4
 80022a0:	461a      	mov	r2, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fd0e 	bl	8002cc4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fd20 	bl	8002cf8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ffc6 	bl	800224c <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b08a      	sub	sp, #40	; 0x28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80022d2:	f107 0308 	add.w	r3, r7, #8
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fd29 	bl	8002d30 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fd32 	bl	8002d4e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fd3d 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f107 0218 	add.w	r2, r7, #24
 80022f8:	f107 0108 	add.w	r1, r7, #8
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fd5c 	bl	8002dba <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ffbe 	bl	8002286 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd76 	bl	8002e10 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	: c() { }
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	2328      	movs	r3, #40	; 0x28
 800233c:	461a      	mov	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f01a fd74 	bl	801ce2c <memset>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ffe4 	bl	8002314 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 8002356:	b580      	push	{r7, lr}
 8002358:	b08a      	sub	sp, #40	; 0x28
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fd86 	bl	8002e76 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fd8f 	bl	8002e94 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd9a 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800237e:	4603      	mov	r3, r0
 8002380:	f107 0218 	add.w	r2, r7, #24
 8002384:	f107 0108 	add.w	r1, r7, #8
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fdb9 	bl	8002f00 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fd4e 	bl	8002e32 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fdc8 	bl	8002f3e <_ZNSaIhEC1Ev>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fdd0 	bl	8002f56 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fdd8 	bl	8002f7e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80023ee:	461a      	mov	r2, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fdcf 	bl	8002f94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fd71 	bl	8000ee0 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681c      	ldr	r4, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fdcd 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002420:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002422:	461a      	mov	r2, r3
 8002424:	4629      	mov	r1, r5
 8002426:	4620      	mov	r0, r4
 8002428:	f000 fdd2 	bl	8002fd0 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffd2 	bl	80023d8 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bdb0      	pop	{r4, r5, r7, pc}

0800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8002468:	429a      	cmp	r2, r3
 800246a:	d012      	beq.n	8002492 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800246c:	687c      	ldr	r4, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699d      	ldr	r5, [r3, #24]
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f000 fdba 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	4629      	mov	r1, r5
 800247e:	4620      	mov	r0, r4
 8002480:	f000 fdbf 	bl	8003002 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f103 0214 	add.w	r2, r3, #20
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8002490:	e007      	b.n	80024a2 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	f000 fdaa 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002498:	4603      	mov	r3, r0
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fdc3 	bl	8003028 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bdb0      	pop	{r4, r5, r7, pc}

080024aa <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80024aa:	b5b0      	push	{r4, r5, r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d014      	beq.n	80024ea <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 80024c0:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80024c6:	f1a3 0514 	sub.w	r5, r3, #20
 80024ca:	6838      	ldr	r0, [r7, #0]
 80024cc:	f000 fd8e 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	4629      	mov	r1, r5
 80024d6:	4620      	mov	r0, r4
 80024d8:	f000 fd93 	bl	8003002 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f1a3 0214 	sub.w	r2, r3, #20
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
      }
 80024e8:	e007      	b.n	80024fa <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 80024ea:	6838      	ldr	r0, [r7, #0]
 80024ec:	f000 fd7e 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fddb 	bl	80030b0 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}

08002502 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fe15 	bl	800313c <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fe1a 	bl	8003160 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 800252c:	4603      	mov	r3, r0
      }
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8002556:	6838      	ldr	r0, [r7, #0]
 8002558:	f000 fe16 	bl	8003188 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fe1c 	bl	800319e <_ZNSaIhEC1ERKS_>
 8002566:	687c      	ldr	r4, [r7, #4]
 8002568:	6838      	ldr	r0, [r7, #0]
 800256a:	f000 fe0d 	bl	8003188 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800256e:	4603      	mov	r3, r0
 8002570:	4619      	mov	r1, r3
 8002572:	4620      	mov	r0, r4
 8002574:	f000 fe21 	bl	80031ba <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}

08002582 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe37 	bl	8003200 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f103 0218 	add.w	r2, r3, #24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3308      	adds	r3, #8
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 fe4a 	bl	8003248 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fbaf 	bl	8002d30 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fe4a 	bl	8003270 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 80025dc:	4603      	mov	r3, r0
      }
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 80025f0:	687c      	ldr	r4, [r7, #4]
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f000 fe48 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f000 fe4e 	bl	800329e <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f83b 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800261a:	4602      	mov	r2, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4293      	cmp	r3, r2
 8002620:	bf8c      	ite	hi
 8002622:	2301      	movhi	r3, #1
 8002624:	2300      	movls	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f82f 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002632:	4602      	mov	r2, r0
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fe70 	bl	8003320 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8002640:	e013      	b.n	800266a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f824 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002648:	4602      	mov	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	4293      	cmp	r3, r2
 800264e:	bf34      	ite	cc
 8002650:	2301      	movcc	r3, #1
 8002652:	2300      	movcs	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 ff13 	bl	8003490 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 ff25 	bl	80034d0 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d011      	beq.n	80026e8 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fb50 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 ff07 	bl	80034e8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f103 0214 	add.w	r2, r3, #20
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80026e6:	e002      	b.n	80026ee <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 ff0a 	bl	8003502 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80026fa:	2300      	movs	r3, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8002706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	f000 80e0 	beq.w	80028da <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800271a:	f7ff ffec 	bl	80026f6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d042      	beq.n	80027aa <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8002724:	f7fe ff1c 	bl	8001560 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8002728:	4603      	mov	r3, r0
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fc3f 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800273c:	4604      	mov	r4, r0
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 ff06 	bl	8003552 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002746:	4603      	mov	r3, r0
 8002748:	4619      	mov	r1, r3
 800274a:	4620      	mov	r0, r4
 800274c:	f000 ff0c 	bl	8003568 <_ZStneRKSaIhES1_>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 800275a:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800275c:	2b00      	cmp	r3, #0
 800275e:	d016      	beq.n	800278e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 ff0d 	bl	8003580 <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8002776:	461a      	mov	r2, r3
 8002778:	f000 fc0c 	bl	8002f94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fc12 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002796:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fed9 	bl	8003552 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80027a0:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80027a2:	4619      	mov	r1, r3
 80027a4:	4620      	mov	r0, r4
 80027a6:	f000 fef9 	bl	800359c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f7ff ff70 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80027b0:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 ff00 	bl	80035b8 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf8c      	ite	hi
 80027c0:	2301      	movhi	r3, #1
 80027c2:	2300      	movls	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d030      	beq.n	800282c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	f000 ff03 	bl	80035d6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 80027d0:	4604      	mov	r4, r0
 80027d2:	6838      	ldr	r0, [r7, #0]
 80027d4:	f000 ff0f 	bl	80035f6 <_ZNKSt6vectorIhSaIhEE3endEv>
 80027d8:	4603      	mov	r3, r0
 80027da:	4622      	mov	r2, r4
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 ff1a 	bl	8003618 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 80027e4:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681c      	ldr	r4, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fbe2 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80027f6:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80027f8:	461a      	mov	r2, r3
 80027fa:	4629      	mov	r1, r5
 80027fc:	4620      	mov	r0, r4
 80027fe:	f000 fbe7 	bl	8002fd0 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002812:	461a      	mov	r2, r3
 8002814:	f000 fbbe 	bl	8002f94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e050      	b.n	80028ce <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff2f 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4293      	cmp	r3, r2
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002844:	6838      	ldr	r0, [r7, #0]
 8002846:	f000 fec6 	bl	80035d6 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800284a:	4604      	mov	r4, r0
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f000 fed2 	bl	80035f6 <_ZNKSt6vectorIhSaIhEE3endEv>
 8002852:	4605      	mov	r5, r0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fefb 	bl	8003650 <_ZNSt6vectorIhSaIhEE5beginEv>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	4629      	mov	r1, r5
 8002860:	4620      	mov	r0, r4
 8002862:	f000 ff05 	bl	8003670 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8002866:	4604      	mov	r4, r0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 ff19 	bl	80036a0 <_ZNSt6vectorIhSaIhEE3endEv>
 800286e:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fba1 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002878:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800287a:	461a      	mov	r2, r3
 800287c:	4629      	mov	r1, r5
 800287e:	4620      	mov	r0, r4
 8002880:	f000 ff1f 	bl	80036c2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8002884:	e023      	b.n	80028ce <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681d      	ldr	r5, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681c      	ldr	r4, [r3, #0]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fefe 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002894:	4603      	mov	r3, r0
 8002896:	18e1      	adds	r1, r4, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 ff1d 	bl	80036de <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681c      	ldr	r4, [r3, #0]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fef1 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb7c 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80028c2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80028c4:	4632      	mov	r2, r6
 80028c6:	4629      	mov	r1, r5
 80028c8:	4620      	mov	r0, r4
 80028ca:	f000 ff20 	bl	800370e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]
	}
      return *this;
 80028da:	687b      	ldr	r3, [r7, #4]
    }
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028e4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	: c() { }
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	2328      	movs	r3, #40	; 0x28
 80028f2:	461a      	mov	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f01a fa99 	bl	801ce2c <memset>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fad5 	bl	8000eac <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fe3f 	bl	800259a <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fdcb 	bl	80034d0 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	return c.front();
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fe35 	bl	80025be <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8002954:	4603      	mov	r3, r0
      }
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fea0 	bl	80026ae <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4pushEOS0_>:
      push(value_type&& __x)
 8002976:	b590      	push	{r4, r7, lr}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002980:	687c      	ldr	r4, [r7, #4]
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f7ff fd5b 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f000 fecf 	bl	8003730 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}

0800299a <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800299a:	b590      	push	{r4, r7, lr}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80029a8:	6838      	ldr	r0, [r7, #0]
 80029aa:	f000 fed2 	bl	8003752 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4622      	mov	r2, r4
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fed7 	bl	8003768 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80029ba:	687b      	ldr	r3, [r7, #4]
      }
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}

080029c4 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 ff05 	bl	80037e4 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 80029da:	4604      	mov	r4, r0
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 ff0c 	bl	80037fc <_ZNKSt16initializer_listI8IMUFrameE3endEv>
 80029e4:	4602      	mov	r2, r0
 80029e6:	462b      	mov	r3, r5
 80029e8:	4621      	mov	r1, r4
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 ff1b 	bl	8003826 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 80029f0:	68fb      	ldr	r3, [r7, #12]
      }
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdb0      	pop	{r4, r5, r7, pc}

080029fa <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>:
      push_front(value_type&& __x)
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f000 ff73 	bl	80038f0 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 ff79 	bl	8003906 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0218 	add.w	r2, r3, #24
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 ff9f 	bl	8003974 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0218 	add.w	r2, r3, #24
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 ffa1 	bl	800399c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3308      	adds	r3, #8
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 ffbc 	bl	80039f4 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 8002a7c:	4603      	mov	r3, r0
      }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 ffd6 	bl	8003a40 <_ZNSaI8IMUFrameED1Ev>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ffb9 	bl	8003a20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 ffd1 	bl	8003a58 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002ad8:	3304      	adds	r3, #4
 8002ada:	461a      	mov	r2, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f001 f821 	bl	8003b24 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 f833 	bl	8003b58 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ffc6 	bl	8002a86 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 f83c 	bl	8003b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8002b18:	f107 0318 	add.w	r3, r7, #24
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f845 	bl	8003bae <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ff19 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f107 0218 	add.w	r2, r7, #24
 8002b32:	f107 0108 	add.w	r1, r7, #8
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f001 f864 	bl	8003c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ffbe 	bl	8002ac0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002b4e:	b590      	push	{r4, r7, lr}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f001 f860 	bl	8003c1e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4622      	mov	r2, r4
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 f865 	bl	8003c34 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002b6a:	687b      	ldr	r3, [r7, #4]
      }
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f001 f879 	bl	8003c76 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4622      	mov	r2, r4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 f87e 	bl	8003c8c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002b90:	687b      	ldr	r3, [r7, #4]
      }
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}

08002b9a <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002b9a:	b590      	push	{r4, r7, lr}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002ba4:	6838      	ldr	r0, [r7, #0]
 8002ba6:	f001 f892 	bl	8003cce <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4622      	mov	r2, r4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f001 f897 	bl	8003ce4 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002bb6:	687b      	ldr	r3, [r7, #4]
      }
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}

08002bc0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 f8ac 	bl	8003d26 <_ZNSaI7RequestEC1Ev>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f8b4 	bl	8003d3e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZNSaI7RequestED1Ev>:
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f8c1 	bl	8003d70 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002c02:	2014      	movs	r0, #20
 8002c04:	f7fe f93d 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002c14:	2308      	movs	r3, #8
 8002c16:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	f107 0210 	add.w	r2, r7, #16
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 f8ac 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 8002c2e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 f8b6 	bl	8003dae <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8002c42:	4602      	mov	r2, r0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	1acb      	subs	r3, r1, r3
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002c58:	4413      	add	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	69b9      	ldr	r1, [r7, #24]
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 f8bc 	bl	8003de8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3308      	adds	r3, #8
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f8d0 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0218 	add.w	r2, r3, #24
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f001 f8c7 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002c9a:	2014      	movs	r0, #20
 8002c9c:	f7fe f8f1 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ca8:	fb01 f202 	mul.w	r2, r1, r2
 8002cac:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
    }
 8002cbc:	bf00      	nop
 8002cbe:	3724      	adds	r7, #36	; 0x24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}

08002cc4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d209      	bcs.n	8002cf0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f001 f8b6 	bl	8003e54 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3304      	adds	r3, #4
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e7f1      	b.n	8002cd4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f8b5 	bl	8003e7a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f8cb 	bl	8003eb4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f8ba 	bl	8003e9c <_ZNSaIP7RequestED1Ev>
      }
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f81e 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f80f 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08c      	sub	sp, #48	; 0x30
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffd7 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002dd4:	f107 0320 	add.w	r3, r7, #32
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffd1 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002de0:	f107 0220 	add.w	r2, r7, #32
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4619      	mov	r1, r3
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f001 f871 	bl	8003ed2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002df0:	bf00      	nop
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f001 f8d4 	bl	8003fae <_ZNSaI8ResponceED1Ev>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f8b7 	bl	8003f8e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002e20:	2100      	movs	r1, #0
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f001 f8cf 	bl	8003fc6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f001 f91c 	bl	800408c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f001 f92e 	bl	80040c0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ffc6 	bl	8002df8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3308      	adds	r3, #8
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f81e 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f80f 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	; 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ffd7 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002f1a:	f107 0320 	add.w	r3, r7, #32
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ffd1 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002f26:	f107 0220 	add.w	r2, r7, #32
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4619      	mov	r1, r3
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f001 f8e1 	bl	80040f8 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002f36:	bf00      	nop
 8002f38:	3730      	adds	r7, #48	; 0x30
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 f931 	bl	80041ae <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
	{ }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 f909 	bl	80041c4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f001 f8ff 	bl	80041e2 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffec 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f001 f8ee 	bl	80041fc <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 f8fa 	bl	800422c <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8003038:	4604      	mov	r4, r0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f001 f908 	bl	8004250 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8003040:	4603      	mov	r3, r0
 8003042:	429c      	cmp	r4, r3
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003050:	4816      	ldr	r0, [pc, #88]	; (80030ac <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8003052:	f019 fe43 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8003056:	2101      	movs	r1, #1
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 f90a 	bl	8004272 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1d1c      	adds	r4, r3, #4
 8003066:	4610      	mov	r0, r2
 8003068:	f001 f91e 	bl	80042a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 800306c:	4603      	mov	r3, r0
 800306e:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8003070:	687c      	ldr	r4, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699d      	ldr	r5, [r3, #24]
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f7ff ffb8 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4629      	mov	r1, r5
 8003082:	4620      	mov	r0, r4
 8003084:	f7ff ffbd 	bl	8003002 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0218 	add.w	r2, r3, #24
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 fec0 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}
 80030ac:	0801e318 	.word	0x0801e318

080030b0 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f001 f8b6 	bl	800422c <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80030c0:	4604      	mov	r4, r0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f001 f8c4 	bl	8004250 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 80030c8:	4603      	mov	r3, r0
 80030ca:	429c      	cmp	r4, r3
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80030d8:	4817      	ldr	r0, [pc, #92]	; (8003138 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 80030da:	f019 fdff 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 80030de:	2101      	movs	r1, #1
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 f8f3 	bl	80042cc <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	1f1c      	subs	r4, r3, #4
 80030ee:	4610      	mov	r0, r2
 80030f0:	f001 f8da 	bl	80042a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f103 0208 	add.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	3b04      	subs	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fe88 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f1a3 0214 	sub.w	r2, r3, #20
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8003118:	687c      	ldr	r4, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689d      	ldr	r5, [r3, #8]
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f7ff ff64 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4629      	mov	r1, r5
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff ff69 	bl	8003002 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}
 8003138:	0801e318 	.word	0x0801e318

0800313c <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 0218 	add.w	r2, r3, #24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3308      	adds	r3, #8
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f001 f8d3 	bl	80042fc <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8003156:	4603      	mov	r3, r0
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	return *begin();
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fe81 	bl	8002e76 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f8d3 	bl	8004324 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 800317e:	4603      	mov	r3, r0
      }
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f001 f8c6 	bl	800433c <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8003212:	429a      	cmp	r2, r3
 8003214:	d011      	beq.n	800323a <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe4a 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f001 f894 	bl	8004354 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f103 0210 	add.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
      }
 8003238:	e002      	b.n	8003240 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f001 f897 	bl	800436e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800329e:	b5b0      	push	{r4, r5, r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d012      	beq.n	80032dc <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80032b6:	687c      	ldr	r4, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699d      	ldr	r5, [r3, #24]
 80032bc:	6838      	ldr	r0, [r7, #0]
 80032be:	f7ff ffe3 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4629      	mov	r1, r5
 80032c8:	4620      	mov	r0, r4
 80032ca:	f001 f878 	bl	80043be <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f103 0210 	add.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
      }
 80032da:	e007      	b.n	80032ec <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	f7ff ffd3 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 f87c 	bl	80043e4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}

080032f4 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f805 	bl	800330a <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003300:	4603      	mov	r3, r0
      }
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003312:	2301      	movs	r3, #1
      }
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a8 	beq.w	8003482 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff f9ac 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8003338:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8003344:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f001 f890 	bl	800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800334c:	4602      	mov	r2, r0
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4293      	cmp	r3, r2
 8003352:	d808      	bhi.n	8003366 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f001 f889 	bl	800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800335a:	4602      	mov	r2, r0
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	429a      	cmp	r2, r3
 8003364:	d901      	bls.n	800336a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d30f      	bcc.n	8003396 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fe1c 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003382:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8003384:	461a      	mov	r2, r3
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	4620      	mov	r0, r4
 800338a:	f001 f880 	bl	800448e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 800338e:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8003394:	e075      	b.n	8003482 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f001 f886 	bl	80044ac <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80033a0:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6979      	ldr	r1, [r7, #20]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f8c7 	bl	800453a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80033ac:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80033ae:	f7ff ffa1 	bl	80032f4 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fdfa 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033c6:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80033c8:	461a      	mov	r2, r3
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	4620      	mov	r0, r4
 80033ce:	f001 f85e 	bl	800448e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fdec 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80033e2:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4629      	mov	r1, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f001 f8ba 	bl	8004562 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80033ee:	e02e      	b.n	800344e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fddc 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003402:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8003404:	461a      	mov	r2, r3
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	4620      	mov	r0, r4
 800340a:	f001 f840 	bl	800448e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681c      	ldr	r4, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fdca 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003426:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4629      	mov	r1, r5
 800342c:	4620      	mov	r0, r4
 800342e:	f001 f8ac 	bl	800458a <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681c      	ldr	r4, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fdbc 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8003442:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003444:	461a      	mov	r2, r3
 8003446:	4629      	mov	r1, r5
 8003448:	4620      	mov	r0, r4
 800344a:	f7ff fdc1 	bl	8002fd0 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fd98 	bl	8002f94 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	609a      	str	r2, [r3, #8]
    }
 8003482:	bf00      	nop
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bdb0      	pop	{r4, r5, r7, pc}
 800348a:	bf00      	nop
 800348c:	0801e348 	.word	0x0801e348

08003490 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fd82 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80034b6:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80034b8:	461a      	mov	r2, r3
 80034ba:	4621      	mov	r1, r4
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f7ff fd87 	bl	8002fd0 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f001 f861 	bl	80045bc <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fc2d 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f7ff ffe4 	bl	80034e8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 fc93 	bl	8003e54 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f103 0208 	add.w	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 fc6d 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]
    }
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
      { return false; }
 8003572:	2300      	movs	r3, #0
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff7e 	bl	8003490 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 80035a6:	461a      	mov	r2, r3
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f001 f812 	bl	80045d4 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f800 	bl	80045ec <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1d1a      	adds	r2, r3, #4
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 ffef 	bl	80045ec <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 ff85 	bl	800453a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8003630:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fcc0 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800363a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 ffe3 	bl	800460c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003646:	697b      	ldr	r3, [r7, #20]
	}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 ffe4 	bl	800462e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 ffe6 	bl	800464e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8003682:	4604      	mov	r4, r0
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	f000 ffe2 	bl	800464e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800368a:	4603      	mov	r3, r0
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4619      	mov	r1, r3
 8003690:	4620      	mov	r0, r4
 8003692:	f000 ffe7 	bl	8004664 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8003696:	4603      	mov	r3, r0
    }
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bd90      	pop	{r4, r7, pc}

080036a0 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 ffbb 	bl	800462e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 ffe8 	bl	80046a6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80036de:	b590      	push	{r4, r7, lr}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 ffe8 	bl	80046c0 <_ZSt12__miter_baseIPhET_S1_>
 80036f0:	4604      	mov	r4, r0
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f000 ffe4 	bl	80046c0 <_ZSt12__miter_baseIPhET_S1_>
 80036f8:	4603      	mov	r3, r0
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4619      	mov	r1, r3
 80036fe:	4620      	mov	r0, r4
 8003700:	f000 ffe9 	bl	80046d6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8003704:	4603      	mov	r3, r0
    }
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}

0800370e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fffb 	bl	800471c <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8003726:	4603      	mov	r3, r0
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <_ZNSt5dequeI7RequestSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f7fe fe7f 	bl	800243e <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8003740:	4603      	mov	r3, r0
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe fe85 	bl	8002454 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f107 031c 	add.w	r3, r7, #28
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ffdf 	bl	8004740 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8003782:	f107 021c 	add.w	r2, r7, #28
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f000 ffe8 	bl	8004762 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fe12 	bl	80023c0 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ffec 	bl	8004780 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 ffe5 	bl	8004780 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fbfe 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037be:	4604      	mov	r4, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fbf9 	bl	8002fba <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4619      	mov	r1, r3
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 fff5 	bl	80047bc <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fe16 	bl	8002408 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 80037dc:	bf00      	nop
 80037de:	3724      	adds	r7, #36	; 0x24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_ZNKSt16initializer_listI8IMUFrameE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffed 	bl	80037e4 <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 800380a:	4604      	mov	r4, r0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 ffe3 	bl	80047d8 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>
 8003812:	4602      	mov	r2, r0
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4423      	add	r3, r4
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}

08003826 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8003826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003828:	b09f      	sub	sp, #124	; 0x7c
 800382a:	af02      	add	r7, sp, #8
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 ffd9 	bl	80047f0 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800383e:	4603      	mov	r3, r0
 8003840:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff f8fc 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8003848:	4602      	mov	r2, r0
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	4293      	cmp	r3, r2
 800384e:	bf8c      	ite	hi
 8003850:	2301      	movhi	r3, #1
 8003852:	2300      	movls	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d031      	beq.n	80038be <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff f8ee 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8003864:	4602      	mov	r2, r0
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 ffd3 	bl	8004818 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8003872:	68bc      	ldr	r4, [r7, #8]
 8003874:	697d      	ldr	r5, [r7, #20]
 8003876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f987 	bl	8003b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8003882:	f107 0018 	add.w	r0, r7, #24
 8003886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800388a:	462a      	mov	r2, r5
 800388c:	4621      	mov	r1, r4
 800388e:	f000 ffd6 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
	      _M_range_insert_aux(end(), __mid, __last,
 8003892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f988 	bl	8003bae <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 800389e:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ffea 	bl	800487e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
	      _M_range_insert_aux(end(), __mid, __last,
 80038aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038ae:	f88d 6000 	strb.w	r6, [sp]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4622      	mov	r2, r4
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 ffec 	bl	8004894 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>
	}
 80038bc:	e014      	b.n	80038e8 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 80038be:	68bc      	ldr	r4, [r7, #8]
 80038c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038c4:	68f9      	ldr	r1, [r7, #12]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f962 	bl	8003b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 80038cc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80038d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4621      	mov	r1, r4
 80038d8:	f000 ffb1 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 80038dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038e0:	4619      	mov	r1, r3
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f001 f853 	bl	800498e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
	}
 80038e8:	bf00      	nop
 80038ea:	3774      	adds	r7, #116	; 0x74
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f0 <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003906:	b5b0      	push	{r4, r5, r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d014      	beq.n	8003946 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 800391c:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8003922:	f1a3 0518 	sub.w	r5, r3, #24
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f001 f864 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4629      	mov	r1, r5
 8003932:	4620      	mov	r0, r4
 8003934:	f001 f869 	bl	8004a0a <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f1a3 0218 	sub.w	r2, r3, #24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
      }
 8003944:	e007      	b.n	8003956 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f001 f854 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 800394c:	4603      	mov	r3, r0
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f001 f86d 	bl	8004a30 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}

0800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80039a6:	f001 f8b8 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	109b      	asrs	r3, r3, #2
 80039ba:	3b01      	subs	r3, #1
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6811      	ldr	r1, [r2, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6852      	ldr	r2, [r2, #4]
 80039c8:	1a8a      	subs	r2, r1, r2
 80039ca:	10d2      	asrs	r2, r2, #3
 80039cc:	4908      	ldr	r1, [pc, #32]	; (80039f0 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 80039ce:	fb01 f202 	mul.w	r2, r1, r2
 80039d2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	6891      	ldr	r1, [r2, #8]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	1a8a      	subs	r2, r1, r2
 80039de:	10d2      	asrs	r2, r2, #3
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 80039e2:	fb01 f202 	mul.w	r2, r1, r2
 80039e6:	4413      	add	r3, r2
      }
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	aaaaaaab 	.word	0xaaaaaaab

080039f4 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f88f 	bl	8004b2a <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8003a0c:	f107 0308 	add.w	r3, r7, #8
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f89d 	bl	8004b50 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f001 f89d 	bl	8004b68 <_ZNSaI8IMUFrameEC1Ev>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f8a5 	bl	8004b80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZNSaI8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f001 f8b2 	bl	8004bb2 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003a62:	2018      	movs	r0, #24
 8003a64:	f7fd fa0d 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a74:	2308      	movs	r3, #8
 8003a76:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	f107 0210 	add.w	r2, r7, #16
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f97c 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 8003a8e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f001 f893 	bl	8004bc8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	1acb      	subs	r3, r1, r3
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003ab8:	4413      	add	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 f899 	bl	8004c02 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 f803 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f103 0218 	add.w	r2, r3, #24
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3b04      	subs	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f000 fffa 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003afa:	2018      	movs	r0, #24
 8003afc:	f7fd f9c1 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b08:	fb01 f202 	mul.w	r2, r1, r2
 8003b0c:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
    }
 8003b1c:	bf00      	nop
 8003b1e:	3724      	adds	r7, #36	; 0x24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd90      	pop	{r4, r7, pc}

08003b24 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d209      	bcs.n	8003b50 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 ffba 	bl	8004abc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e7f1      	b.n	8003b34 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8003b50:	bf00      	nop
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f863 	bl	8004c36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f879 	bl	8004c70 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 f868 	bl	8004c58 <_ZNSaIP8IMUFrameED1Ev>
      }
 8003b88:	bf00      	nop
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f813 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f804 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8003c04:	b480      	push	{r7}
 8003c06:	b08d      	sub	sp, #52	; 0x34
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
      }
 8003c12:	bf00      	nop
 8003c14:	3734      	adds	r7, #52	; 0x34
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f821 	bl	8004c8e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003c4c:	68b8      	ldr	r0, [r7, #8]
 8003c4e:	f001 f82b 	bl	8004ca8 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f889 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff f884 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4619      	mov	r1, r3
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f001 f831 	bl	8004cd0 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}

08003c76 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f824 	bl	8004cec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003ca4:	68b8      	ldr	r0, [r7, #8]
 8003ca6:	f001 f82e 	bl	8004d06 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff f900 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f8fb 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f001 f834 	bl	8004d2e <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd90      	pop	{r4, r7, pc}

08003cce <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f827 	bl	8004d4a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8003cfc:	68b8      	ldr	r0, [r7, #8]
 8003cfe:	f001 f831 	bl	8004d64 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fe2a 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe25 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4619      	mov	r1, r3
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f001 f837 	bl	8004d8c <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}

08003d26 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f001 f83a 	bl	8004da8 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3308      	adds	r3, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f831 	bl	8004dbe <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3318      	adds	r3, #24
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 f82c 	bl	8004dbe <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d201      	bcs.n	8003da0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	e000      	b.n	8003da2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003da0:	687b      	ldr	r3, [r7, #4]
    }
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003dae:	b590      	push	{r4, r7, lr}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f85b 	bl	8003e7a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f80e 	bl	8004dec <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f85f 	bl	8003e9c <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003dde:	4623      	mov	r3, r4
      }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d209      	bcs.n	8003e14 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fa51 	bl	80042a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e7f1      	b.n	8003df8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003e14:	bf00      	nop
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685c      	ldr	r4, [r3, #4]
 8003e38:	f000 ffe7 	bl	8004e0a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	18e2      	adds	r2, r4, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
      }
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}

08003e54 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003e5e:	687c      	ldr	r4, [r7, #4]
 8003e60:	2014      	movs	r0, #20
 8003e62:	f7fd f80e 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 ffd4 	bl	8004e1a <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}

08003e7a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f000 ffd7 	bl	8004e38 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 ffdd 	bl	8004e4e <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 ffdf 	bl	8004e68 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 ffda 	bl	8004e7e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8003ed2:	b5b0      	push	{r4, r5, r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d219      	bcs.n	8003f24 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681d      	ldr	r5, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681c      	ldr	r4, [r3, #0]
 8003ef8:	f000 ffd1 	bl	8004e9e <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe ff2e 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f10:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003f12:	461a      	mov	r2, r3
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 ffc9 	bl	8004eae <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e7e0      	b.n	8003ee6 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d01c      	beq.n	8003f6a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ff16 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f40:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003f42:	461a      	mov	r2, r3
 8003f44:	4629      	mov	r1, r5
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 ffb1 	bl	8004eae <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685c      	ldr	r4, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe ff08 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f5c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4629      	mov	r1, r5
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 ffa3 	bl	8004eae <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8003f68:	e00d      	b.n	8003f86 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	681c      	ldr	r4, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fef9 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f7a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4629      	mov	r1, r5
 8003f80:	4620      	mov	r0, r4
 8003f82:	f000 ff94 	bl	8004eae <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdb0      	pop	{r4, r5, r7, pc}

08003f8e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 ff97 	bl	8004eca <_ZNSaI8ResponceEC1Ev>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 ff9f 	bl	8004ee2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZNSaI8ResponceED1Ev>:
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 ffac 	bl	8004f14 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003fc6:	b590      	push	{r4, r7, lr}
 8003fc8:	b089      	sub	sp, #36	; 0x24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003fd0:	2010      	movs	r0, #16
 8003fd2:	f7fc ff56 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fde:	3301      	adds	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	f107 0210 	add.w	r2, r7, #16
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fec5 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 8003ffc:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ff8d 	bl	8004f2a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	1acb      	subs	r3, r1, r3
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004026:	4413      	add	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff93 	bl	8004f64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3308      	adds	r3, #8
 8004042:	69b9      	ldr	r1, [r7, #24]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ffa7 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f103 0218 	add.w	r2, r3, #24
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3b04      	subs	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f000 ff9e 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004068:	2010      	movs	r0, #16
 800406a:	f7fc ff0a 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	fbb3 f1f2 	udiv	r1, r3, r2
 8004076:	fb01 f202 	mul.w	r2, r1, r2
 800407a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
    }
 8004084:	bf00      	nop
 8004086:	3724      	adds	r7, #36	; 0x24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d209      	bcs.n	80040b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 ff8d 	bl	8004fca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3304      	adds	r3, #4
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e7f1      	b.n	800409c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80040b8:	bf00      	nop
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 ff8c 	bl	8004ff0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ffa2 	bl	800502a <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80040e6:	f107 0314 	add.w	r3, r7, #20
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff91 	bl	8005012 <_ZNSaIP8ResponceED1Ev>
      }
 80040f0:	bf00      	nop
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	429a      	cmp	r2, r3
 8004114:	d216      	bcs.n	8004144 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	f000 ff93 	bl	8005048 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 8004122:	4603      	mov	r3, r0
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fec1 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004130:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8004132:	461a      	mov	r2, r3
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	f000 ff8e 	bl	8005058 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3304      	adds	r3, #4
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e7e3      	b.n	800410c <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	429a      	cmp	r2, r3
 800414e:	d01c      	beq.n	800418a <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	681c      	ldr	r4, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fea9 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004160:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8004162:	461a      	mov	r2, r3
 8004164:	4629      	mov	r1, r5
 8004166:	4620      	mov	r0, r4
 8004168:	f000 ff76 	bl	8005058 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685c      	ldr	r4, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fe9b 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800417c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800417e:	461a      	mov	r2, r3
 8004180:	4629      	mov	r1, r5
 8004182:	4620      	mov	r0, r4
 8004184:	f000 ff68 	bl	8005058 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8004188:	e00d      	b.n	80041a6 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fe8c 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800419a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800419c:	461a      	mov	r2, r3
 800419e:	4629      	mov	r1, r5
 80041a0:	4620      	mov	r0, r4
 80041a2:	f000 ff59 	bl	8005058 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bdb0      	pop	{r4, r5, r7, pc}

080041ae <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 ff4d 	bl	8005074 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 ff4e 	bl	8005090 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe feef 	bl	8002fec <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 800420e:	4604      	mov	r4, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4619      	mov	r1, r3
 8004214:	2014      	movs	r0, #20
 8004216:	f7fc fe28 	bl	8000e6a <_ZnwjPv>
 800421a:	4603      	mov	r3, r0
 800421c:	4621      	mov	r1, r4
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd f945 	bl	80014ae <_ZN7RequestC1EOS_>
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 0218 	add.w	r2, r3, #24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3308      	adds	r3, #8
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 ff31 	bl	80050a8 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8004246:	4603      	mov	r3, r0
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fdec 	bl	8004e38 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004260:	4603      	mov	r3, r0
 8004262:	4618      	mov	r0, r3
 8004264:	f000 ff4c 	bl	8005100 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8004268:	4603      	mov	r3, r0
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6809      	ldr	r1, [r1, #0]
 800428c:	1a41      	subs	r1, r0, r1
 800428e:	1089      	asrs	r1, r1, #2
 8004290:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004292:	429a      	cmp	r2, r3
 8004294:	d904      	bls.n	80042a0 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004296:	2200      	movs	r2, #0
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 ff4a 	bl	8005134 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80042b0:	687c      	ldr	r4, [r7, #4]
 80042b2:	2014      	movs	r0, #20
 80042b4:	f7fc fde5 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4619      	mov	r1, r3
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 ffd3 	bl	8005268 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 80042c2:	4603      	mov	r3, r0
      }
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}

080042cc <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80042e2:	461a      	mov	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d904      	bls.n	80042f4 <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80042ea:	2201      	movs	r2, #1
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ff20 	bl	8005134 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 ff90 	bl	8005286 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fd9a 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800437e:	4602      	mov	r2, r0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7ff ffe4 	bl	8004354 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f000 fe18 	bl	8004fca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 0208 	add.w	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fdf5 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
    }
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fe ff5c 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 ff61 	bl	800529e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ff6d 	bl	80052ce <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 80043f4:	4604      	mov	r4, r0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 ff7b 	bl	80052f2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	429c      	cmp	r4, r3
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800440c:	4816      	ldr	r0, [pc, #88]	; (8004468 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 800440e:	f018 fc65 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8004412:	2101      	movs	r1, #1
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 ff7d 	bl	8005314 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1d1c      	adds	r4, r3, #4
 8004422:	4610      	mov	r0, r2
 8004424:	f000 ff91 	bl	800534a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8004428:	4603      	mov	r3, r0
 800442a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800442c:	687c      	ldr	r4, [r7, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699d      	ldr	r5, [r3, #24]
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f7fe ff28 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	4629      	mov	r1, r5
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff ffbd 	bl	80043be <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f103 0218 	add.w	r2, r3, #24
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 fda0 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	619a      	str	r2, [r3, #24]
      }
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bdb0      	pop	{r4, r5, r7, pc}
 8004468:	0801e318 	.word	0x0801e318

0800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff f86b 	bl	8003552 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800447c:	4603      	mov	r3, r0
 800447e:	4618      	mov	r0, r3
 8004480:	f000 ff75 	bl	800536e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8004484:	4603      	mov	r3, r0
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 ff80 	bl	80053a2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ffd7 	bl	800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80044be:	4604      	mov	r4, r0
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7fe f8e5 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	1ae2      	subs	r2, r4, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	bf34      	ite	cc
 80044d0:	2301      	movcc	r3, #1
 80044d2:	2300      	movcs	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f018 fbfe 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7fe f8d5 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80044e6:	4604      	mov	r4, r0
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fe f8d1 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80044ee:	4603      	mov	r3, r0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	f107 0208 	add.w	r2, r7, #8
 80044f6:	f107 0310 	add.w	r3, r7, #16
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fc42 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 8004502:	4603      	mov	r3, r0
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4423      	add	r3, r4
 8004508:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7fe f8c0 	bl	8002690 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004510:	4602      	mov	r2, r0
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4293      	cmp	r3, r2
 8004516:	d306      	bcc.n	8004526 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff ffa7 	bl	800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4293      	cmp	r3, r2
 8004524:	d904      	bls.n	8004530 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff ffa0 	bl	800446c <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800452c:	4603      	mov	r3, r0
 800452e:	e000      	b.n	8004532 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8004530:	697b      	ldr	r3, [r7, #20]
      }
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}

0800453a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d006      	beq.n	8004558 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 ff37 	bl	80053c2 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8004554:	4603      	mov	r3, r0
 8004556:	e000      	b.n	800455a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8004558:	2300      	movs	r3, #0
      }
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004562:	b590      	push	{r4, r7, lr}
 8004564:	b087      	sub	sp, #28
 8004566:	af02      	add	r7, sp, #8
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8004570:	f88d 4000 	strb.w	r4, [sp]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 ff30 	bl	80053e0 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8004580:	4603      	mov	r3, r0
      }
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bd90      	pop	{r4, r7, pc}

0800458a <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800458a:	b590      	push	{r4, r7, lr}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 ff33 	bl	8005404 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800459e:	4604      	mov	r4, r0
 80045a0:	68b8      	ldr	r0, [r7, #8]
 80045a2:	f000 ff2f 	bl	8005404 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80045a6:	4601      	mov	r1, r0
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 ff38 	bl	8005422 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 80045b2:	4603      	mov	r3, r0
    }
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd90      	pop	{r4, r7, pc}

080045bc <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f7fc fe92 	bl	80012f0 <_ZN7RequestD1Ev>
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	713a      	strb	r2, [r7, #4]
    { }
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 ff10 	bl	8005444 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8004624:	4603      	mov	r3, r0
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fef9 	bl	8005468 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004676:	4604      	mov	r4, r0
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	f000 fef5 	bl	8005468 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800467e:	4605      	mov	r5, r0
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 feff 	bl	8005484 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	4629      	mov	r1, r5
 800468c:	4620      	mov	r0, r4
 800468e:	f000 ff07 	bl	80054a0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8004692:	4603      	mov	r3, r0
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ff12 	bl	80054c0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 800469c:	4603      	mov	r3, r0
    }
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bdb0      	pop	{r4, r5, r7, pc}

080046a6 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 ff19 	bl	80054ea <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80046d6:	b5b0      	push	{r4, r5, r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 ff0c 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 80046e8:	4604      	mov	r4, r0
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	f000 ff08 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 80046f0:	4605      	mov	r5, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 ff03 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4629      	mov	r1, r5
 8004700:	4620      	mov	r0, r4
 8004702:	f000 ff08 	bl	8005516 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8004706:	4602      	mov	r2, r0
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 ff12 	bl	8005536 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8004712:	4603      	mov	r3, r0
    }
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bdb0      	pop	{r4, r5, r7, pc}

0800471c <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 ff0c 	bl	800554e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8004736:	4603      	mov	r3, r0
    }
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f7fe ff01 	bl	8003552 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004750:	4603      	mov	r3, r0
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe fd22 	bl	800319e <_ZNSaIhEC1ERKS_>
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fefc 	bl	800556e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fbe1 	bl	8002f56 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fef6 	bl	800558c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fef2 	bl	800558c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	4619      	mov	r1, r3
 80047ae:	6838      	ldr	r0, [r7, #0]
 80047b0:	f000 feec 	bl	800558c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80047c6:	461a      	mov	r2, r3
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fef5 	bl	80055ba <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>:
      size() const noexcept { return _M_len; }
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80047f0:	b5b0      	push	{r4, r5, r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80047fa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f83d 	bl	800487e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8004804:	462a      	mov	r2, r5
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	4620      	mov	r0, r4
 800480a:	f000 fee3 	bl	80055d4 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 800480e:	4603      	mov	r3, r0
    }
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bdb0      	pop	{r4, r5, r7, pc}

08004818 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f829 	bl	800487e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 800482c:	4622      	mov	r2, r4
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fee5 	bl	8005600 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}

0800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800483e:	b5b0      	push	{r4, r5, r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f000 feed 	bl	800562c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 8004852:	4604      	mov	r4, r0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fee9 	bl	800562c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 800485a:	4605      	mov	r5, r0
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f9b2 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	462a      	mov	r2, r5
 8004870:	4621      	mov	r1, r4
 8004872:	f000 fee6 	bl	8005642 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>
    }
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bdb0      	pop	{r4, r5, r7, pc}

0800487e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004886:	bf00      	nop
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b0a5      	sub	sp, #148	; 0x94
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ffa3 	bl	80047f0 <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d126      	bne.n	800490a <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 80048bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 feec 	bl	80056a4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 80048cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80048d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff f978 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff f83d 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80048e4:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 80048e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80048ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048ee:	9200      	str	r2, [sp, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	f000 ff00 	bl	80056f8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f103 0408 	add.w	r4, r3, #8
 80048fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004908:	e03d      	b.n	8004986 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	429a      	cmp	r2, r3
 8004914:	d127      	bne.n	8004966 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 ff01 	bl	8005728 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 800492c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff f94a 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff f80f 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004940:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8004942:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004946:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800494a:	9200      	str	r2, [sp, #0]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	f000 fed2 	bl	80056f8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f103 0418 	add.w	r4, r3, #24
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004964:	e00f      	b.n	8004986 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8004966:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff f92d 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004972:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fefb 	bl	800577c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>
      }
 8004986:	bf00      	nop
 8004988:	378c      	adds	r7, #140	; 0x8c
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}

0800498e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 800498e:	b590      	push	{r4, r7, lr}
 8004990:	b08b      	sub	sp, #44	; 0x2c
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f914 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80049a4:	f107 0318 	add.w	r3, r7, #24
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff f8ff 	bl	8003bae <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ffd3 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f107 0218 	add.w	r2, r7, #24
 80049be:	f107 0108 	add.w	r1, r7, #8
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff f91e 	bl	8003c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80049d4:	3304      	adds	r3, #4
 80049d6:	461a      	mov	r2, r3
 80049d8:	f7ff f8a4 	bl	8003b24 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	f103 0418 	add.w	r4, r3, #24
 80049e4:	4613      	mov	r3, r2
 80049e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80049ec:	bf00      	nop
 80049ee:	372c      	adds	r7, #44	; 0x2c
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ffec 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f001 f99d 	bl	8005d62 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fe f800 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8004a40:	4604      	mov	r4, r0
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f9a8 	bl	8005d98 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004a58:	4817      	ldr	r0, [pc, #92]	; (8004ab8 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 8004a5a:	f018 f93f 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 f9aa 	bl	8005dba <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	1f1c      	subs	r4, r3, #4
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f001 f9bb 	bl	8005dea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004a74:	4603      	mov	r3, r0
 8004a76:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 0208 	add.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	3b04      	subs	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 f82b 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f1a3 0218 	sub.w	r2, r3, #24
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8004a98:	687c      	ldr	r4, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689d      	ldr	r5, [r3, #8]
 8004a9e:	6838      	ldr	r0, [r7, #0]
 8004aa0:	f7ff ffa8 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff ffad 	bl	8004a0a <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      }
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab8:	0801e318 	.word	0x0801e318

08004abc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004ac6:	687c      	ldr	r4, [r7, #4]
 8004ac8:	2018      	movs	r0, #24
 8004aca:	f7fc f9da 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f001 f9ba 	bl	8005e4e <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}

08004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685c      	ldr	r4, [r3, #4]
 8004afe:	f000 f80c 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	18e2      	adds	r2, r4, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	609a      	str	r2, [r3, #8]
      }
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}

08004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004b1e:	2018      	movs	r0, #24
 8004b20:	f7fc f9af 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff f847 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 f993 	bl	8005e6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 8004b46:	bf00      	nop
      }
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 f9df 	bl	8005f34 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3308      	adds	r3, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 f9d6 	bl	8005f4a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 f9d1 	bl	8005f4a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f82c 	bl	8004c36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004bde:	f107 030c 	add.w	r3, r7, #12
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f9c7 	bl	8005f78 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 8004bea:	4604      	mov	r4, r0
 8004bec:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004bee:	f107 030c 	add.w	r3, r7, #12
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f830 	bl	8004c58 <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004bf8:	4623      	mov	r3, r4
      }
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd90      	pop	{r4, r7, pc}

08004c02 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d209      	bcs.n	8004c2e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f001 f8e5 	bl	8005dea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e7f1      	b.n	8004c12 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f001 f9a8 	bl	8005f96 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f001 f9ae 	bl	8005fac <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f9b0 	bl	8005fc6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f001 f9ab 	bl	8005fdc <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 f9b6 	bl	800600c <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f83a 	bl	8002d30 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f9d5 	bl	8006072 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004cc8:	bf00      	nop
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 f9fa 	bl	80060d8 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f9fa 	bl	80060f2 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004d0e:	f107 0308 	add.w	r3, r7, #8
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe f8ae 	bl	8002e76 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fa19 	bl	8006158 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 fa3e 	bl	80061be <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f001 fa3e 	bl	80061d8 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe ff0c 	bl	8003b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fe05 	bl	800498e <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8004d84:	bf00      	nop
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8004d96:	461a      	mov	r2, r3
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fa4f 	bl	800623e <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004df6:	2200      	movs	r2, #0
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 fa2c 	bl	8006258 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004e0e:	2014      	movs	r0, #20
 8004e10:	f7fc f837 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4618      	mov	r0, r3
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 fa32 	bl	8006294 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fa2e 	bl	80062ba <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68b8      	ldr	r0, [r7, #8]
 8004e92:	f017 ff0d 	bl	801ccb0 <_ZdlPvj>
      }
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004ea2:	2014      	movs	r0, #20
 8004ea4:	f7fb ffed 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	bd80      	pop	{r7, pc}

08004eae <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f001 fa07 	bl	80062d0 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 fa09 	bl	80062ea <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fa00 	bl	8006300 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3318      	adds	r3, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f9fb 	bl	8006300 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8004f2a:	b590      	push	{r4, r7, lr}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004f34:	f107 030c 	add.w	r3, r7, #12
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f858 	bl	8004ff0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004f40:	f107 030c 	add.w	r3, r7, #12
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f9f1 	bl	800632e <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f85c 	bl	8005012 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004f5a:	4623      	mov	r3, r4
      }
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}

08004f64 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d209      	bcs.n	8004f90 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f9e4 	bl	800534a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8004f82:	4602      	mov	r2, r0
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e7f1      	b.n	8004f74 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685c      	ldr	r4, [r3, #4]
 8004fb4:	f001 f9ca 	bl	800634c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	18e2      	adds	r2, r4, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
      }
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}

08004fca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004fca:	b590      	push	{r4, r7, lr}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004fd4:	687c      	ldr	r4, [r7, #4]
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f7fb ff53 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f001 f9ba 	bl	800635c <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}

08004ff0 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f001 f9bd 	bl	800637a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8005000:	4603      	mov	r3, r0
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f9c3 	bl	8006390 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 f9c5 	bl	80063aa <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f001 f9c0 	bl	80063c0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800504c:	2010      	movs	r0, #16
 800504e:	f7fb ff18 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005052:	4603      	mov	r3, r0
 8005054:	4618      	mov	r0, r3
 8005056:	bd80      	pop	{r7, pc}

08005058 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f001 f9ba 	bl	80063e0 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68b8      	ldr	r0, [r7, #8]
 8005084:	f017 fe14 	bl	801ccb0 <_ZdlPvj>
      }
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80050b2:	f7ff feaa 	bl	8004e0a <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	109b      	asrs	r3, r3, #2
 80050c6:	3b01      	subs	r3, #1
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6811      	ldr	r1, [r2, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6852      	ldr	r2, [r2, #4]
 80050d4:	1a8a      	subs	r2, r1, r2
 80050d6:	1092      	asrs	r2, r2, #2
 80050d8:	4908      	ldr	r1, [pc, #32]	; (80050fc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 80050da:	fb01 f202 	mul.w	r2, r1, r2
 80050de:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	6891      	ldr	r1, [r2, #8]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	1a8a      	subs	r2, r1, r2
 80050ea:	1092      	asrs	r2, r2, #2
 80050ec:	4903      	ldr	r1, [pc, #12]	; (80050fc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 80050ee:	fb01 f202 	mul.w	r2, r1, r2
 80050f2:	4413      	add	r3, r2
      }
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	cccccccd 	.word	0xcccccccd

08005100 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8005108:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800510c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 f973 	bl	80063fa <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8005114:	4603      	mov	r3, r0
 8005116:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005118:	f107 0208 	add.w	r2, r7, #8
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f001 f975 	bl	8006412 <_ZSt3minIjERKT_S2_S2_>
 8005128:	4603      	mov	r3, r0
 800512a:	681b      	ldr	r3, [r3, #0]
      }
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b08b      	sub	sp, #44	; 0x2c
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	109b      	asrs	r3, r3, #2
 800514e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8005150:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	4413      	add	r3, r2
 8005158:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	429a      	cmp	r2, r3
 8005164:	d92d      	bls.n	80051c2 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1acb      	subs	r3, r1, r3
 8005172:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005174:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	e000      	b.n	8005184 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8005182:	2300      	movs	r3, #0
 8005184:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005186:	4413      	add	r3, r2
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	429a      	cmp	r2, r3
 8005192:	d209      	bcs.n	80051a8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800519c:	3304      	adds	r3, #4
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	4619      	mov	r1, r3
 80051a2:	f001 f94a 	bl	800643a <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 80051a6:	e048      	b.n	800523a <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80051b0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	4413      	add	r3, r2
 80051ba:	461a      	mov	r2, r3
 80051bc:	f001 f955 	bl	800646a <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 80051c0:	e03b      	b.n	800523a <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3304      	adds	r3, #4
 80051ca:	f107 0208 	add.w	r2, r7, #8
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fdd8 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 80051d6:	4603      	mov	r3, r0
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80051dc:	3302      	adds	r3, #2
 80051de:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	69b9      	ldr	r1, [r7, #24]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe fde2 	bl	8003dae <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 80051ea:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	e000      	b.n	8005204 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8005202:	2300      	movs	r3, #0
 8005204:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8005214:	3304      	adds	r3, #4
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	4619      	mov	r1, r3
 800521a:	f001 f90e 	bl	800643a <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	461a      	mov	r2, r3
 800522a:	f7fd fd65 	bl	8002cf8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3308      	adds	r3, #8
 800523e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fdeb 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f103 0018 	add.w	r0, r3, #24
 800524c:	6a3a      	ldr	r2, [r7, #32]
 800524e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	4413      	add	r3, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fe fdde 	bl	8003e1c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8005260:	bf00      	nop
 8005262:	372c      	adds	r7, #44	; 0x2c
 8005264:	46bd      	mov	sp, r7
 8005266:	bd90      	pop	{r4, r7, pc}

08005268 <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005272:	2200      	movs	r2, #0
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 f90f 	bl	800649a <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 800527c:	4603      	mov	r3, r0
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005290:	6838      	ldr	r0, [r7, #0]
 8005292:	f7fb ff11 	bl	80010b8 <_ZN8ResponceD1Ev>
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800529e:	b590      	push	{r4, r7, lr}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd ffec 	bl	8003288 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80052b0:	4604      	mov	r4, r0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4619      	mov	r1, r3
 80052b6:	2010      	movs	r0, #16
 80052b8:	f7fb fdd7 	bl	8000e6a <_ZnwjPv>
 80052bc:	4603      	mov	r3, r0
 80052be:	4621      	mov	r1, r4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb fedd 	bl	8001080 <_ZN8ResponceC1EOS_>
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}

080052ce <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f103 0218 	add.w	r2, r3, #24
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3308      	adds	r3, #8
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f001 f8fa 	bl	80064dc <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80052e8:	4603      	mov	r3, r0
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f83c 	bl	800637a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8005302:	4603      	mov	r3, r0
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f90d 	bl	8006524 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 800530a:	4603      	mov	r3, r0
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	6809      	ldr	r1, [r1, #0]
 800532e:	1a41      	subs	r1, r0, r1
 8005330:	1089      	asrs	r1, r1, #2
 8005332:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005334:	429a      	cmp	r2, r3
 8005336:	d904      	bls.n	8005342 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8005338:	2200      	movs	r2, #0
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 f90b 	bl	8006558 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800534a:	b590      	push	{r4, r7, lr}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005352:	687c      	ldr	r4, [r7, #4]
 8005354:	2010      	movs	r0, #16
 8005356:	f7fb fd94 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 800535a:	4603      	mov	r3, r0
 800535c:	4619      	mov	r1, r3
 800535e:	4620      	mov	r0, r4
 8005360:	f001 f994 	bl	800668c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8005364:	4603      	mov	r3, r0
      }
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}

0800536e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005376:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800537a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f994 	bl	80066aa <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8005382:	4603      	mov	r3, r0
 8005384:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005386:	f107 0208 	add.w	r2, r7, #8
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f83e 	bl	8006412 <_ZSt3minIjERKT_S2_S2_>
 8005396:	4603      	mov	r3, r0
 8005398:	681b      	ldr	r3, [r3, #0]
      }
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 f985 	bl	80066c2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80053b8:	4603      	mov	r3, r0
    }
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80053cc:	2200      	movs	r2, #0
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 f989 	bl	80066e8 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f001 f993 	bl	8006720 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80053fa:	4603      	mov	r3, r0
      }
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f9a1 	bl	800675a <_ZNSt13move_iteratorIPhEC1ES0_>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f001 f9a2 	bl	800677e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800543a:	4603      	mov	r3, r0
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 f9a2 	bl	80067a2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 800545e:	4603      	mov	r3, r0
    }
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	4618      	mov	r0, r3
 8005474:	f001 f9a5 	bl	80067c2 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8005478:	4603      	mov	r3, r0
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f9a2 	bl	80067d8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005494:	4603      	mov	r3, r0
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f001 f99c 	bl	80067ee <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffda 	bl	8005484 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80054d0:	4602      	mov	r2, r0
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	1a9a      	subs	r2, r3, r2
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 f997 	bl	800680e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f001 f988 	bl	800683c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800552c:	4603      	mov	r3, r0
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe f8bd 	bl	80036de <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8005564:	4603      	mov	r3, r0
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f96d 	bl	800685c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
	}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f001 f95a 	bl	8006880 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	10db      	asrs	r3, r3, #3
 80055e8:	4a04      	ldr	r2, [pc, #16]	; (80055fc <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
    }
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	aaaaaaab 	.word	0xaaaaaaab

08005600 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	18ca      	adds	r2, r1, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]
    }
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005642:	b5b0      	push	{r4, r5, r7, lr}
 8005644:	b090      	sub	sp, #64	; 0x40
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8005650:	68b8      	ldr	r0, [r7, #8]
 8005652:	f001 f920 	bl	8006896 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 8005656:	4604      	mov	r4, r0
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 f91c 	bl	8006896 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 800565e:	4605      	mov	r5, r0
 8005660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fab0 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800566c:	f107 0320 	add.w	r3, r7, #32
 8005670:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f918 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800567c:	f107 0010 	add.w	r0, r7, #16
 8005680:	f107 0320 	add.w	r3, r7, #32
 8005684:	462a      	mov	r2, r5
 8005686:	4621      	mov	r1, r4
 8005688:	f001 f932 	bl	80068f0 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f107 0210 	add.w	r2, r7, #16
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f97d 	bl	8006994 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	3740      	adds	r7, #64	; 0x40
 800569e:	46bd      	mov	sp, r7
 80056a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080056a4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	10db      	asrs	r3, r3, #3
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x50>)
 80056be:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 80056c2:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d906      	bls.n	80056da <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	4619      	mov	r1, r3
 80056d4:	68b8      	ldr	r0, [r7, #8]
 80056d6:	f001 f96b 	bl	80069b0 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f103 0108 	add.w	r1, r3, #8
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f9a9 	bl	8006a3c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	aaaaaaab 	.word	0xaaaaaaab

080056f8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005706:	f107 0310 	add.w	r3, r7, #16
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fa5d 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	f001 f9a1 	bl	8006a62 <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	10db      	asrs	r3, r3, #3
 8005740:	4a0d      	ldr	r2, [pc, #52]	; (8005778 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x50>)
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8005748:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d906      	bls.n	8005760 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	4619      	mov	r1, r3
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f001 f99c 	bl	8006a98 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f103 0118 	add.w	r1, r3, #24
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff f9dd 	bl	8004b2a <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	aaaaaaab 	.word	0xaaaaaaab

0800577c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>:
      deque<_Tp, _Alloc>::
 800577c:	b5b0      	push	{r4, r5, r7, lr}
 800577e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8005782:	af04      	add	r7, sp, #16
 8005784:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8005788:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 800578c:	6020      	str	r0, [r4, #0]
 800578e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8005792:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8005796:	6001      	str	r1, [r0, #0]
 8005798:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800579c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80057a0:	600a      	str	r2, [r1, #0]
 80057a2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80057a6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80057aa:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 80057ac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057b0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f103 0208 	add.w	r2, r3, #8
 80057ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057be:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80057c2:	4611      	mov	r1, r2
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	f7fe f8e9 	bl	800399c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 80057ca:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 80057ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	f7fd f932 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80057dc:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 80057e0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80057e4:	085a      	lsrs	r2, r3, #1
 80057e6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80057ea:	429a      	cmp	r2, r3
 80057ec:	f240 8158 	bls.w	8005aa0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 80057f0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057f4:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 80057f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80057fc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005800:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	f7ff ff4d 	bl	80056a4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 800580a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800580e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f103 0208 	add.w	r2, r3, #8
 8005818:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe f9d4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8005824:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005828:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f103 0108 	add.w	r1, r3, #8
 8005832:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005836:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800583a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f973 	bl	8004b2a <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005844:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005848:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005852:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005856:	4614      	mov	r4, r2
 8005858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800585a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 800585e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005862:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8005866:	429a      	cmp	r2, r3
 8005868:	f2c0 8098 	blt.w	800599c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 800586c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005870:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f103 0108 	add.w	r1, r3, #8
 800587a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800587e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005882:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff f94f 	bl	8004b2a <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 800588c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005890:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f103 0208 	add.w	r2, r3, #8
 800589a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe f993 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80058a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80058aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe f98b 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80058b6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80058ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe f983 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						_M_get_Tp_allocator());
 80058c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80058ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe f844 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80058d6:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80058d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80058dc:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 80058e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058e4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058e8:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80058ec:	9400      	str	r4, [sp, #0]
 80058ee:	f001 f917 	bl	8006b20 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		    this->_M_impl._M_start = __new_start;
 80058f2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80058f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005900:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005904:	f103 0408 	add.w	r4, r3, #8
 8005908:	4613      	mov	r3, r2
 800590a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800590c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8005910:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe f956 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005920:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005924:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005928:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800592c:	6819      	ldr	r1, [r3, #0]
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe f94c 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005934:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005938:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe f944 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005944:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005948:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800594c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005950:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8005954:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8005958:	f001 f91b 	bl	8006b92 <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 800595c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005960:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005964:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8005968:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800596c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	f001 f863 	bl	8006a3c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005976:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800597a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800597e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005982:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005986:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 800598a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800598e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	6809      	ldr	r1, [r1, #0]
 8005996:	f7fe ff52 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 800599a:	e1dd      	b.n	8005d58 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		    _ForwardIterator __mid = __first;
 800599c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059a0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80059a4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80059a8:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 80059b0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80059b4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 f91c 	bl	8006bfe <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80059c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f103 0208 	add.w	r2, r3, #8
 80059d4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe f8f6 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80059e0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059e4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80059e8:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80059ec:	6819      	ldr	r1, [r3, #0]
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fe f8ec 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80059f4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80059f8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80059fc:	681c      	ldr	r4, [r3, #0]
 80059fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005a02:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe f8df 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						   _M_get_Tp_allocator());
 8005a0e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a12:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fd ffa0 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005a1e:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8005a20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a24:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8005a28:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a2c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005a30:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8005a34:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8005a38:	9202      	str	r2, [sp, #8]
 8005a3a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8005a3e:	9201      	str	r2, [sp, #4]
 8005a40:	9400      	str	r4, [sp, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	462a      	mov	r2, r5
 8005a46:	f001 f8ed 	bl	8006c24 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>
		    this->_M_impl._M_start = __new_start;
 8005a4a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005a58:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8005a5c:	f103 0408 	add.w	r4, r3, #8
 8005a60:	4613      	mov	r3, r2
 8005a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8005a68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a6c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a70:	681c      	ldr	r4, [r3, #0]
 8005a72:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005a76:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe f8a5 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005a82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005a86:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8005a8a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005a8e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005a92:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7fe fed0 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005a9e:	e15b      	b.n	8005d58 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8005aa0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005aa4:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8005aa8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005aac:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ab0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	f7ff fe37 	bl	8005728 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8005aba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005abe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f103 0218 	add.w	r2, r3, #24
 8005ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe f87c 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    difference_type(__length) - __elemsbefore;
 8005ad4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8005ad8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8005ae2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ae6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f103 0118 	add.w	r1, r3, #24
 8005af0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005af4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005af8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 ff9d 	bl	8006a3c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8005b02:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b06:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b14:	4614      	mov	r4, r2
 8005b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8005b1c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8005b20:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f340 8096 	ble.w	8005c56 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8005b2a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b2e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f103 0118 	add.w	r1, r3, #24
 8005b38:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8005b3c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b40:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ff79 	bl	8006a3c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8005b4a:	f107 0218 	add.w	r2, r7, #24
 8005b4e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe f839 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005b5a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b5e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005b68:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f82c 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8005b74:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b78:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8005b82:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe f81f 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      _M_get_Tp_allocator());
 8005b8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005b92:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fd fee0 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005b9e:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8005ba0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005ba4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8005ba8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005bac:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8005bb0:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8005bb4:	9400      	str	r4, [sp, #0]
 8005bb6:	f000 ffb3 	bl	8006b20 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 8005bba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bbe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005bc8:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005bcc:	f103 0418 	add.w	r4, r3, #24
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8005bd8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005bdc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005be0:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fd fff0 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005bec:	f107 0218 	add.w	r2, r7, #24
 8005bf0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd ffe8 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005bfc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c00:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd ffe0 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005c0c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8005c10:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8005c14:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8005c18:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005c1c:	f001 f842 	bl	8006ca4 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		  std::copy(__first, __last, __pos);
 8005c20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c24:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005c28:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fd ffcc 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005c34:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8005c38:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8005c3c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c40:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005c44:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8005c48:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6809      	ldr	r1, [r1, #0]
 8005c50:	f7fe fdf5 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005c54:	e080      	b.n	8005d58 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8005c56:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c5a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005c5e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005c62:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 8005c6a:	f107 0314 	add.w	r3, r7, #20
 8005c6e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ffc3 	bl	8006bfe <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005c78:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c7c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005c80:	681c      	ldr	r4, [r3, #0]
 8005c82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c86:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005c8a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd ff9b 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005c96:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005c9a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005ca4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd ff8e 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8005cb0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cb4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005cbe:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fd ff81 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 _M_get_Tp_allocator());
 8005cca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005cce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd fe42 	bl	800395e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005cda:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8005cdc:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8005ce0:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8005ce4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005ce8:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	f001 f806 	bl	8006d10 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8005d04:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d08:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d12:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8005d16:	f103 0418 	add.w	r4, r3, #24
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8005d22:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d26:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005d2a:	681c      	ldr	r4, [r3, #0]
 8005d2c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8005d30:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8005d34:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8005d38:	6819      	ldr	r1, [r3, #0]
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f7fd ff46 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8005d40:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8005d44:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8005d48:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8005d4c:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8005d50:	4622      	mov	r2, r4
 8005d52:	6809      	ldr	r1, [r1, #0]
 8005d54:	f7fe fd73 	bl	800483e <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8005d58:	bf00      	nop
 8005d5a:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bdb0      	pop	{r4, r5, r7, pc}

08005d62 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005d62:	b5b0      	push	{r4, r5, r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fe fe40 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d74:	4605      	mov	r5, r0
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	2018      	movs	r0, #24
 8005d7c:	f7fb f875 	bl	8000e6a <_ZnwjPv>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461c      	mov	r4, r3
 8005d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005d8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bdb0      	pop	{r4, r5, r7, pc}

08005d98 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f8f7 	bl	8005f96 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8005da8:	4603      	mov	r3, r0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fff0 	bl	8006d90 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d904      	bls.n	8005de2 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8005dd8:	2201      	movs	r2, #1
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fff1 	bl	8006dc4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005dea:	b590      	push	{r4, r7, lr}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005df2:	687c      	ldr	r4, [r7, #4]
 8005df4:	2018      	movs	r0, #24
 8005df6:	f7fb f844 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f001 f87a 	bl	8006ef8 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 8005e04:	4603      	mov	r3, r0
      }
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}

08005e0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f103 0218 	add.w	r2, r3, #24
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d10a      	bne.n	8005e44 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv+0x36>
	    _M_set_node(_M_node + 1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fe fe53 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	return *this;
 8005e44:	687b      	ldr	r3, [r7, #4]
      }
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f001 f859 	bl	8006f16 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	10db      	asrs	r3, r3, #3
 8005e82:	4a2b      	ldr	r2, [pc, #172]	; (8005f30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db08      	blt.n	8005ea8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8005e96:	f7fe fe40 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	da01      	bge.n	8005ea8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6819      	ldr	r1, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	18ca      	adds	r2, r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e02f      	b.n	8005f24 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd07      	ble.n	8005eda <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 8005eca:	f7fe fe26 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ed8:	e007      	b.n	8005eea <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8005ede:	f7fe fe1c 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8005ee8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8005eea:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fe fdf2 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8005f02:	f7fe fe0a 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8005f06:	4603      	mov	r3, r0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	18e2      	adds	r2, r4, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	return *this;
 8005f24:	687b      	ldr	r3, [r7, #4]
      }
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	aaaaaaab 	.word	0xaaaaaaab

08005f34 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	60da      	str	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005f82:	2200      	movs	r2, #0
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 ffd8 	bl	8006f3c <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ffde 	bl	8006f78 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4619      	mov	r1, r3
 8005fee:	68b8      	ldr	r0, [r7, #8]
 8005ff0:	f016 fe5e 	bl	801ccb0 <_ZdlPvj>
      }
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006000:	2018      	movs	r0, #24
 8006002:	f7fa ff3e 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8006006:	4603      	mov	r3, r0
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}

0800600c <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800600c:	b5b0      	push	{r4, r5, r7, lr}
 800600e:	b08c      	sub	sp, #48	; 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 ffb9 	bl	8006f8e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800601c:	4602      	mov	r2, r0
 800601e:	f107 0308 	add.w	r3, r7, #8
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f000 ffe1 	bl	8006fec <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 800602a:	6838      	ldr	r0, [r7, #0]
 800602c:	f000 ffaf 	bl	8006f8e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006030:	4602      	mov	r2, r0
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	461c      	mov	r4, r3
 8006036:	4615      	mov	r5, r2
 8006038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800603a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800603e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006040:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006044:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4618      	mov	r0, r3
 800604e:	f000 ff9e 	bl	8006f8e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	461c      	mov	r4, r3
 8006058:	4615      	mov	r5, r2
 800605a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800605c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800605e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006062:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006066:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800606a:	bf00      	nop
 800606c:	3730      	adds	r7, #48	; 0x30
 800606e:	46bd      	mov	sp, r7
 8006070:	bdb0      	pop	{r4, r5, r7, pc}

08006072 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8006072:	b590      	push	{r4, r7, lr}
 8006074:	b08b      	sub	sp, #44	; 0x2c
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fc fe7d 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006088:	f107 0318 	add.w	r3, r7, #24
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fc fe5d 	bl	8002d4e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fc fe68 	bl	8002d6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800609c:	4603      	mov	r3, r0
 800609e:	f107 0218 	add.w	r2, r7, #24
 80060a2:	f107 0108 	add.w	r1, r7, #8
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc fe87 	bl	8002dba <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80060b8:	3304      	adds	r3, #4
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fc fe02 	bl	8002cc4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	f103 0418 	add.w	r4, r3, #24
 80060c8:	4613      	mov	r3, r2
 80060ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80060d0:	bf00      	nop
 80060d2:	372c      	adds	r7, #44	; 0x2c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}

080060d8 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80060e4:	68b8      	ldr	r0, [r7, #8]
 80060e6:	f000 ffa0 	bl	800702a <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80060f2:	b5b0      	push	{r4, r5, r7, lr}
 80060f4:	b08c      	sub	sp, #48	; 0x30
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 ff9f 	bl	8007040 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006102:	4602      	mov	r2, r0
 8006104:	f107 0308 	add.w	r3, r7, #8
 8006108:	4611      	mov	r1, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 ffc7 	bl	800709e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8006110:	6838      	ldr	r0, [r7, #0]
 8006112:	f000 ff95 	bl	8007040 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	461c      	mov	r4, r3
 800611c:	4615      	mov	r5, r2
 800611e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006126:	e895 0003 	ldmia.w	r5, {r0, r1}
 800612a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800612e:	f107 0308 	add.w	r3, r7, #8
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff84 	bl	8007040 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8006138:	4602      	mov	r2, r0
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	461c      	mov	r4, r3
 800613e:	4615      	mov	r5, r2
 8006140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006148:	e895 0003 	ldmia.w	r5, {r0, r1}
 800614c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8006150:	bf00      	nop
 8006152:	3730      	adds	r7, #48	; 0x30
 8006154:	46bd      	mov	sp, r7
 8006156:	bdb0      	pop	{r4, r5, r7, pc}

08006158 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b08b      	sub	sp, #44	; 0x2c
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fc fead 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800616e:	f107 0318 	add.w	r3, r7, #24
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fc fe8d 	bl	8002e94 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fc fe98 	bl	8002eb2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8006182:	4603      	mov	r3, r0
 8006184:	f107 0218 	add.w	r2, r7, #24
 8006188:	f107 0108 	add.w	r1, r7, #8
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fc feb7 	bl	8002f00 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 800619e:	3304      	adds	r3, #4
 80061a0:	461a      	mov	r2, r3
 80061a2:	f7fd ff73 	bl	800408c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	f103 0418 	add.w	r4, r3, #24
 80061ae:	4613      	mov	r3, r2
 80061b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80061b6:	bf00      	nop
 80061b8:	372c      	adds	r7, #44	; 0x2c
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd90      	pop	{r4, r7, pc}

080061be <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80061ca:	68b8      	ldr	r0, [r7, #8]
 80061cc:	f000 ff86 	bl	80070dc <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80061d8:	b5b0      	push	{r4, r5, r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 ff85 	bl	80070f2 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80061e8:	4602      	mov	r2, r0
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 ffad 	bl	8007150 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80061f6:	6838      	ldr	r0, [r7, #0]
 80061f8:	f000 ff7b 	bl	80070f2 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	461c      	mov	r4, r3
 8006202:	4615      	mov	r5, r2
 8006204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800620a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006210:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006214:	f107 0308 	add.w	r3, r7, #8
 8006218:	4618      	mov	r0, r3
 800621a:	f000 ff6a 	bl	80070f2 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800621e:	4602      	mov	r2, r0
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	461c      	mov	r4, r3
 8006224:	4615      	mov	r5, r2
 8006226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800622c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006232:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8006236:	bf00      	nop
 8006238:	3730      	adds	r7, #48	; 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bdb0      	pop	{r4, r5, r7, pc}

0800623e <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800624a:	68b8      	ldr	r0, [r7, #8]
 800624c:	f000 ff9f 	bl	800718e <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 ff9d 	bl	80071a4 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4293      	cmp	r3, r2
 8006270:	bf8c      	ite	hi
 8006272:	2301      	movhi	r3, #1
 8006274:	2300      	movls	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800627c:	f016 fd2b 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f016 fd15 	bl	801ccb4 <_Znwj>
 800628a:	4603      	mov	r3, r0
      }
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4619      	mov	r1, r3
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f016 fcff 	bl	801ccb0 <_ZdlPvj>
      }
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 ff6d 	bl	80071bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	60da      	str	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006338:	2200      	movs	r2, #0
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 ff55 	bl	80071ec <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 8006342:	4603      	mov	r3, r0
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006350:	2010      	movs	r0, #16
 8006352:	f7fa fd96 	bl	8000e82 <_ZSt16__deque_buf_sizej>
 8006356:	4603      	mov	r3, r0
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 ff5b 	bl	8007228 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 ff54 	bl	8007248 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4619      	mov	r1, r3
 80063d2:	68b8      	ldr	r0, [r7, #8]
 80063d4:	f016 fc6c 	bl	801ccb0 <_ZdlPvj>
      }
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ff36 	bl	800725e <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 ff43 	bl	800728e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8006408:	4603      	mov	r3, r0
      }
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d201      	bcs.n	800642c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	e000      	b.n	800642e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800642c:	687b      	ldr	r3, [r7, #4]
    }
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800643a:	b590      	push	{r4, r7, lr}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 ff2d 	bl	80072a6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 800644c:	4604      	mov	r4, r0
 800644e:	68b8      	ldr	r0, [r7, #8]
 8006450:	f000 ff29 	bl	80072a6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006454:	4603      	mov	r3, r0
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4619      	mov	r1, r3
 800645a:	4620      	mov	r0, r4
 800645c:	f000 ff2e 	bl	80072bc <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006460:	4603      	mov	r3, r0
    }
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}

0800646a <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800646a:	b590      	push	{r4, r7, lr}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 ff15 	bl	80072a6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 800647c:	4604      	mov	r4, r0
 800647e:	68b8      	ldr	r0, [r7, #8]
 8006480:	f000 ff11 	bl	80072a6 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8006484:	4603      	mov	r3, r0
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4619      	mov	r1, r3
 800648a:	4620      	mov	r0, r4
 800648c:	f000 ff39 	bl	8007302 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8006490:	4603      	mov	r3, r0
    }
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	bd90      	pop	{r4, r7, pc}

0800649a <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 ff4e 	bl	8007348 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf8c      	ite	hi
 80064b4:	2301      	movhi	r3, #1
 80064b6:	2300      	movls	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80064be:	f016 fc0a 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f016 fbf1 	bl	801ccb4 <_Znwj>
 80064d2:	4603      	mov	r3, r0
      }
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80064e6:	f7ff ff31 	bl	800634c <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80064ea:	4603      	mov	r3, r0
 80064ec:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	109b      	asrs	r3, r3, #2
 80064fa:	3b01      	subs	r3, #1
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6811      	ldr	r1, [r2, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6852      	ldr	r2, [r2, #4]
 8006508:	1a8a      	subs	r2, r1, r2
 800650a:	1112      	asrs	r2, r2, #4
 800650c:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	6891      	ldr	r1, [r2, #8]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	1a8a      	subs	r2, r1, r2
 8006518:	1112      	asrs	r2, r2, #4
 800651a:	4413      	add	r3, r2
      }
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800652c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006530:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 ff16 	bl	8007364 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8006538:	4603      	mov	r3, r0
 800653a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800653c:	f107 0208 	add.w	r2, r7, #8
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff63 	bl	8006412 <_ZSt3minIjERKT_S2_S2_>
 800654c:	4603      	mov	r3, r0
 800654e:	681b      	ldr	r3, [r3, #0]
      }
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b08b      	sub	sp, #44	; 0x2c
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	109b      	asrs	r3, r3, #2
 8006572:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006574:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	4413      	add	r3, r2
 800657c:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	429a      	cmp	r2, r3
 8006588:	d92d      	bls.n	80065e6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	1acb      	subs	r3, r1, r3
 8006596:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006598:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	e000      	b.n	80065a8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80065a6:	2300      	movs	r3, #0
 80065a8:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80065aa:	4413      	add	r3, r2
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d209      	bcs.n	80065cc <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80065c0:	3304      	adds	r3, #4
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	4619      	mov	r1, r3
 80065c6:	f000 fed9 	bl	800737c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 80065ca:	e048      	b.n	800665e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80065d4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	4413      	add	r3, r2
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fee4 	bl	80073ac <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 80065e4:	e03b      	b.n	800665e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3304      	adds	r3, #4
 80065ee:	f107 0208 	add.w	r2, r7, #8
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fd fbc6 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 80065fa:	4603      	mov	r3, r0
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006600:	3302      	adds	r3, #2
 8006602:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fc8e 	bl	8004f2a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 800660e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	e000      	b.n	8006628 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006626:	2300      	movs	r3, #0
 8006628:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4413      	add	r3, r2
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006638:	3304      	adds	r3, #4
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	4619      	mov	r1, r3
 800663e:	f000 fe9d 	bl	800737c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6819      	ldr	r1, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	461a      	mov	r2, r3
 800664e:	f7fd fd37 	bl	80040c0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3308      	adds	r3, #8
 8006662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fc97 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f103 0018 	add.w	r0, r3, #24
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	4413      	add	r3, r2
 800667e:	4619      	mov	r1, r3
 8006680:	f7fe fc8a 	bl	8004f98 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006684:	bf00      	nop
 8006686:	372c      	adds	r7, #44	; 0x2c
 8006688:	46bd      	mov	sp, r7
 800668a:	bd90      	pop	{r4, r7, pc}

0800668c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006696:	2200      	movs	r2, #0
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fe9e 	bl	80073dc <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 80066a0:	4603      	mov	r3, r0
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 feb0 	bl	8007418 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80066b8:	4603      	mov	r3, r0
      }
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
 80066d0:	f107 030f 	add.w	r3, r7, #15
 80066d4:	461a      	mov	r2, r3
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fea9 	bl	8007430 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80066de:	4603      	mov	r3, r0
	}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 feb6 	bl	8007466 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80066fa:	4602      	mov	r2, r0
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4293      	cmp	r3, r2
 8006700:	bf8c      	ite	hi
 8006702:	2301      	movhi	r3, #1
 8006704:	2300      	movls	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800670c:	f016 fae3 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006710:	68b8      	ldr	r0, [r7, #8]
 8006712:	f016 facf 	bl	801ccb4 <_Znwj>
 8006716:	4603      	mov	r3, r0
      }
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006720:	b5b0      	push	{r4, r5, r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7fe fee6 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8006734:	4604      	mov	r4, r0
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f7fe fee2 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 800673c:	4605      	mov	r5, r0
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe fede 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8006744:	4602      	mov	r2, r0
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	4629      	mov	r1, r5
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fe97 	bl	800747e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006750:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bdb0      	pop	{r4, r5, r7, pc}

0800675a <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006764:	463b      	mov	r3, r7
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fea4 	bl	80074b4 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800676c:	4603      	mov	r3, r0
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fe99 	bl	80074ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8006798:	4603      	mov	r3, r0
    }
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fe99 	bl	80074ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fe8b 	bl	800751a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006804:	4603      	mov	r3, r0
    }
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4413      	add	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	f107 020c 	add.w	r2, r7, #12
 8006826:	f107 0308 	add.w	r3, r7, #8
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd fefe 	bl	800462e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fe64 	bl	800751a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006852:	4603      	mov	r3, r0
    }
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fc fc98 	bl	800319e <_ZNSaIhEC1ERKS_>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	f7fc fb70 	bl	8002f56 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <_ZSt12__niter_baseIPK8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __niter_base(_Iterator __it)
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
    { return __it; }
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fd f987 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	da01      	bge.n	80068e0 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	e000      	b.n	80068e2 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80068e0:	687b      	ldr	r3, [r7, #4]
    }
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	10db      	asrs	r3, r3, #3
 8006906:	4a22      	ldr	r2, [pc, #136]	; (8006990 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dd34      	ble.n	800697e <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	10db      	asrs	r3, r3, #3
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	f107 0218 	add.w	r2, r7, #24
 800692c:	f107 0314 	add.w	r3, r7, #20
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ffc7 	bl	80068c6 <_ZSt3minIiERKT_S2_S2_>
 8006938:	4603      	mov	r3, r0
	  const difference_type __clen
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	4613      	mov	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	461a      	mov	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	1899      	adds	r1, r3, r2
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	68b8      	ldr	r0, [r7, #8]
 8006956:	f000 fdfa 	bl	800754e <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
				       __result._M_cur);

	  __first += __clen;
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	461a      	mov	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 800696c:	69f9      	ldr	r1, [r7, #28]
 800696e:	6838      	ldr	r0, [r7, #0]
 8006970:	f7ff fa7c 	bl	8005e6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 800697c:	e7c7      	b.n	800690e <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7fd f923 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	aaaaaaab 	.word	0xaaaaaaab

08006994 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
    { return __res; }
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7fd f912 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f9ec 	bl	8005d98 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 80069c0:	4604      	mov	r4, r0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fc f83c 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80069c8:	4603      	mov	r3, r0
 80069ca:	1ae3      	subs	r3, r4, r3
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	bf8c      	ite	hi
 80069d2:	2301      	movhi	r3, #1
 80069d4:	2300      	movls	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 80069dc:	4816      	ldr	r0, [pc, #88]	; (8006a38 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x88>)
 80069de:	f016 f97d 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80069e2:	f7ff fb0b 	bl	8005ffc <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	4413      	add	r3, r2
 80069ec:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 80069ee:	f7ff fb05 	bl	8005ffc <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80069f2:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80069f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80069f8:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff f9dc 	bl	8005dba <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006a02:	2301      	movs	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d80f      	bhi.n	8006a2e <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	425b      	negs	r3, r3
 8006a1a:	18d4      	adds	r4, r2, r3
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	f7ff f9e4 	bl	8005dea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8006a22:	4603      	mov	r3, r0
 8006a24:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e7eb      	b.n	8006a06 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x56>
    }
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd90      	pop	{r4, r7, pc}
 8006a36:	bf00      	nop
 8006a38:	0801e364 	.word	0x0801e364

08006a3c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7fd f8be 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp -= __n;
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fd8b 	bl	800756e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	return __tmp;
 8006a58:	bf00      	nop
      }
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b08a      	sub	sp, #40	; 0x28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd f8a5 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	f000 fd7f 	bl	800758e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>
    }
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	3728      	adds	r7, #40	; 0x28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff f978 	bl	8005d98 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fb ffc8 	bl	8002a40 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	1ae3      	subs	r3, r4, r3
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	bf8c      	ite	hi
 8006aba:	2301      	movhi	r3, #1
 8006abc:	2300      	movls	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8006ac4:	4815      	ldr	r0, [pc, #84]	; (8006b1c <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x84>)
 8006ac6:	f016 f909 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006aca:	f7ff fa97 	bl	8005ffc <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8006ad6:	f7ff fa91 	bl	8005ffc <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 8006ada:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8006adc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ae0:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fd79 	bl	80075dc <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006aea:	2301      	movs	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d80e      	bhi.n	8006b14 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	18d4      	adds	r4, r2, r3
 8006b02:	4608      	mov	r0, r1
 8006b04:	f7ff f971 	bl	8005dea <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e7ec      	b.n	8006aee <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x56>
    }
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd90      	pop	{r4, r7, pc}
 8006b1c:	0801e384 	.word	0x0801e384

08006b20 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b09b      	sub	sp, #108	; 0x6c
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8006b2e:	f107 0320 	add.w	r3, r7, #32
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fd f849 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b3a:	f107 0310 	add.w	r3, r7, #16
 8006b3e:	f107 0220 	add.w	r2, r7, #32
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd64 	bl	8007612 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd f83b 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fd56 	bl	8007612 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8006b66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fd f82d 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006b78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b7c:	f107 0110 	add.w	r1, r7, #16
 8006b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4623      	mov	r3, r4
 8006b86:	f000 fd6d 	bl	8007664 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>
    }
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	3764      	adds	r7, #100	; 0x64
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd90      	pop	{r4, r7, pc}

08006b92 <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move(_II __first, _II __last, _OI __result)
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b098      	sub	sp, #96	; 0x60
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8006ba0:	f107 0320 	add.w	r3, r7, #32
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fd f810 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	f107 0220 	add.w	r2, r7, #32
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fd7a 	bl	80076b0 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd f802 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bcc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fd6c 	bl	80076b0 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fc fff4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006bea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006bee:	f107 0110 	add.w	r1, r7, #16
 8006bf2:	f000 fd6a 	bl	80076ca <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	3760      	adds	r7, #96	; 0x60
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8006bfe:	b590      	push	{r4, r7, lr}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fd fe36 	bl	800487e <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8006c12:	4622      	mov	r2, r4
 8006c14:	68f9      	ldr	r1, [r7, #12]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fe fcf2 	bl	8005600 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd90      	pop	{r4, r7, pc}

08006c24 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b0a3      	sub	sp, #140	; 0x8c
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8006c32:	f107 0320 	add.w	r3, r7, #32
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fc ffc7 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fc ffc1 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c4e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fc ffba 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c58:	f107 0010 	add.w	r0, r7, #16
 8006c5c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006c60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c64:	f107 0120 	add.w	r1, r7, #32
 8006c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	4623      	mov	r3, r4
 8006c70:	f7ff ff56 	bl	8006b20 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8006c74:	f107 0210 	add.w	r2, r7, #16
 8006c78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fc ffa4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	f7fe fd2e 	bl	80056f8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
    }
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	3784      	adds	r7, #132	; 0x84
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd90      	pop	{r4, r7, pc}

08006ca4 <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b098      	sub	sp, #96	; 0x60
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
					       __result);
 8006cb2:	f107 0320 	add.w	r3, r7, #32
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fc ff87 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cbe:	f107 0310 	add.w	r3, r7, #16
 8006cc2:	f107 0220 	add.w	r2, r7, #32
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fcf1 	bl	80076b0 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc ff79 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fce3 	bl	80076b0 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8006cea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fc ff6b 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006cfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d00:	f107 0110 	add.w	r1, r7, #16
 8006d04:	f000 fd27 	bl	8007756 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	3760      	adds	r7, #96	; 0x60
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8006d10:	b590      	push	{r4, r7, lr}
 8006d12:	b0a3      	sub	sp, #140	; 0x8c
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8006d1e:	f107 0320 	add.w	r3, r7, #32
 8006d22:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fc ff50 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d2c:	f107 0010 	add.w	r0, r7, #16
 8006d30:	f107 0220 	add.w	r2, r7, #32
 8006d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	f7fe fcda 	bl	80056f8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8006d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fc ff3e 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fc ff37 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d5e:	f107 0210 	add.w	r2, r7, #16
 8006d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fc ff2f 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006d74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	4623      	mov	r3, r4
 8006d84:	f7ff fecc 	bl	8006b20 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
    }
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	3784      	adds	r7, #132	; 0x84
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd90      	pop	{r4, r7, pc}

08006d90 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006d98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d9c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fd1f 	bl	80077e2 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 8006da4:	4603      	mov	r3, r0
 8006da6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006da8:	f107 0208 	add.w	r2, r7, #8
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fb2d 	bl	8006412 <_ZSt3minIjERKT_S2_S2_>
 8006db8:	4603      	mov	r3, r0
 8006dba:	681b      	ldr	r3, [r3, #0]
      }
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b08b      	sub	sp, #44	; 0x2c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	109b      	asrs	r3, r3, #2
 8006dde:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006de0:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	4413      	add	r3, r2
 8006de8:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d92d      	bls.n	8006e52 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1acb      	subs	r3, r1, r3
 8006e02:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006e04:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	e000      	b.n	8006e14 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8006e12:	2300      	movs	r3, #0
 8006e14:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006e16:	4413      	add	r3, r2
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d209      	bcs.n	8006e38 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e30:	4619      	mov	r1, r3
 8006e32:	f000 fce2 	bl	80077fa <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006e36:	e048      	b.n	8006eca <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e40:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e48:	4413      	add	r3, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f000 fced 	bl	800782a <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8006e50:	e03b      	b.n	8006eca <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	f107 0208 	add.w	r2, r7, #8
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fc ff90 	bl	8003d86 <_ZSt3maxIjERKT_S2_S2_>
 8006e66:	4603      	mov	r3, r0
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	69b9      	ldr	r1, [r7, #24]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd fea7 	bl	8004bc8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8006e7a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	e000      	b.n	8006e94 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8006e92:	2300      	movs	r3, #0
 8006e94:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4413      	add	r3, r2
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f000 fca6 	bl	80077fa <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f7fc fe4d 	bl	8003b58 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd fe06 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f103 0018 	add.w	r0, r3, #24
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	4413      	add	r3, r2
 8006eea:	4619      	mov	r1, r3
 8006eec:	f7fd fdf9 	bl	8004ae2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8006ef0:	bf00      	nop
 8006ef2:	372c      	adds	r7, #44	; 0x2c
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}

08006ef8 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006f02:	2200      	movs	r2, #0
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fca7 	bl	800785a <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f015 febe 	bl	801ccb0 <_ZdlPvj>
      }
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fca7 	bl	800789c <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4293      	cmp	r3, r2
 8006f54:	bf8c      	ite	hi
 8006f56:	2301      	movhi	r3, #1
 8006f58:	2300      	movls	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006f60:	f015 feb9 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f015 fea3 	bl	801ccb4 <_Znwj>
 8006f6e:	4603      	mov	r3, r0
      }
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 0208 	add.w	r2, r3, #8
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7fb fed9 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f103 0218 	add.w	r2, r3, #24
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	3318      	adds	r3, #24
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7fb fed0 	bl	8002d82 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	b08c      	sub	sp, #48	; 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff ffd3 	bl	8006fa4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8006ffe:	f107 0308 	add.w	r3, r7, #8
 8007002:	4618      	mov	r0, r3
 8007004:	f7fc fe9b 	bl	8003d3e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	461d      	mov	r5, r3
 800700c:	f107 0408 	add.w	r4, r7, #8
 8007010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800701c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4618      	mov	r0, r3
 8007024:	3730      	adds	r7, #48	; 0x30
 8007026:	46bd      	mov	sp, r7
 8007028:	bdb0      	pop	{r4, r5, r7, pc}

0800702a <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	605a      	str	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0208 	add.w	r2, r3, #8
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fb ff23 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 0218 	add.w	r2, r3, #24
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	3318      	adds	r3, #24
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fb ff1a 	bl	8002ec8 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 800709e:	b5b0      	push	{r4, r5, r7, lr}
 80070a0:	b08c      	sub	sp, #48	; 0x30
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ffd3 	bl	8007056 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fd ff14 	bl	8004ee2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	461d      	mov	r5, r3
 80070be:	f107 0408 	add.w	r4, r7, #8
 80070c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bdb0      	pop	{r4, r5, r7, pc}

080070dc <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	605a      	str	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f103 0208 	add.w	r2, r3, #8
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fc fd4c 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f103 0218 	add.w	r2, r3, #24
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	3318      	adds	r3, #24
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fc fd43 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8007150:	b5b0      	push	{r4, r5, r7, lr}
 8007152:	b08c      	sub	sp, #48	; 0x30
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ffd3 	bl	8007108 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fd0a 	bl	8004b80 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	461d      	mov	r5, r3
 8007170:	f107 0408 	add.w	r4, r7, #8
 8007174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800717a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800717c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007180:	e885 0003 	stmia.w	r5, {r0, r1}
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4618      	mov	r0, r3
 8007188:	3730      	adds	r7, #48	; 0x30
 800718a:	46bd      	mov	sp, r7
 800718c:	bdb0      	pop	{r4, r5, r7, pc}

0800718e <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80071ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d00a      	beq.n	80071e4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb70 	bl	80078b4 <_ZSt11__addressofI7RequestEPT_RS1_>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fb77 	bl	80078ca <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3314      	adds	r3, #20
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e7f0      	b.n	80071c6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fb71 	bl	80078e0 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 80071fe:	4602      	mov	r2, r0
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4293      	cmp	r3, r2
 8007204:	bf8c      	ite	hi
 8007206:	2301      	movhi	r3, #1
 8007208:	2300      	movls	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007210:	f015 fd61 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f015 fd4b 	bl	801ccb4 <_Znwj>
 800721e:	4603      	mov	r3, r0
      }
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	68b8      	ldr	r0, [r7, #8]
 800723c:	f015 fd38 	bl	801ccb0 <_ZdlPvj>
      }
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d00a      	beq.n	8007286 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fb41 	bl	80078f8 <_ZSt11__addressofI8ResponceEPT_RS1_>
 8007276:	4603      	mov	r3, r0
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fb48 	bl	800790e <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3310      	adds	r3, #16
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e7f0      	b.n	8007268 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f856 	bl	8007348 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 800729c:	4603      	mov	r3, r0
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fb2b 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072ce:	4604      	mov	r4, r0
 80072d0:	68b8      	ldr	r0, [r7, #8]
 80072d2:	f000 fb27 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072d6:	4605      	mov	r5, r0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fb22 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	4629      	mov	r1, r5
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 fb27 	bl	800793a <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80072ec:	4602      	mov	r2, r0
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fb31 	bl	800795a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80072f8:	4603      	mov	r3, r0
    }
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bdb0      	pop	{r4, r5, r7, pc}

08007302 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007302:	b5b0      	push	{r4, r5, r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fb08 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007314:	4604      	mov	r4, r0
 8007316:	68b8      	ldr	r0, [r7, #8]
 8007318:	f000 fb04 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800731c:	4605      	mov	r5, r0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 faff 	bl	8007924 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8007326:	4603      	mov	r3, r0
 8007328:	461a      	mov	r2, r3
 800732a:	4629      	mov	r1, r5
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fb20 	bl	8007972 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007332:	4602      	mov	r2, r0
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb0e 	bl	800795a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 800733e:	4603      	mov	r3, r0
    }
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bdb0      	pop	{r4, r5, r7, pc}

08007348 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	06666666 	.word	0x06666666

08007364 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb10 	bl	8007992 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8007372:	4603      	mov	r3, r0
      }
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fb0e 	bl	80079aa <_ZSt12__miter_baseIPP8ResponceET_S3_>
 800738e:	4604      	mov	r4, r0
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f000 fb0a 	bl	80079aa <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8007396:	4603      	mov	r3, r0
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4619      	mov	r1, r3
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fb0f 	bl	80079c0 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80073a2:	4603      	mov	r3, r0
    }
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd90      	pop	{r4, r7, pc}

080073ac <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80073ac:	b590      	push	{r4, r7, lr}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 faf6 	bl	80079aa <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80073be:	4604      	mov	r4, r0
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f000 faf2 	bl	80079aa <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80073c6:	4603      	mov	r3, r0
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4619      	mov	r1, r3
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fb1a 	bl	8007a06 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80073d2:	4603      	mov	r3, r0
    }
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}

080073dc <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fb2f 	bl	8007a4c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bf8c      	ite	hi
 80073f6:	2301      	movhi	r3, #1
 80073f8:	2300      	movls	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007400:	f015 fc69 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4618      	mov	r0, r3
 800740a:	f015 fc53 	bl	801ccb4 <_Znwj>
 800740e:	4603      	mov	r3, r0
      }
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f820 	bl	8007466 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8007426:	4603      	mov	r3, r0
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800743c:	68fc      	ldr	r4, [r7, #12]
 800743e:	68b8      	ldr	r0, [r7, #8]
 8007440:	f7f9 fd08 	bl	8000e54 <_ZSt17__size_to_integerj>
 8007444:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8007446:	f107 030c 	add.w	r3, r7, #12
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fb0a 	bl	8007a64 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8007450:	4633      	mov	r3, r6
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	4629      	mov	r1, r5
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fb0f 	bl	8007a7a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 800745c:	4603      	mov	r3, r0
    }
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007466 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800746e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd05      	ble.n	80074a6 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	461a      	mov	r2, r3
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f015 fca9 	bl	801cdf8 <memmove>
      return __result + __count;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
    }
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fae8 	bl	8007ab0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80074ea:	b590      	push	{r4, r7, lr}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7fd f8a9 	bl	800464e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80074fc:	4604      	mov	r4, r0
 80074fe:	68b8      	ldr	r0, [r7, #8]
 8007500:	f7fd f8a5 	bl	800464e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8007504:	4603      	mov	r3, r0
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4619      	mov	r1, r3
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fae8 	bl	8007ae0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8007510:	4603      	mov	r3, r0
    }
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bd90      	pop	{r4, r7, pc}

0800751a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	461a      	mov	r2, r3
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f015 fc5c 	bl	801cdf8 <memmove>
	  return __result + _Num;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
	}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fae1 	bl	8007b26 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
 8007564:	4603      	mov	r3, r0
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	425b      	negs	r3, r3
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fe fc74 	bl	8005e6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
 8007584:	4603      	mov	r3, r0
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800758e:	b580      	push	{r7, lr}
 8007590:	b08c      	sub	sp, #48	; 0x30
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
 800759a:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7fc fb14 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d012      	beq.n	80075d2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x44>
		std::_Construct(std::__addressof(*__cur), *__first);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7fd facf 	bl	8004b50 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 80075b2:	4603      	mov	r3, r0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fac6 	bl	8007b46 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 80075ba:	4603      	mov	r3, r0
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 facc 	bl	8007b5c <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	3318      	adds	r3, #24
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7fe fc1f 	bl	8005e0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 80075d0:	e7e8      	b.n	80075a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x16>
	      return __cur;
 80075d2:	bf00      	nop
	}
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	6809      	ldr	r1, [r1, #0]
 80075f6:	1a41      	subs	r1, r0, r1
 80075f8:	1089      	asrs	r1, r1, #2
 80075fa:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d904      	bls.n	800760a <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8007600:	2200      	movs	r2, #0
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fbdd 	bl	8006dc4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>:
    make_move_iterator(_Iterator __i)
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800761c:	6838      	ldr	r0, [r7, #0]
 800761e:	f000 fab7 	bl	8007b90 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 8007622:	4602      	mov	r2, r0
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7fc face 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fab5 	bl	8007ba6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>:
    class move_iterator
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7fc fab9 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007664:	b580      	push	{r7, lr}
 8007666:	b090      	sub	sp, #64	; 0x40
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007672:	f107 0310 	add.w	r3, r7, #16
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff ffe3 	bl	8007644 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 800767e:	f107 0320 	add.w	r3, r7, #32
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff ffdd 	bl	8007644 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 800768a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f7fc fa9b 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769c:	f107 0220 	add.w	r2, r7, #32
 80076a0:	f107 0110 	add.w	r1, r7, #16
 80076a4:	f000 fa92 	bl	8007bcc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	3740      	adds	r7, #64	; 0x40
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __miter_base(_Iterator __it)
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
    { return __it; }
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7fc fa85 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b0a0      	sub	sp, #128	; 0x80
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80076d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fc fa74 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80076e4:	f107 0320 	add.w	r3, r7, #32
 80076e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff f8dc 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80076f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fc fa66 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007704:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff f8ce 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007710:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f7fc fa58 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800771c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007720:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff f8c0 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800772c:	f107 0010 	add.w	r0, r7, #16
 8007730:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007734:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007738:	f107 0120 	add.w	r1, r7, #32
 800773c:	f000 fa6f 	bl	8007c1e <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f107 0210 	add.w	r2, r7, #16
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff f923 	bl	8006994 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	3780      	adds	r7, #128	; 0x80
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007756:	b580      	push	{r7, lr}
 8007758:	b0a0      	sub	sp, #128	; 0x80
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8007764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4618      	mov	r0, r3
 800776c:	f7fc fa2e 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007770:	f107 0320 	add.w	r3, r7, #32
 8007774:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff f896 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8007780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fc fa20 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800778c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007790:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff f888 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 800779c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc fa12 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80077a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80077ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff f87a 	bl	80068ac <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80077b8:	f107 0010 	add.w	r0, r7, #16
 80077bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80077c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80077c4:	f107 0120 	add.w	r1, r7, #32
 80077c8:	f000 fa4f 	bl	8007c6a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f107 0210 	add.w	r2, r7, #16
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f8dd 	bl	8006994 <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	3780      	adds	r7, #128	; 0x80
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa63 	bl	8007cb6 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 80077f0:	4603      	mov	r3, r0
      }
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80077fa:	b590      	push	{r4, r7, lr}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 fa61 	bl	8007cce <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 800780c:	4604      	mov	r4, r0
 800780e:	68b8      	ldr	r0, [r7, #8]
 8007810:	f000 fa5d 	bl	8007cce <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8007814:	4603      	mov	r3, r0
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	4619      	mov	r1, r3
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fa62 	bl	8007ce4 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007820:	4603      	mov	r3, r0
    }
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	bd90      	pop	{r4, r7, pc}

0800782a <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800782a:	b590      	push	{r4, r7, lr}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fa49 	bl	8007cce <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 800783c:	4604      	mov	r4, r0
 800783e:	68b8      	ldr	r0, [r7, #8]
 8007840:	f000 fa45 	bl	8007cce <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8007844:	4603      	mov	r3, r0
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4619      	mov	r1, r3
 800784a:	4620      	mov	r0, r4
 800784c:	f000 fa6d 	bl	8007d2a <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007850:	4603      	mov	r3, r0
    }
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	bd90      	pop	{r4, r7, pc}

0800785a <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fa82 	bl	8007d70 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 800786c:	4602      	mov	r2, r0
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4293      	cmp	r3, r2
 8007872:	bf8c      	ite	hi
 8007874:	2301      	movhi	r3, #1
 8007876:	2300      	movls	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800787e:	f015 fa2a 	bl	801ccd6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4613      	mov	r3, r2
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	4413      	add	r3, r2
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4618      	mov	r0, r3
 800788e:	f015 fa11 	bl	801ccb4 <_Znwj>
 8007892:	4603      	mov	r3, r0
      }
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80078a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7f9 fd0c 	bl	80012f0 <_ZN7RequestD1Ev>
    }
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80078e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7f9 fbce 	bl	80010b8 <_ZN8ResponceD1Ev>
    }
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	68b9      	ldr	r1, [r7, #8]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fa1e 	bl	8007d8c <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007950:	4603      	mov	r3, r0
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fa12 	bl	8007dac <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f856 	bl	8007a4c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80079c0:	b5b0      	push	{r4, r5, r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f9fd 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079d2:	4604      	mov	r4, r0
 80079d4:	68b8      	ldr	r0, [r7, #8]
 80079d6:	f000 f9f9 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079da:	4605      	mov	r5, r0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f9f4 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	4629      	mov	r1, r5
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f9f9 	bl	8007de2 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80079f0:	4602      	mov	r2, r0
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fa03 	bl	8007e02 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 80079fc:	4603      	mov	r3, r0
    }
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bdb0      	pop	{r4, r5, r7, pc}

08007a06 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007a06:	b5b0      	push	{r4, r5, r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f9da 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007a18:	4604      	mov	r4, r0
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f000 f9d6 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007a20:	4605      	mov	r5, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 f9d1 	bl	8007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 f9f2 	bl	8007e1a <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007a36:	4602      	mov	r2, r0
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f9e0 	bl	8007e02 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8007a42:	4603      	mov	r3, r0
    }
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bdb0      	pop	{r4, r5, r7, pc}

08007a4c <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007a54:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007a6c:	bf00      	nop
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	e00a      	b.n	8007aa8 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4413      	add	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f9cc 	bl	8007e3a <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007ab0:	b590      	push	{r4, r7, lr}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f9cb 	bl	8007e58 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	68b8      	ldr	r0, [r7, #8]
 8007ac6:	f000 f9c7 	bl	8007e58 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007aca:	4603      	mov	r3, r0
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 f9d2 	bl	8007e7a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8007ad6:	4603      	mov	r3, r0
    }
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd90      	pop	{r4, r7, pc}

08007ae0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007ae0:	b5b0      	push	{r4, r5, r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7fd fcbb 	bl	8005468 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007af2:	4604      	mov	r4, r0
 8007af4:	68b8      	ldr	r0, [r7, #8]
 8007af6:	f7fd fcb7 	bl	8005468 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007afa:	4605      	mov	r5, r0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fcfe 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7fd fcc8 	bl	80054a0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8007b10:	4602      	mov	r2, r0
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd fd0d 	bl	8005536 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007b1c:	4603      	mov	r3, r0
    }
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bdb0      	pop	{r4, r5, r7, pc}

08007b26 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f9c2 	bl	8007ec0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 8007b3c:	4603      	mov	r3, r0
    }
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <_ZSt11__addressofI8IMUFrameEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007b5c:	b5b0      	push	{r4, r5, r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f000 f9d4 	bl	8007f14 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4619      	mov	r1, r3
 8007b72:	2018      	movs	r0, #24
 8007b74:	f7f9 f979 	bl	8000e6a <_ZnwjPv>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461c      	mov	r4, r3
 8007b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b84:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bdb0      	pop	{r4, r5, r7, pc}

08007b90 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>:
      move_iterator(iterator_type __i)
 8007ba6:	b590      	push	{r4, r7, lr}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007bb0:	687c      	ldr	r4, [r7, #4]
 8007bb2:	6838      	ldr	r0, [r7, #0]
 8007bb4:	f7ff ffec 	bl	8007b90 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f7fc f805 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd90      	pop	{r4, r7, pc}

08007bcc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b092      	sub	sp, #72	; 0x48
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fd2c 	bl	8007644 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fd26 	bl	8007644 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 8007bf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fb ffe4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007c0e:	f107 0114 	add.w	r1, r7, #20
 8007c12:	f000 f98a 	bl	8007f2a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>
    }
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	3748      	adds	r7, #72	; 0x48
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b090      	sub	sp, #64	; 0x40
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8007c2c:	f107 0310 	add.w	r3, r7, #16
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fb ffca 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c38:	f107 0320 	add.w	r3, r7, #32
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fb ffc4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fb ffbe 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c56:	f107 0220 	add.w	r2, r7, #32
 8007c5a:	f107 0110 	add.w	r1, r7, #16
 8007c5e:	f000 f992 	bl	8007f86 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	3740      	adds	r7, #64	; 0x40
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b090      	sub	sp, #64	; 0x40
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fb ffa4 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c84:	f107 0320 	add.w	r3, r7, #32
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fb ff9e 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fb ff98 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ca2:	f107 0220 	add.w	r2, r7, #32
 8007ca6:	f107 0110 	add.w	r1, r7, #16
 8007caa:	f000 f9e7 	bl	800807c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	3740      	adds	r7, #64	; 0x40
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f856 	bl	8007d70 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007ce4:	b5b0      	push	{r4, r5, r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fa3e 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f000 fa3a 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fa35 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fa3a 	bl	8008188 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007d14:	4602      	mov	r2, r0
 8007d16:	1d3b      	adds	r3, r7, #4
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fa44 	bl	80081a8 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007d20:	4603      	mov	r3, r0
    }
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bdb0      	pop	{r4, r5, r7, pc}

08007d2a <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007d2a:	b5b0      	push	{r4, r5, r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fa1b 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	68b8      	ldr	r0, [r7, #8]
 8007d40:	f000 fa17 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007d44:	4605      	mov	r5, r0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fa12 	bl	8008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	4629      	mov	r1, r5
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fa33 	bl	80081c0 <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	1d3b      	adds	r3, r7, #4
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fa21 	bl	80081a8 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8007d66:	4603      	mov	r3, r0
    }
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bdb0      	pop	{r4, r5, r7, pc}

08007d70 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	05555555 	.word	0x05555555

08007d8c <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fa1f 	bl	80081e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 8007da2:	4603      	mov	r3, r0
    }
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fa2c 	bl	800821a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 8007dc2:	4603      	mov	r3, r0
    }
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 fa33 	bl	800825e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 fa27 	bl	800827e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8007e30:	4603      	mov	r3, r0
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fa27 	bl	800829e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007e60:	1d3b      	adds	r3, r7, #4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fa35 	bl	80082d2 <_ZNKSt13move_iteratorIPhE4baseEv>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc fc28 	bl	80046c0 <_ZSt12__miter_baseIPhET_S1_>
 8007e70:	4603      	mov	r3, r0
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007e7a:	b5b0      	push	{r4, r5, r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7fd fb3a 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	68b8      	ldr	r0, [r7, #8]
 8007e90:	f7fd fb36 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8007e94:	4605      	mov	r5, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd fb31 	bl	8005500 <_ZSt12__niter_baseIPhET_S1_>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fa20 	bl	80082ea <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fd fb40 	bl	8005536 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8007eb6:	4603      	mov	r3, r0
    }
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bdb0      	pop	{r4, r5, r7, pc}

08007ec0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	10db      	asrs	r3, r3, #3
 8007ed4:	4a0e      	ldr	r2, [pc, #56]	; (8007f10 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	461a      	mov	r2, r3
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f014 ff81 	bl	801cdf8 <memmove>
	  return __result + _Num;
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	4413      	add	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4413      	add	r3, r2
	}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	aaaaaaab 	.word	0xaaaaaaab

08007f14 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007f2a:	b590      	push	{r4, r7, lr}
 8007f2c:	b08d      	sub	sp, #52	; 0x34
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fb fe46 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f000 f9e1 	bl	800830a <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x52>
		std::_Construct(std::__addressof(*__cur), *__first);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7fc fdfe 	bl	8004b50 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fdf5 	bl	8007b46 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	68b8      	ldr	r0, [r7, #8]
 8007f60:	f000 f9f1 	bl	8008346 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4619      	mov	r1, r3
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 f9f9 	bl	8008360 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007f6e:	68b8      	ldr	r0, [r7, #8]
 8007f70:	f000 f9dc 	bl	800832c <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7fd ff4a 	bl	8005e0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 8007f7a:	e7e1      	b.n	8007f40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x16>
	      return __cur;
 8007f7c:	bf00      	nop
	}
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	3734      	adds	r7, #52	; 0x34
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd90      	pop	{r4, r7, pc}

08007f86 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8007f86:	b5b0      	push	{r4, r5, r7, lr}
 8007f88:	b09e      	sub	sp, #120	; 0x78
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
 8007f92:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d058      	beq.n	8008052 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	681c      	ldr	r4, [r3, #0]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689d      	ldr	r5, [r3, #8]
 8007fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fb fe0c 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8007fb4:	f107 0014 	add.w	r0, r7, #20
 8007fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f000 f9e8 	bl	8008394 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	461c      	mov	r4, r3
 8007fc8:	f107 0314 	add.w	r3, r7, #20
 8007fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d024      	beq.n	800802e <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result
 8007fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fe6:	681d      	ldr	r5, [r3, #0]
 8007fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fea:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8007fec:	f7fc fd95 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
	    __result
 8007ffa:	441c      	add	r4, r3
 8007ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f7fb fde2 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008008:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800800c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008010:	4622      	mov	r2, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f000 f9be 	bl	8008394 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	461c      	mov	r4, r3
 800801c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8008026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008028:	3304      	adds	r3, #4
 800802a:	677b      	str	r3, [r7, #116]	; 0x74
 800802c:	e7d5      	b.n	8007fda <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
					      __result);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685c      	ldr	r4, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	4618      	mov	r0, r3
 800803e:	f7fb fdc5 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008048:	462a      	mov	r2, r5
 800804a:	4621      	mov	r1, r4
 800804c:	f000 f9a2 	bl	8008394 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 8008050:	e010      	b.n	8008074 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
					  __result);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	681c      	ldr	r4, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681d      	ldr	r5, [r3, #0]
 800805a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7fb fdb3 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800806c:	462a      	mov	r2, r5
 800806e:	4621      	mov	r1, r4
 8008070:	f000 f990 	bl	8008394 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	3778      	adds	r7, #120	; 0x78
 8008078:	46bd      	mov	sp, r7
 800807a:	bdb0      	pop	{r4, r5, r7, pc}

0800807c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_backward_dit(
 800807c:	b5b0      	push	{r4, r5, r7, lr}
 800807e:	b09e      	sub	sp, #120	; 0x78
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d058      	beq.n	8008148 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685c      	ldr	r4, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681d      	ldr	r5, [r3, #0]
 800809e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fb fd91 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80080aa:	f107 0014 	add.w	r0, r7, #20
 80080ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080b2:	462a      	mov	r2, r5
 80080b4:	4621      	mov	r1, r4
 80080b6:	f000 f9bf 	bl	8008438 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	461c      	mov	r4, r3
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d024      	beq.n	8008124 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80080da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e0:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 80080e2:	f7fc fd1a 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 80080e6:	4602      	mov	r2, r0
 80080e8:	4613      	mov	r3, r2
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	4413      	add	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80080f0:	441c      	add	r4, r3
 80080f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fb fd67 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80080fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008102:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008106:	4622      	mov	r2, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f000 f995 	bl	8008438 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	461c      	mov	r4, r3
 8008112:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 800811c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811e:	3b04      	subs	r3, #4
 8008120:	677b      	str	r3, [r7, #116]	; 0x74
 8008122:	e7d5      	b.n	80080d0 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
			__first._M_cur, __first._M_last, __result);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	681c      	ldr	r4, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	689d      	ldr	r5, [r3, #8]
 800812c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7fb fd4a 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800813e:	462a      	mov	r2, r5
 8008140:	4621      	mov	r1, r4
 8008142:	f000 f979 	bl	8008438 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 8008146:	e010      	b.n	800816a <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	681c      	ldr	r4, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681d      	ldr	r5, [r3, #0]
 8008150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f7fb fd38 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008162:	462a      	mov	r2, r5
 8008164:	4621      	mov	r1, r4
 8008166:	f000 f967 	bl	8008438 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	3778      	adds	r7, #120	; 0x78
 800816e:	46bd      	mov	sp, r7
 8008170:	bdb0      	pop	{r4, r5, r7, pc}

08008172 <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
    { return __it; }
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f9b3 	bl	8008504 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 800819e:	4603      	mov	r3, r0
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f9a7 	bl	8008524 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80081d6:	4603      	mov	r3, r0
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	109b      	asrs	r3, r3, #2
 80081f4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	461a      	mov	r2, r3
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f014 fdf7 	bl	801cdf8 <memmove>
	  return __result + _Num;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	4413      	add	r3, r2
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	109b      	asrs	r3, r3, #2
 800822e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	425b      	negs	r3, r3
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	18d0      	adds	r0, r2, r3
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	461a      	mov	r2, r3
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	f014 fdd6 	bl	801cdf8 <memmove>
	  return __result - _Num;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	425b      	negs	r3, r3
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4413      	add	r3, r2
	}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f968 	bl	8008544 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 8008274:	4603      	mov	r3, r0
    }
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f975 	bl	800857e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 8008294:	4603      	mov	r3, r0
    }
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f014 fdb1 	bl	801ce2c <memset>
    }
 80082ca:	bf00      	nop
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 f961 	bl	80085c2 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8008300:	4603      	mov	r3, r0
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f963 	bl	80085e2 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 800831c:	4603      	mov	r3, r0
 800831e:	f083 0301 	eor.w	r3, r3, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>:
      operator++()
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd fd69 	bl	8005e0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
	return *this;
 800833c:	687b      	ldr	r3, [r7, #4]
      }
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>:
      operator*() const
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fc fbfd 	bl	8004b50 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8008356:	4603      	mov	r3, r0
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8008360:	b5b0      	push	{r4, r5, r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800836a:	6838      	ldr	r0, [r7, #0]
 800836c:	f7fc fb42 	bl	80049f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8008370:	4605      	mov	r5, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4619      	mov	r1, r3
 8008376:	2018      	movs	r0, #24
 8008378:	f7f8 fd77 	bl	8000e6a <_ZnwjPv>
 800837c:	4603      	mov	r3, r0
 800837e:	461c      	mov	r4, r3
 8008380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008384:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008388:	e884 0003 	stmia.w	r4, {r0, r1}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bdb0      	pop	{r4, r5, r7, pc}

08008394 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_a1(_II __first, _II __last,
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	10db      	asrs	r3, r3, #3
 80083aa:	4a22      	ldr	r2, [pc, #136]	; (8008434 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd34      	ble.n	8008422 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	10db      	asrs	r3, r3, #3
 80083c4:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	f107 0218 	add.w	r2, r7, #24
 80083d0:	f107 0314 	add.w	r3, r7, #20
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fa75 	bl	80068c6 <_ZSt3minIiERKT_S2_S2_>
 80083dc:	4603      	mov	r3, r0
	  const difference_type __clen
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	4613      	mov	r3, r2
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	4413      	add	r3, r2
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	461a      	mov	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	1899      	adds	r1, r3, r2
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	68b8      	ldr	r0, [r7, #8]
 80083fa:	f000 f910 	bl	800861e <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
	  __first += __clen;
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8008410:	69f9      	ldr	r1, [r7, #28]
 8008412:	6838      	ldr	r0, [r7, #0]
 8008414:	f7fd fd2a 	bl	8005e6c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008420:	e7c7      	b.n	80083b2 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7fb fbd1 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	aaaaaaab 	.word	0xaaaaaaab

08008438 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	10db      	asrs	r3, r3, #3
 800844e:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 8008450:	fb02 f303 	mul.w	r3, r2, r3
 8008454:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd49      	ble.n	80084f0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	10db      	asrs	r3, r3, #3
 8008468:	4a25      	ldr	r2, [pc, #148]	; (8008500 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10f      	bne.n	800849c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 800847c:	f7fc fb4d 	bl	8004b1a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8008480:	4603      	mov	r3, r0
 8008482:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	3b04      	subs	r3, #4
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	4619      	mov	r1, r3
 8008490:	460b      	mov	r3, r1
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	440b      	add	r3, r1
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 800849c:	f107 0210 	add.w	r2, r7, #16
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fa0d 	bl	80068c6 <_ZSt3minIiERKT_S2_S2_>
 80084ac:	4603      	mov	r3, r0
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	4613      	mov	r3, r2
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	4413      	add	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	425b      	negs	r3, r3
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f8b9 	bl	800863e <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>

	  __last -= __clen;
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4613      	mov	r3, r2
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4413      	add	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	425b      	negs	r3, r3
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 80084de:	69b9      	ldr	r1, [r7, #24]
 80084e0:	6838      	ldr	r0, [r7, #0]
 80084e2:	f7ff f844 	bl	800756e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	  __len -= __clen;
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80084ee:	e7b2      	b.n	8008456 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
	}

      return __result;
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7fb fb6a 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	3720      	adds	r7, #32
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	aaaaaaab 	.word	0xaaaaaaab

08008504 <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f8a2 	bl	800865e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 800851a:	4603      	mov	r3, r0
    }
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f8af 	bl	8008698 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 800853a:	4603      	mov	r3, r0
    }
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	109b      	asrs	r3, r3, #2
 8008558:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	461a      	mov	r2, r3
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f014 fc45 	bl	801cdf8 <memmove>
	  return __result + _Num;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4413      	add	r3, r2
	}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800857e:	b580      	push	{r7, lr}
 8008580:	b086      	sub	sp, #24
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	109b      	asrs	r3, r3, #2
 8008592:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	425b      	negs	r3, r3
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	18d0      	adds	r0, r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	461a      	mov	r2, r3
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	f014 fc24 	bl	801cdf8 <memmove>
	  return __result - _Num;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	425b      	negs	r3, r3
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4413      	add	r3, r2
	}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 f882 	bl	80086dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80085d8:	4603      	mov	r3, r0
    }
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b08a      	sub	sp, #40	; 0x28
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f88c 	bl	8008710 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 80085f8:	f107 0318 	add.w	r3, r7, #24
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f886 	bl	8008710 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 8008604:	f107 0218 	add.w	r2, r7, #24
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7fb f9b0 	bl	8003974 <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8008614:	4603      	mov	r3, r0
 8008616:	4618      	mov	r0, r3
 8008618:	3728      	adds	r7, #40	; 0x28
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f87c 	bl	800872c <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 8008634:	4603      	mov	r3, r0
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f87c 	bl	800874c <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 8008654:	4603      	mov	r3, r0
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	109b      	asrs	r3, r3, #2
 8008672:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d006      	beq.n	8008688 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	461a      	mov	r2, r3
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f014 fbb8 	bl	801cdf8 <memmove>
	  return __result + _Num;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4413      	add	r3, r2
	}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	109b      	asrs	r3, r3, #2
 80086ac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	425b      	negs	r3, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	18d0      	adds	r0, r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	461a      	mov	r2, r3
 80086c4:	68f9      	ldr	r1, [r7, #12]
 80086c6:	f014 fb97 	bl	801cdf8 <memmove>
	  return __result - _Num;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	425b      	negs	r3, r3
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4413      	add	r3, r2
	}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d005      	beq.n	8008702 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	461a      	mov	r2, r3
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f014 fb7b 	bl	801cdf8 <memmove>
	  return __result + _Num;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4413      	add	r3, r2
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>:
      base() const
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fb fa54 	bl	8003bcc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f815 	bl	800876c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 8008742:	4603      	mov	r3, r0
    }
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f82f 	bl	80087c0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>
 8008762:	4603      	mov	r3, r0
    }
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	10db      	asrs	r3, r3, #3
 8008780:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	461a      	mov	r2, r3
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f014 fb2b 	bl	801cdf8 <memmove>
	  return __result + _Num;
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4613      	mov	r3, r2
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	4413      	add	r3, r2
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	461a      	mov	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4413      	add	r3, r2
	}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	aaaaaaab 	.word	0xaaaaaaab

080087c0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	10db      	asrs	r3, r3, #3
 80087d4:	4a11      	ldr	r2, [pc, #68]	; (800881c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x5c>)
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d010      	beq.n	8008804 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4613      	mov	r3, r2
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4413      	add	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	425b      	negs	r3, r3
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	18d0      	adds	r0, r2, r3
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	461a      	mov	r2, r3
 80087fe:	68f9      	ldr	r1, [r7, #12]
 8008800:	f014 fafa 	bl	801cdf8 <memmove>
	  return __result - _Num;
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	425b      	negs	r3, r3
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4413      	add	r3, r2
	}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	aaaaaaab 	.word	0xaaaaaaab

08008820 <_Z41__static_initialization_and_destruction_0ii>:
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d107      	bne.n	8008840 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008836:	4293      	cmp	r3, r2
 8008838:	d102      	bne.n	8008840 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 800883a:	4809      	ldr	r0, [pc, #36]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800883c:	f7f9 faed 	bl	8001e1a <_ZN18MotherboardContextC1Ev>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d107      	bne.n	8008856 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884c:	4293      	cmp	r3, r2
 800884e:	d102      	bne.n	8008856 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008850:	4803      	ldr	r0, [pc, #12]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008852:	f7f9 faff 	bl	8001e54 <_ZN18MotherboardContextD1Ev>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	240001d0 	.word	0x240001d0

08008864 <_GLOBAL__sub_I_MotherboardInit>:
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
 8008868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800886c:	2001      	movs	r0, #1
 800886e:	f7ff ffd7 	bl	8008820 <_Z41__static_initialization_and_destruction_0ii>
 8008872:	bd80      	pop	{r7, pc}

08008874 <_GLOBAL__sub_D_MotherboardInit>:
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
 8008878:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800887c:	2000      	movs	r0, #0
 800887e:	f7ff ffcf 	bl	8008820 <_Z41__static_initialization_and_destruction_0ii>
 8008882:	bd80      	pop	{r7, pc}

08008884 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	4613      	mov	r3, r2
 8008894:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 80088a0:	89ba      	ldrh	r2, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7bf8      	ldrb	r0, [r7, #15]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	f001 f925 	bl	8009af6 <bhy2_hif_get_regs>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
 80088b0:	e001      	b.n	80088b6 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80088b2:	23ff      	movs	r3, #255	; 0xff
 80088b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80088b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 80088c2:	b590      	push	{r4, r7, lr}
 80088c4:	b08f      	sub	sp, #60	; 0x3c
 80088c6:	af02      	add	r7, sp, #8
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <bhy2_get_and_process_fifo+0x1c>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 80088de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088e2:	e11b      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 80088ea:	f06f 0305 	mvn.w	r3, #5
 80088ee:	e115      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	2100      	movs	r1, #0
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f014 fa99 	bl	801ce2c <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 80088fa:	f107 0314 	add.w	r3, r7, #20
 80088fe:	2214      	movs	r2, #20
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f014 fa92 	bl	801ce2c <memset>

    fifos.buffer = work_buffer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8008916:	4611      	mov	r1, r2
 8008918:	4618      	mov	r0, r3
 800891a:	f001 fa5f 	bl	8009ddc <bhy2_hif_get_interrupt_status>
 800891e:	4603      	mov	r3, r0
 8008920:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8008924:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 800892c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008930:	e0f4      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800893a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 800893e:	e042      	b.n	80089c6 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008944:	f003 0306 	and.w	r3, r3, #6
 8008948:	2b02      	cmp	r3, #2
 800894a:	d00e      	beq.n	800896a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 800894c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008950:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8008954:	2b04      	cmp	r3, #4
 8008956:	d008      	beq.n	800896a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800895c:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8008960:	2b06      	cmp	r3, #6
 8008962:	d002      	beq.n	800896a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d020      	beq.n	80089ac <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8008978:	1ad1      	subs	r1, r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f107 0214 	add.w	r2, r7, #20
 8008980:	f102 0408 	add.w	r4, r2, #8
 8008984:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	4623      	mov	r3, r4
 800898c:	f001 fad7 	bl	8009f3e <bhy2_hif_get_wakeup_fifo>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8008996:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 800899e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80089a2:	e0bb      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	4413      	add	r3, r2
 80089aa:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	4619      	mov	r1, r3
 80089b4:	2000      	movs	r0, #0
 80089b6:	f000 fbad 	bl	8009114 <parse_fifo>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80089c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <bhy2_get_and_process_fifo+0x112>
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <bhy2_get_and_process_fifo+0x11a>
 80089d4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0b1      	beq.n	8008940 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80089e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80089e8:	e042      	b.n	8008a70 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80089ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ee:	f003 0318 	and.w	r3, r3, #24
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d00e      	beq.n	8008a14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80089f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089fa:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d008      	beq.n	8008a14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a06:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8008a0a:	2b18      	cmp	r3, #24
 8008a0c:	d002      	beq.n	8008a14 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d020      	beq.n	8008a56 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008a1e:	6a3a      	ldr	r2, [r7, #32]
 8008a20:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8008a22:	1ad1      	subs	r1, r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f107 0214 	add.w	r2, r7, #20
 8008a2a:	f102 0408 	add.w	r4, r2, #8
 8008a2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4623      	mov	r3, r4
 8008a36:	f001 fa98 	bl	8009f6a <bhy2_hif_get_nonwakeup_fifo>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008a40:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8008a48:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a4c:	e066      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	4413      	add	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8008a56:	f107 0314 	add.w	r3, r7, #20
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f000 fb58 	bl	8009114 <parse_fifo>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <bhy2_get_and_process_fifo+0x1bc>
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <bhy2_get_and_process_fifo+0x1c4>
 8008a7e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0b1      	beq.n	80089ea <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8008a8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008a92:	e036      	b.n	8008b02 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8008a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <bhy2_get_and_process_fifo+0x1e4>
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d020      	beq.n	8008ae8 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8008ab4:	1ad1      	subs	r1, r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f107 0214 	add.w	r2, r7, #20
 8008abc:	f102 0408 	add.w	r4, r2, #8
 8008ac0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	f001 fab0 	bl	800a02c <bhy2_hif_get_status_fifo_async>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8008ad2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8008ada:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008ade:	e01d      	b.n	8008b1c <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	4413      	add	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4619      	mov	r1, r3
 8008af0:	2002      	movs	r0, #2
 8008af2:	f000 fb0f 	bl	8009114 <parse_fifo>
 8008af6:	4603      	mov	r3, r0
 8008af8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8008b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <bhy2_get_and_process_fifo+0x24e>
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <bhy2_get_and_process_fifo+0x256>
 8008b10:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0bd      	beq.n	8008a94 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8008b18:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3734      	adds	r7, #52	; 0x34
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd90      	pop	{r4, r7, pc}

08008b24 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8008b30:	6079      	str	r1, [r7, #4]
 8008b32:	603a      	str	r2, [r7, #0]
 8008b34:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	ed97 0a02 	vldr	s0, [r7, #8]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 fa84 	bl	800a058 <bhy2_hif_exec_sensor_conf_cmd>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]
 8008b54:	e001      	b.n	8008b5a <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b56:	23ff      	movs	r3, #255	; 0xff
 8008b58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f8e8 	bl	8009d54 <bhy2_hif_get_product_id>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	e001      	b.n	8008b8e <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008b8a:	23ff      	movs	r3, #255	; 0xff
 8008b8c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 f8de 	bl	8009d74 <bhy2_hif_get_kernel_version>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73fb      	strb	r3, [r7, #15]
 8008bbc:	e001      	b.n	8008bc2 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008bbe:	23ff      	movs	r3, #255	; 0xff
 8008bc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 f8e8 	bl	8009dbc <bhy2_hif_get_boot_status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	e001      	b.n	8008bf6 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008bf2:	23ff      	movs	r3, #255	; 0xff
 8008bf4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b086      	sub	sp, #24
 8008c06:	af02      	add	r7, sp, #8
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00d      	beq.n	8008c36 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	f107 0208 	add.w	r2, r7, #8
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4613      	mov	r3, r2
 8008c24:	2220      	movs	r2, #32
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	f240 101f 	movw	r0, #287	; 0x11f
 8008c2c:	f001 f80a 	bl	8009c44 <bhy2_hif_get_parameter>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
 8008c34:	e001      	b.n	8008c3a <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008c36:	23ff      	movs	r3, #255	; 0xff
 8008c38:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <bhy2_upload_firmware_to_ram+0x1c>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8008c62:	23ff      	movs	r3, #255	; 0xff
 8008c64:	75fb      	strb	r3, [r7, #23]
 8008c66:	e007      	b.n	8008c78 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 f90d 	bl	8009e8e <bhy2_hif_upload_firmware_to_ram>
 8008c74:	4603      	mov	r3, r0
 8008c76:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008c96:	23ff      	movs	r3, #255	; 0xff
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e005      	b.n	8008ca8 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 f932 	bl	8009f08 <bhy2_hif_boot_program_ram>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008cca:	23ff      	movs	r3, #255	; 0xff
 8008ccc:	73fb      	strb	r3, [r7, #15]
 8008cce:	e007      	b.n	8008ce0 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	1df9      	adds	r1, r7, #7
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	2007      	movs	r0, #7
 8008cd8:	f000 ff45 	bl	8009b66 <bhy2_hif_set_regs>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008d00:	23ff      	movs	r3, #255	; 0xff
 8008d02:	73fb      	strb	r3, [r7, #15]
 8008d04:	e007      	b.n	8008d16 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	2007      	movs	r0, #7
 8008d0e:	f000 fef2 	bl	8009af6 <bhy2_hif_get_regs>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8008d36:	23ff      	movs	r3, #255	; 0xff
 8008d38:	73fb      	strb	r3, [r7, #15]
 8008d3a:	e006      	b.n	8008d4a <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f84b 	bl	8009ddc <bhy2_hif_get_interrupt_status>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	6039      	str	r1, [r7, #0]
 8008d60:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8008d6c:	23ff      	movs	r3, #255	; 0xff
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e007      	b.n	8008d82 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	1df9      	adds	r1, r7, #7
 8008d76:	2201      	movs	r2, #1
 8008d78:	2006      	movs	r0, #6
 8008d7a:	f000 fef4 	bl	8009b66 <bhy2_hif_set_regs>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d102      	bne.n	8008da6 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8008da0:	23ff      	movs	r3, #255	; 0xff
 8008da2:	73fb      	strb	r3, [r7, #15]
 8008da4:	e005      	b.n	8008db2 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 f827 	bl	8009dfc <bhy2_hif_reset>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b08a      	sub	sp, #40	; 0x28
 8008dc2:	af04      	add	r7, sp, #16
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d014      	beq.n	8008e02 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8008dd8:	f640 1238 	movw	r2, #2360	; 0x938
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de0:	f014 f824 	bl	801ce2c <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	7bf8      	ldrb	r0, [r7, #15]
 8008de8:	9302      	str	r3, [sp, #8]
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	f000 fe3e 	bl	8009a78 <bhy2_hif_init>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]
 8008e00:	e001      	b.n	8008e06 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8008e02:	23ff      	movs	r3, #255	; 0xff
 8008e04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b087      	sub	sp, #28
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <bhy2_register_fifo_parse_callback+0x20>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d102      	bne.n	8008e38 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e32:	23ff      	movs	r3, #255	; 0xff
 8008e34:	75fb      	strb	r3, [r7, #23]
 8008e36:	e013      	b.n	8008e60 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8008e38:	7bfa      	ldrb	r2, [r7, #15]
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	440b      	add	r3, r1
 8008e44:	3318      	adds	r3, #24
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	440b      	add	r3, r1
 8008e58:	3318      	adds	r3, #24
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8008e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b092      	sub	sp, #72	; 0x48
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8008e7e:	23ff      	movs	r3, #255	; 0xff
 8008e80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e84:	e079      	b.n	8008f7a <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8008e86:	f107 0308 	add.w	r3, r7, #8
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff feb8 	bl	8008c02 <bhy2_get_virt_sensor_list>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8008e98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d16c      	bne.n	8008f7a <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008eac:	e041      	b.n	8008f32 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8008eae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8008eb8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8008eca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008ece:	3348      	adds	r3, #72	; 0x48
 8008ed0:	443b      	add	r3, r7
 8008ed2:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8008ed6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008eda:	4013      	ands	r3, r2
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d022      	beq.n	8008f28 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008ee8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 f8e6 	bl	800a0be <bhy2_hif_get_sensor_info>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8008ef8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d113      	bne.n	8008f28 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8008f00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8008f08:	23f8      	movs	r3, #248	; 0xf8
 8008f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8008f0e:	e018      	b.n	8008f42 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8008f10:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008f14:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	4413      	add	r3, r2
 8008f20:	440b      	add	r3, r1
 8008f22:	331c      	adds	r3, #28
 8008f24:	4602      	mov	r2, r0
 8008f26:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8008f28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008f32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f36:	2bf4      	cmp	r3, #244	; 0xf4
 8008f38:	d803      	bhi.n	8008f42 <bhy2_update_virtual_sensor_list+0xd2>
 8008f3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0b5      	beq.n	8008eae <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8008f42:	23ff      	movs	r3, #255	; 0xff
 8008f44:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008f48:	e013      	b.n	8008f72 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8008f4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f4e:	3bf5      	subs	r3, #245	; 0xf5
 8008f50:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008f54:	490c      	ldr	r1, [pc, #48]	; (8008f88 <bhy2_update_virtual_sensor_list+0x118>)
 8008f56:	5cc8      	ldrb	r0, [r1, r3]
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	4413      	add	r3, r2
 8008f60:	440b      	add	r3, r1
 8008f62:	331c      	adds	r3, #28
 8008f64:	4602      	mov	r2, r0
 8008f66:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8008f68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008f72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008f76:	2bf4      	cmp	r3, #244	; 0xf4
 8008f78:	d8e7      	bhi.n	8008f4a <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8008f7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3748      	adds	r7, #72	; 0x48
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08038a58 	.word	0x08038a58

08008f8c <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <bhy2_get_error_value+0x1a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8008fa6:	23ff      	movs	r3, #255	; 0xff
 8008fa8:	73fb      	strb	r3, [r7, #15]
 8008faa:	e007      	b.n	8008fbc <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	202e      	movs	r0, #46	; 0x2e
 8008fb4:	f7ff fc66 	bl	8008884 <bhy2_get_regs>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d04e      	beq.n	800907e <get_callback_info+0xb6>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d04b      	beq.n	800907e <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8008fe6:	7bfa      	ldrb	r2, [r7, #15]
 8008fe8:	68b8      	ldr	r0, [r7, #8]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	3318      	adds	r3, #24
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	6859      	ldr	r1, [r3, #4]
 8008ffe:	6010      	str	r0, [r2, #0]
 8009000:	6051      	str	r1, [r2, #4]
 8009002:	7a1b      	ldrb	r3, [r3, #8]
 8009004:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2bf4      	cmp	r3, #244	; 0xf4
 800900a:	d91b      	bls.n	8009044 <get_callback_info+0x7c>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d117      	bne.n	8009044 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	705a      	strb	r2, [r3, #1]
 800901a:	2200      	movs	r2, #0
 800901c:	709a      	strb	r2, [r3, #2]
 800901e:	2200      	movs	r2, #0
 8009020:	70da      	strb	r2, [r3, #3]
 8009022:	2200      	movs	r2, #0
 8009024:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2200      	movs	r2, #0
 800902a:	715a      	strb	r2, [r3, #5]
 800902c:	2200      	movs	r2, #0
 800902e:	719a      	strb	r2, [r3, #6]
 8009030:	2200      	movs	r2, #0
 8009032:	71da      	strb	r2, [r3, #7]
 8009034:	2200      	movs	r2, #0
 8009036:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	3bf5      	subs	r3, #245	; 0xf5
 800903c:	4a16      	ldr	r2, [pc, #88]	; (8009098 <get_callback_info+0xd0>)
 800903e:	5cd2      	ldrb	r2, [r2, r3]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d11c      	bne.n	8009084 <get_callback_info+0xbc>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d118      	bne.n	8009084 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2200      	movs	r2, #0
 8009056:	705a      	strb	r2, [r3, #1]
 8009058:	2200      	movs	r2, #0
 800905a:	709a      	strb	r2, [r3, #2]
 800905c:	2200      	movs	r2, #0
 800905e:	70da      	strb	r2, [r3, #3]
 8009060:	2200      	movs	r2, #0
 8009062:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2200      	movs	r2, #0
 8009068:	715a      	strb	r2, [r3, #5]
 800906a:	2200      	movs	r2, #0
 800906c:	719a      	strb	r2, [r3, #6]
 800906e:	2200      	movs	r2, #0
 8009070:	71da      	strb	r2, [r3, #7]
 8009072:	2200      	movs	r2, #0
 8009074:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 800907c:	e002      	b.n	8009084 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800907e:	23ff      	movs	r3, #255	; 0xff
 8009080:	75fb      	strb	r3, [r7, #23]
 8009082:	e000      	b.n	8009086 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8009084:	bf00      	nop
    }

    return rslt;
 8009086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800908a:	4618      	mov	r0, r3
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	08038a58 	.word	0x08038a58

0800909c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	460b      	mov	r3, r1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	441a      	add	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d803      	bhi.n	80090c2 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	e002      	b.n	80090c8 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b087      	sub	sp, #28
 80090da:	af00      	add	r7, sp, #0
 80090dc:	4603      	mov	r3, r0
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d808      	bhi.n	8009100 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	441a      	add	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	e001      	b.n	8009104 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8009100:	23f9      	movs	r3, #249	; 0xf9
 8009102:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009104:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	b099      	sub	sp, #100	; 0x64
 800911a:	af00      	add	r7, sp, #0
 800911c:	4603      	mov	r3, r0
 800911e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009120:	627a      	str	r2, [r7, #36]	; 0x24
 8009122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 800913e:	e16a      	b.n	8009416 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800914c:	4413      	add	r3, r2
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8009154:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8009158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ffb9 	bl	80090d6 <get_time_stamp>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800916a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <parse_fifo+0x64>
        {
            return rslt;
 8009172:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009176:	e191      	b.n	800949c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8009178:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800917c:	2b00      	cmp	r3, #0
 800917e:	d025      	beq.n	80091cc <parse_fifo+0xb8>
 8009180:	2b00      	cmp	r3, #0
 8009182:	f2c0 80f6 	blt.w	8009372 <parse_fifo+0x25e>
 8009186:	2bff      	cmp	r3, #255	; 0xff
 8009188:	f300 80f3 	bgt.w	8009372 <parse_fifo+0x25e>
 800918c:	2bf5      	cmp	r3, #245	; 0xf5
 800918e:	f2c0 80f0 	blt.w	8009372 <parse_fifo+0x25e>
 8009192:	3bf5      	subs	r3, #245	; 0xf5
 8009194:	2b0a      	cmp	r3, #10
 8009196:	f200 80ec 	bhi.w	8009372 <parse_fifo+0x25e>
 800919a:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <parse_fifo+0x8c>)
 800919c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a0:	080091d9 	.word	0x080091d9
 80091a4:	08009241 	.word	0x08009241
 80091a8:	080092bf 	.word	0x080092bf
 80091ac:	08009373 	.word	0x08009373
 80091b0:	08009373 	.word	0x08009373
 80091b4:	08009373 	.word	0x08009373
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	08009241 	.word	0x08009241
 80091c0:	080092bf 	.word	0x080092bf
 80091c4:	08009373 	.word	0x08009373
 80091c8:	080091cd 	.word	0x080091cd
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	601a      	str	r2, [r3, #0]
                break;
 80091d6:	e11e      	b.n	8009416 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80091d8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80091dc:	461a      	mov	r2, r3
 80091de:	2102      	movs	r1, #2
 80091e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e2:	f7ff ff5b 	bl	800909c <get_buffer_status>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80091ec:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <parse_fifo+0xe6>
                {
                    return rslt;
 80091f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80091f8:	e150      	b.n	800949c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80091fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d000      	beq.n	8009204 <parse_fifo+0xf0>
                {
                    break;
 8009202:	e108      	b.n	8009416 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8009204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009210:	3301      	adds	r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2200      	movs	r2, #0
 800921a:	469a      	mov	sl, r3
 800921c:	4693      	mov	fp, r2
 800921e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009220:	eb10 020a 	adds.w	r2, r0, sl
 8009224:	61ba      	str	r2, [r7, #24]
 8009226:	eb41 020b 	adc.w	r2, r1, fp
 800922a:	61fa      	str	r2, [r7, #28]
 800922c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009230:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	1c9a      	adds	r2, r3, #2
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	601a      	str	r2, [r3, #0]
                break;
 800923e:	e0ea      	b.n	8009416 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8009240:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009244:	461a      	mov	r2, r3
 8009246:	2103      	movs	r1, #3
 8009248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924a:	f7ff ff27 	bl	800909c <get_buffer_status>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8009254:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <parse_fifo+0x14e>
                {
                    return rslt;
 800925c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009260:	e11c      	b.n	800949c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8009262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009266:	2b00      	cmp	r3, #0
 8009268:	d000      	beq.n	800926c <parse_fifo+0x158>
                {
                    break;
 800926a:	e0d4      	b.n	8009416 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 800926c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	691a      	ldr	r2, [r3, #16]
 8009276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009278:	3301      	adds	r3, #1
 800927a:	4413      	add	r3, r2
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	b21c      	sxth	r4, r3
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009286:	3302      	adds	r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	b21b      	sxth	r3, r3
 8009290:	4323      	orrs	r3, r4
 8009292:	b21b      	sxth	r3, r3
 8009294:	b29b      	uxth	r3, r3
 8009296:	b29b      	uxth	r3, r3
 8009298:	2200      	movs	r2, #0
 800929a:	461d      	mov	r5, r3
 800929c:	4616      	mov	r6, r2
 800929e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a0:	1942      	adds	r2, r0, r5
 80092a2:	613a      	str	r2, [r7, #16]
 80092a4:	eb41 0206 	adc.w	r2, r1, r6
 80092a8:	617a      	str	r2, [r7, #20]
 80092aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80092ae:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1cda      	adds	r2, r3, #3
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	601a      	str	r2, [r3, #0]
                break;
 80092bc:	e0ab      	b.n	8009416 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 80092be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80092c2:	461a      	mov	r2, r3
 80092c4:	2106      	movs	r1, #6
 80092c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c8:	f7ff fee8 	bl	800909c <get_buffer_status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80092d2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <parse_fifo+0x1cc>
                {
                    return rslt;
 80092da:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092de:	e0dd      	b.n	800949c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80092e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d000      	beq.n	80092ea <parse_fifo+0x1d6>
                {
                    break;
 80092e8:	e095      	b.n	8009416 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	691a      	ldr	r2, [r3, #16]
 80092ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f0:	3301      	adds	r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fe:	3302      	adds	r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	4319      	orrs	r1, r3
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800930e:	3303      	adds	r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	041b      	lsls	r3, r3, #16
 8009316:	4319      	orrs	r1, r3
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931e:	3304      	adds	r3, #4
 8009320:	4413      	add	r3, r2
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	061b      	lsls	r3, r3, #24
 8009326:	430b      	orrs	r3, r1
 8009328:	2200      	movs	r2, #0
 800932a:	4698      	mov	r8, r3
 800932c:	4691      	mov	r9, r2
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	691a      	ldr	r2, [r3, #16]
 8009332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009334:	3305      	adds	r3, #5
 8009336:	4413      	add	r3, r2
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2200      	movs	r2, #0
 800933e:	60bb      	str	r3, [r7, #8]
 8009340:	60fa      	str	r2, [r7, #12]
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	000b      	movs	r3, r1
 800934e:	2200      	movs	r2, #0
 8009350:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009352:	ea48 0002 	orr.w	r0, r8, r2
 8009356:	6038      	str	r0, [r7, #0]
 8009358:	ea49 0303 	orr.w	r3, r9, r3
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009362:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	1d9a      	adds	r2, r3, #6
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	601a      	str	r2, [r3, #0]
                break;
 8009370:	e051      	b.n	8009416 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8009372:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009376:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800937a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fe23 	bl	8008fc8 <get_callback_info>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 8009388:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <parse_fifo+0x282>
                {
                    return rslt;
 8009390:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009394:	e082      	b.n	800949c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8009396:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800939a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800939e:	461a      	mov	r2, r3
 80093a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a2:	f7ff fe7b 	bl	800909c <get_buffer_status>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80093ac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <parse_fifo+0x2a6>
                {
                    return rslt;
 80093b4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093b8:	e070      	b.n	800949c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80093ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d000      	beq.n	80093c4 <parse_fifo+0x2b0>
                {
                    break;
 80093c2:	e028      	b.n	8009416 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 80093c4:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01c      	beq.n	8009406 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d2:	3301      	adds	r3, #1
 80093d4:	4413      	add	r3, r2
 80093d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80093d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80093e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e2:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80093e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80093e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 80093ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80093f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 80093f4:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 80093f8:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 80093fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800940e:	441a      	add	r2, r3
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	601a      	str	r2, [r3, #0]
                break;
 8009414:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d204      	bcs.n	800942c <parse_fifo+0x318>
 8009422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009426:	2b00      	cmp	r3, #0
 8009428:	f43f ae8a 	beq.w	8009140 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d031      	beq.n	8009498 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d202      	bcs.n	8009446 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8009440:	f06f 0301 	mvn.w	r3, #1
 8009444:	e02a      	b.n	800949c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01d      	beq.n	8009498 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 800945c:	2300      	movs	r3, #0
 800945e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009462:	e013      	b.n	800948c <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	691a      	ldr	r2, [r3, #16]
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	6819      	ldr	r1, [r3, #0]
 800946c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009470:	440b      	add	r3, r1
 8009472:	441a      	add	r2, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	6919      	ldr	r1, [r3, #16]
 8009478:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800947c:	440b      	add	r3, r1
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8009482:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009486:	3301      	adds	r3, #1
 8009488:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800948c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d3e5      	bcc.n	8009464 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8009498:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800949c:	4618      	mov	r0, r3
 800949e:	3764      	adds	r7, #100	; 0x64
 80094a0:	46bd      	mov	sp, r7
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	bf00      	nop

080094a8 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b0cf      	sub	sp, #316	; 0x13c
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80094b4:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 80094b8:	6001      	str	r1, [r0, #0]
 80094ba:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80094be:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 80094c2:	600a      	str	r2, [r1, #0]
 80094c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094c8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094d6:	4622      	mov	r2, r4
 80094d8:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80094e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 81af 	beq.w	8009848 <bhy2_hif_exec_cmd_generic+0x3a0>
 80094ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <bhy2_hif_exec_cmd_generic+0x60>
 80094f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 81a0 	beq.w	8009848 <bhy2_hif_exec_cmd_generic+0x3a0>
 8009508:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <bhy2_hif_exec_cmd_generic+0x78>
 8009510:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009514:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8194 	beq.w	8009848 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8009520:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8188 	beq.w	800983c <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 800952c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009530:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009534:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4413      	add	r3, r2
 800953c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8009540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8009548:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800954c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009550:	4413      	add	r3, r2
 8009552:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009556:	e003      	b.n	8009560 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8009560:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 800956c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009570:	089b      	lsrs	r3, r3, #2
 8009572:	3301      	adds	r3, #1
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800957a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800957e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b2da      	uxtb	r2, r3
 8009586:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800958a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800958e:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8009590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009594:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	0a1b      	lsrs	r3, r3, #8
 800959c:	b29b      	uxth	r3, r3
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80095a8:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 80095aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d113      	bne.n	80095e0 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 80095b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095bc:	089b      	lsrs	r3, r3, #2
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80095c8:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 80095ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	0a1b      	lsrs	r3, r3, #8
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80095dc:	70da      	strb	r2, [r3, #3]
 80095de:	e010      	b.n	8009602 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80095e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80095ee:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 80095f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009600:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 8009602:	2304      	movs	r3, #4
 8009604:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8009608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800960c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8009610:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009618:	4413      	add	r3, r2
 800961a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 800961e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8009626:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009630:	429a      	cmp	r2, r3
 8009632:	f240 80f9 	bls.w	8009828 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8009636:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8009640:	e0f2      	b.n	8009828 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8009642:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009646:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800964a:	4413      	add	r3, r2
 800964c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009650:	429a      	cmp	r2, r3
 8009652:	d20b      	bcs.n	800966c <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8009654:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 800965c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009660:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800966a:	e020      	b.n	80096ae <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 800966c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009670:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009674:	4413      	add	r3, r2
 8009676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800967a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800967e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8009682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d006      	beq.n	800969c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 800968e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009692:	089b      	lsrs	r3, r3, #2
 8009694:	3301      	adds	r3, #1
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 800969c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a4:	d903      	bls.n	80096ae <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 80096a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 80096ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d07e      	beq.n	80097b4 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 80096b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096c4:	4413      	add	r3, r2
 80096c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d315      	bcc.n	80096fa <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 80096ce:	f107 0214 	add.w	r2, r7, #20
 80096d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80096d6:	18d0      	adds	r0, r2, r3
 80096d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80096dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80096e6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	4413      	add	r3, r2
 80096ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80096f2:	4619      	mov	r1, r3
 80096f4:	f013 fb72 	bl	801cddc <memcpy>
 80096f8:	e05c      	b.n	80097b4 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 80096fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009702:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	429a      	cmp	r2, r3
 800970a:	d93b      	bls.n	8009784 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 800970c:	f107 0214 	add.w	r2, r7, #20
 8009710:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009714:	18d0      	adds	r0, r2, r3
 8009716:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800971a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009724:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009728:	6812      	ldr	r2, [r2, #0]
 800972a:	18d1      	adds	r1, r2, r3
 800972c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009730:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009734:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	461a      	mov	r2, r3
 800973e:	f013 fb4d 	bl	801cddc <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8009742:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8009746:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800974a:	441a      	add	r2, r3
 800974c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009750:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	f107 0214 	add.w	r2, r7, #20
 800975c:	18d0      	adds	r0, r2, r3
 800975e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009762:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009772:	441a      	add	r2, r3
 8009774:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	f013 fb2d 	bl	801cddc <memcpy>
 8009782:	e017      	b.n	80097b4 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8009784:	f107 0214 	add.w	r2, r7, #20
 8009788:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800978c:	18d0      	adds	r0, r2, r3
 800978e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009792:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097a2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80097a6:	6812      	ldr	r2, [r2, #0]
 80097a8:	4413      	add	r3, r2
 80097aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80097ae:	4619      	mov	r1, r3
 80097b0:	f013 fb14 	bl	801cddc <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 80097b4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80097b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097bc:	4413      	add	r3, r2
 80097be:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d012      	beq.n	80097ec <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 80097c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80097ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ce:	4413      	add	r3, r2
 80097d0:	f107 0214 	add.w	r2, r7, #20
 80097d4:	18d0      	adds	r0, r2, r3
 80097d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80097da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097de:	4413      	add	r3, r2
 80097e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80097e4:	461a      	mov	r2, r3
 80097e6:	2100      	movs	r1, #0
 80097e8:	f013 fb20 	bl	801ce2c <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 80097ec:	f107 0114 	add.w	r1, r7, #20
 80097f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80097f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80097f8:	2000      	movs	r0, #0
 80097fa:	f000 f9b4 	bl	8009b66 <bhy2_hif_set_regs>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8009804:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8009808:	2b00      	cmp	r3, #0
 800980a:	d11b      	bne.n	8009844 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8009812:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8009820:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009824:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8009828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00f      	beq.n	8009850 <bhy2_hif_exec_cmd_generic+0x3a8>
 8009830:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8009834:	2b00      	cmp	r3, #0
 8009836:	f43f af04 	beq.w	8009642 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 800983a:	e009      	b.n	8009850 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 800983c:	23fe      	movs	r3, #254	; 0xfe
 800983e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8009842:	e005      	b.n	8009850 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8009844:	bf00      	nop
        if (hif->read_write_len != 0)
 8009846:	e003      	b.n	8009850 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009848:	23ff      	movs	r3, #255	; 0xff
 800984a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800984e:	e000      	b.n	8009852 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8009850:	bf00      	nop
    }

    return rslt;
 8009852:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8009856:	4618      	mov	r0, r3
 8009858:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800985c:	46bd      	mov	sp, r7
 800985e:	bd90      	pop	{r4, r7, pc}

08009860 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8009868:	2300      	movs	r3, #0
 800986a:	81fb      	strh	r3, [r7, #14]
 800986c:	e027      	b.n	80098be <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fab1 	bl	8009ddc <bhy2_hif_get_interrupt_status>
 800987a:	4603      	mov	r3, r0
 800987c:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 800987e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d115      	bne.n	80098b2 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8009886:	7b3b      	ldrb	r3, [r7, #12]
 8009888:	f003 0320 	and.w	r3, r3, #32
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	737b      	strb	r3, [r7, #13]
                break;
 8009894:	e017      	b.n	80098c6 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	f242 7010 	movw	r0, #10000	; 0x2710
 800989c:	f000 f99b 	bl	8009bd6 <bhy2_hif_delay_us>
 80098a0:	4603      	mov	r3, r0
 80098a2:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 80098a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 80098ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098b0:	e00b      	b.n	80098ca <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 80098b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098b6:	e008      	b.n	80098ca <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	3301      	adds	r3, #1
 80098bc:	81fb      	strh	r3, [r7, #14]
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098c4:	d3d3      	bcc.n	800986e <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 80098c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80098da:	2300      	movs	r3, #0
 80098dc:	81fb      	strh	r3, [r7, #14]
 80098de:	e02f      	b.n	8009940 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80098e6:	f000 f976 	bl	8009bd6 <bhy2_hif_delay_us>
 80098ea:	4603      	mov	r3, r0
 80098ec:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80098ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da02      	bge.n	80098fc <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 80098f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098fa:	e02d      	b.n	8009958 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 80098fc:	f107 010c 	add.w	r1, r7, #12
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	2025      	movs	r0, #37	; 0x25
 8009906:	f000 f8f6 	bl	8009af6 <bhy2_hif_get_regs>
 800990a:	4603      	mov	r3, r0
 800990c:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 800990e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009912:	2b00      	cmp	r3, #0
 8009914:	da02      	bge.n	800991c <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8009916:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800991a:	e01d      	b.n	8009958 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 800991c:	7b3b      	ldrb	r3, [r7, #12]
 800991e:	f003 0310 	and.w	r3, r3, #16
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <bhy2_hif_check_boot_status_ram+0x68>
 8009926:	7b3b      	ldrb	r3, [r7, #12]
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8009930:	7b3b      	ldrb	r3, [r7, #12]
 8009932:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8009936:	2b00      	cmp	r3, #0
 8009938:	d006      	beq.n	8009948 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 800993a:	89fb      	ldrh	r3, [r7, #14]
 800993c:	3301      	adds	r3, #1
 800993e:	81fb      	strh	r3, [r7, #14]
 8009940:	89fb      	ldrh	r3, [r7, #14]
 8009942:	2b63      	cmp	r3, #99	; 0x63
 8009944:	d9cc      	bls.n	80098e0 <bhy2_hif_check_boot_status_ram+0xe>
 8009946:	e000      	b.n	800994a <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8009948:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 800994a:	89fb      	ldrh	r3, [r7, #14]
 800994c:	2b64      	cmp	r3, #100	; 0x64
 800994e:	d102      	bne.n	8009956 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8009950:	f06f 0304 	mvn.w	r3, #4
 8009954:	e000      	b.n	8009958 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d072      	beq.n	8009a62 <bhy2_hif_get_fifo+0x102>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d06f      	beq.n	8009a62 <bhy2_hif_get_fifo+0x102>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d06c      	beq.n	8009a62 <bhy2_hif_get_fifo+0x102>
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d069      	beq.n	8009a62 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 800998e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d114      	bne.n	80099c6 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 800999c:	f107 0114 	add.w	r1, r7, #20
 80099a0:	7bf8      	ldrb	r0, [r7, #15]
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	2202      	movs	r2, #2
 80099a6:	f000 f8a6 	bl	8009af6 <bhy2_hif_get_regs>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 80099b0:	7d3b      	ldrb	r3, [r7, #20]
 80099b2:	b21a      	sxth	r2, r3
 80099b4:	7d7b      	ldrb	r3, [r7, #21]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	b21b      	sxth	r3, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	b21b      	sxth	r3, r3
 80099be:	b29b      	uxth	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d04d      	beq.n	8009a6a <bhy2_hif_get_fifo+0x10a>
 80099ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d149      	bne.n	8009a6a <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d203      	bcs.n	80099e8 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	e003      	b.n	80099f0 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	623b      	str	r3, [r7, #32]
            offset = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80099fa:	e016      	b.n	8009a2a <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	18d1      	adds	r1, r2, r3
 8009a02:	7bf8      	ldrb	r0, [r7, #15]
 8009a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	f000 f875 	bl	8009af6 <bhy2_hif_get_regs>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 8009a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10c      	bne.n	8009a34 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8009a1a:	6a3a      	ldr	r2, [r7, #32]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	4413      	add	r3, r2
 8009a28:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d8e4      	bhi.n	80099fc <bhy2_hif_get_fifo+0x9c>
 8009a32:	e000      	b.n	8009a36 <bhy2_hif_get_fifo+0xd6>
                    break;
 8009a34:	bf00      	nop
            }

            if (read_len != 0)
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	18d1      	adds	r1, r2, r3
 8009a42:	7bf8      	ldrb	r0, [r7, #15]
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	6a3a      	ldr	r2, [r7, #32]
 8009a48:	f000 f855 	bl	8009af6 <bhy2_hif_get_regs>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009a60:	e003      	b.n	8009a6a <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009a62:	23ff      	movs	r3, #255	; 0xff
 8009a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a68:	e000      	b.n	8009a6c <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8009a6a:	bf00      	nop
    }

    return rslt;
 8009a6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3728      	adds	r7, #40	; 0x28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	607a      	str	r2, [r7, #4]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d027      	beq.n	8009ae2 <bhy2_hif_init+0x6a>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d024      	beq.n	8009ae2 <bhy2_hif_init+0x6a>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d021      	beq.n	8009ae2 <bhy2_hif_init+0x6a>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01e      	beq.n	8009ae2 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aba:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	7bfa      	ldrb	r2, [r7, #15]
 8009ac0:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d006      	beq.n	8009ada <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	089b      	lsrs	r3, r3, #2
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	009a      	lsls	r2, r3, #2
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009ad8:	e005      	b.n	8009ae6 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	6a3a      	ldr	r2, [r7, #32]
 8009ade:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8009ae0:	e001      	b.n	8009ae6 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ae2:	23ff      	movs	r3, #255	; 0xff
 8009ae4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009af6:	b590      	push	{r4, r7, lr}
 8009af8:	b087      	sub	sp, #28
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]
 8009b02:	4603      	mov	r3, r0
 8009b04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d022      	beq.n	8009b56 <bhy2_hif_get_regs+0x60>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01e      	beq.n	8009b56 <bhy2_hif_get_regs+0x60>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01b      	beq.n	8009b56 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	7b1b      	ldrb	r3, [r3, #12]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d103      	bne.n	8009b2e <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b2c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681c      	ldr	r4, [r3, #0]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	7bf8      	ldrb	r0, [r7, #15]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	47a0      	blx	r4
 8009b3e:	4603      	mov	r3, r0
 8009b40:	461a      	mov	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009b50:	23fd      	movs	r3, #253	; 0xfd
 8009b52:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009b54:	e001      	b.n	8009b5a <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009b56:	23ff      	movs	r3, #255	; 0xff
 8009b58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	371c      	adds	r7, #28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd90      	pop	{r4, r7, pc}

08009b66 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009b66:	b590      	push	{r4, r7, lr}
 8009b68:	b087      	sub	sp, #28
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d022      	beq.n	8009bc6 <bhy2_hif_set_regs+0x60>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01e      	beq.n	8009bc6 <bhy2_hif_set_regs+0x60>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01b      	beq.n	8009bc6 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	7b1b      	ldrb	r3, [r3, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d103      	bne.n	8009b9e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	685c      	ldr	r4, [r3, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	7bf8      	ldrb	r0, [r7, #15]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	68b9      	ldr	r1, [r7, #8]
 8009bac:	47a0      	blx	r4
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8009bc0:	23fd      	movs	r3, #253	; 0xfd
 8009bc2:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8009bc4:	e001      	b.n	8009bca <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009bc6:	23ff      	movs	r3, #255	; 0xff
 8009bc8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd90      	pop	{r4, r7, pc}

08009bd6 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <bhy2_hif_delay_us+0x2c>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	6912      	ldr	r2, [r2, #16]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
 8009c00:	e001      	b.n	8009c06 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009c02:	23ff      	movs	r3, #255	; 0xff
 8009c04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b088      	sub	sp, #32
 8009c16:	af04      	add	r7, sp, #16
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
 8009c1e:	4603      	mov	r3, r0
 8009c20:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8009c22:	89f8      	ldrh	r0, [r7, #14]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	9302      	str	r3, [sp, #8]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	2300      	movs	r3, #0
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	f7ff fc37 	bl	80094a8 <bhy2_hif_exec_cmd_generic>
 8009c3a:	4603      	mov	r3, r0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4603      	mov	r3, r0
 8009c52:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d06e      	beq.n	8009d40 <bhy2_hif_get_parameter+0xfc>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d06b      	beq.n	8009d40 <bhy2_hif_get_parameter+0xfc>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d068      	beq.n	8009d40 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009c74:	f107 0113 	add.w	r1, r7, #19
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	2006      	movs	r0, #6
 8009c7e:	f7ff ff3a 	bl	8009af6 <bhy2_hif_get_regs>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d15b      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8009c8e:	7cfb      	ldrb	r3, [r7, #19]
 8009c90:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8009c92:	7cfb      	ldrb	r3, [r7, #19]
 8009c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8009c9c:	7cfb      	ldrb	r3, [r7, #19]
 8009c9e:	7dba      	ldrb	r2, [r7, #22]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d008      	beq.n	8009cb6 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009ca4:	f107 0113 	add.w	r1, r7, #19
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	2201      	movs	r2, #1
 8009cac:	2006      	movs	r0, #6
 8009cae:	f7ff ff5a 	bl	8009b66 <bhy2_hif_set_regs>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8009cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d143      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8009cbe:	89fb      	ldrh	r3, [r7, #14]
 8009cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cc4:	b298      	uxth	r0, r3
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f7ff ffa1 	bl	8009c12 <bhy2_hif_exec_cmd>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8009cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d134      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8009cdc:	6a38      	ldr	r0, [r7, #32]
 8009cde:	f7ff fdbf 	bl	8009860 <bhy2_wait_status_ready>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8009ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d12b      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8009cee:	f107 0014 	add.w	r0, r7, #20
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	f000 f94b 	bl	8009f96 <bhy2_hif_get_status_fifo>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8009d04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11c      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8009d0c:	7cfb      	ldrb	r3, [r7, #19]
 8009d0e:	7dba      	ldrb	r2, [r7, #22]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d00a      	beq.n	8009d2a <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8009d14:	7dbb      	ldrb	r3, [r7, #22]
 8009d16:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8009d18:	f107 0113 	add.w	r1, r7, #19
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	2006      	movs	r0, #6
 8009d22:	f7ff ff20 	bl	8009b66 <bhy2_hif_set_regs>
 8009d26:	4603      	mov	r3, r0
 8009d28:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8009d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8009d32:	8abb      	ldrh	r3, [r7, #20]
 8009d34:	89fa      	ldrh	r2, [r7, #14]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d005      	beq.n	8009d46 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8009d3a:	23fb      	movs	r3, #251	; 0xfb
 8009d3c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8009d3e:	e002      	b.n	8009d46 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009d40:	23ff      	movs	r3, #255	; 0xff
 8009d42:	75fb      	strb	r3, [r7, #23]
 8009d44:	e000      	b.n	8009d48 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8009d46:	bf00      	nop
    }

    return rslt;
 8009d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2201      	movs	r2, #1
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	201c      	movs	r0, #28
 8009d66:	f7ff fec6 	bl	8009af6 <bhy2_hif_get_regs>
 8009d6a:	4603      	mov	r3, r0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d013      	beq.n	8009dac <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8009d84:	f107 010c 	add.w	r1, r7, #12
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	2020      	movs	r0, #32
 8009d8e:	f7ff feb2 	bl	8009af6 <bhy2_hif_get_regs>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8009d96:	7b3b      	ldrb	r3, [r7, #12]
 8009d98:	b21a      	sxth	r2, r3
 8009d9a:	7b7b      	ldrb	r3, [r7, #13]
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	b21b      	sxth	r3, r3
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b21b      	sxth	r3, r3
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	801a      	strh	r2, [r3, #0]
 8009daa:	e001      	b.n	8009db0 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009dac:	23ff      	movs	r3, #255	; 0xff
 8009dae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	2025      	movs	r0, #37	; 0x25
 8009dce:	f7ff fe92 	bl	8009af6 <bhy2_hif_get_regs>
 8009dd2:	4603      	mov	r3, r0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	6879      	ldr	r1, [r7, #4]
 8009dec:	202d      	movs	r0, #45	; 0x2d
 8009dee:	f7ff fe82 	bl	8009af6 <bhy2_hif_get_regs>
 8009df2:	4603      	mov	r3, r0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8009e04:	2301      	movs	r3, #1
 8009e06:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8009e0c:	230f      	movs	r3, #15
 8009e0e:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8009e10:	f107 010b 	add.w	r1, r7, #11
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	2014      	movs	r0, #20
 8009e1a:	f7ff fea4 	bl	8009b66 <bhy2_hif_set_regs>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d12b      	bne.n	8009e82 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8009e2a:	e01c      	b.n	8009e66 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009e32:	f7ff fed0 	bl	8009bd6 <bhy2_hif_delay_us>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8009e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d111      	bne.n	8009e66 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8009e42:	f107 010a 	add.w	r1, r7, #10
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	2025      	movs	r0, #37	; 0x25
 8009e4c:	f7ff fe53 	bl	8009af6 <bhy2_hif_get_regs>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8009e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8009e5c:	7abb      	ldrb	r3, [r7, #10]
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d105      	bne.n	8009e72 <bhy2_hif_reset+0x76>
        while (count--)
 8009e66:	89bb      	ldrh	r3, [r7, #12]
 8009e68:	1e5a      	subs	r2, r3, #1
 8009e6a:	81ba      	strh	r2, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1dd      	bne.n	8009e2c <bhy2_hif_reset+0x30>
 8009e70:	e000      	b.n	8009e74 <bhy2_hif_reset+0x78>
                    {
                        break;
 8009e72:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8009e74:	7abb      	ldrb	r3, [r7, #10]
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8009e7e:	23fb      	movs	r3, #251	; 0xfb
 8009e80:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b086      	sub	sp, #24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d027      	beq.n	8009ef4 <bhy2_hif_upload_firmware_to_ram+0x66>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d024      	beq.n	8009ef4 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b21a      	sxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	b21b      	sxth	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b21b      	sxth	r3, r3
 8009ebe:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8009ec0:	8abb      	ldrh	r3, [r7, #20]
 8009ec2:	f246 622b 	movw	r2, #26155	; 0x662b
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d002      	beq.n	8009ed0 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8009eca:	23fc      	movs	r3, #252	; 0xfc
 8009ecc:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8009ece:	e014      	b.n	8009efa <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	68f9      	ldr	r1, [r7, #12]
 8009ed6:	2002      	movs	r0, #2
 8009ed8:	f7ff fe9b 	bl	8009c12 <bhy2_hif_exec_cmd>
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8009ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d108      	bne.n	8009efa <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fcf2 	bl	80098d2 <bhy2_hif_check_boot_status_ram>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8009ef2:	e002      	b.n	8009efa <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8009ef4:	23ff      	movs	r3, #255	; 0xff
 8009ef6:	75fb      	strb	r3, [r7, #23]
 8009ef8:	e000      	b.n	8009efc <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8009efa:	bf00      	nop
    }

    return rslt;
 8009efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	2100      	movs	r1, #0
 8009f16:	2003      	movs	r0, #3
 8009f18:	f7ff fe7b 	bl	8009c12 <bhy2_hif_exec_cmd>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8009f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff fcd2 	bl	80098d2 <bhy2_hif_check_boot_status_ram>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b086      	sub	sp, #24
 8009f42:	af02      	add	r7, sp, #8
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	f7ff fd00 	bl	8009960 <bhy2_hif_get_fifo>
 8009f60:	4603      	mov	r3, r0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af02      	add	r7, sp, #8
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	68f9      	ldr	r1, [r7, #12]
 8009f86:	2002      	movs	r0, #2
 8009f88:	f7ff fcea 	bl	8009960 <bhy2_hif_get_fifo>
 8009f8c:	4603      	mov	r3, r0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b086      	sub	sp, #24
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
 8009fa2:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8009fa4:	f107 0110 	add.w	r1, r7, #16
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	2204      	movs	r2, #4
 8009fac:	2003      	movs	r0, #3
 8009fae:	f7ff fda2 	bl	8009af6 <bhy2_hif_get_regs>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8009fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d130      	bne.n	800a020 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8009fbe:	7c3b      	ldrb	r3, [r7, #16]
 8009fc0:	b21a      	sxth	r2, r3
 8009fc2:	f107 0310 	add.w	r3, r7, #16
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	021b      	lsls	r3, r3, #8
 8009fcc:	b21b      	sxth	r3, r3
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	b21b      	sxth	r3, r3
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8009fd8:	7cbb      	ldrb	r3, [r7, #18]
 8009fda:	b21a      	sxth	r2, r3
 8009fdc:	f107 0310 	add.w	r3, r7, #16
 8009fe0:	3302      	adds	r3, #2
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	b21b      	sxth	r3, r3
 8009fea:	4313      	orrs	r3, r2
 8009fec:	b21b      	sxth	r3, r3
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d010      	beq.n	800a020 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	429a      	cmp	r2, r3
 800a006:	d202      	bcs.n	800a00e <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 800a008:	23fa      	movs	r3, #250	; 0xfa
 800a00a:	75fb      	strb	r3, [r7, #23]
 800a00c:	e008      	b.n	800a020 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	2003      	movs	r0, #3
 800a018:	f7ff fd6d 	bl	8009af6 <bhy2_hif_get_regs>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800a020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	2003      	movs	r0, #3
 800a04a:	f7ff fc89 	bl	8009960 <bhy2_hif_get_fifo>
 800a04e:	4603      	mov	r3, r0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	ed87 0a02 	vstr	s0, [r7, #8]
 800a064:	6079      	str	r1, [r7, #4]
 800a066:	603a      	str	r2, [r7, #0]
 800a068:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	0c1b      	lsrs	r3, r3, #16
 800a084:	b2db      	uxtb	r3, r3
 800a086:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	0e1b      	lsrs	r3, r3, #24
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800a0a6:	f107 0118 	add.w	r1, r7, #24
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	200d      	movs	r0, #13
 800a0b0:	f7ff fdaf 	bl	8009c12 <bhy2_hif_exec_cmd>
 800a0b4:	4603      	mov	r3, r0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b090      	sub	sp, #64	; 0x40
 800a0c2:	af02      	add	r7, sp, #8
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80da 	beq.w	800a288 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2bf5      	cmp	r3, #245	; 0xf5
 800a0d8:	d903      	bls.n	800a0e2 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 800a0da:	23fe      	movs	r3, #254	; 0xfe
 800a0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0e0:	e0d5      	b.n	800a28e <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a0ea:	b298      	uxth	r0, r3
 800a0ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a0f0:	f107 0114 	add.w	r1, r7, #20
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	221c      	movs	r2, #28
 800a0fc:	f7ff fda2 	bl	8009c44 <bhy2_hif_get_parameter>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 800a106:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 80bf 	bne.w	800a28e <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	2b1c      	cmp	r3, #28
 800a114:	d003      	beq.n	800a11e <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 800a116:	23fe      	movs	r3, #254	; 0xfe
 800a118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a11c:	e0b7      	b.n	800a28e <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 800a11e:	7d3a      	ldrb	r2, [r7, #20]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 800a124:	7d7a      	ldrb	r2, [r7, #21]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 800a12a:	7dba      	ldrb	r2, [r7, #22]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 800a130:	7dfa      	ldrb	r2, [r7, #23]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800a136:	7e3a      	ldrb	r2, [r7, #24]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800a13c:	7e7a      	ldrb	r2, [r7, #25]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 800a142:	7eba      	ldrb	r2, [r7, #26]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800a148:	7efa      	ldrb	r2, [r7, #27]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800a14e:	7f3a      	ldrb	r2, [r7, #28]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 800a154:	7f7a      	ldrb	r2, [r7, #29]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800a15a:	7fba      	ldrb	r2, [r7, #30]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 800a160:	7ffa      	ldrb	r2, [r7, #31]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800a166:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800a16e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800a176:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800a17e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800a186:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800a18e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800a196:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800a19e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800a1a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800a1ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800a1b6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800a1be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800a1c6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	791b      	ldrb	r3, [r3, #4]
 800a1d2:	b21a      	sxth	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	795b      	ldrb	r3, [r3, #5]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	b21b      	sxth	r3, r3
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	b21b      	sxth	r3, r3
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	799b      	ldrb	r3, [r3, #6]
 800a1ea:	b21a      	sxth	r2, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	79db      	ldrb	r3, [r3, #7]
 800a1f0:	021b      	lsls	r3, r3, #8
 800a1f2:	b21b      	sxth	r3, r3
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	b21b      	sxth	r3, r3
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7a1b      	ldrb	r3, [r3, #8]
 800a202:	461a      	mov	r2, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	7a5b      	ldrb	r3, [r3, #9]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	431a      	orrs	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	7a9b      	ldrb	r3, [r3, #10]
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	431a      	orrs	r2, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	7adb      	ldrb	r3, [r3, #11]
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	431a      	orrs	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	7b1b      	ldrb	r3, [r3, #12]
 800a224:	461a      	mov	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	7b5b      	ldrb	r3, [r3, #13]
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	431a      	orrs	r2, r3
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	7b9b      	ldrb	r3, [r3, #14]
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	431a      	orrs	r2, r3
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	7bdb      	ldrb	r3, [r3, #15]
 800a23a:	061b      	lsls	r3, r3, #24
 800a23c:	431a      	orrs	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	7c1b      	ldrb	r3, [r3, #16]
 800a246:	461a      	mov	r2, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	7c5b      	ldrb	r3, [r3, #17]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	431a      	orrs	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	7c9b      	ldrb	r3, [r3, #18]
 800a254:	041b      	lsls	r3, r3, #16
 800a256:	431a      	orrs	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	7cdb      	ldrb	r3, [r3, #19]
 800a25c:	061b      	lsls	r3, r3, #24
 800a25e:	431a      	orrs	r2, r3
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	7e1b      	ldrb	r3, [r3, #24]
 800a268:	461a      	mov	r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	7e5b      	ldrb	r3, [r3, #25]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	431a      	orrs	r2, r3
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	7e9b      	ldrb	r3, [r3, #26]
 800a276:	041b      	lsls	r3, r3, #16
 800a278:	431a      	orrs	r2, r3
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	7edb      	ldrb	r3, [r3, #27]
 800a27e:	061b      	lsls	r3, r3, #24
 800a280:	431a      	orrs	r2, r3
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	619a      	str	r2, [r3, #24]
 800a286:	e002      	b.n	800a28e <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800a288:	23ff      	movs	r3, #255	; 0xff
 800a28a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800a28e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a292:	4618      	mov	r0, r3
 800a294:	3738      	adds	r7, #56	; 0x38
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b21a      	sxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b21a      	sxth	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3302      	adds	r3, #2
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b21a      	sxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3303      	adds	r3, #3
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	b21b      	sxth	r3, r3
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	b21a      	sxth	r2, r3
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	b21a      	sxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3305      	adds	r3, #5
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	b21b      	sxth	r3, r3
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	b21a      	sxth	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3306      	adds	r3, #6
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b21a      	sxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3307      	adds	r3, #7
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	021b      	lsls	r3, r3, #8
 800a300:	b21b      	sxth	r3, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	b21a      	sxth	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3308      	adds	r3, #8
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	b21a      	sxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3309      	adds	r3, #9
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b21b      	sxth	r3, r3
 800a320:	b29a      	uxth	r2, r3
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	811a      	strh	r2, [r3, #8]
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a338:	4b12      	ldr	r3, [pc, #72]	; (800a384 <MX_COMP2_Init+0x50>)
 800a33a:	4a13      	ldr	r2, [pc, #76]	; (800a388 <MX_COMP2_Init+0x54>)
 800a33c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800a33e:	4b11      	ldr	r3, [pc, #68]	; (800a384 <MX_COMP2_Init+0x50>)
 800a340:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a344:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <MX_COMP2_Init+0x50>)
 800a348:	2200      	movs	r2, #0
 800a34a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <MX_COMP2_Init+0x50>)
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800a352:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <MX_COMP2_Init+0x50>)
 800a354:	2200      	movs	r2, #0
 800a356:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a358:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <MX_COMP2_Init+0x50>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <MX_COMP2_Init+0x50>)
 800a360:	2200      	movs	r2, #0
 800a362:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800a364:	4b07      	ldr	r3, [pc, #28]	; (800a384 <MX_COMP2_Init+0x50>)
 800a366:	2200      	movs	r2, #0
 800a368:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800a36a:	4b06      	ldr	r3, [pc, #24]	; (800a384 <MX_COMP2_Init+0x50>)
 800a36c:	2211      	movs	r2, #17
 800a36e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a370:	4804      	ldr	r0, [pc, #16]	; (800a384 <MX_COMP2_Init+0x50>)
 800a372:	f001 fcc9 	bl	800bd08 <HAL_COMP_Init>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800a37c:	f000 fbea 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a380:	bf00      	nop
 800a382:	bd80      	pop	{r7, pc}
 800a384:	24001428 	.word	0x24001428
 800a388:	58003810 	.word	0x58003810

0800a38c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08a      	sub	sp, #40	; 0x28
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a394:	f107 0314 	add.w	r3, r7, #20
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	605a      	str	r2, [r3, #4]
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	60da      	str	r2, [r3, #12]
 800a3a2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1c      	ldr	r2, [pc, #112]	; (800a41c <HAL_COMP_MspInit+0x90>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d132      	bne.n	800a414 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800a3ae:	4b1c      	ldr	r3, [pc, #112]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3b4:	4a1a      	ldr	r2, [pc, #104]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a3be:	4b18      	ldr	r3, [pc, #96]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a3cc:	4b14      	ldr	r3, [pc, #80]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3d2:	4a13      	ldr	r2, [pc, #76]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3d4:	f043 0310 	orr.w	r3, r3, #16
 800a3d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3dc:	4b10      	ldr	r3, [pc, #64]	; (800a420 <HAL_COMP_MspInit+0x94>)
 800a3de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3e2:	f003 0310 	and.w	r3, r3, #16
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a3ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3f8:	f107 0314 	add.w	r3, r7, #20
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4809      	ldr	r0, [pc, #36]	; (800a424 <HAL_COMP_MspInit+0x98>)
 800a400:	f004 ff98 	bl	800f334 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800a404:	2200      	movs	r2, #0
 800a406:	2100      	movs	r1, #0
 800a408:	2089      	movs	r0, #137	; 0x89
 800a40a:	f001 ff40 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 800a40e:	2089      	movs	r0, #137	; 0x89
 800a410:	f001 ff57 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800a414:	bf00      	nop
 800a416:	3728      	adds	r7, #40	; 0x28
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	58003810 	.word	0x58003810
 800a420:	58024400 	.word	0x58024400
 800a424:	58021000 	.word	0x58021000

0800a428 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	; 0x28
 800a42c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a42e:	1d3b      	adds	r3, r7, #4
 800a430:	2224      	movs	r2, #36	; 0x24
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f012 fcf9 	bl	801ce2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a43a:	4b12      	ldr	r3, [pc, #72]	; (800a484 <MX_DAC1_Init+0x5c>)
 800a43c:	4a12      	ldr	r2, [pc, #72]	; (800a488 <MX_DAC1_Init+0x60>)
 800a43e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a440:	4810      	ldr	r0, [pc, #64]	; (800a484 <MX_DAC1_Init+0x5c>)
 800a442:	f001 ff58 	bl	800c2f6 <HAL_DAC_Init>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a44c:	f000 fb82 	bl	800ab54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a450:	2300      	movs	r3, #0
 800a452:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a454:	2300      	movs	r3, #0
 800a456:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800a458:	2302      	movs	r3, #2
 800a45a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800a45c:	2302      	movs	r3, #2
 800a45e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a464:	1d3b      	adds	r3, r7, #4
 800a466:	2200      	movs	r2, #0
 800a468:	4619      	mov	r1, r3
 800a46a:	4806      	ldr	r0, [pc, #24]	; (800a484 <MX_DAC1_Init+0x5c>)
 800a46c:	f001 ffdc 	bl	800c428 <HAL_DAC_ConfigChannel>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a476:	f000 fb6d 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a47a:	bf00      	nop
 800a47c:	3728      	adds	r7, #40	; 0x28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	24001454 	.word	0x24001454
 800a488:	40007400 	.word	0x40007400

0800a48c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a0b      	ldr	r2, [pc, #44]	; (800a4c8 <HAL_DAC_MspInit+0x3c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d10e      	bne.n	800a4bc <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <HAL_DAC_MspInit+0x40>)
 800a4a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4a4:	4a09      	ldr	r2, [pc, #36]	; (800a4cc <HAL_DAC_MspInit+0x40>)
 800a4a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a4ae:	4b07      	ldr	r3, [pc, #28]	; (800a4cc <HAL_DAC_MspInit+0x40>)
 800a4b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b8:	60fb      	str	r3, [r7, #12]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a4bc:	bf00      	nop
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40007400 	.word	0x40007400
 800a4cc:	58024400 	.word	0x58024400

0800a4d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a4d6:	4b19      	ldr	r3, [pc, #100]	; (800a53c <MX_DMA_Init+0x6c>)
 800a4d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a4dc:	4a17      	ldr	r2, [pc, #92]	; (800a53c <MX_DMA_Init+0x6c>)
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a4e6:	4b15      	ldr	r3, [pc, #84]	; (800a53c <MX_DMA_Init+0x6c>)
 800a4e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	607b      	str	r3, [r7, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	200b      	movs	r0, #11
 800a4fa:	f001 fec8 	bl	800c28e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a4fe:	200b      	movs	r0, #11
 800a500:	f001 fedf 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	200c      	movs	r0, #12
 800a50a:	f001 fec0 	bl	800c28e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a50e:	200c      	movs	r0, #12
 800a510:	f001 fed7 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	200f      	movs	r0, #15
 800a51a:	f001 feb8 	bl	800c28e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a51e:	200f      	movs	r0, #15
 800a520:	f001 fecf 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	2010      	movs	r0, #16
 800a52a:	f001 feb0 	bl	800c28e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a52e:	2010      	movs	r0, #16
 800a530:	f001 fec7 	bl	800c2c2 <HAL_NVIC_EnableIRQ>

}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	58024400 	.word	0x58024400

0800a540 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	; 0x28
 800a544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a546:	f107 0314 	add.w	r3, r7, #20
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	605a      	str	r2, [r3, #4]
 800a550:	609a      	str	r2, [r3, #8]
 800a552:	60da      	str	r2, [r3, #12]
 800a554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a556:	4b3b      	ldr	r3, [pc, #236]	; (800a644 <MX_GPIO_Init+0x104>)
 800a558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a55c:	4a39      	ldr	r2, [pc, #228]	; (800a644 <MX_GPIO_Init+0x104>)
 800a55e:	f043 0304 	orr.w	r3, r3, #4
 800a562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a566:	4b37      	ldr	r3, [pc, #220]	; (800a644 <MX_GPIO_Init+0x104>)
 800a568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a574:	4b33      	ldr	r3, [pc, #204]	; (800a644 <MX_GPIO_Init+0x104>)
 800a576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a57a:	4a32      	ldr	r2, [pc, #200]	; (800a644 <MX_GPIO_Init+0x104>)
 800a57c:	f043 0301 	orr.w	r3, r3, #1
 800a580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a584:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <MX_GPIO_Init+0x104>)
 800a586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a592:	4b2c      	ldr	r3, [pc, #176]	; (800a644 <MX_GPIO_Init+0x104>)
 800a594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a598:	4a2a      	ldr	r2, [pc, #168]	; (800a644 <MX_GPIO_Init+0x104>)
 800a59a:	f043 0310 	orr.w	r3, r3, #16
 800a59e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5a2:	4b28      	ldr	r3, [pc, #160]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	60bb      	str	r3, [r7, #8]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5b0:	4b24      	ldr	r3, [pc, #144]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5b6:	4a23      	ldr	r2, [pc, #140]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5b8:	f043 0302 	orr.w	r3, r3, #2
 800a5bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5c0:	4b20      	ldr	r3, [pc, #128]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5d4:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5d6:	f043 0308 	orr.w	r3, r3, #8
 800a5da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5de:	4b19      	ldr	r3, [pc, #100]	; (800a644 <MX_GPIO_Init+0x104>)
 800a5e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	603b      	str	r3, [r7, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	4815      	ldr	r0, [pc, #84]	; (800a648 <MX_GPIO_Init+0x108>)
 800a5f2:	f005 f84f 	bl	800f694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5fc:	4813      	ldr	r0, [pc, #76]	; (800a64c <MX_GPIO_Init+0x10c>)
 800a5fe:	f005 f849 	bl	800f694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 800a602:	2301      	movs	r3, #1
 800a604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a606:	2301      	movs	r3, #1
 800a608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a60a:	2302      	movs	r3, #2
 800a60c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a60e:	2303      	movs	r3, #3
 800a610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 800a612:	f107 0314 	add.w	r3, r7, #20
 800a616:	4619      	mov	r1, r3
 800a618:	480b      	ldr	r0, [pc, #44]	; (800a648 <MX_GPIO_Init+0x108>)
 800a61a:	f004 fe8b 	bl	800f334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800a61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a624:	2301      	movs	r3, #1
 800a626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a628:	2302      	movs	r3, #2
 800a62a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a62c:	2303      	movs	r3, #3
 800a62e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800a630:	f107 0314 	add.w	r3, r7, #20
 800a634:	4619      	mov	r1, r3
 800a636:	4805      	ldr	r0, [pc, #20]	; (800a64c <MX_GPIO_Init+0x10c>)
 800a638:	f004 fe7c 	bl	800f334 <HAL_GPIO_Init>

}
 800a63c:	bf00      	nop
 800a63e:	3728      	adds	r7, #40	; 0x28
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	58024400 	.word	0x58024400
 800a648:	58020800 	.word	0x58020800
 800a64c:	58021000 	.word	0x58021000

0800a650 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a654:	4b1b      	ldr	r3, [pc, #108]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a656:	4a1c      	ldr	r2, [pc, #112]	; (800a6c8 <MX_I2C2_Init+0x78>)
 800a658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800a65a:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a65c:	4a1b      	ldr	r2, [pc, #108]	; (800a6cc <MX_I2C2_Init+0x7c>)
 800a65e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a660:	4b18      	ldr	r3, [pc, #96]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a662:	2200      	movs	r2, #0
 800a664:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a668:	2201      	movs	r2, #1
 800a66a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a66c:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a66e:	2200      	movs	r2, #0
 800a670:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a672:	4b14      	ldr	r3, [pc, #80]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a674:	2200      	movs	r2, #0
 800a676:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a678:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a680:	2200      	movs	r2, #0
 800a682:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a684:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a686:	2200      	movs	r2, #0
 800a688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a68a:	480e      	ldr	r0, [pc, #56]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a68c:	f005 f81c 	bl	800f6c8 <HAL_I2C_Init>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a696:	f000 fa5d 	bl	800ab54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a69a:	2100      	movs	r1, #0
 800a69c:	4809      	ldr	r0, [pc, #36]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a69e:	f005 ff28 	bl	80104f2 <HAL_I2CEx_ConfigAnalogFilter>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a6a8:	f000 fa54 	bl	800ab54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <MX_I2C2_Init+0x74>)
 800a6b0:	f005 ff6a 	bl	8010588 <HAL_I2CEx_ConfigDigitalFilter>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a6ba:	f000 fa4b 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a6be:	bf00      	nop
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	24001468 	.word	0x24001468
 800a6c8:	40005800 	.word	0x40005800
 800a6cc:	00b03fdb 	.word	0x00b03fdb

0800a6d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b0b8      	sub	sp, #224	; 0xe0
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	609a      	str	r2, [r3, #8]
 800a6e4:	60da      	str	r2, [r3, #12]
 800a6e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	22bc      	movs	r2, #188	; 0xbc
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f012 fb9b 	bl	801ce2c <memset>
  if(i2cHandle->Instance==I2C2)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a5a      	ldr	r2, [pc, #360]	; (800a864 <HAL_I2C_MspInit+0x194>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	f040 80ad 	bne.w	800a85c <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a702:	2308      	movs	r3, #8
 800a704:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800a706:	2300      	movs	r3, #0
 800a708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a70c:	f107 0310 	add.w	r3, r7, #16
 800a710:	4618      	mov	r0, r3
 800a712:	f008 fa5f 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800a71c:	f000 fa1a 	bl	800ab54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a720:	4b51      	ldr	r3, [pc, #324]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a726:	4a50      	ldr	r2, [pc, #320]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a728:	f043 0302 	orr.w	r3, r3, #2
 800a72c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a730:	4b4d      	ldr	r3, [pc, #308]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a73e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a746:	2312      	movs	r3, #18
 800a748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a752:	2300      	movs	r3, #0
 800a754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a758:	2304      	movs	r3, #4
 800a75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a75e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a762:	4619      	mov	r1, r3
 800a764:	4841      	ldr	r0, [pc, #260]	; (800a86c <HAL_I2C_MspInit+0x19c>)
 800a766:	f004 fde5 	bl	800f334 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a76a:	4b3f      	ldr	r3, [pc, #252]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a76c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a770:	4a3d      	ldr	r2, [pc, #244]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a776:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a77a:	4b3b      	ldr	r3, [pc, #236]	; (800a868 <HAL_I2C_MspInit+0x198>)
 800a77c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a784:	60bb      	str	r3, [r7, #8]
 800a786:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800a788:	4b39      	ldr	r3, [pc, #228]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a78a:	4a3a      	ldr	r2, [pc, #232]	; (800a874 <HAL_I2C_MspInit+0x1a4>)
 800a78c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800a78e:	4b38      	ldr	r3, [pc, #224]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a790:	2223      	movs	r2, #35	; 0x23
 800a792:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a794:	4b36      	ldr	r3, [pc, #216]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a796:	2200      	movs	r2, #0
 800a798:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a79a:	4b35      	ldr	r3, [pc, #212]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7a0:	4b33      	ldr	r3, [pc, #204]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7a6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7a8:	4b31      	ldr	r3, [pc, #196]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7ae:	4b30      	ldr	r3, [pc, #192]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800a7b4:	4b2e      	ldr	r3, [pc, #184]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a7ba:	4b2d      	ldr	r3, [pc, #180]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7c0:	4b2b      	ldr	r3, [pc, #172]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800a7c6:	482a      	ldr	r0, [pc, #168]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7c8:	f001 ff5e 	bl	800c688 <HAL_DMA_Init>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 800a7d2:	f000 f9bf 	bl	800ab54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a25      	ldr	r2, [pc, #148]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7da:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7dc:	4a24      	ldr	r2, [pc, #144]	; (800a870 <HAL_I2C_MspInit+0x1a0>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800a7e2:	4b25      	ldr	r3, [pc, #148]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a7e4:	4a25      	ldr	r2, [pc, #148]	; (800a87c <HAL_I2C_MspInit+0x1ac>)
 800a7e6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800a7e8:	4b23      	ldr	r3, [pc, #140]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a7ea:	2224      	movs	r2, #36	; 0x24
 800a7ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7ee:	4b22      	ldr	r3, [pc, #136]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a7f0:	2240      	movs	r2, #64	; 0x40
 800a7f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7f4:	4b20      	ldr	r3, [pc, #128]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7fa:	4b1f      	ldr	r3, [pc, #124]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a7fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a800:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a802:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a804:	2200      	movs	r2, #0
 800a806:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a808:	4b1b      	ldr	r3, [pc, #108]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800a80e:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a810:	2200      	movs	r2, #0
 800a812:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a814:	4b18      	ldr	r3, [pc, #96]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a816:	2200      	movs	r2, #0
 800a818:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a81a:	4b17      	ldr	r3, [pc, #92]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800a820:	4815      	ldr	r0, [pc, #84]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a822:	f001 ff31 	bl	800c688 <HAL_DMA_Init>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 800a82c:	f000 f992 	bl	800ab54 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a11      	ldr	r2, [pc, #68]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a834:	639a      	str	r2, [r3, #56]	; 0x38
 800a836:	4a10      	ldr	r2, [pc, #64]	; (800a878 <HAL_I2C_MspInit+0x1a8>)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800a83c:	2200      	movs	r2, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	2021      	movs	r0, #33	; 0x21
 800a842:	f001 fd24 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a846:	2021      	movs	r0, #33	; 0x21
 800a848:	f001 fd3b 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	2022      	movs	r0, #34	; 0x22
 800a852:	f001 fd1c 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a856:	2022      	movs	r0, #34	; 0x22
 800a858:	f001 fd33 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a85c:	bf00      	nop
 800a85e:	37e0      	adds	r7, #224	; 0xe0
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40005800 	.word	0x40005800
 800a868:	58024400 	.word	0x58024400
 800a86c:	58020400 	.word	0x58020400
 800a870:	240014b4 	.word	0x240014b4
 800a874:	40020010 	.word	0x40020010
 800a878:	2400152c 	.word	0x2400152c
 800a87c:	40020028 	.word	0x40020028

0800a880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a886:	f001 f97d 	bl	800bb84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a88a:	f000 f85d 	bl	800a948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a88e:	f7ff fe57 	bl	800a540 <MX_GPIO_Init>
  MX_DMA_Init();
 800a892:	f7ff fe1d 	bl	800a4d0 <MX_DMA_Init>
  MX_I2C2_Init();
 800a896:	f7ff fedb 	bl	800a650 <MX_I2C2_Init>
  MX_SPI1_Init();
 800a89a:	f000 f961 	bl	800ab60 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800a89e:	f011 fce7 	bl	801c270 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800a8a2:	f000 ff01 	bl	800b6a8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800a8a6:	f000 fe0d 	bl	800b4c4 <MX_UART4_Init>
  MX_UART7_Init();
 800a8aa:	f000 fe59 	bl	800b560 <MX_UART7_Init>
  MX_UART8_Init();
 800a8ae:	f000 fea5 	bl	800b5fc <MX_UART8_Init>
  MX_USART3_UART_Init();
 800a8b2:	f000 ff45 	bl	800b740 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800a8b6:	f000 fd05 	bl	800b2c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800a8ba:	f000 fcb5 	bl	800b228 <MX_TIM2_Init>
  MX_TIM4_Init();
 800a8be:	f000 fd4f 	bl	800b360 <MX_TIM4_Init>
  MX_COMP2_Init();
 800a8c2:	f7ff fd37 	bl	800a334 <MX_COMP2_Init>
  MX_DAC1_Init();
 800a8c6:	f7ff fdaf 	bl	800a428 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4817      	ldr	r0, [pc, #92]	; (800a92c <main+0xac>)
 800a8ce:	f001 fd34 	bl	800c33a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 800a8d2:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4814      	ldr	r0, [pc, #80]	; (800a92c <main+0xac>)
 800a8dc:	f001 fd7f 	bl	800c3de <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 800a8e0:	4813      	ldr	r0, [pc, #76]	; (800a930 <main+0xb0>)
 800a8e2:	f00a fe63 	bl	80155ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800a8e6:	4813      	ldr	r0, [pc, #76]	; (800a934 <main+0xb4>)
 800a8e8:	f00a fe60 	bl	80155ac <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 800a8ec:	4812      	ldr	r0, [pc, #72]	; (800a938 <main+0xb8>)
 800a8ee:	f001 fb35 	bl	800bf5c <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadUart = &huart3;
 800a8f2:	4b12      	ldr	r3, [pc, #72]	; (800a93c <main+0xbc>)
 800a8f4:	607b      	str	r3, [r7, #4]
	config.HeadTimeout = 10;
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <main+0xc0>)
 800a8fc:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 800a8fe:	230a      	movs	r3, #10
 800a900:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 800a902:	4b10      	ldr	r3, [pc, #64]	; (800a944 <main+0xc4>)
 800a904:	617b      	str	r3, [r7, #20]

	if(MotherboardInit(config))
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	1d3b      	adds	r3, r7, #4
 800a90c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a90e:	f7f7 fb9b 	bl	8002048 <MotherboardInit>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <main+0x9c>
		return 1;
 800a918:	2301      	movs	r3, #1
 800a91a:	e002      	b.n	800a922 <main+0xa2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 800a91c:	f7f7 fbe2 	bl	80020e4 <MotherboardTick>
 800a920:	e7fc      	b.n	800a91c <main+0x9c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	24001454 	.word	0x24001454
 800a930:	2400176c 	.word	0x2400176c
 800a934:	24001720 	.word	0x24001720
 800a938:	24001428 	.word	0x24001428
 800a93c:	24001a44 	.word	0x24001a44
 800a940:	24001924 	.word	0x24001924
 800a944:	240015a4 	.word	0x240015a4

0800a948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b09e      	sub	sp, #120	; 0x78
 800a94c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a94e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a952:	224c      	movs	r2, #76	; 0x4c
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f012 fa68 	bl	801ce2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a95c:	f107 030c 	add.w	r3, r7, #12
 800a960:	2220      	movs	r2, #32
 800a962:	2100      	movs	r1, #0
 800a964:	4618      	mov	r0, r3
 800a966:	f012 fa61 	bl	801ce2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a96a:	2002      	movs	r0, #2
 800a96c:	f007 f92e 	bl	8011bcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a970:	2300      	movs	r3, #0
 800a972:	60bb      	str	r3, [r7, #8]
 800a974:	4b4d      	ldr	r3, [pc, #308]	; (800aaac <SystemClock_Config+0x164>)
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a4c      	ldr	r2, [pc, #304]	; (800aaac <SystemClock_Config+0x164>)
 800a97a:	f023 0301 	bic.w	r3, r3, #1
 800a97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a980:	4b4a      	ldr	r3, [pc, #296]	; (800aaac <SystemClock_Config+0x164>)
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	4b49      	ldr	r3, [pc, #292]	; (800aab0 <SystemClock_Config+0x168>)
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	4a48      	ldr	r2, [pc, #288]	; (800aab0 <SystemClock_Config+0x168>)
 800a990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a994:	6193      	str	r3, [r2, #24]
 800a996:	4b46      	ldr	r3, [pc, #280]	; (800aab0 <SystemClock_Config+0x168>)
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a99e:	60bb      	str	r3, [r7, #8]
 800a9a0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a9a2:	bf00      	nop
 800a9a4:	4b42      	ldr	r3, [pc, #264]	; (800aab0 <SystemClock_Config+0x168>)
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9b0:	d1f8      	bne.n	800a9a4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9b2:	4b40      	ldr	r3, [pc, #256]	; (800aab4 <SystemClock_Config+0x16c>)
 800a9b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9b8:	4a3e      	ldr	r2, [pc, #248]	; (800aab4 <SystemClock_Config+0x16c>)
 800a9ba:	f043 0302 	orr.w	r3, r3, #2
 800a9be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a9c2:	4b3c      	ldr	r3, [pc, #240]	; (800aab4 <SystemClock_Config+0x16c>)
 800a9c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	607b      	str	r3, [r7, #4]
 800a9ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	4b36      	ldr	r3, [pc, #216]	; (800aab0 <SystemClock_Config+0x168>)
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	4a35      	ldr	r2, [pc, #212]	; (800aab0 <SystemClock_Config+0x168>)
 800a9da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a9de:	6193      	str	r3, [r2, #24]
 800a9e0:	4b33      	ldr	r3, [pc, #204]	; (800aab0 <SystemClock_Config+0x168>)
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9e8:	603b      	str	r3, [r7, #0]
 800a9ea:	4b30      	ldr	r3, [pc, #192]	; (800aaac <SystemClock_Config+0x164>)
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4a2f      	ldr	r2, [pc, #188]	; (800aaac <SystemClock_Config+0x164>)
 800a9f0:	f043 0301 	orr.w	r3, r3, #1
 800a9f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9f6:	4b2d      	ldr	r3, [pc, #180]	; (800aaac <SystemClock_Config+0x164>)
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800aa02:	bf00      	nop
 800aa04:	4b2a      	ldr	r3, [pc, #168]	; (800aab0 <SystemClock_Config+0x168>)
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa10:	d1f8      	bne.n	800aa04 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800aa12:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <SystemClock_Config+0x16c>)
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	4a27      	ldr	r2, [pc, #156]	; (800aab4 <SystemClock_Config+0x16c>)
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800aa1e:	2322      	movs	r3, #34	; 0x22
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800aa22:	2301      	movs	r3, #1
 800aa24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800aa32:	2300      	movs	r3, #0
 800aa34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800aa36:	2304      	movs	r3, #4
 800aa38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800aa3a:	233c      	movs	r3, #60	; 0x3c
 800aa3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800aa3e:	2302      	movs	r3, #2
 800aa40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800aa42:	2305      	movs	r3, #5
 800aa44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800aa46:	2302      	movs	r3, #2
 800aa48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800aa4a:	230c      	movs	r3, #12
 800aa4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aa56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f007 f900 	bl	8011c60 <HAL_RCC_OscConfig>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <SystemClock_Config+0x122>
  {
    Error_Handler();
 800aa66:	f000 f875 	bl	800ab54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aa6a:	233f      	movs	r3, #63	; 0x3f
 800aa6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800aa76:	2308      	movs	r3, #8
 800aa78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800aa7a:	2340      	movs	r3, #64	; 0x40
 800aa7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800aa7e:	2340      	movs	r3, #64	; 0x40
 800aa80:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800aa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800aa88:	2340      	movs	r3, #64	; 0x40
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	2104      	movs	r1, #4
 800aa92:	4618      	mov	r0, r3
 800aa94:	f007 fd12 	bl	80124bc <HAL_RCC_ClockConfig>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800aa9e:	f000 f859 	bl	800ab54 <Error_Handler>
  }
}
 800aaa2:	bf00      	nop
 800aaa4:	3778      	adds	r7, #120	; 0x78
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	58000400 	.word	0x58000400
 800aab0:	58024800 	.word	0x58024800
 800aab4:	58024400 	.word	0x58024400

0800aab8 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a04      	ldr	r2, [pc, #16]	; (800aad8 <HAL_COMP_TriggerCallback+0x20>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d101      	bne.n	800aace <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 800aaca:	f7f7 fb7b 	bl	80021c4 <MotherboardOnStrobe>
	}
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	58003810 	.word	0x58003810

0800aadc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <HAL_UART_RxCpltCallback+0x20>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d101      	bne.n	800aaf2 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadRecieveComplete();
 800aaee:	f7f7 fb7f 	bl	80021f0 <MotherboardOnHeadRecieveComplete>
	}
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	40004800 	.word	0x40004800

0800ab00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a04      	ldr	r2, [pc, #16]	; (800ab20 <HAL_UART_TxCpltCallback+0x20>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d101      	bne.n	800ab16 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadTransmitComplete();
 800ab12:	f7f7 fb77 	bl	8002204 <MotherboardOnHeadTransmitComplete>
	}
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	40004800 	.word	0x40004800

0800ab24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a07      	ldr	r2, [pc, #28]	; (800ab50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d101      	bne.n	800ab3a <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 800ab36:	f7f7 fb6f 	bl	8002218 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab42:	d101      	bne.n	800ab48 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 800ab44:	f7f7 fb72 	bl	800222c <MotherboardOnImuTimerTick>
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	40000400 	.word	0x40000400

0800ab54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ab58:	b672      	cpsid	i
}
 800ab5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800ab5c:	e7fe      	b.n	800ab5c <Error_Handler+0x8>
	...

0800ab60 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ab64:	4b28      	ldr	r3, [pc, #160]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab66:	4a29      	ldr	r2, [pc, #164]	; (800ac0c <MX_SPI1_Init+0xac>)
 800ab68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab6a:	4b27      	ldr	r3, [pc, #156]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ab70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ab72:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ab78:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab7a:	2207      	movs	r2, #7
 800ab7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800ab7e:	4b22      	ldr	r3, [pc, #136]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ab84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ab86:	4b20      	ldr	r3, [pc, #128]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ab8e:	4b1e      	ldr	r3, [pc, #120]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ab94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ab96:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800ab98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ab9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abac:	2200      	movs	r2, #0
 800abae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800abb0:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abbc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800abc4:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800abca:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abcc:	2200      	movs	r2, #0
 800abce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800abd0:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abd8:	2200      	movs	r2, #0
 800abda:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abde:	2200      	movs	r2, #0
 800abe0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800abe2:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800abe8:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abea:	2200      	movs	r2, #0
 800abec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800abee:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800abf4:	4804      	ldr	r0, [pc, #16]	; (800ac08 <MX_SPI1_Init+0xa8>)
 800abf6:	f009 fb55 	bl	80142a4 <HAL_SPI_Init>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800ac00:	f7ff ffa8 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ac04:	bf00      	nop
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	240015a4 	.word	0x240015a4
 800ac0c:	40013000 	.word	0x40013000

0800ac10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b0b8      	sub	sp, #224	; 0xe0
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	605a      	str	r2, [r3, #4]
 800ac22:	609a      	str	r2, [r3, #8]
 800ac24:	60da      	str	r2, [r3, #12]
 800ac26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac28:	f107 0310 	add.w	r3, r7, #16
 800ac2c:	22bc      	movs	r2, #188	; 0xbc
 800ac2e:	2100      	movs	r1, #0
 800ac30:	4618      	mov	r0, r3
 800ac32:	f012 f8fb 	bl	801ce2c <memset>
  if(spiHandle->Instance==SPI1)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a60      	ldr	r2, [pc, #384]	; (800adbc <HAL_SPI_MspInit+0x1ac>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	f040 80b8 	bne.w	800adb2 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800ac42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800ac48:	2320      	movs	r3, #32
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800ac4c:	2381      	movs	r3, #129	; 0x81
 800ac4e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800ac50:	2302      	movs	r3, #2
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800ac54:	2302      	movs	r3, #2
 800ac56:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800ac5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac60:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800ac6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac70:	f107 0310 	add.w	r3, r7, #16
 800ac74:	4618      	mov	r0, r3
 800ac76:	f007 ffad 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800ac80:	f7ff ff68 	bl	800ab54 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ac84:	4b4e      	ldr	r3, [pc, #312]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800ac86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac8a:	4a4d      	ldr	r2, [pc, #308]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800ac8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ac94:	4b4a      	ldr	r3, [pc, #296]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800ac96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aca2:	4b47      	ldr	r3, [pc, #284]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800aca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aca8:	4a45      	ldr	r2, [pc, #276]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800acb2:	4b43      	ldr	r3, [pc, #268]	; (800adc0 <HAL_SPI_MspInit+0x1b0>)
 800acb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800acc0:	23e0      	movs	r3, #224	; 0xe0
 800acc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acc6:	2302      	movs	r3, #2
 800acc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800accc:	2300      	movs	r3, #0
 800acce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acd2:	2300      	movs	r3, #0
 800acd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800acd8:	2305      	movs	r3, #5
 800acda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ace2:	4619      	mov	r1, r3
 800ace4:	4837      	ldr	r0, [pc, #220]	; (800adc4 <HAL_SPI_MspInit+0x1b4>)
 800ace6:	f004 fb25 	bl	800f334 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800acea:	4b37      	ldr	r3, [pc, #220]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800acec:	4a37      	ldr	r2, [pc, #220]	; (800adcc <HAL_SPI_MspInit+0x1bc>)
 800acee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800acf0:	4b35      	ldr	r3, [pc, #212]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800acf2:	2226      	movs	r2, #38	; 0x26
 800acf4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acf6:	4b34      	ldr	r3, [pc, #208]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800acf8:	2240      	movs	r2, #64	; 0x40
 800acfa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acfc:	4b32      	ldr	r3, [pc, #200]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ad02:	4b31      	ldr	r3, [pc, #196]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad0a:	4b2f      	ldr	r3, [pc, #188]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad10:	4b2d      	ldr	r3, [pc, #180]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800ad16:	4b2c      	ldr	r3, [pc, #176]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ad1c:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad22:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad24:	4b28      	ldr	r3, [pc, #160]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800ad2a:	4827      	ldr	r0, [pc, #156]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad2c:	f001 fcac 	bl	800c688 <HAL_DMA_Init>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800ad36:	f7ff ff0d 	bl	800ab54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a22      	ldr	r2, [pc, #136]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad3e:	679a      	str	r2, [r3, #120]	; 0x78
 800ad40:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <HAL_SPI_MspInit+0x1b8>)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800ad46:	4b22      	ldr	r3, [pc, #136]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad48:	4a22      	ldr	r2, [pc, #136]	; (800add4 <HAL_SPI_MspInit+0x1c4>)
 800ad4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800ad4c:	4b20      	ldr	r3, [pc, #128]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad4e:	2225      	movs	r2, #37	; 0x25
 800ad50:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad52:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad58:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ad5e:	4b1c      	ldr	r3, [pc, #112]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad64:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad66:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad6c:	4b18      	ldr	r3, [pc, #96]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800ad72:	4b17      	ldr	r3, [pc, #92]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad7e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800ad86:	4812      	ldr	r0, [pc, #72]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad88:	f001 fc7e 	bl	800c688 <HAL_DMA_Init>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 800ad92:	f7ff fedf 	bl	800ab54 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a0d      	ldr	r2, [pc, #52]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad9a:	67da      	str	r2, [r3, #124]	; 0x7c
 800ad9c:	4a0c      	ldr	r2, [pc, #48]	; (800add0 <HAL_SPI_MspInit+0x1c0>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ada2:	2200      	movs	r2, #0
 800ada4:	2100      	movs	r1, #0
 800ada6:	2023      	movs	r0, #35	; 0x23
 800ada8:	f001 fa71 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800adac:	2023      	movs	r0, #35	; 0x23
 800adae:	f001 fa88 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800adb2:	bf00      	nop
 800adb4:	37e0      	adds	r7, #224	; 0xe0
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40013000 	.word	0x40013000
 800adc0:	58024400 	.word	0x58024400
 800adc4:	58020000 	.word	0x58020000
 800adc8:	2400162c 	.word	0x2400162c
 800adcc:	40020070 	.word	0x40020070
 800add0:	240016a4 	.word	0x240016a4
 800add4:	40020088 	.word	0x40020088

0800add8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adde:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <HAL_MspInit+0x30>)
 800ade0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ade4:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <HAL_MspInit+0x30>)
 800ade6:	f043 0302 	orr.w	r3, r3, #2
 800adea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800adee:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <HAL_MspInit+0x30>)
 800adf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	607b      	str	r3, [r7, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	58024400 	.word	0x58024400

0800ae0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ae10:	e7fe      	b.n	800ae10 <NMI_Handler+0x4>

0800ae12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae12:	b480      	push	{r7}
 800ae14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae16:	e7fe      	b.n	800ae16 <HardFault_Handler+0x4>

0800ae18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae1c:	e7fe      	b.n	800ae1c <MemManage_Handler+0x4>

0800ae1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae22:	e7fe      	b.n	800ae22 <BusFault_Handler+0x4>

0800ae24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae28:	e7fe      	b.n	800ae28 <UsageFault_Handler+0x4>

0800ae2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae2e:	bf00      	nop
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae3c:	bf00      	nop
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ae58:	f000 ff06 	bl	800bc68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae5c:	bf00      	nop
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800ae64:	4802      	ldr	r0, [pc, #8]	; (800ae70 <DMA1_Stream0_IRQHandler+0x10>)
 800ae66:	f002 ff39 	bl	800dcdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	240014b4 	.word	0x240014b4

0800ae74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800ae78:	4802      	ldr	r0, [pc, #8]	; (800ae84 <DMA1_Stream1_IRQHandler+0x10>)
 800ae7a:	f002 ff2f 	bl	800dcdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ae7e:	bf00      	nop
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	2400152c 	.word	0x2400152c

0800ae88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800ae8c:	4802      	ldr	r0, [pc, #8]	; (800ae98 <DMA1_Stream4_IRQHandler+0x10>)
 800ae8e:	f002 ff25 	bl	800dcdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ae92:	bf00      	nop
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	2400162c 	.word	0x2400162c

0800ae9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800aea0:	4802      	ldr	r0, [pc, #8]	; (800aeac <DMA1_Stream5_IRQHandler+0x10>)
 800aea2:	f002 ff1b 	bl	800dcdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800aea6:	bf00      	nop
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	240016a4 	.word	0x240016a4

0800aeb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800aeb4:	4802      	ldr	r0, [pc, #8]	; (800aec0 <TIM2_IRQHandler+0x10>)
 800aeb6:	f00a fbf1 	bl	801569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800aeba:	bf00      	nop
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	24001720 	.word	0x24001720

0800aec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800aec8:	4802      	ldr	r0, [pc, #8]	; (800aed4 <TIM3_IRQHandler+0x10>)
 800aeca:	f00a fbe7 	bl	801569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800aece:	bf00      	nop
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	2400176c 	.word	0x2400176c

0800aed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800aedc:	4802      	ldr	r0, [pc, #8]	; (800aee8 <TIM4_IRQHandler+0x10>)
 800aede:	f00a fbdd 	bl	801569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800aee2:	bf00      	nop
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	240017b8 	.word	0x240017b8

0800aeec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800aef0:	4802      	ldr	r0, [pc, #8]	; (800aefc <I2C2_EV_IRQHandler+0x10>)
 800aef2:	f004 fc79 	bl	800f7e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800aef6:	bf00      	nop
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	24001468 	.word	0x24001468

0800af00 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800af04:	4802      	ldr	r0, [pc, #8]	; (800af10 <I2C2_ER_IRQHandler+0x10>)
 800af06:	f004 fc89 	bl	800f81c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800af0a:	bf00      	nop
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	24001468 	.word	0x24001468

0800af14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800af18:	4802      	ldr	r0, [pc, #8]	; (800af24 <SPI1_IRQHandler+0x10>)
 800af1a:	f009 ff45 	bl	8014da8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800af1e:	bf00      	nop
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	240015a4 	.word	0x240015a4

0800af28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800af2c:	4802      	ldr	r0, [pc, #8]	; (800af38 <USART3_IRQHandler+0x10>)
 800af2e:	f00b f9bd 	bl	80162ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800af32:	bf00      	nop
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	24001a44 	.word	0x24001a44

0800af3c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <UART8_IRQHandler+0x10>)
 800af42:	f00b f9b3 	bl	80162ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	24001924 	.word	0x24001924

0800af50 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800af54:	4802      	ldr	r0, [pc, #8]	; (800af60 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800af56:	f005 fcba 	bl	80108ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800af5a:	bf00      	nop
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	24002fb8 	.word	0x24002fb8

0800af64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800af68:	4802      	ldr	r0, [pc, #8]	; (800af74 <OTG_FS_IRQHandler+0x10>)
 800af6a:	f005 fcb0 	bl	80108ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800af6e:	bf00      	nop
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	24002fb8 	.word	0x24002fb8

0800af78 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 800af7c:	4802      	ldr	r0, [pc, #8]	; (800af88 <COMP1_IRQHandler+0x10>)
 800af7e:	f001 f837 	bl	800bff0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800af82:	bf00      	nop
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	24001428 	.word	0x24001428

0800af8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
	return 1;
 800af90:	2301      	movs	r3, #1
}
 800af92:	4618      	mov	r0, r3
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <_kill>:

int _kill(int pid, int sig)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800afa6:	f011 fecd 	bl	801cd44 <__errno>
 800afaa:	4603      	mov	r3, r0
 800afac:	2216      	movs	r2, #22
 800afae:	601a      	str	r2, [r3, #0]
	return -1;
 800afb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <_exit>:

void _exit (int status)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800afc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ffe7 	bl	800af9c <_kill>
	while (1) {}		/* Make sure we hang here */
 800afce:	e7fe      	b.n	800afce <_exit+0x12>

0800afd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	e00a      	b.n	800aff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800afe2:	f3af 8000 	nop.w
 800afe6:	4601      	mov	r1, r0
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	60ba      	str	r2, [r7, #8]
 800afee:	b2ca      	uxtb	r2, r1
 800aff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	3301      	adds	r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	429a      	cmp	r2, r3
 800affe:	dbf0      	blt.n	800afe2 <_read+0x12>
	}

return len;
 800b000:	687b      	ldr	r3, [r7, #4]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b086      	sub	sp, #24
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]
 800b01a:	e009      	b.n	800b030 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	60ba      	str	r2, [r7, #8]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	3301      	adds	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	dbf1      	blt.n	800b01c <_write+0x12>
	}
	return len;
 800b038:	687b      	ldr	r3, [r7, #4]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <_close>:

int _close(int file)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
	return -1;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b06a:	605a      	str	r2, [r3, #4]
	return 0;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <_isatty>:

int _isatty(int file)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
	return 1;
 800b082:	2301      	movs	r3, #1
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
	return 0;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
	...

0800b0ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b0b4:	4a14      	ldr	r2, [pc, #80]	; (800b108 <_sbrk+0x5c>)
 800b0b6:	4b15      	ldr	r3, [pc, #84]	; (800b10c <_sbrk+0x60>)
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b0c0:	4b13      	ldr	r3, [pc, #76]	; (800b110 <_sbrk+0x64>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b0c8:	4b11      	ldr	r3, [pc, #68]	; (800b110 <_sbrk+0x64>)
 800b0ca:	4a12      	ldr	r2, [pc, #72]	; (800b114 <_sbrk+0x68>)
 800b0cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b0ce:	4b10      	ldr	r3, [pc, #64]	; (800b110 <_sbrk+0x64>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d207      	bcs.n	800b0ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b0dc:	f011 fe32 	bl	801cd44 <__errno>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	220c      	movs	r2, #12
 800b0e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0ea:	e009      	b.n	800b100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b0ec:	4b08      	ldr	r3, [pc, #32]	; (800b110 <_sbrk+0x64>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <_sbrk+0x64>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	4a05      	ldr	r2, [pc, #20]	; (800b110 <_sbrk+0x64>)
 800b0fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	24080000 	.word	0x24080000
 800b10c:	00000400 	.word	0x00000400
 800b110:	2400171c 	.word	0x2400171c
 800b114:	240036f8 	.word	0x240036f8

0800b118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b11c:	4b37      	ldr	r3, [pc, #220]	; (800b1fc <SystemInit+0xe4>)
 800b11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b122:	4a36      	ldr	r2, [pc, #216]	; (800b1fc <SystemInit+0xe4>)
 800b124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b12c:	4b34      	ldr	r3, [pc, #208]	; (800b200 <SystemInit+0xe8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	2b06      	cmp	r3, #6
 800b136:	d807      	bhi.n	800b148 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b138:	4b31      	ldr	r3, [pc, #196]	; (800b200 <SystemInit+0xe8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f023 030f 	bic.w	r3, r3, #15
 800b140:	4a2f      	ldr	r2, [pc, #188]	; (800b200 <SystemInit+0xe8>)
 800b142:	f043 0307 	orr.w	r3, r3, #7
 800b146:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b148:	4b2e      	ldr	r3, [pc, #184]	; (800b204 <SystemInit+0xec>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a2d      	ldr	r2, [pc, #180]	; (800b204 <SystemInit+0xec>)
 800b14e:	f043 0301 	orr.w	r3, r3, #1
 800b152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b154:	4b2b      	ldr	r3, [pc, #172]	; (800b204 <SystemInit+0xec>)
 800b156:	2200      	movs	r2, #0
 800b158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b15a:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <SystemInit+0xec>)
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	4929      	ldr	r1, [pc, #164]	; (800b204 <SystemInit+0xec>)
 800b160:	4b29      	ldr	r3, [pc, #164]	; (800b208 <SystemInit+0xf0>)
 800b162:	4013      	ands	r3, r2
 800b164:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b166:	4b26      	ldr	r3, [pc, #152]	; (800b200 <SystemInit+0xe8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d007      	beq.n	800b182 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b172:	4b23      	ldr	r3, [pc, #140]	; (800b200 <SystemInit+0xe8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f023 030f 	bic.w	r3, r3, #15
 800b17a:	4a21      	ldr	r2, [pc, #132]	; (800b200 <SystemInit+0xe8>)
 800b17c:	f043 0307 	orr.w	r3, r3, #7
 800b180:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b182:	4b20      	ldr	r3, [pc, #128]	; (800b204 <SystemInit+0xec>)
 800b184:	2200      	movs	r2, #0
 800b186:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b188:	4b1e      	ldr	r3, [pc, #120]	; (800b204 <SystemInit+0xec>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <SystemInit+0xec>)
 800b190:	2200      	movs	r2, #0
 800b192:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b194:	4b1b      	ldr	r3, [pc, #108]	; (800b204 <SystemInit+0xec>)
 800b196:	4a1d      	ldr	r2, [pc, #116]	; (800b20c <SystemInit+0xf4>)
 800b198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b19a:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <SystemInit+0xec>)
 800b19c:	4a1c      	ldr	r2, [pc, #112]	; (800b210 <SystemInit+0xf8>)
 800b19e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b1a0:	4b18      	ldr	r3, [pc, #96]	; (800b204 <SystemInit+0xec>)
 800b1a2:	4a1c      	ldr	r2, [pc, #112]	; (800b214 <SystemInit+0xfc>)
 800b1a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b1a6:	4b17      	ldr	r3, [pc, #92]	; (800b204 <SystemInit+0xec>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b1ac:	4b15      	ldr	r3, [pc, #84]	; (800b204 <SystemInit+0xec>)
 800b1ae:	4a19      	ldr	r2, [pc, #100]	; (800b214 <SystemInit+0xfc>)
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <SystemInit+0xec>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b1b8:	4b12      	ldr	r3, [pc, #72]	; (800b204 <SystemInit+0xec>)
 800b1ba:	4a16      	ldr	r2, [pc, #88]	; (800b214 <SystemInit+0xfc>)
 800b1bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <SystemInit+0xec>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <SystemInit+0xec>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	; (800b204 <SystemInit+0xec>)
 800b1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <SystemInit+0xec>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b1d6:	4b10      	ldr	r3, [pc, #64]	; (800b218 <SystemInit+0x100>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	4b10      	ldr	r3, [pc, #64]	; (800b21c <SystemInit+0x104>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e2:	d202      	bcs.n	800b1ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <SystemInit+0x108>)
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <SystemInit+0x10c>)
 800b1ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b1f0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b1f2:	bf00      	nop
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	e000ed00 	.word	0xe000ed00
 800b200:	52002000 	.word	0x52002000
 800b204:	58024400 	.word	0x58024400
 800b208:	eaf6ed7f 	.word	0xeaf6ed7f
 800b20c:	02020200 	.word	0x02020200
 800b210:	01ff0000 	.word	0x01ff0000
 800b214:	01010280 	.word	0x01010280
 800b218:	5c001000 	.word	0x5c001000
 800b21c:	ffff0000 	.word	0xffff0000
 800b220:	51008108 	.word	0x51008108
 800b224:	52004000 	.word	0x52004000

0800b228 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b22e:	f107 0310 	add.w	r3, r7, #16
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	605a      	str	r2, [r3, #4]
 800b238:	609a      	str	r2, [r3, #8]
 800b23a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b23c:	1d3b      	adds	r3, r7, #4
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	605a      	str	r2, [r3, #4]
 800b244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b246:	4b1e      	ldr	r3, [pc, #120]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b24c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 800b24e:	4b1c      	ldr	r3, [pc, #112]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b250:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b258:	2200      	movs	r2, #0
 800b25a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800b25c:	4b18      	ldr	r3, [pc, #96]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b25e:	2264      	movs	r2, #100	; 0x64
 800b260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b262:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b264:	2200      	movs	r2, #0
 800b266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b268:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b26e:	4814      	ldr	r0, [pc, #80]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b270:	f00a f945 	bl	80154fe <HAL_TIM_Base_Init>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800b27a:	f7ff fc6b 	bl	800ab54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b284:	f107 0310 	add.w	r3, r7, #16
 800b288:	4619      	mov	r1, r3
 800b28a:	480d      	ldr	r0, [pc, #52]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b28c:	f00a fb26 	bl	80158dc <HAL_TIM_ConfigClockSource>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800b296:	f7ff fc5d 	bl	800ab54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b2a2:	1d3b      	adds	r3, r7, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4806      	ldr	r0, [pc, #24]	; (800b2c0 <MX_TIM2_Init+0x98>)
 800b2a8:	f00a fd70 	bl	8015d8c <HAL_TIMEx_MasterConfigSynchronization>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800b2b2:	f7ff fc4f 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b2b6:	bf00      	nop
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	24001720 	.word	0x24001720

0800b2c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2ca:	f107 0310 	add.w	r3, r7, #16
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	605a      	str	r2, [r3, #4]
 800b2d4:	609a      	str	r2, [r3, #8]
 800b2d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2d8:	1d3b      	adds	r3, r7, #4
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	605a      	str	r2, [r3, #4]
 800b2e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <MX_TIM3_Init+0x94>)
 800b2e4:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <MX_TIM3_Init+0x98>)
 800b2e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 800b2e8:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <MX_TIM3_Init+0x94>)
 800b2ea:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b2ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2f0:	4b19      	ldr	r3, [pc, #100]	; (800b358 <MX_TIM3_Init+0x94>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <MX_TIM3_Init+0x94>)
 800b2f8:	2264      	movs	r2, #100	; 0x64
 800b2fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2fc:	4b16      	ldr	r3, [pc, #88]	; (800b358 <MX_TIM3_Init+0x94>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <MX_TIM3_Init+0x94>)
 800b304:	2200      	movs	r2, #0
 800b306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b308:	4813      	ldr	r0, [pc, #76]	; (800b358 <MX_TIM3_Init+0x94>)
 800b30a:	f00a f8f8 	bl	80154fe <HAL_TIM_Base_Init>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800b314:	f7ff fc1e 	bl	800ab54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b31e:	f107 0310 	add.w	r3, r7, #16
 800b322:	4619      	mov	r1, r3
 800b324:	480c      	ldr	r0, [pc, #48]	; (800b358 <MX_TIM3_Init+0x94>)
 800b326:	f00a fad9 	bl	80158dc <HAL_TIM_ConfigClockSource>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800b330:	f7ff fc10 	bl	800ab54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b334:	2300      	movs	r3, #0
 800b336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b33c:	1d3b      	adds	r3, r7, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4805      	ldr	r0, [pc, #20]	; (800b358 <MX_TIM3_Init+0x94>)
 800b342:	f00a fd23 	bl	8015d8c <HAL_TIMEx_MasterConfigSynchronization>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800b34c:	f7ff fc02 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b350:	bf00      	nop
 800b352:	3720      	adds	r7, #32
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	2400176c 	.word	0x2400176c
 800b35c:	40000400 	.word	0x40000400

0800b360 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b366:	f107 0310 	add.w	r3, r7, #16
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	605a      	str	r2, [r3, #4]
 800b370:	609a      	str	r2, [r3, #8]
 800b372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b374:	1d3b      	adds	r3, r7, #4
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	605a      	str	r2, [r3, #4]
 800b37c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b37e:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b380:	4a1d      	ldr	r2, [pc, #116]	; (800b3f8 <MX_TIM4_Init+0x98>)
 800b382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800b384:	4b1b      	ldr	r3, [pc, #108]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b386:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800b38a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b38c:	4b19      	ldr	r3, [pc, #100]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b38e:	2200      	movs	r2, #0
 800b390:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800b392:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b394:	2264      	movs	r2, #100	; 0x64
 800b396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b398:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b3a4:	4813      	ldr	r0, [pc, #76]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b3a6:	f00a f8aa 	bl	80154fe <HAL_TIM_Base_Init>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800b3b0:	f7ff fbd0 	bl	800ab54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b3ba:	f107 0310 	add.w	r3, r7, #16
 800b3be:	4619      	mov	r1, r3
 800b3c0:	480c      	ldr	r0, [pc, #48]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b3c2:	f00a fa8b 	bl	80158dc <HAL_TIM_ConfigClockSource>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800b3cc:	f7ff fbc2 	bl	800ab54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b3d8:	1d3b      	adds	r3, r7, #4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <MX_TIM4_Init+0x94>)
 800b3de:	f00a fcd5 	bl	8015d8c <HAL_TIMEx_MasterConfigSynchronization>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800b3e8:	f7ff fbb4 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b3ec:	bf00      	nop
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	240017b8 	.word	0x240017b8
 800b3f8:	40000800 	.word	0x40000800

0800b3fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b40c:	d117      	bne.n	800b43e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b40e:	4b2a      	ldr	r3, [pc, #168]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b414:	4a28      	ldr	r2, [pc, #160]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b416:	f043 0301 	orr.w	r3, r3, #1
 800b41a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b41e:	4b26      	ldr	r3, [pc, #152]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b42c:	2200      	movs	r2, #0
 800b42e:	2100      	movs	r1, #0
 800b430:	201c      	movs	r0, #28
 800b432:	f000 ff2c 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b436:	201c      	movs	r0, #28
 800b438:	f000 ff43 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800b43c:	e038      	b.n	800b4b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a1e      	ldr	r2, [pc, #120]	; (800b4bc <HAL_TIM_Base_MspInit+0xc0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d117      	bne.n	800b478 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b448:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b44a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b44e:	4a1a      	ldr	r2, [pc, #104]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b450:	f043 0302 	orr.w	r3, r3, #2
 800b454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b458:	4b17      	ldr	r3, [pc, #92]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b45a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b45e:	f003 0302 	and.w	r3, r3, #2
 800b462:	613b      	str	r3, [r7, #16]
 800b464:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	201d      	movs	r0, #29
 800b46c:	f000 ff0f 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b470:	201d      	movs	r0, #29
 800b472:	f000 ff26 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
}
 800b476:	e01b      	b.n	800b4b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <HAL_TIM_Base_MspInit+0xc4>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d116      	bne.n	800b4b0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b488:	4a0b      	ldr	r2, [pc, #44]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b48a:	f043 0304 	orr.w	r3, r3, #4
 800b48e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b492:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <HAL_TIM_Base_MspInit+0xbc>)
 800b494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	201e      	movs	r0, #30
 800b4a6:	f000 fef2 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b4aa:	201e      	movs	r0, #30
 800b4ac:	f000 ff09 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
}
 800b4b0:	bf00      	nop
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	58024400 	.word	0x58024400
 800b4bc:	40000400 	.word	0x40000400
 800b4c0:	40000800 	.word	0x40000800

0800b4c4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800b4c8:	4b22      	ldr	r3, [pc, #136]	; (800b554 <MX_UART4_Init+0x90>)
 800b4ca:	4a23      	ldr	r2, [pc, #140]	; (800b558 <MX_UART4_Init+0x94>)
 800b4cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 800b4ce:	4b21      	ldr	r3, [pc, #132]	; (800b554 <MX_UART4_Init+0x90>)
 800b4d0:	4a22      	ldr	r2, [pc, #136]	; (800b55c <MX_UART4_Init+0x98>)
 800b4d2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b4d4:	4b1f      	ldr	r3, [pc, #124]	; (800b554 <MX_UART4_Init+0x90>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b4da:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <MX_UART4_Init+0x90>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b4e0:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <MX_UART4_Init+0x90>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b4e6:	4b1b      	ldr	r3, [pc, #108]	; (800b554 <MX_UART4_Init+0x90>)
 800b4e8:	220c      	movs	r2, #12
 800b4ea:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b4ec:	4b19      	ldr	r3, [pc, #100]	; (800b554 <MX_UART4_Init+0x90>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b4f2:	4b18      	ldr	r3, [pc, #96]	; (800b554 <MX_UART4_Init+0x90>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b4f8:	4b16      	ldr	r3, [pc, #88]	; (800b554 <MX_UART4_Init+0x90>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b4fe:	4b15      	ldr	r3, [pc, #84]	; (800b554 <MX_UART4_Init+0x90>)
 800b500:	2200      	movs	r2, #0
 800b502:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b504:	4b13      	ldr	r3, [pc, #76]	; (800b554 <MX_UART4_Init+0x90>)
 800b506:	2200      	movs	r2, #0
 800b508:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b50a:	4812      	ldr	r0, [pc, #72]	; (800b554 <MX_UART4_Init+0x90>)
 800b50c:	f00a fcea 	bl	8015ee4 <HAL_UART_Init>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800b516:	f7ff fb1d 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b51a:	2100      	movs	r1, #0
 800b51c:	480d      	ldr	r0, [pc, #52]	; (800b554 <MX_UART4_Init+0x90>)
 800b51e:	f00d f9f9 	bl	8018914 <HAL_UARTEx_SetTxFifoThreshold>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800b528:	f7ff fb14 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b52c:	2100      	movs	r1, #0
 800b52e:	4809      	ldr	r0, [pc, #36]	; (800b554 <MX_UART4_Init+0x90>)
 800b530:	f00d fa2e 	bl	8018990 <HAL_UARTEx_SetRxFifoThreshold>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800b53a:	f7ff fb0b 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800b53e:	4805      	ldr	r0, [pc, #20]	; (800b554 <MX_UART4_Init+0x90>)
 800b540:	f00d f9af 	bl	80188a2 <HAL_UARTEx_DisableFifoMode>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800b54a:	f7ff fb03 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800b54e:	bf00      	nop
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	24001804 	.word	0x24001804
 800b558:	40004c00 	.word	0x40004c00
 800b55c:	001312d0 	.word	0x001312d0

0800b560 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800b564:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b566:	4a23      	ldr	r2, [pc, #140]	; (800b5f4 <MX_UART7_Init+0x94>)
 800b568:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 800b56a:	4b21      	ldr	r3, [pc, #132]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b56c:	4a22      	ldr	r2, [pc, #136]	; (800b5f8 <MX_UART7_Init+0x98>)
 800b56e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800b570:	4b1f      	ldr	r3, [pc, #124]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b572:	2200      	movs	r2, #0
 800b574:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800b576:	4b1e      	ldr	r3, [pc, #120]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b578:	2200      	movs	r2, #0
 800b57a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800b57c:	4b1c      	ldr	r3, [pc, #112]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b57e:	2200      	movs	r2, #0
 800b580:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b582:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b584:	220c      	movs	r2, #12
 800b586:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b58e:	4b18      	ldr	r3, [pc, #96]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b590:	2200      	movs	r2, #0
 800b592:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b594:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b596:	2200      	movs	r2, #0
 800b598:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b59a:	4b15      	ldr	r3, [pc, #84]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b5a0:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b5a6:	4812      	ldr	r0, [pc, #72]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b5a8:	f00a fc9c 	bl	8015ee4 <HAL_UART_Init>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800b5b2:	f7ff facf 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	480d      	ldr	r0, [pc, #52]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b5ba:	f00d f9ab 	bl	8018914 <HAL_UARTEx_SetTxFifoThreshold>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 800b5c4:	f7ff fac6 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	4809      	ldr	r0, [pc, #36]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b5cc:	f00d f9e0 	bl	8018990 <HAL_UARTEx_SetRxFifoThreshold>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 800b5d6:	f7ff fabd 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800b5da:	4805      	ldr	r0, [pc, #20]	; (800b5f0 <MX_UART7_Init+0x90>)
 800b5dc:	f00d f961 	bl	80188a2 <HAL_UARTEx_DisableFifoMode>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800b5e6:	f7ff fab5 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	24001894 	.word	0x24001894
 800b5f4:	40007800 	.word	0x40007800
 800b5f8:	001312d0 	.word	0x001312d0

0800b5fc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800b600:	4b26      	ldr	r3, [pc, #152]	; (800b69c <MX_UART8_Init+0xa0>)
 800b602:	4a27      	ldr	r2, [pc, #156]	; (800b6a0 <MX_UART8_Init+0xa4>)
 800b604:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 800b606:	4b25      	ldr	r3, [pc, #148]	; (800b69c <MX_UART8_Init+0xa0>)
 800b608:	4a26      	ldr	r2, [pc, #152]	; (800b6a4 <MX_UART8_Init+0xa8>)
 800b60a:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 800b60c:	4b23      	ldr	r3, [pc, #140]	; (800b69c <MX_UART8_Init+0xa0>)
 800b60e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b612:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b614:	4b21      	ldr	r3, [pc, #132]	; (800b69c <MX_UART8_Init+0xa0>)
 800b616:	2200      	movs	r2, #0
 800b618:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 800b61a:	4b20      	ldr	r3, [pc, #128]	; (800b69c <MX_UART8_Init+0xa0>)
 800b61c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b620:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b622:	4b1e      	ldr	r3, [pc, #120]	; (800b69c <MX_UART8_Init+0xa0>)
 800b624:	220c      	movs	r2, #12
 800b626:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b628:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <MX_UART8_Init+0xa0>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b62e:	4b1b      	ldr	r3, [pc, #108]	; (800b69c <MX_UART8_Init+0xa0>)
 800b630:	2200      	movs	r2, #0
 800b632:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b634:	4b19      	ldr	r3, [pc, #100]	; (800b69c <MX_UART8_Init+0xa0>)
 800b636:	2200      	movs	r2, #0
 800b638:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b63a:	4b18      	ldr	r3, [pc, #96]	; (800b69c <MX_UART8_Init+0xa0>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b640:	4b16      	ldr	r3, [pc, #88]	; (800b69c <MX_UART8_Init+0xa0>)
 800b642:	2220      	movs	r2, #32
 800b644:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b646:	4b15      	ldr	r3, [pc, #84]	; (800b69c <MX_UART8_Init+0xa0>)
 800b648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b64c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b64e:	4813      	ldr	r0, [pc, #76]	; (800b69c <MX_UART8_Init+0xa0>)
 800b650:	f00a fc48 	bl	8015ee4 <HAL_UART_Init>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 800b65a:	f7ff fa7b 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b65e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b662:	480e      	ldr	r0, [pc, #56]	; (800b69c <MX_UART8_Init+0xa0>)
 800b664:	f00d f956 	bl	8018914 <HAL_UARTEx_SetTxFifoThreshold>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 800b66e:	f7ff fa71 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b672:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b676:	4809      	ldr	r0, [pc, #36]	; (800b69c <MX_UART8_Init+0xa0>)
 800b678:	f00d f98a 	bl	8018990 <HAL_UARTEx_SetRxFifoThreshold>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800b682:	f7ff fa67 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800b686:	4805      	ldr	r0, [pc, #20]	; (800b69c <MX_UART8_Init+0xa0>)
 800b688:	f00d f8d0 	bl	801882c <HAL_UARTEx_EnableFifoMode>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800b692:	f7ff fa5f 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800b696:	bf00      	nop
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	24001924 	.word	0x24001924
 800b6a0:	40007c00 	.word	0x40007c00
 800b6a4:	001312d0 	.word	0x001312d0

0800b6a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b6ac:	4b22      	ldr	r3, [pc, #136]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6ae:	4a23      	ldr	r2, [pc, #140]	; (800b73c <MX_USART2_UART_Init+0x94>)
 800b6b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b6b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b6ba:	4b1f      	ldr	r3, [pc, #124]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b6c0:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b6c6:	4b1c      	ldr	r3, [pc, #112]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b6cc:	4b1a      	ldr	r3, [pc, #104]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6ce:	220c      	movs	r2, #12
 800b6d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b6de:	4b16      	ldr	r3, [pc, #88]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b6e4:	4b14      	ldr	r3, [pc, #80]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b6ea:	4b13      	ldr	r3, [pc, #76]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b6f0:	4811      	ldr	r0, [pc, #68]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b6f2:	f00a fbf7 	bl	8015ee4 <HAL_UART_Init>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800b6fc:	f7ff fa2a 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b700:	2100      	movs	r1, #0
 800b702:	480d      	ldr	r0, [pc, #52]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b704:	f00d f906 	bl	8018914 <HAL_UARTEx_SetTxFifoThreshold>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800b70e:	f7ff fa21 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b712:	2100      	movs	r1, #0
 800b714:	4808      	ldr	r0, [pc, #32]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b716:	f00d f93b 	bl	8018990 <HAL_UARTEx_SetRxFifoThreshold>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800b720:	f7ff fa18 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800b724:	4804      	ldr	r0, [pc, #16]	; (800b738 <MX_USART2_UART_Init+0x90>)
 800b726:	f00d f8bc 	bl	80188a2 <HAL_UARTEx_DisableFifoMode>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800b730:	f7ff fa10 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b734:	bf00      	nop
 800b736:	bd80      	pop	{r7, pc}
 800b738:	240019b4 	.word	0x240019b4
 800b73c:	40004400 	.word	0x40004400

0800b740 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b744:	4b26      	ldr	r3, [pc, #152]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b746:	4a27      	ldr	r2, [pc, #156]	; (800b7e4 <MX_USART3_UART_Init+0xa4>)
 800b748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800b74a:	4b25      	ldr	r3, [pc, #148]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b74c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800b752:	4b23      	ldr	r3, [pc, #140]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b758:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b75a:	4b21      	ldr	r3, [pc, #132]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800b760:	4b1f      	ldr	r3, [pc, #124]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b76a:	220c      	movs	r2, #12
 800b76c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b76e:	4b1c      	ldr	r3, [pc, #112]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b770:	2200      	movs	r2, #0
 800b772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b774:	4b1a      	ldr	r3, [pc, #104]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b776:	2200      	movs	r2, #0
 800b778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b77a:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b780:	4b17      	ldr	r3, [pc, #92]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b782:	2200      	movs	r2, #0
 800b784:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800b786:	4b16      	ldr	r3, [pc, #88]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b788:	2220      	movs	r2, #32
 800b78a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800b78c:	4b14      	ldr	r3, [pc, #80]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b78e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b792:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b794:	4812      	ldr	r0, [pc, #72]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b796:	f00a fba5 	bl	8015ee4 <HAL_UART_Init>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d001      	beq.n	800b7a4 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 800b7a0:	f7ff f9d8 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b7a4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800b7a8:	480d      	ldr	r0, [pc, #52]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b7aa:	f00d f8b3 	bl	8018914 <HAL_UARTEx_SetTxFifoThreshold>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 800b7b4:	f7ff f9ce 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800b7b8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800b7bc:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b7be:	f00d f8e7 	bl	8018990 <HAL_UARTEx_SetRxFifoThreshold>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b7c8:	f7ff f9c4 	bl	800ab54 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800b7cc:	4804      	ldr	r0, [pc, #16]	; (800b7e0 <MX_USART3_UART_Init+0xa0>)
 800b7ce:	f00d f82d 	bl	801882c <HAL_UARTEx_EnableFifoMode>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800b7d8:	f7ff f9bc 	bl	800ab54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b7dc:	bf00      	nop
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	24001a44 	.word	0x24001a44
 800b7e4:	40004800 	.word	0x40004800

0800b7e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b0c0      	sub	sp, #256	; 0x100
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	605a      	str	r2, [r3, #4]
 800b7fa:	609a      	str	r2, [r3, #8]
 800b7fc:	60da      	str	r2, [r3, #12]
 800b7fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b804:	22bc      	movs	r2, #188	; 0xbc
 800b806:	2100      	movs	r1, #0
 800b808:	4618      	mov	r0, r3
 800b80a:	f011 fb0f 	bl	801ce2c <memset>
  if(uartHandle->Instance==UART4)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4abe      	ldr	r2, [pc, #760]	; (800bb0c <HAL_UART_MspInit+0x324>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d142      	bne.n	800b89e <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800b818:	2302      	movs	r3, #2
 800b81a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b826:	4618      	mov	r0, r3
 800b828:	f007 f9d4 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b832:	f7ff f98f 	bl	800ab54 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b836:	4bb6      	ldr	r3, [pc, #728]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b83c:	4ab4      	ldr	r2, [pc, #720]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b83e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b846:	4bb2      	ldr	r3, [pc, #712]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b84c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b854:	4bae      	ldr	r3, [pc, #696]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b85a:	4aad      	ldr	r2, [pc, #692]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b85c:	f043 0301 	orr.w	r3, r3, #1
 800b860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b864:	4baa      	ldr	r3, [pc, #680]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b872:	2303      	movs	r3, #3
 800b874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b878:	2302      	movs	r3, #2
 800b87a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b884:	2300      	movs	r3, #0
 800b886:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b88a:	2308      	movs	r3, #8
 800b88c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b890:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b894:	4619      	mov	r1, r3
 800b896:	489f      	ldr	r0, [pc, #636]	; (800bb14 <HAL_UART_MspInit+0x32c>)
 800b898:	f003 fd4c 	bl	800f334 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b89c:	e130      	b.n	800bb00 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a9d      	ldr	r2, [pc, #628]	; (800bb18 <HAL_UART_MspInit+0x330>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d143      	bne.n	800b930 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b8b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f007 f98c 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800b8c2:	f7ff f947 	bl	800ab54 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800b8c6:	4b92      	ldr	r3, [pc, #584]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8cc:	4a90      	ldr	r2, [pc, #576]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b8d6:	4b8e      	ldr	r3, [pc, #568]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b8e4:	4b8a      	ldr	r3, [pc, #552]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8ea:	4a89      	ldr	r2, [pc, #548]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8ec:	f043 0310 	orr.w	r3, r3, #16
 800b8f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8f4:	4b86      	ldr	r3, [pc, #536]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8fa:	f003 0310 	and.w	r3, r3, #16
 800b8fe:	623b      	str	r3, [r7, #32]
 800b900:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800b902:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b90a:	2302      	movs	r3, #2
 800b90c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b910:	2300      	movs	r3, #0
 800b912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b916:	2300      	movs	r3, #0
 800b918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800b91c:	2307      	movs	r3, #7
 800b91e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b922:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b926:	4619      	mov	r1, r3
 800b928:	487c      	ldr	r0, [pc, #496]	; (800bb1c <HAL_UART_MspInit+0x334>)
 800b92a:	f003 fd03 	bl	800f334 <HAL_GPIO_Init>
}
 800b92e:	e0e7      	b.n	800bb00 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a7a      	ldr	r2, [pc, #488]	; (800bb20 <HAL_UART_MspInit+0x338>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d14a      	bne.n	800b9d0 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800b93a:	2302      	movs	r3, #2
 800b93c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b93e:	2300      	movs	r3, #0
 800b940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b948:	4618      	mov	r0, r3
 800b94a:	f007 f943 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800b954:	f7ff f8fe 	bl	800ab54 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800b958:	4b6d      	ldr	r3, [pc, #436]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b95a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b95e:	4a6c      	ldr	r2, [pc, #432]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b964:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b968:	4b69      	ldr	r3, [pc, #420]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b96a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b96e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b976:	4b66      	ldr	r3, [pc, #408]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b97c:	4a64      	ldr	r2, [pc, #400]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b97e:	f043 0310 	orr.w	r3, r3, #16
 800b982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b986:	4b62      	ldr	r3, [pc, #392]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b98c:	f003 0310 	and.w	r3, r3, #16
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b994:	2303      	movs	r3, #3
 800b996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b99a:	2302      	movs	r3, #2
 800b99c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800b9ac:	2308      	movs	r3, #8
 800b9ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b9b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4858      	ldr	r0, [pc, #352]	; (800bb1c <HAL_UART_MspInit+0x334>)
 800b9ba:	f003 fcbb 	bl	800f334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	2053      	movs	r0, #83	; 0x53
 800b9c4:	f000 fc63 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800b9c8:	2053      	movs	r0, #83	; 0x53
 800b9ca:	f000 fc7a 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
}
 800b9ce:	e097      	b.n	800bb00 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a53      	ldr	r2, [pc, #332]	; (800bb24 <HAL_UART_MspInit+0x33c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d142      	bne.n	800ba60 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800b9da:	2302      	movs	r3, #2
 800b9dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b9e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f007 f8f3 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <HAL_UART_MspInit+0x210>
      Error_Handler();
 800b9f4:	f7ff f8ae 	bl	800ab54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b9f8:	4b45      	ldr	r3, [pc, #276]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800b9fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b9fe:	4a44      	ldr	r2, [pc, #272]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ba08:	4b41      	ldr	r3, [pc, #260]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba16:	4b3e      	ldr	r3, [pc, #248]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba1c:	4a3c      	ldr	r2, [pc, #240]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba26:	4b3a      	ldr	r3, [pc, #232]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	613b      	str	r3, [r7, #16]
 800ba32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ba34:	230c      	movs	r3, #12
 800ba36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ba4c:	2307      	movs	r3, #7
 800ba4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ba56:	4619      	mov	r1, r3
 800ba58:	482e      	ldr	r0, [pc, #184]	; (800bb14 <HAL_UART_MspInit+0x32c>)
 800ba5a:	f003 fc6b 	bl	800f334 <HAL_GPIO_Init>
}
 800ba5e:	e04f      	b.n	800bb00 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a30      	ldr	r2, [pc, #192]	; (800bb28 <HAL_UART_MspInit+0x340>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d14a      	bne.n	800bb00 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f007 f8ab 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800ba84:	f7ff f866 	bl	800ab54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ba88:	4b21      	ldr	r3, [pc, #132]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba8e:	4a20      	ldr	r2, [pc, #128]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ba98:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800ba9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800baa6:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800baa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baac:	4a18      	ldr	r2, [pc, #96]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800baae:	f043 0308 	orr.w	r3, r3, #8
 800bab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bab6:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <HAL_UART_MspInit+0x328>)
 800bab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	60bb      	str	r3, [r7, #8]
 800bac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bac4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bacc:	2302      	movs	r3, #2
 800bace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bad8:	2300      	movs	r3, #0
 800bada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bade:	2307      	movs	r3, #7
 800bae0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bae4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bae8:	4619      	mov	r1, r3
 800baea:	4810      	ldr	r0, [pc, #64]	; (800bb2c <HAL_UART_MspInit+0x344>)
 800baec:	f003 fc22 	bl	800f334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	2027      	movs	r0, #39	; 0x27
 800baf6:	f000 fbca 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bafa:	2027      	movs	r0, #39	; 0x27
 800bafc:	f000 fbe1 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
}
 800bb00:	bf00      	nop
 800bb02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	40004c00 	.word	0x40004c00
 800bb10:	58024400 	.word	0x58024400
 800bb14:	58020000 	.word	0x58020000
 800bb18:	40007800 	.word	0x40007800
 800bb1c:	58021000 	.word	0x58021000
 800bb20:	40007c00 	.word	0x40007c00
 800bb24:	40004400 	.word	0x40004400
 800bb28:	40004800 	.word	0x40004800
 800bb2c:	58020c00 	.word	0x58020c00

0800bb30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800bb30:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800bb34:	f7ff faf0 	bl	800b118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bb38:	480c      	ldr	r0, [pc, #48]	; (800bb6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800bb3a:	490d      	ldr	r1, [pc, #52]	; (800bb70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800bb3c:	4a0d      	ldr	r2, [pc, #52]	; (800bb74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800bb3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bb40:	e002      	b.n	800bb48 <LoopCopyDataInit>

0800bb42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bb42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bb44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bb46:	3304      	adds	r3, #4

0800bb48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bb48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bb4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bb4c:	d3f9      	bcc.n	800bb42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bb4e:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800bb50:	4c0a      	ldr	r4, [pc, #40]	; (800bb7c <LoopFillZerobss+0x22>)
  movs r3, #0
 800bb52:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bb54:	e001      	b.n	800bb5a <LoopFillZerobss>

0800bb56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bb56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bb58:	3204      	adds	r2, #4

0800bb5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bb5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bb5c:	d3fb      	bcc.n	800bb56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bb5e:	f011 f909 	bl	801cd74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb62:	f7fe fe8d 	bl	800a880 <main>
  bx  lr
 800bb66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bb68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800bb6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800bb70:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 800bb74:	08038b90 	.word	0x08038b90
  ldr r2, =_sbss
 800bb78:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 800bb7c:	240036f8 	.word	0x240036f8

0800bb80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb80:	e7fe      	b.n	800bb80 <ADC3_IRQHandler>
	...

0800bb84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb8a:	2003      	movs	r0, #3
 800bb8c:	f000 fb74 	bl	800c278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bb90:	f006 fe4a 	bl	8012828 <HAL_RCC_GetSysClockFreq>
 800bb94:	4602      	mov	r2, r0
 800bb96:	4b15      	ldr	r3, [pc, #84]	; (800bbec <HAL_Init+0x68>)
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	f003 030f 	and.w	r3, r3, #15
 800bba0:	4913      	ldr	r1, [pc, #76]	; (800bbf0 <HAL_Init+0x6c>)
 800bba2:	5ccb      	ldrb	r3, [r1, r3]
 800bba4:	f003 031f 	and.w	r3, r3, #31
 800bba8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bbae:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <HAL_Init+0x68>)
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	f003 030f 	and.w	r3, r3, #15
 800bbb6:	4a0e      	ldr	r2, [pc, #56]	; (800bbf0 <HAL_Init+0x6c>)
 800bbb8:	5cd3      	ldrb	r3, [r2, r3]
 800bbba:	f003 031f 	and.w	r3, r3, #31
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc4:	4a0b      	ldr	r2, [pc, #44]	; (800bbf4 <HAL_Init+0x70>)
 800bbc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bbc8:	4a0b      	ldr	r2, [pc, #44]	; (800bbf8 <HAL_Init+0x74>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bbce:	200f      	movs	r0, #15
 800bbd0:	f000 f814 	bl	800bbfc <HAL_InitTick>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e002      	b.n	800bbe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bbde:	f7ff f8fb 	bl	800add8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	08038a64 	.word	0x08038a64
 800bbf4:	24000004 	.word	0x24000004
 800bbf8:	24000000 	.word	0x24000000

0800bbfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800bc04:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <HAL_InitTick+0x60>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e021      	b.n	800bc54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800bc10:	4b13      	ldr	r3, [pc, #76]	; (800bc60 <HAL_InitTick+0x64>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <HAL_InitTick+0x60>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fb59 	bl	800c2de <HAL_SYSTICK_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e00e      	b.n	800bc54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b0f      	cmp	r3, #15
 800bc3a:	d80a      	bhi.n	800bc52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc44:	f000 fb23 	bl	800c28e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bc48:	4a06      	ldr	r2, [pc, #24]	; (800bc64 <HAL_InitTick+0x68>)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e000      	b.n	800bc54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	2400000c 	.word	0x2400000c
 800bc60:	24000000 	.word	0x24000000
 800bc64:	24000008 	.word	0x24000008

0800bc68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <HAL_IncTick+0x20>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <HAL_IncTick+0x24>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4413      	add	r3, r2
 800bc78:	4a04      	ldr	r2, [pc, #16]	; (800bc8c <HAL_IncTick+0x24>)
 800bc7a:	6013      	str	r3, [r2, #0]
}
 800bc7c:	bf00      	nop
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	2400000c 	.word	0x2400000c
 800bc8c:	24001ad4 	.word	0x24001ad4

0800bc90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0
  return uwTick;
 800bc94:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <HAL_GetTick+0x14>)
 800bc96:	681b      	ldr	r3, [r3, #0]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	24001ad4 	.word	0x24001ad4

0800bca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bcb0:	f7ff ffee 	bl	800bc90 <HAL_GetTick>
 800bcb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcc0:	d005      	beq.n	800bcce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <HAL_Delay+0x44>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bcce:	bf00      	nop
 800bcd0:	f7ff ffde 	bl	800bc90 <HAL_GetTick>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d8f7      	bhi.n	800bcd0 <HAL_Delay+0x28>
  {
  }
}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	2400000c 	.word	0x2400000c

0800bcf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bcf4:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <HAL_GetREVID+0x14>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	0c1b      	lsrs	r3, r3, #16
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	5c001000 	.word	0x5c001000

0800bd08 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800bd10:	2300      	movs	r3, #0
 800bd12:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	77fb      	strb	r3, [r7, #31]
 800bd22:	e10e      	b.n	800bf42 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd32:	d102      	bne.n	800bd3a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	e103      	b.n	800bf42 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7fe fb19 	bl	800a38c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bd6e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800bd74:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800bd7a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800bd80:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	4b6e      	ldr	r3, [pc, #440]	; (800bf4c <HAL_COMP_Init+0x244>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	6979      	ldr	r1, [r7, #20]
 800bd9a:	430b      	orrs	r3, r1
 800bd9c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d108      	bne.n	800bdb8 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0210 	orr.w	r2, r2, #16
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	e007      	b.n	800bdc8 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0210 	bic.w	r2, r2, #16
 800bdc6:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0304 	and.w	r3, r3, #4
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d016      	beq.n	800be04 <HAL_COMP_Init+0xfc>
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d013      	beq.n	800be04 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bddc:	4b5c      	ldr	r3, [pc, #368]	; (800bf50 <HAL_COMP_Init+0x248>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	099b      	lsrs	r3, r3, #6
 800bde2:	4a5c      	ldr	r2, [pc, #368]	; (800bf54 <HAL_COMP_Init+0x24c>)
 800bde4:	fba2 2303 	umull	r2, r3, r2, r3
 800bde8:	099b      	lsrs	r3, r3, #6
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800bdf6:	e002      	b.n	800bdfe <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1f9      	bne.n	800bdf8 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a53      	ldr	r2, [pc, #332]	; (800bf58 <HAL_COMP_Init+0x250>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d102      	bne.n	800be14 <HAL_COMP_Init+0x10c>
 800be0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be12:	e001      	b.n	800be18 <HAL_COMP_Init+0x110>
 800be14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be18:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d06d      	beq.n	800bf02 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	f003 0310 	and.w	r3, r3, #16
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800be32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	4313      	orrs	r3, r2
 800be40:	600b      	str	r3, [r1, #0]
 800be42:	e008      	b.n	800be56 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800be44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	43db      	mvns	r3, r3
 800be4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be52:	4013      	ands	r3, r2
 800be54:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800be62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be66:	685a      	ldr	r2, [r3, #4]
 800be68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	4313      	orrs	r3, r2
 800be70:	604b      	str	r3, [r1, #4]
 800be72:	e008      	b.n	800be86 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800be74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	43db      	mvns	r3, r3
 800be7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be82:	4013      	ands	r3, r2
 800be84:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800be86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00a      	beq.n	800beb2 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800be9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bea0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800beb0:	e00a      	b.n	800bec8 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800beb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800beb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	43db      	mvns	r3, r3
 800bebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bec2:	4013      	ands	r3, r2
 800bec4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800bed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bed8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800bedc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800bee8:	e021      	b.n	800bf2e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800beea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800beee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	43db      	mvns	r3, r3
 800bef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800befa:	4013      	ands	r3, r2
 800befc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800bf00:	e015      	b.n	800bf2e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800bf02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	43db      	mvns	r3, r3
 800bf0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf12:	4013      	ands	r3, r2
 800bf14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800bf18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf28:	4013      	ands	r3, r2
 800bf2a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800bf42:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	f0e8cce1 	.word	0xf0e8cce1
 800bf50:	24000000 	.word	0x24000000
 800bf54:	053e2d63 	.word	0x053e2d63
 800bf58:	5800380c 	.word	0x5800380c

0800bf5c <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d102      	bne.n	800bf78 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	73fb      	strb	r3, [r7, #15]
 800bf76:	e030      	b.n	800bfda <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf86:	d102      	bne.n	800bf8e <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
 800bf8c:	e025      	b.n	800bfda <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d11d      	bne.n	800bfd6 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f042 0201 	orr.w	r2, r2, #1
 800bfa8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2202      	movs	r2, #2
 800bfae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <HAL_COMP_Start+0x8c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	099b      	lsrs	r3, r3, #6
 800bfb8:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <HAL_COMP_Start+0x90>)
 800bfba:	fba2 2303 	umull	r2, r3, r2, r3
 800bfbe:	099b      	lsrs	r3, r3, #6
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800bfc6:	e002      	b.n	800bfce <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1f9      	bne.n	800bfc8 <HAL_COMP_Start+0x6c>
 800bfd4:	e001      	b.n	800bfda <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	24000000 	.word	0x24000000
 800bfec:	053e2d63 	.word	0x053e2d63

0800bff0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a33      	ldr	r2, [pc, #204]	; (800c0cc <HAL_COMP_IRQHandler+0xdc>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d102      	bne.n	800c008 <HAL_COMP_IRQHandler+0x18>
 800c002:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c006:	e001      	b.n	800c00c <HAL_COMP_IRQHandler+0x1c>
 800c008:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c00c:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 800c00e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c012:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4013      	ands	r3, r2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d014      	beq.n	800c048 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 800c01e:	4b2c      	ldr	r3, [pc, #176]	; (800c0d0 <HAL_COMP_IRQHandler+0xe0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 0310 	and.w	r3, r3, #16
 800c026:	2b00      	cmp	r3, #0
 800c028:	d006      	beq.n	800c038 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 800c02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800c032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c036:	e004      	b.n	800c042 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 800c038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7fe fd38 	bl	800aab8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c052:	2b40      	cmp	r3, #64	; 0x40
 800c054:	d136      	bne.n	800c0c4 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 800c056:	4b1f      	ldr	r3, [pc, #124]	; (800c0d4 <HAL_COMP_IRQHandler+0xe4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c062:	d101      	bne.n	800c068 <HAL_COMP_IRQHandler+0x78>
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <HAL_COMP_IRQHandler+0x7a>
 800c068:	2300      	movs	r3, #0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00b      	beq.n	800c086 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 800c06e:	4b19      	ldr	r3, [pc, #100]	; (800c0d4 <HAL_COMP_IRQHandler+0xe4>)
 800c070:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c074:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c084:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 800c086:	4b13      	ldr	r3, [pc, #76]	; (800c0d4 <HAL_COMP_IRQHandler+0xe4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c092:	d101      	bne.n	800c098 <HAL_COMP_IRQHandler+0xa8>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <HAL_COMP_IRQHandler+0xaa>
 800c098:	2300      	movs	r3, #0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00b      	beq.n	800c0b6 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 800c09e:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <HAL_COMP_IRQHandler+0xe4>)
 800c0a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c0a4:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b4:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7fe fcfa 	bl	800aab8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 800c0c4:	bf00      	nop
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	5800380c 	.word	0x5800380c
 800c0d0:	58003810 	.word	0x58003810
 800c0d4:	58003800 	.word	0x58003800

0800c0d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <__NVIC_SetPriorityGrouping+0x40>)
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c100:	4b06      	ldr	r3, [pc, #24]	; (800c11c <__NVIC_SetPriorityGrouping+0x44>)
 800c102:	4313      	orrs	r3, r2
 800c104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c106:	4a04      	ldr	r2, [pc, #16]	; (800c118 <__NVIC_SetPriorityGrouping+0x40>)
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	60d3      	str	r3, [r2, #12]
}
 800c10c:	bf00      	nop
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	e000ed00 	.word	0xe000ed00
 800c11c:	05fa0000 	.word	0x05fa0000

0800c120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c120:	b480      	push	{r7}
 800c122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <__NVIC_GetPriorityGrouping+0x18>)
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	0a1b      	lsrs	r3, r3, #8
 800c12a:	f003 0307 	and.w	r3, r3, #7
}
 800c12e:	4618      	mov	r0, r3
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	e000ed00 	.word	0xe000ed00

0800c13c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	db0b      	blt.n	800c166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c14e:	88fb      	ldrh	r3, [r7, #6]
 800c150:	f003 021f 	and.w	r2, r3, #31
 800c154:	4907      	ldr	r1, [pc, #28]	; (800c174 <__NVIC_EnableIRQ+0x38>)
 800c156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	2001      	movs	r0, #1
 800c15e:	fa00 f202 	lsl.w	r2, r0, r2
 800c162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	e000e100 	.word	0xe000e100

0800c178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	db0a      	blt.n	800c1a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	490c      	ldr	r1, [pc, #48]	; (800c1c4 <__NVIC_SetPriority+0x4c>)
 800c192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c196:	0112      	lsls	r2, r2, #4
 800c198:	b2d2      	uxtb	r2, r2
 800c19a:	440b      	add	r3, r1
 800c19c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c1a0:	e00a      	b.n	800c1b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	4908      	ldr	r1, [pc, #32]	; (800c1c8 <__NVIC_SetPriority+0x50>)
 800c1a8:	88fb      	ldrh	r3, [r7, #6]
 800c1aa:	f003 030f 	and.w	r3, r3, #15
 800c1ae:	3b04      	subs	r3, #4
 800c1b0:	0112      	lsls	r2, r2, #4
 800c1b2:	b2d2      	uxtb	r2, r2
 800c1b4:	440b      	add	r3, r1
 800c1b6:	761a      	strb	r2, [r3, #24]
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	e000e100 	.word	0xe000e100
 800c1c8:	e000ed00 	.word	0xe000ed00

0800c1cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b089      	sub	sp, #36	; 0x24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	f1c3 0307 	rsb	r3, r3, #7
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	bf28      	it	cs
 800c1ea:	2304      	movcs	r3, #4
 800c1ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	2b06      	cmp	r3, #6
 800c1f4:	d902      	bls.n	800c1fc <NVIC_EncodePriority+0x30>
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	3b03      	subs	r3, #3
 800c1fa:	e000      	b.n	800c1fe <NVIC_EncodePriority+0x32>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	fa02 f303 	lsl.w	r3, r2, r3
 800c20a:	43da      	mvns	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	401a      	ands	r2, r3
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	fa01 f303 	lsl.w	r3, r1, r3
 800c21e:	43d9      	mvns	r1, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c224:	4313      	orrs	r3, r2
         );
}
 800c226:	4618      	mov	r0, r3
 800c228:	3724      	adds	r7, #36	; 0x24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
	...

0800c234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	3b01      	subs	r3, #1
 800c240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c244:	d301      	bcc.n	800c24a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c246:	2301      	movs	r3, #1
 800c248:	e00f      	b.n	800c26a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c24a:	4a0a      	ldr	r2, [pc, #40]	; (800c274 <SysTick_Config+0x40>)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3b01      	subs	r3, #1
 800c250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c252:	210f      	movs	r1, #15
 800c254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c258:	f7ff ff8e 	bl	800c178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c25c:	4b05      	ldr	r3, [pc, #20]	; (800c274 <SysTick_Config+0x40>)
 800c25e:	2200      	movs	r2, #0
 800c260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c262:	4b04      	ldr	r3, [pc, #16]	; (800c274 <SysTick_Config+0x40>)
 800c264:	2207      	movs	r2, #7
 800c266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	e000e010 	.word	0xe000e010

0800c278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff ff29 	bl	800c0d8 <__NVIC_SetPriorityGrouping>
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b086      	sub	sp, #24
 800c292:	af00      	add	r7, sp, #0
 800c294:	4603      	mov	r3, r0
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
 800c29a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c29c:	f7ff ff40 	bl	800c120 <__NVIC_GetPriorityGrouping>
 800c2a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	6978      	ldr	r0, [r7, #20]
 800c2a8:	f7ff ff90 	bl	800c1cc <NVIC_EncodePriority>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff ff5f 	bl	800c178 <__NVIC_SetPriority>
}
 800c2ba:	bf00      	nop
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b082      	sub	sp, #8
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c2cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff ff33 	bl	800c13c <__NVIC_EnableIRQ>
}
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ffa4 	bl	800c234 <SysTick_Config>
 800c2ec:	4603      	mov	r3, r0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e014      	b.n	800c332 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	791b      	ldrb	r3, [r3, #4]
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d105      	bne.n	800c31e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7fe f8b7 	bl	800a48c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2202      	movs	r2, #2
 800c322:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b083      	sub	sp, #12
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	795b      	ldrb	r3, [r3, #5]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d101      	bne.n	800c350 <HAL_DAC_Start+0x16>
 800c34c:	2302      	movs	r3, #2
 800c34e:	e040      	b.n	800c3d2 <HAL_DAC_Start+0x98>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2202      	movs	r2, #2
 800c35a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6819      	ldr	r1, [r3, #0]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	f003 0310 	and.w	r3, r3, #16
 800c368:	2201      	movs	r2, #1
 800c36a:	409a      	lsls	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10f      	bne.n	800c39a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c384:	2b02      	cmp	r3, #2
 800c386:	d11d      	bne.n	800c3c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0201 	orr.w	r2, r2, #1
 800c396:	605a      	str	r2, [r3, #4]
 800c398:	e014      	b.n	800c3c4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	f003 0310 	and.w	r3, r3, #16
 800c3aa:	2102      	movs	r1, #2
 800c3ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d107      	bne.n	800c3c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f042 0202 	orr.w	r2, r2, #2
 800c3c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b087      	sub	sp, #28
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d105      	bne.n	800c408 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	3308      	adds	r3, #8
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	e004      	b.n	800c412 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4413      	add	r3, r2
 800c40e:	3314      	adds	r3, #20
 800c410:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	461a      	mov	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	371c      	adds	r7, #28
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b088      	sub	sp, #32
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	795b      	ldrb	r3, [r3, #5]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <HAL_DAC_ConfigChannel+0x18>
 800c43c:	2302      	movs	r3, #2
 800c43e:	e11d      	b.n	800c67c <HAL_DAC_ConfigChannel+0x254>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2202      	movs	r2, #2
 800c44a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b04      	cmp	r3, #4
 800c452:	d174      	bne.n	800c53e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800c454:	f7ff fc1c 	bl	800bc90 <HAL_GetTick>
 800c458:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d134      	bne.n	800c4ca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c460:	e011      	b.n	800c486 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c462:	f7ff fc15 	bl	800bc90 <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d90a      	bls.n	800c486 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	f043 0208 	orr.w	r2, r3, #8
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2203      	movs	r2, #3
 800c480:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e0fa      	b.n	800c67c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c48c:	4b7d      	ldr	r3, [pc, #500]	; (800c684 <HAL_DAC_ConfigChannel+0x25c>)
 800c48e:	4013      	ands	r3, r2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800c494:	2001      	movs	r0, #1
 800c496:	f7ff fc07 	bl	800bca8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	6992      	ldr	r2, [r2, #24]
 800c4a2:	641a      	str	r2, [r3, #64]	; 0x40
 800c4a4:	e01e      	b.n	800c4e4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800c4a6:	f7ff fbf3 	bl	800bc90 <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d90a      	bls.n	800c4ca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	f043 0208 	orr.w	r2, r3, #8
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	e0d8      	b.n	800c67c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dbe8      	blt.n	800c4a6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800c4d4:	2001      	movs	r0, #1
 800c4d6:	f7ff fbe7 	bl	800bca8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	6992      	ldr	r2, [r2, #24]
 800c4e2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f003 0310 	and.w	r3, r3, #16
 800c4f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f8:	43db      	mvns	r3, r3
 800c4fa:	ea02 0103 	and.w	r1, r2, r3
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	69da      	ldr	r2, [r3, #28]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	409a      	lsls	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f003 0310 	and.w	r3, r3, #16
 800c51e:	21ff      	movs	r1, #255	; 0xff
 800c520:	fa01 f303 	lsl.w	r3, r1, r3
 800c524:	43db      	mvns	r3, r3
 800c526:	ea02 0103 	and.w	r1, r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	6a1a      	ldr	r2, [r3, #32]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f003 0310 	and.w	r3, r3, #16
 800c534:	409a      	lsls	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d11d      	bne.n	800c582 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f003 0310 	and.w	r3, r3, #16
 800c554:	221f      	movs	r2, #31
 800c556:	fa02 f303 	lsl.w	r3, r2, r3
 800c55a:	43db      	mvns	r3, r3
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	4013      	ands	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f003 0310 	and.w	r3, r3, #16
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c588:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2207      	movs	r2, #7
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	43db      	mvns	r3, r3
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	4013      	ands	r3, r2
 800c59c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d102      	bne.n	800c5ac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	61fb      	str	r3, [r7, #28]
 800c5aa:	e00f      	b.n	800c5cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d102      	bne.n	800c5ba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e008      	b.n	800c5cc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	e001      	b.n	800c5cc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	69fa      	ldr	r2, [r7, #28]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f003 0310 	and.w	r3, r3, #16
 800c5e2:	693a      	ldr	r2, [r7, #16]
 800c5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e8:	697a      	ldr	r2, [r7, #20]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6819      	ldr	r1, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f003 0310 	and.w	r3, r3, #16
 800c602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c606:	fa02 f303 	lsl.w	r3, r2, r3
 800c60a:	43da      	mvns	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	400a      	ands	r2, r1
 800c612:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f003 0310 	and.w	r3, r3, #16
 800c622:	f640 72fe 	movw	r2, #4094	; 0xffe
 800c626:	fa02 f303 	lsl.w	r3, r2, r3
 800c62a:	43db      	mvns	r3, r3
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	4013      	ands	r3, r2
 800c630:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f003 0310 	and.w	r3, r3, #16
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	fa02 f303 	lsl.w	r3, r2, r3
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	4313      	orrs	r3, r2
 800c648:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6819      	ldr	r1, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f003 0310 	and.w	r3, r3, #16
 800c65e:	22c0      	movs	r2, #192	; 0xc0
 800c660:	fa02 f303 	lsl.w	r3, r2, r3
 800c664:	43da      	mvns	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	400a      	ands	r2, r1
 800c66c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20008000 	.word	0x20008000

0800c688 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c690:	f7ff fafe 	bl	800bc90 <HAL_GetTick>
 800c694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e316      	b.n	800ccce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a66      	ldr	r2, [pc, #408]	; (800c840 <HAL_DMA_Init+0x1b8>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d04a      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a65      	ldr	r2, [pc, #404]	; (800c844 <HAL_DMA_Init+0x1bc>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d045      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a63      	ldr	r2, [pc, #396]	; (800c848 <HAL_DMA_Init+0x1c0>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d040      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a62      	ldr	r2, [pc, #392]	; (800c84c <HAL_DMA_Init+0x1c4>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d03b      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a60      	ldr	r2, [pc, #384]	; (800c850 <HAL_DMA_Init+0x1c8>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d036      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a5f      	ldr	r2, [pc, #380]	; (800c854 <HAL_DMA_Init+0x1cc>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d031      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a5d      	ldr	r2, [pc, #372]	; (800c858 <HAL_DMA_Init+0x1d0>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d02c      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a5c      	ldr	r2, [pc, #368]	; (800c85c <HAL_DMA_Init+0x1d4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d027      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a5a      	ldr	r2, [pc, #360]	; (800c860 <HAL_DMA_Init+0x1d8>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d022      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a59      	ldr	r2, [pc, #356]	; (800c864 <HAL_DMA_Init+0x1dc>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d01d      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a57      	ldr	r2, [pc, #348]	; (800c868 <HAL_DMA_Init+0x1e0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d018      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a56      	ldr	r2, [pc, #344]	; (800c86c <HAL_DMA_Init+0x1e4>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d013      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a54      	ldr	r2, [pc, #336]	; (800c870 <HAL_DMA_Init+0x1e8>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d00e      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a53      	ldr	r2, [pc, #332]	; (800c874 <HAL_DMA_Init+0x1ec>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d009      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a51      	ldr	r2, [pc, #324]	; (800c878 <HAL_DMA_Init+0x1f0>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d004      	beq.n	800c740 <HAL_DMA_Init+0xb8>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a50      	ldr	r2, [pc, #320]	; (800c87c <HAL_DMA_Init+0x1f4>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d101      	bne.n	800c744 <HAL_DMA_Init+0xbc>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <HAL_DMA_Init+0xbe>
 800c744:	2300      	movs	r3, #0
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 813b 	beq.w	800c9c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a37      	ldr	r2, [pc, #220]	; (800c840 <HAL_DMA_Init+0x1b8>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d04a      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a36      	ldr	r2, [pc, #216]	; (800c844 <HAL_DMA_Init+0x1bc>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d045      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a34      	ldr	r2, [pc, #208]	; (800c848 <HAL_DMA_Init+0x1c0>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d040      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a33      	ldr	r2, [pc, #204]	; (800c84c <HAL_DMA_Init+0x1c4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d03b      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a31      	ldr	r2, [pc, #196]	; (800c850 <HAL_DMA_Init+0x1c8>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d036      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a30      	ldr	r2, [pc, #192]	; (800c854 <HAL_DMA_Init+0x1cc>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d031      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a2e      	ldr	r2, [pc, #184]	; (800c858 <HAL_DMA_Init+0x1d0>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d02c      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a2d      	ldr	r2, [pc, #180]	; (800c85c <HAL_DMA_Init+0x1d4>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d027      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a2b      	ldr	r2, [pc, #172]	; (800c860 <HAL_DMA_Init+0x1d8>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d022      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <HAL_DMA_Init+0x1dc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d01d      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a28      	ldr	r2, [pc, #160]	; (800c868 <HAL_DMA_Init+0x1e0>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d018      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a27      	ldr	r2, [pc, #156]	; (800c86c <HAL_DMA_Init+0x1e4>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d013      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a25      	ldr	r2, [pc, #148]	; (800c870 <HAL_DMA_Init+0x1e8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d00e      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a24      	ldr	r2, [pc, #144]	; (800c874 <HAL_DMA_Init+0x1ec>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d009      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a22      	ldr	r2, [pc, #136]	; (800c878 <HAL_DMA_Init+0x1f0>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d004      	beq.n	800c7fc <HAL_DMA_Init+0x174>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a21      	ldr	r2, [pc, #132]	; (800c87c <HAL_DMA_Init+0x1f4>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d108      	bne.n	800c80e <HAL_DMA_Init+0x186>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0201 	bic.w	r2, r2, #1
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	e007      	b.n	800c81e <HAL_DMA_Init+0x196>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f022 0201 	bic.w	r2, r2, #1
 800c81c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c81e:	e02f      	b.n	800c880 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c820:	f7ff fa36 	bl	800bc90 <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b05      	cmp	r3, #5
 800c82c:	d928      	bls.n	800c880 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2203      	movs	r2, #3
 800c838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e246      	b.n	800ccce <HAL_DMA_Init+0x646>
 800c840:	40020010 	.word	0x40020010
 800c844:	40020028 	.word	0x40020028
 800c848:	40020040 	.word	0x40020040
 800c84c:	40020058 	.word	0x40020058
 800c850:	40020070 	.word	0x40020070
 800c854:	40020088 	.word	0x40020088
 800c858:	400200a0 	.word	0x400200a0
 800c85c:	400200b8 	.word	0x400200b8
 800c860:	40020410 	.word	0x40020410
 800c864:	40020428 	.word	0x40020428
 800c868:	40020440 	.word	0x40020440
 800c86c:	40020458 	.word	0x40020458
 800c870:	40020470 	.word	0x40020470
 800c874:	40020488 	.word	0x40020488
 800c878:	400204a0 	.word	0x400204a0
 800c87c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1c8      	bne.n	800c820 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	4b83      	ldr	r3, [pc, #524]	; (800caa8 <HAL_DMA_Init+0x420>)
 800c89a:	4013      	ands	r3, r2
 800c89c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800c8a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d0:	2b04      	cmp	r3, #4
 800c8d2:	d107      	bne.n	800c8e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c8e4:	4b71      	ldr	r3, [pc, #452]	; (800caac <HAL_DMA_Init+0x424>)
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4b71      	ldr	r3, [pc, #452]	; (800cab0 <HAL_DMA_Init+0x428>)
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8f0:	d328      	bcc.n	800c944 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	2b28      	cmp	r3, #40	; 0x28
 800c8f8:	d903      	bls.n	800c902 <HAL_DMA_Init+0x27a>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800c900:	d917      	bls.n	800c932 <HAL_DMA_Init+0x2aa>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b3e      	cmp	r3, #62	; 0x3e
 800c908:	d903      	bls.n	800c912 <HAL_DMA_Init+0x28a>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	2b42      	cmp	r3, #66	; 0x42
 800c910:	d90f      	bls.n	800c932 <HAL_DMA_Init+0x2aa>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	2b46      	cmp	r3, #70	; 0x46
 800c918:	d903      	bls.n	800c922 <HAL_DMA_Init+0x29a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b48      	cmp	r3, #72	; 0x48
 800c920:	d907      	bls.n	800c932 <HAL_DMA_Init+0x2aa>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	2b4e      	cmp	r3, #78	; 0x4e
 800c928:	d905      	bls.n	800c936 <HAL_DMA_Init+0x2ae>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	2b52      	cmp	r3, #82	; 0x52
 800c930:	d801      	bhi.n	800c936 <HAL_DMA_Init+0x2ae>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <HAL_DMA_Init+0x2b0>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c942:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f023 0307 	bic.w	r3, r3, #7
 800c95a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	4313      	orrs	r3, r2
 800c964:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d117      	bne.n	800c99e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4313      	orrs	r3, r2
 800c976:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00e      	beq.n	800c99e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f002 fb4d 	bl	800f020 <DMA_CheckFifoParam>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d008      	beq.n	800c99e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2240      	movs	r2, #64	; 0x40
 800c990:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e197      	b.n	800ccce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f002 fa88 	bl	800eebc <DMA_CalcBaseAndBitshift>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9b4:	f003 031f 	and.w	r3, r3, #31
 800c9b8:	223f      	movs	r2, #63	; 0x3f
 800c9ba:	409a      	lsls	r2, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	609a      	str	r2, [r3, #8]
 800c9c0:	e0cd      	b.n	800cb5e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a3b      	ldr	r2, [pc, #236]	; (800cab4 <HAL_DMA_Init+0x42c>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d022      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a39      	ldr	r2, [pc, #228]	; (800cab8 <HAL_DMA_Init+0x430>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d01d      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a38      	ldr	r2, [pc, #224]	; (800cabc <HAL_DMA_Init+0x434>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d018      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a36      	ldr	r2, [pc, #216]	; (800cac0 <HAL_DMA_Init+0x438>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d013      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a35      	ldr	r2, [pc, #212]	; (800cac4 <HAL_DMA_Init+0x43c>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00e      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a33      	ldr	r2, [pc, #204]	; (800cac8 <HAL_DMA_Init+0x440>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d009      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a32      	ldr	r2, [pc, #200]	; (800cacc <HAL_DMA_Init+0x444>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d004      	beq.n	800ca12 <HAL_DMA_Init+0x38a>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a30      	ldr	r2, [pc, #192]	; (800cad0 <HAL_DMA_Init+0x448>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d101      	bne.n	800ca16 <HAL_DMA_Init+0x38e>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e000      	b.n	800ca18 <HAL_DMA_Init+0x390>
 800ca16:	2300      	movs	r3, #0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 8097 	beq.w	800cb4c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a24      	ldr	r2, [pc, #144]	; (800cab4 <HAL_DMA_Init+0x42c>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d021      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a22      	ldr	r2, [pc, #136]	; (800cab8 <HAL_DMA_Init+0x430>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d01c      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a21      	ldr	r2, [pc, #132]	; (800cabc <HAL_DMA_Init+0x434>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d017      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1f      	ldr	r2, [pc, #124]	; (800cac0 <HAL_DMA_Init+0x438>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d012      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a1e      	ldr	r2, [pc, #120]	; (800cac4 <HAL_DMA_Init+0x43c>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d00d      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a1c      	ldr	r2, [pc, #112]	; (800cac8 <HAL_DMA_Init+0x440>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d008      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1b      	ldr	r2, [pc, #108]	; (800cacc <HAL_DMA_Init+0x444>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <HAL_DMA_Init+0x3e4>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a19      	ldr	r2, [pc, #100]	; (800cad0 <HAL_DMA_Init+0x448>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2202      	movs	r2, #2
 800ca72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	4b12      	ldr	r3, [pc, #72]	; (800cad4 <HAL_DMA_Init+0x44c>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	2b40      	cmp	r3, #64	; 0x40
 800ca94:	d020      	beq.n	800cad8 <HAL_DMA_Init+0x450>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	2b80      	cmp	r3, #128	; 0x80
 800ca9c:	d102      	bne.n	800caa4 <HAL_DMA_Init+0x41c>
 800ca9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800caa2:	e01a      	b.n	800cada <HAL_DMA_Init+0x452>
 800caa4:	2300      	movs	r3, #0
 800caa6:	e018      	b.n	800cada <HAL_DMA_Init+0x452>
 800caa8:	fe10803f 	.word	0xfe10803f
 800caac:	5c001000 	.word	0x5c001000
 800cab0:	ffff0000 	.word	0xffff0000
 800cab4:	58025408 	.word	0x58025408
 800cab8:	5802541c 	.word	0x5802541c
 800cabc:	58025430 	.word	0x58025430
 800cac0:	58025444 	.word	0x58025444
 800cac4:	58025458 	.word	0x58025458
 800cac8:	5802546c 	.word	0x5802546c
 800cacc:	58025480 	.word	0x58025480
 800cad0:	58025494 	.word	0x58025494
 800cad4:	fffe000f 	.word	0xfffe000f
 800cad8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	68d2      	ldr	r2, [r2, #12]
 800cade:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800cae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800caf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800caf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800cb00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800cb08:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4b6e      	ldr	r3, [pc, #440]	; (800ccd8 <HAL_DMA_Init+0x650>)
 800cb20:	4413      	add	r3, r2
 800cb22:	4a6e      	ldr	r2, [pc, #440]	; (800ccdc <HAL_DMA_Init+0x654>)
 800cb24:	fba2 2303 	umull	r2, r3, r2, r3
 800cb28:	091b      	lsrs	r3, r3, #4
 800cb2a:	009a      	lsls	r2, r3, #2
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 f9c3 	bl	800eebc <DMA_CalcBaseAndBitshift>
 800cb36:	4603      	mov	r3, r0
 800cb38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb3e:	f003 031f 	and.w	r3, r3, #31
 800cb42:	2201      	movs	r2, #1
 800cb44:	409a      	lsls	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	605a      	str	r2, [r3, #4]
 800cb4a:	e008      	b.n	800cb5e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2240      	movs	r2, #64	; 0x40
 800cb50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2203      	movs	r2, #3
 800cb56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e0b7      	b.n	800ccce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a5f      	ldr	r2, [pc, #380]	; (800cce0 <HAL_DMA_Init+0x658>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d072      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a5d      	ldr	r2, [pc, #372]	; (800cce4 <HAL_DMA_Init+0x65c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d06d      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a5c      	ldr	r2, [pc, #368]	; (800cce8 <HAL_DMA_Init+0x660>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d068      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a5a      	ldr	r2, [pc, #360]	; (800ccec <HAL_DMA_Init+0x664>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d063      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a59      	ldr	r2, [pc, #356]	; (800ccf0 <HAL_DMA_Init+0x668>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d05e      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a57      	ldr	r2, [pc, #348]	; (800ccf4 <HAL_DMA_Init+0x66c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d059      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a56      	ldr	r2, [pc, #344]	; (800ccf8 <HAL_DMA_Init+0x670>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d054      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a54      	ldr	r2, [pc, #336]	; (800ccfc <HAL_DMA_Init+0x674>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d04f      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a53      	ldr	r2, [pc, #332]	; (800cd00 <HAL_DMA_Init+0x678>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d04a      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a51      	ldr	r2, [pc, #324]	; (800cd04 <HAL_DMA_Init+0x67c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d045      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a50      	ldr	r2, [pc, #320]	; (800cd08 <HAL_DMA_Init+0x680>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d040      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a4e      	ldr	r2, [pc, #312]	; (800cd0c <HAL_DMA_Init+0x684>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d03b      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a4d      	ldr	r2, [pc, #308]	; (800cd10 <HAL_DMA_Init+0x688>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d036      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a4b      	ldr	r2, [pc, #300]	; (800cd14 <HAL_DMA_Init+0x68c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d031      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a4a      	ldr	r2, [pc, #296]	; (800cd18 <HAL_DMA_Init+0x690>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d02c      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a48      	ldr	r2, [pc, #288]	; (800cd1c <HAL_DMA_Init+0x694>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d027      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a47      	ldr	r2, [pc, #284]	; (800cd20 <HAL_DMA_Init+0x698>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d022      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a45      	ldr	r2, [pc, #276]	; (800cd24 <HAL_DMA_Init+0x69c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d01d      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a44      	ldr	r2, [pc, #272]	; (800cd28 <HAL_DMA_Init+0x6a0>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d018      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a42      	ldr	r2, [pc, #264]	; (800cd2c <HAL_DMA_Init+0x6a4>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d013      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a41      	ldr	r2, [pc, #260]	; (800cd30 <HAL_DMA_Init+0x6a8>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d00e      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a3f      	ldr	r2, [pc, #252]	; (800cd34 <HAL_DMA_Init+0x6ac>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d009      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a3e      	ldr	r2, [pc, #248]	; (800cd38 <HAL_DMA_Init+0x6b0>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d004      	beq.n	800cc4e <HAL_DMA_Init+0x5c6>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a3c      	ldr	r2, [pc, #240]	; (800cd3c <HAL_DMA_Init+0x6b4>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d101      	bne.n	800cc52 <HAL_DMA_Init+0x5ca>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e000      	b.n	800cc54 <HAL_DMA_Init+0x5cc>
 800cc52:	2300      	movs	r3, #0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d032      	beq.n	800ccbe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f002 fa5d 	bl	800f118 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	2b80      	cmp	r3, #128	; 0x80
 800cc64:	d102      	bne.n	800cc6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	685a      	ldr	r2, [r3, #4]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc74:	b2d2      	uxtb	r2, r2
 800cc76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cc80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d010      	beq.n	800ccac <HAL_DMA_Init+0x624>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2b08      	cmp	r3, #8
 800cc90:	d80c      	bhi.n	800ccac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f002 fada 	bl	800f24c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cca8:	605a      	str	r2, [r3, #4]
 800ccaa:	e008      	b.n	800ccbe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	a7fdabf8 	.word	0xa7fdabf8
 800ccdc:	cccccccd 	.word	0xcccccccd
 800cce0:	40020010 	.word	0x40020010
 800cce4:	40020028 	.word	0x40020028
 800cce8:	40020040 	.word	0x40020040
 800ccec:	40020058 	.word	0x40020058
 800ccf0:	40020070 	.word	0x40020070
 800ccf4:	40020088 	.word	0x40020088
 800ccf8:	400200a0 	.word	0x400200a0
 800ccfc:	400200b8 	.word	0x400200b8
 800cd00:	40020410 	.word	0x40020410
 800cd04:	40020428 	.word	0x40020428
 800cd08:	40020440 	.word	0x40020440
 800cd0c:	40020458 	.word	0x40020458
 800cd10:	40020470 	.word	0x40020470
 800cd14:	40020488 	.word	0x40020488
 800cd18:	400204a0 	.word	0x400204a0
 800cd1c:	400204b8 	.word	0x400204b8
 800cd20:	58025408 	.word	0x58025408
 800cd24:	5802541c 	.word	0x5802541c
 800cd28:	58025430 	.word	0x58025430
 800cd2c:	58025444 	.word	0x58025444
 800cd30:	58025458 	.word	0x58025458
 800cd34:	5802546c 	.word	0x5802546c
 800cd38:	58025480 	.word	0x58025480
 800cd3c:	58025494 	.word	0x58025494

0800cd40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e226      	b.n	800d1aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d101      	bne.n	800cd6a <HAL_DMA_Start_IT+0x2a>
 800cd66:	2302      	movs	r3, #2
 800cd68:	e21f      	b.n	800d1aa <HAL_DMA_Start_IT+0x46a>
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	f040 820a 	bne.w	800d194 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a68      	ldr	r2, [pc, #416]	; (800cf34 <HAL_DMA_Start_IT+0x1f4>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d04a      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a66      	ldr	r2, [pc, #408]	; (800cf38 <HAL_DMA_Start_IT+0x1f8>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d045      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a65      	ldr	r2, [pc, #404]	; (800cf3c <HAL_DMA_Start_IT+0x1fc>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d040      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a63      	ldr	r2, [pc, #396]	; (800cf40 <HAL_DMA_Start_IT+0x200>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d03b      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a62      	ldr	r2, [pc, #392]	; (800cf44 <HAL_DMA_Start_IT+0x204>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d036      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a60      	ldr	r2, [pc, #384]	; (800cf48 <HAL_DMA_Start_IT+0x208>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d031      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a5f      	ldr	r2, [pc, #380]	; (800cf4c <HAL_DMA_Start_IT+0x20c>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d02c      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a5d      	ldr	r2, [pc, #372]	; (800cf50 <HAL_DMA_Start_IT+0x210>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d027      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a5c      	ldr	r2, [pc, #368]	; (800cf54 <HAL_DMA_Start_IT+0x214>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d022      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a5a      	ldr	r2, [pc, #360]	; (800cf58 <HAL_DMA_Start_IT+0x218>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d01d      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a59      	ldr	r2, [pc, #356]	; (800cf5c <HAL_DMA_Start_IT+0x21c>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d018      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a57      	ldr	r2, [pc, #348]	; (800cf60 <HAL_DMA_Start_IT+0x220>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d013      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a56      	ldr	r2, [pc, #344]	; (800cf64 <HAL_DMA_Start_IT+0x224>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00e      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a54      	ldr	r2, [pc, #336]	; (800cf68 <HAL_DMA_Start_IT+0x228>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d009      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a53      	ldr	r2, [pc, #332]	; (800cf6c <HAL_DMA_Start_IT+0x22c>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d004      	beq.n	800ce2e <HAL_DMA_Start_IT+0xee>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a51      	ldr	r2, [pc, #324]	; (800cf70 <HAL_DMA_Start_IT+0x230>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d108      	bne.n	800ce40 <HAL_DMA_Start_IT+0x100>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 0201 	bic.w	r2, r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e007      	b.n	800ce50 <HAL_DMA_Start_IT+0x110>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f022 0201 	bic.w	r2, r2, #1
 800ce4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	68b9      	ldr	r1, [r7, #8]
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f001 fe84 	bl	800eb64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a34      	ldr	r2, [pc, #208]	; (800cf34 <HAL_DMA_Start_IT+0x1f4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d04a      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a33      	ldr	r2, [pc, #204]	; (800cf38 <HAL_DMA_Start_IT+0x1f8>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d045      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a31      	ldr	r2, [pc, #196]	; (800cf3c <HAL_DMA_Start_IT+0x1fc>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d040      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a30      	ldr	r2, [pc, #192]	; (800cf40 <HAL_DMA_Start_IT+0x200>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d03b      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a2e      	ldr	r2, [pc, #184]	; (800cf44 <HAL_DMA_Start_IT+0x204>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d036      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a2d      	ldr	r2, [pc, #180]	; (800cf48 <HAL_DMA_Start_IT+0x208>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d031      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a2b      	ldr	r2, [pc, #172]	; (800cf4c <HAL_DMA_Start_IT+0x20c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d02c      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a2a      	ldr	r2, [pc, #168]	; (800cf50 <HAL_DMA_Start_IT+0x210>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d027      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a28      	ldr	r2, [pc, #160]	; (800cf54 <HAL_DMA_Start_IT+0x214>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d022      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a27      	ldr	r2, [pc, #156]	; (800cf58 <HAL_DMA_Start_IT+0x218>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d01d      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a25      	ldr	r2, [pc, #148]	; (800cf5c <HAL_DMA_Start_IT+0x21c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d018      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a24      	ldr	r2, [pc, #144]	; (800cf60 <HAL_DMA_Start_IT+0x220>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d013      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a22      	ldr	r2, [pc, #136]	; (800cf64 <HAL_DMA_Start_IT+0x224>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d00e      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a21      	ldr	r2, [pc, #132]	; (800cf68 <HAL_DMA_Start_IT+0x228>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d009      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1f      	ldr	r2, [pc, #124]	; (800cf6c <HAL_DMA_Start_IT+0x22c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d004      	beq.n	800cefc <HAL_DMA_Start_IT+0x1bc>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a1e      	ldr	r2, [pc, #120]	; (800cf70 <HAL_DMA_Start_IT+0x230>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d101      	bne.n	800cf00 <HAL_DMA_Start_IT+0x1c0>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <HAL_DMA_Start_IT+0x1c2>
 800cf00:	2300      	movs	r3, #0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d036      	beq.n	800cf74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f023 021e 	bic.w	r2, r3, #30
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f042 0216 	orr.w	r2, r2, #22
 800cf18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d03e      	beq.n	800cfa0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f042 0208 	orr.w	r2, r2, #8
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	e035      	b.n	800cfa0 <HAL_DMA_Start_IT+0x260>
 800cf34:	40020010 	.word	0x40020010
 800cf38:	40020028 	.word	0x40020028
 800cf3c:	40020040 	.word	0x40020040
 800cf40:	40020058 	.word	0x40020058
 800cf44:	40020070 	.word	0x40020070
 800cf48:	40020088 	.word	0x40020088
 800cf4c:	400200a0 	.word	0x400200a0
 800cf50:	400200b8 	.word	0x400200b8
 800cf54:	40020410 	.word	0x40020410
 800cf58:	40020428 	.word	0x40020428
 800cf5c:	40020440 	.word	0x40020440
 800cf60:	40020458 	.word	0x40020458
 800cf64:	40020470 	.word	0x40020470
 800cf68:	40020488 	.word	0x40020488
 800cf6c:	400204a0 	.word	0x400204a0
 800cf70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f023 020e 	bic.w	r2, r3, #14
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f042 020a 	orr.w	r2, r2, #10
 800cf86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f042 0204 	orr.w	r2, r2, #4
 800cf9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a83      	ldr	r2, [pc, #524]	; (800d1b4 <HAL_DMA_Start_IT+0x474>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d072      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a82      	ldr	r2, [pc, #520]	; (800d1b8 <HAL_DMA_Start_IT+0x478>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d06d      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a80      	ldr	r2, [pc, #512]	; (800d1bc <HAL_DMA_Start_IT+0x47c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d068      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a7f      	ldr	r2, [pc, #508]	; (800d1c0 <HAL_DMA_Start_IT+0x480>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d063      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a7d      	ldr	r2, [pc, #500]	; (800d1c4 <HAL_DMA_Start_IT+0x484>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d05e      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a7c      	ldr	r2, [pc, #496]	; (800d1c8 <HAL_DMA_Start_IT+0x488>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d059      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a7a      	ldr	r2, [pc, #488]	; (800d1cc <HAL_DMA_Start_IT+0x48c>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d054      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a79      	ldr	r2, [pc, #484]	; (800d1d0 <HAL_DMA_Start_IT+0x490>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d04f      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a77      	ldr	r2, [pc, #476]	; (800d1d4 <HAL_DMA_Start_IT+0x494>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d04a      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a76      	ldr	r2, [pc, #472]	; (800d1d8 <HAL_DMA_Start_IT+0x498>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d045      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a74      	ldr	r2, [pc, #464]	; (800d1dc <HAL_DMA_Start_IT+0x49c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d040      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a73      	ldr	r2, [pc, #460]	; (800d1e0 <HAL_DMA_Start_IT+0x4a0>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d03b      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a71      	ldr	r2, [pc, #452]	; (800d1e4 <HAL_DMA_Start_IT+0x4a4>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d036      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a70      	ldr	r2, [pc, #448]	; (800d1e8 <HAL_DMA_Start_IT+0x4a8>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d031      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a6e      	ldr	r2, [pc, #440]	; (800d1ec <HAL_DMA_Start_IT+0x4ac>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d02c      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a6d      	ldr	r2, [pc, #436]	; (800d1f0 <HAL_DMA_Start_IT+0x4b0>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d027      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a6b      	ldr	r2, [pc, #428]	; (800d1f4 <HAL_DMA_Start_IT+0x4b4>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d022      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a6a      	ldr	r2, [pc, #424]	; (800d1f8 <HAL_DMA_Start_IT+0x4b8>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d01d      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a68      	ldr	r2, [pc, #416]	; (800d1fc <HAL_DMA_Start_IT+0x4bc>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d018      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a67      	ldr	r2, [pc, #412]	; (800d200 <HAL_DMA_Start_IT+0x4c0>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d013      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a65      	ldr	r2, [pc, #404]	; (800d204 <HAL_DMA_Start_IT+0x4c4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00e      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a64      	ldr	r2, [pc, #400]	; (800d208 <HAL_DMA_Start_IT+0x4c8>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d009      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a62      	ldr	r2, [pc, #392]	; (800d20c <HAL_DMA_Start_IT+0x4cc>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d004      	beq.n	800d090 <HAL_DMA_Start_IT+0x350>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a61      	ldr	r2, [pc, #388]	; (800d210 <HAL_DMA_Start_IT+0x4d0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d101      	bne.n	800d094 <HAL_DMA_Start_IT+0x354>
 800d090:	2301      	movs	r3, #1
 800d092:	e000      	b.n	800d096 <HAL_DMA_Start_IT+0x356>
 800d094:	2300      	movs	r3, #0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d01a      	beq.n	800d0d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d007      	beq.n	800d0b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a37      	ldr	r2, [pc, #220]	; (800d1b4 <HAL_DMA_Start_IT+0x474>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d04a      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a36      	ldr	r2, [pc, #216]	; (800d1b8 <HAL_DMA_Start_IT+0x478>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d045      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a34      	ldr	r2, [pc, #208]	; (800d1bc <HAL_DMA_Start_IT+0x47c>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d040      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a33      	ldr	r2, [pc, #204]	; (800d1c0 <HAL_DMA_Start_IT+0x480>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d03b      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a31      	ldr	r2, [pc, #196]	; (800d1c4 <HAL_DMA_Start_IT+0x484>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d036      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a30      	ldr	r2, [pc, #192]	; (800d1c8 <HAL_DMA_Start_IT+0x488>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d031      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a2e      	ldr	r2, [pc, #184]	; (800d1cc <HAL_DMA_Start_IT+0x48c>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d02c      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a2d      	ldr	r2, [pc, #180]	; (800d1d0 <HAL_DMA_Start_IT+0x490>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d027      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a2b      	ldr	r2, [pc, #172]	; (800d1d4 <HAL_DMA_Start_IT+0x494>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d022      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a2a      	ldr	r2, [pc, #168]	; (800d1d8 <HAL_DMA_Start_IT+0x498>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d01d      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a28      	ldr	r2, [pc, #160]	; (800d1dc <HAL_DMA_Start_IT+0x49c>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d018      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a27      	ldr	r2, [pc, #156]	; (800d1e0 <HAL_DMA_Start_IT+0x4a0>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d013      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a25      	ldr	r2, [pc, #148]	; (800d1e4 <HAL_DMA_Start_IT+0x4a4>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d00e      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a24      	ldr	r2, [pc, #144]	; (800d1e8 <HAL_DMA_Start_IT+0x4a8>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d009      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a22      	ldr	r2, [pc, #136]	; (800d1ec <HAL_DMA_Start_IT+0x4ac>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d004      	beq.n	800d170 <HAL_DMA_Start_IT+0x430>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a21      	ldr	r2, [pc, #132]	; (800d1f0 <HAL_DMA_Start_IT+0x4b0>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d108      	bne.n	800d182 <HAL_DMA_Start_IT+0x442>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f042 0201 	orr.w	r2, r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	e012      	b.n	800d1a8 <HAL_DMA_Start_IT+0x468>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f042 0201 	orr.w	r2, r2, #1
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	e009      	b.n	800d1a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d19a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	40020010 	.word	0x40020010
 800d1b8:	40020028 	.word	0x40020028
 800d1bc:	40020040 	.word	0x40020040
 800d1c0:	40020058 	.word	0x40020058
 800d1c4:	40020070 	.word	0x40020070
 800d1c8:	40020088 	.word	0x40020088
 800d1cc:	400200a0 	.word	0x400200a0
 800d1d0:	400200b8 	.word	0x400200b8
 800d1d4:	40020410 	.word	0x40020410
 800d1d8:	40020428 	.word	0x40020428
 800d1dc:	40020440 	.word	0x40020440
 800d1e0:	40020458 	.word	0x40020458
 800d1e4:	40020470 	.word	0x40020470
 800d1e8:	40020488 	.word	0x40020488
 800d1ec:	400204a0 	.word	0x400204a0
 800d1f0:	400204b8 	.word	0x400204b8
 800d1f4:	58025408 	.word	0x58025408
 800d1f8:	5802541c 	.word	0x5802541c
 800d1fc:	58025430 	.word	0x58025430
 800d200:	58025444 	.word	0x58025444
 800d204:	58025458 	.word	0x58025458
 800d208:	5802546c 	.word	0x5802546c
 800d20c:	58025480 	.word	0x58025480
 800d210:	58025494 	.word	0x58025494

0800d214 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800d21c:	f7fe fd38 	bl	800bc90 <HAL_GetTick>
 800d220:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d101      	bne.n	800d22c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	e2dc      	b.n	800d7e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b02      	cmp	r3, #2
 800d236:	d008      	beq.n	800d24a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2280      	movs	r2, #128	; 0x80
 800d23c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e2cd      	b.n	800d7e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a76      	ldr	r2, [pc, #472]	; (800d428 <HAL_DMA_Abort+0x214>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d04a      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a74      	ldr	r2, [pc, #464]	; (800d42c <HAL_DMA_Abort+0x218>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d045      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a73      	ldr	r2, [pc, #460]	; (800d430 <HAL_DMA_Abort+0x21c>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d040      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a71      	ldr	r2, [pc, #452]	; (800d434 <HAL_DMA_Abort+0x220>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d03b      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a70      	ldr	r2, [pc, #448]	; (800d438 <HAL_DMA_Abort+0x224>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d036      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a6e      	ldr	r2, [pc, #440]	; (800d43c <HAL_DMA_Abort+0x228>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d031      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a6d      	ldr	r2, [pc, #436]	; (800d440 <HAL_DMA_Abort+0x22c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d02c      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a6b      	ldr	r2, [pc, #428]	; (800d444 <HAL_DMA_Abort+0x230>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d027      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a6a      	ldr	r2, [pc, #424]	; (800d448 <HAL_DMA_Abort+0x234>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d022      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a68      	ldr	r2, [pc, #416]	; (800d44c <HAL_DMA_Abort+0x238>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d01d      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a67      	ldr	r2, [pc, #412]	; (800d450 <HAL_DMA_Abort+0x23c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d018      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a65      	ldr	r2, [pc, #404]	; (800d454 <HAL_DMA_Abort+0x240>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d013      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a64      	ldr	r2, [pc, #400]	; (800d458 <HAL_DMA_Abort+0x244>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d00e      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a62      	ldr	r2, [pc, #392]	; (800d45c <HAL_DMA_Abort+0x248>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d009      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a61      	ldr	r2, [pc, #388]	; (800d460 <HAL_DMA_Abort+0x24c>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d004      	beq.n	800d2ea <HAL_DMA_Abort+0xd6>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a5f      	ldr	r2, [pc, #380]	; (800d464 <HAL_DMA_Abort+0x250>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d101      	bne.n	800d2ee <HAL_DMA_Abort+0xda>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e000      	b.n	800d2f0 <HAL_DMA_Abort+0xdc>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d013      	beq.n	800d31c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f022 021e 	bic.w	r2, r2, #30
 800d302:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	695a      	ldr	r2, [r3, #20]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d312:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	e00a      	b.n	800d332 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 020e 	bic.w	r2, r2, #14
 800d32a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a3c      	ldr	r2, [pc, #240]	; (800d428 <HAL_DMA_Abort+0x214>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d072      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a3a      	ldr	r2, [pc, #232]	; (800d42c <HAL_DMA_Abort+0x218>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d06d      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a39      	ldr	r2, [pc, #228]	; (800d430 <HAL_DMA_Abort+0x21c>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d068      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a37      	ldr	r2, [pc, #220]	; (800d434 <HAL_DMA_Abort+0x220>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d063      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a36      	ldr	r2, [pc, #216]	; (800d438 <HAL_DMA_Abort+0x224>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d05e      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a34      	ldr	r2, [pc, #208]	; (800d43c <HAL_DMA_Abort+0x228>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d059      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a33      	ldr	r2, [pc, #204]	; (800d440 <HAL_DMA_Abort+0x22c>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d054      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a31      	ldr	r2, [pc, #196]	; (800d444 <HAL_DMA_Abort+0x230>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d04f      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a30      	ldr	r2, [pc, #192]	; (800d448 <HAL_DMA_Abort+0x234>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d04a      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a2e      	ldr	r2, [pc, #184]	; (800d44c <HAL_DMA_Abort+0x238>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d045      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a2d      	ldr	r2, [pc, #180]	; (800d450 <HAL_DMA_Abort+0x23c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d040      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a2b      	ldr	r2, [pc, #172]	; (800d454 <HAL_DMA_Abort+0x240>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d03b      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a2a      	ldr	r2, [pc, #168]	; (800d458 <HAL_DMA_Abort+0x244>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d036      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a28      	ldr	r2, [pc, #160]	; (800d45c <HAL_DMA_Abort+0x248>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d031      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a27      	ldr	r2, [pc, #156]	; (800d460 <HAL_DMA_Abort+0x24c>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d02c      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a25      	ldr	r2, [pc, #148]	; (800d464 <HAL_DMA_Abort+0x250>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d027      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a24      	ldr	r2, [pc, #144]	; (800d468 <HAL_DMA_Abort+0x254>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d022      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a22      	ldr	r2, [pc, #136]	; (800d46c <HAL_DMA_Abort+0x258>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d01d      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a21      	ldr	r2, [pc, #132]	; (800d470 <HAL_DMA_Abort+0x25c>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d018      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a1f      	ldr	r2, [pc, #124]	; (800d474 <HAL_DMA_Abort+0x260>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d013      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a1e      	ldr	r2, [pc, #120]	; (800d478 <HAL_DMA_Abort+0x264>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d00e      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a1c      	ldr	r2, [pc, #112]	; (800d47c <HAL_DMA_Abort+0x268>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d009      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a1b      	ldr	r2, [pc, #108]	; (800d480 <HAL_DMA_Abort+0x26c>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d004      	beq.n	800d422 <HAL_DMA_Abort+0x20e>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a19      	ldr	r2, [pc, #100]	; (800d484 <HAL_DMA_Abort+0x270>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d132      	bne.n	800d488 <HAL_DMA_Abort+0x274>
 800d422:	2301      	movs	r3, #1
 800d424:	e031      	b.n	800d48a <HAL_DMA_Abort+0x276>
 800d426:	bf00      	nop
 800d428:	40020010 	.word	0x40020010
 800d42c:	40020028 	.word	0x40020028
 800d430:	40020040 	.word	0x40020040
 800d434:	40020058 	.word	0x40020058
 800d438:	40020070 	.word	0x40020070
 800d43c:	40020088 	.word	0x40020088
 800d440:	400200a0 	.word	0x400200a0
 800d444:	400200b8 	.word	0x400200b8
 800d448:	40020410 	.word	0x40020410
 800d44c:	40020428 	.word	0x40020428
 800d450:	40020440 	.word	0x40020440
 800d454:	40020458 	.word	0x40020458
 800d458:	40020470 	.word	0x40020470
 800d45c:	40020488 	.word	0x40020488
 800d460:	400204a0 	.word	0x400204a0
 800d464:	400204b8 	.word	0x400204b8
 800d468:	58025408 	.word	0x58025408
 800d46c:	5802541c 	.word	0x5802541c
 800d470:	58025430 	.word	0x58025430
 800d474:	58025444 	.word	0x58025444
 800d478:	58025458 	.word	0x58025458
 800d47c:	5802546c 	.word	0x5802546c
 800d480:	58025480 	.word	0x58025480
 800d484:	58025494 	.word	0x58025494
 800d488:	2300      	movs	r3, #0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d007      	beq.n	800d49e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d49c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a6d      	ldr	r2, [pc, #436]	; (800d658 <HAL_DMA_Abort+0x444>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d04a      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a6b      	ldr	r2, [pc, #428]	; (800d65c <HAL_DMA_Abort+0x448>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d045      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a6a      	ldr	r2, [pc, #424]	; (800d660 <HAL_DMA_Abort+0x44c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d040      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a68      	ldr	r2, [pc, #416]	; (800d664 <HAL_DMA_Abort+0x450>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d03b      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a67      	ldr	r2, [pc, #412]	; (800d668 <HAL_DMA_Abort+0x454>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d036      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a65      	ldr	r2, [pc, #404]	; (800d66c <HAL_DMA_Abort+0x458>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d031      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a64      	ldr	r2, [pc, #400]	; (800d670 <HAL_DMA_Abort+0x45c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d02c      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a62      	ldr	r2, [pc, #392]	; (800d674 <HAL_DMA_Abort+0x460>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d027      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a61      	ldr	r2, [pc, #388]	; (800d678 <HAL_DMA_Abort+0x464>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d022      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a5f      	ldr	r2, [pc, #380]	; (800d67c <HAL_DMA_Abort+0x468>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d01d      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a5e      	ldr	r2, [pc, #376]	; (800d680 <HAL_DMA_Abort+0x46c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d018      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a5c      	ldr	r2, [pc, #368]	; (800d684 <HAL_DMA_Abort+0x470>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d013      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a5b      	ldr	r2, [pc, #364]	; (800d688 <HAL_DMA_Abort+0x474>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d00e      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a59      	ldr	r2, [pc, #356]	; (800d68c <HAL_DMA_Abort+0x478>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d009      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a58      	ldr	r2, [pc, #352]	; (800d690 <HAL_DMA_Abort+0x47c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d004      	beq.n	800d53e <HAL_DMA_Abort+0x32a>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a56      	ldr	r2, [pc, #344]	; (800d694 <HAL_DMA_Abort+0x480>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d108      	bne.n	800d550 <HAL_DMA_Abort+0x33c>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f022 0201 	bic.w	r2, r2, #1
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e007      	b.n	800d560 <HAL_DMA_Abort+0x34c>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f022 0201 	bic.w	r2, r2, #1
 800d55e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d560:	e013      	b.n	800d58a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d562:	f7fe fb95 	bl	800bc90 <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	2b05      	cmp	r3, #5
 800d56e:	d90c      	bls.n	800d58a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2220      	movs	r2, #32
 800d574:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2203      	movs	r2, #3
 800d57a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e12d      	b.n	800d7e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e5      	bne.n	800d562 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a2f      	ldr	r2, [pc, #188]	; (800d658 <HAL_DMA_Abort+0x444>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d04a      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a2d      	ldr	r2, [pc, #180]	; (800d65c <HAL_DMA_Abort+0x448>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d045      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a2c      	ldr	r2, [pc, #176]	; (800d660 <HAL_DMA_Abort+0x44c>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d040      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a2a      	ldr	r2, [pc, #168]	; (800d664 <HAL_DMA_Abort+0x450>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d03b      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a29      	ldr	r2, [pc, #164]	; (800d668 <HAL_DMA_Abort+0x454>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d036      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a27      	ldr	r2, [pc, #156]	; (800d66c <HAL_DMA_Abort+0x458>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d031      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a26      	ldr	r2, [pc, #152]	; (800d670 <HAL_DMA_Abort+0x45c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d02c      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a24      	ldr	r2, [pc, #144]	; (800d674 <HAL_DMA_Abort+0x460>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d027      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a23      	ldr	r2, [pc, #140]	; (800d678 <HAL_DMA_Abort+0x464>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d022      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a21      	ldr	r2, [pc, #132]	; (800d67c <HAL_DMA_Abort+0x468>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d01d      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a20      	ldr	r2, [pc, #128]	; (800d680 <HAL_DMA_Abort+0x46c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d018      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a1e      	ldr	r2, [pc, #120]	; (800d684 <HAL_DMA_Abort+0x470>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d013      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a1d      	ldr	r2, [pc, #116]	; (800d688 <HAL_DMA_Abort+0x474>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d00e      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a1b      	ldr	r2, [pc, #108]	; (800d68c <HAL_DMA_Abort+0x478>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d009      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a1a      	ldr	r2, [pc, #104]	; (800d690 <HAL_DMA_Abort+0x47c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d004      	beq.n	800d636 <HAL_DMA_Abort+0x422>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a18      	ldr	r2, [pc, #96]	; (800d694 <HAL_DMA_Abort+0x480>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d101      	bne.n	800d63a <HAL_DMA_Abort+0x426>
 800d636:	2301      	movs	r3, #1
 800d638:	e000      	b.n	800d63c <HAL_DMA_Abort+0x428>
 800d63a:	2300      	movs	r3, #0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02b      	beq.n	800d698 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d644:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d64a:	f003 031f 	and.w	r3, r3, #31
 800d64e:	223f      	movs	r2, #63	; 0x3f
 800d650:	409a      	lsls	r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	609a      	str	r2, [r3, #8]
 800d656:	e02a      	b.n	800d6ae <HAL_DMA_Abort+0x49a>
 800d658:	40020010 	.word	0x40020010
 800d65c:	40020028 	.word	0x40020028
 800d660:	40020040 	.word	0x40020040
 800d664:	40020058 	.word	0x40020058
 800d668:	40020070 	.word	0x40020070
 800d66c:	40020088 	.word	0x40020088
 800d670:	400200a0 	.word	0x400200a0
 800d674:	400200b8 	.word	0x400200b8
 800d678:	40020410 	.word	0x40020410
 800d67c:	40020428 	.word	0x40020428
 800d680:	40020440 	.word	0x40020440
 800d684:	40020458 	.word	0x40020458
 800d688:	40020470 	.word	0x40020470
 800d68c:	40020488 	.word	0x40020488
 800d690:	400204a0 	.word	0x400204a0
 800d694:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a2:	f003 031f 	and.w	r3, r3, #31
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	409a      	lsls	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a4f      	ldr	r2, [pc, #316]	; (800d7f0 <HAL_DMA_Abort+0x5dc>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d072      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a4d      	ldr	r2, [pc, #308]	; (800d7f4 <HAL_DMA_Abort+0x5e0>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d06d      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a4c      	ldr	r2, [pc, #304]	; (800d7f8 <HAL_DMA_Abort+0x5e4>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d068      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a4a      	ldr	r2, [pc, #296]	; (800d7fc <HAL_DMA_Abort+0x5e8>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d063      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a49      	ldr	r2, [pc, #292]	; (800d800 <HAL_DMA_Abort+0x5ec>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d05e      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a47      	ldr	r2, [pc, #284]	; (800d804 <HAL_DMA_Abort+0x5f0>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d059      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a46      	ldr	r2, [pc, #280]	; (800d808 <HAL_DMA_Abort+0x5f4>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d054      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a44      	ldr	r2, [pc, #272]	; (800d80c <HAL_DMA_Abort+0x5f8>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d04f      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a43      	ldr	r2, [pc, #268]	; (800d810 <HAL_DMA_Abort+0x5fc>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d04a      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a41      	ldr	r2, [pc, #260]	; (800d814 <HAL_DMA_Abort+0x600>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d045      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a40      	ldr	r2, [pc, #256]	; (800d818 <HAL_DMA_Abort+0x604>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d040      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a3e      	ldr	r2, [pc, #248]	; (800d81c <HAL_DMA_Abort+0x608>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d03b      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a3d      	ldr	r2, [pc, #244]	; (800d820 <HAL_DMA_Abort+0x60c>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d036      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a3b      	ldr	r2, [pc, #236]	; (800d824 <HAL_DMA_Abort+0x610>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d031      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a3a      	ldr	r2, [pc, #232]	; (800d828 <HAL_DMA_Abort+0x614>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d02c      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a38      	ldr	r2, [pc, #224]	; (800d82c <HAL_DMA_Abort+0x618>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d027      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a37      	ldr	r2, [pc, #220]	; (800d830 <HAL_DMA_Abort+0x61c>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d022      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a35      	ldr	r2, [pc, #212]	; (800d834 <HAL_DMA_Abort+0x620>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d01d      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a34      	ldr	r2, [pc, #208]	; (800d838 <HAL_DMA_Abort+0x624>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d018      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a32      	ldr	r2, [pc, #200]	; (800d83c <HAL_DMA_Abort+0x628>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d013      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a31      	ldr	r2, [pc, #196]	; (800d840 <HAL_DMA_Abort+0x62c>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00e      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a2f      	ldr	r2, [pc, #188]	; (800d844 <HAL_DMA_Abort+0x630>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d009      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a2e      	ldr	r2, [pc, #184]	; (800d848 <HAL_DMA_Abort+0x634>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d004      	beq.n	800d79e <HAL_DMA_Abort+0x58a>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a2c      	ldr	r2, [pc, #176]	; (800d84c <HAL_DMA_Abort+0x638>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d101      	bne.n	800d7a2 <HAL_DMA_Abort+0x58e>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e000      	b.n	800d7a4 <HAL_DMA_Abort+0x590>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d015      	beq.n	800d7d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d7b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00c      	beq.n	800d7d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d7d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	40020010 	.word	0x40020010
 800d7f4:	40020028 	.word	0x40020028
 800d7f8:	40020040 	.word	0x40020040
 800d7fc:	40020058 	.word	0x40020058
 800d800:	40020070 	.word	0x40020070
 800d804:	40020088 	.word	0x40020088
 800d808:	400200a0 	.word	0x400200a0
 800d80c:	400200b8 	.word	0x400200b8
 800d810:	40020410 	.word	0x40020410
 800d814:	40020428 	.word	0x40020428
 800d818:	40020440 	.word	0x40020440
 800d81c:	40020458 	.word	0x40020458
 800d820:	40020470 	.word	0x40020470
 800d824:	40020488 	.word	0x40020488
 800d828:	400204a0 	.word	0x400204a0
 800d82c:	400204b8 	.word	0x400204b8
 800d830:	58025408 	.word	0x58025408
 800d834:	5802541c 	.word	0x5802541c
 800d838:	58025430 	.word	0x58025430
 800d83c:	58025444 	.word	0x58025444
 800d840:	58025458 	.word	0x58025458
 800d844:	5802546c 	.word	0x5802546c
 800d848:	58025480 	.word	0x58025480
 800d84c:	58025494 	.word	0x58025494

0800d850 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e237      	b.n	800dcd2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d004      	beq.n	800d878 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2280      	movs	r2, #128	; 0x80
 800d872:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e22c      	b.n	800dcd2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a5c      	ldr	r2, [pc, #368]	; (800d9f0 <HAL_DMA_Abort_IT+0x1a0>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d04a      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a5b      	ldr	r2, [pc, #364]	; (800d9f4 <HAL_DMA_Abort_IT+0x1a4>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d045      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a59      	ldr	r2, [pc, #356]	; (800d9f8 <HAL_DMA_Abort_IT+0x1a8>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d040      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a58      	ldr	r2, [pc, #352]	; (800d9fc <HAL_DMA_Abort_IT+0x1ac>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d03b      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a56      	ldr	r2, [pc, #344]	; (800da00 <HAL_DMA_Abort_IT+0x1b0>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d036      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a55      	ldr	r2, [pc, #340]	; (800da04 <HAL_DMA_Abort_IT+0x1b4>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d031      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a53      	ldr	r2, [pc, #332]	; (800da08 <HAL_DMA_Abort_IT+0x1b8>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d02c      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a52      	ldr	r2, [pc, #328]	; (800da0c <HAL_DMA_Abort_IT+0x1bc>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d027      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a50      	ldr	r2, [pc, #320]	; (800da10 <HAL_DMA_Abort_IT+0x1c0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d022      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a4f      	ldr	r2, [pc, #316]	; (800da14 <HAL_DMA_Abort_IT+0x1c4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d01d      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a4d      	ldr	r2, [pc, #308]	; (800da18 <HAL_DMA_Abort_IT+0x1c8>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d018      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a4c      	ldr	r2, [pc, #304]	; (800da1c <HAL_DMA_Abort_IT+0x1cc>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d013      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a4a      	ldr	r2, [pc, #296]	; (800da20 <HAL_DMA_Abort_IT+0x1d0>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d00e      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a49      	ldr	r2, [pc, #292]	; (800da24 <HAL_DMA_Abort_IT+0x1d4>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d009      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a47      	ldr	r2, [pc, #284]	; (800da28 <HAL_DMA_Abort_IT+0x1d8>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d004      	beq.n	800d918 <HAL_DMA_Abort_IT+0xc8>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a46      	ldr	r2, [pc, #280]	; (800da2c <HAL_DMA_Abort_IT+0x1dc>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d101      	bne.n	800d91c <HAL_DMA_Abort_IT+0xcc>
 800d918:	2301      	movs	r3, #1
 800d91a:	e000      	b.n	800d91e <HAL_DMA_Abort_IT+0xce>
 800d91c:	2300      	movs	r3, #0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 8086 	beq.w	800da30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2204      	movs	r2, #4
 800d928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a2f      	ldr	r2, [pc, #188]	; (800d9f0 <HAL_DMA_Abort_IT+0x1a0>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d04a      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a2e      	ldr	r2, [pc, #184]	; (800d9f4 <HAL_DMA_Abort_IT+0x1a4>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d045      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a2c      	ldr	r2, [pc, #176]	; (800d9f8 <HAL_DMA_Abort_IT+0x1a8>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d040      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a2b      	ldr	r2, [pc, #172]	; (800d9fc <HAL_DMA_Abort_IT+0x1ac>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d03b      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a29      	ldr	r2, [pc, #164]	; (800da00 <HAL_DMA_Abort_IT+0x1b0>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d036      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a28      	ldr	r2, [pc, #160]	; (800da04 <HAL_DMA_Abort_IT+0x1b4>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d031      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a26      	ldr	r2, [pc, #152]	; (800da08 <HAL_DMA_Abort_IT+0x1b8>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d02c      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a25      	ldr	r2, [pc, #148]	; (800da0c <HAL_DMA_Abort_IT+0x1bc>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d027      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a23      	ldr	r2, [pc, #140]	; (800da10 <HAL_DMA_Abort_IT+0x1c0>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d022      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a22      	ldr	r2, [pc, #136]	; (800da14 <HAL_DMA_Abort_IT+0x1c4>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d01d      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a20      	ldr	r2, [pc, #128]	; (800da18 <HAL_DMA_Abort_IT+0x1c8>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d018      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a1f      	ldr	r2, [pc, #124]	; (800da1c <HAL_DMA_Abort_IT+0x1cc>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d013      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a1d      	ldr	r2, [pc, #116]	; (800da20 <HAL_DMA_Abort_IT+0x1d0>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d00e      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a1c      	ldr	r2, [pc, #112]	; (800da24 <HAL_DMA_Abort_IT+0x1d4>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d009      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a1a      	ldr	r2, [pc, #104]	; (800da28 <HAL_DMA_Abort_IT+0x1d8>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d004      	beq.n	800d9cc <HAL_DMA_Abort_IT+0x17c>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a19      	ldr	r2, [pc, #100]	; (800da2c <HAL_DMA_Abort_IT+0x1dc>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d108      	bne.n	800d9de <HAL_DMA_Abort_IT+0x18e>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f022 0201 	bic.w	r2, r2, #1
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	e178      	b.n	800dcd0 <HAL_DMA_Abort_IT+0x480>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f022 0201 	bic.w	r2, r2, #1
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	e16f      	b.n	800dcd0 <HAL_DMA_Abort_IT+0x480>
 800d9f0:	40020010 	.word	0x40020010
 800d9f4:	40020028 	.word	0x40020028
 800d9f8:	40020040 	.word	0x40020040
 800d9fc:	40020058 	.word	0x40020058
 800da00:	40020070 	.word	0x40020070
 800da04:	40020088 	.word	0x40020088
 800da08:	400200a0 	.word	0x400200a0
 800da0c:	400200b8 	.word	0x400200b8
 800da10:	40020410 	.word	0x40020410
 800da14:	40020428 	.word	0x40020428
 800da18:	40020440 	.word	0x40020440
 800da1c:	40020458 	.word	0x40020458
 800da20:	40020470 	.word	0x40020470
 800da24:	40020488 	.word	0x40020488
 800da28:	400204a0 	.word	0x400204a0
 800da2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 020e 	bic.w	r2, r2, #14
 800da3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a6c      	ldr	r2, [pc, #432]	; (800dbf8 <HAL_DMA_Abort_IT+0x3a8>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d04a      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a6b      	ldr	r2, [pc, #428]	; (800dbfc <HAL_DMA_Abort_IT+0x3ac>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d045      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a69      	ldr	r2, [pc, #420]	; (800dc00 <HAL_DMA_Abort_IT+0x3b0>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d040      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a68      	ldr	r2, [pc, #416]	; (800dc04 <HAL_DMA_Abort_IT+0x3b4>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d03b      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a66      	ldr	r2, [pc, #408]	; (800dc08 <HAL_DMA_Abort_IT+0x3b8>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d036      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a65      	ldr	r2, [pc, #404]	; (800dc0c <HAL_DMA_Abort_IT+0x3bc>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d031      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a63      	ldr	r2, [pc, #396]	; (800dc10 <HAL_DMA_Abort_IT+0x3c0>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d02c      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a62      	ldr	r2, [pc, #392]	; (800dc14 <HAL_DMA_Abort_IT+0x3c4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d027      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a60      	ldr	r2, [pc, #384]	; (800dc18 <HAL_DMA_Abort_IT+0x3c8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d022      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a5f      	ldr	r2, [pc, #380]	; (800dc1c <HAL_DMA_Abort_IT+0x3cc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d01d      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a5d      	ldr	r2, [pc, #372]	; (800dc20 <HAL_DMA_Abort_IT+0x3d0>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d018      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a5c      	ldr	r2, [pc, #368]	; (800dc24 <HAL_DMA_Abort_IT+0x3d4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d013      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a5a      	ldr	r2, [pc, #360]	; (800dc28 <HAL_DMA_Abort_IT+0x3d8>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d00e      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a59      	ldr	r2, [pc, #356]	; (800dc2c <HAL_DMA_Abort_IT+0x3dc>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d009      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a57      	ldr	r2, [pc, #348]	; (800dc30 <HAL_DMA_Abort_IT+0x3e0>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d004      	beq.n	800dae0 <HAL_DMA_Abort_IT+0x290>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a56      	ldr	r2, [pc, #344]	; (800dc34 <HAL_DMA_Abort_IT+0x3e4>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d108      	bne.n	800daf2 <HAL_DMA_Abort_IT+0x2a2>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f022 0201 	bic.w	r2, r2, #1
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e007      	b.n	800db02 <HAL_DMA_Abort_IT+0x2b2>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f022 0201 	bic.w	r2, r2, #1
 800db00:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a3c      	ldr	r2, [pc, #240]	; (800dbf8 <HAL_DMA_Abort_IT+0x3a8>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d072      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a3a      	ldr	r2, [pc, #232]	; (800dbfc <HAL_DMA_Abort_IT+0x3ac>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d06d      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a39      	ldr	r2, [pc, #228]	; (800dc00 <HAL_DMA_Abort_IT+0x3b0>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d068      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a37      	ldr	r2, [pc, #220]	; (800dc04 <HAL_DMA_Abort_IT+0x3b4>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d063      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a36      	ldr	r2, [pc, #216]	; (800dc08 <HAL_DMA_Abort_IT+0x3b8>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d05e      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a34      	ldr	r2, [pc, #208]	; (800dc0c <HAL_DMA_Abort_IT+0x3bc>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d059      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a33      	ldr	r2, [pc, #204]	; (800dc10 <HAL_DMA_Abort_IT+0x3c0>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d054      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a31      	ldr	r2, [pc, #196]	; (800dc14 <HAL_DMA_Abort_IT+0x3c4>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d04f      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a30      	ldr	r2, [pc, #192]	; (800dc18 <HAL_DMA_Abort_IT+0x3c8>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d04a      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a2e      	ldr	r2, [pc, #184]	; (800dc1c <HAL_DMA_Abort_IT+0x3cc>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d045      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a2d      	ldr	r2, [pc, #180]	; (800dc20 <HAL_DMA_Abort_IT+0x3d0>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d040      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a2b      	ldr	r2, [pc, #172]	; (800dc24 <HAL_DMA_Abort_IT+0x3d4>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d03b      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a2a      	ldr	r2, [pc, #168]	; (800dc28 <HAL_DMA_Abort_IT+0x3d8>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d036      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a28      	ldr	r2, [pc, #160]	; (800dc2c <HAL_DMA_Abort_IT+0x3dc>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d031      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a27      	ldr	r2, [pc, #156]	; (800dc30 <HAL_DMA_Abort_IT+0x3e0>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d02c      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a25      	ldr	r2, [pc, #148]	; (800dc34 <HAL_DMA_Abort_IT+0x3e4>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d027      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a24      	ldr	r2, [pc, #144]	; (800dc38 <HAL_DMA_Abort_IT+0x3e8>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d022      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a22      	ldr	r2, [pc, #136]	; (800dc3c <HAL_DMA_Abort_IT+0x3ec>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d01d      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a21      	ldr	r2, [pc, #132]	; (800dc40 <HAL_DMA_Abort_IT+0x3f0>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d018      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a1f      	ldr	r2, [pc, #124]	; (800dc44 <HAL_DMA_Abort_IT+0x3f4>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d013      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a1e      	ldr	r2, [pc, #120]	; (800dc48 <HAL_DMA_Abort_IT+0x3f8>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d00e      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a1c      	ldr	r2, [pc, #112]	; (800dc4c <HAL_DMA_Abort_IT+0x3fc>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d009      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a1b      	ldr	r2, [pc, #108]	; (800dc50 <HAL_DMA_Abort_IT+0x400>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d004      	beq.n	800dbf2 <HAL_DMA_Abort_IT+0x3a2>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a19      	ldr	r2, [pc, #100]	; (800dc54 <HAL_DMA_Abort_IT+0x404>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d132      	bne.n	800dc58 <HAL_DMA_Abort_IT+0x408>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e031      	b.n	800dc5a <HAL_DMA_Abort_IT+0x40a>
 800dbf6:	bf00      	nop
 800dbf8:	40020010 	.word	0x40020010
 800dbfc:	40020028 	.word	0x40020028
 800dc00:	40020040 	.word	0x40020040
 800dc04:	40020058 	.word	0x40020058
 800dc08:	40020070 	.word	0x40020070
 800dc0c:	40020088 	.word	0x40020088
 800dc10:	400200a0 	.word	0x400200a0
 800dc14:	400200b8 	.word	0x400200b8
 800dc18:	40020410 	.word	0x40020410
 800dc1c:	40020428 	.word	0x40020428
 800dc20:	40020440 	.word	0x40020440
 800dc24:	40020458 	.word	0x40020458
 800dc28:	40020470 	.word	0x40020470
 800dc2c:	40020488 	.word	0x40020488
 800dc30:	400204a0 	.word	0x400204a0
 800dc34:	400204b8 	.word	0x400204b8
 800dc38:	58025408 	.word	0x58025408
 800dc3c:	5802541c 	.word	0x5802541c
 800dc40:	58025430 	.word	0x58025430
 800dc44:	58025444 	.word	0x58025444
 800dc48:	58025458 	.word	0x58025458
 800dc4c:	5802546c 	.word	0x5802546c
 800dc50:	58025480 	.word	0x58025480
 800dc54:	58025494 	.word	0x58025494
 800dc58:	2300      	movs	r3, #0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d028      	beq.n	800dcb0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc78:	f003 031f 	and.w	r3, r3, #31
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	409a      	lsls	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dc8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00c      	beq.n	800dcb0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dca4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dcae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d003      	beq.n	800dcd0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop

0800dcdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08a      	sub	sp, #40	; 0x28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800dce4:	2300      	movs	r3, #0
 800dce6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800dce8:	4b67      	ldr	r3, [pc, #412]	; (800de88 <HAL_DMA_IRQHandler+0x1ac>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a67      	ldr	r2, [pc, #412]	; (800de8c <HAL_DMA_IRQHandler+0x1b0>)
 800dcee:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf2:	0a9b      	lsrs	r3, r3, #10
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcfa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd00:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a5f      	ldr	r2, [pc, #380]	; (800de90 <HAL_DMA_IRQHandler+0x1b4>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d04a      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a5d      	ldr	r2, [pc, #372]	; (800de94 <HAL_DMA_IRQHandler+0x1b8>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d045      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a5c      	ldr	r2, [pc, #368]	; (800de98 <HAL_DMA_IRQHandler+0x1bc>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d040      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a5a      	ldr	r2, [pc, #360]	; (800de9c <HAL_DMA_IRQHandler+0x1c0>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d03b      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a59      	ldr	r2, [pc, #356]	; (800dea0 <HAL_DMA_IRQHandler+0x1c4>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d036      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a57      	ldr	r2, [pc, #348]	; (800dea4 <HAL_DMA_IRQHandler+0x1c8>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d031      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a56      	ldr	r2, [pc, #344]	; (800dea8 <HAL_DMA_IRQHandler+0x1cc>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d02c      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a54      	ldr	r2, [pc, #336]	; (800deac <HAL_DMA_IRQHandler+0x1d0>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d027      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a53      	ldr	r2, [pc, #332]	; (800deb0 <HAL_DMA_IRQHandler+0x1d4>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d022      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a51      	ldr	r2, [pc, #324]	; (800deb4 <HAL_DMA_IRQHandler+0x1d8>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d01d      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a50      	ldr	r2, [pc, #320]	; (800deb8 <HAL_DMA_IRQHandler+0x1dc>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d018      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a4e      	ldr	r2, [pc, #312]	; (800debc <HAL_DMA_IRQHandler+0x1e0>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d013      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a4d      	ldr	r2, [pc, #308]	; (800dec0 <HAL_DMA_IRQHandler+0x1e4>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00e      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a4b      	ldr	r2, [pc, #300]	; (800dec4 <HAL_DMA_IRQHandler+0x1e8>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d009      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a4a      	ldr	r2, [pc, #296]	; (800dec8 <HAL_DMA_IRQHandler+0x1ec>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d004      	beq.n	800ddae <HAL_DMA_IRQHandler+0xd2>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a48      	ldr	r2, [pc, #288]	; (800decc <HAL_DMA_IRQHandler+0x1f0>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d101      	bne.n	800ddb2 <HAL_DMA_IRQHandler+0xd6>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e000      	b.n	800ddb4 <HAL_DMA_IRQHandler+0xd8>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 842b 	beq.w	800e610 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddbe:	f003 031f 	and.w	r3, r3, #31
 800ddc2:	2208      	movs	r2, #8
 800ddc4:	409a      	lsls	r2, r3
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	4013      	ands	r3, r2
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 80a2 	beq.w	800df14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a2e      	ldr	r2, [pc, #184]	; (800de90 <HAL_DMA_IRQHandler+0x1b4>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d04a      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a2d      	ldr	r2, [pc, #180]	; (800de94 <HAL_DMA_IRQHandler+0x1b8>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d045      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a2b      	ldr	r2, [pc, #172]	; (800de98 <HAL_DMA_IRQHandler+0x1bc>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d040      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a2a      	ldr	r2, [pc, #168]	; (800de9c <HAL_DMA_IRQHandler+0x1c0>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d03b      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a28      	ldr	r2, [pc, #160]	; (800dea0 <HAL_DMA_IRQHandler+0x1c4>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d036      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a27      	ldr	r2, [pc, #156]	; (800dea4 <HAL_DMA_IRQHandler+0x1c8>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d031      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a25      	ldr	r2, [pc, #148]	; (800dea8 <HAL_DMA_IRQHandler+0x1cc>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d02c      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a24      	ldr	r2, [pc, #144]	; (800deac <HAL_DMA_IRQHandler+0x1d0>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d027      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a22      	ldr	r2, [pc, #136]	; (800deb0 <HAL_DMA_IRQHandler+0x1d4>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d022      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a21      	ldr	r2, [pc, #132]	; (800deb4 <HAL_DMA_IRQHandler+0x1d8>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d01d      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a1f      	ldr	r2, [pc, #124]	; (800deb8 <HAL_DMA_IRQHandler+0x1dc>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d018      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a1e      	ldr	r2, [pc, #120]	; (800debc <HAL_DMA_IRQHandler+0x1e0>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d013      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a1c      	ldr	r2, [pc, #112]	; (800dec0 <HAL_DMA_IRQHandler+0x1e4>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d00e      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a1b      	ldr	r2, [pc, #108]	; (800dec4 <HAL_DMA_IRQHandler+0x1e8>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d009      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a19      	ldr	r2, [pc, #100]	; (800dec8 <HAL_DMA_IRQHandler+0x1ec>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d004      	beq.n	800de70 <HAL_DMA_IRQHandler+0x194>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a18      	ldr	r2, [pc, #96]	; (800decc <HAL_DMA_IRQHandler+0x1f0>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d12f      	bne.n	800ded0 <HAL_DMA_IRQHandler+0x1f4>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 0304 	and.w	r3, r3, #4
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	bf14      	ite	ne
 800de7e:	2301      	movne	r3, #1
 800de80:	2300      	moveq	r3, #0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	e02e      	b.n	800dee4 <HAL_DMA_IRQHandler+0x208>
 800de86:	bf00      	nop
 800de88:	24000000 	.word	0x24000000
 800de8c:	1b4e81b5 	.word	0x1b4e81b5
 800de90:	40020010 	.word	0x40020010
 800de94:	40020028 	.word	0x40020028
 800de98:	40020040 	.word	0x40020040
 800de9c:	40020058 	.word	0x40020058
 800dea0:	40020070 	.word	0x40020070
 800dea4:	40020088 	.word	0x40020088
 800dea8:	400200a0 	.word	0x400200a0
 800deac:	400200b8 	.word	0x400200b8
 800deb0:	40020410 	.word	0x40020410
 800deb4:	40020428 	.word	0x40020428
 800deb8:	40020440 	.word	0x40020440
 800debc:	40020458 	.word	0x40020458
 800dec0:	40020470 	.word	0x40020470
 800dec4:	40020488 	.word	0x40020488
 800dec8:	400204a0 	.word	0x400204a0
 800decc:	400204b8 	.word	0x400204b8
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0308 	and.w	r3, r3, #8
 800deda:	2b00      	cmp	r3, #0
 800dedc:	bf14      	ite	ne
 800dede:	2301      	movne	r3, #1
 800dee0:	2300      	moveq	r3, #0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d015      	beq.n	800df14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f022 0204 	bic.w	r2, r2, #4
 800def6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800defc:	f003 031f 	and.w	r3, r3, #31
 800df00:	2208      	movs	r2, #8
 800df02:	409a      	lsls	r2, r3
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df0c:	f043 0201 	orr.w	r2, r3, #1
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df18:	f003 031f 	and.w	r3, r3, #31
 800df1c:	69ba      	ldr	r2, [r7, #24]
 800df1e:	fa22 f303 	lsr.w	r3, r2, r3
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	d06e      	beq.n	800e008 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a69      	ldr	r2, [pc, #420]	; (800e0d4 <HAL_DMA_IRQHandler+0x3f8>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d04a      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a67      	ldr	r2, [pc, #412]	; (800e0d8 <HAL_DMA_IRQHandler+0x3fc>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d045      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a66      	ldr	r2, [pc, #408]	; (800e0dc <HAL_DMA_IRQHandler+0x400>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d040      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a64      	ldr	r2, [pc, #400]	; (800e0e0 <HAL_DMA_IRQHandler+0x404>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d03b      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a63      	ldr	r2, [pc, #396]	; (800e0e4 <HAL_DMA_IRQHandler+0x408>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d036      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a61      	ldr	r2, [pc, #388]	; (800e0e8 <HAL_DMA_IRQHandler+0x40c>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d031      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a60      	ldr	r2, [pc, #384]	; (800e0ec <HAL_DMA_IRQHandler+0x410>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d02c      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a5e      	ldr	r2, [pc, #376]	; (800e0f0 <HAL_DMA_IRQHandler+0x414>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d027      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a5d      	ldr	r2, [pc, #372]	; (800e0f4 <HAL_DMA_IRQHandler+0x418>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d022      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a5b      	ldr	r2, [pc, #364]	; (800e0f8 <HAL_DMA_IRQHandler+0x41c>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d01d      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a5a      	ldr	r2, [pc, #360]	; (800e0fc <HAL_DMA_IRQHandler+0x420>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d018      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a58      	ldr	r2, [pc, #352]	; (800e100 <HAL_DMA_IRQHandler+0x424>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d013      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a57      	ldr	r2, [pc, #348]	; (800e104 <HAL_DMA_IRQHandler+0x428>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d00e      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a55      	ldr	r2, [pc, #340]	; (800e108 <HAL_DMA_IRQHandler+0x42c>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d009      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a54      	ldr	r2, [pc, #336]	; (800e10c <HAL_DMA_IRQHandler+0x430>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d004      	beq.n	800dfca <HAL_DMA_IRQHandler+0x2ee>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a52      	ldr	r2, [pc, #328]	; (800e110 <HAL_DMA_IRQHandler+0x434>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d10a      	bne.n	800dfe0 <HAL_DMA_IRQHandler+0x304>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bf14      	ite	ne
 800dfd8:	2301      	movne	r3, #1
 800dfda:	2300      	moveq	r3, #0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	e003      	b.n	800dfe8 <HAL_DMA_IRQHandler+0x30c>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00d      	beq.n	800e008 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dff0:	f003 031f 	and.w	r3, r3, #31
 800dff4:	2201      	movs	r2, #1
 800dff6:	409a      	lsls	r2, r3
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e000:	f043 0202 	orr.w	r2, r3, #2
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e00c:	f003 031f 	and.w	r3, r3, #31
 800e010:	2204      	movs	r2, #4
 800e012:	409a      	lsls	r2, r3
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	4013      	ands	r3, r2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 808f 	beq.w	800e13c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a2c      	ldr	r2, [pc, #176]	; (800e0d4 <HAL_DMA_IRQHandler+0x3f8>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d04a      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a2a      	ldr	r2, [pc, #168]	; (800e0d8 <HAL_DMA_IRQHandler+0x3fc>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d045      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a29      	ldr	r2, [pc, #164]	; (800e0dc <HAL_DMA_IRQHandler+0x400>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d040      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a27      	ldr	r2, [pc, #156]	; (800e0e0 <HAL_DMA_IRQHandler+0x404>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d03b      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a26      	ldr	r2, [pc, #152]	; (800e0e4 <HAL_DMA_IRQHandler+0x408>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d036      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a24      	ldr	r2, [pc, #144]	; (800e0e8 <HAL_DMA_IRQHandler+0x40c>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d031      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a23      	ldr	r2, [pc, #140]	; (800e0ec <HAL_DMA_IRQHandler+0x410>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d02c      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a21      	ldr	r2, [pc, #132]	; (800e0f0 <HAL_DMA_IRQHandler+0x414>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d027      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a20      	ldr	r2, [pc, #128]	; (800e0f4 <HAL_DMA_IRQHandler+0x418>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d022      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a1e      	ldr	r2, [pc, #120]	; (800e0f8 <HAL_DMA_IRQHandler+0x41c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d01d      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a1d      	ldr	r2, [pc, #116]	; (800e0fc <HAL_DMA_IRQHandler+0x420>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d018      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a1b      	ldr	r2, [pc, #108]	; (800e100 <HAL_DMA_IRQHandler+0x424>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d013      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a1a      	ldr	r2, [pc, #104]	; (800e104 <HAL_DMA_IRQHandler+0x428>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d00e      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a18      	ldr	r2, [pc, #96]	; (800e108 <HAL_DMA_IRQHandler+0x42c>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d009      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a17      	ldr	r2, [pc, #92]	; (800e10c <HAL_DMA_IRQHandler+0x430>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d004      	beq.n	800e0be <HAL_DMA_IRQHandler+0x3e2>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a15      	ldr	r2, [pc, #84]	; (800e110 <HAL_DMA_IRQHandler+0x434>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d12a      	bne.n	800e114 <HAL_DMA_IRQHandler+0x438>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0302 	and.w	r3, r3, #2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bf14      	ite	ne
 800e0cc:	2301      	movne	r3, #1
 800e0ce:	2300      	moveq	r3, #0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	e023      	b.n	800e11c <HAL_DMA_IRQHandler+0x440>
 800e0d4:	40020010 	.word	0x40020010
 800e0d8:	40020028 	.word	0x40020028
 800e0dc:	40020040 	.word	0x40020040
 800e0e0:	40020058 	.word	0x40020058
 800e0e4:	40020070 	.word	0x40020070
 800e0e8:	40020088 	.word	0x40020088
 800e0ec:	400200a0 	.word	0x400200a0
 800e0f0:	400200b8 	.word	0x400200b8
 800e0f4:	40020410 	.word	0x40020410
 800e0f8:	40020428 	.word	0x40020428
 800e0fc:	40020440 	.word	0x40020440
 800e100:	40020458 	.word	0x40020458
 800e104:	40020470 	.word	0x40020470
 800e108:	40020488 	.word	0x40020488
 800e10c:	400204a0 	.word	0x400204a0
 800e110:	400204b8 	.word	0x400204b8
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2300      	movs	r3, #0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00d      	beq.n	800e13c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e124:	f003 031f 	and.w	r3, r3, #31
 800e128:	2204      	movs	r2, #4
 800e12a:	409a      	lsls	r2, r3
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e134:	f043 0204 	orr.w	r2, r3, #4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e140:	f003 031f 	and.w	r3, r3, #31
 800e144:	2210      	movs	r2, #16
 800e146:	409a      	lsls	r2, r3
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	4013      	ands	r3, r2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 80a6 	beq.w	800e29e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a85      	ldr	r2, [pc, #532]	; (800e36c <HAL_DMA_IRQHandler+0x690>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d04a      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a83      	ldr	r2, [pc, #524]	; (800e370 <HAL_DMA_IRQHandler+0x694>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d045      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a82      	ldr	r2, [pc, #520]	; (800e374 <HAL_DMA_IRQHandler+0x698>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d040      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a80      	ldr	r2, [pc, #512]	; (800e378 <HAL_DMA_IRQHandler+0x69c>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d03b      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a7f      	ldr	r2, [pc, #508]	; (800e37c <HAL_DMA_IRQHandler+0x6a0>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d036      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a7d      	ldr	r2, [pc, #500]	; (800e380 <HAL_DMA_IRQHandler+0x6a4>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d031      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a7c      	ldr	r2, [pc, #496]	; (800e384 <HAL_DMA_IRQHandler+0x6a8>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d02c      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a7a      	ldr	r2, [pc, #488]	; (800e388 <HAL_DMA_IRQHandler+0x6ac>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d027      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a79      	ldr	r2, [pc, #484]	; (800e38c <HAL_DMA_IRQHandler+0x6b0>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d022      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a77      	ldr	r2, [pc, #476]	; (800e390 <HAL_DMA_IRQHandler+0x6b4>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d01d      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a76      	ldr	r2, [pc, #472]	; (800e394 <HAL_DMA_IRQHandler+0x6b8>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d018      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a74      	ldr	r2, [pc, #464]	; (800e398 <HAL_DMA_IRQHandler+0x6bc>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d013      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a73      	ldr	r2, [pc, #460]	; (800e39c <HAL_DMA_IRQHandler+0x6c0>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00e      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a71      	ldr	r2, [pc, #452]	; (800e3a0 <HAL_DMA_IRQHandler+0x6c4>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d009      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a70      	ldr	r2, [pc, #448]	; (800e3a4 <HAL_DMA_IRQHandler+0x6c8>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d004      	beq.n	800e1f2 <HAL_DMA_IRQHandler+0x516>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a6e      	ldr	r2, [pc, #440]	; (800e3a8 <HAL_DMA_IRQHandler+0x6cc>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d10a      	bne.n	800e208 <HAL_DMA_IRQHandler+0x52c>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	e009      	b.n	800e21c <HAL_DMA_IRQHandler+0x540>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	2b00      	cmp	r3, #0
 800e214:	bf14      	ite	ne
 800e216:	2301      	movne	r3, #1
 800e218:	2300      	moveq	r3, #0
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d03e      	beq.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e224:	f003 031f 	and.w	r3, r3, #31
 800e228:	2210      	movs	r2, #16
 800e22a:	409a      	lsls	r2, r3
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d018      	beq.n	800e270 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d108      	bne.n	800e25e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e250:	2b00      	cmp	r3, #0
 800e252:	d024      	beq.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	4798      	blx	r3
 800e25c:	e01f      	b.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e262:	2b00      	cmp	r3, #0
 800e264:	d01b      	beq.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
 800e26e:	e016      	b.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d107      	bne.n	800e28e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f022 0208 	bic.w	r2, r2, #8
 800e28c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2a2:	f003 031f 	and.w	r3, r3, #31
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	409a      	lsls	r2, r3
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 8110 	beq.w	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a2c      	ldr	r2, [pc, #176]	; (800e36c <HAL_DMA_IRQHandler+0x690>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d04a      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a2b      	ldr	r2, [pc, #172]	; (800e370 <HAL_DMA_IRQHandler+0x694>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d045      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a29      	ldr	r2, [pc, #164]	; (800e374 <HAL_DMA_IRQHandler+0x698>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d040      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a28      	ldr	r2, [pc, #160]	; (800e378 <HAL_DMA_IRQHandler+0x69c>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d03b      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a26      	ldr	r2, [pc, #152]	; (800e37c <HAL_DMA_IRQHandler+0x6a0>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d036      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a25      	ldr	r2, [pc, #148]	; (800e380 <HAL_DMA_IRQHandler+0x6a4>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d031      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a23      	ldr	r2, [pc, #140]	; (800e384 <HAL_DMA_IRQHandler+0x6a8>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d02c      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a22      	ldr	r2, [pc, #136]	; (800e388 <HAL_DMA_IRQHandler+0x6ac>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d027      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a20      	ldr	r2, [pc, #128]	; (800e38c <HAL_DMA_IRQHandler+0x6b0>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d022      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a1f      	ldr	r2, [pc, #124]	; (800e390 <HAL_DMA_IRQHandler+0x6b4>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d01d      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a1d      	ldr	r2, [pc, #116]	; (800e394 <HAL_DMA_IRQHandler+0x6b8>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d018      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a1c      	ldr	r2, [pc, #112]	; (800e398 <HAL_DMA_IRQHandler+0x6bc>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d013      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a1a      	ldr	r2, [pc, #104]	; (800e39c <HAL_DMA_IRQHandler+0x6c0>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d00e      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a19      	ldr	r2, [pc, #100]	; (800e3a0 <HAL_DMA_IRQHandler+0x6c4>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d009      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a17      	ldr	r2, [pc, #92]	; (800e3a4 <HAL_DMA_IRQHandler+0x6c8>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d004      	beq.n	800e354 <HAL_DMA_IRQHandler+0x678>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a16      	ldr	r2, [pc, #88]	; (800e3a8 <HAL_DMA_IRQHandler+0x6cc>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d12b      	bne.n	800e3ac <HAL_DMA_IRQHandler+0x6d0>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f003 0310 	and.w	r3, r3, #16
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bf14      	ite	ne
 800e362:	2301      	movne	r3, #1
 800e364:	2300      	moveq	r3, #0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	e02a      	b.n	800e3c0 <HAL_DMA_IRQHandler+0x6e4>
 800e36a:	bf00      	nop
 800e36c:	40020010 	.word	0x40020010
 800e370:	40020028 	.word	0x40020028
 800e374:	40020040 	.word	0x40020040
 800e378:	40020058 	.word	0x40020058
 800e37c:	40020070 	.word	0x40020070
 800e380:	40020088 	.word	0x40020088
 800e384:	400200a0 	.word	0x400200a0
 800e388:	400200b8 	.word	0x400200b8
 800e38c:	40020410 	.word	0x40020410
 800e390:	40020428 	.word	0x40020428
 800e394:	40020440 	.word	0x40020440
 800e398:	40020458 	.word	0x40020458
 800e39c:	40020470 	.word	0x40020470
 800e3a0:	40020488 	.word	0x40020488
 800e3a4:	400204a0 	.word	0x400204a0
 800e3a8:	400204b8 	.word	0x400204b8
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 0302 	and.w	r3, r3, #2
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	bf14      	ite	ne
 800e3ba:	2301      	movne	r3, #1
 800e3bc:	2300      	moveq	r3, #0
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 8087 	beq.w	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3ca:	f003 031f 	and.w	r3, r3, #31
 800e3ce:	2220      	movs	r2, #32
 800e3d0:	409a      	lsls	r2, r3
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b04      	cmp	r3, #4
 800e3e0:	d139      	bne.n	800e456 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f022 0216 	bic.w	r2, r2, #22
 800e3f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	695a      	ldr	r2, [r3, #20]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e400:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e406:	2b00      	cmp	r3, #0
 800e408:	d103      	bne.n	800e412 <HAL_DMA_IRQHandler+0x736>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d007      	beq.n	800e422 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f022 0208 	bic.w	r2, r2, #8
 800e420:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e426:	f003 031f 	and.w	r3, r3, #31
 800e42a:	223f      	movs	r2, #63	; 0x3f
 800e42c:	409a      	lsls	r2, r3
 800e42e:	6a3b      	ldr	r3, [r7, #32]
 800e430:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 834a 	beq.w	800eae0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	4798      	blx	r3
          }
          return;
 800e454:	e344      	b.n	800eae0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d018      	beq.n	800e496 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d108      	bne.n	800e484 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e476:	2b00      	cmp	r3, #0
 800e478:	d02c      	beq.n	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	4798      	blx	r3
 800e482:	e027      	b.n	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d023      	beq.n	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	4798      	blx	r3
 800e494:	e01e      	b.n	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10f      	bne.n	800e4c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f022 0210 	bic.w	r2, r2, #16
 800e4b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d003      	beq.n	800e4d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 8306 	beq.w	800eaea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 8088 	beq.w	800e5fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2204      	movs	r2, #4
 800e4f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a7a      	ldr	r2, [pc, #488]	; (800e6e4 <HAL_DMA_IRQHandler+0xa08>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d04a      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a79      	ldr	r2, [pc, #484]	; (800e6e8 <HAL_DMA_IRQHandler+0xa0c>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d045      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a77      	ldr	r2, [pc, #476]	; (800e6ec <HAL_DMA_IRQHandler+0xa10>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d040      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a76      	ldr	r2, [pc, #472]	; (800e6f0 <HAL_DMA_IRQHandler+0xa14>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d03b      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a74      	ldr	r2, [pc, #464]	; (800e6f4 <HAL_DMA_IRQHandler+0xa18>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d036      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a73      	ldr	r2, [pc, #460]	; (800e6f8 <HAL_DMA_IRQHandler+0xa1c>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d031      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a71      	ldr	r2, [pc, #452]	; (800e6fc <HAL_DMA_IRQHandler+0xa20>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d02c      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a70      	ldr	r2, [pc, #448]	; (800e700 <HAL_DMA_IRQHandler+0xa24>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d027      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a6e      	ldr	r2, [pc, #440]	; (800e704 <HAL_DMA_IRQHandler+0xa28>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d022      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a6d      	ldr	r2, [pc, #436]	; (800e708 <HAL_DMA_IRQHandler+0xa2c>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d01d      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a6b      	ldr	r2, [pc, #428]	; (800e70c <HAL_DMA_IRQHandler+0xa30>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d018      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a6a      	ldr	r2, [pc, #424]	; (800e710 <HAL_DMA_IRQHandler+0xa34>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d013      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a68      	ldr	r2, [pc, #416]	; (800e714 <HAL_DMA_IRQHandler+0xa38>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d00e      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a67      	ldr	r2, [pc, #412]	; (800e718 <HAL_DMA_IRQHandler+0xa3c>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d009      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a65      	ldr	r2, [pc, #404]	; (800e71c <HAL_DMA_IRQHandler+0xa40>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d004      	beq.n	800e594 <HAL_DMA_IRQHandler+0x8b8>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a64      	ldr	r2, [pc, #400]	; (800e720 <HAL_DMA_IRQHandler+0xa44>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d108      	bne.n	800e5a6 <HAL_DMA_IRQHandler+0x8ca>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f022 0201 	bic.w	r2, r2, #1
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	e007      	b.n	800e5b6 <HAL_DMA_IRQHandler+0x8da>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f022 0201 	bic.w	r2, r2, #1
 800e5b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d307      	bcc.n	800e5d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1f2      	bne.n	800e5b6 <HAL_DMA_IRQHandler+0x8da>
 800e5d0:	e000      	b.n	800e5d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800e5d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2203      	movs	r2, #3
 800e5e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800e5ea:	e003      	b.n	800e5f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 8272 	beq.w	800eaea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	4798      	blx	r3
 800e60e:	e26c      	b.n	800eaea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a43      	ldr	r2, [pc, #268]	; (800e724 <HAL_DMA_IRQHandler+0xa48>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d022      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a42      	ldr	r2, [pc, #264]	; (800e728 <HAL_DMA_IRQHandler+0xa4c>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d01d      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a40      	ldr	r2, [pc, #256]	; (800e72c <HAL_DMA_IRQHandler+0xa50>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d018      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a3f      	ldr	r2, [pc, #252]	; (800e730 <HAL_DMA_IRQHandler+0xa54>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d013      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a3d      	ldr	r2, [pc, #244]	; (800e734 <HAL_DMA_IRQHandler+0xa58>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d00e      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a3c      	ldr	r2, [pc, #240]	; (800e738 <HAL_DMA_IRQHandler+0xa5c>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d009      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a3a      	ldr	r2, [pc, #232]	; (800e73c <HAL_DMA_IRQHandler+0xa60>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d004      	beq.n	800e660 <HAL_DMA_IRQHandler+0x984>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a39      	ldr	r2, [pc, #228]	; (800e740 <HAL_DMA_IRQHandler+0xa64>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d101      	bne.n	800e664 <HAL_DMA_IRQHandler+0x988>
 800e660:	2301      	movs	r3, #1
 800e662:	e000      	b.n	800e666 <HAL_DMA_IRQHandler+0x98a>
 800e664:	2300      	movs	r3, #0
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 823f 	beq.w	800eaea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e678:	f003 031f 	and.w	r3, r3, #31
 800e67c:	2204      	movs	r2, #4
 800e67e:	409a      	lsls	r2, r3
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	4013      	ands	r3, r2
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 80cd 	beq.w	800e824 <HAL_DMA_IRQHandler+0xb48>
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	f003 0304 	and.w	r3, r3, #4
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 80c7 	beq.w	800e824 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e69a:	f003 031f 	and.w	r3, r3, #31
 800e69e:	2204      	movs	r2, #4
 800e6a0:	409a      	lsls	r2, r3
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d049      	beq.n	800e744 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f000 8210 	beq.w	800eae4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e6cc:	e20a      	b.n	800eae4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 8206 	beq.w	800eae4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e6e0:	e200      	b.n	800eae4 <HAL_DMA_IRQHandler+0xe08>
 800e6e2:	bf00      	nop
 800e6e4:	40020010 	.word	0x40020010
 800e6e8:	40020028 	.word	0x40020028
 800e6ec:	40020040 	.word	0x40020040
 800e6f0:	40020058 	.word	0x40020058
 800e6f4:	40020070 	.word	0x40020070
 800e6f8:	40020088 	.word	0x40020088
 800e6fc:	400200a0 	.word	0x400200a0
 800e700:	400200b8 	.word	0x400200b8
 800e704:	40020410 	.word	0x40020410
 800e708:	40020428 	.word	0x40020428
 800e70c:	40020440 	.word	0x40020440
 800e710:	40020458 	.word	0x40020458
 800e714:	40020470 	.word	0x40020470
 800e718:	40020488 	.word	0x40020488
 800e71c:	400204a0 	.word	0x400204a0
 800e720:	400204b8 	.word	0x400204b8
 800e724:	58025408 	.word	0x58025408
 800e728:	5802541c 	.word	0x5802541c
 800e72c:	58025430 	.word	0x58025430
 800e730:	58025444 	.word	0x58025444
 800e734:	58025458 	.word	0x58025458
 800e738:	5802546c 	.word	0x5802546c
 800e73c:	58025480 	.word	0x58025480
 800e740:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f003 0320 	and.w	r3, r3, #32
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d160      	bne.n	800e810 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a7f      	ldr	r2, [pc, #508]	; (800e950 <HAL_DMA_IRQHandler+0xc74>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d04a      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a7d      	ldr	r2, [pc, #500]	; (800e954 <HAL_DMA_IRQHandler+0xc78>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d045      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a7c      	ldr	r2, [pc, #496]	; (800e958 <HAL_DMA_IRQHandler+0xc7c>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d040      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a7a      	ldr	r2, [pc, #488]	; (800e95c <HAL_DMA_IRQHandler+0xc80>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d03b      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a79      	ldr	r2, [pc, #484]	; (800e960 <HAL_DMA_IRQHandler+0xc84>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d036      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a77      	ldr	r2, [pc, #476]	; (800e964 <HAL_DMA_IRQHandler+0xc88>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d031      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a76      	ldr	r2, [pc, #472]	; (800e968 <HAL_DMA_IRQHandler+0xc8c>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d02c      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a74      	ldr	r2, [pc, #464]	; (800e96c <HAL_DMA_IRQHandler+0xc90>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d027      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4a73      	ldr	r2, [pc, #460]	; (800e970 <HAL_DMA_IRQHandler+0xc94>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d022      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a71      	ldr	r2, [pc, #452]	; (800e974 <HAL_DMA_IRQHandler+0xc98>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d01d      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a70      	ldr	r2, [pc, #448]	; (800e978 <HAL_DMA_IRQHandler+0xc9c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d018      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a6e      	ldr	r2, [pc, #440]	; (800e97c <HAL_DMA_IRQHandler+0xca0>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d013      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a6d      	ldr	r2, [pc, #436]	; (800e980 <HAL_DMA_IRQHandler+0xca4>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d00e      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a6b      	ldr	r2, [pc, #428]	; (800e984 <HAL_DMA_IRQHandler+0xca8>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d009      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a6a      	ldr	r2, [pc, #424]	; (800e988 <HAL_DMA_IRQHandler+0xcac>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d004      	beq.n	800e7ee <HAL_DMA_IRQHandler+0xb12>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a68      	ldr	r2, [pc, #416]	; (800e98c <HAL_DMA_IRQHandler+0xcb0>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d108      	bne.n	800e800 <HAL_DMA_IRQHandler+0xb24>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 0208 	bic.w	r2, r2, #8
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e007      	b.n	800e810 <HAL_DMA_IRQHandler+0xb34>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f022 0204 	bic.w	r2, r2, #4
 800e80e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 8165 	beq.w	800eae4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e822:	e15f      	b.n	800eae4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e828:	f003 031f 	and.w	r3, r3, #31
 800e82c:	2202      	movs	r2, #2
 800e82e:	409a      	lsls	r2, r3
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	4013      	ands	r3, r2
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 80c5 	beq.w	800e9c4 <HAL_DMA_IRQHandler+0xce8>
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 80bf 	beq.w	800e9c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e84a:	f003 031f 	and.w	r3, r3, #31
 800e84e:	2202      	movs	r2, #2
 800e850:	409a      	lsls	r2, r3
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d018      	beq.n	800e892 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e866:	2b00      	cmp	r3, #0
 800e868:	d109      	bne.n	800e87e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 813a 	beq.w	800eae8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e87c:	e134      	b.n	800eae8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e882:	2b00      	cmp	r3, #0
 800e884:	f000 8130 	beq.w	800eae8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e890:	e12a      	b.n	800eae8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	f003 0320 	and.w	r3, r3, #32
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f040 8089 	bne.w	800e9b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a2b      	ldr	r2, [pc, #172]	; (800e950 <HAL_DMA_IRQHandler+0xc74>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d04a      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a29      	ldr	r2, [pc, #164]	; (800e954 <HAL_DMA_IRQHandler+0xc78>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d045      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a28      	ldr	r2, [pc, #160]	; (800e958 <HAL_DMA_IRQHandler+0xc7c>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d040      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a26      	ldr	r2, [pc, #152]	; (800e95c <HAL_DMA_IRQHandler+0xc80>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d03b      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a25      	ldr	r2, [pc, #148]	; (800e960 <HAL_DMA_IRQHandler+0xc84>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d036      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a23      	ldr	r2, [pc, #140]	; (800e964 <HAL_DMA_IRQHandler+0xc88>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d031      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a22      	ldr	r2, [pc, #136]	; (800e968 <HAL_DMA_IRQHandler+0xc8c>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d02c      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a20      	ldr	r2, [pc, #128]	; (800e96c <HAL_DMA_IRQHandler+0xc90>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d027      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <HAL_DMA_IRQHandler+0xc94>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d022      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a1d      	ldr	r2, [pc, #116]	; (800e974 <HAL_DMA_IRQHandler+0xc98>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d01d      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a1c      	ldr	r2, [pc, #112]	; (800e978 <HAL_DMA_IRQHandler+0xc9c>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d018      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a1a      	ldr	r2, [pc, #104]	; (800e97c <HAL_DMA_IRQHandler+0xca0>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d013      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a19      	ldr	r2, [pc, #100]	; (800e980 <HAL_DMA_IRQHandler+0xca4>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00e      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a17      	ldr	r2, [pc, #92]	; (800e984 <HAL_DMA_IRQHandler+0xca8>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d009      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a16      	ldr	r2, [pc, #88]	; (800e988 <HAL_DMA_IRQHandler+0xcac>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d004      	beq.n	800e93e <HAL_DMA_IRQHandler+0xc62>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a14      	ldr	r2, [pc, #80]	; (800e98c <HAL_DMA_IRQHandler+0xcb0>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d128      	bne.n	800e990 <HAL_DMA_IRQHandler+0xcb4>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 0214 	bic.w	r2, r2, #20
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e027      	b.n	800e9a0 <HAL_DMA_IRQHandler+0xcc4>
 800e950:	40020010 	.word	0x40020010
 800e954:	40020028 	.word	0x40020028
 800e958:	40020040 	.word	0x40020040
 800e95c:	40020058 	.word	0x40020058
 800e960:	40020070 	.word	0x40020070
 800e964:	40020088 	.word	0x40020088
 800e968:	400200a0 	.word	0x400200a0
 800e96c:	400200b8 	.word	0x400200b8
 800e970:	40020410 	.word	0x40020410
 800e974:	40020428 	.word	0x40020428
 800e978:	40020440 	.word	0x40020440
 800e97c:	40020458 	.word	0x40020458
 800e980:	40020470 	.word	0x40020470
 800e984:	40020488 	.word	0x40020488
 800e988:	400204a0 	.word	0x400204a0
 800e98c:	400204b8 	.word	0x400204b8
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f022 020a 	bic.w	r2, r2, #10
 800e99e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f000 8097 	beq.w	800eae8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e9c2:	e091      	b.n	800eae8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9c8:	f003 031f 	and.w	r3, r3, #31
 800e9cc:	2208      	movs	r2, #8
 800e9ce:	409a      	lsls	r2, r3
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 8088 	beq.w	800eaea <HAL_DMA_IRQHandler+0xe0e>
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f003 0308 	and.w	r3, r3, #8
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 8082 	beq.w	800eaea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a41      	ldr	r2, [pc, #260]	; (800eaf0 <HAL_DMA_IRQHandler+0xe14>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d04a      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a3f      	ldr	r2, [pc, #252]	; (800eaf4 <HAL_DMA_IRQHandler+0xe18>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d045      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a3e      	ldr	r2, [pc, #248]	; (800eaf8 <HAL_DMA_IRQHandler+0xe1c>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d040      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a3c      	ldr	r2, [pc, #240]	; (800eafc <HAL_DMA_IRQHandler+0xe20>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d03b      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a3b      	ldr	r2, [pc, #236]	; (800eb00 <HAL_DMA_IRQHandler+0xe24>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d036      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a39      	ldr	r2, [pc, #228]	; (800eb04 <HAL_DMA_IRQHandler+0xe28>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d031      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a38      	ldr	r2, [pc, #224]	; (800eb08 <HAL_DMA_IRQHandler+0xe2c>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d02c      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a36      	ldr	r2, [pc, #216]	; (800eb0c <HAL_DMA_IRQHandler+0xe30>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d027      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a35      	ldr	r2, [pc, #212]	; (800eb10 <HAL_DMA_IRQHandler+0xe34>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d022      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a33      	ldr	r2, [pc, #204]	; (800eb14 <HAL_DMA_IRQHandler+0xe38>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d01d      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a32      	ldr	r2, [pc, #200]	; (800eb18 <HAL_DMA_IRQHandler+0xe3c>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d018      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a30      	ldr	r2, [pc, #192]	; (800eb1c <HAL_DMA_IRQHandler+0xe40>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d013      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a2f      	ldr	r2, [pc, #188]	; (800eb20 <HAL_DMA_IRQHandler+0xe44>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d00e      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a2d      	ldr	r2, [pc, #180]	; (800eb24 <HAL_DMA_IRQHandler+0xe48>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d009      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a2c      	ldr	r2, [pc, #176]	; (800eb28 <HAL_DMA_IRQHandler+0xe4c>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d004      	beq.n	800ea86 <HAL_DMA_IRQHandler+0xdaa>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a2a      	ldr	r2, [pc, #168]	; (800eb2c <HAL_DMA_IRQHandler+0xe50>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d108      	bne.n	800ea98 <HAL_DMA_IRQHandler+0xdbc>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f022 021c 	bic.w	r2, r2, #28
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	e007      	b.n	800eaa8 <HAL_DMA_IRQHandler+0xdcc>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f022 020e 	bic.w	r2, r2, #14
 800eaa6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaac:	f003 031f 	and.w	r3, r3, #31
 800eab0:	2201      	movs	r2, #1
 800eab2:	409a      	lsls	r2, r3
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d009      	beq.n	800eaea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	4798      	blx	r3
 800eade:	e004      	b.n	800eaea <HAL_DMA_IRQHandler+0xe0e>
          return;
 800eae0:	bf00      	nop
 800eae2:	e002      	b.n	800eaea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eae4:	bf00      	nop
 800eae6:	e000      	b.n	800eaea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800eae8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800eaea:	3728      	adds	r7, #40	; 0x28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	40020010 	.word	0x40020010
 800eaf4:	40020028 	.word	0x40020028
 800eaf8:	40020040 	.word	0x40020040
 800eafc:	40020058 	.word	0x40020058
 800eb00:	40020070 	.word	0x40020070
 800eb04:	40020088 	.word	0x40020088
 800eb08:	400200a0 	.word	0x400200a0
 800eb0c:	400200b8 	.word	0x400200b8
 800eb10:	40020410 	.word	0x40020410
 800eb14:	40020428 	.word	0x40020428
 800eb18:	40020440 	.word	0x40020440
 800eb1c:	40020458 	.word	0x40020458
 800eb20:	40020470 	.word	0x40020470
 800eb24:	40020488 	.word	0x40020488
 800eb28:	400204a0 	.word	0x400204a0
 800eb2c:	400204b8 	.word	0x400204b8

0800eb30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800eb3e:	b2db      	uxtb	r3, r3
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b087      	sub	sp, #28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a7f      	ldr	r2, [pc, #508]	; (800ed80 <DMA_SetConfig+0x21c>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d072      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a7d      	ldr	r2, [pc, #500]	; (800ed84 <DMA_SetConfig+0x220>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d06d      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a7c      	ldr	r2, [pc, #496]	; (800ed88 <DMA_SetConfig+0x224>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d068      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a7a      	ldr	r2, [pc, #488]	; (800ed8c <DMA_SetConfig+0x228>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d063      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a79      	ldr	r2, [pc, #484]	; (800ed90 <DMA_SetConfig+0x22c>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d05e      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a77      	ldr	r2, [pc, #476]	; (800ed94 <DMA_SetConfig+0x230>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d059      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a76      	ldr	r2, [pc, #472]	; (800ed98 <DMA_SetConfig+0x234>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d054      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a74      	ldr	r2, [pc, #464]	; (800ed9c <DMA_SetConfig+0x238>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d04f      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a73      	ldr	r2, [pc, #460]	; (800eda0 <DMA_SetConfig+0x23c>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d04a      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a71      	ldr	r2, [pc, #452]	; (800eda4 <DMA_SetConfig+0x240>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d045      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a70      	ldr	r2, [pc, #448]	; (800eda8 <DMA_SetConfig+0x244>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d040      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a6e      	ldr	r2, [pc, #440]	; (800edac <DMA_SetConfig+0x248>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d03b      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a6d      	ldr	r2, [pc, #436]	; (800edb0 <DMA_SetConfig+0x24c>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d036      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a6b      	ldr	r2, [pc, #428]	; (800edb4 <DMA_SetConfig+0x250>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d031      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a6a      	ldr	r2, [pc, #424]	; (800edb8 <DMA_SetConfig+0x254>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d02c      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a68      	ldr	r2, [pc, #416]	; (800edbc <DMA_SetConfig+0x258>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d027      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a67      	ldr	r2, [pc, #412]	; (800edc0 <DMA_SetConfig+0x25c>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d022      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a65      	ldr	r2, [pc, #404]	; (800edc4 <DMA_SetConfig+0x260>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d01d      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a64      	ldr	r2, [pc, #400]	; (800edc8 <DMA_SetConfig+0x264>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d018      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a62      	ldr	r2, [pc, #392]	; (800edcc <DMA_SetConfig+0x268>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d013      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a61      	ldr	r2, [pc, #388]	; (800edd0 <DMA_SetConfig+0x26c>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d00e      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a5f      	ldr	r2, [pc, #380]	; (800edd4 <DMA_SetConfig+0x270>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d009      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a5e      	ldr	r2, [pc, #376]	; (800edd8 <DMA_SetConfig+0x274>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d004      	beq.n	800ec6e <DMA_SetConfig+0x10a>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a5c      	ldr	r2, [pc, #368]	; (800eddc <DMA_SetConfig+0x278>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d101      	bne.n	800ec72 <DMA_SetConfig+0x10e>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e000      	b.n	800ec74 <DMA_SetConfig+0x110>
 800ec72:	2300      	movs	r3, #0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00d      	beq.n	800ec94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ec80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d004      	beq.n	800ec94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ec92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a39      	ldr	r2, [pc, #228]	; (800ed80 <DMA_SetConfig+0x21c>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d04a      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a38      	ldr	r2, [pc, #224]	; (800ed84 <DMA_SetConfig+0x220>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d045      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a36      	ldr	r2, [pc, #216]	; (800ed88 <DMA_SetConfig+0x224>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d040      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a35      	ldr	r2, [pc, #212]	; (800ed8c <DMA_SetConfig+0x228>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d03b      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a33      	ldr	r2, [pc, #204]	; (800ed90 <DMA_SetConfig+0x22c>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d036      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a32      	ldr	r2, [pc, #200]	; (800ed94 <DMA_SetConfig+0x230>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d031      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a30      	ldr	r2, [pc, #192]	; (800ed98 <DMA_SetConfig+0x234>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d02c      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a2f      	ldr	r2, [pc, #188]	; (800ed9c <DMA_SetConfig+0x238>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d027      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a2d      	ldr	r2, [pc, #180]	; (800eda0 <DMA_SetConfig+0x23c>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d022      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a2c      	ldr	r2, [pc, #176]	; (800eda4 <DMA_SetConfig+0x240>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d01d      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a2a      	ldr	r2, [pc, #168]	; (800eda8 <DMA_SetConfig+0x244>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d018      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a29      	ldr	r2, [pc, #164]	; (800edac <DMA_SetConfig+0x248>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d013      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a27      	ldr	r2, [pc, #156]	; (800edb0 <DMA_SetConfig+0x24c>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d00e      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a26      	ldr	r2, [pc, #152]	; (800edb4 <DMA_SetConfig+0x250>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d009      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a24      	ldr	r2, [pc, #144]	; (800edb8 <DMA_SetConfig+0x254>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d004      	beq.n	800ed34 <DMA_SetConfig+0x1d0>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a23      	ldr	r2, [pc, #140]	; (800edbc <DMA_SetConfig+0x258>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d101      	bne.n	800ed38 <DMA_SetConfig+0x1d4>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e000      	b.n	800ed3a <DMA_SetConfig+0x1d6>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d059      	beq.n	800edf2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed42:	f003 031f 	and.w	r3, r3, #31
 800ed46:	223f      	movs	r2, #63	; 0x3f
 800ed48:	409a      	lsls	r2, r3
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ed5c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	2b40      	cmp	r3, #64	; 0x40
 800ed6c:	d138      	bne.n	800ede0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ed7e:	e086      	b.n	800ee8e <DMA_SetConfig+0x32a>
 800ed80:	40020010 	.word	0x40020010
 800ed84:	40020028 	.word	0x40020028
 800ed88:	40020040 	.word	0x40020040
 800ed8c:	40020058 	.word	0x40020058
 800ed90:	40020070 	.word	0x40020070
 800ed94:	40020088 	.word	0x40020088
 800ed98:	400200a0 	.word	0x400200a0
 800ed9c:	400200b8 	.word	0x400200b8
 800eda0:	40020410 	.word	0x40020410
 800eda4:	40020428 	.word	0x40020428
 800eda8:	40020440 	.word	0x40020440
 800edac:	40020458 	.word	0x40020458
 800edb0:	40020470 	.word	0x40020470
 800edb4:	40020488 	.word	0x40020488
 800edb8:	400204a0 	.word	0x400204a0
 800edbc:	400204b8 	.word	0x400204b8
 800edc0:	58025408 	.word	0x58025408
 800edc4:	5802541c 	.word	0x5802541c
 800edc8:	58025430 	.word	0x58025430
 800edcc:	58025444 	.word	0x58025444
 800edd0:	58025458 	.word	0x58025458
 800edd4:	5802546c 	.word	0x5802546c
 800edd8:	58025480 	.word	0x58025480
 800eddc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	60da      	str	r2, [r3, #12]
}
 800edf0:	e04d      	b.n	800ee8e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a29      	ldr	r2, [pc, #164]	; (800ee9c <DMA_SetConfig+0x338>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d022      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a27      	ldr	r2, [pc, #156]	; (800eea0 <DMA_SetConfig+0x33c>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d01d      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a26      	ldr	r2, [pc, #152]	; (800eea4 <DMA_SetConfig+0x340>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d018      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a24      	ldr	r2, [pc, #144]	; (800eea8 <DMA_SetConfig+0x344>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d013      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a23      	ldr	r2, [pc, #140]	; (800eeac <DMA_SetConfig+0x348>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d00e      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a21      	ldr	r2, [pc, #132]	; (800eeb0 <DMA_SetConfig+0x34c>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d009      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a20      	ldr	r2, [pc, #128]	; (800eeb4 <DMA_SetConfig+0x350>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d004      	beq.n	800ee42 <DMA_SetConfig+0x2de>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a1e      	ldr	r2, [pc, #120]	; (800eeb8 <DMA_SetConfig+0x354>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d101      	bne.n	800ee46 <DMA_SetConfig+0x2e2>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <DMA_SetConfig+0x2e4>
 800ee46:	2300      	movs	r3, #0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d020      	beq.n	800ee8e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee50:	f003 031f 	and.w	r3, r3, #31
 800ee54:	2201      	movs	r2, #1
 800ee56:	409a      	lsls	r2, r3
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	683a      	ldr	r2, [r7, #0]
 800ee62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	2b40      	cmp	r3, #64	; 0x40
 800ee6a:	d108      	bne.n	800ee7e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	60da      	str	r2, [r3, #12]
}
 800ee7c:	e007      	b.n	800ee8e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	60da      	str	r2, [r3, #12]
}
 800ee8e:	bf00      	nop
 800ee90:	371c      	adds	r7, #28
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	58025408 	.word	0x58025408
 800eea0:	5802541c 	.word	0x5802541c
 800eea4:	58025430 	.word	0x58025430
 800eea8:	58025444 	.word	0x58025444
 800eeac:	58025458 	.word	0x58025458
 800eeb0:	5802546c 	.word	0x5802546c
 800eeb4:	58025480 	.word	0x58025480
 800eeb8:	58025494 	.word	0x58025494

0800eebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a42      	ldr	r2, [pc, #264]	; (800efd4 <DMA_CalcBaseAndBitshift+0x118>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d04a      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a41      	ldr	r2, [pc, #260]	; (800efd8 <DMA_CalcBaseAndBitshift+0x11c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d045      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a3f      	ldr	r2, [pc, #252]	; (800efdc <DMA_CalcBaseAndBitshift+0x120>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d040      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a3e      	ldr	r2, [pc, #248]	; (800efe0 <DMA_CalcBaseAndBitshift+0x124>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d03b      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a3c      	ldr	r2, [pc, #240]	; (800efe4 <DMA_CalcBaseAndBitshift+0x128>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d036      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a3b      	ldr	r2, [pc, #236]	; (800efe8 <DMA_CalcBaseAndBitshift+0x12c>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d031      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a39      	ldr	r2, [pc, #228]	; (800efec <DMA_CalcBaseAndBitshift+0x130>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d02c      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a38      	ldr	r2, [pc, #224]	; (800eff0 <DMA_CalcBaseAndBitshift+0x134>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d027      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a36      	ldr	r2, [pc, #216]	; (800eff4 <DMA_CalcBaseAndBitshift+0x138>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d022      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a35      	ldr	r2, [pc, #212]	; (800eff8 <DMA_CalcBaseAndBitshift+0x13c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d01d      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a33      	ldr	r2, [pc, #204]	; (800effc <DMA_CalcBaseAndBitshift+0x140>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d018      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a32      	ldr	r2, [pc, #200]	; (800f000 <DMA_CalcBaseAndBitshift+0x144>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d013      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a30      	ldr	r2, [pc, #192]	; (800f004 <DMA_CalcBaseAndBitshift+0x148>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00e      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a2f      	ldr	r2, [pc, #188]	; (800f008 <DMA_CalcBaseAndBitshift+0x14c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d009      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a2d      	ldr	r2, [pc, #180]	; (800f00c <DMA_CalcBaseAndBitshift+0x150>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d004      	beq.n	800ef64 <DMA_CalcBaseAndBitshift+0xa8>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a2c      	ldr	r2, [pc, #176]	; (800f010 <DMA_CalcBaseAndBitshift+0x154>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d101      	bne.n	800ef68 <DMA_CalcBaseAndBitshift+0xac>
 800ef64:	2301      	movs	r3, #1
 800ef66:	e000      	b.n	800ef6a <DMA_CalcBaseAndBitshift+0xae>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d024      	beq.n	800efb8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	3b10      	subs	r3, #16
 800ef76:	4a27      	ldr	r2, [pc, #156]	; (800f014 <DMA_CalcBaseAndBitshift+0x158>)
 800ef78:	fba2 2303 	umull	r2, r3, r2, r3
 800ef7c:	091b      	lsrs	r3, r3, #4
 800ef7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	4a24      	ldr	r2, [pc, #144]	; (800f018 <DMA_CalcBaseAndBitshift+0x15c>)
 800ef88:	5cd3      	ldrb	r3, [r2, r3]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d908      	bls.n	800efa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4b1f      	ldr	r3, [pc, #124]	; (800f01c <DMA_CalcBaseAndBitshift+0x160>)
 800ef9e:	4013      	ands	r3, r2
 800efa0:	1d1a      	adds	r2, r3, #4
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	659a      	str	r2, [r3, #88]	; 0x58
 800efa6:	e00d      	b.n	800efc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	461a      	mov	r2, r3
 800efae:	4b1b      	ldr	r3, [pc, #108]	; (800f01c <DMA_CalcBaseAndBitshift+0x160>)
 800efb0:	4013      	ands	r3, r2
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	6593      	str	r3, [r2, #88]	; 0x58
 800efb6:	e005      	b.n	800efc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	40020010 	.word	0x40020010
 800efd8:	40020028 	.word	0x40020028
 800efdc:	40020040 	.word	0x40020040
 800efe0:	40020058 	.word	0x40020058
 800efe4:	40020070 	.word	0x40020070
 800efe8:	40020088 	.word	0x40020088
 800efec:	400200a0 	.word	0x400200a0
 800eff0:	400200b8 	.word	0x400200b8
 800eff4:	40020410 	.word	0x40020410
 800eff8:	40020428 	.word	0x40020428
 800effc:	40020440 	.word	0x40020440
 800f000:	40020458 	.word	0x40020458
 800f004:	40020470 	.word	0x40020470
 800f008:	40020488 	.word	0x40020488
 800f00c:	400204a0 	.word	0x400204a0
 800f010:	400204b8 	.word	0x400204b8
 800f014:	aaaaaaab 	.word	0xaaaaaaab
 800f018:	08038a74 	.word	0x08038a74
 800f01c:	fffffc00 	.word	0xfffffc00

0800f020 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	699b      	ldr	r3, [r3, #24]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d120      	bne.n	800f076 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d858      	bhi.n	800f0ee <DMA_CheckFifoParam+0xce>
 800f03c:	a201      	add	r2, pc, #4	; (adr r2, 800f044 <DMA_CheckFifoParam+0x24>)
 800f03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f042:	bf00      	nop
 800f044:	0800f055 	.word	0x0800f055
 800f048:	0800f067 	.word	0x0800f067
 800f04c:	0800f055 	.word	0x0800f055
 800f050:	0800f0ef 	.word	0x0800f0ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d048      	beq.n	800f0f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800f060:	2301      	movs	r3, #1
 800f062:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f064:	e045      	b.n	800f0f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f06e:	d142      	bne.n	800f0f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800f070:	2301      	movs	r3, #1
 800f072:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f074:	e03f      	b.n	800f0f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	699b      	ldr	r3, [r3, #24]
 800f07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f07e:	d123      	bne.n	800f0c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	2b03      	cmp	r3, #3
 800f086:	d838      	bhi.n	800f0fa <DMA_CheckFifoParam+0xda>
 800f088:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <DMA_CheckFifoParam+0x70>)
 800f08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	0800f0a1 	.word	0x0800f0a1
 800f094:	0800f0a7 	.word	0x0800f0a7
 800f098:	0800f0a1 	.word	0x0800f0a1
 800f09c:	0800f0b9 	.word	0x0800f0b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	73fb      	strb	r3, [r7, #15]
        break;
 800f0a4:	e030      	b.n	800f108 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d025      	beq.n	800f0fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f0b6:	e022      	b.n	800f0fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f0c0:	d11f      	bne.n	800f102 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800f0c6:	e01c      	b.n	800f102 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d902      	bls.n	800f0d6 <DMA_CheckFifoParam+0xb6>
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d003      	beq.n	800f0dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800f0d4:	e018      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	73fb      	strb	r3, [r7, #15]
        break;
 800f0da:	e015      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00e      	beq.n	800f106 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ec:	e00b      	b.n	800f106 <DMA_CheckFifoParam+0xe6>
        break;
 800f0ee:	bf00      	nop
 800f0f0:	e00a      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        break;
 800f0f2:	bf00      	nop
 800f0f4:	e008      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        break;
 800f0f6:	bf00      	nop
 800f0f8:	e006      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        break;
 800f0fa:	bf00      	nop
 800f0fc:	e004      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        break;
 800f0fe:	bf00      	nop
 800f100:	e002      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
        break;
 800f102:	bf00      	nop
 800f104:	e000      	b.n	800f108 <DMA_CheckFifoParam+0xe8>
    break;
 800f106:	bf00      	nop
    }
  }

  return status;
 800f108:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop

0800f118 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a38      	ldr	r2, [pc, #224]	; (800f20c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d022      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a36      	ldr	r2, [pc, #216]	; (800f210 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d01d      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a35      	ldr	r2, [pc, #212]	; (800f214 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d018      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a33      	ldr	r2, [pc, #204]	; (800f218 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d013      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4a32      	ldr	r2, [pc, #200]	; (800f21c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d00e      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a30      	ldr	r2, [pc, #192]	; (800f220 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d009      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a2f      	ldr	r2, [pc, #188]	; (800f224 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d004      	beq.n	800f176 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a2d      	ldr	r2, [pc, #180]	; (800f228 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d101      	bne.n	800f17a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800f176:	2301      	movs	r3, #1
 800f178:	e000      	b.n	800f17c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800f17a:	2300      	movs	r3, #0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01a      	beq.n	800f1b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	b2db      	uxtb	r3, r3
 800f186:	3b08      	subs	r3, #8
 800f188:	4a28      	ldr	r2, [pc, #160]	; (800f22c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800f18a:	fba2 2303 	umull	r2, r3, r2, r3
 800f18e:	091b      	lsrs	r3, r3, #4
 800f190:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	4b26      	ldr	r3, [pc, #152]	; (800f230 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800f196:	4413      	add	r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	461a      	mov	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a24      	ldr	r2, [pc, #144]	; (800f234 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800f1a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f003 031f 	and.w	r3, r3, #31
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	409a      	lsls	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800f1b4:	e024      	b.n	800f200 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	3b10      	subs	r3, #16
 800f1be:	4a1e      	ldr	r2, [pc, #120]	; (800f238 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800f1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c4:	091b      	lsrs	r3, r3, #4
 800f1c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4a1c      	ldr	r2, [pc, #112]	; (800f23c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d806      	bhi.n	800f1de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	4a1b      	ldr	r2, [pc, #108]	; (800f240 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d902      	bls.n	800f1de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	3308      	adds	r3, #8
 800f1dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	4b18      	ldr	r3, [pc, #96]	; (800f244 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4a16      	ldr	r2, [pc, #88]	; (800f248 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800f1f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f003 031f 	and.w	r3, r3, #31
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	409a      	lsls	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f200:	bf00      	nop
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr
 800f20c:	58025408 	.word	0x58025408
 800f210:	5802541c 	.word	0x5802541c
 800f214:	58025430 	.word	0x58025430
 800f218:	58025444 	.word	0x58025444
 800f21c:	58025458 	.word	0x58025458
 800f220:	5802546c 	.word	0x5802546c
 800f224:	58025480 	.word	0x58025480
 800f228:	58025494 	.word	0x58025494
 800f22c:	cccccccd 	.word	0xcccccccd
 800f230:	16009600 	.word	0x16009600
 800f234:	58025880 	.word	0x58025880
 800f238:	aaaaaaab 	.word	0xaaaaaaab
 800f23c:	400204b8 	.word	0x400204b8
 800f240:	4002040f 	.word	0x4002040f
 800f244:	10008200 	.word	0x10008200
 800f248:	40020880 	.word	0x40020880

0800f24c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d04a      	beq.n	800f2f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b08      	cmp	r3, #8
 800f266:	d847      	bhi.n	800f2f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a25      	ldr	r2, [pc, #148]	; (800f304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d022      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a24      	ldr	r2, [pc, #144]	; (800f308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d01d      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a22      	ldr	r2, [pc, #136]	; (800f30c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d018      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a21      	ldr	r2, [pc, #132]	; (800f310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d013      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a1f      	ldr	r2, [pc, #124]	; (800f314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d00e      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a1e      	ldr	r2, [pc, #120]	; (800f318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d009      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a1c      	ldr	r2, [pc, #112]	; (800f31c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d004      	beq.n	800f2b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a1b      	ldr	r2, [pc, #108]	; (800f320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d101      	bne.n	800f2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e000      	b.n	800f2be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	4b17      	ldr	r3, [pc, #92]	; (800f324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a15      	ldr	r2, [pc, #84]	; (800f328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800f2d4:	671a      	str	r2, [r3, #112]	; 0x70
 800f2d6:	e009      	b.n	800f2ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	4b14      	ldr	r3, [pc, #80]	; (800f32c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800f2dc:	4413      	add	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a11      	ldr	r2, [pc, #68]	; (800f330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800f2ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	409a      	lsls	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	3714      	adds	r7, #20
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	58025408 	.word	0x58025408
 800f308:	5802541c 	.word	0x5802541c
 800f30c:	58025430 	.word	0x58025430
 800f310:	58025444 	.word	0x58025444
 800f314:	58025458 	.word	0x58025458
 800f318:	5802546c 	.word	0x5802546c
 800f31c:	58025480 	.word	0x58025480
 800f320:	58025494 	.word	0x58025494
 800f324:	1600963f 	.word	0x1600963f
 800f328:	58025940 	.word	0x58025940
 800f32c:	1000823f 	.word	0x1000823f
 800f330:	40020940 	.word	0x40020940

0800f334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f334:	b480      	push	{r7}
 800f336:	b089      	sub	sp, #36	; 0x24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f33e:	2300      	movs	r3, #0
 800f340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f342:	4b89      	ldr	r3, [pc, #548]	; (800f568 <HAL_GPIO_Init+0x234>)
 800f344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f346:	e194      	b.n	800f672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	2101      	movs	r1, #1
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	fa01 f303 	lsl.w	r3, r1, r3
 800f354:	4013      	ands	r3, r2
 800f356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 8186 	beq.w	800f66c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	f003 0303 	and.w	r3, r3, #3
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d005      	beq.n	800f378 <HAL_GPIO_Init+0x44>
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	f003 0303 	and.w	r3, r3, #3
 800f374:	2b02      	cmp	r3, #2
 800f376:	d130      	bne.n	800f3da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	2203      	movs	r2, #3
 800f384:	fa02 f303 	lsl.w	r3, r2, r3
 800f388:	43db      	mvns	r3, r3
 800f38a:	69ba      	ldr	r2, [r7, #24]
 800f38c:	4013      	ands	r3, r2
 800f38e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	68da      	ldr	r2, [r3, #12]
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	fa02 f303 	lsl.w	r3, r2, r3
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	69ba      	ldr	r2, [r7, #24]
 800f3a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b6:	43db      	mvns	r3, r3
 800f3b8:	69ba      	ldr	r2, [r7, #24]
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	091b      	lsrs	r3, r3, #4
 800f3c4:	f003 0201 	and.w	r2, r3, #1
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ce:	69ba      	ldr	r2, [r7, #24]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	69ba      	ldr	r2, [r7, #24]
 800f3d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f003 0303 	and.w	r3, r3, #3
 800f3e2:	2b03      	cmp	r3, #3
 800f3e4:	d017      	beq.n	800f416 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	2203      	movs	r2, #3
 800f3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3f6:	43db      	mvns	r3, r3
 800f3f8:	69ba      	ldr	r2, [r7, #24]
 800f3fa:	4013      	ands	r3, r2
 800f3fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	689a      	ldr	r2, [r3, #8]
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	fa02 f303 	lsl.w	r3, r2, r3
 800f40a:	69ba      	ldr	r2, [r7, #24]
 800f40c:	4313      	orrs	r3, r2
 800f40e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	69ba      	ldr	r2, [r7, #24]
 800f414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	f003 0303 	and.w	r3, r3, #3
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d123      	bne.n	800f46a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	08da      	lsrs	r2, r3, #3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3208      	adds	r2, #8
 800f42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	f003 0307 	and.w	r3, r3, #7
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	220f      	movs	r2, #15
 800f43a:	fa02 f303 	lsl.w	r3, r2, r3
 800f43e:	43db      	mvns	r3, r3
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	4013      	ands	r3, r2
 800f444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	691a      	ldr	r2, [r3, #16]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	f003 0307 	and.w	r3, r3, #7
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	fa02 f303 	lsl.w	r3, r2, r3
 800f456:	69ba      	ldr	r2, [r7, #24]
 800f458:	4313      	orrs	r3, r2
 800f45a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	08da      	lsrs	r2, r3, #3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3208      	adds	r2, #8
 800f464:	69b9      	ldr	r1, [r7, #24]
 800f466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	2203      	movs	r2, #3
 800f476:	fa02 f303 	lsl.w	r3, r2, r3
 800f47a:	43db      	mvns	r3, r3
 800f47c:	69ba      	ldr	r2, [r7, #24]
 800f47e:	4013      	ands	r3, r2
 800f480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	f003 0203 	and.w	r2, r3, #3
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	005b      	lsls	r3, r3, #1
 800f48e:	fa02 f303 	lsl.w	r3, r2, r3
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	4313      	orrs	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	69ba      	ldr	r2, [r7, #24]
 800f49c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 80e0 	beq.w	800f66c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f4ac:	4b2f      	ldr	r3, [pc, #188]	; (800f56c <HAL_GPIO_Init+0x238>)
 800f4ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f4b2:	4a2e      	ldr	r2, [pc, #184]	; (800f56c <HAL_GPIO_Init+0x238>)
 800f4b4:	f043 0302 	orr.w	r3, r3, #2
 800f4b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f4bc:	4b2b      	ldr	r3, [pc, #172]	; (800f56c <HAL_GPIO_Init+0x238>)
 800f4be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f4ca:	4a29      	ldr	r2, [pc, #164]	; (800f570 <HAL_GPIO_Init+0x23c>)
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	089b      	lsrs	r3, r3, #2
 800f4d0:	3302      	adds	r3, #2
 800f4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	f003 0303 	and.w	r3, r3, #3
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	220f      	movs	r2, #15
 800f4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e6:	43db      	mvns	r3, r3
 800f4e8:	69ba      	ldr	r2, [r7, #24]
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4a20      	ldr	r2, [pc, #128]	; (800f574 <HAL_GPIO_Init+0x240>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d052      	beq.n	800f59c <HAL_GPIO_Init+0x268>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4a1f      	ldr	r2, [pc, #124]	; (800f578 <HAL_GPIO_Init+0x244>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d031      	beq.n	800f562 <HAL_GPIO_Init+0x22e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a1e      	ldr	r2, [pc, #120]	; (800f57c <HAL_GPIO_Init+0x248>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d02b      	beq.n	800f55e <HAL_GPIO_Init+0x22a>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a1d      	ldr	r2, [pc, #116]	; (800f580 <HAL_GPIO_Init+0x24c>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d025      	beq.n	800f55a <HAL_GPIO_Init+0x226>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a1c      	ldr	r2, [pc, #112]	; (800f584 <HAL_GPIO_Init+0x250>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d01f      	beq.n	800f556 <HAL_GPIO_Init+0x222>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a1b      	ldr	r2, [pc, #108]	; (800f588 <HAL_GPIO_Init+0x254>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d019      	beq.n	800f552 <HAL_GPIO_Init+0x21e>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a1a      	ldr	r2, [pc, #104]	; (800f58c <HAL_GPIO_Init+0x258>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d013      	beq.n	800f54e <HAL_GPIO_Init+0x21a>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a19      	ldr	r2, [pc, #100]	; (800f590 <HAL_GPIO_Init+0x25c>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d00d      	beq.n	800f54a <HAL_GPIO_Init+0x216>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a18      	ldr	r2, [pc, #96]	; (800f594 <HAL_GPIO_Init+0x260>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d007      	beq.n	800f546 <HAL_GPIO_Init+0x212>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a17      	ldr	r2, [pc, #92]	; (800f598 <HAL_GPIO_Init+0x264>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d101      	bne.n	800f542 <HAL_GPIO_Init+0x20e>
 800f53e:	2309      	movs	r3, #9
 800f540:	e02d      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f542:	230a      	movs	r3, #10
 800f544:	e02b      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f546:	2308      	movs	r3, #8
 800f548:	e029      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f54a:	2307      	movs	r3, #7
 800f54c:	e027      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f54e:	2306      	movs	r3, #6
 800f550:	e025      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f552:	2305      	movs	r3, #5
 800f554:	e023      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f556:	2304      	movs	r3, #4
 800f558:	e021      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f55a:	2303      	movs	r3, #3
 800f55c:	e01f      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f55e:	2302      	movs	r3, #2
 800f560:	e01d      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f562:	2301      	movs	r3, #1
 800f564:	e01b      	b.n	800f59e <HAL_GPIO_Init+0x26a>
 800f566:	bf00      	nop
 800f568:	58000080 	.word	0x58000080
 800f56c:	58024400 	.word	0x58024400
 800f570:	58000400 	.word	0x58000400
 800f574:	58020000 	.word	0x58020000
 800f578:	58020400 	.word	0x58020400
 800f57c:	58020800 	.word	0x58020800
 800f580:	58020c00 	.word	0x58020c00
 800f584:	58021000 	.word	0x58021000
 800f588:	58021400 	.word	0x58021400
 800f58c:	58021800 	.word	0x58021800
 800f590:	58021c00 	.word	0x58021c00
 800f594:	58022000 	.word	0x58022000
 800f598:	58022400 	.word	0x58022400
 800f59c:	2300      	movs	r3, #0
 800f59e:	69fa      	ldr	r2, [r7, #28]
 800f5a0:	f002 0203 	and.w	r2, r2, #3
 800f5a4:	0092      	lsls	r2, r2, #2
 800f5a6:	4093      	lsls	r3, r2
 800f5a8:	69ba      	ldr	r2, [r7, #24]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f5ae:	4938      	ldr	r1, [pc, #224]	; (800f690 <HAL_GPIO_Init+0x35c>)
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	089b      	lsrs	r3, r3, #2
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	69ba      	ldr	r2, [r7, #24]
 800f5b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f5bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	43db      	mvns	r3, r3
 800f5c8:	69ba      	ldr	r2, [r7, #24]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800f5da:	69ba      	ldr	r2, [r7, #24]
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800f5e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800f5ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	43db      	mvns	r3, r3
 800f5f6:	69ba      	ldr	r2, [r7, #24]
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f604:	2b00      	cmp	r3, #0
 800f606:	d003      	beq.n	800f610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f608:	69ba      	ldr	r2, [r7, #24]
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800f610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	43db      	mvns	r3, r3
 800f622:	69ba      	ldr	r2, [r7, #24]
 800f624:	4013      	ands	r3, r2
 800f626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f630:	2b00      	cmp	r3, #0
 800f632:	d003      	beq.n	800f63c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800f634:	69ba      	ldr	r2, [r7, #24]
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	4313      	orrs	r3, r2
 800f63a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	69ba      	ldr	r2, [r7, #24]
 800f640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	43db      	mvns	r3, r3
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	4013      	ands	r3, r2
 800f650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d003      	beq.n	800f666 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800f65e:	69ba      	ldr	r2, [r7, #24]
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	4313      	orrs	r3, r2
 800f664:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	69ba      	ldr	r2, [r7, #24]
 800f66a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	3301      	adds	r3, #1
 800f670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	fa22 f303 	lsr.w	r3, r2, r3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f47f ae63 	bne.w	800f348 <HAL_GPIO_Init+0x14>
  }
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	3724      	adds	r7, #36	; 0x24
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	58000400 	.word	0x58000400

0800f694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	460b      	mov	r3, r1
 800f69e:	807b      	strh	r3, [r7, #2]
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f6a4:	787b      	ldrb	r3, [r7, #1]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f6aa:	887a      	ldrh	r2, [r7, #2]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800f6b0:	e003      	b.n	800f6ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800f6b2:	887b      	ldrh	r3, [r7, #2]
 800f6b4:	041a      	lsls	r2, r3, #16
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	619a      	str	r2, [r3, #24]
}
 800f6ba:	bf00      	nop
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
	...

0800f6c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e07f      	b.n	800f7da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d106      	bne.n	800f6f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7fa ffee 	bl	800a6d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2224      	movs	r2, #36	; 0x24
 800f6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f022 0201 	bic.w	r2, r2, #1
 800f70a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685a      	ldr	r2, [r3, #4]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	689a      	ldr	r2, [r3, #8]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d107      	bne.n	800f742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	689a      	ldr	r2, [r3, #8]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f73e:	609a      	str	r2, [r3, #8]
 800f740:	e006      	b.n	800f750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689a      	ldr	r2, [r3, #8]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f74e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	2b02      	cmp	r3, #2
 800f756:	d104      	bne.n	800f762 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6859      	ldr	r1, [r3, #4]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	4b1d      	ldr	r3, [pc, #116]	; (800f7e4 <HAL_I2C_Init+0x11c>)
 800f76e:	430b      	orrs	r3, r1
 800f770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	68da      	ldr	r2, [r3, #12]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	691a      	ldr	r2, [r3, #16]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	430a      	orrs	r2, r1
 800f79a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	69d9      	ldr	r1, [r3, #28]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a1a      	ldr	r2, [r3, #32]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f042 0201 	orr.w	r2, r2, #1
 800f7ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2220      	movs	r2, #32
 800f7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	02008000 	.word	0x02008000

0800f7e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	699b      	ldr	r3, [r3, #24]
 800f7f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	68f9      	ldr	r1, [r7, #12]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	4798      	blx	r3
  }
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	0a1b      	lsrs	r3, r3, #8
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d010      	beq.n	800f862 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	09db      	lsrs	r3, r3, #7
 800f844:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00a      	beq.n	800f862 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f850:	f043 0201 	orr.w	r2, r3, #1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f860:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	0a9b      	lsrs	r3, r3, #10
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d010      	beq.n	800f890 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	09db      	lsrs	r3, r3, #7
 800f872:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87e:	f043 0208 	orr.w	r2, r3, #8
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f88e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	0a5b      	lsrs	r3, r3, #9
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d010      	beq.n	800f8be <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	09db      	lsrs	r3, r3, #7
 800f8a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00a      	beq.n	800f8be <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ac:	f043 0202 	orr.w	r2, r3, #2
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f003 030b 	and.w	r3, r3, #11
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800f8ce:	68f9      	ldr	r1, [r7, #12]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fc77 	bl	80101c4 <I2C_ITError>
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	460b      	mov	r3, r1
 800f910:	70fb      	strb	r3, [r7, #3]
 800f912:	4613      	mov	r3, r2
 800f914:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f916:	bf00      	nop
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f922:	b480      	push	{r7}
 800f924:	b083      	sub	sp, #12
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f92a:	bf00      	nop
 800f92c:	370c      	adds	r7, #12
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f936:	b480      	push	{r7}
 800f938:	b083      	sub	sp, #12
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f93e:	bf00      	nop
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f952:	bf00      	nop
 800f954:	370c      	adds	r7, #12
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b086      	sub	sp, #24
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d101      	bne.n	800f982 <I2C_Slave_ISR_IT+0x24>
 800f97e:	2302      	movs	r3, #2
 800f980:	e0ec      	b.n	800fb5c <I2C_Slave_ISR_IT+0x1fe>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	095b      	lsrs	r3, r3, #5
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d009      	beq.n	800f9aa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	095b      	lsrs	r3, r3, #5
 800f99a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d003      	beq.n	800f9aa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f9a2:	6939      	ldr	r1, [r7, #16]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f000 f9bf 	bl	800fd28 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	091b      	lsrs	r3, r3, #4
 800f9ae:	f003 0301 	and.w	r3, r3, #1
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d04d      	beq.n	800fa52 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	091b      	lsrs	r3, r3, #4
 800f9ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d047      	beq.n	800fa52 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d128      	bne.n	800fa1e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b28      	cmp	r3, #40	; 0x28
 800f9d6:	d108      	bne.n	800f9ea <I2C_Slave_ISR_IT+0x8c>
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9de:	d104      	bne.n	800f9ea <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f9e0:	6939      	ldr	r1, [r7, #16]
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f000 fb98 	bl	8010118 <I2C_ITListenCplt>
 800f9e8:	e032      	b.n	800fa50 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b29      	cmp	r3, #41	; 0x29
 800f9f4:	d10e      	bne.n	800fa14 <I2C_Slave_ISR_IT+0xb6>
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f9fc:	d00a      	beq.n	800fa14 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2210      	movs	r2, #16
 800fa04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f000 fcd3 	bl	80103b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f000 f92d 	bl	800fc6c <I2C_ITSlaveSeqCplt>
 800fa12:	e01d      	b.n	800fa50 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2210      	movs	r2, #16
 800fa1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fa1c:	e096      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2210      	movs	r2, #16
 800fa24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2a:	f043 0204 	orr.w	r2, r3, #4
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d004      	beq.n	800fa42 <I2C_Slave_ISR_IT+0xe4>
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fa3e:	f040 8085 	bne.w	800fb4c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa46:	4619      	mov	r1, r3
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 fbbb 	bl	80101c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fa4e:	e07d      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
 800fa50:	e07c      	b.n	800fb4c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	089b      	lsrs	r3, r3, #2
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d030      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	089b      	lsrs	r3, r3, #2
 800fa62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d02a      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d018      	beq.n	800faa6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	b2d2      	uxtb	r2, r2
 800fa80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa90:	3b01      	subs	r3, #1
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faaa:	b29b      	uxth	r3, r3
 800faac:	2b00      	cmp	r3, #0
 800faae:	d14f      	bne.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fab6:	d04b      	beq.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 f8d7 	bl	800fc6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fabe:	e047      	b.n	800fb50 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	08db      	lsrs	r3, r3, #3
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00a      	beq.n	800fae2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	08db      	lsrs	r3, r3, #3
 800fad0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d004      	beq.n	800fae2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fad8:	6939      	ldr	r1, [r7, #16]
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 f842 	bl	800fb64 <I2C_ITAddrCplt>
 800fae0:	e037      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	085b      	lsrs	r3, r3, #1
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	d031      	beq.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	085b      	lsrs	r3, r3, #1
 800faf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d02b      	beq.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d018      	beq.n	800fb36 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb08:	781a      	ldrb	r2, [r3, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	851a      	strh	r2, [r3, #40]	; 0x28
 800fb34:	e00d      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fb3c:	d002      	beq.n	800fb44 <I2C_Slave_ISR_IT+0x1e6>
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d106      	bne.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f000 f891 	bl	800fc6c <I2C_ITSlaveSeqCplt>
 800fb4a:	e002      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800fb4c:	bf00      	nop
 800fb4e:	e000      	b.n	800fb52 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fb50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fb7a:	2b28      	cmp	r3, #40	; 0x28
 800fb7c:	d16a      	bne.n	800fc54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	0c1b      	lsrs	r3, r3, #16
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	0c1b      	lsrs	r3, r3, #16
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fb9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fbaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fbb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	d138      	bne.n	800fc34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fbc2:	897b      	ldrh	r3, [r7, #10]
 800fbc4:	09db      	lsrs	r3, r3, #7
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	89bb      	ldrh	r3, [r7, #12]
 800fbca:	4053      	eors	r3, r2
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	f003 0306 	and.w	r3, r3, #6
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d11c      	bne.n	800fc10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fbd6:	897b      	ldrh	r3, [r7, #10]
 800fbd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d13b      	bne.n	800fc64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2208      	movs	r2, #8
 800fbf8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc02:	89ba      	ldrh	r2, [r7, #12]
 800fc04:	7bfb      	ldrb	r3, [r7, #15]
 800fc06:	4619      	mov	r1, r3
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7ff fe7c 	bl	800f906 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fc0e:	e029      	b.n	800fc64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fc10:	893b      	ldrh	r3, [r7, #8]
 800fc12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 fc0c 	bl	8010436 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc26:	89ba      	ldrh	r2, [r7, #12]
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7ff fe6a 	bl	800f906 <HAL_I2C_AddrCallback>
}
 800fc32:	e017      	b.n	800fc64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fc34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 fbfc 	bl	8010436 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fc46:	89ba      	ldrh	r2, [r7, #12]
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7ff fe5a 	bl	800f906 <HAL_I2C_AddrCallback>
}
 800fc52:	e007      	b.n	800fc64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2208      	movs	r2, #8
 800fc5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800fc64:	bf00      	nop
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	0b9b      	lsrs	r3, r3, #14
 800fc88:	f003 0301 	and.w	r3, r3, #1
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d008      	beq.n	800fca2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fc9e:	601a      	str	r2, [r3, #0]
 800fca0:	e00d      	b.n	800fcbe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	0bdb      	lsrs	r3, r3, #15
 800fca6:	f003 0301 	and.w	r3, r3, #1
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d007      	beq.n	800fcbe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681a      	ldr	r2, [r3, #0]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fcbc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b29      	cmp	r3, #41	; 0x29
 800fcc8:	d112      	bne.n	800fcf0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2228      	movs	r2, #40	; 0x28
 800fcce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2221      	movs	r2, #33	; 0x21
 800fcd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fcd8:	2101      	movs	r1, #1
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fbab 	bl	8010436 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff fdf8 	bl	800f8de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fcee:	e017      	b.n	800fd20 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcfa:	d111      	bne.n	800fd20 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2228      	movs	r2, #40	; 0x28
 800fd00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2222      	movs	r2, #34	; 0x22
 800fd08:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fd0a:	2102      	movs	r1, #2
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fb92 	bl	8010436 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f7ff fde9 	bl	800f8f2 <HAL_I2C_SlaveRxCpltCallback>
}
 800fd20:	bf00      	nop
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd44:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2220      	movs	r2, #32
 800fd4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	2b21      	cmp	r3, #33	; 0x21
 800fd52:	d002      	beq.n	800fd5a <I2C_ITSlaveCplt+0x32>
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	2b29      	cmp	r3, #41	; 0x29
 800fd58:	d108      	bne.n	800fd6c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fd5a:	f248 0101 	movw	r1, #32769	; 0x8001
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fb69 	bl	8010436 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2221      	movs	r2, #33	; 0x21
 800fd68:	631a      	str	r2, [r3, #48]	; 0x30
 800fd6a:	e00d      	b.n	800fd88 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
 800fd6e:	2b22      	cmp	r3, #34	; 0x22
 800fd70:	d002      	beq.n	800fd78 <I2C_ITSlaveCplt+0x50>
 800fd72:	7bfb      	ldrb	r3, [r7, #15]
 800fd74:	2b2a      	cmp	r3, #42	; 0x2a
 800fd76:	d107      	bne.n	800fd88 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fd78:	f248 0102 	movw	r1, #32770	; 0x8002
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 fb5a 	bl	8010436 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2222      	movs	r2, #34	; 0x22
 800fd86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	685a      	ldr	r2, [r3, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6859      	ldr	r1, [r3, #4]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	4b80      	ldr	r3, [pc, #512]	; (800ffa4 <I2C_ITSlaveCplt+0x27c>)
 800fda4:	400b      	ands	r3, r1
 800fda6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 fb02 	bl	80103b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	0b9b      	lsrs	r3, r3, #14
 800fdb2:	f003 0301 	and.w	r3, r3, #1
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d07a      	beq.n	800feb0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fdc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	f000 8111 	beq.w	800fff6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a73      	ldr	r2, [pc, #460]	; (800ffa8 <I2C_ITSlaveCplt+0x280>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d059      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a71      	ldr	r2, [pc, #452]	; (800ffac <I2C_ITSlaveCplt+0x284>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d053      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a6f      	ldr	r2, [pc, #444]	; (800ffb0 <I2C_ITSlaveCplt+0x288>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d04d      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	4a6d      	ldr	r2, [pc, #436]	; (800ffb4 <I2C_ITSlaveCplt+0x28c>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d047      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a6b      	ldr	r2, [pc, #428]	; (800ffb8 <I2C_ITSlaveCplt+0x290>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d041      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4a69      	ldr	r2, [pc, #420]	; (800ffbc <I2C_ITSlaveCplt+0x294>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d03b      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4a67      	ldr	r2, [pc, #412]	; (800ffc0 <I2C_ITSlaveCplt+0x298>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d035      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4a65      	ldr	r2, [pc, #404]	; (800ffc4 <I2C_ITSlaveCplt+0x29c>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d02f      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a63      	ldr	r2, [pc, #396]	; (800ffc8 <I2C_ITSlaveCplt+0x2a0>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d029      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a61      	ldr	r2, [pc, #388]	; (800ffcc <I2C_ITSlaveCplt+0x2a4>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d023      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4a5f      	ldr	r2, [pc, #380]	; (800ffd0 <I2C_ITSlaveCplt+0x2a8>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d01d      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a5d      	ldr	r2, [pc, #372]	; (800ffd4 <I2C_ITSlaveCplt+0x2ac>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d017      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a5b      	ldr	r2, [pc, #364]	; (800ffd8 <I2C_ITSlaveCplt+0x2b0>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d011      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a59      	ldr	r2, [pc, #356]	; (800ffdc <I2C_ITSlaveCplt+0x2b4>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d00b      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a57      	ldr	r2, [pc, #348]	; (800ffe0 <I2C_ITSlaveCplt+0x2b8>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d005      	beq.n	800fe94 <I2C_ITSlaveCplt+0x16c>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a55      	ldr	r2, [pc, #340]	; (800ffe4 <I2C_ITSlaveCplt+0x2bc>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d105      	bne.n	800fea0 <I2C_ITSlaveCplt+0x178>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	e004      	b.n	800feaa <I2C_ITSlaveCplt+0x182>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	8553      	strh	r3, [r2, #42]	; 0x2a
 800feae:	e0a2      	b.n	800fff6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	0bdb      	lsrs	r3, r3, #15
 800feb4:	f003 0301 	and.w	r3, r3, #1
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 809c 	beq.w	800fff6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fecc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f000 808f 	beq.w	800fff6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	4a32      	ldr	r2, [pc, #200]	; (800ffa8 <I2C_ITSlaveCplt+0x280>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d059      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4a30      	ldr	r2, [pc, #192]	; (800ffac <I2C_ITSlaveCplt+0x284>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d053      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a2e      	ldr	r2, [pc, #184]	; (800ffb0 <I2C_ITSlaveCplt+0x288>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d04d      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a2c      	ldr	r2, [pc, #176]	; (800ffb4 <I2C_ITSlaveCplt+0x28c>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d047      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4a2a      	ldr	r2, [pc, #168]	; (800ffb8 <I2C_ITSlaveCplt+0x290>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d041      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4a28      	ldr	r2, [pc, #160]	; (800ffbc <I2C_ITSlaveCplt+0x294>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d03b      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a26      	ldr	r2, [pc, #152]	; (800ffc0 <I2C_ITSlaveCplt+0x298>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d035      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a24      	ldr	r2, [pc, #144]	; (800ffc4 <I2C_ITSlaveCplt+0x29c>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d02f      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4a22      	ldr	r2, [pc, #136]	; (800ffc8 <I2C_ITSlaveCplt+0x2a0>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d029      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a20      	ldr	r2, [pc, #128]	; (800ffcc <I2C_ITSlaveCplt+0x2a4>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d023      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a1e      	ldr	r2, [pc, #120]	; (800ffd0 <I2C_ITSlaveCplt+0x2a8>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d01d      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a1c      	ldr	r2, [pc, #112]	; (800ffd4 <I2C_ITSlaveCplt+0x2ac>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d017      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	4a1a      	ldr	r2, [pc, #104]	; (800ffd8 <I2C_ITSlaveCplt+0x2b0>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d011      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a18      	ldr	r2, [pc, #96]	; (800ffdc <I2C_ITSlaveCplt+0x2b4>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d00b      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a16      	ldr	r2, [pc, #88]	; (800ffe0 <I2C_ITSlaveCplt+0x2b8>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d005      	beq.n	800ff98 <I2C_ITSlaveCplt+0x270>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a14      	ldr	r2, [pc, #80]	; (800ffe4 <I2C_ITSlaveCplt+0x2bc>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d127      	bne.n	800ffe8 <I2C_ITSlaveCplt+0x2c0>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	e026      	b.n	800fff2 <I2C_ITSlaveCplt+0x2ca>
 800ffa4:	fe00e800 	.word	0xfe00e800
 800ffa8:	40020010 	.word	0x40020010
 800ffac:	40020028 	.word	0x40020028
 800ffb0:	40020040 	.word	0x40020040
 800ffb4:	40020058 	.word	0x40020058
 800ffb8:	40020070 	.word	0x40020070
 800ffbc:	40020088 	.word	0x40020088
 800ffc0:	400200a0 	.word	0x400200a0
 800ffc4:	400200b8 	.word	0x400200b8
 800ffc8:	40020410 	.word	0x40020410
 800ffcc:	40020428 	.word	0x40020428
 800ffd0:	40020440 	.word	0x40020440
 800ffd4:	40020458 	.word	0x40020458
 800ffd8:	40020470 	.word	0x40020470
 800ffdc:	40020488 	.word	0x40020488
 800ffe0:	400204a0 	.word	0x400204a0
 800ffe4:	400204b8 	.word	0x400204b8
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	089b      	lsrs	r3, r3, #2
 800fffa:	f003 0301 	and.w	r3, r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d020      	beq.n	8010044 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f023 0304 	bic.w	r3, r3, #4
 8010008:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010014:	b2d2      	uxtb	r2, r2
 8010016:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00c      	beq.n	8010044 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801002e:	3b01      	subs	r3, #1
 8010030:	b29a      	uxth	r2, r3
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801003a:	b29b      	uxth	r3, r3
 801003c:	3b01      	subs	r3, #1
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010048:	b29b      	uxth	r3, r3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d005      	beq.n	801005a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010052:	f043 0204 	orr.w	r2, r3, #4
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801006c:	2b00      	cmp	r3, #0
 801006e:	d010      	beq.n	8010092 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 f8a4 	bl	80101c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010082:	b2db      	uxtb	r3, r3
 8010084:	2b28      	cmp	r3, #40	; 0x28
 8010086:	d141      	bne.n	801010c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010088:	6979      	ldr	r1, [r7, #20]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 f844 	bl	8010118 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010090:	e03c      	b.n	801010c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801009a:	d014      	beq.n	80100c6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7ff fde5 	bl	800fc6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a1b      	ldr	r2, [pc, #108]	; (8010114 <I2C_ITSlaveCplt+0x3ec>)
 80100a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2220      	movs	r2, #32
 80100ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7ff fc2f 	bl	800f922 <HAL_I2C_ListenCpltCallback>
}
 80100c4:	e022      	b.n	801010c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b22      	cmp	r3, #34	; 0x22
 80100d0:	d10e      	bne.n	80100f0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2220      	movs	r2, #32
 80100d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fc02 	bl	800f8f2 <HAL_I2C_SlaveRxCpltCallback>
}
 80100ee:	e00d      	b.n	801010c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2220      	movs	r2, #32
 80100f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff fbe9 	bl	800f8de <HAL_I2C_SlaveTxCpltCallback>
}
 801010c:	bf00      	nop
 801010e:	3718      	adds	r7, #24
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	ffff0000 	.word	0xffff0000

08010118 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4a26      	ldr	r2, [pc, #152]	; (80101c0 <I2C_ITListenCplt+0xa8>)
 8010126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2220      	movs	r2, #32
 8010132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	089b      	lsrs	r3, r3, #2
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	2b00      	cmp	r3, #0
 801014e:	d022      	beq.n	8010196 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015a:	b2d2      	uxtb	r2, r2
 801015c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010162:	1c5a      	adds	r2, r3, #1
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801016c:	2b00      	cmp	r3, #0
 801016e:	d012      	beq.n	8010196 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010174:	3b01      	subs	r3, #1
 8010176:	b29a      	uxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010180:	b29b      	uxth	r3, r3
 8010182:	3b01      	subs	r3, #1
 8010184:	b29a      	uxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801018e:	f043 0204 	orr.w	r2, r3, #4
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010196:	f248 0103 	movw	r1, #32771	; 0x8003
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f94b 	bl	8010436 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2210      	movs	r2, #16
 80101a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7ff fbb6 	bl	800f922 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	ffff0000 	.word	0xffff0000

080101c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4a5d      	ldr	r2, [pc, #372]	; (8010358 <I2C_ITError+0x194>)
 80101e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	431a      	orrs	r2, r3
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
 80101f8:	2b28      	cmp	r3, #40	; 0x28
 80101fa:	d005      	beq.n	8010208 <I2C_ITError+0x44>
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	2b29      	cmp	r3, #41	; 0x29
 8010200:	d002      	beq.n	8010208 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010202:	7bfb      	ldrb	r3, [r7, #15]
 8010204:	2b2a      	cmp	r3, #42	; 0x2a
 8010206:	d10b      	bne.n	8010220 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010208:	2103      	movs	r1, #3
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f913 	bl	8010436 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2228      	movs	r2, #40	; 0x28
 8010214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a50      	ldr	r2, [pc, #320]	; (801035c <I2C_ITError+0x198>)
 801021c:	635a      	str	r2, [r3, #52]	; 0x34
 801021e:	e011      	b.n	8010244 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010220:	f248 0103 	movw	r1, #32771	; 0x8003
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f906 	bl	8010436 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b60      	cmp	r3, #96	; 0x60
 8010234:	d003      	beq.n	801023e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2220      	movs	r2, #32
 801023a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2200      	movs	r2, #0
 8010242:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010248:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801024e:	2b00      	cmp	r3, #0
 8010250:	d039      	beq.n	80102c6 <I2C_ITError+0x102>
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	2b11      	cmp	r3, #17
 8010256:	d002      	beq.n	801025e <I2C_ITError+0x9a>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	2b21      	cmp	r3, #33	; 0x21
 801025c:	d133      	bne.n	80102c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801026c:	d107      	bne.n	801027e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801027c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010282:	4618      	mov	r0, r3
 8010284:	f7fe fc54 	bl	800eb30 <HAL_DMA_GetState>
 8010288:	4603      	mov	r3, r0
 801028a:	2b01      	cmp	r3, #1
 801028c:	d017      	beq.n	80102be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010292:	4a33      	ldr	r2, [pc, #204]	; (8010360 <I2C_ITError+0x19c>)
 8010294:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fd fad4 	bl	800d850 <HAL_DMA_Abort_IT>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d04d      	beq.n	801034a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80102b8:	4610      	mov	r0, r2
 80102ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80102bc:	e045      	b.n	801034a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 f850 	bl	8010364 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80102c4:	e041      	b.n	801034a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d039      	beq.n	8010342 <I2C_ITError+0x17e>
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	2b12      	cmp	r3, #18
 80102d2:	d002      	beq.n	80102da <I2C_ITError+0x116>
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	2b22      	cmp	r3, #34	; 0x22
 80102d8:	d133      	bne.n	8010342 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102e8:	d107      	bne.n	80102fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80102f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fc16 	bl	800eb30 <HAL_DMA_GetState>
 8010304:	4603      	mov	r3, r0
 8010306:	2b01      	cmp	r3, #1
 8010308:	d017      	beq.n	801033a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801030e:	4a14      	ldr	r2, [pc, #80]	; (8010360 <I2C_ITError+0x19c>)
 8010310:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801031e:	4618      	mov	r0, r3
 8010320:	f7fd fa96 	bl	800d850 <HAL_DMA_Abort_IT>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d011      	beq.n	801034e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801032e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010334:	4610      	mov	r0, r2
 8010336:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010338:	e009      	b.n	801034e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f812 	bl	8010364 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010340:	e005      	b.n	801034e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 f80e 	bl	8010364 <I2C_TreatErrorCallback>
  }
}
 8010348:	e002      	b.n	8010350 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801034a:	bf00      	nop
 801034c:	e000      	b.n	8010350 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801034e:	bf00      	nop
}
 8010350:	bf00      	nop
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	ffff0000 	.word	0xffff0000
 801035c:	0800f95f 	.word	0x0800f95f
 8010360:	080103fb 	.word	0x080103fb

08010364 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b60      	cmp	r3, #96	; 0x60
 8010376:	d10e      	bne.n	8010396 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2220      	movs	r2, #32
 801037c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff fadb 	bl	800f94a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010394:	e009      	b.n	80103aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff fac6 	bl	800f936 <HAL_I2C_ErrorCallback>
}
 80103aa:	bf00      	nop
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80103b2:	b480      	push	{r7}
 80103b4:	b083      	sub	sp, #12
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	f003 0302 	and.w	r3, r3, #2
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d103      	bne.n	80103d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2200      	movs	r2, #0
 80103ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	f003 0301 	and.w	r3, r3, #1
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d007      	beq.n	80103ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	699a      	ldr	r2, [r3, #24]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f042 0201 	orr.w	r2, r2, #1
 80103ec:	619a      	str	r2, [r3, #24]
  }
}
 80103ee:	bf00      	nop
 80103f0:	370c      	adds	r7, #12
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr

080103fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010406:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040c:	2b00      	cmp	r3, #0
 801040e:	d003      	beq.n	8010418 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010414:	2200      	movs	r2, #0
 8010416:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d003      	beq.n	8010428 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010424:	2200      	movs	r2, #0
 8010426:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff ff9b 	bl	8010364 <I2C_TreatErrorCallback>
}
 801042e:	bf00      	nop
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010436:	b480      	push	{r7}
 8010438:	b085      	sub	sp, #20
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	460b      	mov	r3, r1
 8010440:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010442:	2300      	movs	r3, #0
 8010444:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010446:	887b      	ldrh	r3, [r7, #2]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00f      	beq.n	8010470 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8010456:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801045e:	b2db      	uxtb	r3, r3
 8010460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010464:	2b28      	cmp	r3, #40	; 0x28
 8010466:	d003      	beq.n	8010470 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801046e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010470:	887b      	ldrh	r3, [r7, #2]
 8010472:	f003 0302 	and.w	r3, r3, #2
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00f      	beq.n	801049a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010480:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010488:	b2db      	uxtb	r3, r3
 801048a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801048e:	2b28      	cmp	r3, #40	; 0x28
 8010490:	d003      	beq.n	801049a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8010498:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801049a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	da03      	bge.n	80104aa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80104a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80104aa:	887b      	ldrh	r3, [r7, #2]
 80104ac:	2b10      	cmp	r3, #16
 80104ae:	d103      	bne.n	80104b8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80104b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80104b8:	887b      	ldrh	r3, [r7, #2]
 80104ba:	2b20      	cmp	r3, #32
 80104bc:	d103      	bne.n	80104c6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f043 0320 	orr.w	r3, r3, #32
 80104c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80104c6:	887b      	ldrh	r3, [r7, #2]
 80104c8:	2b40      	cmp	r3, #64	; 0x40
 80104ca:	d103      	bne.n	80104d4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	6819      	ldr	r1, [r3, #0]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	43da      	mvns	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	400a      	ands	r2, r1
 80104e4:	601a      	str	r2, [r3, #0]
}
 80104e6:	bf00      	nop
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80104f2:	b480      	push	{r7}
 80104f4:	b083      	sub	sp, #12
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b20      	cmp	r3, #32
 8010506:	d138      	bne.n	801057a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801050e:	2b01      	cmp	r3, #1
 8010510:	d101      	bne.n	8010516 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010512:	2302      	movs	r3, #2
 8010514:	e032      	b.n	801057c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2224      	movs	r2, #36	; 0x24
 8010522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f022 0201 	bic.w	r2, r2, #1
 8010534:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010544:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6819      	ldr	r1, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	430a      	orrs	r2, r1
 8010554:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f042 0201 	orr.w	r2, r2, #1
 8010564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2220      	movs	r2, #32
 801056a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010576:	2300      	movs	r3, #0
 8010578:	e000      	b.n	801057c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801057a:	2302      	movs	r3, #2
  }
}
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b20      	cmp	r3, #32
 801059c:	d139      	bne.n	8010612 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d101      	bne.n	80105ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80105a8:	2302      	movs	r3, #2
 80105aa:	e033      	b.n	8010614 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2224      	movs	r2, #36	; 0x24
 80105b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f022 0201 	bic.w	r2, r2, #1
 80105ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80105da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	021b      	lsls	r3, r3, #8
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	4313      	orrs	r3, r2
 80105e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f042 0201 	orr.w	r2, r2, #1
 80105fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2220      	movs	r2, #32
 8010602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801060e:	2300      	movs	r3, #0
 8010610:	e000      	b.n	8010614 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010612:	2302      	movs	r3, #2
  }
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010622:	b08f      	sub	sp, #60	; 0x3c
 8010624:	af0a      	add	r7, sp, #40	; 0x28
 8010626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	e116      	b.n	8010860 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	d106      	bne.n	8010652 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f00b fff1 	bl	801c634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2203      	movs	r2, #3
 8010656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801065e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010662:	2b00      	cmp	r3, #0
 8010664:	d102      	bne.n	801066c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4618      	mov	r0, r3
 8010672:	f008 fb3a 	bl	8018cea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	603b      	str	r3, [r7, #0]
 801067c:	687e      	ldr	r6, [r7, #4]
 801067e:	466d      	mov	r5, sp
 8010680:	f106 0410 	add.w	r4, r6, #16
 8010684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801068a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801068c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010690:	e885 0003 	stmia.w	r5, {r0, r1}
 8010694:	1d33      	adds	r3, r6, #4
 8010696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010698:	6838      	ldr	r0, [r7, #0]
 801069a:	f008 fa05 	bl	8018aa8 <USB_CoreInit>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2202      	movs	r2, #2
 80106a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80106ac:	2301      	movs	r3, #1
 80106ae:	e0d7      	b.n	8010860 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2100      	movs	r1, #0
 80106b6:	4618      	mov	r0, r3
 80106b8:	f008 fb28 	bl	8018d0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
 80106c0:	e04a      	b.n	8010758 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80106c2:	7bfa      	ldrb	r2, [r7, #15]
 80106c4:	6879      	ldr	r1, [r7, #4]
 80106c6:	4613      	mov	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	4413      	add	r3, r2
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	440b      	add	r3, r1
 80106d0:	333d      	adds	r3, #61	; 0x3d
 80106d2:	2201      	movs	r2, #1
 80106d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80106d6:	7bfa      	ldrb	r2, [r7, #15]
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	4613      	mov	r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	4413      	add	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	440b      	add	r3, r1
 80106e4:	333c      	adds	r3, #60	; 0x3c
 80106e6:	7bfa      	ldrb	r2, [r7, #15]
 80106e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80106ea:	7bfa      	ldrb	r2, [r7, #15]
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	b298      	uxth	r0, r3
 80106f0:	6879      	ldr	r1, [r7, #4]
 80106f2:	4613      	mov	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	4413      	add	r3, r2
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	440b      	add	r3, r1
 80106fc:	3344      	adds	r3, #68	; 0x44
 80106fe:	4602      	mov	r2, r0
 8010700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8010702:	7bfa      	ldrb	r2, [r7, #15]
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	4613      	mov	r3, r2
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	4413      	add	r3, r2
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	440b      	add	r3, r1
 8010710:	3340      	adds	r3, #64	; 0x40
 8010712:	2200      	movs	r2, #0
 8010714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010716:	7bfa      	ldrb	r2, [r7, #15]
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4613      	mov	r3, r2
 801071c:	00db      	lsls	r3, r3, #3
 801071e:	4413      	add	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	440b      	add	r3, r1
 8010724:	3348      	adds	r3, #72	; 0x48
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801072a:	7bfa      	ldrb	r2, [r7, #15]
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	4613      	mov	r3, r2
 8010730:	00db      	lsls	r3, r3, #3
 8010732:	4413      	add	r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	440b      	add	r3, r1
 8010738:	334c      	adds	r3, #76	; 0x4c
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801073e:	7bfa      	ldrb	r2, [r7, #15]
 8010740:	6879      	ldr	r1, [r7, #4]
 8010742:	4613      	mov	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4413      	add	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	440b      	add	r3, r1
 801074c:	3354      	adds	r3, #84	; 0x54
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	3301      	adds	r3, #1
 8010756:	73fb      	strb	r3, [r7, #15]
 8010758:	7bfa      	ldrb	r2, [r7, #15]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	d3af      	bcc.n	80106c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010762:	2300      	movs	r3, #0
 8010764:	73fb      	strb	r3, [r7, #15]
 8010766:	e044      	b.n	80107f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8010768:	7bfa      	ldrb	r2, [r7, #15]
 801076a:	6879      	ldr	r1, [r7, #4]
 801076c:	4613      	mov	r3, r2
 801076e:	00db      	lsls	r3, r3, #3
 8010770:	4413      	add	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	440b      	add	r3, r1
 8010776:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801077e:	7bfa      	ldrb	r2, [r7, #15]
 8010780:	6879      	ldr	r1, [r7, #4]
 8010782:	4613      	mov	r3, r2
 8010784:	00db      	lsls	r3, r3, #3
 8010786:	4413      	add	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	440b      	add	r3, r1
 801078c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010790:	7bfa      	ldrb	r2, [r7, #15]
 8010792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010794:	7bfa      	ldrb	r2, [r7, #15]
 8010796:	6879      	ldr	r1, [r7, #4]
 8010798:	4613      	mov	r3, r2
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	4413      	add	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	440b      	add	r3, r1
 80107a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80107a6:	2200      	movs	r2, #0
 80107a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80107aa:	7bfa      	ldrb	r2, [r7, #15]
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	4613      	mov	r3, r2
 80107b0:	00db      	lsls	r3, r3, #3
 80107b2:	4413      	add	r3, r2
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	440b      	add	r3, r1
 80107b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80107c0:	7bfa      	ldrb	r2, [r7, #15]
 80107c2:	6879      	ldr	r1, [r7, #4]
 80107c4:	4613      	mov	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	440b      	add	r3, r1
 80107ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80107d6:	7bfa      	ldrb	r2, [r7, #15]
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	4613      	mov	r3, r2
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	4413      	add	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	440b      	add	r3, r1
 80107e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80107e8:	2200      	movs	r2, #0
 80107ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	3301      	adds	r3, #1
 80107f0:	73fb      	strb	r3, [r7, #15]
 80107f2:	7bfa      	ldrb	r2, [r7, #15]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d3b5      	bcc.n	8010768 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	603b      	str	r3, [r7, #0]
 8010802:	687e      	ldr	r6, [r7, #4]
 8010804:	466d      	mov	r5, sp
 8010806:	f106 0410 	add.w	r4, r6, #16
 801080a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801080c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801080e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010816:	e885 0003 	stmia.w	r5, {r0, r1}
 801081a:	1d33      	adds	r3, r6, #4
 801081c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801081e:	6838      	ldr	r0, [r7, #0]
 8010820:	f008 fac0 	bl	8018da4 <USB_DevInit>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d005      	beq.n	8010836 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2202      	movs	r2, #2
 801082e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8010832:	2301      	movs	r3, #1
 8010834:	e014      	b.n	8010860 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2201      	movs	r2, #1
 8010842:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084a:	2b01      	cmp	r3, #1
 801084c:	d102      	bne.n	8010854 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f001 f98c 	bl	8011b6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4618      	mov	r0, r3
 801085a:	f009 fc0e 	bl	801a07a <USB_DevDisconnect>

  return HAL_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3714      	adds	r7, #20
 8010864:	46bd      	mov	sp, r7
 8010866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801087c:	2b01      	cmp	r3, #1
 801087e:	d101      	bne.n	8010884 <HAL_PCD_Start+0x1c>
 8010880:	2302      	movs	r3, #2
 8010882:	e020      	b.n	80108c6 <HAL_PCD_Start+0x5e>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2201      	movs	r2, #1
 8010888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010890:	2b01      	cmp	r3, #1
 8010892:	d109      	bne.n	80108a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8010898:	2b01      	cmp	r3, #1
 801089a:	d005      	beq.n	80108a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f008 fa0b 	bl	8018cc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f009 fbbe 	bl	801a038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80108ce:	b590      	push	{r4, r7, lr}
 80108d0:	b08d      	sub	sp, #52	; 0x34
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f009 fc7c 	bl	801a1e2 <USB_GetMode>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f040 84b7 	bne.w	8011260 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f009 fbe0 	bl	801a0bc <USB_ReadInterrupts>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 84ad 	beq.w	801125e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	0a1b      	lsrs	r3, r3, #8
 801090e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4618      	mov	r0, r3
 801091e:	f009 fbcd 	bl	801a0bc <USB_ReadInterrupts>
 8010922:	4603      	mov	r3, r0
 8010924:	f003 0302 	and.w	r3, r3, #2
 8010928:	2b02      	cmp	r3, #2
 801092a:	d107      	bne.n	801093c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	695a      	ldr	r2, [r3, #20]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f002 0202 	and.w	r2, r2, #2
 801093a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4618      	mov	r0, r3
 8010942:	f009 fbbb 	bl	801a0bc <USB_ReadInterrupts>
 8010946:	4603      	mov	r3, r0
 8010948:	f003 0310 	and.w	r3, r3, #16
 801094c:	2b10      	cmp	r3, #16
 801094e:	d161      	bne.n	8010a14 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	699a      	ldr	r2, [r3, #24]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f022 0210 	bic.w	r2, r2, #16
 801095e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	f003 020f 	and.w	r2, r3, #15
 801096c:	4613      	mov	r3, r2
 801096e:	00db      	lsls	r3, r3, #3
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	4413      	add	r3, r2
 801097c:	3304      	adds	r3, #4
 801097e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	0c5b      	lsrs	r3, r3, #17
 8010984:	f003 030f 	and.w	r3, r3, #15
 8010988:	2b02      	cmp	r3, #2
 801098a:	d124      	bne.n	80109d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 801098c:	69ba      	ldr	r2, [r7, #24]
 801098e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010992:	4013      	ands	r3, r2
 8010994:	2b00      	cmp	r3, #0
 8010996:	d035      	beq.n	8010a04 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	091b      	lsrs	r3, r3, #4
 80109a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80109a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	461a      	mov	r2, r3
 80109aa:	6a38      	ldr	r0, [r7, #32]
 80109ac:	f009 f9f2 	bl	8019d94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	691a      	ldr	r2, [r3, #16]
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	091b      	lsrs	r3, r3, #4
 80109b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109bc:	441a      	add	r2, r3
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	6a1a      	ldr	r2, [r3, #32]
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	091b      	lsrs	r3, r3, #4
 80109ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109ce:	441a      	add	r2, r3
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	621a      	str	r2, [r3, #32]
 80109d4:	e016      	b.n	8010a04 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	0c5b      	lsrs	r3, r3, #17
 80109da:	f003 030f 	and.w	r3, r3, #15
 80109de:	2b06      	cmp	r3, #6
 80109e0:	d110      	bne.n	8010a04 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80109e8:	2208      	movs	r2, #8
 80109ea:	4619      	mov	r1, r3
 80109ec:	6a38      	ldr	r0, [r7, #32]
 80109ee:	f009 f9d1 	bl	8019d94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	6a1a      	ldr	r2, [r3, #32]
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	091b      	lsrs	r3, r3, #4
 80109fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109fe:	441a      	add	r2, r3
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	699a      	ldr	r2, [r3, #24]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f042 0210 	orr.w	r2, r2, #16
 8010a12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f009 fb4f 	bl	801a0bc <USB_ReadInterrupts>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010a28:	f040 80a7 	bne.w	8010b7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f009 fb54 	bl	801a0e2 <USB_ReadDevAllOutEpInterrupt>
 8010a3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8010a3c:	e099      	b.n	8010b72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 808e 	beq.w	8010b66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a50:	b2d2      	uxtb	r2, r2
 8010a52:	4611      	mov	r1, r2
 8010a54:	4618      	mov	r0, r3
 8010a56:	f009 fb78 	bl	801a14a <USB_ReadDevOutEPInterrupt>
 8010a5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	f003 0301 	and.w	r3, r3, #1
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00c      	beq.n	8010a80 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a68:	015a      	lsls	r2, r3, #5
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a72:	461a      	mov	r2, r3
 8010a74:	2301      	movs	r3, #1
 8010a76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fef0 	bl	8011860 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	f003 0308 	and.w	r3, r3, #8
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00c      	beq.n	8010aa4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a96:	461a      	mov	r2, r3
 8010a98:	2308      	movs	r3, #8
 8010a9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 ffc6 	bl	8011a30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	f003 0310 	and.w	r3, r3, #16
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d008      	beq.n	8010ac0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aba:	461a      	mov	r2, r3
 8010abc:	2310      	movs	r3, #16
 8010abe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f003 0302 	and.w	r3, r3, #2
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d030      	beq.n	8010b2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	695b      	ldr	r3, [r3, #20]
 8010ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ad2:	2b80      	cmp	r3, #128	; 0x80
 8010ad4:	d109      	bne.n	8010aea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	69fa      	ldr	r2, [r7, #28]
 8010ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010ae8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aec:	4613      	mov	r3, r2
 8010aee:	00db      	lsls	r3, r3, #3
 8010af0:	4413      	add	r3, r2
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	4413      	add	r3, r2
 8010afc:	3304      	adds	r3, #4
 8010afe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	78db      	ldrb	r3, [r3, #3]
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d108      	bne.n	8010b1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f00b feb9 	bl	801c88c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	015a      	lsls	r2, r3, #5
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	4413      	add	r3, r2
 8010b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b26:	461a      	mov	r2, r3
 8010b28:	2302      	movs	r3, #2
 8010b2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	f003 0320 	and.w	r3, r3, #32
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d008      	beq.n	8010b48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	015a      	lsls	r2, r3, #5
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b42:	461a      	mov	r2, r3
 8010b44:	2320      	movs	r3, #32
 8010b46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b54:	015a      	lsls	r2, r3, #5
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	4413      	add	r3, r2
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5e:	461a      	mov	r2, r3
 8010b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b68:	3301      	adds	r3, #1
 8010b6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	085b      	lsrs	r3, r3, #1
 8010b70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f47f af62 	bne.w	8010a3e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f009 fa9c 	bl	801a0bc <USB_ReadInterrupts>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b8e:	f040 80db 	bne.w	8010d48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f009 fabd 	bl	801a116 <USB_ReadDevAllInEpInterrupt>
 8010b9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010ba2:	e0cd      	b.n	8010d40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	f003 0301 	and.w	r3, r3, #1
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 80c2 	beq.w	8010d34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bb6:	b2d2      	uxtb	r2, r2
 8010bb8:	4611      	mov	r1, r2
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f009 fae3 	bl	801a186 <USB_ReadDevInEPInterrupt>
 8010bc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d057      	beq.n	8010c7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bce:	f003 030f 	and.w	r3, r3, #15
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	43db      	mvns	r3, r3
 8010be6:	69f9      	ldr	r1, [r7, #28]
 8010be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bec:	4013      	ands	r3, r2
 8010bee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	2301      	movs	r3, #1
 8010c00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	691b      	ldr	r3, [r3, #16]
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d132      	bne.n	8010c70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c0e:	4613      	mov	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	4413      	add	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	440b      	add	r3, r1
 8010c18:	334c      	adds	r3, #76	; 0x4c
 8010c1a:	6819      	ldr	r1, [r3, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c20:	4613      	mov	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	4413      	add	r3, r2
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	4403      	add	r3, r0
 8010c2a:	3348      	adds	r3, #72	; 0x48
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4419      	add	r1, r3
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c34:	4613      	mov	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	4413      	add	r3, r2
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	4403      	add	r3, r0
 8010c3e:	334c      	adds	r3, #76	; 0x4c
 8010c40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d113      	bne.n	8010c70 <HAL_PCD_IRQHandler+0x3a2>
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	00db      	lsls	r3, r3, #3
 8010c50:	4413      	add	r3, r2
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	440b      	add	r3, r1
 8010c56:	3354      	adds	r3, #84	; 0x54
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d108      	bne.n	8010c70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6818      	ldr	r0, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010c68:	461a      	mov	r2, r3
 8010c6a:	2101      	movs	r1, #1
 8010c6c:	f009 faec 	bl	801a248 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f00b fd83 	bl	801c782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	f003 0308 	and.w	r3, r3, #8
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d008      	beq.n	8010c98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	015a      	lsls	r2, r3, #5
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c92:	461a      	mov	r2, r3
 8010c94:	2308      	movs	r3, #8
 8010c96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	f003 0310 	and.w	r3, r3, #16
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d008      	beq.n	8010cb4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	015a      	lsls	r2, r3, #5
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	4413      	add	r3, r2
 8010caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cae:	461a      	mov	r2, r3
 8010cb0:	2310      	movs	r3, #16
 8010cb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d008      	beq.n	8010cd0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	015a      	lsls	r2, r3, #5
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cca:	461a      	mov	r2, r3
 8010ccc:	2340      	movs	r3, #64	; 0x40
 8010cce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	f003 0302 	and.w	r3, r3, #2
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d023      	beq.n	8010d22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cdc:	6a38      	ldr	r0, [r7, #32]
 8010cde:	f008 f9bf 	bl	8019060 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	00db      	lsls	r3, r3, #3
 8010ce8:	4413      	add	r3, r2
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	3338      	adds	r3, #56	; 0x38
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	78db      	ldrb	r3, [r3, #3]
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d108      	bne.n	8010d10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2200      	movs	r2, #0
 8010d02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f00b fdd0 	bl	801c8b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	015a      	lsls	r2, r3, #5
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	4413      	add	r3, r2
 8010d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	2302      	movs	r3, #2
 8010d20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d003      	beq.n	8010d34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 fd08 	bl	8011744 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	3301      	adds	r3, #1
 8010d38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	085b      	lsrs	r3, r3, #1
 8010d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f47f af2e 	bne.w	8010ba4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f009 f9b5 	bl	801a0bc <USB_ReadInterrupts>
 8010d52:	4603      	mov	r3, r0
 8010d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d5c:	d122      	bne.n	8010da4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	69fa      	ldr	r2, [r7, #28]
 8010d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d6c:	f023 0301 	bic.w	r3, r3, #1
 8010d70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d108      	bne.n	8010d8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010d84:	2100      	movs	r1, #0
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 ff14 	bl	8011bb4 <HAL_PCDEx_LPM_Callback>
 8010d8c:	e002      	b.n	8010d94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f00b fd6e 	bl	801c870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	695a      	ldr	r2, [r3, #20]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f009 f987 	bl	801a0bc <USB_ReadInterrupts>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010db8:	d112      	bne.n	8010de0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d102      	bne.n	8010dd0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f00b fd2a 	bl	801c824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	695a      	ldr	r2, [r3, #20]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f009 f969 	bl	801a0bc <USB_ReadInterrupts>
 8010dea:	4603      	mov	r3, r0
 8010dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010df4:	d121      	bne.n	8010e3a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	695a      	ldr	r2, [r3, #20]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8010e04:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d111      	bne.n	8010e34 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e1e:	089b      	lsrs	r3, r3, #2
 8010e20:	f003 020f 	and.w	r2, r3, #15
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fec1 	bl	8011bb4 <HAL_PCDEx_LPM_Callback>
 8010e32:	e002      	b.n	8010e3a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f00b fcf5 	bl	801c824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f009 f93c 	bl	801a0bc <USB_ReadInterrupts>
 8010e44:	4603      	mov	r3, r0
 8010e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e4e:	f040 80b7 	bne.w	8010fc0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	69fa      	ldr	r2, [r7, #28]
 8010e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e60:	f023 0301 	bic.w	r3, r3, #1
 8010e64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2110      	movs	r1, #16
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f008 f8f7 	bl	8019060 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010e72:	2300      	movs	r3, #0
 8010e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e76:	e046      	b.n	8010f06 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8010e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7a:	015a      	lsls	r2, r3, #5
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	4413      	add	r3, r2
 8010e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e84:	461a      	mov	r2, r3
 8010e86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	015a      	lsls	r2, r3, #5
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	4413      	add	r3, r2
 8010e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e9c:	0151      	lsls	r1, r2, #5
 8010e9e:	69fa      	ldr	r2, [r7, #28]
 8010ea0:	440a      	add	r2, r1
 8010ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010eaa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	015a      	lsls	r2, r3, #5
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eb8:	461a      	mov	r2, r3
 8010eba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010ebe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec2:	015a      	lsls	r2, r3, #5
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ed0:	0151      	lsls	r1, r2, #5
 8010ed2:	69fa      	ldr	r2, [r7, #28]
 8010ed4:	440a      	add	r2, r1
 8010ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010ede:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee2:	015a      	lsls	r2, r3, #5
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ef0:	0151      	lsls	r1, r2, #5
 8010ef2:	69fa      	ldr	r2, [r7, #28]
 8010ef4:	440a      	add	r2, r1
 8010ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010efa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010efe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f02:	3301      	adds	r3, #1
 8010f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d3b3      	bcc.n	8010e78 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f16:	69db      	ldr	r3, [r3, #28]
 8010f18:	69fa      	ldr	r2, [r7, #28]
 8010f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8010f22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d016      	beq.n	8010f5a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f36:	69fa      	ldr	r2, [r7, #28]
 8010f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f3c:	f043 030b 	orr.w	r3, r3, #11
 8010f40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4c:	69fa      	ldr	r2, [r7, #28]
 8010f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f52:	f043 030b 	orr.w	r3, r3, #11
 8010f56:	6453      	str	r3, [r2, #68]	; 0x44
 8010f58:	e015      	b.n	8010f86 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f60:	695a      	ldr	r2, [r3, #20]
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f68:	4619      	mov	r1, r3
 8010f6a:	f242 032b 	movw	r3, #8235	; 0x202b
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	69fa      	ldr	r2, [r7, #28]
 8010f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f80:	f043 030b 	orr.w	r3, r3, #11
 8010f84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	69fa      	ldr	r2, [r7, #28]
 8010f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010f98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6818      	ldr	r0, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	691b      	ldr	r3, [r3, #16]
 8010fa2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010faa:	461a      	mov	r2, r3
 8010fac:	f009 f94c 	bl	801a248 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	695a      	ldr	r2, [r3, #20]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8010fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f009 f879 	bl	801a0bc <USB_ReadInterrupts>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fd4:	d124      	bne.n	8011020 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f009 f910 	bl	801a200 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f008 f8b8 	bl	801915a <USB_GetDevSpeed>
 8010fea:	4603      	mov	r3, r0
 8010fec:	461a      	mov	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681c      	ldr	r4, [r3, #0]
 8010ff6:	f001 fd91 	bl	8012b1c <HAL_RCC_GetHCLKFreq>
 8010ffa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011000:	b2db      	uxtb	r3, r3
 8011002:	461a      	mov	r2, r3
 8011004:	4620      	mov	r0, r4
 8011006:	f007 fdbd 	bl	8018b84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f00b fbe1 	bl	801c7d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	695a      	ldr	r2, [r3, #20]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801101e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4618      	mov	r0, r3
 8011026:	f009 f849 	bl	801a0bc <USB_ReadInterrupts>
 801102a:	4603      	mov	r3, r0
 801102c:	f003 0308 	and.w	r3, r3, #8
 8011030:	2b08      	cmp	r3, #8
 8011032:	d10a      	bne.n	801104a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f00b fbbe 	bl	801c7b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	695a      	ldr	r2, [r3, #20]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f002 0208 	and.w	r2, r2, #8
 8011048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4618      	mov	r0, r3
 8011050:	f009 f834 	bl	801a0bc <USB_ReadInterrupts>
 8011054:	4603      	mov	r3, r0
 8011056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801105a:	2b80      	cmp	r3, #128	; 0x80
 801105c:	d122      	bne.n	80110a4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801105e:	6a3b      	ldr	r3, [r7, #32]
 8011060:	699b      	ldr	r3, [r3, #24]
 8011062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011066:	6a3b      	ldr	r3, [r7, #32]
 8011068:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801106a:	2301      	movs	r3, #1
 801106c:	627b      	str	r3, [r7, #36]	; 0x24
 801106e:	e014      	b.n	801109a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011074:	4613      	mov	r3, r2
 8011076:	00db      	lsls	r3, r3, #3
 8011078:	4413      	add	r3, r2
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	440b      	add	r3, r1
 801107e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	2b01      	cmp	r3, #1
 8011086:	d105      	bne.n	8011094 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	b2db      	uxtb	r3, r3
 801108c:	4619      	mov	r1, r3
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 fb27 	bl	80116e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	3301      	adds	r3, #1
 8011098:	627b      	str	r3, [r7, #36]	; 0x24
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d3e5      	bcc.n	8011070 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f009 f807 	bl	801a0bc <USB_ReadInterrupts>
 80110ae:	4603      	mov	r3, r0
 80110b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110b8:	d13b      	bne.n	8011132 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80110ba:	2301      	movs	r3, #1
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
 80110be:	e02b      	b.n	8011118 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	015a      	lsls	r2, r3, #5
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	4413      	add	r3, r2
 80110c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80110d0:	6879      	ldr	r1, [r7, #4]
 80110d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110d4:	4613      	mov	r3, r2
 80110d6:	00db      	lsls	r3, r3, #3
 80110d8:	4413      	add	r3, r2
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	440b      	add	r3, r1
 80110de:	3340      	adds	r3, #64	; 0x40
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d115      	bne.n	8011112 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80110e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	da12      	bge.n	8011112 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80110ec:	6879      	ldr	r1, [r7, #4]
 80110ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f0:	4613      	mov	r3, r2
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	4413      	add	r3, r2
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	440b      	add	r3, r1
 80110fa:	333f      	adds	r3, #63	; 0x3f
 80110fc:	2201      	movs	r2, #1
 80110fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	b2db      	uxtb	r3, r3
 8011104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011108:	b2db      	uxtb	r3, r3
 801110a:	4619      	mov	r1, r3
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 fae8 	bl	80116e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011114:	3301      	adds	r3, #1
 8011116:	627b      	str	r3, [r7, #36]	; 0x24
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801111e:	429a      	cmp	r2, r3
 8011120:	d3ce      	bcc.n	80110c0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	695a      	ldr	r2, [r3, #20]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4618      	mov	r0, r3
 8011138:	f008 ffc0 	bl	801a0bc <USB_ReadInterrupts>
 801113c:	4603      	mov	r3, r0
 801113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011146:	d155      	bne.n	80111f4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011148:	2301      	movs	r3, #1
 801114a:	627b      	str	r3, [r7, #36]	; 0x24
 801114c:	e045      	b.n	80111da <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	015a      	lsls	r2, r3, #5
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	4413      	add	r3, r2
 8011156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011162:	4613      	mov	r3, r2
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	4413      	add	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	440b      	add	r3, r1
 801116c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	2b01      	cmp	r3, #1
 8011174:	d12e      	bne.n	80111d4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011176:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011178:	2b00      	cmp	r3, #0
 801117a:	da2b      	bge.n	80111d4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8011188:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801118c:	429a      	cmp	r2, r3
 801118e:	d121      	bne.n	80111d4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011190:	6879      	ldr	r1, [r7, #4]
 8011192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011194:	4613      	mov	r3, r2
 8011196:	00db      	lsls	r3, r3, #3
 8011198:	4413      	add	r3, r2
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	440b      	add	r3, r1
 801119e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80111a2:	2201      	movs	r2, #1
 80111a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	699b      	ldr	r3, [r3, #24]
 80111aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80111b2:	6a3b      	ldr	r3, [r7, #32]
 80111b4:	695b      	ldr	r3, [r3, #20]
 80111b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d10a      	bne.n	80111d4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	69fa      	ldr	r2, [r7, #28]
 80111c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80111d0:	6053      	str	r3, [r2, #4]
            break;
 80111d2:	e007      	b.n	80111e4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80111d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d6:	3301      	adds	r3, #1
 80111d8:	627b      	str	r3, [r7, #36]	; 0x24
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d3b4      	bcc.n	801114e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	695a      	ldr	r2, [r3, #20]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80111f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f008 ff5f 	bl	801a0bc <USB_ReadInterrupts>
 80111fe:	4603      	mov	r3, r0
 8011200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011208:	d10a      	bne.n	8011220 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f00b fb62 	bl	801c8d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	695a      	ldr	r2, [r3, #20]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801121e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f008 ff49 	bl	801a0bc <USB_ReadInterrupts>
 801122a:	4603      	mov	r3, r0
 801122c:	f003 0304 	and.w	r3, r3, #4
 8011230:	2b04      	cmp	r3, #4
 8011232:	d115      	bne.n	8011260 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	f003 0304 	and.w	r3, r3, #4
 8011242:	2b00      	cmp	r3, #0
 8011244:	d002      	beq.n	801124c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f00b fb52 	bl	801c8f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	6859      	ldr	r1, [r3, #4]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	69ba      	ldr	r2, [r7, #24]
 8011258:	430a      	orrs	r2, r1
 801125a:	605a      	str	r2, [r3, #4]
 801125c:	e000      	b.n	8011260 <HAL_PCD_IRQHandler+0x992>
      return;
 801125e:	bf00      	nop
    }
  }
}
 8011260:	3734      	adds	r7, #52	; 0x34
 8011262:	46bd      	mov	sp, r7
 8011264:	bd90      	pop	{r4, r7, pc}

08011266 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	460b      	mov	r3, r1
 8011270:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011278:	2b01      	cmp	r3, #1
 801127a:	d101      	bne.n	8011280 <HAL_PCD_SetAddress+0x1a>
 801127c:	2302      	movs	r3, #2
 801127e:	e013      	b.n	80112a8 <HAL_PCD_SetAddress+0x42>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	78fa      	ldrb	r2, [r7, #3]
 801128c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	78fa      	ldrb	r2, [r7, #3]
 8011296:	4611      	mov	r1, r2
 8011298:	4618      	mov	r0, r3
 801129a:	f008 fea7 	bl	8019fec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	4608      	mov	r0, r1
 80112ba:	4611      	mov	r1, r2
 80112bc:	461a      	mov	r2, r3
 80112be:	4603      	mov	r3, r0
 80112c0:	70fb      	strb	r3, [r7, #3]
 80112c2:	460b      	mov	r3, r1
 80112c4:	803b      	strh	r3, [r7, #0]
 80112c6:	4613      	mov	r3, r2
 80112c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80112ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	da0f      	bge.n	80112f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	f003 020f 	and.w	r2, r3, #15
 80112dc:	4613      	mov	r3, r2
 80112de:	00db      	lsls	r3, r3, #3
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	3338      	adds	r3, #56	; 0x38
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	4413      	add	r3, r2
 80112ea:	3304      	adds	r3, #4
 80112ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2201      	movs	r2, #1
 80112f2:	705a      	strb	r2, [r3, #1]
 80112f4:	e00f      	b.n	8011316 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80112f6:	78fb      	ldrb	r3, [r7, #3]
 80112f8:	f003 020f 	and.w	r2, r3, #15
 80112fc:	4613      	mov	r3, r2
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	4413      	add	r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	4413      	add	r3, r2
 801130c:	3304      	adds	r3, #4
 801130e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2200      	movs	r2, #0
 8011314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	f003 030f 	and.w	r3, r3, #15
 801131c:	b2da      	uxtb	r2, r3
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011322:	883a      	ldrh	r2, [r7, #0]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	78ba      	ldrb	r2, [r7, #2]
 801132c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	785b      	ldrb	r3, [r3, #1]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d004      	beq.n	8011340 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	b29a      	uxth	r2, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011340:	78bb      	ldrb	r3, [r7, #2]
 8011342:	2b02      	cmp	r3, #2
 8011344:	d102      	bne.n	801134c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2200      	movs	r2, #0
 801134a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8011352:	2b01      	cmp	r3, #1
 8011354:	d101      	bne.n	801135a <HAL_PCD_EP_Open+0xaa>
 8011356:	2302      	movs	r3, #2
 8011358:	e00e      	b.n	8011378 <HAL_PCD_EP_Open+0xc8>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2201      	movs	r2, #1
 801135e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	68f9      	ldr	r1, [r7, #12]
 8011368:	4618      	mov	r0, r3
 801136a:	f007 ff1b 	bl	80191a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8011376:	7afb      	ldrb	r3, [r7, #11]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801138c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011390:	2b00      	cmp	r3, #0
 8011392:	da0f      	bge.n	80113b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011394:	78fb      	ldrb	r3, [r7, #3]
 8011396:	f003 020f 	and.w	r2, r3, #15
 801139a:	4613      	mov	r3, r2
 801139c:	00db      	lsls	r3, r3, #3
 801139e:	4413      	add	r3, r2
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	3338      	adds	r3, #56	; 0x38
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	4413      	add	r3, r2
 80113a8:	3304      	adds	r3, #4
 80113aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2201      	movs	r2, #1
 80113b0:	705a      	strb	r2, [r3, #1]
 80113b2:	e00f      	b.n	80113d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80113b4:	78fb      	ldrb	r3, [r7, #3]
 80113b6:	f003 020f 	and.w	r2, r3, #15
 80113ba:	4613      	mov	r3, r2
 80113bc:	00db      	lsls	r3, r3, #3
 80113be:	4413      	add	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	4413      	add	r3, r2
 80113ca:	3304      	adds	r3, #4
 80113cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2200      	movs	r2, #0
 80113d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80113d4:	78fb      	ldrb	r3, [r7, #3]
 80113d6:	f003 030f 	and.w	r3, r3, #15
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d101      	bne.n	80113ee <HAL_PCD_EP_Close+0x6e>
 80113ea:	2302      	movs	r3, #2
 80113ec:	e00e      	b.n	801140c <HAL_PCD_EP_Close+0x8c>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2201      	movs	r2, #1
 80113f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	68f9      	ldr	r1, [r7, #12]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f007 ff59 	bl	80192b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	607a      	str	r2, [r7, #4]
 801141e:	603b      	str	r3, [r7, #0]
 8011420:	460b      	mov	r3, r1
 8011422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011424:	7afb      	ldrb	r3, [r7, #11]
 8011426:	f003 020f 	and.w	r2, r3, #15
 801142a:	4613      	mov	r3, r2
 801142c:	00db      	lsls	r3, r3, #3
 801142e:	4413      	add	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	4413      	add	r3, r2
 801143a:	3304      	adds	r3, #4
 801143c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	2200      	movs	r2, #0
 801144e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2200      	movs	r2, #0
 8011454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011456:	7afb      	ldrb	r3, [r7, #11]
 8011458:	f003 030f 	and.w	r3, r3, #15
 801145c:	b2da      	uxtb	r2, r3
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d102      	bne.n	8011470 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011470:	7afb      	ldrb	r3, [r7, #11]
 8011472:	f003 030f 	and.w	r3, r3, #15
 8011476:	2b00      	cmp	r3, #0
 8011478:	d109      	bne.n	801148e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	691b      	ldr	r3, [r3, #16]
 8011482:	b2db      	uxtb	r3, r3
 8011484:	461a      	mov	r2, r3
 8011486:	6979      	ldr	r1, [r7, #20]
 8011488:	f008 fa40 	bl	801990c <USB_EP0StartXfer>
 801148c:	e008      	b.n	80114a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6818      	ldr	r0, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	b2db      	uxtb	r3, r3
 8011498:	461a      	mov	r2, r3
 801149a:	6979      	ldr	r1, [r7, #20]
 801149c:	f007 ffe6 	bl	801946c <USB_EPStartXfer>
  }

  return HAL_OK;
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3718      	adds	r7, #24
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80114aa:	b480      	push	{r7}
 80114ac:	b083      	sub	sp, #12
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
 80114b2:	460b      	mov	r3, r1
 80114b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80114b6:	78fb      	ldrb	r3, [r7, #3]
 80114b8:	f003 020f 	and.w	r2, r3, #15
 80114bc:	6879      	ldr	r1, [r7, #4]
 80114be:	4613      	mov	r3, r2
 80114c0:	00db      	lsls	r3, r3, #3
 80114c2:	4413      	add	r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	440b      	add	r3, r1
 80114c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80114cc:	681b      	ldr	r3, [r3, #0]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b086      	sub	sp, #24
 80114de:	af00      	add	r7, sp, #0
 80114e0:	60f8      	str	r0, [r7, #12]
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	603b      	str	r3, [r7, #0]
 80114e6:	460b      	mov	r3, r1
 80114e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80114ea:	7afb      	ldrb	r3, [r7, #11]
 80114ec:	f003 020f 	and.w	r2, r3, #15
 80114f0:	4613      	mov	r3, r2
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	4413      	add	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	3338      	adds	r3, #56	; 0x38
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	4413      	add	r3, r2
 80114fe:	3304      	adds	r3, #4
 8011500:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	683a      	ldr	r2, [r7, #0]
 801150c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	2200      	movs	r2, #0
 8011512:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	2201      	movs	r2, #1
 8011518:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801151a:	7afb      	ldrb	r3, [r7, #11]
 801151c:	f003 030f 	and.w	r3, r3, #15
 8011520:	b2da      	uxtb	r2, r3
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d102      	bne.n	8011534 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011534:	7afb      	ldrb	r3, [r7, #11]
 8011536:	f003 030f 	and.w	r3, r3, #15
 801153a:	2b00      	cmp	r3, #0
 801153c:	d109      	bne.n	8011552 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6818      	ldr	r0, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	461a      	mov	r2, r3
 801154a:	6979      	ldr	r1, [r7, #20]
 801154c:	f008 f9de 	bl	801990c <USB_EP0StartXfer>
 8011550:	e008      	b.n	8011564 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6818      	ldr	r0, [r3, #0]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	461a      	mov	r2, r3
 801155e:	6979      	ldr	r1, [r7, #20]
 8011560:	f007 ff84 	bl	801946c <USB_EPStartXfer>
  }

  return HAL_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	3718      	adds	r7, #24
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b084      	sub	sp, #16
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
 8011576:	460b      	mov	r3, r1
 8011578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801157a:	78fb      	ldrb	r3, [r7, #3]
 801157c:	f003 020f 	and.w	r2, r3, #15
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	429a      	cmp	r2, r3
 8011586:	d901      	bls.n	801158c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8011588:	2301      	movs	r3, #1
 801158a:	e050      	b.n	801162e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801158c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011590:	2b00      	cmp	r3, #0
 8011592:	da0f      	bge.n	80115b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011594:	78fb      	ldrb	r3, [r7, #3]
 8011596:	f003 020f 	and.w	r2, r3, #15
 801159a:	4613      	mov	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	4413      	add	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	3338      	adds	r3, #56	; 0x38
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	4413      	add	r3, r2
 80115a8:	3304      	adds	r3, #4
 80115aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2201      	movs	r2, #1
 80115b0:	705a      	strb	r2, [r3, #1]
 80115b2:	e00d      	b.n	80115d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80115b4:	78fa      	ldrb	r2, [r7, #3]
 80115b6:	4613      	mov	r3, r2
 80115b8:	00db      	lsls	r3, r3, #3
 80115ba:	4413      	add	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	4413      	add	r3, r2
 80115c6:	3304      	adds	r3, #4
 80115c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2200      	movs	r2, #0
 80115ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2201      	movs	r2, #1
 80115d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80115d6:	78fb      	ldrb	r3, [r7, #3]
 80115d8:	f003 030f 	and.w	r3, r3, #15
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d101      	bne.n	80115f0 <HAL_PCD_EP_SetStall+0x82>
 80115ec:	2302      	movs	r3, #2
 80115ee:	e01e      	b.n	801162e <HAL_PCD_EP_SetStall+0xc0>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2201      	movs	r2, #1
 80115f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	68f9      	ldr	r1, [r7, #12]
 80115fe:	4618      	mov	r0, r3
 8011600:	f008 fc20 	bl	8019e44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	f003 030f 	and.w	r3, r3, #15
 801160a:	2b00      	cmp	r3, #0
 801160c:	d10a      	bne.n	8011624 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	b2d9      	uxtb	r1, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801161e:	461a      	mov	r2, r3
 8011620:	f008 fe12 	bl	801a248 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b084      	sub	sp, #16
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	460b      	mov	r3, r1
 8011640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011642:	78fb      	ldrb	r3, [r7, #3]
 8011644:	f003 020f 	and.w	r2, r3, #15
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d901      	bls.n	8011654 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011650:	2301      	movs	r3, #1
 8011652:	e042      	b.n	80116da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011658:	2b00      	cmp	r3, #0
 801165a:	da0f      	bge.n	801167c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801165c:	78fb      	ldrb	r3, [r7, #3]
 801165e:	f003 020f 	and.w	r2, r3, #15
 8011662:	4613      	mov	r3, r2
 8011664:	00db      	lsls	r3, r3, #3
 8011666:	4413      	add	r3, r2
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	3338      	adds	r3, #56	; 0x38
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	4413      	add	r3, r2
 8011670:	3304      	adds	r3, #4
 8011672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2201      	movs	r2, #1
 8011678:	705a      	strb	r2, [r3, #1]
 801167a:	e00f      	b.n	801169c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	f003 020f 	and.w	r2, r3, #15
 8011682:	4613      	mov	r3, r2
 8011684:	00db      	lsls	r3, r3, #3
 8011686:	4413      	add	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4413      	add	r3, r2
 8011692:	3304      	adds	r3, #4
 8011694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2200      	movs	r2, #0
 801169a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2200      	movs	r2, #0
 80116a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80116a2:	78fb      	ldrb	r3, [r7, #3]
 80116a4:	f003 030f 	and.w	r3, r3, #15
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d101      	bne.n	80116bc <HAL_PCD_EP_ClrStall+0x86>
 80116b8:	2302      	movs	r3, #2
 80116ba:	e00e      	b.n	80116da <HAL_PCD_EP_ClrStall+0xa4>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2201      	movs	r2, #1
 80116c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	68f9      	ldr	r1, [r7, #12]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f008 fc28 	bl	8019f20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80116d8:	2300      	movs	r3, #0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3710      	adds	r7, #16
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80116e2:	b580      	push	{r7, lr}
 80116e4:	b084      	sub	sp, #16
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	460b      	mov	r3, r1
 80116ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80116ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	da0c      	bge.n	8011710 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80116f6:	78fb      	ldrb	r3, [r7, #3]
 80116f8:	f003 020f 	and.w	r2, r3, #15
 80116fc:	4613      	mov	r3, r2
 80116fe:	00db      	lsls	r3, r3, #3
 8011700:	4413      	add	r3, r2
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	3338      	adds	r3, #56	; 0x38
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	4413      	add	r3, r2
 801170a:	3304      	adds	r3, #4
 801170c:	60fb      	str	r3, [r7, #12]
 801170e:	e00c      	b.n	801172a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011710:	78fb      	ldrb	r3, [r7, #3]
 8011712:	f003 020f 	and.w	r2, r3, #15
 8011716:	4613      	mov	r3, r2
 8011718:	00db      	lsls	r3, r3, #3
 801171a:	4413      	add	r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	4413      	add	r3, r2
 8011726:	3304      	adds	r3, #4
 8011728:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	68f9      	ldr	r1, [r7, #12]
 8011730:	4618      	mov	r0, r3
 8011732:	f008 fa47 	bl	8019bc4 <USB_EPStopXfer>
 8011736:	4603      	mov	r3, r0
 8011738:	72fb      	strb	r3, [r7, #11]

  return ret;
 801173a:	7afb      	ldrb	r3, [r7, #11]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b08a      	sub	sp, #40	; 0x28
 8011748:	af02      	add	r7, sp, #8
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	4613      	mov	r3, r2
 801175c:	00db      	lsls	r3, r3, #3
 801175e:	4413      	add	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	3338      	adds	r3, #56	; 0x38
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	4413      	add	r3, r2
 8011768:	3304      	adds	r3, #4
 801176a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a1a      	ldr	r2, [r3, #32]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	429a      	cmp	r2, r3
 8011776:	d901      	bls.n	801177c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8011778:	2301      	movs	r3, #1
 801177a:	e06c      	b.n	8011856 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	699a      	ldr	r2, [r3, #24]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6a1b      	ldr	r3, [r3, #32]
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	69fa      	ldr	r2, [r7, #28]
 801178e:	429a      	cmp	r2, r3
 8011790:	d902      	bls.n	8011798 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	3303      	adds	r3, #3
 801179c:	089b      	lsrs	r3, r3, #2
 801179e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80117a0:	e02b      	b.n	80117fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	699a      	ldr	r2, [r3, #24]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	69fa      	ldr	r2, [r7, #28]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d902      	bls.n	80117be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	3303      	adds	r3, #3
 80117c2:	089b      	lsrs	r3, r3, #2
 80117c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6919      	ldr	r1, [r3, #16]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4603      	mov	r3, r0
 80117dc:	6978      	ldr	r0, [r7, #20]
 80117de:	f008 fa9b 	bl	8019d18 <USB_WritePacket>

    ep->xfer_buff  += len;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	691a      	ldr	r2, [r3, #16]
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	441a      	add	r2, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6a1a      	ldr	r2, [r3, #32]
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	441a      	add	r2, r3
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	015a      	lsls	r2, r3, #5
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	4413      	add	r3, r2
 8011802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	b29b      	uxth	r3, r3
 801180a:	69ba      	ldr	r2, [r7, #24]
 801180c:	429a      	cmp	r2, r3
 801180e:	d809      	bhi.n	8011824 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6a1a      	ldr	r2, [r3, #32]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8011818:	429a      	cmp	r2, r3
 801181a:	d203      	bcs.n	8011824 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	699b      	ldr	r3, [r3, #24]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1be      	bne.n	80117a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	699a      	ldr	r2, [r3, #24]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	6a1b      	ldr	r3, [r3, #32]
 801182c:	429a      	cmp	r2, r3
 801182e:	d811      	bhi.n	8011854 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	f003 030f 	and.w	r3, r3, #15
 8011836:	2201      	movs	r2, #1
 8011838:	fa02 f303 	lsl.w	r3, r2, r3
 801183c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	43db      	mvns	r3, r3
 801184a:	6939      	ldr	r1, [r7, #16]
 801184c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011850:	4013      	ands	r3, r2
 8011852:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3720      	adds	r7, #32
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
	...

08011860 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b088      	sub	sp, #32
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	333c      	adds	r3, #60	; 0x3c
 8011878:	3304      	adds	r3, #4
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	015a      	lsls	r2, r3, #5
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	4413      	add	r3, r2
 8011886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	2b01      	cmp	r3, #1
 8011894:	d17b      	bne.n	801198e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	f003 0308 	and.w	r3, r3, #8
 801189c:	2b00      	cmp	r3, #0
 801189e:	d015      	beq.n	80118cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	4a61      	ldr	r2, [pc, #388]	; (8011a28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	f240 80b9 	bls.w	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f000 80b3 	beq.w	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	015a      	lsls	r2, r3, #5
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	4413      	add	r3, r2
 80118be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118c2:	461a      	mov	r2, r3
 80118c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118c8:	6093      	str	r3, [r2, #8]
 80118ca:	e0a7      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	f003 0320 	and.w	r3, r3, #32
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d009      	beq.n	80118ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	015a      	lsls	r2, r3, #5
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	4413      	add	r3, r2
 80118de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118e2:	461a      	mov	r2, r3
 80118e4:	2320      	movs	r3, #32
 80118e6:	6093      	str	r3, [r2, #8]
 80118e8:	e098      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f040 8093 	bne.w	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	4a4b      	ldr	r2, [pc, #300]	; (8011a28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d90f      	bls.n	801191e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00a      	beq.n	801191e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	015a      	lsls	r2, r3, #5
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	4413      	add	r3, r2
 8011910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011914:	461a      	mov	r2, r3
 8011916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801191a:	6093      	str	r3, [r2, #8]
 801191c:	e07e      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801191e:	683a      	ldr	r2, [r7, #0]
 8011920:	4613      	mov	r3, r2
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	4413      	add	r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	4413      	add	r3, r2
 8011930:	3304      	adds	r3, #4
 8011932:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	69da      	ldr	r2, [r3, #28]
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	0159      	lsls	r1, r3, #5
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	440b      	add	r3, r1
 8011940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801194a:	1ad2      	subs	r2, r2, r3
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d114      	bne.n	8011980 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	699b      	ldr	r3, [r3, #24]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d109      	bne.n	8011972 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011968:	461a      	mov	r2, r3
 801196a:	2101      	movs	r1, #1
 801196c:	f008 fc6c 	bl	801a248 <USB_EP0_OutStart>
 8011970:	e006      	b.n	8011980 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	691a      	ldr	r2, [r3, #16]
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	6a1b      	ldr	r3, [r3, #32]
 801197a:	441a      	add	r2, r3
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	b2db      	uxtb	r3, r3
 8011984:	4619      	mov	r1, r3
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f00a fee0 	bl	801c74c <HAL_PCD_DataOutStageCallback>
 801198c:	e046      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	4a26      	ldr	r2, [pc, #152]	; (8011a2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d124      	bne.n	80119e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801199c:	2b00      	cmp	r3, #0
 801199e:	d00a      	beq.n	80119b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	015a      	lsls	r2, r3, #5
 80119a4:	69bb      	ldr	r3, [r7, #24]
 80119a6:	4413      	add	r3, r2
 80119a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ac:	461a      	mov	r2, r3
 80119ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119b2:	6093      	str	r3, [r2, #8]
 80119b4:	e032      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	f003 0320 	and.w	r3, r3, #32
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d008      	beq.n	80119d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	015a      	lsls	r2, r3, #5
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	4413      	add	r3, r2
 80119c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119cc:	461a      	mov	r2, r3
 80119ce:	2320      	movs	r3, #32
 80119d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	4619      	mov	r1, r3
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f00a feb7 	bl	801c74c <HAL_PCD_DataOutStageCallback>
 80119de:	e01d      	b.n	8011a1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d114      	bne.n	8011a10 <PCD_EP_OutXfrComplete_int+0x1b0>
 80119e6:	6879      	ldr	r1, [r7, #4]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	4613      	mov	r3, r2
 80119ec:	00db      	lsls	r3, r3, #3
 80119ee:	4413      	add	r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	440b      	add	r3, r1
 80119f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d108      	bne.n	8011a10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011a08:	461a      	mov	r2, r3
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	f008 fc1c 	bl	801a248 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f00a fe98 	bl	801c74c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3720      	adds	r7, #32
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	4f54300a 	.word	0x4f54300a
 8011a2c:	4f54310a 	.word	0x4f54310a

08011a30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	333c      	adds	r3, #60	; 0x3c
 8011a48:	3304      	adds	r3, #4
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	015a      	lsls	r2, r3, #5
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	4413      	add	r3, r2
 8011a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	4a15      	ldr	r2, [pc, #84]	; (8011ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d90e      	bls.n	8011a84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d009      	beq.n	8011a84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	015a      	lsls	r2, r3, #5
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	4413      	add	r3, r2
 8011a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f00a fe4f 	bl	801c728 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	4a0a      	ldr	r2, [pc, #40]	; (8011ab8 <PCD_EP_OutSetupPacket_int+0x88>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d90c      	bls.n	8011aac <PCD_EP_OutSetupPacket_int+0x7c>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	691b      	ldr	r3, [r3, #16]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d108      	bne.n	8011aac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6818      	ldr	r0, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	2101      	movs	r1, #1
 8011aa8:	f008 fbce 	bl	801a248 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8011aac:	2300      	movs	r3, #0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3718      	adds	r7, #24
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	4f54300a 	.word	0x4f54300a

08011abc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	70fb      	strb	r3, [r7, #3]
 8011ac8:	4613      	mov	r3, r2
 8011aca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011ad4:	78fb      	ldrb	r3, [r7, #3]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d107      	bne.n	8011aea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011ada:	883b      	ldrh	r3, [r7, #0]
 8011adc:	0419      	lsls	r1, r3, #16
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	68ba      	ldr	r2, [r7, #8]
 8011ae4:	430a      	orrs	r2, r1
 8011ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8011ae8:	e028      	b.n	8011b3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af0:	0c1b      	lsrs	r3, r3, #16
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	4413      	add	r3, r2
 8011af6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011af8:	2300      	movs	r3, #0
 8011afa:	73fb      	strb	r3, [r7, #15]
 8011afc:	e00d      	b.n	8011b1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	7bfb      	ldrb	r3, [r7, #15]
 8011b04:	3340      	adds	r3, #64	; 0x40
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	4413      	add	r3, r2
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	0c1b      	lsrs	r3, r3, #16
 8011b0e:	68ba      	ldr	r2, [r7, #8]
 8011b10:	4413      	add	r3, r2
 8011b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	3301      	adds	r3, #1
 8011b18:	73fb      	strb	r3, [r7, #15]
 8011b1a:	7bfa      	ldrb	r2, [r7, #15]
 8011b1c:	78fb      	ldrb	r3, [r7, #3]
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d3ec      	bcc.n	8011afe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011b24:	883b      	ldrh	r3, [r7, #0]
 8011b26:	0418      	lsls	r0, r3, #16
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6819      	ldr	r1, [r3, #0]
 8011b2c:	78fb      	ldrb	r3, [r7, #3]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	68ba      	ldr	r2, [r7, #8]
 8011b32:	4302      	orrs	r2, r0
 8011b34:	3340      	adds	r3, #64	; 0x40
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	440b      	add	r3, r1
 8011b3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3714      	adds	r7, #20
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011b4a:	b480      	push	{r7}
 8011b4c:	b083      	sub	sp, #12
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
 8011b52:	460b      	mov	r3, r1
 8011b54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	887a      	ldrh	r2, [r7, #2]
 8011b5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b9a:	4b05      	ldr	r3, [pc, #20]	; (8011bb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	68fa      	ldr	r2, [r7, #12]
 8011ba0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	10000003 	.word	0x10000003

08011bb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011bd4:	4b19      	ldr	r3, [pc, #100]	; (8011c3c <HAL_PWREx_ConfigSupply+0x70>)
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	f003 0304 	and.w	r3, r3, #4
 8011bdc:	2b04      	cmp	r3, #4
 8011bde:	d00a      	beq.n	8011bf6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011be0:	4b16      	ldr	r3, [pc, #88]	; (8011c3c <HAL_PWREx_ConfigSupply+0x70>)
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	f003 0307 	and.w	r3, r3, #7
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d001      	beq.n	8011bf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e01f      	b.n	8011c32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	e01d      	b.n	8011c32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011bf6:	4b11      	ldr	r3, [pc, #68]	; (8011c3c <HAL_PWREx_ConfigSupply+0x70>)
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	f023 0207 	bic.w	r2, r3, #7
 8011bfe:	490f      	ldr	r1, [pc, #60]	; (8011c3c <HAL_PWREx_ConfigSupply+0x70>)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	4313      	orrs	r3, r2
 8011c04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8011c06:	f7fa f843 	bl	800bc90 <HAL_GetTick>
 8011c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011c0c:	e009      	b.n	8011c22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011c0e:	f7fa f83f 	bl	800bc90 <HAL_GetTick>
 8011c12:	4602      	mov	r2, r0
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011c1c:	d901      	bls.n	8011c22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e007      	b.n	8011c32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011c22:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <HAL_PWREx_ConfigSupply+0x70>)
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c2e:	d1ee      	bne.n	8011c0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	58024800 	.word	0x58024800

08011c40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011c40:	b480      	push	{r7}
 8011c42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8011c44:	4b05      	ldr	r3, [pc, #20]	; (8011c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	4a04      	ldr	r2, [pc, #16]	; (8011c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011c4e:	60d3      	str	r3, [r2, #12]
}
 8011c50:	bf00      	nop
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr
 8011c5a:	bf00      	nop
 8011c5c:	58024800 	.word	0x58024800

08011c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b08c      	sub	sp, #48	; 0x30
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d102      	bne.n	8011c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011c6e:	2301      	movs	r3, #1
 8011c70:	f000 bc1d 	b.w	80124ae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f000 8087 	beq.w	8011d90 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011c82:	4b99      	ldr	r3, [pc, #612]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011c8c:	4b96      	ldr	r3, [pc, #600]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c94:	2b10      	cmp	r3, #16
 8011c96:	d007      	beq.n	8011ca8 <HAL_RCC_OscConfig+0x48>
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	2b18      	cmp	r3, #24
 8011c9c:	d110      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x60>
 8011c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d10b      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011ca8:	4b8f      	ldr	r3, [pc, #572]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d06c      	beq.n	8011d8e <HAL_RCC_OscConfig+0x12e>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d168      	bne.n	8011d8e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e3f6      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cc8:	d106      	bne.n	8011cd8 <HAL_RCC_OscConfig+0x78>
 8011cca:	4b87      	ldr	r3, [pc, #540]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4a86      	ldr	r2, [pc, #536]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cd4:	6013      	str	r3, [r2, #0]
 8011cd6:	e02e      	b.n	8011d36 <HAL_RCC_OscConfig+0xd6>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10c      	bne.n	8011cfa <HAL_RCC_OscConfig+0x9a>
 8011ce0:	4b81      	ldr	r3, [pc, #516]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4a80      	ldr	r2, [pc, #512]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011cea:	6013      	str	r3, [r2, #0]
 8011cec:	4b7e      	ldr	r3, [pc, #504]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4a7d      	ldr	r2, [pc, #500]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011cf6:	6013      	str	r3, [r2, #0]
 8011cf8:	e01d      	b.n	8011d36 <HAL_RCC_OscConfig+0xd6>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d02:	d10c      	bne.n	8011d1e <HAL_RCC_OscConfig+0xbe>
 8011d04:	4b78      	ldr	r3, [pc, #480]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4a77      	ldr	r2, [pc, #476]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011d0e:	6013      	str	r3, [r2, #0]
 8011d10:	4b75      	ldr	r3, [pc, #468]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4a74      	ldr	r2, [pc, #464]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d1a:	6013      	str	r3, [r2, #0]
 8011d1c:	e00b      	b.n	8011d36 <HAL_RCC_OscConfig+0xd6>
 8011d1e:	4b72      	ldr	r3, [pc, #456]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	4a71      	ldr	r2, [pc, #452]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d28:	6013      	str	r3, [r2, #0]
 8011d2a:	4b6f      	ldr	r3, [pc, #444]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4a6e      	ldr	r2, [pc, #440]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d013      	beq.n	8011d66 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d3e:	f7f9 ffa7 	bl	800bc90 <HAL_GetTick>
 8011d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011d44:	e008      	b.n	8011d58 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d46:	f7f9 ffa3 	bl	800bc90 <HAL_GetTick>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	2b64      	cmp	r3, #100	; 0x64
 8011d52:	d901      	bls.n	8011d58 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8011d54:	2303      	movs	r3, #3
 8011d56:	e3aa      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011d58:	4b63      	ldr	r3, [pc, #396]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d0f0      	beq.n	8011d46 <HAL_RCC_OscConfig+0xe6>
 8011d64:	e014      	b.n	8011d90 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d66:	f7f9 ff93 	bl	800bc90 <HAL_GetTick>
 8011d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011d6c:	e008      	b.n	8011d80 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d6e:	f7f9 ff8f 	bl	800bc90 <HAL_GetTick>
 8011d72:	4602      	mov	r2, r0
 8011d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	2b64      	cmp	r3, #100	; 0x64
 8011d7a:	d901      	bls.n	8011d80 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	e396      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011d80:	4b59      	ldr	r3, [pc, #356]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1f0      	bne.n	8011d6e <HAL_RCC_OscConfig+0x10e>
 8011d8c:	e000      	b.n	8011d90 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f003 0302 	and.w	r3, r3, #2
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f000 80cb 	beq.w	8011f34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011d9e:	4b52      	ldr	r3, [pc, #328]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011da0:	691b      	ldr	r3, [r3, #16]
 8011da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011da6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011da8:	4b4f      	ldr	r3, [pc, #316]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011dae:	6a3b      	ldr	r3, [r7, #32]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d007      	beq.n	8011dc4 <HAL_RCC_OscConfig+0x164>
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	2b18      	cmp	r3, #24
 8011db8:	d156      	bne.n	8011e68 <HAL_RCC_OscConfig+0x208>
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	f003 0303 	and.w	r3, r3, #3
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d151      	bne.n	8011e68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011dc4:	4b48      	ldr	r3, [pc, #288]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f003 0304 	and.w	r3, r3, #4
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d005      	beq.n	8011ddc <HAL_RCC_OscConfig+0x17c>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d101      	bne.n	8011ddc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e368      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011ddc:	4b42      	ldr	r3, [pc, #264]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f023 0219 	bic.w	r2, r3, #25
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	493f      	ldr	r1, [pc, #252]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011dea:	4313      	orrs	r3, r2
 8011dec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011dee:	f7f9 ff4f 	bl	800bc90 <HAL_GetTick>
 8011df2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011df4:	e008      	b.n	8011e08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011df6:	f7f9 ff4b 	bl	800bc90 <HAL_GetTick>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	d901      	bls.n	8011e08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8011e04:	2303      	movs	r3, #3
 8011e06:	e352      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011e08:	4b37      	ldr	r3, [pc, #220]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f003 0304 	and.w	r3, r3, #4
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d0f0      	beq.n	8011df6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e14:	f7f9 ff6c 	bl	800bcf0 <HAL_GetREVID>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d817      	bhi.n	8011e52 <HAL_RCC_OscConfig+0x1f2>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	691b      	ldr	r3, [r3, #16]
 8011e26:	2b40      	cmp	r3, #64	; 0x40
 8011e28:	d108      	bne.n	8011e3c <HAL_RCC_OscConfig+0x1dc>
 8011e2a:	4b2f      	ldr	r3, [pc, #188]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011e32:	4a2d      	ldr	r2, [pc, #180]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011e3a:	e07b      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e3c:	4b2a      	ldr	r3, [pc, #168]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	691b      	ldr	r3, [r3, #16]
 8011e48:	031b      	lsls	r3, r3, #12
 8011e4a:	4927      	ldr	r1, [pc, #156]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011e50:	e070      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e52:	4b25      	ldr	r3, [pc, #148]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	691b      	ldr	r3, [r3, #16]
 8011e5e:	061b      	lsls	r3, r3, #24
 8011e60:	4921      	ldr	r1, [pc, #132]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e62:	4313      	orrs	r3, r2
 8011e64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011e66:	e065      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d048      	beq.n	8011f02 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011e70:	4b1d      	ldr	r3, [pc, #116]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f023 0219 	bic.w	r2, r3, #25
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	491a      	ldr	r1, [pc, #104]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e82:	f7f9 ff05 	bl	800bc90 <HAL_GetTick>
 8011e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011e88:	e008      	b.n	8011e9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e8a:	f7f9 ff01 	bl	800bc90 <HAL_GetTick>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d901      	bls.n	8011e9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8011e98:	2303      	movs	r3, #3
 8011e9a:	e308      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011e9c:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f003 0304 	and.w	r3, r3, #4
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d0f0      	beq.n	8011e8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ea8:	f7f9 ff22 	bl	800bcf0 <HAL_GetREVID>
 8011eac:	4603      	mov	r3, r0
 8011eae:	f241 0203 	movw	r2, #4099	; 0x1003
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d81a      	bhi.n	8011eec <HAL_RCC_OscConfig+0x28c>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	691b      	ldr	r3, [r3, #16]
 8011eba:	2b40      	cmp	r3, #64	; 0x40
 8011ebc:	d108      	bne.n	8011ed0 <HAL_RCC_OscConfig+0x270>
 8011ebe:	4b0a      	ldr	r3, [pc, #40]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011ec6:	4a08      	ldr	r2, [pc, #32]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ecc:	6053      	str	r3, [r2, #4]
 8011ece:	e031      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
 8011ed0:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	691b      	ldr	r3, [r3, #16]
 8011edc:	031b      	lsls	r3, r3, #12
 8011ede:	4902      	ldr	r1, [pc, #8]	; (8011ee8 <HAL_RCC_OscConfig+0x288>)
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	604b      	str	r3, [r1, #4]
 8011ee4:	e026      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
 8011ee6:	bf00      	nop
 8011ee8:	58024400 	.word	0x58024400
 8011eec:	4b9a      	ldr	r3, [pc, #616]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	061b      	lsls	r3, r3, #24
 8011efa:	4997      	ldr	r1, [pc, #604]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011efc:	4313      	orrs	r3, r2
 8011efe:	604b      	str	r3, [r1, #4]
 8011f00:	e018      	b.n	8011f34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011f02:	4b95      	ldr	r3, [pc, #596]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	4a94      	ldr	r2, [pc, #592]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f08:	f023 0301 	bic.w	r3, r3, #1
 8011f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f0e:	f7f9 febf 	bl	800bc90 <HAL_GetTick>
 8011f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011f14:	e008      	b.n	8011f28 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011f16:	f7f9 febb 	bl	800bc90 <HAL_GetTick>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	1ad3      	subs	r3, r2, r3
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d901      	bls.n	8011f28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8011f24:	2303      	movs	r3, #3
 8011f26:	e2c2      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011f28:	4b8b      	ldr	r3, [pc, #556]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f003 0304 	and.w	r3, r3, #4
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1f0      	bne.n	8011f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f003 0310 	and.w	r3, r3, #16
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f000 80a9 	beq.w	8012094 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f42:	4b85      	ldr	r3, [pc, #532]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011f4c:	4b82      	ldr	r3, [pc, #520]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f50:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011f52:	69bb      	ldr	r3, [r7, #24]
 8011f54:	2b08      	cmp	r3, #8
 8011f56:	d007      	beq.n	8011f68 <HAL_RCC_OscConfig+0x308>
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	2b18      	cmp	r3, #24
 8011f5c:	d13a      	bne.n	8011fd4 <HAL_RCC_OscConfig+0x374>
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	f003 0303 	and.w	r3, r3, #3
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d135      	bne.n	8011fd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011f68:	4b7b      	ldr	r3, [pc, #492]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d005      	beq.n	8011f80 <HAL_RCC_OscConfig+0x320>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	2b80      	cmp	r3, #128	; 0x80
 8011f7a:	d001      	beq.n	8011f80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	e296      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011f80:	f7f9 feb6 	bl	800bcf0 <HAL_GetREVID>
 8011f84:	4603      	mov	r3, r0
 8011f86:	f241 0203 	movw	r2, #4099	; 0x1003
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d817      	bhi.n	8011fbe <HAL_RCC_OscConfig+0x35e>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6a1b      	ldr	r3, [r3, #32]
 8011f92:	2b20      	cmp	r3, #32
 8011f94:	d108      	bne.n	8011fa8 <HAL_RCC_OscConfig+0x348>
 8011f96:	4b70      	ldr	r3, [pc, #448]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011f9e:	4a6e      	ldr	r2, [pc, #440]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011fa4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011fa6:	e075      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011fa8:	4b6b      	ldr	r3, [pc, #428]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6a1b      	ldr	r3, [r3, #32]
 8011fb4:	069b      	lsls	r3, r3, #26
 8011fb6:	4968      	ldr	r1, [pc, #416]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011fbc:	e06a      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011fbe:	4b66      	ldr	r3, [pc, #408]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6a1b      	ldr	r3, [r3, #32]
 8011fca:	061b      	lsls	r3, r3, #24
 8011fcc:	4962      	ldr	r1, [pc, #392]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011fd2:	e05f      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	69db      	ldr	r3, [r3, #28]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d042      	beq.n	8012062 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011fdc:	4b5e      	ldr	r3, [pc, #376]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a5d      	ldr	r2, [pc, #372]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8011fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011fe8:	f7f9 fe52 	bl	800bc90 <HAL_GetTick>
 8011fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011fee:	e008      	b.n	8012002 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011ff0:	f7f9 fe4e 	bl	800bc90 <HAL_GetTick>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	d901      	bls.n	8012002 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8011ffe:	2303      	movs	r3, #3
 8012000:	e255      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012002:	4b55      	ldr	r3, [pc, #340]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801200a:	2b00      	cmp	r3, #0
 801200c:	d0f0      	beq.n	8011ff0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801200e:	f7f9 fe6f 	bl	800bcf0 <HAL_GetREVID>
 8012012:	4603      	mov	r3, r0
 8012014:	f241 0203 	movw	r2, #4099	; 0x1003
 8012018:	4293      	cmp	r3, r2
 801201a:	d817      	bhi.n	801204c <HAL_RCC_OscConfig+0x3ec>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6a1b      	ldr	r3, [r3, #32]
 8012020:	2b20      	cmp	r3, #32
 8012022:	d108      	bne.n	8012036 <HAL_RCC_OscConfig+0x3d6>
 8012024:	4b4c      	ldr	r3, [pc, #304]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801202c:	4a4a      	ldr	r2, [pc, #296]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 801202e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012032:	6053      	str	r3, [r2, #4]
 8012034:	e02e      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
 8012036:	4b48      	ldr	r3, [pc, #288]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a1b      	ldr	r3, [r3, #32]
 8012042:	069b      	lsls	r3, r3, #26
 8012044:	4944      	ldr	r1, [pc, #272]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012046:	4313      	orrs	r3, r2
 8012048:	604b      	str	r3, [r1, #4]
 801204a:	e023      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
 801204c:	4b42      	ldr	r3, [pc, #264]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6a1b      	ldr	r3, [r3, #32]
 8012058:	061b      	lsls	r3, r3, #24
 801205a:	493f      	ldr	r1, [pc, #252]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 801205c:	4313      	orrs	r3, r2
 801205e:	60cb      	str	r3, [r1, #12]
 8012060:	e018      	b.n	8012094 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8012062:	4b3d      	ldr	r3, [pc, #244]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a3c      	ldr	r2, [pc, #240]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801206c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801206e:	f7f9 fe0f 	bl	800bc90 <HAL_GetTick>
 8012072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012074:	e008      	b.n	8012088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8012076:	f7f9 fe0b 	bl	800bc90 <HAL_GetTick>
 801207a:	4602      	mov	r2, r0
 801207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207e:	1ad3      	subs	r3, r2, r3
 8012080:	2b02      	cmp	r3, #2
 8012082:	d901      	bls.n	8012088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012084:	2303      	movs	r3, #3
 8012086:	e212      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8012088:	4b33      	ldr	r3, [pc, #204]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012090:	2b00      	cmp	r3, #0
 8012092:	d1f0      	bne.n	8012076 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f003 0308 	and.w	r3, r3, #8
 801209c:	2b00      	cmp	r3, #0
 801209e:	d036      	beq.n	801210e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	695b      	ldr	r3, [r3, #20]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d019      	beq.n	80120dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80120a8:	4b2b      	ldr	r3, [pc, #172]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 80120aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ac:	4a2a      	ldr	r2, [pc, #168]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 80120ae:	f043 0301 	orr.w	r3, r3, #1
 80120b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120b4:	f7f9 fdec 	bl	800bc90 <HAL_GetTick>
 80120b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80120ba:	e008      	b.n	80120ce <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80120bc:	f7f9 fde8 	bl	800bc90 <HAL_GetTick>
 80120c0:	4602      	mov	r2, r0
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	1ad3      	subs	r3, r2, r3
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d901      	bls.n	80120ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80120ca:	2303      	movs	r3, #3
 80120cc:	e1ef      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80120ce:	4b22      	ldr	r3, [pc, #136]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 80120d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d2:	f003 0302 	and.w	r3, r3, #2
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d0f0      	beq.n	80120bc <HAL_RCC_OscConfig+0x45c>
 80120da:	e018      	b.n	801210e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80120dc:	4b1e      	ldr	r3, [pc, #120]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 80120de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120e0:	4a1d      	ldr	r2, [pc, #116]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 80120e2:	f023 0301 	bic.w	r3, r3, #1
 80120e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120e8:	f7f9 fdd2 	bl	800bc90 <HAL_GetTick>
 80120ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80120ee:	e008      	b.n	8012102 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80120f0:	f7f9 fdce 	bl	800bc90 <HAL_GetTick>
 80120f4:	4602      	mov	r2, r0
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	1ad3      	subs	r3, r2, r3
 80120fa:	2b02      	cmp	r3, #2
 80120fc:	d901      	bls.n	8012102 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80120fe:	2303      	movs	r3, #3
 8012100:	e1d5      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012102:	4b15      	ldr	r3, [pc, #84]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012106:	f003 0302 	and.w	r3, r3, #2
 801210a:	2b00      	cmp	r3, #0
 801210c:	d1f0      	bne.n	80120f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f003 0320 	and.w	r3, r3, #32
 8012116:	2b00      	cmp	r3, #0
 8012118:	d039      	beq.n	801218e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d01c      	beq.n	801215c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012122:	4b0d      	ldr	r3, [pc, #52]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4a0c      	ldr	r2, [pc, #48]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 8012128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801212c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801212e:	f7f9 fdaf 	bl	800bc90 <HAL_GetTick>
 8012132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012134:	e008      	b.n	8012148 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012136:	f7f9 fdab 	bl	800bc90 <HAL_GetTick>
 801213a:	4602      	mov	r2, r0
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	2b02      	cmp	r3, #2
 8012142:	d901      	bls.n	8012148 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8012144:	2303      	movs	r3, #3
 8012146:	e1b2      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012148:	4b03      	ldr	r3, [pc, #12]	; (8012158 <HAL_RCC_OscConfig+0x4f8>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012150:	2b00      	cmp	r3, #0
 8012152:	d0f0      	beq.n	8012136 <HAL_RCC_OscConfig+0x4d6>
 8012154:	e01b      	b.n	801218e <HAL_RCC_OscConfig+0x52e>
 8012156:	bf00      	nop
 8012158:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801215c:	4b9b      	ldr	r3, [pc, #620]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a9a      	ldr	r2, [pc, #616]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012166:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8012168:	f7f9 fd92 	bl	800bc90 <HAL_GetTick>
 801216c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801216e:	e008      	b.n	8012182 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012170:	f7f9 fd8e 	bl	800bc90 <HAL_GetTick>
 8012174:	4602      	mov	r2, r0
 8012176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	2b02      	cmp	r3, #2
 801217c:	d901      	bls.n	8012182 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801217e:	2303      	movs	r3, #3
 8012180:	e195      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012182:	4b92      	ldr	r3, [pc, #584]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1f0      	bne.n	8012170 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f003 0304 	and.w	r3, r3, #4
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 8081 	beq.w	801229e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801219c:	4b8c      	ldr	r3, [pc, #560]	; (80123d0 <HAL_RCC_OscConfig+0x770>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a8b      	ldr	r2, [pc, #556]	; (80123d0 <HAL_RCC_OscConfig+0x770>)
 80121a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80121a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80121a8:	f7f9 fd72 	bl	800bc90 <HAL_GetTick>
 80121ac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121ae:	e008      	b.n	80121c2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80121b0:	f7f9 fd6e 	bl	800bc90 <HAL_GetTick>
 80121b4:	4602      	mov	r2, r0
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	2b64      	cmp	r3, #100	; 0x64
 80121bc:	d901      	bls.n	80121c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80121be:	2303      	movs	r3, #3
 80121c0:	e175      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121c2:	4b83      	ldr	r3, [pc, #524]	; (80123d0 <HAL_RCC_OscConfig+0x770>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d0f0      	beq.n	80121b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	689b      	ldr	r3, [r3, #8]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d106      	bne.n	80121e4 <HAL_RCC_OscConfig+0x584>
 80121d6:	4b7d      	ldr	r3, [pc, #500]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121da:	4a7c      	ldr	r2, [pc, #496]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121dc:	f043 0301 	orr.w	r3, r3, #1
 80121e0:	6713      	str	r3, [r2, #112]	; 0x70
 80121e2:	e02d      	b.n	8012240 <HAL_RCC_OscConfig+0x5e0>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	689b      	ldr	r3, [r3, #8]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10c      	bne.n	8012206 <HAL_RCC_OscConfig+0x5a6>
 80121ec:	4b77      	ldr	r3, [pc, #476]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f0:	4a76      	ldr	r2, [pc, #472]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121f2:	f023 0301 	bic.w	r3, r3, #1
 80121f6:	6713      	str	r3, [r2, #112]	; 0x70
 80121f8:	4b74      	ldr	r3, [pc, #464]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121fc:	4a73      	ldr	r2, [pc, #460]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80121fe:	f023 0304 	bic.w	r3, r3, #4
 8012202:	6713      	str	r3, [r2, #112]	; 0x70
 8012204:	e01c      	b.n	8012240 <HAL_RCC_OscConfig+0x5e0>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	2b05      	cmp	r3, #5
 801220c:	d10c      	bne.n	8012228 <HAL_RCC_OscConfig+0x5c8>
 801220e:	4b6f      	ldr	r3, [pc, #444]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	4a6e      	ldr	r2, [pc, #440]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012214:	f043 0304 	orr.w	r3, r3, #4
 8012218:	6713      	str	r3, [r2, #112]	; 0x70
 801221a:	4b6c      	ldr	r3, [pc, #432]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801221e:	4a6b      	ldr	r2, [pc, #428]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012220:	f043 0301 	orr.w	r3, r3, #1
 8012224:	6713      	str	r3, [r2, #112]	; 0x70
 8012226:	e00b      	b.n	8012240 <HAL_RCC_OscConfig+0x5e0>
 8012228:	4b68      	ldr	r3, [pc, #416]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801222c:	4a67      	ldr	r2, [pc, #412]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801222e:	f023 0301 	bic.w	r3, r3, #1
 8012232:	6713      	str	r3, [r2, #112]	; 0x70
 8012234:	4b65      	ldr	r3, [pc, #404]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012238:	4a64      	ldr	r2, [pc, #400]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801223a:	f023 0304 	bic.w	r3, r3, #4
 801223e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d015      	beq.n	8012274 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012248:	f7f9 fd22 	bl	800bc90 <HAL_GetTick>
 801224c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801224e:	e00a      	b.n	8012266 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012250:	f7f9 fd1e 	bl	800bc90 <HAL_GetTick>
 8012254:	4602      	mov	r2, r0
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	f241 3288 	movw	r2, #5000	; 0x1388
 801225e:	4293      	cmp	r3, r2
 8012260:	d901      	bls.n	8012266 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8012262:	2303      	movs	r3, #3
 8012264:	e123      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012266:	4b59      	ldr	r3, [pc, #356]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226a:	f003 0302 	and.w	r3, r3, #2
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0ee      	beq.n	8012250 <HAL_RCC_OscConfig+0x5f0>
 8012272:	e014      	b.n	801229e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012274:	f7f9 fd0c 	bl	800bc90 <HAL_GetTick>
 8012278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801227a:	e00a      	b.n	8012292 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801227c:	f7f9 fd08 	bl	800bc90 <HAL_GetTick>
 8012280:	4602      	mov	r2, r0
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	f241 3288 	movw	r2, #5000	; 0x1388
 801228a:	4293      	cmp	r3, r2
 801228c:	d901      	bls.n	8012292 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801228e:	2303      	movs	r3, #3
 8012290:	e10d      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012292:	4b4e      	ldr	r3, [pc, #312]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012296:	f003 0302 	and.w	r3, r3, #2
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1ee      	bne.n	801227c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f000 8102 	beq.w	80124ac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80122a8:	4b48      	ldr	r3, [pc, #288]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80122aa:	691b      	ldr	r3, [r3, #16]
 80122ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80122b0:	2b18      	cmp	r3, #24
 80122b2:	f000 80bd 	beq.w	8012430 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	f040 809e 	bne.w	80123fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80122c0:	4b42      	ldr	r3, [pc, #264]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a41      	ldr	r2, [pc, #260]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80122c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80122ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80122cc:	f7f9 fce0 	bl	800bc90 <HAL_GetTick>
 80122d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80122d2:	e008      	b.n	80122e6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80122d4:	f7f9 fcdc 	bl	800bc90 <HAL_GetTick>
 80122d8:	4602      	mov	r2, r0
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	2b02      	cmp	r3, #2
 80122e0:	d901      	bls.n	80122e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80122e2:	2303      	movs	r3, #3
 80122e4:	e0e3      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80122e6:	4b39      	ldr	r3, [pc, #228]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1f0      	bne.n	80122d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80122f2:	4b36      	ldr	r3, [pc, #216]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80122f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80122f6:	4b37      	ldr	r3, [pc, #220]	; (80123d4 <HAL_RCC_OscConfig+0x774>)
 80122f8:	4013      	ands	r3, r2
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012302:	0112      	lsls	r2, r2, #4
 8012304:	430a      	orrs	r2, r1
 8012306:	4931      	ldr	r1, [pc, #196]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012308:	4313      	orrs	r3, r2
 801230a:	628b      	str	r3, [r1, #40]	; 0x28
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012310:	3b01      	subs	r3, #1
 8012312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801231a:	3b01      	subs	r3, #1
 801231c:	025b      	lsls	r3, r3, #9
 801231e:	b29b      	uxth	r3, r3
 8012320:	431a      	orrs	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012326:	3b01      	subs	r3, #1
 8012328:	041b      	lsls	r3, r3, #16
 801232a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801232e:	431a      	orrs	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012334:	3b01      	subs	r3, #1
 8012336:	061b      	lsls	r3, r3, #24
 8012338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801233c:	4923      	ldr	r1, [pc, #140]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801233e:	4313      	orrs	r3, r2
 8012340:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8012342:	4b22      	ldr	r3, [pc, #136]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012346:	4a21      	ldr	r2, [pc, #132]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012348:	f023 0301 	bic.w	r3, r3, #1
 801234c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801234e:	4b1f      	ldr	r3, [pc, #124]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012352:	4b21      	ldr	r3, [pc, #132]	; (80123d8 <HAL_RCC_OscConfig+0x778>)
 8012354:	4013      	ands	r3, r2
 8012356:	687a      	ldr	r2, [r7, #4]
 8012358:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801235a:	00d2      	lsls	r2, r2, #3
 801235c:	491b      	ldr	r1, [pc, #108]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801235e:	4313      	orrs	r3, r2
 8012360:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012362:	4b1a      	ldr	r3, [pc, #104]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012366:	f023 020c 	bic.w	r2, r3, #12
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801236e:	4917      	ldr	r1, [pc, #92]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012370:	4313      	orrs	r3, r2
 8012372:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012374:	4b15      	ldr	r3, [pc, #84]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012378:	f023 0202 	bic.w	r2, r3, #2
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012380:	4912      	ldr	r1, [pc, #72]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012382:	4313      	orrs	r3, r2
 8012384:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8012386:	4b11      	ldr	r3, [pc, #68]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238a:	4a10      	ldr	r2, [pc, #64]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 801238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012392:	4b0e      	ldr	r3, [pc, #56]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012396:	4a0d      	ldr	r2, [pc, #52]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 8012398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801239c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801239e:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a2:	4a0a      	ldr	r2, [pc, #40]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80123a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80123aa:	4b08      	ldr	r3, [pc, #32]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ae:	4a07      	ldr	r2, [pc, #28]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123b0:	f043 0301 	orr.w	r3, r3, #1
 80123b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80123b6:	4b05      	ldr	r3, [pc, #20]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	4a04      	ldr	r2, [pc, #16]	; (80123cc <HAL_RCC_OscConfig+0x76c>)
 80123bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80123c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80123c2:	f7f9 fc65 	bl	800bc90 <HAL_GetTick>
 80123c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80123c8:	e011      	b.n	80123ee <HAL_RCC_OscConfig+0x78e>
 80123ca:	bf00      	nop
 80123cc:	58024400 	.word	0x58024400
 80123d0:	58024800 	.word	0x58024800
 80123d4:	fffffc0c 	.word	0xfffffc0c
 80123d8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80123dc:	f7f9 fc58 	bl	800bc90 <HAL_GetTick>
 80123e0:	4602      	mov	r2, r0
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d901      	bls.n	80123ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80123ea:	2303      	movs	r3, #3
 80123ec:	e05f      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80123ee:	4b32      	ldr	r3, [pc, #200]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d0f0      	beq.n	80123dc <HAL_RCC_OscConfig+0x77c>
 80123fa:	e057      	b.n	80124ac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80123fc:	4b2e      	ldr	r3, [pc, #184]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a2d      	ldr	r2, [pc, #180]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 8012402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012408:	f7f9 fc42 	bl	800bc90 <HAL_GetTick>
 801240c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801240e:	e008      	b.n	8012422 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012410:	f7f9 fc3e 	bl	800bc90 <HAL_GetTick>
 8012414:	4602      	mov	r2, r0
 8012416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	2b02      	cmp	r3, #2
 801241c:	d901      	bls.n	8012422 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801241e:	2303      	movs	r3, #3
 8012420:	e045      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012422:	4b25      	ldr	r3, [pc, #148]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801242a:	2b00      	cmp	r3, #0
 801242c:	d1f0      	bne.n	8012410 <HAL_RCC_OscConfig+0x7b0>
 801242e:	e03d      	b.n	80124ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8012430:	4b21      	ldr	r3, [pc, #132]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 8012432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012434:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8012436:	4b20      	ldr	r3, [pc, #128]	; (80124b8 <HAL_RCC_OscConfig+0x858>)
 8012438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012440:	2b01      	cmp	r3, #1
 8012442:	d031      	beq.n	80124a8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	f003 0203 	and.w	r2, r3, #3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801244e:	429a      	cmp	r2, r3
 8012450:	d12a      	bne.n	80124a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	091b      	lsrs	r3, r3, #4
 8012456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801245e:	429a      	cmp	r2, r3
 8012460:	d122      	bne.n	80124a8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801246c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801246e:	429a      	cmp	r2, r3
 8012470:	d11a      	bne.n	80124a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	0a5b      	lsrs	r3, r3, #9
 8012476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801247e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012480:	429a      	cmp	r2, r3
 8012482:	d111      	bne.n	80124a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	0c1b      	lsrs	r3, r3, #16
 8012488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012490:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012492:	429a      	cmp	r2, r3
 8012494:	d108      	bne.n	80124a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	0e1b      	lsrs	r3, r3, #24
 801249a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d001      	beq.n	80124ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	e000      	b.n	80124ae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80124ac:	2300      	movs	r3, #0
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3730      	adds	r7, #48	; 0x30
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	58024400 	.word	0x58024400

080124bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d101      	bne.n	80124d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80124cc:	2301      	movs	r3, #1
 80124ce:	e19c      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80124d0:	4b8a      	ldr	r3, [pc, #552]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f003 030f 	and.w	r3, r3, #15
 80124d8:	683a      	ldr	r2, [r7, #0]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d910      	bls.n	8012500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80124de:	4b87      	ldr	r3, [pc, #540]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f023 020f 	bic.w	r2, r3, #15
 80124e6:	4985      	ldr	r1, [pc, #532]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	4313      	orrs	r3, r2
 80124ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80124ee:	4b83      	ldr	r3, [pc, #524]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 030f 	and.w	r3, r3, #15
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d001      	beq.n	8012500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80124fc:	2301      	movs	r3, #1
 80124fe:	e184      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f003 0304 	and.w	r3, r3, #4
 8012508:	2b00      	cmp	r3, #0
 801250a:	d010      	beq.n	801252e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	691a      	ldr	r2, [r3, #16]
 8012510:	4b7b      	ldr	r3, [pc, #492]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012512:	699b      	ldr	r3, [r3, #24]
 8012514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012518:	429a      	cmp	r2, r3
 801251a:	d908      	bls.n	801252e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801251c:	4b78      	ldr	r3, [pc, #480]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801251e:	699b      	ldr	r3, [r3, #24]
 8012520:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	691b      	ldr	r3, [r3, #16]
 8012528:	4975      	ldr	r1, [pc, #468]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801252a:	4313      	orrs	r3, r2
 801252c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f003 0308 	and.w	r3, r3, #8
 8012536:	2b00      	cmp	r3, #0
 8012538:	d010      	beq.n	801255c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	695a      	ldr	r2, [r3, #20]
 801253e:	4b70      	ldr	r3, [pc, #448]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012546:	429a      	cmp	r2, r3
 8012548:	d908      	bls.n	801255c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801254a:	4b6d      	ldr	r3, [pc, #436]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801254c:	69db      	ldr	r3, [r3, #28]
 801254e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	695b      	ldr	r3, [r3, #20]
 8012556:	496a      	ldr	r1, [pc, #424]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012558:	4313      	orrs	r3, r2
 801255a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f003 0310 	and.w	r3, r3, #16
 8012564:	2b00      	cmp	r3, #0
 8012566:	d010      	beq.n	801258a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	699a      	ldr	r2, [r3, #24]
 801256c:	4b64      	ldr	r3, [pc, #400]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801256e:	69db      	ldr	r3, [r3, #28]
 8012570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012574:	429a      	cmp	r2, r3
 8012576:	d908      	bls.n	801258a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012578:	4b61      	ldr	r3, [pc, #388]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801257a:	69db      	ldr	r3, [r3, #28]
 801257c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	699b      	ldr	r3, [r3, #24]
 8012584:	495e      	ldr	r1, [pc, #376]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012586:	4313      	orrs	r3, r2
 8012588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f003 0320 	and.w	r3, r3, #32
 8012592:	2b00      	cmp	r3, #0
 8012594:	d010      	beq.n	80125b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	69da      	ldr	r2, [r3, #28]
 801259a:	4b59      	ldr	r3, [pc, #356]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801259c:	6a1b      	ldr	r3, [r3, #32]
 801259e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d908      	bls.n	80125b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80125a6:	4b56      	ldr	r3, [pc, #344]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125a8:	6a1b      	ldr	r3, [r3, #32]
 80125aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	69db      	ldr	r3, [r3, #28]
 80125b2:	4953      	ldr	r1, [pc, #332]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125b4:	4313      	orrs	r3, r2
 80125b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f003 0302 	and.w	r3, r3, #2
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d010      	beq.n	80125e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	68da      	ldr	r2, [r3, #12]
 80125c8:	4b4d      	ldr	r3, [pc, #308]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	f003 030f 	and.w	r3, r3, #15
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d908      	bls.n	80125e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125d4:	4b4a      	ldr	r3, [pc, #296]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125d6:	699b      	ldr	r3, [r3, #24]
 80125d8:	f023 020f 	bic.w	r2, r3, #15
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	4947      	ldr	r1, [pc, #284]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125e2:	4313      	orrs	r3, r2
 80125e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d055      	beq.n	801269e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80125f2:	4b43      	ldr	r3, [pc, #268]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	4940      	ldr	r1, [pc, #256]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012600:	4313      	orrs	r3, r2
 8012602:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	2b02      	cmp	r3, #2
 801260a:	d107      	bne.n	801261c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801260c:	4b3c      	ldr	r3, [pc, #240]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012614:	2b00      	cmp	r3, #0
 8012616:	d121      	bne.n	801265c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	e0f6      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	2b03      	cmp	r3, #3
 8012622:	d107      	bne.n	8012634 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012624:	4b36      	ldr	r3, [pc, #216]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d115      	bne.n	801265c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012630:	2301      	movs	r3, #1
 8012632:	e0ea      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d107      	bne.n	801264c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801263c:	4b30      	ldr	r3, [pc, #192]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012644:	2b00      	cmp	r3, #0
 8012646:	d109      	bne.n	801265c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012648:	2301      	movs	r3, #1
 801264a:	e0de      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801264c:	4b2c      	ldr	r3, [pc, #176]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f003 0304 	and.w	r3, r3, #4
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8012658:	2301      	movs	r3, #1
 801265a:	e0d6      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801265c:	4b28      	ldr	r3, [pc, #160]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801265e:	691b      	ldr	r3, [r3, #16]
 8012660:	f023 0207 	bic.w	r2, r3, #7
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4925      	ldr	r1, [pc, #148]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801266a:	4313      	orrs	r3, r2
 801266c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801266e:	f7f9 fb0f 	bl	800bc90 <HAL_GetTick>
 8012672:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012674:	e00a      	b.n	801268c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012676:	f7f9 fb0b 	bl	800bc90 <HAL_GetTick>
 801267a:	4602      	mov	r2, r0
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	f241 3288 	movw	r2, #5000	; 0x1388
 8012684:	4293      	cmp	r3, r2
 8012686:	d901      	bls.n	801268c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8012688:	2303      	movs	r3, #3
 801268a:	e0be      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801268c:	4b1c      	ldr	r3, [pc, #112]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 801268e:	691b      	ldr	r3, [r3, #16]
 8012690:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	00db      	lsls	r3, r3, #3
 801269a:	429a      	cmp	r2, r3
 801269c:	d1eb      	bne.n	8012676 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f003 0302 	and.w	r3, r3, #2
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d010      	beq.n	80126cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68da      	ldr	r2, [r3, #12]
 80126ae:	4b14      	ldr	r3, [pc, #80]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80126b0:	699b      	ldr	r3, [r3, #24]
 80126b2:	f003 030f 	and.w	r3, r3, #15
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d208      	bcs.n	80126cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80126ba:	4b11      	ldr	r3, [pc, #68]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	f023 020f 	bic.w	r2, r3, #15
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	490e      	ldr	r1, [pc, #56]	; (8012700 <HAL_RCC_ClockConfig+0x244>)
 80126c8:	4313      	orrs	r3, r2
 80126ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80126cc:	4b0b      	ldr	r3, [pc, #44]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f003 030f 	and.w	r3, r3, #15
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d214      	bcs.n	8012704 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80126da:	4b08      	ldr	r3, [pc, #32]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f023 020f 	bic.w	r2, r3, #15
 80126e2:	4906      	ldr	r1, [pc, #24]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	4313      	orrs	r3, r2
 80126e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80126ea:	4b04      	ldr	r3, [pc, #16]	; (80126fc <HAL_RCC_ClockConfig+0x240>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f003 030f 	and.w	r3, r3, #15
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d005      	beq.n	8012704 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80126f8:	2301      	movs	r3, #1
 80126fa:	e086      	b.n	801280a <HAL_RCC_ClockConfig+0x34e>
 80126fc:	52002000 	.word	0x52002000
 8012700:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f003 0304 	and.w	r3, r3, #4
 801270c:	2b00      	cmp	r3, #0
 801270e:	d010      	beq.n	8012732 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	691a      	ldr	r2, [r3, #16]
 8012714:	4b3f      	ldr	r3, [pc, #252]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 8012716:	699b      	ldr	r3, [r3, #24]
 8012718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801271c:	429a      	cmp	r2, r3
 801271e:	d208      	bcs.n	8012732 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012720:	4b3c      	ldr	r3, [pc, #240]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 8012722:	699b      	ldr	r3, [r3, #24]
 8012724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	4939      	ldr	r1, [pc, #228]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 801272e:	4313      	orrs	r3, r2
 8012730:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f003 0308 	and.w	r3, r3, #8
 801273a:	2b00      	cmp	r3, #0
 801273c:	d010      	beq.n	8012760 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	695a      	ldr	r2, [r3, #20]
 8012742:	4b34      	ldr	r3, [pc, #208]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801274a:	429a      	cmp	r2, r3
 801274c:	d208      	bcs.n	8012760 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801274e:	4b31      	ldr	r3, [pc, #196]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 8012750:	69db      	ldr	r3, [r3, #28]
 8012752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	695b      	ldr	r3, [r3, #20]
 801275a:	492e      	ldr	r1, [pc, #184]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 801275c:	4313      	orrs	r3, r2
 801275e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f003 0310 	and.w	r3, r3, #16
 8012768:	2b00      	cmp	r3, #0
 801276a:	d010      	beq.n	801278e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	699a      	ldr	r2, [r3, #24]
 8012770:	4b28      	ldr	r3, [pc, #160]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 8012772:	69db      	ldr	r3, [r3, #28]
 8012774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012778:	429a      	cmp	r2, r3
 801277a:	d208      	bcs.n	801278e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801277c:	4b25      	ldr	r3, [pc, #148]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 801277e:	69db      	ldr	r3, [r3, #28]
 8012780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	4922      	ldr	r1, [pc, #136]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 801278a:	4313      	orrs	r3, r2
 801278c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f003 0320 	and.w	r3, r3, #32
 8012796:	2b00      	cmp	r3, #0
 8012798:	d010      	beq.n	80127bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	69da      	ldr	r2, [r3, #28]
 801279e:	4b1d      	ldr	r3, [pc, #116]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 80127a0:	6a1b      	ldr	r3, [r3, #32]
 80127a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d208      	bcs.n	80127bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80127aa:	4b1a      	ldr	r3, [pc, #104]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	69db      	ldr	r3, [r3, #28]
 80127b6:	4917      	ldr	r1, [pc, #92]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 80127b8:	4313      	orrs	r3, r2
 80127ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80127bc:	f000 f834 	bl	8012828 <HAL_RCC_GetSysClockFreq>
 80127c0:	4602      	mov	r2, r0
 80127c2:	4b14      	ldr	r3, [pc, #80]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	0a1b      	lsrs	r3, r3, #8
 80127c8:	f003 030f 	and.w	r3, r3, #15
 80127cc:	4912      	ldr	r1, [pc, #72]	; (8012818 <HAL_RCC_ClockConfig+0x35c>)
 80127ce:	5ccb      	ldrb	r3, [r1, r3]
 80127d0:	f003 031f 	and.w	r3, r3, #31
 80127d4:	fa22 f303 	lsr.w	r3, r2, r3
 80127d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127da:	4b0e      	ldr	r3, [pc, #56]	; (8012814 <HAL_RCC_ClockConfig+0x358>)
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	f003 030f 	and.w	r3, r3, #15
 80127e2:	4a0d      	ldr	r2, [pc, #52]	; (8012818 <HAL_RCC_ClockConfig+0x35c>)
 80127e4:	5cd3      	ldrb	r3, [r2, r3]
 80127e6:	f003 031f 	and.w	r3, r3, #31
 80127ea:	693a      	ldr	r2, [r7, #16]
 80127ec:	fa22 f303 	lsr.w	r3, r2, r3
 80127f0:	4a0a      	ldr	r2, [pc, #40]	; (801281c <HAL_RCC_ClockConfig+0x360>)
 80127f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80127f4:	4a0a      	ldr	r2, [pc, #40]	; (8012820 <HAL_RCC_ClockConfig+0x364>)
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80127fa:	4b0a      	ldr	r3, [pc, #40]	; (8012824 <HAL_RCC_ClockConfig+0x368>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f9 f9fc 	bl	800bbfc <HAL_InitTick>
 8012804:	4603      	mov	r3, r0
 8012806:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012808:	7bfb      	ldrb	r3, [r7, #15]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3718      	adds	r7, #24
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	58024400 	.word	0x58024400
 8012818:	08038a64 	.word	0x08038a64
 801281c:	24000004 	.word	0x24000004
 8012820:	24000000 	.word	0x24000000
 8012824:	24000008 	.word	0x24000008

08012828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012828:	b480      	push	{r7}
 801282a:	b089      	sub	sp, #36	; 0x24
 801282c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801282e:	4bb3      	ldr	r3, [pc, #716]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012836:	2b18      	cmp	r3, #24
 8012838:	f200 8155 	bhi.w	8012ae6 <HAL_RCC_GetSysClockFreq+0x2be>
 801283c:	a201      	add	r2, pc, #4	; (adr r2, 8012844 <HAL_RCC_GetSysClockFreq+0x1c>)
 801283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012842:	bf00      	nop
 8012844:	080128a9 	.word	0x080128a9
 8012848:	08012ae7 	.word	0x08012ae7
 801284c:	08012ae7 	.word	0x08012ae7
 8012850:	08012ae7 	.word	0x08012ae7
 8012854:	08012ae7 	.word	0x08012ae7
 8012858:	08012ae7 	.word	0x08012ae7
 801285c:	08012ae7 	.word	0x08012ae7
 8012860:	08012ae7 	.word	0x08012ae7
 8012864:	080128cf 	.word	0x080128cf
 8012868:	08012ae7 	.word	0x08012ae7
 801286c:	08012ae7 	.word	0x08012ae7
 8012870:	08012ae7 	.word	0x08012ae7
 8012874:	08012ae7 	.word	0x08012ae7
 8012878:	08012ae7 	.word	0x08012ae7
 801287c:	08012ae7 	.word	0x08012ae7
 8012880:	08012ae7 	.word	0x08012ae7
 8012884:	080128d5 	.word	0x080128d5
 8012888:	08012ae7 	.word	0x08012ae7
 801288c:	08012ae7 	.word	0x08012ae7
 8012890:	08012ae7 	.word	0x08012ae7
 8012894:	08012ae7 	.word	0x08012ae7
 8012898:	08012ae7 	.word	0x08012ae7
 801289c:	08012ae7 	.word	0x08012ae7
 80128a0:	08012ae7 	.word	0x08012ae7
 80128a4:	080128db 	.word	0x080128db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128a8:	4b94      	ldr	r3, [pc, #592]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f003 0320 	and.w	r3, r3, #32
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80128b4:	4b91      	ldr	r3, [pc, #580]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	08db      	lsrs	r3, r3, #3
 80128ba:	f003 0303 	and.w	r3, r3, #3
 80128be:	4a90      	ldr	r2, [pc, #576]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80128c0:	fa22 f303 	lsr.w	r3, r2, r3
 80128c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80128c6:	e111      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80128c8:	4b8d      	ldr	r3, [pc, #564]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80128ca:	61bb      	str	r3, [r7, #24]
    break;
 80128cc:	e10e      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80128ce:	4b8d      	ldr	r3, [pc, #564]	; (8012b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80128d0:	61bb      	str	r3, [r7, #24]
    break;
 80128d2:	e10b      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80128d4:	4b8c      	ldr	r3, [pc, #560]	; (8012b08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80128d6:	61bb      	str	r3, [r7, #24]
    break;
 80128d8:	e108      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80128da:	4b88      	ldr	r3, [pc, #544]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128de:	f003 0303 	and.w	r3, r3, #3
 80128e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80128e4:	4b85      	ldr	r3, [pc, #532]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128e8:	091b      	lsrs	r3, r3, #4
 80128ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80128f0:	4b82      	ldr	r3, [pc, #520]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80128fa:	4b80      	ldr	r3, [pc, #512]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80128fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128fe:	08db      	lsrs	r3, r3, #3
 8012900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012904:	68fa      	ldr	r2, [r7, #12]
 8012906:	fb02 f303 	mul.w	r3, r2, r3
 801290a:	ee07 3a90 	vmov	s15, r3
 801290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012912:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	2b00      	cmp	r3, #0
 801291a:	f000 80e1 	beq.w	8012ae0 <HAL_RCC_GetSysClockFreq+0x2b8>
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	2b02      	cmp	r3, #2
 8012922:	f000 8083 	beq.w	8012a2c <HAL_RCC_GetSysClockFreq+0x204>
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	2b02      	cmp	r3, #2
 801292a:	f200 80a1 	bhi.w	8012a70 <HAL_RCC_GetSysClockFreq+0x248>
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d003      	beq.n	801293c <HAL_RCC_GetSysClockFreq+0x114>
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d056      	beq.n	80129e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801293a:	e099      	b.n	8012a70 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801293c:	4b6f      	ldr	r3, [pc, #444]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f003 0320 	and.w	r3, r3, #32
 8012944:	2b00      	cmp	r3, #0
 8012946:	d02d      	beq.n	80129a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012948:	4b6c      	ldr	r3, [pc, #432]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	08db      	lsrs	r3, r3, #3
 801294e:	f003 0303 	and.w	r3, r3, #3
 8012952:	4a6b      	ldr	r2, [pc, #428]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012954:	fa22 f303 	lsr.w	r3, r2, r3
 8012958:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	ee07 3a90 	vmov	s15, r3
 8012960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	ee07 3a90 	vmov	s15, r3
 801296a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012972:	4b62      	ldr	r3, [pc, #392]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801297a:	ee07 3a90 	vmov	s15, r3
 801297e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012982:	ed97 6a02 	vldr	s12, [r7, #8]
 8012986:	eddf 5a61 	vldr	s11, [pc, #388]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 801298a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801298e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801299e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80129a2:	e087      	b.n	8012ab4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	ee07 3a90 	vmov	s15, r3
 80129aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8012b10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80129b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129b6:	4b51      	ldr	r3, [pc, #324]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80129b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129be:	ee07 3a90 	vmov	s15, r3
 80129c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80129ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80129ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80129e6:	e065      	b.n	8012ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	ee07 3a90 	vmov	s15, r3
 80129ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80129f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129fa:	4b40      	ldr	r3, [pc, #256]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80129fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a02:	ee07 3a90 	vmov	s15, r3
 8012a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a2a:	e043      	b.n	8012ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	ee07 3a90 	vmov	s15, r3
 8012a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012b18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8012a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a3e:	4b2f      	ldr	r3, [pc, #188]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a46:	ee07 3a90 	vmov	s15, r3
 8012a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a6e:	e021      	b.n	8012ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	ee07 3a90 	vmov	s15, r3
 8012a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a82:	4b1e      	ldr	r3, [pc, #120]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a8a:	ee07 3a90 	vmov	s15, r3
 8012a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8012a96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012ab2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012ab4:	4b11      	ldr	r3, [pc, #68]	; (8012afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ab8:	0a5b      	lsrs	r3, r3, #9
 8012aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012abe:	3301      	adds	r3, #1
 8012ac0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	ee07 3a90 	vmov	s15, r3
 8012ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8012ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ad8:	ee17 3a90 	vmov	r3, s15
 8012adc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8012ade:	e005      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	61bb      	str	r3, [r7, #24]
    break;
 8012ae4:	e002      	b.n	8012aec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8012ae6:	4b07      	ldr	r3, [pc, #28]	; (8012b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012ae8:	61bb      	str	r3, [r7, #24]
    break;
 8012aea:	bf00      	nop
  }

  return sysclockfreq;
 8012aec:	69bb      	ldr	r3, [r7, #24]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3724      	adds	r7, #36	; 0x24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	58024400 	.word	0x58024400
 8012b00:	03d09000 	.word	0x03d09000
 8012b04:	003d0900 	.word	0x003d0900
 8012b08:	017d7840 	.word	0x017d7840
 8012b0c:	46000000 	.word	0x46000000
 8012b10:	4c742400 	.word	0x4c742400
 8012b14:	4a742400 	.word	0x4a742400
 8012b18:	4bbebc20 	.word	0x4bbebc20

08012b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012b22:	f7ff fe81 	bl	8012828 <HAL_RCC_GetSysClockFreq>
 8012b26:	4602      	mov	r2, r0
 8012b28:	4b10      	ldr	r3, [pc, #64]	; (8012b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8012b2a:	699b      	ldr	r3, [r3, #24]
 8012b2c:	0a1b      	lsrs	r3, r3, #8
 8012b2e:	f003 030f 	and.w	r3, r3, #15
 8012b32:	490f      	ldr	r1, [pc, #60]	; (8012b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8012b34:	5ccb      	ldrb	r3, [r1, r3]
 8012b36:	f003 031f 	and.w	r3, r3, #31
 8012b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012b40:	4b0a      	ldr	r3, [pc, #40]	; (8012b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8012b42:	699b      	ldr	r3, [r3, #24]
 8012b44:	f003 030f 	and.w	r3, r3, #15
 8012b48:	4a09      	ldr	r2, [pc, #36]	; (8012b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8012b4a:	5cd3      	ldrb	r3, [r2, r3]
 8012b4c:	f003 031f 	and.w	r3, r3, #31
 8012b50:	687a      	ldr	r2, [r7, #4]
 8012b52:	fa22 f303 	lsr.w	r3, r2, r3
 8012b56:	4a07      	ldr	r2, [pc, #28]	; (8012b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8012b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012b5a:	4a07      	ldr	r2, [pc, #28]	; (8012b78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012b60:	4b04      	ldr	r3, [pc, #16]	; (8012b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8012b62:	681b      	ldr	r3, [r3, #0]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3708      	adds	r7, #8
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	58024400 	.word	0x58024400
 8012b70:	08038a64 	.word	0x08038a64
 8012b74:	24000004 	.word	0x24000004
 8012b78:	24000000 	.word	0x24000000

08012b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012b80:	f7ff ffcc 	bl	8012b1c <HAL_RCC_GetHCLKFreq>
 8012b84:	4602      	mov	r2, r0
 8012b86:	4b06      	ldr	r3, [pc, #24]	; (8012ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012b88:	69db      	ldr	r3, [r3, #28]
 8012b8a:	091b      	lsrs	r3, r3, #4
 8012b8c:	f003 0307 	and.w	r3, r3, #7
 8012b90:	4904      	ldr	r1, [pc, #16]	; (8012ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012b92:	5ccb      	ldrb	r3, [r1, r3]
 8012b94:	f003 031f 	and.w	r3, r3, #31
 8012b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	58024400 	.word	0x58024400
 8012ba4:	08038a64 	.word	0x08038a64

08012ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012bac:	f7ff ffb6 	bl	8012b1c <HAL_RCC_GetHCLKFreq>
 8012bb0:	4602      	mov	r2, r0
 8012bb2:	4b06      	ldr	r3, [pc, #24]	; (8012bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8012bb4:	69db      	ldr	r3, [r3, #28]
 8012bb6:	0a1b      	lsrs	r3, r3, #8
 8012bb8:	f003 0307 	and.w	r3, r3, #7
 8012bbc:	4904      	ldr	r1, [pc, #16]	; (8012bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012bbe:	5ccb      	ldrb	r3, [r1, r3]
 8012bc0:	f003 031f 	and.w	r3, r3, #31
 8012bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	58024400 	.word	0x58024400
 8012bd0:	08038a64 	.word	0x08038a64

08012bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b086      	sub	sp, #24
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012bdc:	2300      	movs	r3, #0
 8012bde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012be0:	2300      	movs	r3, #0
 8012be2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d03f      	beq.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012bf8:	d02a      	beq.n	8012c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8012bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012bfe:	d824      	bhi.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012c04:	d018      	beq.n	8012c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012c0a:	d81e      	bhi.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d003      	beq.n	8012c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8012c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c14:	d007      	beq.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012c16:	e018      	b.n	8012c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012c18:	4ba3      	ldr	r3, [pc, #652]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1c:	4aa2      	ldr	r2, [pc, #648]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012c24:	e015      	b.n	8012c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	3304      	adds	r3, #4
 8012c2a:	2102      	movs	r1, #2
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f001 f9d5 	bl	8013fdc <RCCEx_PLL2_Config>
 8012c32:	4603      	mov	r3, r0
 8012c34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012c36:	e00c      	b.n	8012c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	3324      	adds	r3, #36	; 0x24
 8012c3c:	2102      	movs	r1, #2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f001 fa7e 	bl	8014140 <RCCEx_PLL3_Config>
 8012c44:	4603      	mov	r3, r0
 8012c46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012c48:	e003      	b.n	8012c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8012c4e:	e000      	b.n	8012c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8012c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d109      	bne.n	8012c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012c58:	4b93      	ldr	r3, [pc, #588]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c64:	4990      	ldr	r1, [pc, #576]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012c66:	4313      	orrs	r3, r2
 8012c68:	650b      	str	r3, [r1, #80]	; 0x50
 8012c6a:	e001      	b.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
 8012c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d03d      	beq.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c80:	2b04      	cmp	r3, #4
 8012c82:	d826      	bhi.n	8012cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012c84:	a201      	add	r2, pc, #4	; (adr r2, 8012c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8012c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c8a:	bf00      	nop
 8012c8c:	08012ca1 	.word	0x08012ca1
 8012c90:	08012caf 	.word	0x08012caf
 8012c94:	08012cc1 	.word	0x08012cc1
 8012c98:	08012cd9 	.word	0x08012cd9
 8012c9c:	08012cd9 	.word	0x08012cd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ca0:	4b81      	ldr	r3, [pc, #516]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca4:	4a80      	ldr	r2, [pc, #512]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012cac:	e015      	b.n	8012cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	3304      	adds	r3, #4
 8012cb2:	2100      	movs	r1, #0
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f001 f991 	bl	8013fdc <RCCEx_PLL2_Config>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012cbe:	e00c      	b.n	8012cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	3324      	adds	r3, #36	; 0x24
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f001 fa3a 	bl	8014140 <RCCEx_PLL3_Config>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012cd0:	e003      	b.n	8012cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8012cd6:	e000      	b.n	8012cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8012cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012cda:	7dfb      	ldrb	r3, [r7, #23]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d109      	bne.n	8012cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012ce0:	4b71      	ldr	r3, [pc, #452]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ce4:	f023 0207 	bic.w	r2, r3, #7
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cec:	496e      	ldr	r1, [pc, #440]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8012cf2:	e001      	b.n	8012cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
 8012cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d042      	beq.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d0c:	d02b      	beq.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8012d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d12:	d825      	bhi.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d14:	2bc0      	cmp	r3, #192	; 0xc0
 8012d16:	d028      	beq.n	8012d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012d18:	2bc0      	cmp	r3, #192	; 0xc0
 8012d1a:	d821      	bhi.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d1c:	2b80      	cmp	r3, #128	; 0x80
 8012d1e:	d016      	beq.n	8012d4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8012d20:	2b80      	cmp	r3, #128	; 0x80
 8012d22:	d81d      	bhi.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d002      	beq.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8012d28:	2b40      	cmp	r3, #64	; 0x40
 8012d2a:	d007      	beq.n	8012d3c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8012d2c:	e018      	b.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d2e:	4b5e      	ldr	r3, [pc, #376]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d32:	4a5d      	ldr	r2, [pc, #372]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012d3a:	e017      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3304      	adds	r3, #4
 8012d40:	2100      	movs	r1, #0
 8012d42:	4618      	mov	r0, r3
 8012d44:	f001 f94a 	bl	8013fdc <RCCEx_PLL2_Config>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012d4c:	e00e      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	3324      	adds	r3, #36	; 0x24
 8012d52:	2100      	movs	r1, #0
 8012d54:	4618      	mov	r0, r3
 8012d56:	f001 f9f3 	bl	8014140 <RCCEx_PLL3_Config>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012d5e:	e005      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012d60:	2301      	movs	r3, #1
 8012d62:	75fb      	strb	r3, [r7, #23]
      break;
 8012d64:	e002      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012d66:	bf00      	nop
 8012d68:	e000      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8012d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d109      	bne.n	8012d86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012d72:	4b4d      	ldr	r3, [pc, #308]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d76:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d7e:	494a      	ldr	r1, [pc, #296]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012d80:	4313      	orrs	r3, r2
 8012d82:	650b      	str	r3, [r1, #80]	; 0x50
 8012d84:	e001      	b.n	8012d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
 8012d88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d049      	beq.n	8012e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012da0:	d030      	beq.n	8012e04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8012da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012da6:	d82a      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012da8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012dac:	d02c      	beq.n	8012e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8012dae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012db2:	d824      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012db8:	d018      	beq.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0x218>
 8012dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012dbe:	d81e      	bhi.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d003      	beq.n	8012dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8012dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012dc8:	d007      	beq.n	8012dda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8012dca:	e018      	b.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012dcc:	4b36      	ldr	r3, [pc, #216]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dd0:	4a35      	ldr	r2, [pc, #212]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012dd8:	e017      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	2100      	movs	r1, #0
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 f8fb 	bl	8013fdc <RCCEx_PLL2_Config>
 8012de6:	4603      	mov	r3, r0
 8012de8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012dea:	e00e      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	3324      	adds	r3, #36	; 0x24
 8012df0:	2100      	movs	r1, #0
 8012df2:	4618      	mov	r0, r3
 8012df4:	f001 f9a4 	bl	8014140 <RCCEx_PLL3_Config>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012dfc:	e005      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	75fb      	strb	r3, [r7, #23]
      break;
 8012e02:	e002      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012e04:	bf00      	nop
 8012e06:	e000      	b.n	8012e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8012e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012e0a:	7dfb      	ldrb	r3, [r7, #23]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10a      	bne.n	8012e26 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012e10:	4b25      	ldr	r3, [pc, #148]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012e1e:	4922      	ldr	r1, [pc, #136]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e20:	4313      	orrs	r3, r2
 8012e22:	658b      	str	r3, [r1, #88]	; 0x58
 8012e24:	e001      	b.n	8012e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e26:	7dfb      	ldrb	r3, [r7, #23]
 8012e28:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d04b      	beq.n	8012ece <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012e40:	d030      	beq.n	8012ea4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8012e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012e46:	d82a      	bhi.n	8012e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012e4c:	d02e      	beq.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8012e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012e52:	d824      	bhi.n	8012e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012e58:	d018      	beq.n	8012e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8012e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012e5e:	d81e      	bhi.n	8012e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d003      	beq.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012e68:	d007      	beq.n	8012e7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8012e6a:	e018      	b.n	8012e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012e6c:	4b0e      	ldr	r3, [pc, #56]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e70:	4a0d      	ldr	r2, [pc, #52]	; (8012ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8012e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e78:	e019      	b.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	3304      	adds	r3, #4
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4618      	mov	r0, r3
 8012e82:	f001 f8ab 	bl	8013fdc <RCCEx_PLL2_Config>
 8012e86:	4603      	mov	r3, r0
 8012e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012e8a:	e010      	b.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	3324      	adds	r3, #36	; 0x24
 8012e90:	2100      	movs	r1, #0
 8012e92:	4618      	mov	r0, r3
 8012e94:	f001 f954 	bl	8014140 <RCCEx_PLL3_Config>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012e9c:	e007      	b.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8012ea2:	e004      	b.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8012ea4:	bf00      	nop
 8012ea6:	e002      	b.n	8012eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8012ea8:	58024400 	.word	0x58024400
      break;
 8012eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012eae:	7dfb      	ldrb	r3, [r7, #23]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d10a      	bne.n	8012eca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012eb4:	4b99      	ldr	r3, [pc, #612]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012ec2:	4996      	ldr	r1, [pc, #600]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012ec4:	4313      	orrs	r3, r2
 8012ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8012ec8:	e001      	b.n	8012ece <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d032      	beq.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ede:	2b30      	cmp	r3, #48	; 0x30
 8012ee0:	d01c      	beq.n	8012f1c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8012ee2:	2b30      	cmp	r3, #48	; 0x30
 8012ee4:	d817      	bhi.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8012ee6:	2b20      	cmp	r3, #32
 8012ee8:	d00c      	beq.n	8012f04 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8012eea:	2b20      	cmp	r3, #32
 8012eec:	d813      	bhi.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d016      	beq.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8012ef2:	2b10      	cmp	r3, #16
 8012ef4:	d10f      	bne.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ef6:	4b89      	ldr	r3, [pc, #548]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efa:	4a88      	ldr	r2, [pc, #544]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012f02:	e00e      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3304      	adds	r3, #4
 8012f08:	2102      	movs	r1, #2
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f001 f866 	bl	8013fdc <RCCEx_PLL2_Config>
 8012f10:	4603      	mov	r3, r0
 8012f12:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012f14:	e005      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8012f16:	2301      	movs	r3, #1
 8012f18:	75fb      	strb	r3, [r7, #23]
      break;
 8012f1a:	e002      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8012f1c:	bf00      	nop
 8012f1e:	e000      	b.n	8012f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8012f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d109      	bne.n	8012f3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012f28:	4b7c      	ldr	r3, [pc, #496]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f34:	4979      	ldr	r1, [pc, #484]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012f36:	4313      	orrs	r3, r2
 8012f38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012f3a:	e001      	b.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f3c:	7dfb      	ldrb	r3, [r7, #23]
 8012f3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d047      	beq.n	8012fdc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f54:	d030      	beq.n	8012fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8012f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f5a:	d82a      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8012f5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012f60:	d02c      	beq.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8012f62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012f66:	d824      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8012f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f6c:	d018      	beq.n	8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8012f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f72:	d81e      	bhi.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d003      	beq.n	8012f80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8012f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f7c:	d007      	beq.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8012f7e:	e018      	b.n	8012fb2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f80:	4b66      	ldr	r3, [pc, #408]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f84:	4a65      	ldr	r2, [pc, #404]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012f8c:	e017      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	3304      	adds	r3, #4
 8012f92:	2100      	movs	r1, #0
 8012f94:	4618      	mov	r0, r3
 8012f96:	f001 f821 	bl	8013fdc <RCCEx_PLL2_Config>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012f9e:	e00e      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3324      	adds	r3, #36	; 0x24
 8012fa4:	2100      	movs	r1, #0
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f001 f8ca 	bl	8014140 <RCCEx_PLL3_Config>
 8012fac:	4603      	mov	r3, r0
 8012fae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012fb0:	e005      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8012fb6:	e002      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8012fb8:	bf00      	nop
 8012fba:	e000      	b.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8012fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d109      	bne.n	8012fd8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012fc4:	4b55      	ldr	r3, [pc, #340]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fc8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fd0:	4952      	ldr	r1, [pc, #328]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8012fd2:	4313      	orrs	r3, r2
 8012fd4:	650b      	str	r3, [r1, #80]	; 0x50
 8012fd6:	e001      	b.n	8012fdc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fd8:	7dfb      	ldrb	r3, [r7, #23]
 8012fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d049      	beq.n	801307c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012ff0:	d02e      	beq.n	8013050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8012ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012ff6:	d828      	bhi.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8012ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012ffc:	d02a      	beq.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8012ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013002:	d822      	bhi.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8013008:	d026      	beq.n	8013058 <HAL_RCCEx_PeriphCLKConfig+0x484>
 801300a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801300e:	d81c      	bhi.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8013010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013014:	d010      	beq.n	8013038 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8013016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801301a:	d816      	bhi.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x476>
 801301c:	2b00      	cmp	r3, #0
 801301e:	d01d      	beq.n	801305c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8013020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013024:	d111      	bne.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	3304      	adds	r3, #4
 801302a:	2101      	movs	r1, #1
 801302c:	4618      	mov	r0, r3
 801302e:	f000 ffd5 	bl	8013fdc <RCCEx_PLL2_Config>
 8013032:	4603      	mov	r3, r0
 8013034:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8013036:	e012      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3324      	adds	r3, #36	; 0x24
 801303c:	2101      	movs	r1, #1
 801303e:	4618      	mov	r0, r3
 8013040:	f001 f87e 	bl	8014140 <RCCEx_PLL3_Config>
 8013044:	4603      	mov	r3, r0
 8013046:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8013048:	e009      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801304a:	2301      	movs	r3, #1
 801304c:	75fb      	strb	r3, [r7, #23]
      break;
 801304e:	e006      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013050:	bf00      	nop
 8013052:	e004      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013054:	bf00      	nop
 8013056:	e002      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8013058:	bf00      	nop
 801305a:	e000      	b.n	801305e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801305c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d109      	bne.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8013064:	4b2d      	ldr	r3, [pc, #180]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013068:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013070:	492a      	ldr	r1, [pc, #168]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013072:	4313      	orrs	r3, r2
 8013074:	650b      	str	r3, [r1, #80]	; 0x50
 8013076:	e001      	b.n	801307c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013078:	7dfb      	ldrb	r3, [r7, #23]
 801307a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013084:	2b00      	cmp	r3, #0
 8013086:	d04d      	beq.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801308e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013092:	d02e      	beq.n	80130f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8013094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013098:	d828      	bhi.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 801309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801309e:	d02a      	beq.n	80130f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80130a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130a4:	d822      	bhi.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80130a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80130aa:	d026      	beq.n	80130fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 80130ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80130b0:	d81c      	bhi.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80130b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80130b6:	d010      	beq.n	80130da <HAL_RCCEx_PeriphCLKConfig+0x506>
 80130b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80130bc:	d816      	bhi.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d01d      	beq.n	80130fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80130c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80130c6:	d111      	bne.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	3304      	adds	r3, #4
 80130cc:	2101      	movs	r1, #1
 80130ce:	4618      	mov	r0, r3
 80130d0:	f000 ff84 	bl	8013fdc <RCCEx_PLL2_Config>
 80130d4:	4603      	mov	r3, r0
 80130d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80130d8:	e012      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	3324      	adds	r3, #36	; 0x24
 80130de:	2101      	movs	r1, #1
 80130e0:	4618      	mov	r0, r3
 80130e2:	f001 f82d 	bl	8014140 <RCCEx_PLL3_Config>
 80130e6:	4603      	mov	r3, r0
 80130e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80130ea:	e009      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80130ec:	2301      	movs	r3, #1
 80130ee:	75fb      	strb	r3, [r7, #23]
      break;
 80130f0:	e006      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80130f2:	bf00      	nop
 80130f4:	e004      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80130f6:	bf00      	nop
 80130f8:	e002      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80130fa:	bf00      	nop
 80130fc:	e000      	b.n	8013100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80130fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013100:	7dfb      	ldrb	r3, [r7, #23]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d10c      	bne.n	8013120 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8013106:	4b05      	ldr	r3, [pc, #20]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801310a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013114:	4901      	ldr	r1, [pc, #4]	; (801311c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8013116:	4313      	orrs	r3, r2
 8013118:	658b      	str	r3, [r1, #88]	; 0x58
 801311a:	e003      	b.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0x550>
 801311c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013120:	7dfb      	ldrb	r3, [r7, #23]
 8013122:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801312c:	2b00      	cmp	r3, #0
 801312e:	d02f      	beq.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013138:	d00e      	beq.n	8013158 <HAL_RCCEx_PeriphCLKConfig+0x584>
 801313a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801313e:	d814      	bhi.n	801316a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8013140:	2b00      	cmp	r3, #0
 8013142:	d015      	beq.n	8013170 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8013144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013148:	d10f      	bne.n	801316a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801314a:	4baf      	ldr	r3, [pc, #700]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314e:	4aae      	ldr	r2, [pc, #696]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013154:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8013156:	e00c      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3304      	adds	r3, #4
 801315c:	2101      	movs	r1, #1
 801315e:	4618      	mov	r0, r3
 8013160:	f000 ff3c 	bl	8013fdc <RCCEx_PLL2_Config>
 8013164:	4603      	mov	r3, r0
 8013166:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8013168:	e003      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801316a:	2301      	movs	r3, #1
 801316c:	75fb      	strb	r3, [r7, #23]
      break;
 801316e:	e000      	b.n	8013172 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8013170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d109      	bne.n	801318c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8013178:	4ba3      	ldr	r3, [pc, #652]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801317c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013184:	49a0      	ldr	r1, [pc, #640]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013186:	4313      	orrs	r3, r2
 8013188:	650b      	str	r3, [r1, #80]	; 0x50
 801318a:	e001      	b.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801318c:	7dfb      	ldrb	r3, [r7, #23]
 801318e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013198:	2b00      	cmp	r3, #0
 801319a:	d032      	beq.n	8013202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	d81b      	bhi.n	80131dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80131a4:	a201      	add	r2, pc, #4	; (adr r2, 80131ac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80131a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131aa:	bf00      	nop
 80131ac:	080131e3 	.word	0x080131e3
 80131b0:	080131bd 	.word	0x080131bd
 80131b4:	080131cb 	.word	0x080131cb
 80131b8:	080131e3 	.word	0x080131e3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80131bc:	4b92      	ldr	r3, [pc, #584]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c0:	4a91      	ldr	r2, [pc, #580]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80131c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80131c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80131c8:	e00c      	b.n	80131e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	3304      	adds	r3, #4
 80131ce:	2102      	movs	r1, #2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f000 ff03 	bl	8013fdc <RCCEx_PLL2_Config>
 80131d6:	4603      	mov	r3, r0
 80131d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80131da:	e003      	b.n	80131e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80131dc:	2301      	movs	r3, #1
 80131de:	75fb      	strb	r3, [r7, #23]
      break;
 80131e0:	e000      	b.n	80131e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80131e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80131e4:	7dfb      	ldrb	r3, [r7, #23]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d109      	bne.n	80131fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80131ea:	4b87      	ldr	r3, [pc, #540]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80131ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80131ee:	f023 0203 	bic.w	r2, r3, #3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131f6:	4984      	ldr	r1, [pc, #528]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80131f8:	4313      	orrs	r3, r2
 80131fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80131fc:	e001      	b.n	8013202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131fe:	7dfb      	ldrb	r3, [r7, #23]
 8013200:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801320a:	2b00      	cmp	r3, #0
 801320c:	f000 8086 	beq.w	801331c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013210:	4b7e      	ldr	r3, [pc, #504]	; (801340c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4a7d      	ldr	r2, [pc, #500]	; (801340c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8013216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801321c:	f7f8 fd38 	bl	800bc90 <HAL_GetTick>
 8013220:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013222:	e009      	b.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013224:	f7f8 fd34 	bl	800bc90 <HAL_GetTick>
 8013228:	4602      	mov	r2, r0
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	1ad3      	subs	r3, r2, r3
 801322e:	2b64      	cmp	r3, #100	; 0x64
 8013230:	d902      	bls.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8013232:	2303      	movs	r3, #3
 8013234:	75fb      	strb	r3, [r7, #23]
        break;
 8013236:	e005      	b.n	8013244 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013238:	4b74      	ldr	r3, [pc, #464]	; (801340c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013240:	2b00      	cmp	r3, #0
 8013242:	d0ef      	beq.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8013244:	7dfb      	ldrb	r3, [r7, #23]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d166      	bne.n	8013318 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801324a:	4b6f      	ldr	r3, [pc, #444]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801324c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013254:	4053      	eors	r3, r2
 8013256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801325a:	2b00      	cmp	r3, #0
 801325c:	d013      	beq.n	8013286 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801325e:	4b6a      	ldr	r3, [pc, #424]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013266:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013268:	4b67      	ldr	r3, [pc, #412]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801326c:	4a66      	ldr	r2, [pc, #408]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801326e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013272:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013274:	4b64      	ldr	r3, [pc, #400]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013278:	4a63      	ldr	r2, [pc, #396]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801327e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8013280:	4a61      	ldr	r2, [pc, #388]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013290:	d115      	bne.n	80132be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013292:	f7f8 fcfd 	bl	800bc90 <HAL_GetTick>
 8013296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013298:	e00b      	b.n	80132b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801329a:	f7f8 fcf9 	bl	800bc90 <HAL_GetTick>
 801329e:	4602      	mov	r2, r0
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d902      	bls.n	80132b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80132ac:	2303      	movs	r3, #3
 80132ae:	75fb      	strb	r3, [r7, #23]
            break;
 80132b0:	e005      	b.n	80132be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80132b2:	4b55      	ldr	r3, [pc, #340]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b6:	f003 0302 	and.w	r3, r3, #2
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d0ed      	beq.n	801329a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80132be:	7dfb      	ldrb	r3, [r7, #23]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d126      	bne.n	8013312 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80132ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80132ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80132d2:	d10d      	bne.n	80132f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80132d4:	4b4c      	ldr	r3, [pc, #304]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132d6:	691b      	ldr	r3, [r3, #16]
 80132d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80132e2:	0919      	lsrs	r1, r3, #4
 80132e4:	4b4a      	ldr	r3, [pc, #296]	; (8013410 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80132e6:	400b      	ands	r3, r1
 80132e8:	4947      	ldr	r1, [pc, #284]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132ea:	4313      	orrs	r3, r2
 80132ec:	610b      	str	r3, [r1, #16]
 80132ee:	e005      	b.n	80132fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80132f0:	4b45      	ldr	r3, [pc, #276]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132f2:	691b      	ldr	r3, [r3, #16]
 80132f4:	4a44      	ldr	r2, [pc, #272]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80132fa:	6113      	str	r3, [r2, #16]
 80132fc:	4b42      	ldr	r3, [pc, #264]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80132fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801330a:	493f      	ldr	r1, [pc, #252]	; (8013408 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801330c:	4313      	orrs	r3, r2
 801330e:	670b      	str	r3, [r1, #112]	; 0x70
 8013310:	e004      	b.n	801331c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013312:	7dfb      	ldrb	r3, [r7, #23]
 8013314:	75bb      	strb	r3, [r7, #22]
 8013316:	e001      	b.n	801331c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013318:	7dfb      	ldrb	r3, [r7, #23]
 801331a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f003 0301 	and.w	r3, r3, #1
 8013324:	2b00      	cmp	r3, #0
 8013326:	f000 8085 	beq.w	8013434 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801332e:	2b28      	cmp	r3, #40	; 0x28
 8013330:	d866      	bhi.n	8013400 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8013332:	a201      	add	r2, pc, #4	; (adr r2, 8013338 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8013334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013338:	08013415 	.word	0x08013415
 801333c:	08013401 	.word	0x08013401
 8013340:	08013401 	.word	0x08013401
 8013344:	08013401 	.word	0x08013401
 8013348:	08013401 	.word	0x08013401
 801334c:	08013401 	.word	0x08013401
 8013350:	08013401 	.word	0x08013401
 8013354:	08013401 	.word	0x08013401
 8013358:	080133dd 	.word	0x080133dd
 801335c:	08013401 	.word	0x08013401
 8013360:	08013401 	.word	0x08013401
 8013364:	08013401 	.word	0x08013401
 8013368:	08013401 	.word	0x08013401
 801336c:	08013401 	.word	0x08013401
 8013370:	08013401 	.word	0x08013401
 8013374:	08013401 	.word	0x08013401
 8013378:	080133ef 	.word	0x080133ef
 801337c:	08013401 	.word	0x08013401
 8013380:	08013401 	.word	0x08013401
 8013384:	08013401 	.word	0x08013401
 8013388:	08013401 	.word	0x08013401
 801338c:	08013401 	.word	0x08013401
 8013390:	08013401 	.word	0x08013401
 8013394:	08013401 	.word	0x08013401
 8013398:	08013415 	.word	0x08013415
 801339c:	08013401 	.word	0x08013401
 80133a0:	08013401 	.word	0x08013401
 80133a4:	08013401 	.word	0x08013401
 80133a8:	08013401 	.word	0x08013401
 80133ac:	08013401 	.word	0x08013401
 80133b0:	08013401 	.word	0x08013401
 80133b4:	08013401 	.word	0x08013401
 80133b8:	08013415 	.word	0x08013415
 80133bc:	08013401 	.word	0x08013401
 80133c0:	08013401 	.word	0x08013401
 80133c4:	08013401 	.word	0x08013401
 80133c8:	08013401 	.word	0x08013401
 80133cc:	08013401 	.word	0x08013401
 80133d0:	08013401 	.word	0x08013401
 80133d4:	08013401 	.word	0x08013401
 80133d8:	08013415 	.word	0x08013415
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	3304      	adds	r3, #4
 80133e0:	2101      	movs	r1, #1
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 fdfa 	bl	8013fdc <RCCEx_PLL2_Config>
 80133e8:	4603      	mov	r3, r0
 80133ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80133ec:	e013      	b.n	8013416 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3324      	adds	r3, #36	; 0x24
 80133f2:	2101      	movs	r1, #1
 80133f4:	4618      	mov	r0, r3
 80133f6:	f000 fea3 	bl	8014140 <RCCEx_PLL3_Config>
 80133fa:	4603      	mov	r3, r0
 80133fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80133fe:	e00a      	b.n	8013416 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013400:	2301      	movs	r3, #1
 8013402:	75fb      	strb	r3, [r7, #23]
      break;
 8013404:	e007      	b.n	8013416 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8013406:	bf00      	nop
 8013408:	58024400 	.word	0x58024400
 801340c:	58024800 	.word	0x58024800
 8013410:	00ffffcf 	.word	0x00ffffcf
      break;
 8013414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013416:	7dfb      	ldrb	r3, [r7, #23]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d109      	bne.n	8013430 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801341c:	4b96      	ldr	r3, [pc, #600]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013420:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013428:	4993      	ldr	r1, [pc, #588]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801342a:	4313      	orrs	r3, r2
 801342c:	654b      	str	r3, [r1, #84]	; 0x54
 801342e:	e001      	b.n	8013434 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	f003 0302 	and.w	r3, r3, #2
 801343c:	2b00      	cmp	r3, #0
 801343e:	d038      	beq.n	80134b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013444:	2b05      	cmp	r3, #5
 8013446:	d821      	bhi.n	801348c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8013448:	a201      	add	r2, pc, #4	; (adr r2, 8013450 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801344e:	bf00      	nop
 8013450:	08013493 	.word	0x08013493
 8013454:	08013469 	.word	0x08013469
 8013458:	0801347b 	.word	0x0801347b
 801345c:	08013493 	.word	0x08013493
 8013460:	08013493 	.word	0x08013493
 8013464:	08013493 	.word	0x08013493
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	3304      	adds	r3, #4
 801346c:	2101      	movs	r1, #1
 801346e:	4618      	mov	r0, r3
 8013470:	f000 fdb4 	bl	8013fdc <RCCEx_PLL2_Config>
 8013474:	4603      	mov	r3, r0
 8013476:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8013478:	e00c      	b.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	3324      	adds	r3, #36	; 0x24
 801347e:	2101      	movs	r1, #1
 8013480:	4618      	mov	r0, r3
 8013482:	f000 fe5d 	bl	8014140 <RCCEx_PLL3_Config>
 8013486:	4603      	mov	r3, r0
 8013488:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801348a:	e003      	b.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801348c:	2301      	movs	r3, #1
 801348e:	75fb      	strb	r3, [r7, #23]
      break;
 8013490:	e000      	b.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8013492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013494:	7dfb      	ldrb	r3, [r7, #23]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d109      	bne.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801349a:	4b77      	ldr	r3, [pc, #476]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801349e:	f023 0207 	bic.w	r2, r3, #7
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134a6:	4974      	ldr	r1, [pc, #464]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80134a8:	4313      	orrs	r3, r2
 80134aa:	654b      	str	r3, [r1, #84]	; 0x54
 80134ac:	e001      	b.n	80134b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134ae:	7dfb      	ldrb	r3, [r7, #23]
 80134b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	f003 0304 	and.w	r3, r3, #4
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d03a      	beq.n	8013534 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134c4:	2b05      	cmp	r3, #5
 80134c6:	d821      	bhi.n	801350c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80134c8:	a201      	add	r2, pc, #4	; (adr r2, 80134d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80134ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ce:	bf00      	nop
 80134d0:	08013513 	.word	0x08013513
 80134d4:	080134e9 	.word	0x080134e9
 80134d8:	080134fb 	.word	0x080134fb
 80134dc:	08013513 	.word	0x08013513
 80134e0:	08013513 	.word	0x08013513
 80134e4:	08013513 	.word	0x08013513
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3304      	adds	r3, #4
 80134ec:	2101      	movs	r1, #1
 80134ee:	4618      	mov	r0, r3
 80134f0:	f000 fd74 	bl	8013fdc <RCCEx_PLL2_Config>
 80134f4:	4603      	mov	r3, r0
 80134f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80134f8:	e00c      	b.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	3324      	adds	r3, #36	; 0x24
 80134fe:	2101      	movs	r1, #1
 8013500:	4618      	mov	r0, r3
 8013502:	f000 fe1d 	bl	8014140 <RCCEx_PLL3_Config>
 8013506:	4603      	mov	r3, r0
 8013508:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801350a:	e003      	b.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801350c:	2301      	movs	r3, #1
 801350e:	75fb      	strb	r3, [r7, #23]
      break;
 8013510:	e000      	b.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8013512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d10a      	bne.n	8013530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801351a:	4b57      	ldr	r3, [pc, #348]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801351e:	f023 0207 	bic.w	r2, r3, #7
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013528:	4953      	ldr	r1, [pc, #332]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801352a:	4313      	orrs	r3, r2
 801352c:	658b      	str	r3, [r1, #88]	; 0x58
 801352e:	e001      	b.n	8013534 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013530:	7dfb      	ldrb	r3, [r7, #23]
 8013532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f003 0320 	and.w	r3, r3, #32
 801353c:	2b00      	cmp	r3, #0
 801353e:	d04b      	beq.n	80135d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801354a:	d02e      	beq.n	80135aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 801354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013550:	d828      	bhi.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013556:	d02a      	beq.n	80135ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8013558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801355c:	d822      	bhi.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801355e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013562:	d026      	beq.n	80135b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8013564:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013568:	d81c      	bhi.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801356a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801356e:	d010      	beq.n	8013592 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8013570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013574:	d816      	bhi.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8013576:	2b00      	cmp	r3, #0
 8013578:	d01d      	beq.n	80135b6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801357a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801357e:	d111      	bne.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	3304      	adds	r3, #4
 8013584:	2100      	movs	r1, #0
 8013586:	4618      	mov	r0, r3
 8013588:	f000 fd28 	bl	8013fdc <RCCEx_PLL2_Config>
 801358c:	4603      	mov	r3, r0
 801358e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013590:	e012      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	3324      	adds	r3, #36	; 0x24
 8013596:	2102      	movs	r1, #2
 8013598:	4618      	mov	r0, r3
 801359a:	f000 fdd1 	bl	8014140 <RCCEx_PLL3_Config>
 801359e:	4603      	mov	r3, r0
 80135a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80135a2:	e009      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80135a4:	2301      	movs	r3, #1
 80135a6:	75fb      	strb	r3, [r7, #23]
      break;
 80135a8:	e006      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80135aa:	bf00      	nop
 80135ac:	e004      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80135ae:	bf00      	nop
 80135b0:	e002      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80135b2:	bf00      	nop
 80135b4:	e000      	b.n	80135b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80135b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80135b8:	7dfb      	ldrb	r3, [r7, #23]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d10a      	bne.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80135be:	4b2e      	ldr	r3, [pc, #184]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80135c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135cc:	492a      	ldr	r1, [pc, #168]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80135ce:	4313      	orrs	r3, r2
 80135d0:	654b      	str	r3, [r1, #84]	; 0x54
 80135d2:	e001      	b.n	80135d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135d4:	7dfb      	ldrb	r3, [r7, #23]
 80135d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d04d      	beq.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80135ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80135ee:	d02e      	beq.n	801364e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80135f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80135f4:	d828      	bhi.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80135f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135fa:	d02a      	beq.n	8013652 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80135fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013600:	d822      	bhi.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8013602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013606:	d026      	beq.n	8013656 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8013608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801360c:	d81c      	bhi.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801360e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013612:	d010      	beq.n	8013636 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8013614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013618:	d816      	bhi.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801361a:	2b00      	cmp	r3, #0
 801361c:	d01d      	beq.n	801365a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 801361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013622:	d111      	bne.n	8013648 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	3304      	adds	r3, #4
 8013628:	2100      	movs	r1, #0
 801362a:	4618      	mov	r0, r3
 801362c:	f000 fcd6 	bl	8013fdc <RCCEx_PLL2_Config>
 8013630:	4603      	mov	r3, r0
 8013632:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8013634:	e012      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	3324      	adds	r3, #36	; 0x24
 801363a:	2102      	movs	r1, #2
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fd7f 	bl	8014140 <RCCEx_PLL3_Config>
 8013642:	4603      	mov	r3, r0
 8013644:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8013646:	e009      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013648:	2301      	movs	r3, #1
 801364a:	75fb      	strb	r3, [r7, #23]
      break;
 801364c:	e006      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801364e:	bf00      	nop
 8013650:	e004      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013652:	bf00      	nop
 8013654:	e002      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8013656:	bf00      	nop
 8013658:	e000      	b.n	801365c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801365a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801365c:	7dfb      	ldrb	r3, [r7, #23]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d10c      	bne.n	801367c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013662:	4b05      	ldr	r3, [pc, #20]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013666:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013670:	4901      	ldr	r1, [pc, #4]	; (8013678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8013672:	4313      	orrs	r3, r2
 8013674:	658b      	str	r3, [r1, #88]	; 0x58
 8013676:	e003      	b.n	8013680 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8013678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801367c:	7dfb      	ldrb	r3, [r7, #23]
 801367e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013688:	2b00      	cmp	r3, #0
 801368a:	d04b      	beq.n	8013724 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013692:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013696:	d02e      	beq.n	80136f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8013698:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801369c:	d828      	bhi.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 801369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136a2:	d02a      	beq.n	80136fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80136a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136a8:	d822      	bhi.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80136aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80136ae:	d026      	beq.n	80136fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80136b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80136b4:	d81c      	bhi.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80136b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136ba:	d010      	beq.n	80136de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80136bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136c0:	d816      	bhi.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d01d      	beq.n	8013702 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80136c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80136ca:	d111      	bne.n	80136f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	3304      	adds	r3, #4
 80136d0:	2100      	movs	r1, #0
 80136d2:	4618      	mov	r0, r3
 80136d4:	f000 fc82 	bl	8013fdc <RCCEx_PLL2_Config>
 80136d8:	4603      	mov	r3, r0
 80136da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80136dc:	e012      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	3324      	adds	r3, #36	; 0x24
 80136e2:	2102      	movs	r1, #2
 80136e4:	4618      	mov	r0, r3
 80136e6:	f000 fd2b 	bl	8014140 <RCCEx_PLL3_Config>
 80136ea:	4603      	mov	r3, r0
 80136ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80136ee:	e009      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80136f0:	2301      	movs	r3, #1
 80136f2:	75fb      	strb	r3, [r7, #23]
      break;
 80136f4:	e006      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80136f6:	bf00      	nop
 80136f8:	e004      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80136fa:	bf00      	nop
 80136fc:	e002      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80136fe:	bf00      	nop
 8013700:	e000      	b.n	8013704 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8013702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013704:	7dfb      	ldrb	r3, [r7, #23]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d10a      	bne.n	8013720 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801370a:	4b9d      	ldr	r3, [pc, #628]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801370e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013718:	4999      	ldr	r1, [pc, #612]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801371a:	4313      	orrs	r3, r2
 801371c:	658b      	str	r3, [r1, #88]	; 0x58
 801371e:	e001      	b.n	8013724 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013720:	7dfb      	ldrb	r3, [r7, #23]
 8013722:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f003 0308 	and.w	r3, r3, #8
 801372c:	2b00      	cmp	r3, #0
 801372e:	d01a      	beq.n	8013766 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801373a:	d10a      	bne.n	8013752 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	3324      	adds	r3, #36	; 0x24
 8013740:	2102      	movs	r1, #2
 8013742:	4618      	mov	r0, r3
 8013744:	f000 fcfc 	bl	8014140 <RCCEx_PLL3_Config>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 801374e:	2301      	movs	r3, #1
 8013750:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013752:	4b8b      	ldr	r3, [pc, #556]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013760:	4987      	ldr	r1, [pc, #540]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013762:	4313      	orrs	r3, r2
 8013764:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f003 0310 	and.w	r3, r3, #16
 801376e:	2b00      	cmp	r3, #0
 8013770:	d01a      	beq.n	80137a8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801377c:	d10a      	bne.n	8013794 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	3324      	adds	r3, #36	; 0x24
 8013782:	2102      	movs	r1, #2
 8013784:	4618      	mov	r0, r3
 8013786:	f000 fcdb 	bl	8014140 <RCCEx_PLL3_Config>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d001      	beq.n	8013794 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8013790:	2301      	movs	r3, #1
 8013792:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013794:	4b7a      	ldr	r3, [pc, #488]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80137a2:	4977      	ldr	r1, [pc, #476]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80137a4:	4313      	orrs	r3, r2
 80137a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d034      	beq.n	801381e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80137ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80137be:	d01d      	beq.n	80137fc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80137c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80137c4:	d817      	bhi.n	80137f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d003      	beq.n	80137d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80137ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137ce:	d009      	beq.n	80137e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80137d0:	e011      	b.n	80137f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	3304      	adds	r3, #4
 80137d6:	2100      	movs	r1, #0
 80137d8:	4618      	mov	r0, r3
 80137da:	f000 fbff 	bl	8013fdc <RCCEx_PLL2_Config>
 80137de:	4603      	mov	r3, r0
 80137e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80137e2:	e00c      	b.n	80137fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3324      	adds	r3, #36	; 0x24
 80137e8:	2102      	movs	r1, #2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 fca8 	bl	8014140 <RCCEx_PLL3_Config>
 80137f0:	4603      	mov	r3, r0
 80137f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80137f4:	e003      	b.n	80137fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80137f6:	2301      	movs	r3, #1
 80137f8:	75fb      	strb	r3, [r7, #23]
      break;
 80137fa:	e000      	b.n	80137fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80137fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80137fe:	7dfb      	ldrb	r3, [r7, #23]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10a      	bne.n	801381a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013804:	4b5e      	ldr	r3, [pc, #376]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013812:	495b      	ldr	r1, [pc, #364]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013814:	4313      	orrs	r3, r2
 8013816:	658b      	str	r3, [r1, #88]	; 0x58
 8013818:	e001      	b.n	801381e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801381a:	7dfb      	ldrb	r3, [r7, #23]
 801381c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013826:	2b00      	cmp	r3, #0
 8013828:	d033      	beq.n	8013892 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013834:	d01c      	beq.n	8013870 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8013836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801383a:	d816      	bhi.n	801386a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 801383c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013840:	d003      	beq.n	801384a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8013842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013846:	d007      	beq.n	8013858 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8013848:	e00f      	b.n	801386a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801384a:	4b4d      	ldr	r3, [pc, #308]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384e:	4a4c      	ldr	r2, [pc, #304]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8013856:	e00c      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3324      	adds	r3, #36	; 0x24
 801385c:	2101      	movs	r1, #1
 801385e:	4618      	mov	r0, r3
 8013860:	f000 fc6e 	bl	8014140 <RCCEx_PLL3_Config>
 8013864:	4603      	mov	r3, r0
 8013866:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8013868:	e003      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801386a:	2301      	movs	r3, #1
 801386c:	75fb      	strb	r3, [r7, #23]
      break;
 801386e:	e000      	b.n	8013872 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8013870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013872:	7dfb      	ldrb	r3, [r7, #23]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d10a      	bne.n	801388e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013878:	4b41      	ldr	r3, [pc, #260]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801387c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013886:	493e      	ldr	r1, [pc, #248]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013888:	4313      	orrs	r3, r2
 801388a:	654b      	str	r3, [r1, #84]	; 0x54
 801388c:	e001      	b.n	8013892 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801388e:	7dfb      	ldrb	r3, [r7, #23]
 8013890:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801389a:	2b00      	cmp	r3, #0
 801389c:	d029      	beq.n	80138f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d003      	beq.n	80138ae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80138a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138aa:	d007      	beq.n	80138bc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80138ac:	e00f      	b.n	80138ce <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80138ae:	4b34      	ldr	r3, [pc, #208]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b2:	4a33      	ldr	r2, [pc, #204]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80138b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80138ba:	e00b      	b.n	80138d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	3304      	adds	r3, #4
 80138c0:	2102      	movs	r1, #2
 80138c2:	4618      	mov	r0, r3
 80138c4:	f000 fb8a 	bl	8013fdc <RCCEx_PLL2_Config>
 80138c8:	4603      	mov	r3, r0
 80138ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80138cc:	e002      	b.n	80138d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80138ce:	2301      	movs	r3, #1
 80138d0:	75fb      	strb	r3, [r7, #23]
      break;
 80138d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80138d4:	7dfb      	ldrb	r3, [r7, #23]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d109      	bne.n	80138ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80138da:	4b29      	ldr	r3, [pc, #164]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138e6:	4926      	ldr	r1, [pc, #152]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80138e8:	4313      	orrs	r3, r2
 80138ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80138ec:	e001      	b.n	80138f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80138ee:	7dfb      	ldrb	r3, [r7, #23]
 80138f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00a      	beq.n	8013914 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	3324      	adds	r3, #36	; 0x24
 8013902:	2102      	movs	r1, #2
 8013904:	4618      	mov	r0, r3
 8013906:	f000 fc1b 	bl	8014140 <RCCEx_PLL3_Config>
 801390a:	4603      	mov	r3, r0
 801390c:	2b00      	cmp	r3, #0
 801390e:	d001      	beq.n	8013914 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8013910:	2301      	movs	r3, #1
 8013912:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801391c:	2b00      	cmp	r3, #0
 801391e:	d033      	beq.n	8013988 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013928:	d017      	beq.n	801395a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 801392a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801392e:	d811      	bhi.n	8013954 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8013930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013934:	d013      	beq.n	801395e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8013936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801393a:	d80b      	bhi.n	8013954 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 801393c:	2b00      	cmp	r3, #0
 801393e:	d010      	beq.n	8013962 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8013940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013944:	d106      	bne.n	8013954 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013946:	4b0e      	ldr	r3, [pc, #56]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394a:	4a0d      	ldr	r2, [pc, #52]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801394c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8013952:	e007      	b.n	8013964 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013954:	2301      	movs	r3, #1
 8013956:	75fb      	strb	r3, [r7, #23]
      break;
 8013958:	e004      	b.n	8013964 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801395a:	bf00      	nop
 801395c:	e002      	b.n	8013964 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801395e:	bf00      	nop
 8013960:	e000      	b.n	8013964 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8013962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8013964:	7dfb      	ldrb	r3, [r7, #23]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d10c      	bne.n	8013984 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801396a:	4b05      	ldr	r3, [pc, #20]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801396e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013976:	4902      	ldr	r1, [pc, #8]	; (8013980 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8013978:	4313      	orrs	r3, r2
 801397a:	654b      	str	r3, [r1, #84]	; 0x54
 801397c:	e004      	b.n	8013988 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 801397e:	bf00      	nop
 8013980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013984:	7dfb      	ldrb	r3, [r7, #23]
 8013986:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013990:	2b00      	cmp	r3, #0
 8013992:	d008      	beq.n	80139a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013994:	4b31      	ldr	r3, [pc, #196]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139a0:	492e      	ldr	r1, [pc, #184]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139a2:	4313      	orrs	r3, r2
 80139a4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d009      	beq.n	80139c6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80139b2:	4b2a      	ldr	r3, [pc, #168]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80139c0:	4926      	ldr	r1, [pc, #152]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139c2:	4313      	orrs	r3, r2
 80139c4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d008      	beq.n	80139e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80139d2:	4b22      	ldr	r3, [pc, #136]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139de:	491f      	ldr	r1, [pc, #124]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139e0:	4313      	orrs	r3, r2
 80139e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d00d      	beq.n	8013a0c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80139f0:	4b1a      	ldr	r3, [pc, #104]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139f2:	691b      	ldr	r3, [r3, #16]
 80139f4:	4a19      	ldr	r2, [pc, #100]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80139fa:	6113      	str	r3, [r2, #16]
 80139fc:	4b17      	ldr	r3, [pc, #92]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80139fe:	691a      	ldr	r2, [r3, #16]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013a06:	4915      	ldr	r1, [pc, #84]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	da08      	bge.n	8013a26 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013a14:	4b11      	ldr	r3, [pc, #68]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a20:	490e      	ldr	r1, [pc, #56]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013a22:	4313      	orrs	r3, r2
 8013a24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d009      	beq.n	8013a46 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013a32:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a40:	4906      	ldr	r1, [pc, #24]	; (8013a5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8013a42:	4313      	orrs	r3, r2
 8013a44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8013a46:	7dbb      	ldrb	r3, [r7, #22]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d101      	bne.n	8013a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	e000      	b.n	8013a52 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8013a50:	2301      	movs	r3, #1
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3718      	adds	r7, #24
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	58024400 	.word	0x58024400

08013a60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013a64:	f7ff f85a 	bl	8012b1c <HAL_RCC_GetHCLKFreq>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	4b06      	ldr	r3, [pc, #24]	; (8013a84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013a6c:	6a1b      	ldr	r3, [r3, #32]
 8013a6e:	091b      	lsrs	r3, r3, #4
 8013a70:	f003 0307 	and.w	r3, r3, #7
 8013a74:	4904      	ldr	r1, [pc, #16]	; (8013a88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013a76:	5ccb      	ldrb	r3, [r1, r3]
 8013a78:	f003 031f 	and.w	r3, r3, #31
 8013a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	58024400 	.word	0x58024400
 8013a88:	08038a64 	.word	0x08038a64

08013a8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b089      	sub	sp, #36	; 0x24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a94:	4ba1      	ldr	r3, [pc, #644]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a98:	f003 0303 	and.w	r3, r3, #3
 8013a9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013a9e:	4b9f      	ldr	r3, [pc, #636]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aa2:	0b1b      	lsrs	r3, r3, #12
 8013aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013aa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013aaa:	4b9c      	ldr	r3, [pc, #624]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aae:	091b      	lsrs	r3, r3, #4
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013ab6:	4b99      	ldr	r3, [pc, #612]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013aba:	08db      	lsrs	r3, r3, #3
 8013abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ac0:	693a      	ldr	r2, [r7, #16]
 8013ac2:	fb02 f303 	mul.w	r3, r2, r3
 8013ac6:	ee07 3a90 	vmov	s15, r3
 8013aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	f000 8111 	beq.w	8013cfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	f000 8083 	beq.w	8013be8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	f200 80a1 	bhi.w	8013c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d003      	beq.n	8013af8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013af0:	69bb      	ldr	r3, [r7, #24]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d056      	beq.n	8013ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013af6:	e099      	b.n	8013c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013af8:	4b88      	ldr	r3, [pc, #544]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f003 0320 	and.w	r3, r3, #32
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d02d      	beq.n	8013b60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b04:	4b85      	ldr	r3, [pc, #532]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	08db      	lsrs	r3, r3, #3
 8013b0a:	f003 0303 	and.w	r3, r3, #3
 8013b0e:	4a84      	ldr	r2, [pc, #528]	; (8013d20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013b10:	fa22 f303 	lsr.w	r3, r2, r3
 8013b14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	ee07 3a90 	vmov	s15, r3
 8013b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b2e:	4b7b      	ldr	r3, [pc, #492]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b36:	ee07 3a90 	vmov	s15, r3
 8013b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013b5e:	e087      	b.n	8013c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	ee07 3a90 	vmov	s15, r3
 8013b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013d28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b72:	4b6a      	ldr	r3, [pc, #424]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b7a:	ee07 3a90 	vmov	s15, r3
 8013b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013ba2:	e065      	b.n	8013c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	ee07 3a90 	vmov	s15, r3
 8013baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bb6:	4b59      	ldr	r3, [pc, #356]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bbe:	ee07 3a90 	vmov	s15, r3
 8013bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013be6:	e043      	b.n	8013c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	ee07 3a90 	vmov	s15, r3
 8013bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bfa:	4b48      	ldr	r3, [pc, #288]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c02:	ee07 3a90 	vmov	s15, r3
 8013c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c2a:	e021      	b.n	8013c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	ee07 3a90 	vmov	s15, r3
 8013c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c3e:	4b37      	ldr	r3, [pc, #220]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c46:	ee07 3a90 	vmov	s15, r3
 8013c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013c70:	4b2a      	ldr	r3, [pc, #168]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c74:	0a5b      	lsrs	r3, r3, #9
 8013c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c7a:	ee07 3a90 	vmov	s15, r3
 8013c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c96:	ee17 2a90 	vmov	r2, s15
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013c9e:	4b1f      	ldr	r3, [pc, #124]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ca2:	0c1b      	lsrs	r3, r3, #16
 8013ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ca8:	ee07 3a90 	vmov	s15, r3
 8013cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cc4:	ee17 2a90 	vmov	r2, s15
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013ccc:	4b13      	ldr	r3, [pc, #76]	; (8013d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd0:	0e1b      	lsrs	r3, r3, #24
 8013cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cd6:	ee07 3a90 	vmov	s15, r3
 8013cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cf2:	ee17 2a90 	vmov	r2, s15
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013cfa:	e008      	b.n	8013d0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2200      	movs	r2, #0
 8013d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	609a      	str	r2, [r3, #8]
}
 8013d0e:	bf00      	nop
 8013d10:	3724      	adds	r7, #36	; 0x24
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop
 8013d1c:	58024400 	.word	0x58024400
 8013d20:	03d09000 	.word	0x03d09000
 8013d24:	46000000 	.word	0x46000000
 8013d28:	4c742400 	.word	0x4c742400
 8013d2c:	4a742400 	.word	0x4a742400
 8013d30:	4bbebc20 	.word	0x4bbebc20

08013d34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b089      	sub	sp, #36	; 0x24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d3c:	4ba1      	ldr	r3, [pc, #644]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d40:	f003 0303 	and.w	r3, r3, #3
 8013d44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013d46:	4b9f      	ldr	r3, [pc, #636]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d4a:	0d1b      	lsrs	r3, r3, #20
 8013d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013d52:	4b9c      	ldr	r3, [pc, #624]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d56:	0a1b      	lsrs	r3, r3, #8
 8013d58:	f003 0301 	and.w	r3, r3, #1
 8013d5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013d5e:	4b99      	ldr	r3, [pc, #612]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d62:	08db      	lsrs	r3, r3, #3
 8013d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d68:	693a      	ldr	r2, [r7, #16]
 8013d6a:	fb02 f303 	mul.w	r3, r2, r3
 8013d6e:	ee07 3a90 	vmov	s15, r3
 8013d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f000 8111 	beq.w	8013fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013d82:	69bb      	ldr	r3, [r7, #24]
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	f000 8083 	beq.w	8013e90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	2b02      	cmp	r3, #2
 8013d8e:	f200 80a1 	bhi.w	8013ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013d92:	69bb      	ldr	r3, [r7, #24]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d003      	beq.n	8013da0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d056      	beq.n	8013e4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013d9e:	e099      	b.n	8013ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013da0:	4b88      	ldr	r3, [pc, #544]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f003 0320 	and.w	r3, r3, #32
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d02d      	beq.n	8013e08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013dac:	4b85      	ldr	r3, [pc, #532]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	08db      	lsrs	r3, r3, #3
 8013db2:	f003 0303 	and.w	r3, r3, #3
 8013db6:	4a84      	ldr	r2, [pc, #528]	; (8013fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013db8:	fa22 f303 	lsr.w	r3, r2, r3
 8013dbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	ee07 3a90 	vmov	s15, r3
 8013dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	ee07 3a90 	vmov	s15, r3
 8013dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dd6:	4b7b      	ldr	r3, [pc, #492]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dde:	ee07 3a90 	vmov	s15, r3
 8013de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013e06:	e087      	b.n	8013f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	ee07 3a90 	vmov	s15, r3
 8013e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e1a:	4b6a      	ldr	r3, [pc, #424]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e22:	ee07 3a90 	vmov	s15, r3
 8013e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e4a:	e065      	b.n	8013f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	ee07 3a90 	vmov	s15, r3
 8013e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e5e:	4b59      	ldr	r3, [pc, #356]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e66:	ee07 3a90 	vmov	s15, r3
 8013e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e8e:	e043      	b.n	8013f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	ee07 3a90 	vmov	s15, r3
 8013e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ea2:	4b48      	ldr	r3, [pc, #288]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eaa:	ee07 3a90 	vmov	s15, r3
 8013eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013ed2:	e021      	b.n	8013f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	ee07 3a90 	vmov	s15, r3
 8013eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ee6:	4b37      	ldr	r3, [pc, #220]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eee:	ee07 3a90 	vmov	s15, r3
 8013ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013f18:	4b2a      	ldr	r3, [pc, #168]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f1c:	0a5b      	lsrs	r3, r3, #9
 8013f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f22:	ee07 3a90 	vmov	s15, r3
 8013f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f3e:	ee17 2a90 	vmov	r2, s15
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8013f46:	4b1f      	ldr	r3, [pc, #124]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4a:	0c1b      	lsrs	r3, r3, #16
 8013f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f50:	ee07 3a90 	vmov	s15, r3
 8013f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f6c:	ee17 2a90 	vmov	r2, s15
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8013f74:	4b13      	ldr	r3, [pc, #76]	; (8013fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f78:	0e1b      	lsrs	r3, r3, #24
 8013f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f7e:	ee07 3a90 	vmov	s15, r3
 8013f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f9a:	ee17 2a90 	vmov	r2, s15
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013fa2:	e008      	b.n	8013fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2200      	movs	r2, #0
 8013fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	609a      	str	r2, [r3, #8]
}
 8013fb6:	bf00      	nop
 8013fb8:	3724      	adds	r7, #36	; 0x24
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	58024400 	.word	0x58024400
 8013fc8:	03d09000 	.word	0x03d09000
 8013fcc:	46000000 	.word	0x46000000
 8013fd0:	4c742400 	.word	0x4c742400
 8013fd4:	4a742400 	.word	0x4a742400
 8013fd8:	4bbebc20 	.word	0x4bbebc20

08013fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013fea:	4b53      	ldr	r3, [pc, #332]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8013fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fee:	f003 0303 	and.w	r3, r3, #3
 8013ff2:	2b03      	cmp	r3, #3
 8013ff4:	d101      	bne.n	8013ffa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	e099      	b.n	801412e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013ffa:	4b4f      	ldr	r3, [pc, #316]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	4a4e      	ldr	r2, [pc, #312]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014006:	f7f7 fe43 	bl	800bc90 <HAL_GetTick>
 801400a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801400c:	e008      	b.n	8014020 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801400e:	f7f7 fe3f 	bl	800bc90 <HAL_GetTick>
 8014012:	4602      	mov	r2, r0
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	2b02      	cmp	r3, #2
 801401a:	d901      	bls.n	8014020 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801401c:	2303      	movs	r3, #3
 801401e:	e086      	b.n	801412e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014020:	4b45      	ldr	r3, [pc, #276]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014028:	2b00      	cmp	r3, #0
 801402a:	d1f0      	bne.n	801400e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801402c:	4b42      	ldr	r3, [pc, #264]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 801402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014030:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	031b      	lsls	r3, r3, #12
 801403a:	493f      	ldr	r1, [pc, #252]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 801403c:	4313      	orrs	r3, r2
 801403e:	628b      	str	r3, [r1, #40]	; 0x28
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	3b01      	subs	r3, #1
 8014046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	3b01      	subs	r3, #1
 8014050:	025b      	lsls	r3, r3, #9
 8014052:	b29b      	uxth	r3, r3
 8014054:	431a      	orrs	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	3b01      	subs	r3, #1
 801405c:	041b      	lsls	r3, r3, #16
 801405e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014062:	431a      	orrs	r2, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	3b01      	subs	r3, #1
 801406a:	061b      	lsls	r3, r3, #24
 801406c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014070:	4931      	ldr	r1, [pc, #196]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014072:	4313      	orrs	r3, r2
 8014074:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014076:	4b30      	ldr	r3, [pc, #192]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	695b      	ldr	r3, [r3, #20]
 8014082:	492d      	ldr	r1, [pc, #180]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014084:	4313      	orrs	r3, r2
 8014086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014088:	4b2b      	ldr	r3, [pc, #172]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 801408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801408c:	f023 0220 	bic.w	r2, r3, #32
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	699b      	ldr	r3, [r3, #24]
 8014094:	4928      	ldr	r1, [pc, #160]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014096:	4313      	orrs	r3, r2
 8014098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801409a:	4b27      	ldr	r3, [pc, #156]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 801409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409e:	4a26      	ldr	r2, [pc, #152]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140a0:	f023 0310 	bic.w	r3, r3, #16
 80140a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80140a6:	4b24      	ldr	r3, [pc, #144]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80140aa:	4b24      	ldr	r3, [pc, #144]	; (801413c <RCCEx_PLL2_Config+0x160>)
 80140ac:	4013      	ands	r3, r2
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	69d2      	ldr	r2, [r2, #28]
 80140b2:	00d2      	lsls	r2, r2, #3
 80140b4:	4920      	ldr	r1, [pc, #128]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140b6:	4313      	orrs	r3, r2
 80140b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80140ba:	4b1f      	ldr	r3, [pc, #124]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140be:	4a1e      	ldr	r2, [pc, #120]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140c0:	f043 0310 	orr.w	r3, r3, #16
 80140c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d106      	bne.n	80140da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80140cc:	4b1a      	ldr	r3, [pc, #104]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	4a19      	ldr	r2, [pc, #100]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80140d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80140d8:	e00f      	b.n	80140fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d106      	bne.n	80140ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80140e0:	4b15      	ldr	r3, [pc, #84]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140e4:	4a14      	ldr	r2, [pc, #80]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80140ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80140ec:	e005      	b.n	80140fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80140ee:	4b12      	ldr	r3, [pc, #72]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f2:	4a11      	ldr	r2, [pc, #68]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80140f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80140fa:	4b0f      	ldr	r3, [pc, #60]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4a0e      	ldr	r2, [pc, #56]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014106:	f7f7 fdc3 	bl	800bc90 <HAL_GetTick>
 801410a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801410c:	e008      	b.n	8014120 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801410e:	f7f7 fdbf 	bl	800bc90 <HAL_GetTick>
 8014112:	4602      	mov	r2, r0
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	2b02      	cmp	r3, #2
 801411a:	d901      	bls.n	8014120 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801411c:	2303      	movs	r3, #3
 801411e:	e006      	b.n	801412e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014120:	4b05      	ldr	r3, [pc, #20]	; (8014138 <RCCEx_PLL2_Config+0x15c>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014128:	2b00      	cmp	r3, #0
 801412a:	d0f0      	beq.n	801410e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801412c:	7bfb      	ldrb	r3, [r7, #15]
}
 801412e:	4618      	mov	r0, r3
 8014130:	3710      	adds	r7, #16
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	58024400 	.word	0x58024400
 801413c:	ffff0007 	.word	0xffff0007

08014140 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801414a:	2300      	movs	r3, #0
 801414c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801414e:	4b53      	ldr	r3, [pc, #332]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014152:	f003 0303 	and.w	r3, r3, #3
 8014156:	2b03      	cmp	r3, #3
 8014158:	d101      	bne.n	801415e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801415a:	2301      	movs	r3, #1
 801415c:	e099      	b.n	8014292 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801415e:	4b4f      	ldr	r3, [pc, #316]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	4a4e      	ldr	r2, [pc, #312]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801416a:	f7f7 fd91 	bl	800bc90 <HAL_GetTick>
 801416e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014170:	e008      	b.n	8014184 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014172:	f7f7 fd8d 	bl	800bc90 <HAL_GetTick>
 8014176:	4602      	mov	r2, r0
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	2b02      	cmp	r3, #2
 801417e:	d901      	bls.n	8014184 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014180:	2303      	movs	r3, #3
 8014182:	e086      	b.n	8014292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014184:	4b45      	ldr	r3, [pc, #276]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801418c:	2b00      	cmp	r3, #0
 801418e:	d1f0      	bne.n	8014172 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014190:	4b42      	ldr	r3, [pc, #264]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014194:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	051b      	lsls	r3, r3, #20
 801419e:	493f      	ldr	r1, [pc, #252]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141a0:	4313      	orrs	r3, r2
 80141a2:	628b      	str	r3, [r1, #40]	; 0x28
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	3b01      	subs	r3, #1
 80141aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	689b      	ldr	r3, [r3, #8]
 80141b2:	3b01      	subs	r3, #1
 80141b4:	025b      	lsls	r3, r3, #9
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	431a      	orrs	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	3b01      	subs	r3, #1
 80141c0:	041b      	lsls	r3, r3, #16
 80141c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80141c6:	431a      	orrs	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	691b      	ldr	r3, [r3, #16]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	061b      	lsls	r3, r3, #24
 80141d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80141d4:	4931      	ldr	r1, [pc, #196]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141d6:	4313      	orrs	r3, r2
 80141d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80141da:	4b30      	ldr	r3, [pc, #192]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	695b      	ldr	r3, [r3, #20]
 80141e6:	492d      	ldr	r1, [pc, #180]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141e8:	4313      	orrs	r3, r2
 80141ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80141ec:	4b2b      	ldr	r3, [pc, #172]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	699b      	ldr	r3, [r3, #24]
 80141f8:	4928      	ldr	r1, [pc, #160]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 80141fa:	4313      	orrs	r3, r2
 80141fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80141fe:	4b27      	ldr	r3, [pc, #156]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014202:	4a26      	ldr	r2, [pc, #152]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014208:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801420a:	4b24      	ldr	r3, [pc, #144]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 801420c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801420e:	4b24      	ldr	r3, [pc, #144]	; (80142a0 <RCCEx_PLL3_Config+0x160>)
 8014210:	4013      	ands	r3, r2
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	69d2      	ldr	r2, [r2, #28]
 8014216:	00d2      	lsls	r2, r2, #3
 8014218:	4920      	ldr	r1, [pc, #128]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 801421a:	4313      	orrs	r3, r2
 801421c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801421e:	4b1f      	ldr	r3, [pc, #124]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014222:	4a1e      	ldr	r2, [pc, #120]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d106      	bne.n	801423e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014230:	4b1a      	ldr	r3, [pc, #104]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014234:	4a19      	ldr	r2, [pc, #100]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801423a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801423c:	e00f      	b.n	801425e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2b01      	cmp	r3, #1
 8014242:	d106      	bne.n	8014252 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014244:	4b15      	ldr	r3, [pc, #84]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014248:	4a14      	ldr	r2, [pc, #80]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 801424a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801424e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014250:	e005      	b.n	801425e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014252:	4b12      	ldr	r3, [pc, #72]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014256:	4a11      	ldr	r2, [pc, #68]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801425c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801425e:	4b0f      	ldr	r3, [pc, #60]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a0e      	ldr	r2, [pc, #56]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801426a:	f7f7 fd11 	bl	800bc90 <HAL_GetTick>
 801426e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014270:	e008      	b.n	8014284 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8014272:	f7f7 fd0d 	bl	800bc90 <HAL_GetTick>
 8014276:	4602      	mov	r2, r0
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	1ad3      	subs	r3, r2, r3
 801427c:	2b02      	cmp	r3, #2
 801427e:	d901      	bls.n	8014284 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014280:	2303      	movs	r3, #3
 8014282:	e006      	b.n	8014292 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014284:	4b05      	ldr	r3, [pc, #20]	; (801429c <RCCEx_PLL3_Config+0x15c>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801428c:	2b00      	cmp	r3, #0
 801428e:	d0f0      	beq.n	8014272 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014290:	7bfb      	ldrb	r3, [r7, #15]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	58024400 	.word	0x58024400
 80142a0:	ffff0007 	.word	0xffff0007

080142a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80142b2:	2301      	movs	r3, #1
 80142b4:	e0f1      	b.n	801449a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a78      	ldr	r2, [pc, #480]	; (80144a4 <HAL_SPI_Init+0x200>)
 80142c2:	4293      	cmp	r3, r2
 80142c4:	d00f      	beq.n	80142e6 <HAL_SPI_Init+0x42>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4a77      	ldr	r2, [pc, #476]	; (80144a8 <HAL_SPI_Init+0x204>)
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d00a      	beq.n	80142e6 <HAL_SPI_Init+0x42>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4a75      	ldr	r2, [pc, #468]	; (80144ac <HAL_SPI_Init+0x208>)
 80142d6:	4293      	cmp	r3, r2
 80142d8:	d005      	beq.n	80142e6 <HAL_SPI_Init+0x42>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	2b0f      	cmp	r3, #15
 80142e0:	d901      	bls.n	80142e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80142e2:	2301      	movs	r3, #1
 80142e4:	e0d9      	b.n	801449a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f001 f8ee 	bl	80154c8 <SPI_GetPacketSize>
 80142ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	4a6c      	ldr	r2, [pc, #432]	; (80144a4 <HAL_SPI_Init+0x200>)
 80142f4:	4293      	cmp	r3, r2
 80142f6:	d00c      	beq.n	8014312 <HAL_SPI_Init+0x6e>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4a6a      	ldr	r2, [pc, #424]	; (80144a8 <HAL_SPI_Init+0x204>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d007      	beq.n	8014312 <HAL_SPI_Init+0x6e>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	4a69      	ldr	r2, [pc, #420]	; (80144ac <HAL_SPI_Init+0x208>)
 8014308:	4293      	cmp	r3, r2
 801430a:	d002      	beq.n	8014312 <HAL_SPI_Init+0x6e>
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b08      	cmp	r3, #8
 8014310:	d811      	bhi.n	8014336 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014316:	4a63      	ldr	r2, [pc, #396]	; (80144a4 <HAL_SPI_Init+0x200>)
 8014318:	4293      	cmp	r3, r2
 801431a:	d009      	beq.n	8014330 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4a61      	ldr	r2, [pc, #388]	; (80144a8 <HAL_SPI_Init+0x204>)
 8014322:	4293      	cmp	r3, r2
 8014324:	d004      	beq.n	8014330 <HAL_SPI_Init+0x8c>
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4a60      	ldr	r2, [pc, #384]	; (80144ac <HAL_SPI_Init+0x208>)
 801432c:	4293      	cmp	r3, r2
 801432e:	d104      	bne.n	801433a <HAL_SPI_Init+0x96>
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b10      	cmp	r3, #16
 8014334:	d901      	bls.n	801433a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014336:	2301      	movs	r3, #1
 8014338:	e0af      	b.n	801449a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014340:	b2db      	uxtb	r3, r3
 8014342:	2b00      	cmp	r3, #0
 8014344:	d106      	bne.n	8014354 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2200      	movs	r2, #0
 801434a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f7f6 fc5e 	bl	800ac10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2202      	movs	r2, #2
 8014358:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f022 0201 	bic.w	r2, r2, #1
 801436a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	689b      	ldr	r3, [r3, #8]
 8014372:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8014376:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	699b      	ldr	r3, [r3, #24]
 801437c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014380:	d119      	bne.n	80143b6 <HAL_SPI_Init+0x112>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801438a:	d103      	bne.n	8014394 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014390:	2b00      	cmp	r3, #0
 8014392:	d008      	beq.n	80143a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014398:	2b00      	cmp	r3, #0
 801439a:	d10c      	bne.n	80143b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80143a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80143a4:	d107      	bne.n	80143b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80143b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	69da      	ldr	r2, [r3, #28]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143be:	431a      	orrs	r2, r3
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	431a      	orrs	r2, r3
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143c8:	ea42 0103 	orr.w	r1, r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	68da      	ldr	r2, [r3, #12]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	430a      	orrs	r2, r1
 80143d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e0:	431a      	orrs	r2, r3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143e6:	431a      	orrs	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	431a      	orrs	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	691b      	ldr	r3, [r3, #16]
 80143f2:	431a      	orrs	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	695b      	ldr	r3, [r3, #20]
 80143f8:	431a      	orrs	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6a1b      	ldr	r3, [r3, #32]
 80143fe:	431a      	orrs	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	431a      	orrs	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801440a:	431a      	orrs	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	431a      	orrs	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014416:	ea42 0103 	orr.w	r1, r2, r3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	430a      	orrs	r2, r1
 8014424:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d113      	bne.n	8014456 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014440:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014454:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f022 0201 	bic.w	r2, r2, #1
 8014464:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00a      	beq.n	8014488 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	430a      	orrs	r2, r1
 8014486:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2201      	movs	r2, #1
 8014494:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8014498:	2300      	movs	r3, #0
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	40013000 	.word	0x40013000
 80144a8:	40003800 	.word	0x40003800
 80144ac:	40003c00 	.word	0x40003c00

080144b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	4613      	mov	r3, r2
 80144bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80144be:	2300      	movs	r3, #0
 80144c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d101      	bne.n	80144d0 <HAL_SPI_Transmit_DMA+0x20>
 80144cc:	2302      	movs	r3, #2
 80144ce:	e12c      	b.n	801472a <HAL_SPI_Transmit_DMA+0x27a>
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2201      	movs	r2, #1
 80144d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d007      	beq.n	80144f4 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80144e4:	2302      	movs	r3, #2
 80144e6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2200      	movs	r2, #0
 80144ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	e11a      	b.n	801472a <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d002      	beq.n	8014500 <HAL_SPI_Transmit_DMA+0x50>
 80144fa:	88fb      	ldrh	r3, [r7, #6]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d107      	bne.n	8014510 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8014500:	2301      	movs	r3, #1
 8014502:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2200      	movs	r2, #0
 8014508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801450c:	7dfb      	ldrb	r3, [r7, #23]
 801450e:	e10c      	b.n	801472a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2203      	movs	r2, #3
 8014514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	68ba      	ldr	r2, [r7, #8]
 8014524:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	88fa      	ldrh	r2, [r7, #6]
 801452a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	88fa      	ldrh	r2, [r7, #6]
 8014532:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	2200      	movs	r2, #0
 801453a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2200      	movs	r2, #0
 8014540:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2200      	movs	r2, #0
 801454c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2200      	movs	r2, #0
 8014554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	689b      	ldr	r3, [r3, #8]
 801455c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014560:	d107      	bne.n	8014572 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014570:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	2b0f      	cmp	r3, #15
 8014578:	d905      	bls.n	8014586 <HAL_SPI_Transmit_DMA+0xd6>
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801457e:	699b      	ldr	r3, [r3, #24]
 8014580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014584:	d10f      	bne.n	80145a6 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801458a:	2b07      	cmp	r3, #7
 801458c:	d913      	bls.n	80145b6 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014592:	699b      	ldr	r3, [r3, #24]
 8014594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014598:	d00d      	beq.n	80145b6 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801459e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80145a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80145a4:	d007      	beq.n	80145b6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2200      	movs	r2, #0
 80145ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80145b2:	7dfb      	ldrb	r3, [r7, #23]
 80145b4:	e0b9      	b.n	801472a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	2b07      	cmp	r3, #7
 80145bc:	d820      	bhi.n	8014600 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145c2:	699b      	ldr	r3, [r3, #24]
 80145c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80145c8:	d109      	bne.n	80145de <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	3301      	adds	r3, #1
 80145d4:	105b      	asrs	r3, r3, #1
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80145e2:	699b      	ldr	r3, [r3, #24]
 80145e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80145e8:	d11e      	bne.n	8014628 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	3303      	adds	r3, #3
 80145f4:	109b      	asrs	r3, r3, #2
 80145f6:	b29a      	uxth	r2, r3
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80145fe:	e013      	b.n	8014628 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	68db      	ldr	r3, [r3, #12]
 8014604:	2b0f      	cmp	r3, #15
 8014606:	d80f      	bhi.n	8014628 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801460c:	699b      	ldr	r3, [r3, #24]
 801460e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014612:	d109      	bne.n	8014628 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801461a:	b29b      	uxth	r3, r3
 801461c:	3301      	adds	r3, #1
 801461e:	105b      	asrs	r3, r3, #1
 8014620:	b29a      	uxth	r2, r3
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801462c:	4a41      	ldr	r2, [pc, #260]	; (8014734 <HAL_SPI_Transmit_DMA+0x284>)
 801462e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014634:	4a40      	ldr	r2, [pc, #256]	; (8014738 <HAL_SPI_Transmit_DMA+0x288>)
 8014636:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801463c:	4a3f      	ldr	r2, [pc, #252]	; (801473c <HAL_SPI_Transmit_DMA+0x28c>)
 801463e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014644:	2200      	movs	r2, #0
 8014646:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	689a      	ldr	r2, [r3, #8]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014656:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014660:	4619      	mov	r1, r3
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	3320      	adds	r3, #32
 8014668:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014670:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014672:	f7f8 fb65 	bl	800cd40 <HAL_DMA_Start_IT>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d013      	beq.n	80146a4 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014682:	f043 0210 	orr.w	r2, r3, #16
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2200      	movs	r2, #0
 8014690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2201      	movs	r2, #1
 8014698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 801469c:	2301      	movs	r3, #1
 801469e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80146a0:	7dfb      	ldrb	r3, [r7, #23]
 80146a2:	e042      	b.n	801472a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146a8:	69db      	ldr	r3, [r3, #28]
 80146aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146ae:	d108      	bne.n	80146c2 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	6859      	ldr	r1, [r3, #4]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	4b21      	ldr	r3, [pc, #132]	; (8014740 <HAL_SPI_Transmit_DMA+0x290>)
 80146bc:	400b      	ands	r3, r1
 80146be:	6053      	str	r3, [r2, #4]
 80146c0:	e009      	b.n	80146d6 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	685a      	ldr	r2, [r3, #4]
 80146c8:	4b1d      	ldr	r3, [pc, #116]	; (8014740 <HAL_SPI_Transmit_DMA+0x290>)
 80146ca:	4013      	ands	r3, r2
 80146cc:	88f9      	ldrh	r1, [r7, #6]
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	6812      	ldr	r2, [r2, #0]
 80146d2:	430b      	orrs	r3, r1
 80146d4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	689a      	ldr	r2, [r3, #8]
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80146e4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	691a      	ldr	r2, [r3, #16]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80146f4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f042 0201 	orr.w	r2, r2, #1
 8014704:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801470e:	d107      	bne.n	8014720 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801471e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2200      	movs	r2, #0
 8014724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014728:	7dfb      	ldrb	r3, [r7, #23]
}
 801472a:	4618      	mov	r0, r3
 801472c:	3718      	adds	r7, #24
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	080152bb 	.word	0x080152bb
 8014738:	080151e9 	.word	0x080151e9
 801473c:	0801530f 	.word	0x0801530f
 8014740:	ffff0000 	.word	0xffff0000

08014744 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	4613      	mov	r3, r2
 8014750:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014752:	2300      	movs	r3, #0
 8014754:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	689b      	ldr	r3, [r3, #8]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d110      	bne.n	8014780 <HAL_SPI_Receive_DMA+0x3c>
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	685b      	ldr	r3, [r3, #4]
 8014762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014766:	d10b      	bne.n	8014780 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2204      	movs	r2, #4
 801476c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8014770:	88fb      	ldrh	r3, [r7, #6]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	68b9      	ldr	r1, [r7, #8]
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	f000 f940 	bl	80149fc <HAL_SPI_TransmitReceive_DMA>
 801477c:	4603      	mov	r3, r0
 801477e:	e130      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014786:	2b01      	cmp	r3, #1
 8014788:	d101      	bne.n	801478e <HAL_SPI_Receive_DMA+0x4a>
 801478a:	2302      	movs	r3, #2
 801478c:	e129      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2201      	movs	r2, #1
 8014792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801479c:	b2db      	uxtb	r3, r3
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d007      	beq.n	80147b2 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 80147a2:	2302      	movs	r3, #2
 80147a4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80147ae:	7dfb      	ldrb	r3, [r7, #23]
 80147b0:	e117      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d002      	beq.n	80147be <HAL_SPI_Receive_DMA+0x7a>
 80147b8:	88fb      	ldrh	r3, [r7, #6]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d107      	bne.n	80147ce <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80147be:	2301      	movs	r3, #1
 80147c0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80147ca:	7dfb      	ldrb	r3, [r7, #23]
 80147cc:	e109      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2204      	movs	r2, #4
 80147d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2200      	movs	r2, #0
 80147da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	88fa      	ldrh	r2, [r7, #6]
 80147e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	88fa      	ldrh	r2, [r7, #6]
 80147f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2200      	movs	r2, #0
 80147f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2200      	movs	r2, #0
 80147fe:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2200      	movs	r2, #0
 8014804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	2200      	movs	r2, #0
 801480c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	689b      	ldr	r3, [r3, #8]
 8014814:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8014818:	d107      	bne.n	801482a <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014828:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	2b0f      	cmp	r3, #15
 8014830:	d905      	bls.n	801483e <HAL_SPI_Receive_DMA+0xfa>
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014836:	699b      	ldr	r3, [r3, #24]
 8014838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801483c:	d10f      	bne.n	801485e <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014842:	2b07      	cmp	r3, #7
 8014844:	d913      	bls.n	801486e <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801484a:	699b      	ldr	r3, [r3, #24]
 801484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014850:	d00d      	beq.n	801486e <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014856:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801485c:	d007      	beq.n	801486e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 801485e:	2301      	movs	r3, #1
 8014860:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2200      	movs	r2, #0
 8014866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801486a:	7dfb      	ldrb	r3, [r7, #23]
 801486c:	e0b9      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	689a      	ldr	r2, [r3, #8]
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801487c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	2b07      	cmp	r3, #7
 8014884:	d820      	bhi.n	80148c8 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801488a:	699b      	ldr	r3, [r3, #24]
 801488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014890:	d109      	bne.n	80148a6 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014898:	b29b      	uxth	r3, r3
 801489a:	3301      	adds	r3, #1
 801489c:	105b      	asrs	r3, r3, #1
 801489e:	b29a      	uxth	r2, r3
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148aa:	699b      	ldr	r3, [r3, #24]
 80148ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148b0:	d11e      	bne.n	80148f0 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	3303      	adds	r3, #3
 80148bc:	109b      	asrs	r3, r3, #2
 80148be:	b29a      	uxth	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80148c6:	e013      	b.n	80148f0 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	68db      	ldr	r3, [r3, #12]
 80148cc:	2b0f      	cmp	r3, #15
 80148ce:	d80f      	bhi.n	80148f0 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148d4:	699b      	ldr	r3, [r3, #24]
 80148d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148da:	d109      	bne.n	80148f0 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	3301      	adds	r3, #1
 80148e6:	105b      	asrs	r3, r3, #1
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148f4:	4a3d      	ldr	r2, [pc, #244]	; (80149ec <HAL_SPI_Receive_DMA+0x2a8>)
 80148f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148fc:	4a3c      	ldr	r2, [pc, #240]	; (80149f0 <HAL_SPI_Receive_DMA+0x2ac>)
 80148fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014904:	4a3b      	ldr	r2, [pc, #236]	; (80149f4 <HAL_SPI_Receive_DMA+0x2b0>)
 8014906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801490c:	2200      	movs	r2, #0
 801490e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	3330      	adds	r3, #48	; 0x30
 801491a:	4619      	mov	r1, r3
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014920:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014928:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801492a:	f7f8 fa09 	bl	800cd40 <HAL_DMA_Start_IT>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d013      	beq.n	801495c <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801493a:	f043 0210 	orr.w	r2, r3, #16
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2200      	movs	r2, #0
 8014948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2201      	movs	r2, #1
 8014950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014954:	2301      	movs	r3, #1
 8014956:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014958:	7dfb      	ldrb	r3, [r7, #23]
 801495a:	e042      	b.n	80149e2 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014960:	69db      	ldr	r3, [r3, #28]
 8014962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014966:	d108      	bne.n	801497a <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	6859      	ldr	r1, [r3, #4]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	4b21      	ldr	r3, [pc, #132]	; (80149f8 <HAL_SPI_Receive_DMA+0x2b4>)
 8014974:	400b      	ands	r3, r1
 8014976:	6053      	str	r3, [r2, #4]
 8014978:	e009      	b.n	801498e <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	685a      	ldr	r2, [r3, #4]
 8014980:	4b1d      	ldr	r3, [pc, #116]	; (80149f8 <HAL_SPI_Receive_DMA+0x2b4>)
 8014982:	4013      	ands	r3, r2
 8014984:	88f9      	ldrh	r1, [r7, #6]
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	6812      	ldr	r2, [r2, #0]
 801498a:	430b      	orrs	r3, r1
 801498c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	689a      	ldr	r2, [r3, #8]
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801499c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	691a      	ldr	r2, [r3, #16]
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80149ac:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	f042 0201 	orr.w	r2, r2, #1
 80149bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80149c6:	d107      	bne.n	80149d8 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80149d6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2200      	movs	r2, #0
 80149dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3718      	adds	r7, #24
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	080152d7 	.word	0x080152d7
 80149f0:	0801522f 	.word	0x0801522f
 80149f4:	0801530f 	.word	0x0801530f
 80149f8:	ffff0000 	.word	0xffff0000

080149fc <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d101      	bne.n	8014a1c <HAL_SPI_TransmitReceive_DMA+0x20>
 8014a18:	2302      	movs	r3, #2
 8014a1a:	e1b4      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2201      	movs	r2, #1
 8014a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014a2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8014a32:	7dbb      	ldrb	r3, [r7, #22]
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d012      	beq.n	8014a5e <HAL_SPI_TransmitReceive_DMA+0x62>
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014a3e:	d106      	bne.n	8014a4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d102      	bne.n	8014a4e <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8014a48:	7dbb      	ldrb	r3, [r7, #22]
 8014a4a:	2b04      	cmp	r3, #4
 8014a4c:	d007      	beq.n	8014a5e <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8014a4e:	2302      	movs	r3, #2
 8014a50:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2200      	movs	r2, #0
 8014a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014a5a:	7dfb      	ldrb	r3, [r7, #23]
 8014a5c:	e193      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d005      	beq.n	8014a70 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d002      	beq.n	8014a70 <HAL_SPI_TransmitReceive_DMA+0x74>
 8014a6a:	887b      	ldrh	r3, [r7, #2]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d107      	bne.n	8014a80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8014a70:	2301      	movs	r3, #1
 8014a72:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014a7c:	7dfb      	ldrb	r3, [r7, #23]
 8014a7e:	e182      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	2b04      	cmp	r3, #4
 8014a8a:	d003      	beq.n	8014a94 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2205      	movs	r2, #5
 8014a90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	68ba      	ldr	r2, [r7, #8]
 8014aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	887a      	ldrh	r2, [r7, #2]
 8014aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	887a      	ldrh	r2, [r7, #2]
 8014aae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	887a      	ldrh	r2, [r7, #2]
 8014abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	887a      	ldrh	r2, [r7, #2]
 8014ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2200      	movs	r2, #0
 8014acc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	689a      	ldr	r2, [r3, #8]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014ae2:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	2b0f      	cmp	r3, #15
 8014aea:	d905      	bls.n	8014af8 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014af0:	699b      	ldr	r3, [r3, #24]
 8014af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014af6:	d10f      	bne.n	8014b18 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8014afc:	2b07      	cmp	r3, #7
 8014afe:	d913      	bls.n	8014b28 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b04:	699b      	ldr	r3, [r3, #24]
 8014b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b0a:	d00d      	beq.n	8014b28 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b10:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8014b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014b16:	d007      	beq.n	8014b28 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8014b24:	7dfb      	ldrb	r3, [r7, #23]
 8014b26:	e12e      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	2b07      	cmp	r3, #7
 8014b2e:	d840      	bhi.n	8014bb2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b3a:	d109      	bne.n	8014b50 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	3301      	adds	r3, #1
 8014b46:	105b      	asrs	r3, r3, #1
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b54:	699b      	ldr	r3, [r3, #24]
 8014b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014b5a:	d109      	bne.n	8014b70 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	3303      	adds	r3, #3
 8014b66:	109b      	asrs	r3, r3, #2
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b74:	699b      	ldr	r3, [r3, #24]
 8014b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b7a:	d109      	bne.n	8014b90 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	3301      	adds	r3, #1
 8014b86:	105b      	asrs	r3, r3, #1
 8014b88:	b29a      	uxth	r2, r3
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b94:	699b      	ldr	r3, [r3, #24]
 8014b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014b9a:	d12e      	bne.n	8014bfa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	3303      	adds	r3, #3
 8014ba6:	109b      	asrs	r3, r3, #2
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014bb0:	e023      	b.n	8014bfa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	2b0f      	cmp	r3, #15
 8014bb8:	d81f      	bhi.n	8014bfa <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014bc4:	d109      	bne.n	8014bda <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	3301      	adds	r3, #1
 8014bd0:	105b      	asrs	r3, r3, #1
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bde:	699b      	ldr	r3, [r3, #24]
 8014be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014be4:	d109      	bne.n	8014bfa <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	3301      	adds	r3, #1
 8014bf0:	105b      	asrs	r3, r3, #1
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	2b04      	cmp	r3, #4
 8014c04:	d108      	bne.n	8014c18 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c0a:	4a61      	ldr	r2, [pc, #388]	; (8014d90 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8014c0c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c12:	4a60      	ldr	r2, [pc, #384]	; (8014d94 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8014c14:	63da      	str	r2, [r3, #60]	; 0x3c
 8014c16:	e007      	b.n	8014c28 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c1c:	4a5e      	ldr	r2, [pc, #376]	; (8014d98 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8014c1e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c24:	4a5d      	ldr	r2, [pc, #372]	; (8014d9c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8014c26:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c2c:	4a5c      	ldr	r2, [pc, #368]	; (8014da0 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8014c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c34:	2200      	movs	r2, #0
 8014c36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	3330      	adds	r3, #48	; 0x30
 8014c42:	4619      	mov	r1, r3
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c48:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014c50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8014c52:	f7f8 f875 	bl	800cd40 <HAL_DMA_Start_IT>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d013      	beq.n	8014c84 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c62:	f043 0210 	orr.w	r2, r3, #16
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2201      	movs	r2, #1
 8014c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014c80:	7dfb      	ldrb	r3, [r7, #23]
 8014c82:	e080      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	689a      	ldr	r2, [r3, #8]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014c92:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c98:	2200      	movs	r2, #0
 8014c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ca8:	2200      	movs	r2, #0
 8014caa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	3320      	adds	r3, #32
 8014cc4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ccc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8014cce:	f7f8 f837 	bl	800cd40 <HAL_DMA_Start_IT>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d013      	beq.n	8014d00 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cde:	f043 0210 	orr.w	r2, r3, #16
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2200      	movs	r2, #0
 8014cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8014cfc:	7dfb      	ldrb	r3, [r7, #23]
 8014cfe:	e042      	b.n	8014d86 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d04:	69db      	ldr	r3, [r3, #28]
 8014d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d0a:	d108      	bne.n	8014d1e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	6859      	ldr	r1, [r3, #4]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	4b23      	ldr	r3, [pc, #140]	; (8014da4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014d18:	400b      	ands	r3, r1
 8014d1a:	6053      	str	r3, [r2, #4]
 8014d1c:	e009      	b.n	8014d32 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	685a      	ldr	r2, [r3, #4]
 8014d24:	4b1f      	ldr	r3, [pc, #124]	; (8014da4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8014d26:	4013      	ands	r3, r2
 8014d28:	8879      	ldrh	r1, [r7, #2]
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	6812      	ldr	r2, [r2, #0]
 8014d2e:	430b      	orrs	r3, r1
 8014d30:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	689a      	ldr	r2, [r3, #8]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014d40:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	691a      	ldr	r2, [r3, #16]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8014d50:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	f042 0201 	orr.w	r2, r2, #1
 8014d60:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014d6a:	d107      	bne.n	8014d7c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014d7a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8014d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3718      	adds	r7, #24
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	080152d7 	.word	0x080152d7
 8014d94:	0801522f 	.word	0x0801522f
 8014d98:	080152f3 	.word	0x080152f3
 8014d9c:	08015275 	.word	0x08015275
 8014da0:	0801530f 	.word	0x0801530f
 8014da4:	ffff0000 	.word	0xffff0000

08014da8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08a      	sub	sp, #40	; 0x28
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	691b      	ldr	r3, [r3, #16]
 8014db6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	695b      	ldr	r3, [r3, #20]
 8014dbe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8014dc0:	6a3a      	ldr	r2, [r7, #32]
 8014dc2:	69fb      	ldr	r3, [r7, #28]
 8014dc4:	4013      	ands	r3, r2
 8014dc6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8014dda:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	3330      	adds	r3, #48	; 0x30
 8014de2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d113      	bne.n	8014e16 <HAL_SPI_IRQHandler+0x6e>
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	f003 0320 	and.w	r3, r3, #32
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d10e      	bne.n	8014e16 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d009      	beq.n	8014e16 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	4798      	blx	r3
    hspi->RxISR(hspi);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	4798      	blx	r3
    handled = 1UL;
 8014e12:	2301      	movs	r3, #1
 8014e14:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8014e16:	69bb      	ldr	r3, [r7, #24]
 8014e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d10f      	bne.n	8014e40 <HAL_SPI_IRQHandler+0x98>
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	f003 0301 	and.w	r3, r3, #1
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d00a      	beq.n	8014e40 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8014e2a:	69bb      	ldr	r3, [r7, #24]
 8014e2c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d105      	bne.n	8014e40 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	4798      	blx	r3
    handled = 1UL;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	f003 0320 	and.w	r3, r3, #32
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d10f      	bne.n	8014e6a <HAL_SPI_IRQHandler+0xc2>
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	f003 0302 	and.w	r3, r3, #2
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d00a      	beq.n	8014e6a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8014e54:	69bb      	ldr	r3, [r7, #24]
 8014e56:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d105      	bne.n	8014e6a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	4798      	blx	r3
    handled = 1UL;
 8014e66:	2301      	movs	r3, #1
 8014e68:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8014e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	f040 815a 	bne.w	8015126 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	f003 0308 	and.w	r3, r3, #8
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	f000 808b 	beq.w	8014f94 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	699a      	ldr	r2, [r3, #24]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f042 0208 	orr.w	r2, r2, #8
 8014e8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	699a      	ldr	r2, [r3, #24]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f042 0210 	orr.w	r2, r2, #16
 8014e9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	699a      	ldr	r2, [r3, #24]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014eac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	691a      	ldr	r2, [r3, #16]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	f022 0208 	bic.w	r2, r2, #8
 8014ebc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	689b      	ldr	r3, [r3, #8]
 8014ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d13d      	bne.n	8014f48 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8014ecc:	e036      	b.n	8014f3c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	2b0f      	cmp	r3, #15
 8014ed4:	d90b      	bls.n	8014eee <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ede:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014ee0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ee6:	1d1a      	adds	r2, r3, #4
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	665a      	str	r2, [r3, #100]	; 0x64
 8014eec:	e01d      	b.n	8014f2a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	68db      	ldr	r3, [r3, #12]
 8014ef2:	2b07      	cmp	r3, #7
 8014ef4:	d90b      	bls.n	8014f0e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014efa:	68fa      	ldr	r2, [r7, #12]
 8014efc:	8812      	ldrh	r2, [r2, #0]
 8014efe:	b292      	uxth	r2, r2
 8014f00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f06:	1c9a      	adds	r2, r3, #2
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	665a      	str	r2, [r3, #100]	; 0x64
 8014f0c:	e00d      	b.n	8014f2a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f1a:	7812      	ldrb	r2, [r2, #0]
 8014f1c:	b2d2      	uxtb	r2, r2
 8014f1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f24:	1c5a      	adds	r2, r3, #1
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	3b01      	subs	r3, #1
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d1c2      	bne.n	8014ece <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f000 fa1d 	bl	8015388 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2201      	movs	r2, #1
 8014f52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d003      	beq.n	8014f68 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 f929 	bl	80151b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014f66:	e0e3      	b.n	8015130 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8014f68:	7cfb      	ldrb	r3, [r7, #19]
 8014f6a:	2b05      	cmp	r3, #5
 8014f6c:	d103      	bne.n	8014f76 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 f8fa 	bl	8015168 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8014f74:	e0d9      	b.n	801512a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8014f76:	7cfb      	ldrb	r3, [r7, #19]
 8014f78:	2b04      	cmp	r3, #4
 8014f7a:	d103      	bne.n	8014f84 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f000 f8e9 	bl	8015154 <HAL_SPI_RxCpltCallback>
    return;
 8014f82:	e0d2      	b.n	801512a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8014f84:	7cfb      	ldrb	r3, [r7, #19]
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	f040 80cf 	bne.w	801512a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f000 f8d7 	bl	8015140 <HAL_SPI_TxCpltCallback>
    return;
 8014f92:	e0ca      	b.n	801512a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00d      	beq.n	8014fba <HAL_SPI_IRQHandler+0x212>
 8014f9e:	6a3b      	ldr	r3, [r7, #32]
 8014fa0:	f003 0308 	and.w	r3, r3, #8
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d008      	beq.n	8014fba <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	699a      	ldr	r2, [r3, #24]
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014fb6:	619a      	str	r2, [r3, #24]

    return;
 8014fb8:	e0ba      	b.n	8015130 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8014fba:	69bb      	ldr	r3, [r7, #24]
 8014fbc:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f000 80b5 	beq.w	8015130 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d00f      	beq.n	8014ff0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014fd6:	f043 0204 	orr.w	r2, r3, #4
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	699a      	ldr	r2, [r3, #24]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014fee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8014ff0:	69bb      	ldr	r3, [r7, #24]
 8014ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00f      	beq.n	801501a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015000:	f043 0201 	orr.w	r2, r3, #1
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	699a      	ldr	r2, [r3, #24]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015018:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015020:	2b00      	cmp	r3, #0
 8015022:	d00f      	beq.n	8015044 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801502a:	f043 0208 	orr.w	r2, r3, #8
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	699a      	ldr	r2, [r3, #24]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015042:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	2b00      	cmp	r3, #0
 801504c:	d00f      	beq.n	801506e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	699a      	ldr	r2, [r3, #24]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	f042 0220 	orr.w	r2, r2, #32
 801506c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015074:	2b00      	cmp	r3, #0
 8015076:	d05a      	beq.n	801512e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	681a      	ldr	r2, [r3, #0]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f022 0201 	bic.w	r2, r2, #1
 8015086:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	6919      	ldr	r1, [r3, #16]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	4b29      	ldr	r3, [pc, #164]	; (8015138 <HAL_SPI_IRQHandler+0x390>)
 8015094:	400b      	ands	r3, r1
 8015096:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801509e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80150a2:	d138      	bne.n	8015116 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	689a      	ldr	r2, [r3, #8]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80150b2:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d013      	beq.n	80150e4 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150c0:	4a1e      	ldr	r2, [pc, #120]	; (801513c <HAL_SPI_IRQHandler+0x394>)
 80150c2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7f8 fbc1 	bl	800d850 <HAL_DMA_Abort_IT>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d007      	beq.n	80150e4 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d020      	beq.n	801512e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150f0:	4a12      	ldr	r2, [pc, #72]	; (801513c <HAL_SPI_IRQHandler+0x394>)
 80150f2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f8 fba9 	bl	800d850 <HAL_DMA_Abort_IT>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d014      	beq.n	801512e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801510a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015114:	e00b      	b.n	801512e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2201      	movs	r2, #1
 801511a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f000 f84a 	bl	80151b8 <HAL_SPI_ErrorCallback>
    return;
 8015124:	e003      	b.n	801512e <HAL_SPI_IRQHandler+0x386>
    return;
 8015126:	bf00      	nop
 8015128:	e002      	b.n	8015130 <HAL_SPI_IRQHandler+0x388>
    return;
 801512a:	bf00      	nop
 801512c:	e000      	b.n	8015130 <HAL_SPI_IRQHandler+0x388>
    return;
 801512e:	bf00      	nop
  }
}
 8015130:	3728      	adds	r7, #40	; 0x28
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	fffffc94 	.word	0xfffffc94
 801513c:	08015355 	.word	0x08015355

08015140 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015140:	b480      	push	{r7}
 8015142:	b083      	sub	sp, #12
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015148:	bf00      	nop
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801515c:	bf00      	nop
 801515e:	370c      	adds	r7, #12
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	4770      	bx	lr

08015168 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015168:	b480      	push	{r7}
 801516a:	b083      	sub	sp, #12
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015170:	bf00      	nop
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr

0801517c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801517c:	b480      	push	{r7}
 801517e:	b083      	sub	sp, #12
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015184:	bf00      	nop
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8015198:	bf00      	nop
 801519a:	370c      	adds	r7, #12
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr

080151a4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80151ac:	bf00      	nop
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80151b8:	b480      	push	{r7}
 80151ba:	b083      	sub	sp, #12
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80151c0:	bf00      	nop
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr

080151cc <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80151cc:	b480      	push	{r7}
 80151ce:	b083      	sub	sp, #12
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80151da:	b2db      	uxtb	r3, r3
}
 80151dc:	4618      	mov	r0, r3
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr

080151e8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	2b07      	cmp	r3, #7
 8015200:	d011      	beq.n	8015226 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015206:	69db      	ldr	r3, [r3, #28]
 8015208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801520c:	d103      	bne.n	8015216 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801520e:	68f8      	ldr	r0, [r7, #12]
 8015210:	f7ff ff96 	bl	8015140 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015214:	e007      	b.n	8015226 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	691a      	ldr	r2, [r3, #16]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	f042 0208 	orr.w	r2, r2, #8
 8015224:	611a      	str	r2, [r3, #16]
}
 8015226:	bf00      	nop
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b084      	sub	sp, #16
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801523a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015242:	b2db      	uxtb	r3, r3
 8015244:	2b07      	cmp	r3, #7
 8015246:	d011      	beq.n	801526c <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801524c:	69db      	ldr	r3, [r3, #28]
 801524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015252:	d103      	bne.n	801525c <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8015254:	68f8      	ldr	r0, [r7, #12]
 8015256:	f7ff ff7d 	bl	8015154 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801525a:	e007      	b.n	801526c <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	691a      	ldr	r2, [r3, #16]
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f042 0208 	orr.w	r2, r2, #8
 801526a:	611a      	str	r2, [r3, #16]
}
 801526c:	bf00      	nop
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015280:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015288:	b2db      	uxtb	r3, r3
 801528a:	2b07      	cmp	r3, #7
 801528c:	d011      	beq.n	80152b2 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015292:	69db      	ldr	r3, [r3, #28]
 8015294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015298:	d103      	bne.n	80152a2 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f7ff ff64 	bl	8015168 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80152a0:	e007      	b.n	80152b2 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	691a      	ldr	r2, [r3, #16]
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f042 0208 	orr.w	r2, r2, #8
 80152b0:	611a      	str	r2, [r3, #16]
}
 80152b2:	bf00      	nop
 80152b4:	3710      	adds	r7, #16
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}

080152ba <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b084      	sub	sp, #16
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80152c8:	68f8      	ldr	r0, [r7, #12]
 80152ca:	f7ff ff57 	bl	801517c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80152ce:	bf00      	nop
 80152d0:	3710      	adds	r7, #16
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}

080152d6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80152d6:	b580      	push	{r7, lr}
 80152d8:	b084      	sub	sp, #16
 80152da:	af00      	add	r7, sp, #0
 80152dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152e2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f7ff ff53 	bl	8015190 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80152ea:	bf00      	nop
 80152ec:	3710      	adds	r7, #16
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b084      	sub	sp, #16
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152fe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8015300:	68f8      	ldr	r0, [r7, #12]
 8015302:	f7ff ff4f 	bl	80151a4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015306:	bf00      	nop
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b084      	sub	sp, #16
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801531a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f7f9 fc15 	bl	800eb4c <HAL_DMA_GetError>
 8015322:	4603      	mov	r3, r0
 8015324:	2b02      	cmp	r3, #2
 8015326:	d011      	beq.n	801534c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	f000 f82d 	bl	8015388 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015334:	f043 0210 	orr.w	r2, r3, #16
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2201      	movs	r2, #1
 8015342:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015346:	68f8      	ldr	r0, [r7, #12]
 8015348:	f7ff ff36 	bl	80151b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801534c:	bf00      	nop
 801534e:	3710      	adds	r7, #16
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2200      	movs	r2, #0
 8015366:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2200      	movs	r2, #0
 801536e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2201      	movs	r2, #1
 8015376:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f7ff ff1c 	bl	80151b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015380:	bf00      	nop
 8015382:	3710      	adds	r7, #16
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015388:	b480      	push	{r7}
 801538a:	b085      	sub	sp, #20
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	695b      	ldr	r3, [r3, #20]
 8015396:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	699a      	ldr	r2, [r3, #24]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f042 0208 	orr.w	r2, r2, #8
 80153a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	699a      	ldr	r2, [r3, #24]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f042 0210 	orr.w	r2, r2, #16
 80153b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f022 0201 	bic.w	r2, r2, #1
 80153c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	6919      	ldr	r1, [r3, #16]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	4b3c      	ldr	r3, [pc, #240]	; (80154c4 <SPI_CloseTransfer+0x13c>)
 80153d4:	400b      	ands	r3, r1
 80153d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	689a      	ldr	r2, [r3, #8]
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80153e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	2b04      	cmp	r3, #4
 80153f2:	d014      	beq.n	801541e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f003 0320 	and.w	r3, r3, #32
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00f      	beq.n	801541e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	699a      	ldr	r2, [r3, #24]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	f042 0220 	orr.w	r2, r2, #32
 801541c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b03      	cmp	r3, #3
 8015428:	d014      	beq.n	8015454 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015430:	2b00      	cmp	r3, #0
 8015432:	d00f      	beq.n	8015454 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801543a:	f043 0204 	orr.w	r2, r3, #4
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	699a      	ldr	r2, [r3, #24]
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015452:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801545a:	2b00      	cmp	r3, #0
 801545c:	d00f      	beq.n	801547e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015464:	f043 0201 	orr.w	r2, r3, #1
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	699a      	ldr	r2, [r3, #24]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801547c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015484:	2b00      	cmp	r3, #0
 8015486:	d00f      	beq.n	80154a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801548e:	f043 0208 	orr.w	r2, r3, #8
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	699a      	ldr	r2, [r3, #24]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80154a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2200      	movs	r2, #0
 80154b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80154b8:	bf00      	nop
 80154ba:	3714      	adds	r7, #20
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr
 80154c4:	fffffc90 	.word	0xfffffc90

080154c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154d4:	095b      	lsrs	r3, r3, #5
 80154d6:	3301      	adds	r3, #1
 80154d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	3301      	adds	r3, #1
 80154e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	3307      	adds	r3, #7
 80154e6:	08db      	lsrs	r3, r3, #3
 80154e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	68fa      	ldr	r2, [r7, #12]
 80154ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3714      	adds	r7, #20
 80154f6:	46bd      	mov	sp, r7
 80154f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fc:	4770      	bx	lr

080154fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80154fe:	b580      	push	{r7, lr}
 8015500:	b082      	sub	sp, #8
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d101      	bne.n	8015510 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801550c:	2301      	movs	r3, #1
 801550e:	e049      	b.n	80155a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b00      	cmp	r3, #0
 801551a:	d106      	bne.n	801552a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7f5 ff69 	bl	800b3fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2202      	movs	r2, #2
 801552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	3304      	adds	r3, #4
 801553a:	4619      	mov	r1, r3
 801553c:	4610      	mov	r0, r2
 801553e:	f000 faed 	bl	8015b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2201      	movs	r2, #1
 8015546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2201      	movs	r2, #1
 801554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	2201      	movs	r2, #1
 8015556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2201      	movs	r2, #1
 801555e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2201      	movs	r2, #1
 8015566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2201      	movs	r2, #1
 801556e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2201      	movs	r2, #1
 8015576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2201      	movs	r2, #1
 801557e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2201      	movs	r2, #1
 8015586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2201      	movs	r2, #1
 801558e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2201      	movs	r2, #1
 8015596:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80155a2:	2300      	movs	r3, #0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b085      	sub	sp, #20
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d001      	beq.n	80155c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80155c0:	2301      	movs	r3, #1
 80155c2:	e054      	b.n	801566e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2202      	movs	r2, #2
 80155c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	68da      	ldr	r2, [r3, #12]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f042 0201 	orr.w	r2, r2, #1
 80155da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	4a26      	ldr	r2, [pc, #152]	; (801567c <HAL_TIM_Base_Start_IT+0xd0>)
 80155e2:	4293      	cmp	r3, r2
 80155e4:	d022      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80155ee:	d01d      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	4a22      	ldr	r2, [pc, #136]	; (8015680 <HAL_TIM_Base_Start_IT+0xd4>)
 80155f6:	4293      	cmp	r3, r2
 80155f8:	d018      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	4a21      	ldr	r2, [pc, #132]	; (8015684 <HAL_TIM_Base_Start_IT+0xd8>)
 8015600:	4293      	cmp	r3, r2
 8015602:	d013      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	4a1f      	ldr	r2, [pc, #124]	; (8015688 <HAL_TIM_Base_Start_IT+0xdc>)
 801560a:	4293      	cmp	r3, r2
 801560c:	d00e      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	4a1e      	ldr	r2, [pc, #120]	; (801568c <HAL_TIM_Base_Start_IT+0xe0>)
 8015614:	4293      	cmp	r3, r2
 8015616:	d009      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4a1c      	ldr	r2, [pc, #112]	; (8015690 <HAL_TIM_Base_Start_IT+0xe4>)
 801561e:	4293      	cmp	r3, r2
 8015620:	d004      	beq.n	801562c <HAL_TIM_Base_Start_IT+0x80>
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	4a1b      	ldr	r2, [pc, #108]	; (8015694 <HAL_TIM_Base_Start_IT+0xe8>)
 8015628:	4293      	cmp	r3, r2
 801562a:	d115      	bne.n	8015658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	689a      	ldr	r2, [r3, #8]
 8015632:	4b19      	ldr	r3, [pc, #100]	; (8015698 <HAL_TIM_Base_Start_IT+0xec>)
 8015634:	4013      	ands	r3, r2
 8015636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2b06      	cmp	r3, #6
 801563c:	d015      	beq.n	801566a <HAL_TIM_Base_Start_IT+0xbe>
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015644:	d011      	beq.n	801566a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	681a      	ldr	r2, [r3, #0]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	f042 0201 	orr.w	r2, r2, #1
 8015654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015656:	e008      	b.n	801566a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f042 0201 	orr.w	r2, r2, #1
 8015666:	601a      	str	r2, [r3, #0]
 8015668:	e000      	b.n	801566c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801566a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801566c:	2300      	movs	r3, #0
}
 801566e:	4618      	mov	r0, r3
 8015670:	3714      	adds	r7, #20
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	40010000 	.word	0x40010000
 8015680:	40000400 	.word	0x40000400
 8015684:	40000800 	.word	0x40000800
 8015688:	40000c00 	.word	0x40000c00
 801568c:	40010400 	.word	0x40010400
 8015690:	40001800 	.word	0x40001800
 8015694:	40014000 	.word	0x40014000
 8015698:	00010007 	.word	0x00010007

0801569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	691b      	ldr	r3, [r3, #16]
 80156aa:	f003 0302 	and.w	r3, r3, #2
 80156ae:	2b02      	cmp	r3, #2
 80156b0:	d122      	bne.n	80156f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	f003 0302 	and.w	r3, r3, #2
 80156bc:	2b02      	cmp	r3, #2
 80156be:	d11b      	bne.n	80156f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f06f 0202 	mvn.w	r2, #2
 80156c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2201      	movs	r2, #1
 80156ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	699b      	ldr	r3, [r3, #24]
 80156d6:	f003 0303 	and.w	r3, r3, #3
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d003      	beq.n	80156e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 f9fe 	bl	8015ae0 <HAL_TIM_IC_CaptureCallback>
 80156e4:	e005      	b.n	80156f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f000 f9f0 	bl	8015acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 fa01 	bl	8015af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2200      	movs	r2, #0
 80156f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	691b      	ldr	r3, [r3, #16]
 80156fe:	f003 0304 	and.w	r3, r3, #4
 8015702:	2b04      	cmp	r3, #4
 8015704:	d122      	bne.n	801574c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	f003 0304 	and.w	r3, r3, #4
 8015710:	2b04      	cmp	r3, #4
 8015712:	d11b      	bne.n	801574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f06f 0204 	mvn.w	r2, #4
 801571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2202      	movs	r2, #2
 8015722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	699b      	ldr	r3, [r3, #24]
 801572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801572e:	2b00      	cmp	r3, #0
 8015730:	d003      	beq.n	801573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 f9d4 	bl	8015ae0 <HAL_TIM_IC_CaptureCallback>
 8015738:	e005      	b.n	8015746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 f9c6 	bl	8015acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 f9d7 	bl	8015af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2200      	movs	r2, #0
 801574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	691b      	ldr	r3, [r3, #16]
 8015752:	f003 0308 	and.w	r3, r3, #8
 8015756:	2b08      	cmp	r3, #8
 8015758:	d122      	bne.n	80157a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	f003 0308 	and.w	r3, r3, #8
 8015764:	2b08      	cmp	r3, #8
 8015766:	d11b      	bne.n	80157a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f06f 0208 	mvn.w	r2, #8
 8015770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2204      	movs	r2, #4
 8015776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	69db      	ldr	r3, [r3, #28]
 801577e:	f003 0303 	and.w	r3, r3, #3
 8015782:	2b00      	cmp	r3, #0
 8015784:	d003      	beq.n	801578e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 f9aa 	bl	8015ae0 <HAL_TIM_IC_CaptureCallback>
 801578c:	e005      	b.n	801579a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f99c 	bl	8015acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 f9ad 	bl	8015af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	691b      	ldr	r3, [r3, #16]
 80157a6:	f003 0310 	and.w	r3, r3, #16
 80157aa:	2b10      	cmp	r3, #16
 80157ac:	d122      	bne.n	80157f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	f003 0310 	and.w	r3, r3, #16
 80157b8:	2b10      	cmp	r3, #16
 80157ba:	d11b      	bne.n	80157f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f06f 0210 	mvn.w	r2, #16
 80157c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2208      	movs	r2, #8
 80157ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	69db      	ldr	r3, [r3, #28]
 80157d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d003      	beq.n	80157e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 f980 	bl	8015ae0 <HAL_TIM_IC_CaptureCallback>
 80157e0:	e005      	b.n	80157ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 f972 	bl	8015acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f000 f983 	bl	8015af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2200      	movs	r2, #0
 80157f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	f003 0301 	and.w	r3, r3, #1
 80157fe:	2b01      	cmp	r3, #1
 8015800:	d10e      	bne.n	8015820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	f003 0301 	and.w	r3, r3, #1
 801580c:	2b01      	cmp	r3, #1
 801580e:	d107      	bne.n	8015820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f06f 0201 	mvn.w	r2, #1
 8015818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7f5 f982 	bl	800ab24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	691b      	ldr	r3, [r3, #16]
 8015826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801582a:	2b80      	cmp	r3, #128	; 0x80
 801582c:	d10e      	bne.n	801584c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015838:	2b80      	cmp	r3, #128	; 0x80
 801583a:	d107      	bne.n	801584c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f000 fb38 	bl	8015ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	691b      	ldr	r3, [r3, #16]
 8015852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801585a:	d10e      	bne.n	801587a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015866:	2b80      	cmp	r3, #128	; 0x80
 8015868:	d107      	bne.n	801587a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 fb2b 	bl	8015ed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	691b      	ldr	r3, [r3, #16]
 8015880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015884:	2b40      	cmp	r3, #64	; 0x40
 8015886:	d10e      	bne.n	80158a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015892:	2b40      	cmp	r3, #64	; 0x40
 8015894:	d107      	bne.n	80158a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801589e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 f931 	bl	8015b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	691b      	ldr	r3, [r3, #16]
 80158ac:	f003 0320 	and.w	r3, r3, #32
 80158b0:	2b20      	cmp	r3, #32
 80158b2:	d10e      	bne.n	80158d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	f003 0320 	and.w	r3, r3, #32
 80158be:	2b20      	cmp	r3, #32
 80158c0:	d107      	bne.n	80158d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	f06f 0220 	mvn.w	r2, #32
 80158ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 faeb 	bl	8015ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80158d2:	bf00      	nop
 80158d4:	3708      	adds	r7, #8
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
	...

080158dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80158e6:	2300      	movs	r3, #0
 80158e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158f0:	2b01      	cmp	r3, #1
 80158f2:	d101      	bne.n	80158f8 <HAL_TIM_ConfigClockSource+0x1c>
 80158f4:	2302      	movs	r3, #2
 80158f6:	e0dc      	b.n	8015ab2 <HAL_TIM_ConfigClockSource+0x1d6>
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2201      	movs	r2, #1
 80158fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2202      	movs	r2, #2
 8015904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	689b      	ldr	r3, [r3, #8]
 801590e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015910:	68ba      	ldr	r2, [r7, #8]
 8015912:	4b6a      	ldr	r3, [pc, #424]	; (8015abc <HAL_TIM_ConfigClockSource+0x1e0>)
 8015914:	4013      	ands	r3, r2
 8015916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801591e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	4a64      	ldr	r2, [pc, #400]	; (8015ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801592e:	4293      	cmp	r3, r2
 8015930:	f000 80a9 	beq.w	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 8015934:	4a62      	ldr	r2, [pc, #392]	; (8015ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8015936:	4293      	cmp	r3, r2
 8015938:	f200 80ae 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801593c:	4a61      	ldr	r2, [pc, #388]	; (8015ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801593e:	4293      	cmp	r3, r2
 8015940:	f000 80a1 	beq.w	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 8015944:	4a5f      	ldr	r2, [pc, #380]	; (8015ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8015946:	4293      	cmp	r3, r2
 8015948:	f200 80a6 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801594c:	4a5e      	ldr	r2, [pc, #376]	; (8015ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801594e:	4293      	cmp	r3, r2
 8015950:	f000 8099 	beq.w	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 8015954:	4a5c      	ldr	r2, [pc, #368]	; (8015ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8015956:	4293      	cmp	r3, r2
 8015958:	f200 809e 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801595c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015960:	f000 8091 	beq.w	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 8015964:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8015968:	f200 8096 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801596c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015970:	f000 8089 	beq.w	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 8015974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015978:	f200 808e 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801597c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015980:	d03e      	beq.n	8015a00 <HAL_TIM_ConfigClockSource+0x124>
 8015982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015986:	f200 8087 	bhi.w	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 801598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801598e:	f000 8086 	beq.w	8015a9e <HAL_TIM_ConfigClockSource+0x1c2>
 8015992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015996:	d87f      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 8015998:	2b70      	cmp	r3, #112	; 0x70
 801599a:	d01a      	beq.n	80159d2 <HAL_TIM_ConfigClockSource+0xf6>
 801599c:	2b70      	cmp	r3, #112	; 0x70
 801599e:	d87b      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159a0:	2b60      	cmp	r3, #96	; 0x60
 80159a2:	d050      	beq.n	8015a46 <HAL_TIM_ConfigClockSource+0x16a>
 80159a4:	2b60      	cmp	r3, #96	; 0x60
 80159a6:	d877      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159a8:	2b50      	cmp	r3, #80	; 0x50
 80159aa:	d03c      	beq.n	8015a26 <HAL_TIM_ConfigClockSource+0x14a>
 80159ac:	2b50      	cmp	r3, #80	; 0x50
 80159ae:	d873      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159b0:	2b40      	cmp	r3, #64	; 0x40
 80159b2:	d058      	beq.n	8015a66 <HAL_TIM_ConfigClockSource+0x18a>
 80159b4:	2b40      	cmp	r3, #64	; 0x40
 80159b6:	d86f      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159b8:	2b30      	cmp	r3, #48	; 0x30
 80159ba:	d064      	beq.n	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 80159bc:	2b30      	cmp	r3, #48	; 0x30
 80159be:	d86b      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159c0:	2b20      	cmp	r3, #32
 80159c2:	d060      	beq.n	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 80159c4:	2b20      	cmp	r3, #32
 80159c6:	d867      	bhi.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d05c      	beq.n	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 80159cc:	2b10      	cmp	r3, #16
 80159ce:	d05a      	beq.n	8015a86 <HAL_TIM_ConfigClockSource+0x1aa>
 80159d0:	e062      	b.n	8015a98 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6818      	ldr	r0, [r3, #0]
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	6899      	ldr	r1, [r3, #8]
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	685a      	ldr	r2, [r3, #4]
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	f000 f9b3 	bl	8015d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	689b      	ldr	r3, [r3, #8]
 80159ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80159f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	609a      	str	r2, [r3, #8]
      break;
 80159fe:	e04f      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6818      	ldr	r0, [r3, #0]
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	6899      	ldr	r1, [r3, #8]
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	685a      	ldr	r2, [r3, #4]
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	f000 f99c 	bl	8015d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	689a      	ldr	r2, [r3, #8]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015a22:	609a      	str	r2, [r3, #8]
      break;
 8015a24:	e03c      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6818      	ldr	r0, [r3, #0]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	6859      	ldr	r1, [r3, #4]
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	68db      	ldr	r3, [r3, #12]
 8015a32:	461a      	mov	r2, r3
 8015a34:	f000 f90c 	bl	8015c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2150      	movs	r1, #80	; 0x50
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f000 f966 	bl	8015d10 <TIM_ITRx_SetConfig>
      break;
 8015a44:	e02c      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6818      	ldr	r0, [r3, #0]
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	6859      	ldr	r1, [r3, #4]
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	461a      	mov	r2, r3
 8015a54:	f000 f92b 	bl	8015cae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2160      	movs	r1, #96	; 0x60
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f000 f956 	bl	8015d10 <TIM_ITRx_SetConfig>
      break;
 8015a64:	e01c      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6818      	ldr	r0, [r3, #0]
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	6859      	ldr	r1, [r3, #4]
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	461a      	mov	r2, r3
 8015a74:	f000 f8ec 	bl	8015c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	2140      	movs	r1, #64	; 0x40
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f000 f946 	bl	8015d10 <TIM_ITRx_SetConfig>
      break;
 8015a84:	e00c      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	4619      	mov	r1, r3
 8015a90:	4610      	mov	r0, r2
 8015a92:	f000 f93d 	bl	8015d10 <TIM_ITRx_SetConfig>
      break;
 8015a96:	e003      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8015a9c:	e000      	b.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8015a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3710      	adds	r7, #16
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	ffceff88 	.word	0xffceff88
 8015ac0:	00100040 	.word	0x00100040
 8015ac4:	00100030 	.word	0x00100030
 8015ac8:	00100020 	.word	0x00100020

08015acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015ad4:	bf00      	nop
 8015ad6:	370c      	adds	r7, #12
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr

08015ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b083      	sub	sp, #12
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015ae8:	bf00      	nop
 8015aea:	370c      	adds	r7, #12
 8015aec:	46bd      	mov	sp, r7
 8015aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af2:	4770      	bx	lr

08015af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015af4:	b480      	push	{r7}
 8015af6:	b083      	sub	sp, #12
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015afc:	bf00      	nop
 8015afe:	370c      	adds	r7, #12
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr

08015b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b083      	sub	sp, #12
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015b10:	bf00      	nop
 8015b12:	370c      	adds	r7, #12
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	4a40      	ldr	r2, [pc, #256]	; (8015c30 <TIM_Base_SetConfig+0x114>)
 8015b30:	4293      	cmp	r3, r2
 8015b32:	d013      	beq.n	8015b5c <TIM_Base_SetConfig+0x40>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b3a:	d00f      	beq.n	8015b5c <TIM_Base_SetConfig+0x40>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	4a3d      	ldr	r2, [pc, #244]	; (8015c34 <TIM_Base_SetConfig+0x118>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d00b      	beq.n	8015b5c <TIM_Base_SetConfig+0x40>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	4a3c      	ldr	r2, [pc, #240]	; (8015c38 <TIM_Base_SetConfig+0x11c>)
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	d007      	beq.n	8015b5c <TIM_Base_SetConfig+0x40>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	4a3b      	ldr	r2, [pc, #236]	; (8015c3c <TIM_Base_SetConfig+0x120>)
 8015b50:	4293      	cmp	r3, r2
 8015b52:	d003      	beq.n	8015b5c <TIM_Base_SetConfig+0x40>
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	4a3a      	ldr	r2, [pc, #232]	; (8015c40 <TIM_Base_SetConfig+0x124>)
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	d108      	bne.n	8015b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	68fa      	ldr	r2, [r7, #12]
 8015b6a:	4313      	orrs	r3, r2
 8015b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4a2f      	ldr	r2, [pc, #188]	; (8015c30 <TIM_Base_SetConfig+0x114>)
 8015b72:	4293      	cmp	r3, r2
 8015b74:	d01f      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b7c:	d01b      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4a2c      	ldr	r2, [pc, #176]	; (8015c34 <TIM_Base_SetConfig+0x118>)
 8015b82:	4293      	cmp	r3, r2
 8015b84:	d017      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	4a2b      	ldr	r2, [pc, #172]	; (8015c38 <TIM_Base_SetConfig+0x11c>)
 8015b8a:	4293      	cmp	r3, r2
 8015b8c:	d013      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4a2a      	ldr	r2, [pc, #168]	; (8015c3c <TIM_Base_SetConfig+0x120>)
 8015b92:	4293      	cmp	r3, r2
 8015b94:	d00f      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4a29      	ldr	r2, [pc, #164]	; (8015c40 <TIM_Base_SetConfig+0x124>)
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	d00b      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	4a28      	ldr	r2, [pc, #160]	; (8015c44 <TIM_Base_SetConfig+0x128>)
 8015ba2:	4293      	cmp	r3, r2
 8015ba4:	d007      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	4a27      	ldr	r2, [pc, #156]	; (8015c48 <TIM_Base_SetConfig+0x12c>)
 8015baa:	4293      	cmp	r3, r2
 8015bac:	d003      	beq.n	8015bb6 <TIM_Base_SetConfig+0x9a>
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	4a26      	ldr	r2, [pc, #152]	; (8015c4c <TIM_Base_SetConfig+0x130>)
 8015bb2:	4293      	cmp	r3, r2
 8015bb4:	d108      	bne.n	8015bc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	68db      	ldr	r3, [r3, #12]
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	4313      	orrs	r3, r2
 8015bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	695b      	ldr	r3, [r3, #20]
 8015bd2:	4313      	orrs	r3, r2
 8015bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	689a      	ldr	r2, [r3, #8]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	4a10      	ldr	r2, [pc, #64]	; (8015c30 <TIM_Base_SetConfig+0x114>)
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	d00f      	beq.n	8015c14 <TIM_Base_SetConfig+0xf8>
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	4a12      	ldr	r2, [pc, #72]	; (8015c40 <TIM_Base_SetConfig+0x124>)
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d00b      	beq.n	8015c14 <TIM_Base_SetConfig+0xf8>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	4a11      	ldr	r2, [pc, #68]	; (8015c44 <TIM_Base_SetConfig+0x128>)
 8015c00:	4293      	cmp	r3, r2
 8015c02:	d007      	beq.n	8015c14 <TIM_Base_SetConfig+0xf8>
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	4a10      	ldr	r2, [pc, #64]	; (8015c48 <TIM_Base_SetConfig+0x12c>)
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	d003      	beq.n	8015c14 <TIM_Base_SetConfig+0xf8>
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	4a0f      	ldr	r2, [pc, #60]	; (8015c4c <TIM_Base_SetConfig+0x130>)
 8015c10:	4293      	cmp	r3, r2
 8015c12:	d103      	bne.n	8015c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	691a      	ldr	r2, [r3, #16]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2201      	movs	r2, #1
 8015c20:	615a      	str	r2, [r3, #20]
}
 8015c22:	bf00      	nop
 8015c24:	3714      	adds	r7, #20
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	40010000 	.word	0x40010000
 8015c34:	40000400 	.word	0x40000400
 8015c38:	40000800 	.word	0x40000800
 8015c3c:	40000c00 	.word	0x40000c00
 8015c40:	40010400 	.word	0x40010400
 8015c44:	40014000 	.word	0x40014000
 8015c48:	40014400 	.word	0x40014400
 8015c4c:	40014800 	.word	0x40014800

08015c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015c50:	b480      	push	{r7}
 8015c52:	b087      	sub	sp, #28
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	6a1b      	ldr	r3, [r3, #32]
 8015c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	6a1b      	ldr	r3, [r3, #32]
 8015c66:	f023 0201 	bic.w	r2, r3, #1
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	699b      	ldr	r3, [r3, #24]
 8015c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	011b      	lsls	r3, r3, #4
 8015c80:	693a      	ldr	r2, [r7, #16]
 8015c82:	4313      	orrs	r3, r2
 8015c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	f023 030a 	bic.w	r3, r3, #10
 8015c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015c8e:	697a      	ldr	r2, [r7, #20]
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	4313      	orrs	r3, r2
 8015c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	693a      	ldr	r2, [r7, #16]
 8015c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	697a      	ldr	r2, [r7, #20]
 8015ca0:	621a      	str	r2, [r3, #32]
}
 8015ca2:	bf00      	nop
 8015ca4:	371c      	adds	r7, #28
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cac:	4770      	bx	lr

08015cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015cae:	b480      	push	{r7}
 8015cb0:	b087      	sub	sp, #28
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	60f8      	str	r0, [r7, #12]
 8015cb6:	60b9      	str	r1, [r7, #8]
 8015cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	6a1b      	ldr	r3, [r3, #32]
 8015cbe:	f023 0210 	bic.w	r2, r3, #16
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	699b      	ldr	r3, [r3, #24]
 8015cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	6a1b      	ldr	r3, [r3, #32]
 8015cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	031b      	lsls	r3, r3, #12
 8015cde:	697a      	ldr	r2, [r7, #20]
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	011b      	lsls	r3, r3, #4
 8015cf0:	693a      	ldr	r2, [r7, #16]
 8015cf2:	4313      	orrs	r3, r2
 8015cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	697a      	ldr	r2, [r7, #20]
 8015cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	693a      	ldr	r2, [r7, #16]
 8015d00:	621a      	str	r2, [r3, #32]
}
 8015d02:	bf00      	nop
 8015d04:	371c      	adds	r7, #28
 8015d06:	46bd      	mov	sp, r7
 8015d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0c:	4770      	bx	lr
	...

08015d10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015d10:	b480      	push	{r7}
 8015d12:	b085      	sub	sp, #20
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	689b      	ldr	r3, [r3, #8]
 8015d1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015d20:	68fa      	ldr	r2, [r7, #12]
 8015d22:	4b09      	ldr	r3, [pc, #36]	; (8015d48 <TIM_ITRx_SetConfig+0x38>)
 8015d24:	4013      	ands	r3, r2
 8015d26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015d28:	683a      	ldr	r2, [r7, #0]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	4313      	orrs	r3, r2
 8015d2e:	f043 0307 	orr.w	r3, r3, #7
 8015d32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	68fa      	ldr	r2, [r7, #12]
 8015d38:	609a      	str	r2, [r3, #8]
}
 8015d3a:	bf00      	nop
 8015d3c:	3714      	adds	r7, #20
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr
 8015d46:	bf00      	nop
 8015d48:	ffcfff8f 	.word	0xffcfff8f

08015d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	b087      	sub	sp, #28
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	60f8      	str	r0, [r7, #12]
 8015d54:	60b9      	str	r1, [r7, #8]
 8015d56:	607a      	str	r2, [r7, #4]
 8015d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	689b      	ldr	r3, [r3, #8]
 8015d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	021a      	lsls	r2, r3, #8
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	431a      	orrs	r2, r3
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	4313      	orrs	r3, r2
 8015d74:	697a      	ldr	r2, [r7, #20]
 8015d76:	4313      	orrs	r3, r2
 8015d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	697a      	ldr	r2, [r7, #20]
 8015d7e:	609a      	str	r2, [r3, #8]
}
 8015d80:	bf00      	nop
 8015d82:	371c      	adds	r7, #28
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr

08015d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b085      	sub	sp, #20
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
 8015d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d101      	bne.n	8015da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015da0:	2302      	movs	r3, #2
 8015da2:	e06d      	b.n	8015e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2201      	movs	r2, #1
 8015da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2202      	movs	r2, #2
 8015db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	689b      	ldr	r3, [r3, #8]
 8015dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	4a30      	ldr	r2, [pc, #192]	; (8015e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d004      	beq.n	8015dd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	4a2f      	ldr	r2, [pc, #188]	; (8015e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	d108      	bne.n	8015dea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015dde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	68fa      	ldr	r2, [r7, #12]
 8015de6:	4313      	orrs	r3, r2
 8015de8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015df0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	4313      	orrs	r3, r2
 8015dfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	68fa      	ldr	r2, [r7, #12]
 8015e02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4a20      	ldr	r2, [pc, #128]	; (8015e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	d022      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015e16:	d01d      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	4a1d      	ldr	r2, [pc, #116]	; (8015e94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d018      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4a1c      	ldr	r2, [pc, #112]	; (8015e98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d013      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	4a1a      	ldr	r2, [pc, #104]	; (8015e9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8015e32:	4293      	cmp	r3, r2
 8015e34:	d00e      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	4a15      	ldr	r2, [pc, #84]	; (8015e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015e3c:	4293      	cmp	r3, r2
 8015e3e:	d009      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4a16      	ldr	r2, [pc, #88]	; (8015ea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d004      	beq.n	8015e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4a15      	ldr	r2, [pc, #84]	; (8015ea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d10c      	bne.n	8015e6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	689b      	ldr	r3, [r3, #8]
 8015e60:	68ba      	ldr	r2, [r7, #8]
 8015e62:	4313      	orrs	r3, r2
 8015e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	68ba      	ldr	r2, [r7, #8]
 8015e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2201      	movs	r2, #1
 8015e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e7e:	2300      	movs	r3, #0
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr
 8015e8c:	40010000 	.word	0x40010000
 8015e90:	40010400 	.word	0x40010400
 8015e94:	40000400 	.word	0x40000400
 8015e98:	40000800 	.word	0x40000800
 8015e9c:	40000c00 	.word	0x40000c00
 8015ea0:	40001800 	.word	0x40001800
 8015ea4:	40014000 	.word	0x40014000

08015ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b083      	sub	sp, #12
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015eb0:	bf00      	nop
 8015eb2:	370c      	adds	r7, #12
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eba:	4770      	bx	lr

08015ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b083      	sub	sp, #12
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015ec4:	bf00      	nop
 8015ec6:	370c      	adds	r7, #12
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015ed8:	bf00      	nop
 8015eda:	370c      	adds	r7, #12
 8015edc:	46bd      	mov	sp, r7
 8015ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee2:	4770      	bx	lr

08015ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d101      	bne.n	8015ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e042      	b.n	8015f7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d106      	bne.n	8015f0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2200      	movs	r2, #0
 8015f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f7f5 fc6d 	bl	800b7e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2224      	movs	r2, #36	; 0x24
 8015f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f022 0201 	bic.w	r2, r2, #1
 8015f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f000 fd74 	bl	8016a14 <UART_SetConfig>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d101      	bne.n	8015f36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8015f32:	2301      	movs	r3, #1
 8015f34:	e022      	b.n	8015f7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d002      	beq.n	8015f44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f001 fad0 	bl	80174e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	685a      	ldr	r2, [r3, #4]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	689a      	ldr	r2, [r3, #8]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	f042 0201 	orr.w	r2, r2, #1
 8015f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f001 fb57 	bl	8017628 <UART_CheckIdleState>
 8015f7a:	4603      	mov	r3, r0
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08a      	sub	sp, #40	; 0x28
 8015f88:	af02      	add	r7, sp, #8
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	603b      	str	r3, [r7, #0]
 8015f90:	4613      	mov	r3, r2
 8015f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f9a:	2b20      	cmp	r3, #32
 8015f9c:	f040 8083 	bne.w	80160a6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d002      	beq.n	8015fac <HAL_UART_Transmit+0x28>
 8015fa6:	88fb      	ldrh	r3, [r7, #6]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d101      	bne.n	8015fb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8015fac:	2301      	movs	r3, #1
 8015fae:	e07b      	b.n	80160a8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015fb6:	2b01      	cmp	r3, #1
 8015fb8:	d101      	bne.n	8015fbe <HAL_UART_Transmit+0x3a>
 8015fba:	2302      	movs	r3, #2
 8015fbc:	e074      	b.n	80160a8 <HAL_UART_Transmit+0x124>
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2221      	movs	r2, #33	; 0x21
 8015fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015fd6:	f7f5 fe5b 	bl	800bc90 <HAL_GetTick>
 8015fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	88fa      	ldrh	r2, [r7, #6]
 8015fe0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	88fa      	ldrh	r2, [r7, #6]
 8015fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	689b      	ldr	r3, [r3, #8]
 8015ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ff4:	d108      	bne.n	8016008 <HAL_UART_Transmit+0x84>
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	691b      	ldr	r3, [r3, #16]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d104      	bne.n	8016008 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8015ffe:	2300      	movs	r3, #0
 8016000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	61bb      	str	r3, [r7, #24]
 8016006:	e003      	b.n	8016010 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801600c:	2300      	movs	r3, #0
 801600e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	2200      	movs	r2, #0
 8016014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8016018:	e02c      	b.n	8016074 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	9300      	str	r3, [sp, #0]
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	2200      	movs	r2, #0
 8016022:	2180      	movs	r1, #128	; 0x80
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f001 fb4a 	bl	80176be <UART_WaitOnFlagUntilTimeout>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d001      	beq.n	8016034 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8016030:	2303      	movs	r3, #3
 8016032:	e039      	b.n	80160a8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8016034:	69fb      	ldr	r3, [r7, #28]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d10b      	bne.n	8016052 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801603a:	69bb      	ldr	r3, [r7, #24]
 801603c:	881b      	ldrh	r3, [r3, #0]
 801603e:	461a      	mov	r2, r3
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	3302      	adds	r3, #2
 801604e:	61bb      	str	r3, [r7, #24]
 8016050:	e007      	b.n	8016062 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	781a      	ldrb	r2, [r3, #0]
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801605c:	69fb      	ldr	r3, [r7, #28]
 801605e:	3301      	adds	r3, #1
 8016060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016068:	b29b      	uxth	r3, r3
 801606a:	3b01      	subs	r3, #1
 801606c:	b29a      	uxth	r2, r3
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801607a:	b29b      	uxth	r3, r3
 801607c:	2b00      	cmp	r3, #0
 801607e:	d1cc      	bne.n	801601a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	2200      	movs	r2, #0
 8016088:	2140      	movs	r1, #64	; 0x40
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f001 fb17 	bl	80176be <UART_WaitOnFlagUntilTimeout>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d001      	beq.n	801609a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8016096:	2303      	movs	r3, #3
 8016098:	e006      	b.n	80160a8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2220      	movs	r2, #32
 801609e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80160a2:	2300      	movs	r3, #0
 80160a4:	e000      	b.n	80160a8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80160a6:	2302      	movs	r3, #2
  }
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3720      	adds	r7, #32
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80160b0:	b480      	push	{r7}
 80160b2:	b091      	sub	sp, #68	; 0x44
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80160c4:	2b20      	cmp	r3, #32
 80160c6:	f040 808c 	bne.w	80161e2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d002      	beq.n	80160d6 <HAL_UART_Transmit_IT+0x26>
 80160d0:	88fb      	ldrh	r3, [r7, #6]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d101      	bne.n	80160da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80160d6:	2301      	movs	r3, #1
 80160d8:	e084      	b.n	80161e4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d101      	bne.n	80160e8 <HAL_UART_Transmit_IT+0x38>
 80160e4:	2302      	movs	r3, #2
 80160e6:	e07d      	b.n	80161e4 <HAL_UART_Transmit_IT+0x134>
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2201      	movs	r2, #1
 80160ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	68ba      	ldr	r2, [r7, #8]
 80160f4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	88fa      	ldrh	r2, [r7, #6]
 80160fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	88fa      	ldrh	r2, [r7, #6]
 8016102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2200      	movs	r2, #0
 801610a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2200      	movs	r2, #0
 8016110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2221      	movs	r2, #33	; 0x21
 8016118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016124:	d12e      	bne.n	8016184 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	689b      	ldr	r3, [r3, #8]
 801612a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801612e:	d107      	bne.n	8016140 <HAL_UART_Transmit_IT+0x90>
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	691b      	ldr	r3, [r3, #16]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d103      	bne.n	8016140 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	4a2d      	ldr	r2, [pc, #180]	; (80161f0 <HAL_UART_Transmit_IT+0x140>)
 801613c:	675a      	str	r2, [r3, #116]	; 0x74
 801613e:	e002      	b.n	8016146 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4a2c      	ldr	r2, [pc, #176]	; (80161f4 <HAL_UART_Transmit_IT+0x144>)
 8016144:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	2200      	movs	r2, #0
 801614a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	3308      	adds	r3, #8
 8016154:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016158:	e853 3f00 	ldrex	r3, [r3]
 801615c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016164:	63bb      	str	r3, [r7, #56]	; 0x38
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	3308      	adds	r3, #8
 801616c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801616e:	637a      	str	r2, [r7, #52]	; 0x34
 8016170:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016176:	e841 2300 	strex	r3, r2, [r1]
 801617a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617e:	2b00      	cmp	r3, #0
 8016180:	d1e5      	bne.n	801614e <HAL_UART_Transmit_IT+0x9e>
 8016182:	e02c      	b.n	80161de <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	689b      	ldr	r3, [r3, #8]
 8016188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801618c:	d107      	bne.n	801619e <HAL_UART_Transmit_IT+0xee>
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d103      	bne.n	801619e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	4a17      	ldr	r2, [pc, #92]	; (80161f8 <HAL_UART_Transmit_IT+0x148>)
 801619a:	675a      	str	r2, [r3, #116]	; 0x74
 801619c:	e002      	b.n	80161a4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	4a16      	ldr	r2, [pc, #88]	; (80161fc <HAL_UART_Transmit_IT+0x14c>)
 80161a2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2200      	movs	r2, #0
 80161a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	e853 3f00 	ldrex	r3, [r3]
 80161b8:	613b      	str	r3, [r7, #16]
   return(result);
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	461a      	mov	r2, r3
 80161c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161ca:	623b      	str	r3, [r7, #32]
 80161cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ce:	69f9      	ldr	r1, [r7, #28]
 80161d0:	6a3a      	ldr	r2, [r7, #32]
 80161d2:	e841 2300 	strex	r3, r2, [r1]
 80161d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d1e6      	bne.n	80161ac <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80161de:	2300      	movs	r3, #0
 80161e0:	e000      	b.n	80161e4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80161e2:	2302      	movs	r3, #2
  }
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3744      	adds	r7, #68	; 0x44
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr
 80161f0:	08017df7 	.word	0x08017df7
 80161f4:	08017d17 	.word	0x08017d17
 80161f8:	08017c55 	.word	0x08017c55
 80161fc:	08017b9d 	.word	0x08017b9d

08016200 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b08a      	sub	sp, #40	; 0x28
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	4613      	mov	r3, r2
 801620c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016214:	2b20      	cmp	r3, #32
 8016216:	d142      	bne.n	801629e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d002      	beq.n	8016224 <HAL_UART_Receive_IT+0x24>
 801621e:	88fb      	ldrh	r3, [r7, #6]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d101      	bne.n	8016228 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8016224:	2301      	movs	r3, #1
 8016226:	e03b      	b.n	80162a0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801622e:	2b01      	cmp	r3, #1
 8016230:	d101      	bne.n	8016236 <HAL_UART_Receive_IT+0x36>
 8016232:	2302      	movs	r3, #2
 8016234:	e034      	b.n	80162a0 <HAL_UART_Receive_IT+0xa0>
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2201      	movs	r2, #1
 801623a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2200      	movs	r2, #0
 8016242:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4a17      	ldr	r2, [pc, #92]	; (80162a8 <HAL_UART_Receive_IT+0xa8>)
 801624a:	4293      	cmp	r3, r2
 801624c:	d01f      	beq.n	801628e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016258:	2b00      	cmp	r3, #0
 801625a:	d018      	beq.n	801628e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	e853 3f00 	ldrex	r3, [r3]
 8016268:	613b      	str	r3, [r7, #16]
   return(result);
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016270:	627b      	str	r3, [r7, #36]	; 0x24
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627a:	623b      	str	r3, [r7, #32]
 801627c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801627e:	69f9      	ldr	r1, [r7, #28]
 8016280:	6a3a      	ldr	r2, [r7, #32]
 8016282:	e841 2300 	strex	r3, r2, [r1]
 8016286:	61bb      	str	r3, [r7, #24]
   return(result);
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d1e6      	bne.n	801625c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801628e:	88fb      	ldrh	r3, [r7, #6]
 8016290:	461a      	mov	r2, r3
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f001 fadb 	bl	8017850 <UART_Start_Receive_IT>
 801629a:	4603      	mov	r3, r0
 801629c:	e000      	b.n	80162a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801629e:	2302      	movs	r3, #2
  }
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3728      	adds	r7, #40	; 0x28
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	58000c00 	.word	0x58000c00

080162ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b0ba      	sub	sp, #232	; 0xe8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	69db      	ldr	r3, [r3, #28]
 80162ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	689b      	ldr	r3, [r3, #8]
 80162ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80162d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80162d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80162da:	4013      	ands	r3, r2
 80162dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80162e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d11b      	bne.n	8016320 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80162e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80162ec:	f003 0320 	and.w	r3, r3, #32
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d015      	beq.n	8016320 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80162f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80162f8:	f003 0320 	and.w	r3, r3, #32
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d105      	bne.n	801630c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016308:	2b00      	cmp	r3, #0
 801630a:	d009      	beq.n	8016320 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016310:	2b00      	cmp	r3, #0
 8016312:	f000 835a 	beq.w	80169ca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	4798      	blx	r3
      }
      return;
 801631e:	e354      	b.n	80169ca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016324:	2b00      	cmp	r3, #0
 8016326:	f000 811f 	beq.w	8016568 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801632a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801632e:	4b8b      	ldr	r3, [pc, #556]	; (801655c <HAL_UART_IRQHandler+0x2b0>)
 8016330:	4013      	ands	r3, r2
 8016332:	2b00      	cmp	r3, #0
 8016334:	d106      	bne.n	8016344 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8016336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801633a:	4b89      	ldr	r3, [pc, #548]	; (8016560 <HAL_UART_IRQHandler+0x2b4>)
 801633c:	4013      	ands	r3, r2
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 8112 	beq.w	8016568 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016348:	f003 0301 	and.w	r3, r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	d011      	beq.n	8016374 <HAL_UART_IRQHandler+0xc8>
 8016350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016358:	2b00      	cmp	r3, #0
 801635a:	d00b      	beq.n	8016374 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	2201      	movs	r2, #1
 8016362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801636a:	f043 0201 	orr.w	r2, r3, #1
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016378:	f003 0302 	and.w	r3, r3, #2
 801637c:	2b00      	cmp	r3, #0
 801637e:	d011      	beq.n	80163a4 <HAL_UART_IRQHandler+0xf8>
 8016380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016384:	f003 0301 	and.w	r3, r3, #1
 8016388:	2b00      	cmp	r3, #0
 801638a:	d00b      	beq.n	80163a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2202      	movs	r2, #2
 8016392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801639a:	f043 0204 	orr.w	r2, r3, #4
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80163a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163a8:	f003 0304 	and.w	r3, r3, #4
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d011      	beq.n	80163d4 <HAL_UART_IRQHandler+0x128>
 80163b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163b4:	f003 0301 	and.w	r3, r3, #1
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00b      	beq.n	80163d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2204      	movs	r2, #4
 80163c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80163ca:	f043 0202 	orr.w	r2, r3, #2
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80163d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163d8:	f003 0308 	and.w	r3, r3, #8
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d017      	beq.n	8016410 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80163e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80163e4:	f003 0320 	and.w	r3, r3, #32
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d105      	bne.n	80163f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80163ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80163f0:	4b5a      	ldr	r3, [pc, #360]	; (801655c <HAL_UART_IRQHandler+0x2b0>)
 80163f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00b      	beq.n	8016410 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2208      	movs	r2, #8
 80163fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016406:	f043 0208 	orr.w	r2, r3, #8
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016418:	2b00      	cmp	r3, #0
 801641a:	d012      	beq.n	8016442 <HAL_UART_IRQHandler+0x196>
 801641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016424:	2b00      	cmp	r3, #0
 8016426:	d00c      	beq.n	8016442 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016438:	f043 0220 	orr.w	r2, r3, #32
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016448:	2b00      	cmp	r3, #0
 801644a:	f000 82c0 	beq.w	80169ce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016452:	f003 0320 	and.w	r3, r3, #32
 8016456:	2b00      	cmp	r3, #0
 8016458:	d013      	beq.n	8016482 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801645a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801645e:	f003 0320 	and.w	r3, r3, #32
 8016462:	2b00      	cmp	r3, #0
 8016464:	d105      	bne.n	8016472 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801646a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801646e:	2b00      	cmp	r3, #0
 8016470:	d007      	beq.n	8016482 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	689b      	ldr	r3, [r3, #8]
 8016492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016496:	2b40      	cmp	r3, #64	; 0x40
 8016498:	d005      	beq.n	80164a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801649a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801649e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d04f      	beq.n	8016546 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f001 fafc 	bl	8017aa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	689b      	ldr	r3, [r3, #8]
 80164b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164b6:	2b40      	cmp	r3, #64	; 0x40
 80164b8:	d141      	bne.n	801653e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	3308      	adds	r3, #8
 80164c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80164c8:	e853 3f00 	ldrex	r3, [r3]
 80164cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80164d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80164d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80164d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	3308      	adds	r3, #8
 80164e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80164e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80164ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80164f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80164f6:	e841 2300 	strex	r3, r2, [r1]
 80164fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80164fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016502:	2b00      	cmp	r3, #0
 8016504:	d1d9      	bne.n	80164ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801650a:	2b00      	cmp	r3, #0
 801650c:	d013      	beq.n	8016536 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016512:	4a14      	ldr	r2, [pc, #80]	; (8016564 <HAL_UART_IRQHandler+0x2b8>)
 8016514:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801651a:	4618      	mov	r0, r3
 801651c:	f7f7 f998 	bl	800d850 <HAL_DMA_Abort_IT>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d017      	beq.n	8016556 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8016530:	4610      	mov	r0, r2
 8016532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016534:	e00f      	b.n	8016556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f000 fa56 	bl	80169e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801653c:	e00b      	b.n	8016556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f000 fa52 	bl	80169e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016544:	e007      	b.n	8016556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 fa4e 	bl	80169e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2200      	movs	r2, #0
 8016550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8016554:	e23b      	b.n	80169ce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016556:	bf00      	nop
    return;
 8016558:	e239      	b.n	80169ce <HAL_UART_IRQHandler+0x722>
 801655a:	bf00      	nop
 801655c:	10000001 	.word	0x10000001
 8016560:	04000120 	.word	0x04000120
 8016564:	08017b71 	.word	0x08017b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801656c:	2b01      	cmp	r3, #1
 801656e:	f040 81ce 	bne.w	801690e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016576:	f003 0310 	and.w	r3, r3, #16
 801657a:	2b00      	cmp	r3, #0
 801657c:	f000 81c7 	beq.w	801690e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016584:	f003 0310 	and.w	r3, r3, #16
 8016588:	2b00      	cmp	r3, #0
 801658a:	f000 81c0 	beq.w	801690e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	2210      	movs	r2, #16
 8016594:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	689b      	ldr	r3, [r3, #8]
 801659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165a0:	2b40      	cmp	r3, #64	; 0x40
 80165a2:	f040 813b 	bne.w	801681c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	4a8b      	ldr	r2, [pc, #556]	; (80167dc <HAL_UART_IRQHandler+0x530>)
 80165ae:	4293      	cmp	r3, r2
 80165b0:	d059      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4a89      	ldr	r2, [pc, #548]	; (80167e0 <HAL_UART_IRQHandler+0x534>)
 80165ba:	4293      	cmp	r3, r2
 80165bc:	d053      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	4a87      	ldr	r2, [pc, #540]	; (80167e4 <HAL_UART_IRQHandler+0x538>)
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d04d      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	4a85      	ldr	r2, [pc, #532]	; (80167e8 <HAL_UART_IRQHandler+0x53c>)
 80165d2:	4293      	cmp	r3, r2
 80165d4:	d047      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4a83      	ldr	r2, [pc, #524]	; (80167ec <HAL_UART_IRQHandler+0x540>)
 80165de:	4293      	cmp	r3, r2
 80165e0:	d041      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	4a81      	ldr	r2, [pc, #516]	; (80167f0 <HAL_UART_IRQHandler+0x544>)
 80165ea:	4293      	cmp	r3, r2
 80165ec:	d03b      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	4a7f      	ldr	r2, [pc, #508]	; (80167f4 <HAL_UART_IRQHandler+0x548>)
 80165f6:	4293      	cmp	r3, r2
 80165f8:	d035      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	4a7d      	ldr	r2, [pc, #500]	; (80167f8 <HAL_UART_IRQHandler+0x54c>)
 8016602:	4293      	cmp	r3, r2
 8016604:	d02f      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	4a7b      	ldr	r2, [pc, #492]	; (80167fc <HAL_UART_IRQHandler+0x550>)
 801660e:	4293      	cmp	r3, r2
 8016610:	d029      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	4a79      	ldr	r2, [pc, #484]	; (8016800 <HAL_UART_IRQHandler+0x554>)
 801661a:	4293      	cmp	r3, r2
 801661c:	d023      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4a77      	ldr	r2, [pc, #476]	; (8016804 <HAL_UART_IRQHandler+0x558>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d01d      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a75      	ldr	r2, [pc, #468]	; (8016808 <HAL_UART_IRQHandler+0x55c>)
 8016632:	4293      	cmp	r3, r2
 8016634:	d017      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	4a73      	ldr	r2, [pc, #460]	; (801680c <HAL_UART_IRQHandler+0x560>)
 801663e:	4293      	cmp	r3, r2
 8016640:	d011      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	4a71      	ldr	r2, [pc, #452]	; (8016810 <HAL_UART_IRQHandler+0x564>)
 801664a:	4293      	cmp	r3, r2
 801664c:	d00b      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	4a6f      	ldr	r2, [pc, #444]	; (8016814 <HAL_UART_IRQHandler+0x568>)
 8016656:	4293      	cmp	r3, r2
 8016658:	d005      	beq.n	8016666 <HAL_UART_IRQHandler+0x3ba>
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4a6d      	ldr	r2, [pc, #436]	; (8016818 <HAL_UART_IRQHandler+0x56c>)
 8016662:	4293      	cmp	r3, r2
 8016664:	d105      	bne.n	8016672 <HAL_UART_IRQHandler+0x3c6>
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	b29b      	uxth	r3, r3
 8016670:	e004      	b.n	801667c <HAL_UART_IRQHandler+0x3d0>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	b29b      	uxth	r3, r3
 801667c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016684:	2b00      	cmp	r3, #0
 8016686:	f000 81a4 	beq.w	80169d2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016694:	429a      	cmp	r2, r3
 8016696:	f080 819c 	bcs.w	80169d2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80166a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80166a8:	69db      	ldr	r3, [r3, #28]
 80166aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ae:	f000 8086 	beq.w	80167be <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80166be:	e853 3f00 	ldrex	r3, [r3]
 80166c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80166c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80166ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80166ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80166dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80166e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80166e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80166ec:	e841 2300 	strex	r3, r2, [r1]
 80166f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80166f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d1da      	bne.n	80166b2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	3308      	adds	r3, #8
 8016702:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016706:	e853 3f00 	ldrex	r3, [r3]
 801670a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801670c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801670e:	f023 0301 	bic.w	r3, r3, #1
 8016712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	3308      	adds	r3, #8
 801671c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016720:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016724:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016726:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801672c:	e841 2300 	strex	r3, r2, [r1]
 8016730:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016734:	2b00      	cmp	r3, #0
 8016736:	d1e1      	bne.n	80166fc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	3308      	adds	r3, #8
 801673e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016742:	e853 3f00 	ldrex	r3, [r3]
 8016746:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801674a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801674e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	3308      	adds	r3, #8
 8016758:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801675c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801675e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016760:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016764:	e841 2300 	strex	r3, r2, [r1]
 8016768:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801676a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1e3      	bne.n	8016738 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2220      	movs	r2, #32
 8016774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2200      	movs	r2, #0
 801677c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016786:	e853 3f00 	ldrex	r3, [r3]
 801678a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801678c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801678e:	f023 0310 	bic.w	r3, r3, #16
 8016792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	461a      	mov	r2, r3
 801679c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80167a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80167a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80167a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80167a8:	e841 2300 	strex	r3, r2, [r1]
 80167ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80167ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d1e4      	bne.n	801677e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7f6 fd2b 	bl	800d214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	1ad3      	subs	r3, r2, r3
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	4619      	mov	r1, r3
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 f912 	bl	80169fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80167d8:	e0fb      	b.n	80169d2 <HAL_UART_IRQHandler+0x726>
 80167da:	bf00      	nop
 80167dc:	40020010 	.word	0x40020010
 80167e0:	40020028 	.word	0x40020028
 80167e4:	40020040 	.word	0x40020040
 80167e8:	40020058 	.word	0x40020058
 80167ec:	40020070 	.word	0x40020070
 80167f0:	40020088 	.word	0x40020088
 80167f4:	400200a0 	.word	0x400200a0
 80167f8:	400200b8 	.word	0x400200b8
 80167fc:	40020410 	.word	0x40020410
 8016800:	40020428 	.word	0x40020428
 8016804:	40020440 	.word	0x40020440
 8016808:	40020458 	.word	0x40020458
 801680c:	40020470 	.word	0x40020470
 8016810:	40020488 	.word	0x40020488
 8016814:	400204a0 	.word	0x400204a0
 8016818:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016828:	b29b      	uxth	r3, r3
 801682a:	1ad3      	subs	r3, r2, r3
 801682c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016836:	b29b      	uxth	r3, r3
 8016838:	2b00      	cmp	r3, #0
 801683a:	f000 80cc 	beq.w	80169d6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 801683e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016842:	2b00      	cmp	r3, #0
 8016844:	f000 80c7 	beq.w	80169d6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016850:	e853 3f00 	ldrex	r3, [r3]
 8016854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801685c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	461a      	mov	r2, r3
 8016866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801686a:	647b      	str	r3, [r7, #68]	; 0x44
 801686c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801686e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016872:	e841 2300 	strex	r3, r2, [r1]
 8016876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801687a:	2b00      	cmp	r3, #0
 801687c:	d1e4      	bne.n	8016848 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	3308      	adds	r3, #8
 8016884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016888:	e853 3f00 	ldrex	r3, [r3]
 801688c:	623b      	str	r3, [r7, #32]
   return(result);
 801688e:	6a3a      	ldr	r2, [r7, #32]
 8016890:	4b54      	ldr	r3, [pc, #336]	; (80169e4 <HAL_UART_IRQHandler+0x738>)
 8016892:	4013      	ands	r3, r2
 8016894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	3308      	adds	r3, #8
 801689e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80168a2:	633a      	str	r2, [r7, #48]	; 0x30
 80168a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168aa:	e841 2300 	strex	r3, r2, [r1]
 80168ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d1e3      	bne.n	801687e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2220      	movs	r2, #32
 80168ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2200      	movs	r2, #0
 80168c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	e853 3f00 	ldrex	r3, [r3]
 80168d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f023 0310 	bic.w	r3, r3, #16
 80168de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	461a      	mov	r2, r3
 80168e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80168ec:	61fb      	str	r3, [r7, #28]
 80168ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168f0:	69b9      	ldr	r1, [r7, #24]
 80168f2:	69fa      	ldr	r2, [r7, #28]
 80168f4:	e841 2300 	strex	r3, r2, [r1]
 80168f8:	617b      	str	r3, [r7, #20]
   return(result);
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d1e4      	bne.n	80168ca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016904:	4619      	mov	r1, r3
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 f878 	bl	80169fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801690c:	e063      	b.n	80169d6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00e      	beq.n	8016938 <HAL_UART_IRQHandler+0x68c>
 801691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801691e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016922:	2b00      	cmp	r3, #0
 8016924:	d008      	beq.n	8016938 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801692e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f001 ff5d 	bl	80187f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016936:	e051      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016940:	2b00      	cmp	r3, #0
 8016942:	d014      	beq.n	801696e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801694c:	2b00      	cmp	r3, #0
 801694e:	d105      	bne.n	801695c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016958:	2b00      	cmp	r3, #0
 801695a:	d008      	beq.n	801696e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016960:	2b00      	cmp	r3, #0
 8016962:	d03a      	beq.n	80169da <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	4798      	blx	r3
    }
    return;
 801696c:	e035      	b.n	80169da <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016976:	2b00      	cmp	r3, #0
 8016978:	d009      	beq.n	801698e <HAL_UART_IRQHandler+0x6e2>
 801697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016982:	2b00      	cmp	r3, #0
 8016984:	d003      	beq.n	801698e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f001 faaa 	bl	8017ee0 <UART_EndTransmit_IT>
    return;
 801698c:	e026      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016996:	2b00      	cmp	r3, #0
 8016998:	d009      	beq.n	80169ae <HAL_UART_IRQHandler+0x702>
 801699a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801699e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d003      	beq.n	80169ae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f001 ff36 	bl	8018818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80169ac:	e016      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80169ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d010      	beq.n	80169dc <HAL_UART_IRQHandler+0x730>
 80169ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80169be:	2b00      	cmp	r3, #0
 80169c0:	da0c      	bge.n	80169dc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f001 ff1e 	bl	8018804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80169c8:	e008      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
      return;
 80169ca:	bf00      	nop
 80169cc:	e006      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
    return;
 80169ce:	bf00      	nop
 80169d0:	e004      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
      return;
 80169d2:	bf00      	nop
 80169d4:	e002      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
      return;
 80169d6:	bf00      	nop
 80169d8:	e000      	b.n	80169dc <HAL_UART_IRQHandler+0x730>
    return;
 80169da:	bf00      	nop
  }
}
 80169dc:	37e8      	adds	r7, #232	; 0xe8
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	effffffe 	.word	0xeffffffe

080169e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b083      	sub	sp, #12
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80169f0:	bf00      	nop
 80169f2:	370c      	adds	r7, #12
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr

080169fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	460b      	mov	r3, r1
 8016a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016a08:	bf00      	nop
 8016a0a:	370c      	adds	r7, #12
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr

08016a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016a18:	b092      	sub	sp, #72	; 0x48
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	689a      	ldr	r2, [r3, #8]
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	691b      	ldr	r3, [r3, #16]
 8016a2c:	431a      	orrs	r2, r3
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	695b      	ldr	r3, [r3, #20]
 8016a32:	431a      	orrs	r2, r3
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	69db      	ldr	r3, [r3, #28]
 8016a38:	4313      	orrs	r3, r2
 8016a3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	4bbe      	ldr	r3, [pc, #760]	; (8016d3c <UART_SetConfig+0x328>)
 8016a44:	4013      	ands	r3, r2
 8016a46:	697a      	ldr	r2, [r7, #20]
 8016a48:	6812      	ldr	r2, [r2, #0]
 8016a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016a4c:	430b      	orrs	r3, r1
 8016a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	68da      	ldr	r2, [r3, #12]
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	430a      	orrs	r2, r1
 8016a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	699b      	ldr	r3, [r3, #24]
 8016a6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4ab3      	ldr	r2, [pc, #716]	; (8016d40 <UART_SetConfig+0x32c>)
 8016a72:	4293      	cmp	r3, r2
 8016a74:	d004      	beq.n	8016a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	6a1b      	ldr	r3, [r3, #32]
 8016a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a7c:	4313      	orrs	r3, r2
 8016a7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	689a      	ldr	r2, [r3, #8]
 8016a86:	4baf      	ldr	r3, [pc, #700]	; (8016d44 <UART_SetConfig+0x330>)
 8016a88:	4013      	ands	r3, r2
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	6812      	ldr	r2, [r2, #0]
 8016a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016a90:	430b      	orrs	r3, r1
 8016a92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a9a:	f023 010f 	bic.w	r1, r3, #15
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	430a      	orrs	r2, r1
 8016aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	4aa6      	ldr	r2, [pc, #664]	; (8016d48 <UART_SetConfig+0x334>)
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	d177      	bne.n	8016ba4 <UART_SetConfig+0x190>
 8016ab4:	4ba5      	ldr	r3, [pc, #660]	; (8016d4c <UART_SetConfig+0x338>)
 8016ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016abc:	2b28      	cmp	r3, #40	; 0x28
 8016abe:	d86d      	bhi.n	8016b9c <UART_SetConfig+0x188>
 8016ac0:	a201      	add	r2, pc, #4	; (adr r2, 8016ac8 <UART_SetConfig+0xb4>)
 8016ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ac6:	bf00      	nop
 8016ac8:	08016b6d 	.word	0x08016b6d
 8016acc:	08016b9d 	.word	0x08016b9d
 8016ad0:	08016b9d 	.word	0x08016b9d
 8016ad4:	08016b9d 	.word	0x08016b9d
 8016ad8:	08016b9d 	.word	0x08016b9d
 8016adc:	08016b9d 	.word	0x08016b9d
 8016ae0:	08016b9d 	.word	0x08016b9d
 8016ae4:	08016b9d 	.word	0x08016b9d
 8016ae8:	08016b75 	.word	0x08016b75
 8016aec:	08016b9d 	.word	0x08016b9d
 8016af0:	08016b9d 	.word	0x08016b9d
 8016af4:	08016b9d 	.word	0x08016b9d
 8016af8:	08016b9d 	.word	0x08016b9d
 8016afc:	08016b9d 	.word	0x08016b9d
 8016b00:	08016b9d 	.word	0x08016b9d
 8016b04:	08016b9d 	.word	0x08016b9d
 8016b08:	08016b7d 	.word	0x08016b7d
 8016b0c:	08016b9d 	.word	0x08016b9d
 8016b10:	08016b9d 	.word	0x08016b9d
 8016b14:	08016b9d 	.word	0x08016b9d
 8016b18:	08016b9d 	.word	0x08016b9d
 8016b1c:	08016b9d 	.word	0x08016b9d
 8016b20:	08016b9d 	.word	0x08016b9d
 8016b24:	08016b9d 	.word	0x08016b9d
 8016b28:	08016b85 	.word	0x08016b85
 8016b2c:	08016b9d 	.word	0x08016b9d
 8016b30:	08016b9d 	.word	0x08016b9d
 8016b34:	08016b9d 	.word	0x08016b9d
 8016b38:	08016b9d 	.word	0x08016b9d
 8016b3c:	08016b9d 	.word	0x08016b9d
 8016b40:	08016b9d 	.word	0x08016b9d
 8016b44:	08016b9d 	.word	0x08016b9d
 8016b48:	08016b8d 	.word	0x08016b8d
 8016b4c:	08016b9d 	.word	0x08016b9d
 8016b50:	08016b9d 	.word	0x08016b9d
 8016b54:	08016b9d 	.word	0x08016b9d
 8016b58:	08016b9d 	.word	0x08016b9d
 8016b5c:	08016b9d 	.word	0x08016b9d
 8016b60:	08016b9d 	.word	0x08016b9d
 8016b64:	08016b9d 	.word	0x08016b9d
 8016b68:	08016b95 	.word	0x08016b95
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b72:	e222      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b74:	2304      	movs	r3, #4
 8016b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b7a:	e21e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b7c:	2308      	movs	r3, #8
 8016b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b82:	e21a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b84:	2310      	movs	r3, #16
 8016b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b8a:	e216      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b8c:	2320      	movs	r3, #32
 8016b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b92:	e212      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b94:	2340      	movs	r3, #64	; 0x40
 8016b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016b9a:	e20e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016b9c:	2380      	movs	r3, #128	; 0x80
 8016b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ba2:	e20a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4a69      	ldr	r2, [pc, #420]	; (8016d50 <UART_SetConfig+0x33c>)
 8016baa:	4293      	cmp	r3, r2
 8016bac:	d130      	bne.n	8016c10 <UART_SetConfig+0x1fc>
 8016bae:	4b67      	ldr	r3, [pc, #412]	; (8016d4c <UART_SetConfig+0x338>)
 8016bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bb2:	f003 0307 	and.w	r3, r3, #7
 8016bb6:	2b05      	cmp	r3, #5
 8016bb8:	d826      	bhi.n	8016c08 <UART_SetConfig+0x1f4>
 8016bba:	a201      	add	r2, pc, #4	; (adr r2, 8016bc0 <UART_SetConfig+0x1ac>)
 8016bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bc0:	08016bd9 	.word	0x08016bd9
 8016bc4:	08016be1 	.word	0x08016be1
 8016bc8:	08016be9 	.word	0x08016be9
 8016bcc:	08016bf1 	.word	0x08016bf1
 8016bd0:	08016bf9 	.word	0x08016bf9
 8016bd4:	08016c01 	.word	0x08016c01
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016bde:	e1ec      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016be0:	2304      	movs	r3, #4
 8016be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016be6:	e1e8      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016be8:	2308      	movs	r3, #8
 8016bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016bee:	e1e4      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016bf0:	2310      	movs	r3, #16
 8016bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016bf6:	e1e0      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016bf8:	2320      	movs	r3, #32
 8016bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016bfe:	e1dc      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c00:	2340      	movs	r3, #64	; 0x40
 8016c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c06:	e1d8      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c08:	2380      	movs	r3, #128	; 0x80
 8016c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c0e:	e1d4      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	4a4f      	ldr	r2, [pc, #316]	; (8016d54 <UART_SetConfig+0x340>)
 8016c16:	4293      	cmp	r3, r2
 8016c18:	d130      	bne.n	8016c7c <UART_SetConfig+0x268>
 8016c1a:	4b4c      	ldr	r3, [pc, #304]	; (8016d4c <UART_SetConfig+0x338>)
 8016c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c1e:	f003 0307 	and.w	r3, r3, #7
 8016c22:	2b05      	cmp	r3, #5
 8016c24:	d826      	bhi.n	8016c74 <UART_SetConfig+0x260>
 8016c26:	a201      	add	r2, pc, #4	; (adr r2, 8016c2c <UART_SetConfig+0x218>)
 8016c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c2c:	08016c45 	.word	0x08016c45
 8016c30:	08016c4d 	.word	0x08016c4d
 8016c34:	08016c55 	.word	0x08016c55
 8016c38:	08016c5d 	.word	0x08016c5d
 8016c3c:	08016c65 	.word	0x08016c65
 8016c40:	08016c6d 	.word	0x08016c6d
 8016c44:	2300      	movs	r3, #0
 8016c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c4a:	e1b6      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c4c:	2304      	movs	r3, #4
 8016c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c52:	e1b2      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c54:	2308      	movs	r3, #8
 8016c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c5a:	e1ae      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c5c:	2310      	movs	r3, #16
 8016c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c62:	e1aa      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c64:	2320      	movs	r3, #32
 8016c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c6a:	e1a6      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c6c:	2340      	movs	r3, #64	; 0x40
 8016c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c72:	e1a2      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c74:	2380      	movs	r3, #128	; 0x80
 8016c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016c7a:	e19e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	4a35      	ldr	r2, [pc, #212]	; (8016d58 <UART_SetConfig+0x344>)
 8016c82:	4293      	cmp	r3, r2
 8016c84:	d130      	bne.n	8016ce8 <UART_SetConfig+0x2d4>
 8016c86:	4b31      	ldr	r3, [pc, #196]	; (8016d4c <UART_SetConfig+0x338>)
 8016c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c8a:	f003 0307 	and.w	r3, r3, #7
 8016c8e:	2b05      	cmp	r3, #5
 8016c90:	d826      	bhi.n	8016ce0 <UART_SetConfig+0x2cc>
 8016c92:	a201      	add	r2, pc, #4	; (adr r2, 8016c98 <UART_SetConfig+0x284>)
 8016c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c98:	08016cb1 	.word	0x08016cb1
 8016c9c:	08016cb9 	.word	0x08016cb9
 8016ca0:	08016cc1 	.word	0x08016cc1
 8016ca4:	08016cc9 	.word	0x08016cc9
 8016ca8:	08016cd1 	.word	0x08016cd1
 8016cac:	08016cd9 	.word	0x08016cd9
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cb6:	e180      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016cb8:	2304      	movs	r3, #4
 8016cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cbe:	e17c      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016cc0:	2308      	movs	r3, #8
 8016cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cc6:	e178      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016cc8:	2310      	movs	r3, #16
 8016cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cce:	e174      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016cd0:	2320      	movs	r3, #32
 8016cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cd6:	e170      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016cd8:	2340      	movs	r3, #64	; 0x40
 8016cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016cde:	e16c      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ce0:	2380      	movs	r3, #128	; 0x80
 8016ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ce6:	e168      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4a1b      	ldr	r2, [pc, #108]	; (8016d5c <UART_SetConfig+0x348>)
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	d142      	bne.n	8016d78 <UART_SetConfig+0x364>
 8016cf2:	4b16      	ldr	r3, [pc, #88]	; (8016d4c <UART_SetConfig+0x338>)
 8016cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016cf6:	f003 0307 	and.w	r3, r3, #7
 8016cfa:	2b05      	cmp	r3, #5
 8016cfc:	d838      	bhi.n	8016d70 <UART_SetConfig+0x35c>
 8016cfe:	a201      	add	r2, pc, #4	; (adr r2, 8016d04 <UART_SetConfig+0x2f0>)
 8016d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d04:	08016d1d 	.word	0x08016d1d
 8016d08:	08016d25 	.word	0x08016d25
 8016d0c:	08016d2d 	.word	0x08016d2d
 8016d10:	08016d35 	.word	0x08016d35
 8016d14:	08016d61 	.word	0x08016d61
 8016d18:	08016d69 	.word	0x08016d69
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d22:	e14a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d24:	2304      	movs	r3, #4
 8016d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d2a:	e146      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d2c:	2308      	movs	r3, #8
 8016d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d32:	e142      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d34:	2310      	movs	r3, #16
 8016d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d3a:	e13e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d3c:	cfff69f3 	.word	0xcfff69f3
 8016d40:	58000c00 	.word	0x58000c00
 8016d44:	11fff4ff 	.word	0x11fff4ff
 8016d48:	40011000 	.word	0x40011000
 8016d4c:	58024400 	.word	0x58024400
 8016d50:	40004400 	.word	0x40004400
 8016d54:	40004800 	.word	0x40004800
 8016d58:	40004c00 	.word	0x40004c00
 8016d5c:	40005000 	.word	0x40005000
 8016d60:	2320      	movs	r3, #32
 8016d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d66:	e128      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d68:	2340      	movs	r3, #64	; 0x40
 8016d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d6e:	e124      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d70:	2380      	movs	r3, #128	; 0x80
 8016d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016d76:	e120      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	4acb      	ldr	r2, [pc, #812]	; (80170ac <UART_SetConfig+0x698>)
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	d176      	bne.n	8016e70 <UART_SetConfig+0x45c>
 8016d82:	4bcb      	ldr	r3, [pc, #812]	; (80170b0 <UART_SetConfig+0x69c>)
 8016d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016d8a:	2b28      	cmp	r3, #40	; 0x28
 8016d8c:	d86c      	bhi.n	8016e68 <UART_SetConfig+0x454>
 8016d8e:	a201      	add	r2, pc, #4	; (adr r2, 8016d94 <UART_SetConfig+0x380>)
 8016d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d94:	08016e39 	.word	0x08016e39
 8016d98:	08016e69 	.word	0x08016e69
 8016d9c:	08016e69 	.word	0x08016e69
 8016da0:	08016e69 	.word	0x08016e69
 8016da4:	08016e69 	.word	0x08016e69
 8016da8:	08016e69 	.word	0x08016e69
 8016dac:	08016e69 	.word	0x08016e69
 8016db0:	08016e69 	.word	0x08016e69
 8016db4:	08016e41 	.word	0x08016e41
 8016db8:	08016e69 	.word	0x08016e69
 8016dbc:	08016e69 	.word	0x08016e69
 8016dc0:	08016e69 	.word	0x08016e69
 8016dc4:	08016e69 	.word	0x08016e69
 8016dc8:	08016e69 	.word	0x08016e69
 8016dcc:	08016e69 	.word	0x08016e69
 8016dd0:	08016e69 	.word	0x08016e69
 8016dd4:	08016e49 	.word	0x08016e49
 8016dd8:	08016e69 	.word	0x08016e69
 8016ddc:	08016e69 	.word	0x08016e69
 8016de0:	08016e69 	.word	0x08016e69
 8016de4:	08016e69 	.word	0x08016e69
 8016de8:	08016e69 	.word	0x08016e69
 8016dec:	08016e69 	.word	0x08016e69
 8016df0:	08016e69 	.word	0x08016e69
 8016df4:	08016e51 	.word	0x08016e51
 8016df8:	08016e69 	.word	0x08016e69
 8016dfc:	08016e69 	.word	0x08016e69
 8016e00:	08016e69 	.word	0x08016e69
 8016e04:	08016e69 	.word	0x08016e69
 8016e08:	08016e69 	.word	0x08016e69
 8016e0c:	08016e69 	.word	0x08016e69
 8016e10:	08016e69 	.word	0x08016e69
 8016e14:	08016e59 	.word	0x08016e59
 8016e18:	08016e69 	.word	0x08016e69
 8016e1c:	08016e69 	.word	0x08016e69
 8016e20:	08016e69 	.word	0x08016e69
 8016e24:	08016e69 	.word	0x08016e69
 8016e28:	08016e69 	.word	0x08016e69
 8016e2c:	08016e69 	.word	0x08016e69
 8016e30:	08016e69 	.word	0x08016e69
 8016e34:	08016e61 	.word	0x08016e61
 8016e38:	2301      	movs	r3, #1
 8016e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e3e:	e0bc      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e40:	2304      	movs	r3, #4
 8016e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e46:	e0b8      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e48:	2308      	movs	r3, #8
 8016e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e4e:	e0b4      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e50:	2310      	movs	r3, #16
 8016e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e56:	e0b0      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e58:	2320      	movs	r3, #32
 8016e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e5e:	e0ac      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e60:	2340      	movs	r3, #64	; 0x40
 8016e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e66:	e0a8      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e68:	2380      	movs	r3, #128	; 0x80
 8016e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016e6e:	e0a4      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	4a8f      	ldr	r2, [pc, #572]	; (80170b4 <UART_SetConfig+0x6a0>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d130      	bne.n	8016edc <UART_SetConfig+0x4c8>
 8016e7a:	4b8d      	ldr	r3, [pc, #564]	; (80170b0 <UART_SetConfig+0x69c>)
 8016e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e7e:	f003 0307 	and.w	r3, r3, #7
 8016e82:	2b05      	cmp	r3, #5
 8016e84:	d826      	bhi.n	8016ed4 <UART_SetConfig+0x4c0>
 8016e86:	a201      	add	r2, pc, #4	; (adr r2, 8016e8c <UART_SetConfig+0x478>)
 8016e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e8c:	08016ea5 	.word	0x08016ea5
 8016e90:	08016ead 	.word	0x08016ead
 8016e94:	08016eb5 	.word	0x08016eb5
 8016e98:	08016ebd 	.word	0x08016ebd
 8016e9c:	08016ec5 	.word	0x08016ec5
 8016ea0:	08016ecd 	.word	0x08016ecd
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eaa:	e086      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016eac:	2304      	movs	r3, #4
 8016eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eb2:	e082      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016eb4:	2308      	movs	r3, #8
 8016eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eba:	e07e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ebc:	2310      	movs	r3, #16
 8016ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ec2:	e07a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ec4:	2320      	movs	r3, #32
 8016ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eca:	e076      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ecc:	2340      	movs	r3, #64	; 0x40
 8016ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016ed2:	e072      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016ed4:	2380      	movs	r3, #128	; 0x80
 8016ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016eda:	e06e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4a75      	ldr	r2, [pc, #468]	; (80170b8 <UART_SetConfig+0x6a4>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d130      	bne.n	8016f48 <UART_SetConfig+0x534>
 8016ee6:	4b72      	ldr	r3, [pc, #456]	; (80170b0 <UART_SetConfig+0x69c>)
 8016ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016eea:	f003 0307 	and.w	r3, r3, #7
 8016eee:	2b05      	cmp	r3, #5
 8016ef0:	d826      	bhi.n	8016f40 <UART_SetConfig+0x52c>
 8016ef2:	a201      	add	r2, pc, #4	; (adr r2, 8016ef8 <UART_SetConfig+0x4e4>)
 8016ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ef8:	08016f11 	.word	0x08016f11
 8016efc:	08016f19 	.word	0x08016f19
 8016f00:	08016f21 	.word	0x08016f21
 8016f04:	08016f29 	.word	0x08016f29
 8016f08:	08016f31 	.word	0x08016f31
 8016f0c:	08016f39 	.word	0x08016f39
 8016f10:	2300      	movs	r3, #0
 8016f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f16:	e050      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f18:	2304      	movs	r3, #4
 8016f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f1e:	e04c      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f20:	2308      	movs	r3, #8
 8016f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f26:	e048      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f28:	2310      	movs	r3, #16
 8016f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f2e:	e044      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f30:	2320      	movs	r3, #32
 8016f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f36:	e040      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f38:	2340      	movs	r3, #64	; 0x40
 8016f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f3e:	e03c      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f40:	2380      	movs	r3, #128	; 0x80
 8016f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f46:	e038      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	4a5b      	ldr	r2, [pc, #364]	; (80170bc <UART_SetConfig+0x6a8>)
 8016f4e:	4293      	cmp	r3, r2
 8016f50:	d130      	bne.n	8016fb4 <UART_SetConfig+0x5a0>
 8016f52:	4b57      	ldr	r3, [pc, #348]	; (80170b0 <UART_SetConfig+0x69c>)
 8016f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f56:	f003 0307 	and.w	r3, r3, #7
 8016f5a:	2b05      	cmp	r3, #5
 8016f5c:	d826      	bhi.n	8016fac <UART_SetConfig+0x598>
 8016f5e:	a201      	add	r2, pc, #4	; (adr r2, 8016f64 <UART_SetConfig+0x550>)
 8016f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f64:	08016f7d 	.word	0x08016f7d
 8016f68:	08016f85 	.word	0x08016f85
 8016f6c:	08016f8d 	.word	0x08016f8d
 8016f70:	08016f95 	.word	0x08016f95
 8016f74:	08016f9d 	.word	0x08016f9d
 8016f78:	08016fa5 	.word	0x08016fa5
 8016f7c:	2302      	movs	r3, #2
 8016f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f82:	e01a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f84:	2304      	movs	r3, #4
 8016f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f8a:	e016      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f8c:	2308      	movs	r3, #8
 8016f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f92:	e012      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f94:	2310      	movs	r3, #16
 8016f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016f9a:	e00e      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016f9c:	2320      	movs	r3, #32
 8016f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fa2:	e00a      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016fa4:	2340      	movs	r3, #64	; 0x40
 8016fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016faa:	e006      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016fac:	2380      	movs	r3, #128	; 0x80
 8016fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016fb2:	e002      	b.n	8016fba <UART_SetConfig+0x5a6>
 8016fb4:	2380      	movs	r3, #128	; 0x80
 8016fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	4a3f      	ldr	r2, [pc, #252]	; (80170bc <UART_SetConfig+0x6a8>)
 8016fc0:	4293      	cmp	r3, r2
 8016fc2:	f040 80f8 	bne.w	80171b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016fca:	2b20      	cmp	r3, #32
 8016fcc:	dc46      	bgt.n	801705c <UART_SetConfig+0x648>
 8016fce:	2b02      	cmp	r3, #2
 8016fd0:	f2c0 8082 	blt.w	80170d8 <UART_SetConfig+0x6c4>
 8016fd4:	3b02      	subs	r3, #2
 8016fd6:	2b1e      	cmp	r3, #30
 8016fd8:	d87e      	bhi.n	80170d8 <UART_SetConfig+0x6c4>
 8016fda:	a201      	add	r2, pc, #4	; (adr r2, 8016fe0 <UART_SetConfig+0x5cc>)
 8016fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fe0:	08017063 	.word	0x08017063
 8016fe4:	080170d9 	.word	0x080170d9
 8016fe8:	0801706b 	.word	0x0801706b
 8016fec:	080170d9 	.word	0x080170d9
 8016ff0:	080170d9 	.word	0x080170d9
 8016ff4:	080170d9 	.word	0x080170d9
 8016ff8:	0801707b 	.word	0x0801707b
 8016ffc:	080170d9 	.word	0x080170d9
 8017000:	080170d9 	.word	0x080170d9
 8017004:	080170d9 	.word	0x080170d9
 8017008:	080170d9 	.word	0x080170d9
 801700c:	080170d9 	.word	0x080170d9
 8017010:	080170d9 	.word	0x080170d9
 8017014:	080170d9 	.word	0x080170d9
 8017018:	0801708b 	.word	0x0801708b
 801701c:	080170d9 	.word	0x080170d9
 8017020:	080170d9 	.word	0x080170d9
 8017024:	080170d9 	.word	0x080170d9
 8017028:	080170d9 	.word	0x080170d9
 801702c:	080170d9 	.word	0x080170d9
 8017030:	080170d9 	.word	0x080170d9
 8017034:	080170d9 	.word	0x080170d9
 8017038:	080170d9 	.word	0x080170d9
 801703c:	080170d9 	.word	0x080170d9
 8017040:	080170d9 	.word	0x080170d9
 8017044:	080170d9 	.word	0x080170d9
 8017048:	080170d9 	.word	0x080170d9
 801704c:	080170d9 	.word	0x080170d9
 8017050:	080170d9 	.word	0x080170d9
 8017054:	080170d9 	.word	0x080170d9
 8017058:	080170cb 	.word	0x080170cb
 801705c:	2b40      	cmp	r3, #64	; 0x40
 801705e:	d037      	beq.n	80170d0 <UART_SetConfig+0x6bc>
 8017060:	e03a      	b.n	80170d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8017062:	f7fc fcfd 	bl	8013a60 <HAL_RCCEx_GetD3PCLK1Freq>
 8017066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017068:	e03c      	b.n	80170e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801706a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801706e:	4618      	mov	r0, r3
 8017070:	f7fc fd0c 	bl	8013a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017078:	e034      	b.n	80170e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801707a:	f107 0318 	add.w	r3, r7, #24
 801707e:	4618      	mov	r0, r3
 8017080:	f7fc fe58 	bl	8013d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017088:	e02c      	b.n	80170e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801708a:	4b09      	ldr	r3, [pc, #36]	; (80170b0 <UART_SetConfig+0x69c>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f003 0320 	and.w	r3, r3, #32
 8017092:	2b00      	cmp	r3, #0
 8017094:	d016      	beq.n	80170c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017096:	4b06      	ldr	r3, [pc, #24]	; (80170b0 <UART_SetConfig+0x69c>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	08db      	lsrs	r3, r3, #3
 801709c:	f003 0303 	and.w	r3, r3, #3
 80170a0:	4a07      	ldr	r2, [pc, #28]	; (80170c0 <UART_SetConfig+0x6ac>)
 80170a2:	fa22 f303 	lsr.w	r3, r2, r3
 80170a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80170a8:	e01c      	b.n	80170e4 <UART_SetConfig+0x6d0>
 80170aa:	bf00      	nop
 80170ac:	40011400 	.word	0x40011400
 80170b0:	58024400 	.word	0x58024400
 80170b4:	40007800 	.word	0x40007800
 80170b8:	40007c00 	.word	0x40007c00
 80170bc:	58000c00 	.word	0x58000c00
 80170c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80170c4:	4b9d      	ldr	r3, [pc, #628]	; (801733c <UART_SetConfig+0x928>)
 80170c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170c8:	e00c      	b.n	80170e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80170ca:	4b9d      	ldr	r3, [pc, #628]	; (8017340 <UART_SetConfig+0x92c>)
 80170cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170ce:	e009      	b.n	80170e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80170d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80170d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80170d6:	e005      	b.n	80170e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80170d8:	2300      	movs	r3, #0
 80170da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80170dc:	2301      	movs	r3, #1
 80170de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80170e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80170e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f000 81de 	beq.w	80174a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170f0:	4a94      	ldr	r2, [pc, #592]	; (8017344 <UART_SetConfig+0x930>)
 80170f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80170f6:	461a      	mov	r2, r3
 80170f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80170fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	685a      	ldr	r2, [r3, #4]
 8017104:	4613      	mov	r3, r2
 8017106:	005b      	lsls	r3, r3, #1
 8017108:	4413      	add	r3, r2
 801710a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801710c:	429a      	cmp	r2, r3
 801710e:	d305      	bcc.n	801711c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017118:	429a      	cmp	r2, r3
 801711a:	d903      	bls.n	8017124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801711c:	2301      	movs	r3, #1
 801711e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017122:	e1c1      	b.n	80174a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017126:	2200      	movs	r2, #0
 8017128:	60bb      	str	r3, [r7, #8]
 801712a:	60fa      	str	r2, [r7, #12]
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017130:	4a84      	ldr	r2, [pc, #528]	; (8017344 <UART_SetConfig+0x930>)
 8017132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017136:	b29b      	uxth	r3, r3
 8017138:	2200      	movs	r2, #0
 801713a:	603b      	str	r3, [r7, #0]
 801713c:	607a      	str	r2, [r7, #4]
 801713e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017146:	f7e9 f91b 	bl	8000380 <__aeabi_uldivmod>
 801714a:	4602      	mov	r2, r0
 801714c:	460b      	mov	r3, r1
 801714e:	4610      	mov	r0, r2
 8017150:	4619      	mov	r1, r3
 8017152:	f04f 0200 	mov.w	r2, #0
 8017156:	f04f 0300 	mov.w	r3, #0
 801715a:	020b      	lsls	r3, r1, #8
 801715c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017160:	0202      	lsls	r2, r0, #8
 8017162:	6979      	ldr	r1, [r7, #20]
 8017164:	6849      	ldr	r1, [r1, #4]
 8017166:	0849      	lsrs	r1, r1, #1
 8017168:	2000      	movs	r0, #0
 801716a:	460c      	mov	r4, r1
 801716c:	4605      	mov	r5, r0
 801716e:	eb12 0804 	adds.w	r8, r2, r4
 8017172:	eb43 0905 	adc.w	r9, r3, r5
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	2200      	movs	r2, #0
 801717c:	469a      	mov	sl, r3
 801717e:	4693      	mov	fp, r2
 8017180:	4652      	mov	r2, sl
 8017182:	465b      	mov	r3, fp
 8017184:	4640      	mov	r0, r8
 8017186:	4649      	mov	r1, r9
 8017188:	f7e9 f8fa 	bl	8000380 <__aeabi_uldivmod>
 801718c:	4602      	mov	r2, r0
 801718e:	460b      	mov	r3, r1
 8017190:	4613      	mov	r3, r2
 8017192:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801719a:	d308      	bcc.n	80171ae <UART_SetConfig+0x79a>
 801719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801719e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80171a2:	d204      	bcs.n	80171ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80171a4:	697b      	ldr	r3, [r7, #20]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171aa:	60da      	str	r2, [r3, #12]
 80171ac:	e17c      	b.n	80174a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80171ae:	2301      	movs	r3, #1
 80171b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80171b4:	e178      	b.n	80174a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80171b6:	697b      	ldr	r3, [r7, #20]
 80171b8:	69db      	ldr	r3, [r3, #28]
 80171ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80171be:	f040 80c5 	bne.w	801734c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80171c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80171c6:	2b20      	cmp	r3, #32
 80171c8:	dc48      	bgt.n	801725c <UART_SetConfig+0x848>
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	db7b      	blt.n	80172c6 <UART_SetConfig+0x8b2>
 80171ce:	2b20      	cmp	r3, #32
 80171d0:	d879      	bhi.n	80172c6 <UART_SetConfig+0x8b2>
 80171d2:	a201      	add	r2, pc, #4	; (adr r2, 80171d8 <UART_SetConfig+0x7c4>)
 80171d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171d8:	08017263 	.word	0x08017263
 80171dc:	0801726b 	.word	0x0801726b
 80171e0:	080172c7 	.word	0x080172c7
 80171e4:	080172c7 	.word	0x080172c7
 80171e8:	08017273 	.word	0x08017273
 80171ec:	080172c7 	.word	0x080172c7
 80171f0:	080172c7 	.word	0x080172c7
 80171f4:	080172c7 	.word	0x080172c7
 80171f8:	08017283 	.word	0x08017283
 80171fc:	080172c7 	.word	0x080172c7
 8017200:	080172c7 	.word	0x080172c7
 8017204:	080172c7 	.word	0x080172c7
 8017208:	080172c7 	.word	0x080172c7
 801720c:	080172c7 	.word	0x080172c7
 8017210:	080172c7 	.word	0x080172c7
 8017214:	080172c7 	.word	0x080172c7
 8017218:	08017293 	.word	0x08017293
 801721c:	080172c7 	.word	0x080172c7
 8017220:	080172c7 	.word	0x080172c7
 8017224:	080172c7 	.word	0x080172c7
 8017228:	080172c7 	.word	0x080172c7
 801722c:	080172c7 	.word	0x080172c7
 8017230:	080172c7 	.word	0x080172c7
 8017234:	080172c7 	.word	0x080172c7
 8017238:	080172c7 	.word	0x080172c7
 801723c:	080172c7 	.word	0x080172c7
 8017240:	080172c7 	.word	0x080172c7
 8017244:	080172c7 	.word	0x080172c7
 8017248:	080172c7 	.word	0x080172c7
 801724c:	080172c7 	.word	0x080172c7
 8017250:	080172c7 	.word	0x080172c7
 8017254:	080172c7 	.word	0x080172c7
 8017258:	080172b9 	.word	0x080172b9
 801725c:	2b40      	cmp	r3, #64	; 0x40
 801725e:	d02e      	beq.n	80172be <UART_SetConfig+0x8aa>
 8017260:	e031      	b.n	80172c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017262:	f7fb fc8b 	bl	8012b7c <HAL_RCC_GetPCLK1Freq>
 8017266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017268:	e033      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801726a:	f7fb fc9d 	bl	8012ba8 <HAL_RCC_GetPCLK2Freq>
 801726e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8017270:	e02f      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017276:	4618      	mov	r0, r3
 8017278:	f7fc fc08 	bl	8013a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017280:	e027      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8017282:	f107 0318 	add.w	r3, r7, #24
 8017286:	4618      	mov	r0, r3
 8017288:	f7fc fd54 	bl	8013d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801728c:	69fb      	ldr	r3, [r7, #28]
 801728e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017290:	e01f      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017292:	4b2d      	ldr	r3, [pc, #180]	; (8017348 <UART_SetConfig+0x934>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f003 0320 	and.w	r3, r3, #32
 801729a:	2b00      	cmp	r3, #0
 801729c:	d009      	beq.n	80172b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801729e:	4b2a      	ldr	r3, [pc, #168]	; (8017348 <UART_SetConfig+0x934>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	08db      	lsrs	r3, r3, #3
 80172a4:	f003 0303 	and.w	r3, r3, #3
 80172a8:	4a24      	ldr	r2, [pc, #144]	; (801733c <UART_SetConfig+0x928>)
 80172aa:	fa22 f303 	lsr.w	r3, r2, r3
 80172ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80172b0:	e00f      	b.n	80172d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80172b2:	4b22      	ldr	r3, [pc, #136]	; (801733c <UART_SetConfig+0x928>)
 80172b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80172b6:	e00c      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80172b8:	4b21      	ldr	r3, [pc, #132]	; (8017340 <UART_SetConfig+0x92c>)
 80172ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80172bc:	e009      	b.n	80172d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80172be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80172c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80172c4:	e005      	b.n	80172d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80172c6:	2300      	movs	r3, #0
 80172c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80172ca:	2301      	movs	r3, #1
 80172cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80172d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80172d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	f000 80e7 	beq.w	80174a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80172da:	697b      	ldr	r3, [r7, #20]
 80172dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172de:	4a19      	ldr	r2, [pc, #100]	; (8017344 <UART_SetConfig+0x930>)
 80172e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80172e4:	461a      	mov	r2, r3
 80172e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80172ec:	005a      	lsls	r2, r3, #1
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	085b      	lsrs	r3, r3, #1
 80172f4:	441a      	add	r2, r3
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80172fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017302:	2b0f      	cmp	r3, #15
 8017304:	d916      	bls.n	8017334 <UART_SetConfig+0x920>
 8017306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801730c:	d212      	bcs.n	8017334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017310:	b29b      	uxth	r3, r3
 8017312:	f023 030f 	bic.w	r3, r3, #15
 8017316:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731a:	085b      	lsrs	r3, r3, #1
 801731c:	b29b      	uxth	r3, r3
 801731e:	f003 0307 	and.w	r3, r3, #7
 8017322:	b29a      	uxth	r2, r3
 8017324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017326:	4313      	orrs	r3, r2
 8017328:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017330:	60da      	str	r2, [r3, #12]
 8017332:	e0b9      	b.n	80174a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8017334:	2301      	movs	r3, #1
 8017336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801733a:	e0b5      	b.n	80174a8 <UART_SetConfig+0xa94>
 801733c:	03d09000 	.word	0x03d09000
 8017340:	003d0900 	.word	0x003d0900
 8017344:	08038a7c 	.word	0x08038a7c
 8017348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801734c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017350:	2b20      	cmp	r3, #32
 8017352:	dc49      	bgt.n	80173e8 <UART_SetConfig+0x9d4>
 8017354:	2b00      	cmp	r3, #0
 8017356:	db7c      	blt.n	8017452 <UART_SetConfig+0xa3e>
 8017358:	2b20      	cmp	r3, #32
 801735a:	d87a      	bhi.n	8017452 <UART_SetConfig+0xa3e>
 801735c:	a201      	add	r2, pc, #4	; (adr r2, 8017364 <UART_SetConfig+0x950>)
 801735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017362:	bf00      	nop
 8017364:	080173ef 	.word	0x080173ef
 8017368:	080173f7 	.word	0x080173f7
 801736c:	08017453 	.word	0x08017453
 8017370:	08017453 	.word	0x08017453
 8017374:	080173ff 	.word	0x080173ff
 8017378:	08017453 	.word	0x08017453
 801737c:	08017453 	.word	0x08017453
 8017380:	08017453 	.word	0x08017453
 8017384:	0801740f 	.word	0x0801740f
 8017388:	08017453 	.word	0x08017453
 801738c:	08017453 	.word	0x08017453
 8017390:	08017453 	.word	0x08017453
 8017394:	08017453 	.word	0x08017453
 8017398:	08017453 	.word	0x08017453
 801739c:	08017453 	.word	0x08017453
 80173a0:	08017453 	.word	0x08017453
 80173a4:	0801741f 	.word	0x0801741f
 80173a8:	08017453 	.word	0x08017453
 80173ac:	08017453 	.word	0x08017453
 80173b0:	08017453 	.word	0x08017453
 80173b4:	08017453 	.word	0x08017453
 80173b8:	08017453 	.word	0x08017453
 80173bc:	08017453 	.word	0x08017453
 80173c0:	08017453 	.word	0x08017453
 80173c4:	08017453 	.word	0x08017453
 80173c8:	08017453 	.word	0x08017453
 80173cc:	08017453 	.word	0x08017453
 80173d0:	08017453 	.word	0x08017453
 80173d4:	08017453 	.word	0x08017453
 80173d8:	08017453 	.word	0x08017453
 80173dc:	08017453 	.word	0x08017453
 80173e0:	08017453 	.word	0x08017453
 80173e4:	08017445 	.word	0x08017445
 80173e8:	2b40      	cmp	r3, #64	; 0x40
 80173ea:	d02e      	beq.n	801744a <UART_SetConfig+0xa36>
 80173ec:	e031      	b.n	8017452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80173ee:	f7fb fbc5 	bl	8012b7c <HAL_RCC_GetPCLK1Freq>
 80173f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80173f4:	e033      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80173f6:	f7fb fbd7 	bl	8012ba8 <HAL_RCC_GetPCLK2Freq>
 80173fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80173fc:	e02f      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80173fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017402:	4618      	mov	r0, r3
 8017404:	f7fc fb42 	bl	8013a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801740c:	e027      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801740e:	f107 0318 	add.w	r3, r7, #24
 8017412:	4618      	mov	r0, r3
 8017414:	f7fc fc8e 	bl	8013d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801741c:	e01f      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801741e:	4b2d      	ldr	r3, [pc, #180]	; (80174d4 <UART_SetConfig+0xac0>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	f003 0320 	and.w	r3, r3, #32
 8017426:	2b00      	cmp	r3, #0
 8017428:	d009      	beq.n	801743e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801742a:	4b2a      	ldr	r3, [pc, #168]	; (80174d4 <UART_SetConfig+0xac0>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	08db      	lsrs	r3, r3, #3
 8017430:	f003 0303 	and.w	r3, r3, #3
 8017434:	4a28      	ldr	r2, [pc, #160]	; (80174d8 <UART_SetConfig+0xac4>)
 8017436:	fa22 f303 	lsr.w	r3, r2, r3
 801743a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801743c:	e00f      	b.n	801745e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801743e:	4b26      	ldr	r3, [pc, #152]	; (80174d8 <UART_SetConfig+0xac4>)
 8017440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017442:	e00c      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017444:	4b25      	ldr	r3, [pc, #148]	; (80174dc <UART_SetConfig+0xac8>)
 8017446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017448:	e009      	b.n	801745e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801744a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801744e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8017450:	e005      	b.n	801745e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8017452:	2300      	movs	r3, #0
 8017454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8017456:	2301      	movs	r3, #1
 8017458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801745c:	bf00      	nop
    }

    if (pclk != 0U)
 801745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017460:	2b00      	cmp	r3, #0
 8017462:	d021      	beq.n	80174a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017464:	697b      	ldr	r3, [r7, #20]
 8017466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017468:	4a1d      	ldr	r2, [pc, #116]	; (80174e0 <UART_SetConfig+0xacc>)
 801746a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801746e:	461a      	mov	r2, r3
 8017470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017472:	fbb3 f2f2 	udiv	r2, r3, r2
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	685b      	ldr	r3, [r3, #4]
 801747a:	085b      	lsrs	r3, r3, #1
 801747c:	441a      	add	r2, r3
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	685b      	ldr	r3, [r3, #4]
 8017482:	fbb2 f3f3 	udiv	r3, r2, r3
 8017486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801748a:	2b0f      	cmp	r3, #15
 801748c:	d909      	bls.n	80174a2 <UART_SetConfig+0xa8e>
 801748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017494:	d205      	bcs.n	80174a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017498:	b29a      	uxth	r2, r3
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	60da      	str	r2, [r3, #12]
 80174a0:	e002      	b.n	80174a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80174a2:	2301      	movs	r3, #1
 80174a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	2201      	movs	r2, #1
 80174ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	2201      	movs	r2, #1
 80174b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	2200      	movs	r2, #0
 80174bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	2200      	movs	r2, #0
 80174c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80174c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	3748      	adds	r7, #72	; 0x48
 80174cc:	46bd      	mov	sp, r7
 80174ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80174d2:	bf00      	nop
 80174d4:	58024400 	.word	0x58024400
 80174d8:	03d09000 	.word	0x03d09000
 80174dc:	003d0900 	.word	0x003d0900
 80174e0:	08038a7c 	.word	0x08038a7c

080174e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174f0:	f003 0301 	and.w	r3, r3, #1
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d00a      	beq.n	801750e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	430a      	orrs	r2, r1
 801750c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017512:	f003 0302 	and.w	r3, r3, #2
 8017516:	2b00      	cmp	r3, #0
 8017518:	d00a      	beq.n	8017530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	430a      	orrs	r2, r1
 801752e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017534:	f003 0304 	and.w	r3, r3, #4
 8017538:	2b00      	cmp	r3, #0
 801753a:	d00a      	beq.n	8017552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	430a      	orrs	r2, r1
 8017550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017556:	f003 0308 	and.w	r3, r3, #8
 801755a:	2b00      	cmp	r3, #0
 801755c:	d00a      	beq.n	8017574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	430a      	orrs	r2, r1
 8017572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017578:	f003 0310 	and.w	r3, r3, #16
 801757c:	2b00      	cmp	r3, #0
 801757e:	d00a      	beq.n	8017596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	689b      	ldr	r3, [r3, #8]
 8017586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	430a      	orrs	r2, r1
 8017594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801759a:	f003 0320 	and.w	r3, r3, #32
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d00a      	beq.n	80175b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	689b      	ldr	r3, [r3, #8]
 80175a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	430a      	orrs	r2, r1
 80175b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d01a      	beq.n	80175fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	430a      	orrs	r2, r1
 80175d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80175e2:	d10a      	bne.n	80175fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	685b      	ldr	r3, [r3, #4]
 80175ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	430a      	orrs	r2, r1
 80175f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00a      	beq.n	801761c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	430a      	orrs	r2, r1
 801761a:	605a      	str	r2, [r3, #4]
  }
}
 801761c:	bf00      	nop
 801761e:	370c      	adds	r7, #12
 8017620:	46bd      	mov	sp, r7
 8017622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017626:	4770      	bx	lr

08017628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b086      	sub	sp, #24
 801762c:	af02      	add	r7, sp, #8
 801762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2200      	movs	r2, #0
 8017634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017638:	f7f4 fb2a 	bl	800bc90 <HAL_GetTick>
 801763c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f003 0308 	and.w	r3, r3, #8
 8017648:	2b08      	cmp	r3, #8
 801764a:	d10e      	bne.n	801766a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801764c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017650:	9300      	str	r3, [sp, #0]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	2200      	movs	r2, #0
 8017656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f000 f82f 	bl	80176be <UART_WaitOnFlagUntilTimeout>
 8017660:	4603      	mov	r3, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	d001      	beq.n	801766a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017666:	2303      	movs	r3, #3
 8017668:	e025      	b.n	80176b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	f003 0304 	and.w	r3, r3, #4
 8017674:	2b04      	cmp	r3, #4
 8017676:	d10e      	bne.n	8017696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801767c:	9300      	str	r3, [sp, #0]
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	2200      	movs	r2, #0
 8017682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f000 f819 	bl	80176be <UART_WaitOnFlagUntilTimeout>
 801768c:	4603      	mov	r3, r0
 801768e:	2b00      	cmp	r3, #0
 8017690:	d001      	beq.n	8017696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017692:	2303      	movs	r3, #3
 8017694:	e00f      	b.n	80176b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	2220      	movs	r2, #32
 801769a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2220      	movs	r2, #32
 80176a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2200      	movs	r2, #0
 80176aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2200      	movs	r2, #0
 80176b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80176b4:	2300      	movs	r3, #0
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}

080176be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b09c      	sub	sp, #112	; 0x70
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	60f8      	str	r0, [r7, #12]
 80176c6:	60b9      	str	r1, [r7, #8]
 80176c8:	603b      	str	r3, [r7, #0]
 80176ca:	4613      	mov	r3, r2
 80176cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80176ce:	e0a9      	b.n	8017824 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80176d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176d6:	f000 80a5 	beq.w	8017824 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80176da:	f7f4 fad9 	bl	800bc90 <HAL_GetTick>
 80176de:	4602      	mov	r2, r0
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	1ad3      	subs	r3, r2, r3
 80176e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d302      	bcc.n	80176f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80176ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d140      	bne.n	8017772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176f8:	e853 3f00 	ldrex	r3, [r3]
 80176fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80176fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017704:	667b      	str	r3, [r7, #100]	; 0x64
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	461a      	mov	r2, r3
 801770c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801770e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017710:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017716:	e841 2300 	strex	r3, r2, [r1]
 801771a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801771c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801771e:	2b00      	cmp	r3, #0
 8017720:	d1e6      	bne.n	80176f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	3308      	adds	r3, #8
 8017728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801772a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801772c:	e853 3f00 	ldrex	r3, [r3]
 8017730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017734:	f023 0301 	bic.w	r3, r3, #1
 8017738:	663b      	str	r3, [r7, #96]	; 0x60
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	3308      	adds	r3, #8
 8017740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017742:	64ba      	str	r2, [r7, #72]	; 0x48
 8017744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801774a:	e841 2300 	strex	r3, r2, [r1]
 801774e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017752:	2b00      	cmp	r3, #0
 8017754:	d1e5      	bne.n	8017722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2220      	movs	r2, #32
 801775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2220      	movs	r2, #32
 8017762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2200      	movs	r2, #0
 801776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801776e:	2303      	movs	r3, #3
 8017770:	e069      	b.n	8017846 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	f003 0304 	and.w	r3, r3, #4
 801777c:	2b00      	cmp	r3, #0
 801777e:	d051      	beq.n	8017824 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	69db      	ldr	r3, [r3, #28]
 8017786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801778a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801778e:	d149      	bne.n	8017824 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a2:	e853 3f00 	ldrex	r3, [r3]
 80177a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80177ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	461a      	mov	r2, r3
 80177b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80177b8:	637b      	str	r3, [r7, #52]	; 0x34
 80177ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80177be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177c0:	e841 2300 	strex	r3, r2, [r1]
 80177c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80177c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d1e6      	bne.n	801779a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	3308      	adds	r3, #8
 80177d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	e853 3f00 	ldrex	r3, [r3]
 80177da:	613b      	str	r3, [r7, #16]
   return(result);
 80177dc:	693b      	ldr	r3, [r7, #16]
 80177de:	f023 0301 	bic.w	r3, r3, #1
 80177e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	3308      	adds	r3, #8
 80177ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80177ec:	623a      	str	r2, [r7, #32]
 80177ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177f0:	69f9      	ldr	r1, [r7, #28]
 80177f2:	6a3a      	ldr	r2, [r7, #32]
 80177f4:	e841 2300 	strex	r3, r2, [r1]
 80177f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80177fa:	69bb      	ldr	r3, [r7, #24]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d1e5      	bne.n	80177cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	2220      	movs	r2, #32
 8017804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2220      	movs	r2, #32
 801780c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	2220      	movs	r2, #32
 8017814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2200      	movs	r2, #0
 801781c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8017820:	2303      	movs	r3, #3
 8017822:	e010      	b.n	8017846 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	69da      	ldr	r2, [r3, #28]
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	4013      	ands	r3, r2
 801782e:	68ba      	ldr	r2, [r7, #8]
 8017830:	429a      	cmp	r2, r3
 8017832:	bf0c      	ite	eq
 8017834:	2301      	moveq	r3, #1
 8017836:	2300      	movne	r3, #0
 8017838:	b2db      	uxtb	r3, r3
 801783a:	461a      	mov	r2, r3
 801783c:	79fb      	ldrb	r3, [r7, #7]
 801783e:	429a      	cmp	r2, r3
 8017840:	f43f af46 	beq.w	80176d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017844:	2300      	movs	r3, #0
}
 8017846:	4618      	mov	r0, r3
 8017848:	3770      	adds	r7, #112	; 0x70
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
	...

08017850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017850:	b480      	push	{r7}
 8017852:	b0a3      	sub	sp, #140	; 0x8c
 8017854:	af00      	add	r7, sp, #0
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	60b9      	str	r1, [r7, #8]
 801785a:	4613      	mov	r3, r2
 801785c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	88fa      	ldrh	r2, [r7, #6]
 8017868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	88fa      	ldrh	r2, [r7, #6]
 8017870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	2200      	movs	r2, #0
 8017878:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	689b      	ldr	r3, [r3, #8]
 801787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017882:	d10e      	bne.n	80178a2 <UART_Start_Receive_IT+0x52>
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	691b      	ldr	r3, [r3, #16]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d105      	bne.n	8017898 <UART_Start_Receive_IT+0x48>
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017896:	e02d      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	22ff      	movs	r2, #255	; 0xff
 801789c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80178a0:	e028      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	689b      	ldr	r3, [r3, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d10d      	bne.n	80178c6 <UART_Start_Receive_IT+0x76>
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	691b      	ldr	r3, [r3, #16]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d104      	bne.n	80178bc <UART_Start_Receive_IT+0x6c>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	22ff      	movs	r2, #255	; 0xff
 80178b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80178ba:	e01b      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	227f      	movs	r2, #127	; 0x7f
 80178c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80178c4:	e016      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	689b      	ldr	r3, [r3, #8]
 80178ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80178ce:	d10d      	bne.n	80178ec <UART_Start_Receive_IT+0x9c>
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	691b      	ldr	r3, [r3, #16]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d104      	bne.n	80178e2 <UART_Start_Receive_IT+0x92>
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	227f      	movs	r2, #127	; 0x7f
 80178dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80178e0:	e008      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	223f      	movs	r2, #63	; 0x3f
 80178e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80178ea:	e003      	b.n	80178f4 <UART_Start_Receive_IT+0xa4>
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2200      	movs	r2, #0
 80178f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	2200      	movs	r2, #0
 80178f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2222      	movs	r2, #34	; 0x22
 8017900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	3308      	adds	r3, #8
 801790a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801790e:	e853 3f00 	ldrex	r3, [r3]
 8017912:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017916:	f043 0301 	orr.w	r3, r3, #1
 801791a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	3308      	adds	r3, #8
 8017924:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017928:	673a      	str	r2, [r7, #112]	; 0x70
 801792a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801792c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801792e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017930:	e841 2300 	strex	r3, r2, [r1]
 8017934:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1e3      	bne.n	8017904 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017944:	d153      	bne.n	80179ee <UART_Start_Receive_IT+0x19e>
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801794c:	88fa      	ldrh	r2, [r7, #6]
 801794e:	429a      	cmp	r2, r3
 8017950:	d34d      	bcc.n	80179ee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	689b      	ldr	r3, [r3, #8]
 8017956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801795a:	d107      	bne.n	801796c <UART_Start_Receive_IT+0x11c>
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	691b      	ldr	r3, [r3, #16]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d103      	bne.n	801796c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	4a4b      	ldr	r2, [pc, #300]	; (8017a94 <UART_Start_Receive_IT+0x244>)
 8017968:	671a      	str	r2, [r3, #112]	; 0x70
 801796a:	e002      	b.n	8017972 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	4a4a      	ldr	r2, [pc, #296]	; (8017a98 <UART_Start_Receive_IT+0x248>)
 8017970:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	2200      	movs	r2, #0
 8017976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	691b      	ldr	r3, [r3, #16]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d01a      	beq.n	80179b8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801798a:	e853 3f00 	ldrex	r3, [r3]
 801798e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	461a      	mov	r2, r3
 80179a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80179a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80179a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80179aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80179ac:	e841 2300 	strex	r3, r2, [r1]
 80179b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80179b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d1e4      	bne.n	8017982 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	3308      	adds	r3, #8
 80179be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c2:	e853 3f00 	ldrex	r3, [r3]
 80179c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80179c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80179ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	3308      	adds	r3, #8
 80179d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80179d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80179da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80179de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80179e0:	e841 2300 	strex	r3, r2, [r1]
 80179e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80179e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d1e5      	bne.n	80179b8 <UART_Start_Receive_IT+0x168>
 80179ec:	e04a      	b.n	8017a84 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80179f6:	d107      	bne.n	8017a08 <UART_Start_Receive_IT+0x1b8>
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	691b      	ldr	r3, [r3, #16]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d103      	bne.n	8017a08 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	4a26      	ldr	r2, [pc, #152]	; (8017a9c <UART_Start_Receive_IT+0x24c>)
 8017a04:	671a      	str	r2, [r3, #112]	; 0x70
 8017a06:	e002      	b.n	8017a0e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	4a25      	ldr	r2, [pc, #148]	; (8017aa0 <UART_Start_Receive_IT+0x250>)
 8017a0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	2200      	movs	r2, #0
 8017a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	691b      	ldr	r3, [r3, #16]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d019      	beq.n	8017a52 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a26:	e853 3f00 	ldrex	r3, [r3]
 8017a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017a32:	677b      	str	r3, [r7, #116]	; 0x74
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	461a      	mov	r2, r3
 8017a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8017a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a44:	e841 2300 	strex	r3, r2, [r1]
 8017a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d1e6      	bne.n	8017a1e <UART_Start_Receive_IT+0x1ce>
 8017a50:	e018      	b.n	8017a84 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	e853 3f00 	ldrex	r3, [r3]
 8017a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	f043 0320 	orr.w	r3, r3, #32
 8017a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	461a      	mov	r2, r3
 8017a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a70:	623b      	str	r3, [r7, #32]
 8017a72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a74:	69f9      	ldr	r1, [r7, #28]
 8017a76:	6a3a      	ldr	r2, [r7, #32]
 8017a78:	e841 2300 	strex	r3, r2, [r1]
 8017a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8017a7e:	69bb      	ldr	r3, [r7, #24]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d1e6      	bne.n	8017a52 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8017a84:	2300      	movs	r3, #0
}
 8017a86:	4618      	mov	r0, r3
 8017a88:	378c      	adds	r7, #140	; 0x8c
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a90:	4770      	bx	lr
 8017a92:	bf00      	nop
 8017a94:	080184f1 	.word	0x080184f1
 8017a98:	080181f9 	.word	0x080181f9
 8017a9c:	08018097 	.word	0x08018097
 8017aa0:	08017f37 	.word	0x08017f37

08017aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b095      	sub	sp, #84	; 0x54
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ab4:	e853 3f00 	ldrex	r3, [r3]
 8017ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017aca:	643b      	str	r3, [r7, #64]	; 0x40
 8017acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ad2:	e841 2300 	strex	r3, r2, [r1]
 8017ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d1e6      	bne.n	8017aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	3308      	adds	r3, #8
 8017ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	e853 3f00 	ldrex	r3, [r3]
 8017aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8017aee:	69fa      	ldr	r2, [r7, #28]
 8017af0:	4b1e      	ldr	r3, [pc, #120]	; (8017b6c <UART_EndRxTransfer+0xc8>)
 8017af2:	4013      	ands	r3, r2
 8017af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	3308      	adds	r3, #8
 8017afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b06:	e841 2300 	strex	r3, r2, [r1]
 8017b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d1e5      	bne.n	8017ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b16:	2b01      	cmp	r3, #1
 8017b18:	d118      	bne.n	8017b4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	e853 3f00 	ldrex	r3, [r3]
 8017b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	f023 0310 	bic.w	r3, r3, #16
 8017b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	461a      	mov	r2, r3
 8017b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b38:	61bb      	str	r3, [r7, #24]
 8017b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b3c:	6979      	ldr	r1, [r7, #20]
 8017b3e:	69ba      	ldr	r2, [r7, #24]
 8017b40:	e841 2300 	strex	r3, r2, [r1]
 8017b44:	613b      	str	r3, [r7, #16]
   return(result);
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d1e6      	bne.n	8017b1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2220      	movs	r2, #32
 8017b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2200      	movs	r2, #0
 8017b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8017b60:	bf00      	nop
 8017b62:	3754      	adds	r7, #84	; 0x54
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr
 8017b6c:	effffffe 	.word	0xeffffffe

08017b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b084      	sub	sp, #16
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	2200      	movs	r2, #0
 8017b82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017b8e:	68f8      	ldr	r0, [r7, #12]
 8017b90:	f7fe ff2a 	bl	80169e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b94:	bf00      	nop
 8017b96:	3710      	adds	r7, #16
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	b08f      	sub	sp, #60	; 0x3c
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017baa:	2b21      	cmp	r3, #33	; 0x21
 8017bac:	d14c      	bne.n	8017c48 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d132      	bne.n	8017c20 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bc0:	6a3b      	ldr	r3, [r7, #32]
 8017bc2:	e853 3f00 	ldrex	r3, [r3]
 8017bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017bce:	637b      	str	r3, [r7, #52]	; 0x34
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	461a      	mov	r2, r3
 8017bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bda:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017be0:	e841 2300 	strex	r3, r2, [r1]
 8017be4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d1e6      	bne.n	8017bba <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	e853 3f00 	ldrex	r3, [r3]
 8017bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c00:	633b      	str	r3, [r7, #48]	; 0x30
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	461a      	mov	r2, r3
 8017c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c0a:	61bb      	str	r3, [r7, #24]
 8017c0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c0e:	6979      	ldr	r1, [r7, #20]
 8017c10:	69ba      	ldr	r2, [r7, #24]
 8017c12:	e841 2300 	strex	r3, r2, [r1]
 8017c16:	613b      	str	r3, [r7, #16]
   return(result);
 8017c18:	693b      	ldr	r3, [r7, #16]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d1e6      	bne.n	8017bec <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8017c1e:	e013      	b.n	8017c48 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c24:	781a      	ldrb	r2, [r3, #0]
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c30:	1c5a      	adds	r2, r3, #1
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	3b01      	subs	r3, #1
 8017c40:	b29a      	uxth	r2, r3
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8017c48:	bf00      	nop
 8017c4a:	373c      	adds	r7, #60	; 0x3c
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c52:	4770      	bx	lr

08017c54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017c54:	b480      	push	{r7}
 8017c56:	b091      	sub	sp, #68	; 0x44
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017c62:	2b21      	cmp	r3, #33	; 0x21
 8017c64:	d151      	bne.n	8017d0a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d132      	bne.n	8017cd8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7a:	e853 3f00 	ldrex	r3, [r3]
 8017c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8017c80:	6a3b      	ldr	r3, [r7, #32]
 8017c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c90:	633b      	str	r3, [r7, #48]	; 0x30
 8017c92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c98:	e841 2300 	strex	r3, r2, [r1]
 8017c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d1e6      	bne.n	8017c72 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017caa:	693b      	ldr	r3, [r7, #16]
 8017cac:	e853 3f00 	ldrex	r3, [r3]
 8017cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cc2:	61fb      	str	r3, [r7, #28]
 8017cc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cc6:	69b9      	ldr	r1, [r7, #24]
 8017cc8:	69fa      	ldr	r2, [r7, #28]
 8017cca:	e841 2300 	strex	r3, r2, [r1]
 8017cce:	617b      	str	r3, [r7, #20]
   return(result);
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d1e6      	bne.n	8017ca4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8017cd6:	e018      	b.n	8017d0a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8017cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ce0:	881b      	ldrh	r3, [r3, #0]
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017cec:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cf2:	1c9a      	adds	r2, r3, #2
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	3b01      	subs	r3, #1
 8017d02:	b29a      	uxth	r2, r3
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8017d0a:	bf00      	nop
 8017d0c:	3744      	adds	r7, #68	; 0x44
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d14:	4770      	bx	lr

08017d16 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017d16:	b480      	push	{r7}
 8017d18:	b091      	sub	sp, #68	; 0x44
 8017d1a:	af00      	add	r7, sp, #0
 8017d1c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017d24:	2b21      	cmp	r3, #33	; 0x21
 8017d26:	d160      	bne.n	8017dea <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017d2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017d30:	e057      	b.n	8017de2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d133      	bne.n	8017da6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	3308      	adds	r3, #8
 8017d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d48:	e853 3f00 	ldrex	r3, [r3]
 8017d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8017d4e:	6a3b      	ldr	r3, [r7, #32]
 8017d50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017d54:	63bb      	str	r3, [r7, #56]	; 0x38
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	3308      	adds	r3, #8
 8017d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8017d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d66:	e841 2300 	strex	r3, r2, [r1]
 8017d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1e5      	bne.n	8017d3e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	e853 3f00 	ldrex	r3, [r3]
 8017d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d86:	637b      	str	r3, [r7, #52]	; 0x34
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	461a      	mov	r2, r3
 8017d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d90:	61fb      	str	r3, [r7, #28]
 8017d92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d94:	69b9      	ldr	r1, [r7, #24]
 8017d96:	69fa      	ldr	r2, [r7, #28]
 8017d98:	e841 2300 	strex	r3, r2, [r1]
 8017d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d1e6      	bne.n	8017d72 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8017da4:	e021      	b.n	8017dea <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	69db      	ldr	r3, [r3, #28]
 8017dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d013      	beq.n	8017ddc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017db8:	781a      	ldrb	r2, [r3, #0]
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017dc4:	1c5a      	adds	r2, r3, #1
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	3b01      	subs	r3, #1
 8017dd4:	b29a      	uxth	r2, r3
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017ddc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017dde:	3b01      	subs	r3, #1
 8017de0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017de2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d1a4      	bne.n	8017d32 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8017de8:	e7ff      	b.n	8017dea <UART_TxISR_8BIT_FIFOEN+0xd4>
 8017dea:	bf00      	nop
 8017dec:	3744      	adds	r7, #68	; 0x44
 8017dee:	46bd      	mov	sp, r7
 8017df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df4:	4770      	bx	lr

08017df6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017df6:	b480      	push	{r7}
 8017df8:	b091      	sub	sp, #68	; 0x44
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017e04:	2b21      	cmp	r3, #33	; 0x21
 8017e06:	d165      	bne.n	8017ed4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017e0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017e10:	e05c      	b.n	8017ecc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d133      	bne.n	8017e86 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	3308      	adds	r3, #8
 8017e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e26:	6a3b      	ldr	r3, [r7, #32]
 8017e28:	e853 3f00 	ldrex	r3, [r3]
 8017e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8017e2e:	69fb      	ldr	r3, [r7, #28]
 8017e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017e34:	637b      	str	r3, [r7, #52]	; 0x34
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	3308      	adds	r3, #8
 8017e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e46:	e841 2300 	strex	r3, r2, [r1]
 8017e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d1e5      	bne.n	8017e1e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	e853 3f00 	ldrex	r3, [r3]
 8017e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e66:	633b      	str	r3, [r7, #48]	; 0x30
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	461a      	mov	r2, r3
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	61bb      	str	r3, [r7, #24]
 8017e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e74:	6979      	ldr	r1, [r7, #20]
 8017e76:	69ba      	ldr	r2, [r7, #24]
 8017e78:	e841 2300 	strex	r3, r2, [r1]
 8017e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d1e6      	bne.n	8017e52 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8017e84:	e026      	b.n	8017ed4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	69db      	ldr	r3, [r3, #28]
 8017e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d018      	beq.n	8017ec6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e98:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8017e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e9c:	881b      	ldrh	r3, [r3, #0]
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ea8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017eae:	1c9a      	adds	r2, r3, #2
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	b29a      	uxth	r2, r3
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017ec6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ec8:	3b01      	subs	r3, #1
 8017eca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017ecc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d19f      	bne.n	8017e12 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8017ed2:	e7ff      	b.n	8017ed4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8017ed4:	bf00      	nop
 8017ed6:	3744      	adds	r7, #68	; 0x44
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr

08017ee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b088      	sub	sp, #32
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	e853 3f00 	ldrex	r3, [r3]
 8017ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017efc:	61fb      	str	r3, [r7, #28]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	461a      	mov	r2, r3
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	61bb      	str	r3, [r7, #24]
 8017f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f0a:	6979      	ldr	r1, [r7, #20]
 8017f0c:	69ba      	ldr	r2, [r7, #24]
 8017f0e:	e841 2300 	strex	r3, r2, [r1]
 8017f12:	613b      	str	r3, [r7, #16]
   return(result);
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d1e6      	bne.n	8017ee8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	2220      	movs	r2, #32
 8017f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2200      	movs	r2, #0
 8017f26:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f7f2 fde9 	bl	800ab00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f2e:	bf00      	nop
 8017f30:	3720      	adds	r7, #32
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}

08017f36 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017f36:	b580      	push	{r7, lr}
 8017f38:	b096      	sub	sp, #88	; 0x58
 8017f3a:	af00      	add	r7, sp, #0
 8017f3c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017f44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f4e:	2b22      	cmp	r3, #34	; 0x22
 8017f50:	f040 8095 	bne.w	801807e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017f5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017f62:	b2d9      	uxtb	r1, r3
 8017f64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8017f68:	b2da      	uxtb	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f6e:	400a      	ands	r2, r1
 8017f70:	b2d2      	uxtb	r2, r2
 8017f72:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f78:	1c5a      	adds	r2, r3, #1
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	3b01      	subs	r3, #1
 8017f88:	b29a      	uxth	r2, r3
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017f96:	b29b      	uxth	r3, r3
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d178      	bne.n	801808e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa4:	e853 3f00 	ldrex	r3, [r3]
 8017fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fba:	647b      	str	r3, [r7, #68]	; 0x44
 8017fbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017fc2:	e841 2300 	strex	r3, r2, [r1]
 8017fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d1e6      	bne.n	8017f9c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	3308      	adds	r3, #8
 8017fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd8:	e853 3f00 	ldrex	r3, [r3]
 8017fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8017fde:	6a3b      	ldr	r3, [r7, #32]
 8017fe0:	f023 0301 	bic.w	r3, r3, #1
 8017fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	3308      	adds	r3, #8
 8017fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017fee:	633a      	str	r2, [r7, #48]	; 0x30
 8017ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ff6:	e841 2300 	strex	r3, r2, [r1]
 8017ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d1e5      	bne.n	8017fce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2220      	movs	r2, #32
 8018006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2200      	movs	r2, #0
 801800e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018014:	2b01      	cmp	r3, #1
 8018016:	d12e      	bne.n	8018076 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2200      	movs	r2, #0
 801801c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	e853 3f00 	ldrex	r3, [r3]
 801802a:	60fb      	str	r3, [r7, #12]
   return(result);
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	f023 0310 	bic.w	r3, r3, #16
 8018032:	64bb      	str	r3, [r7, #72]	; 0x48
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	461a      	mov	r2, r3
 801803a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801803c:	61fb      	str	r3, [r7, #28]
 801803e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018040:	69b9      	ldr	r1, [r7, #24]
 8018042:	69fa      	ldr	r2, [r7, #28]
 8018044:	e841 2300 	strex	r3, r2, [r1]
 8018048:	617b      	str	r3, [r7, #20]
   return(result);
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d1e6      	bne.n	801801e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	69db      	ldr	r3, [r3, #28]
 8018056:	f003 0310 	and.w	r3, r3, #16
 801805a:	2b10      	cmp	r3, #16
 801805c:	d103      	bne.n	8018066 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	2210      	movs	r2, #16
 8018064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801806c:	4619      	mov	r1, r3
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7fe fcc4 	bl	80169fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018074:	e00b      	b.n	801808e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7f2 fd30 	bl	800aadc <HAL_UART_RxCpltCallback>
}
 801807c:	e007      	b.n	801808e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	699a      	ldr	r2, [r3, #24]
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	f042 0208 	orr.w	r2, r2, #8
 801808c:	619a      	str	r2, [r3, #24]
}
 801808e:	bf00      	nop
 8018090:	3758      	adds	r7, #88	; 0x58
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}

08018096 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018096:	b580      	push	{r7, lr}
 8018098:	b096      	sub	sp, #88	; 0x58
 801809a:	af00      	add	r7, sp, #0
 801809c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180ae:	2b22      	cmp	r3, #34	; 0x22
 80180b0:	f040 8095 	bne.w	80181de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180c2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80180c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80180c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80180cc:	4013      	ands	r3, r2
 80180ce:	b29a      	uxth	r2, r3
 80180d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180d8:	1c9a      	adds	r2, r3, #2
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80180e4:	b29b      	uxth	r3, r3
 80180e6:	3b01      	subs	r3, #1
 80180e8:	b29a      	uxth	r2, r3
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d178      	bne.n	80181ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018104:	e853 3f00 	ldrex	r3, [r3]
 8018108:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801810c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	461a      	mov	r2, r3
 8018118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801811a:	643b      	str	r3, [r7, #64]	; 0x40
 801811c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801811e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018122:	e841 2300 	strex	r3, r2, [r1]
 8018126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801812a:	2b00      	cmp	r3, #0
 801812c:	d1e6      	bne.n	80180fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	3308      	adds	r3, #8
 8018134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018136:	6a3b      	ldr	r3, [r7, #32]
 8018138:	e853 3f00 	ldrex	r3, [r3]
 801813c:	61fb      	str	r3, [r7, #28]
   return(result);
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	f023 0301 	bic.w	r3, r3, #1
 8018144:	64bb      	str	r3, [r7, #72]	; 0x48
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	3308      	adds	r3, #8
 801814c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801814e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018150:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018156:	e841 2300 	strex	r3, r2, [r1]
 801815a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815e:	2b00      	cmp	r3, #0
 8018160:	d1e5      	bne.n	801812e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	2220      	movs	r2, #32
 8018166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	2200      	movs	r2, #0
 801816e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018174:	2b01      	cmp	r3, #1
 8018176:	d12e      	bne.n	80181d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	e853 3f00 	ldrex	r3, [r3]
 801818a:	60bb      	str	r3, [r7, #8]
   return(result);
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	f023 0310 	bic.w	r3, r3, #16
 8018192:	647b      	str	r3, [r7, #68]	; 0x44
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	461a      	mov	r2, r3
 801819a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801819c:	61bb      	str	r3, [r7, #24]
 801819e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181a0:	6979      	ldr	r1, [r7, #20]
 80181a2:	69ba      	ldr	r2, [r7, #24]
 80181a4:	e841 2300 	strex	r3, r2, [r1]
 80181a8:	613b      	str	r3, [r7, #16]
   return(result);
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d1e6      	bne.n	801817e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	69db      	ldr	r3, [r3, #28]
 80181b6:	f003 0310 	and.w	r3, r3, #16
 80181ba:	2b10      	cmp	r3, #16
 80181bc:	d103      	bne.n	80181c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	2210      	movs	r2, #16
 80181c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80181cc:	4619      	mov	r1, r3
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f7fe fc14 	bl	80169fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80181d4:	e00b      	b.n	80181ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7f2 fc80 	bl	800aadc <HAL_UART_RxCpltCallback>
}
 80181dc:	e007      	b.n	80181ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	699a      	ldr	r2, [r3, #24]
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	f042 0208 	orr.w	r2, r2, #8
 80181ec:	619a      	str	r2, [r3, #24]
}
 80181ee:	bf00      	nop
 80181f0:	3758      	adds	r7, #88	; 0x58
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}
	...

080181f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b0a6      	sub	sp, #152	; 0x98
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018206:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	69db      	ldr	r3, [r3, #28]
 8018210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	689b      	ldr	r3, [r3, #8]
 8018224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801822e:	2b22      	cmp	r3, #34	; 0x22
 8018230:	f040 814d 	bne.w	80184ce <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801823a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801823e:	e0f4      	b.n	801842a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018246:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801824a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801824e:	b2d9      	uxtb	r1, r3
 8018250:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8018254:	b2da      	uxtb	r2, r3
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801825a:	400a      	ands	r2, r1
 801825c:	b2d2      	uxtb	r2, r2
 801825e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018264:	1c5a      	adds	r2, r3, #1
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018270:	b29b      	uxth	r3, r3
 8018272:	3b01      	subs	r3, #1
 8018274:	b29a      	uxth	r2, r3
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	69db      	ldr	r3, [r3, #28]
 8018282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018286:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801828a:	f003 0307 	and.w	r3, r3, #7
 801828e:	2b00      	cmp	r3, #0
 8018290:	d053      	beq.n	801833a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018296:	f003 0301 	and.w	r3, r3, #1
 801829a:	2b00      	cmp	r3, #0
 801829c:	d011      	beq.n	80182c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801829e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80182a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d00b      	beq.n	80182c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2201      	movs	r2, #1
 80182b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80182b8:	f043 0201 	orr.w	r2, r3, #1
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182c6:	f003 0302 	and.w	r3, r3, #2
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d011      	beq.n	80182f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80182ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d00b      	beq.n	80182f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	2202      	movs	r2, #2
 80182e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80182e8:	f043 0204 	orr.w	r2, r3, #4
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182f6:	f003 0304 	and.w	r3, r3, #4
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d011      	beq.n	8018322 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80182fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018302:	f003 0301 	and.w	r3, r3, #1
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00b      	beq.n	8018322 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2204      	movs	r2, #4
 8018310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018318:	f043 0202 	orr.w	r2, r3, #2
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018328:	2b00      	cmp	r3, #0
 801832a:	d006      	beq.n	801833a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f7fe fb5b 	bl	80169e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2200      	movs	r2, #0
 8018336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018340:	b29b      	uxth	r3, r3
 8018342:	2b00      	cmp	r3, #0
 8018344:	d171      	bne.n	801842a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801834c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801834e:	e853 3f00 	ldrex	r3, [r3]
 8018352:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8018354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801835a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	461a      	mov	r2, r3
 8018364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018368:	66bb      	str	r3, [r7, #104]	; 0x68
 801836a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801836c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801836e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018370:	e841 2300 	strex	r3, r2, [r1]
 8018374:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8018376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018378:	2b00      	cmp	r3, #0
 801837a:	d1e4      	bne.n	8018346 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	3308      	adds	r3, #8
 8018382:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018386:	e853 3f00 	ldrex	r3, [r3]
 801838a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801838c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801838e:	4b56      	ldr	r3, [pc, #344]	; (80184e8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8018390:	4013      	ands	r3, r2
 8018392:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	3308      	adds	r3, #8
 801839a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801839c:	657a      	str	r2, [r7, #84]	; 0x54
 801839e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80183a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80183a4:	e841 2300 	strex	r3, r2, [r1]
 80183a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80183aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d1e5      	bne.n	801837c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2220      	movs	r2, #32
 80183b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2200      	movs	r2, #0
 80183bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d12e      	bne.n	8018424 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2200      	movs	r2, #0
 80183ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183d4:	e853 3f00 	ldrex	r3, [r3]
 80183d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80183da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183dc:	f023 0310 	bic.w	r3, r3, #16
 80183e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	461a      	mov	r2, r3
 80183e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80183ea:	643b      	str	r3, [r7, #64]	; 0x40
 80183ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80183f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80183f2:	e841 2300 	strex	r3, r2, [r1]
 80183f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80183f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d1e6      	bne.n	80183cc <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	69db      	ldr	r3, [r3, #28]
 8018404:	f003 0310 	and.w	r3, r3, #16
 8018408:	2b10      	cmp	r3, #16
 801840a:	d103      	bne.n	8018414 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	2210      	movs	r2, #16
 8018412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801841a:	4619      	mov	r1, r3
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f7fe faed 	bl	80169fc <HAL_UARTEx_RxEventCallback>
 8018422:	e002      	b.n	801842a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018424:	6878      	ldr	r0, [r7, #4]
 8018426:	f7f2 fb59 	bl	800aadc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801842a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801842e:	2b00      	cmp	r3, #0
 8018430:	d006      	beq.n	8018440 <UART_RxISR_8BIT_FIFOEN+0x248>
 8018432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018436:	f003 0320 	and.w	r3, r3, #32
 801843a:	2b00      	cmp	r3, #0
 801843c:	f47f af00 	bne.w	8018240 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018446:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801844a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801844e:	2b00      	cmp	r3, #0
 8018450:	d045      	beq.n	80184de <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018458:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801845c:	429a      	cmp	r2, r3
 801845e:	d23e      	bcs.n	80184de <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	3308      	adds	r3, #8
 8018466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018468:	6a3b      	ldr	r3, [r7, #32]
 801846a:	e853 3f00 	ldrex	r3, [r3]
 801846e:	61fb      	str	r3, [r7, #28]
   return(result);
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018476:	673b      	str	r3, [r7, #112]	; 0x70
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	3308      	adds	r3, #8
 801847e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018488:	e841 2300 	strex	r3, r2, [r1]
 801848c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018490:	2b00      	cmp	r3, #0
 8018492:	d1e5      	bne.n	8018460 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	4a15      	ldr	r2, [pc, #84]	; (80184ec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8018498:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	e853 3f00 	ldrex	r3, [r3]
 80184a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	f043 0320 	orr.w	r3, r3, #32
 80184ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	461a      	mov	r2, r3
 80184b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80184b8:	61bb      	str	r3, [r7, #24]
 80184ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184bc:	6979      	ldr	r1, [r7, #20]
 80184be:	69ba      	ldr	r2, [r7, #24]
 80184c0:	e841 2300 	strex	r3, r2, [r1]
 80184c4:	613b      	str	r3, [r7, #16]
   return(result);
 80184c6:	693b      	ldr	r3, [r7, #16]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d1e6      	bne.n	801849a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80184cc:	e007      	b.n	80184de <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	699a      	ldr	r2, [r3, #24]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f042 0208 	orr.w	r2, r2, #8
 80184dc:	619a      	str	r2, [r3, #24]
}
 80184de:	bf00      	nop
 80184e0:	3798      	adds	r7, #152	; 0x98
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	effffffe 	.word	0xeffffffe
 80184ec:	08017f37 	.word	0x08017f37

080184f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b0a8      	sub	sp, #160	; 0xa0
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80184fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	69db      	ldr	r3, [r3, #28]
 8018508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	689b      	ldr	r3, [r3, #8]
 801851c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018526:	2b22      	cmp	r3, #34	; 0x22
 8018528:	f040 8151 	bne.w	80187ce <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018532:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018536:	e0f8      	b.n	801872a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801853e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801854a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801854e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8018552:	4013      	ands	r3, r2
 8018554:	b29a      	uxth	r2, r3
 8018556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801855a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018560:	1c9a      	adds	r2, r3, #2
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801856c:	b29b      	uxth	r3, r3
 801856e:	3b01      	subs	r3, #1
 8018570:	b29a      	uxth	r2, r3
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	69db      	ldr	r3, [r3, #28]
 801857e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018586:	f003 0307 	and.w	r3, r3, #7
 801858a:	2b00      	cmp	r3, #0
 801858c:	d053      	beq.n	8018636 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801858e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018592:	f003 0301 	and.w	r3, r3, #1
 8018596:	2b00      	cmp	r3, #0
 8018598:	d011      	beq.n	80185be <UART_RxISR_16BIT_FIFOEN+0xce>
 801859a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d00b      	beq.n	80185be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2201      	movs	r2, #1
 80185ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185b4:	f043 0201 	orr.w	r2, r3, #1
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80185be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80185c2:	f003 0302 	and.w	r3, r3, #2
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d011      	beq.n	80185ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80185ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80185ce:	f003 0301 	and.w	r3, r3, #1
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d00b      	beq.n	80185ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2202      	movs	r2, #2
 80185dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80185e4:	f043 0204 	orr.w	r2, r3, #4
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80185ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80185f2:	f003 0304 	and.w	r3, r3, #4
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d011      	beq.n	801861e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80185fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80185fe:	f003 0301 	and.w	r3, r3, #1
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00b      	beq.n	801861e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2204      	movs	r2, #4
 801860c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018614:	f043 0202 	orr.w	r2, r3, #2
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018624:	2b00      	cmp	r3, #0
 8018626:	d006      	beq.n	8018636 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f7fe f9dd 	bl	80169e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2200      	movs	r2, #0
 8018632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801863c:	b29b      	uxth	r3, r3
 801863e:	2b00      	cmp	r3, #0
 8018640:	d173      	bne.n	801872a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801864a:	e853 3f00 	ldrex	r3, [r3]
 801864e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	461a      	mov	r2, r3
 8018660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018666:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018668:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801866a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801866c:	e841 2300 	strex	r3, r2, [r1]
 8018670:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018674:	2b00      	cmp	r3, #0
 8018676:	d1e4      	bne.n	8018642 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	3308      	adds	r3, #8
 801867e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018682:	e853 3f00 	ldrex	r3, [r3]
 8018686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801868a:	4b57      	ldr	r3, [pc, #348]	; (80187e8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801868c:	4013      	ands	r3, r2
 801868e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	3308      	adds	r3, #8
 8018698:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801869c:	65ba      	str	r2, [r7, #88]	; 0x58
 801869e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80186a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80186a4:	e841 2300 	strex	r3, r2, [r1]
 80186a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80186aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d1e3      	bne.n	8018678 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2220      	movs	r2, #32
 80186b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	2200      	movs	r2, #0
 80186bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d12e      	bne.n	8018724 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	2200      	movs	r2, #0
 80186ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186d4:	e853 3f00 	ldrex	r3, [r3]
 80186d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80186da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186dc:	f023 0310 	bic.w	r3, r3, #16
 80186e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	461a      	mov	r2, r3
 80186e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80186ea:	647b      	str	r3, [r7, #68]	; 0x44
 80186ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80186f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80186f2:	e841 2300 	strex	r3, r2, [r1]
 80186f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80186f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d1e6      	bne.n	80186cc <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	69db      	ldr	r3, [r3, #28]
 8018704:	f003 0310 	and.w	r3, r3, #16
 8018708:	2b10      	cmp	r3, #16
 801870a:	d103      	bne.n	8018714 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	2210      	movs	r2, #16
 8018712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801871a:	4619      	mov	r1, r3
 801871c:	6878      	ldr	r0, [r7, #4]
 801871e:	f7fe f96d 	bl	80169fc <HAL_UARTEx_RxEventCallback>
 8018722:	e002      	b.n	801872a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f7f2 f9d9 	bl	800aadc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801872a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801872e:	2b00      	cmp	r3, #0
 8018730:	d006      	beq.n	8018740 <UART_RxISR_16BIT_FIFOEN+0x250>
 8018732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018736:	f003 0320 	and.w	r3, r3, #32
 801873a:	2b00      	cmp	r3, #0
 801873c:	f47f aefc 	bne.w	8018538 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018746:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801874a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801874e:	2b00      	cmp	r3, #0
 8018750:	d045      	beq.n	80187de <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018758:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801875c:	429a      	cmp	r2, r3
 801875e:	d23e      	bcs.n	80187de <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	3308      	adds	r3, #8
 8018766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801876a:	e853 3f00 	ldrex	r3, [r3]
 801876e:	623b      	str	r3, [r7, #32]
   return(result);
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018776:	677b      	str	r3, [r7, #116]	; 0x74
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	3308      	adds	r3, #8
 801877e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018780:	633a      	str	r2, [r7, #48]	; 0x30
 8018782:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018788:	e841 2300 	strex	r3, r2, [r1]
 801878c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018790:	2b00      	cmp	r3, #0
 8018792:	d1e5      	bne.n	8018760 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	4a15      	ldr	r2, [pc, #84]	; (80187ec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8018798:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187a0:	693b      	ldr	r3, [r7, #16]
 80187a2:	e853 3f00 	ldrex	r3, [r3]
 80187a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	f043 0320 	orr.w	r3, r3, #32
 80187ae:	673b      	str	r3, [r7, #112]	; 0x70
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	461a      	mov	r2, r3
 80187b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80187b8:	61fb      	str	r3, [r7, #28]
 80187ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187bc:	69b9      	ldr	r1, [r7, #24]
 80187be:	69fa      	ldr	r2, [r7, #28]
 80187c0:	e841 2300 	strex	r3, r2, [r1]
 80187c4:	617b      	str	r3, [r7, #20]
   return(result);
 80187c6:	697b      	ldr	r3, [r7, #20]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d1e6      	bne.n	801879a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80187cc:	e007      	b.n	80187de <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	699a      	ldr	r2, [r3, #24]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	f042 0208 	orr.w	r2, r2, #8
 80187dc:	619a      	str	r2, [r3, #24]
}
 80187de:	bf00      	nop
 80187e0:	37a0      	adds	r7, #160	; 0xa0
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	effffffe 	.word	0xeffffffe
 80187ec:	08018097 	.word	0x08018097

080187f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80187f0:	b480      	push	{r7}
 80187f2:	b083      	sub	sp, #12
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80187f8:	bf00      	nop
 80187fa:	370c      	adds	r7, #12
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr

08018804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018804:	b480      	push	{r7}
 8018806:	b083      	sub	sp, #12
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801880c:	bf00      	nop
 801880e:	370c      	adds	r7, #12
 8018810:	46bd      	mov	sp, r7
 8018812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018816:	4770      	bx	lr

08018818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018818:	b480      	push	{r7}
 801881a:	b083      	sub	sp, #12
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018820:	bf00      	nop
 8018822:	370c      	adds	r7, #12
 8018824:	46bd      	mov	sp, r7
 8018826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882a:	4770      	bx	lr

0801882c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801883a:	2b01      	cmp	r3, #1
 801883c:	d101      	bne.n	8018842 <HAL_UARTEx_EnableFifoMode+0x16>
 801883e:	2302      	movs	r3, #2
 8018840:	e02b      	b.n	801889a <HAL_UARTEx_EnableFifoMode+0x6e>
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2201      	movs	r2, #1
 8018846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2224      	movs	r2, #36	; 0x24
 801884e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	f022 0201 	bic.w	r2, r2, #1
 8018868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8018878:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	68fa      	ldr	r2, [r7, #12]
 8018880:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018882:	6878      	ldr	r0, [r7, #4]
 8018884:	f000 f8c2 	bl	8018a0c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2220      	movs	r2, #32
 801888c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	2200      	movs	r2, #0
 8018894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018898:	2300      	movs	r3, #0
}
 801889a:	4618      	mov	r0, r3
 801889c:	3710      	adds	r7, #16
 801889e:	46bd      	mov	sp, r7
 80188a0:	bd80      	pop	{r7, pc}

080188a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80188a2:	b480      	push	{r7}
 80188a4:	b085      	sub	sp, #20
 80188a6:	af00      	add	r7, sp, #0
 80188a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d101      	bne.n	80188b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80188b4:	2302      	movs	r3, #2
 80188b6:	e027      	b.n	8018908 <HAL_UARTEx_DisableFifoMode+0x66>
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2201      	movs	r2, #1
 80188bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2224      	movs	r2, #36	; 0x24
 80188c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	681a      	ldr	r2, [r3, #0]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	f022 0201 	bic.w	r2, r2, #1
 80188de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80188e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2200      	movs	r2, #0
 80188ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	68fa      	ldr	r2, [r7, #12]
 80188f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2220      	movs	r2, #32
 80188fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2200      	movs	r2, #0
 8018902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018906:	2300      	movs	r3, #0
}
 8018908:	4618      	mov	r0, r3
 801890a:	3714      	adds	r7, #20
 801890c:	46bd      	mov	sp, r7
 801890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018912:	4770      	bx	lr

08018914 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b084      	sub	sp, #16
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
 801891c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018924:	2b01      	cmp	r3, #1
 8018926:	d101      	bne.n	801892c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018928:	2302      	movs	r3, #2
 801892a:	e02d      	b.n	8018988 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2201      	movs	r2, #1
 8018930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2224      	movs	r2, #36	; 0x24
 8018938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	681a      	ldr	r2, [r3, #0]
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	f022 0201 	bic.w	r2, r2, #1
 8018952:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	689b      	ldr	r3, [r3, #8]
 801895a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	683a      	ldr	r2, [r7, #0]
 8018964:	430a      	orrs	r2, r1
 8018966:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018968:	6878      	ldr	r0, [r7, #4]
 801896a:	f000 f84f 	bl	8018a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	68fa      	ldr	r2, [r7, #12]
 8018974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2220      	movs	r2, #32
 801897a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2200      	movs	r2, #0
 8018982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018986:	2300      	movs	r3, #0
}
 8018988:	4618      	mov	r0, r3
 801898a:	3710      	adds	r7, #16
 801898c:	46bd      	mov	sp, r7
 801898e:	bd80      	pop	{r7, pc}

08018990 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
 8018998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d101      	bne.n	80189a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80189a4:	2302      	movs	r3, #2
 80189a6:	e02d      	b.n	8018a04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	2201      	movs	r2, #1
 80189ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2224      	movs	r2, #36	; 0x24
 80189b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	681a      	ldr	r2, [r3, #0]
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f022 0201 	bic.w	r2, r2, #1
 80189ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	689b      	ldr	r3, [r3, #8]
 80189d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	683a      	ldr	r2, [r7, #0]
 80189e0:	430a      	orrs	r2, r1
 80189e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f000 f811 	bl	8018a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	68fa      	ldr	r2, [r7, #12]
 80189f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2220      	movs	r2, #32
 80189f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2200      	movs	r2, #0
 80189fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018a02:	2300      	movs	r3, #0
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	3710      	adds	r7, #16
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}

08018a0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	b085      	sub	sp, #20
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d108      	bne.n	8018a2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	2201      	movs	r2, #1
 8018a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	2201      	movs	r2, #1
 8018a28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018a2c:	e031      	b.n	8018a92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018a2e:	2310      	movs	r3, #16
 8018a30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018a32:	2310      	movs	r3, #16
 8018a34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	689b      	ldr	r3, [r3, #8]
 8018a3c:	0e5b      	lsrs	r3, r3, #25
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	f003 0307 	and.w	r3, r3, #7
 8018a44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	689b      	ldr	r3, [r3, #8]
 8018a4c:	0f5b      	lsrs	r3, r3, #29
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	f003 0307 	and.w	r3, r3, #7
 8018a54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018a56:	7bbb      	ldrb	r3, [r7, #14]
 8018a58:	7b3a      	ldrb	r2, [r7, #12]
 8018a5a:	4911      	ldr	r1, [pc, #68]	; (8018aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8018a5c:	5c8a      	ldrb	r2, [r1, r2]
 8018a5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018a62:	7b3a      	ldrb	r2, [r7, #12]
 8018a64:	490f      	ldr	r1, [pc, #60]	; (8018aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8018a66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a6c:	b29a      	uxth	r2, r3
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018a74:	7bfb      	ldrb	r3, [r7, #15]
 8018a76:	7b7a      	ldrb	r2, [r7, #13]
 8018a78:	4909      	ldr	r1, [pc, #36]	; (8018aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8018a7a:	5c8a      	ldrb	r2, [r1, r2]
 8018a7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018a80:	7b7a      	ldrb	r2, [r7, #13]
 8018a82:	4908      	ldr	r1, [pc, #32]	; (8018aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8018a84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018a86:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a8a:	b29a      	uxth	r2, r3
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018a92:	bf00      	nop
 8018a94:	3714      	adds	r7, #20
 8018a96:	46bd      	mov	sp, r7
 8018a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9c:	4770      	bx	lr
 8018a9e:	bf00      	nop
 8018aa0:	08038a94 	.word	0x08038a94
 8018aa4:	08038a9c 	.word	0x08038a9c

08018aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018aa8:	b084      	sub	sp, #16
 8018aaa:	b580      	push	{r7, lr}
 8018aac:	b084      	sub	sp, #16
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	6078      	str	r0, [r7, #4]
 8018ab2:	f107 001c 	add.w	r0, r7, #28
 8018ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	2b01      	cmp	r3, #1
 8018abe:	d120      	bne.n	8018b02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	68da      	ldr	r2, [r3, #12]
 8018ad0:	4b2a      	ldr	r3, [pc, #168]	; (8018b7c <USB_CoreInit+0xd4>)
 8018ad2:	4013      	ands	r3, r2
 8018ad4:	687a      	ldr	r2, [r7, #4]
 8018ad6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	68db      	ldr	r3, [r3, #12]
 8018adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8018ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ae6:	2b01      	cmp	r3, #1
 8018ae8:	d105      	bne.n	8018af6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	68db      	ldr	r3, [r3, #12]
 8018aee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	f001 fc04 	bl	801a304 <USB_CoreReset>
 8018afc:	4603      	mov	r3, r0
 8018afe:	73fb      	strb	r3, [r7, #15]
 8018b00:	e01a      	b.n	8018b38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	68db      	ldr	r3, [r3, #12]
 8018b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f001 fbf8 	bl	801a304 <USB_CoreReset>
 8018b14:	4603      	mov	r3, r0
 8018b16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d106      	bne.n	8018b2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	639a      	str	r2, [r3, #56]	; 0x38
 8018b2a:	e005      	b.n	8018b38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b3a:	2b01      	cmp	r3, #1
 8018b3c:	d116      	bne.n	8018b6c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b42:	b29a      	uxth	r2, r3
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018b4c:	4b0c      	ldr	r3, [pc, #48]	; (8018b80 <USB_CoreInit+0xd8>)
 8018b4e:	4313      	orrs	r3, r2
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	689b      	ldr	r3, [r3, #8]
 8018b58:	f043 0206 	orr.w	r2, r3, #6
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	689b      	ldr	r3, [r3, #8]
 8018b64:	f043 0220 	orr.w	r2, r3, #32
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8018b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3710      	adds	r7, #16
 8018b72:	46bd      	mov	sp, r7
 8018b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018b78:	b004      	add	sp, #16
 8018b7a:	4770      	bx	lr
 8018b7c:	ffbdffbf 	.word	0xffbdffbf
 8018b80:	03ee0000 	.word	0x03ee0000

08018b84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8018b84:	b480      	push	{r7}
 8018b86:	b087      	sub	sp, #28
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	60f8      	str	r0, [r7, #12]
 8018b8c:	60b9      	str	r1, [r7, #8]
 8018b8e:	4613      	mov	r3, r2
 8018b90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8018b92:	79fb      	ldrb	r3, [r7, #7]
 8018b94:	2b02      	cmp	r3, #2
 8018b96:	d165      	bne.n	8018c64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8018b98:	68bb      	ldr	r3, [r7, #8]
 8018b9a:	4a41      	ldr	r2, [pc, #260]	; (8018ca0 <USB_SetTurnaroundTime+0x11c>)
 8018b9c:	4293      	cmp	r3, r2
 8018b9e:	d906      	bls.n	8018bae <USB_SetTurnaroundTime+0x2a>
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	4a40      	ldr	r2, [pc, #256]	; (8018ca4 <USB_SetTurnaroundTime+0x120>)
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	d202      	bcs.n	8018bae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8018ba8:	230f      	movs	r3, #15
 8018baa:	617b      	str	r3, [r7, #20]
 8018bac:	e062      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	4a3c      	ldr	r2, [pc, #240]	; (8018ca4 <USB_SetTurnaroundTime+0x120>)
 8018bb2:	4293      	cmp	r3, r2
 8018bb4:	d306      	bcc.n	8018bc4 <USB_SetTurnaroundTime+0x40>
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	4a3b      	ldr	r2, [pc, #236]	; (8018ca8 <USB_SetTurnaroundTime+0x124>)
 8018bba:	4293      	cmp	r3, r2
 8018bbc:	d202      	bcs.n	8018bc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8018bbe:	230e      	movs	r3, #14
 8018bc0:	617b      	str	r3, [r7, #20]
 8018bc2:	e057      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	4a38      	ldr	r2, [pc, #224]	; (8018ca8 <USB_SetTurnaroundTime+0x124>)
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	d306      	bcc.n	8018bda <USB_SetTurnaroundTime+0x56>
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	4a37      	ldr	r2, [pc, #220]	; (8018cac <USB_SetTurnaroundTime+0x128>)
 8018bd0:	4293      	cmp	r3, r2
 8018bd2:	d202      	bcs.n	8018bda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8018bd4:	230d      	movs	r3, #13
 8018bd6:	617b      	str	r3, [r7, #20]
 8018bd8:	e04c      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	4a33      	ldr	r2, [pc, #204]	; (8018cac <USB_SetTurnaroundTime+0x128>)
 8018bde:	4293      	cmp	r3, r2
 8018be0:	d306      	bcc.n	8018bf0 <USB_SetTurnaroundTime+0x6c>
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	4a32      	ldr	r2, [pc, #200]	; (8018cb0 <USB_SetTurnaroundTime+0x12c>)
 8018be6:	4293      	cmp	r3, r2
 8018be8:	d802      	bhi.n	8018bf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8018bea:	230c      	movs	r3, #12
 8018bec:	617b      	str	r3, [r7, #20]
 8018bee:	e041      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	4a2f      	ldr	r2, [pc, #188]	; (8018cb0 <USB_SetTurnaroundTime+0x12c>)
 8018bf4:	4293      	cmp	r3, r2
 8018bf6:	d906      	bls.n	8018c06 <USB_SetTurnaroundTime+0x82>
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	4a2e      	ldr	r2, [pc, #184]	; (8018cb4 <USB_SetTurnaroundTime+0x130>)
 8018bfc:	4293      	cmp	r3, r2
 8018bfe:	d802      	bhi.n	8018c06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8018c00:	230b      	movs	r3, #11
 8018c02:	617b      	str	r3, [r7, #20]
 8018c04:	e036      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	4a2a      	ldr	r2, [pc, #168]	; (8018cb4 <USB_SetTurnaroundTime+0x130>)
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	d906      	bls.n	8018c1c <USB_SetTurnaroundTime+0x98>
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	4a29      	ldr	r2, [pc, #164]	; (8018cb8 <USB_SetTurnaroundTime+0x134>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d802      	bhi.n	8018c1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8018c16:	230a      	movs	r3, #10
 8018c18:	617b      	str	r3, [r7, #20]
 8018c1a:	e02b      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	4a26      	ldr	r2, [pc, #152]	; (8018cb8 <USB_SetTurnaroundTime+0x134>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d906      	bls.n	8018c32 <USB_SetTurnaroundTime+0xae>
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	4a25      	ldr	r2, [pc, #148]	; (8018cbc <USB_SetTurnaroundTime+0x138>)
 8018c28:	4293      	cmp	r3, r2
 8018c2a:	d202      	bcs.n	8018c32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8018c2c:	2309      	movs	r3, #9
 8018c2e:	617b      	str	r3, [r7, #20]
 8018c30:	e020      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	4a21      	ldr	r2, [pc, #132]	; (8018cbc <USB_SetTurnaroundTime+0x138>)
 8018c36:	4293      	cmp	r3, r2
 8018c38:	d306      	bcc.n	8018c48 <USB_SetTurnaroundTime+0xc4>
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	4a20      	ldr	r2, [pc, #128]	; (8018cc0 <USB_SetTurnaroundTime+0x13c>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d802      	bhi.n	8018c48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8018c42:	2308      	movs	r3, #8
 8018c44:	617b      	str	r3, [r7, #20]
 8018c46:	e015      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	4a1d      	ldr	r2, [pc, #116]	; (8018cc0 <USB_SetTurnaroundTime+0x13c>)
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	d906      	bls.n	8018c5e <USB_SetTurnaroundTime+0xda>
 8018c50:	68bb      	ldr	r3, [r7, #8]
 8018c52:	4a1c      	ldr	r2, [pc, #112]	; (8018cc4 <USB_SetTurnaroundTime+0x140>)
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d202      	bcs.n	8018c5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8018c58:	2307      	movs	r3, #7
 8018c5a:	617b      	str	r3, [r7, #20]
 8018c5c:	e00a      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8018c5e:	2306      	movs	r3, #6
 8018c60:	617b      	str	r3, [r7, #20]
 8018c62:	e007      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8018c64:	79fb      	ldrb	r3, [r7, #7]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d102      	bne.n	8018c70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8018c6a:	2309      	movs	r3, #9
 8018c6c:	617b      	str	r3, [r7, #20]
 8018c6e:	e001      	b.n	8018c74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8018c70:	2309      	movs	r3, #9
 8018c72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	68db      	ldr	r3, [r3, #12]
 8018c78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	68da      	ldr	r2, [r3, #12]
 8018c84:	697b      	ldr	r3, [r7, #20]
 8018c86:	029b      	lsls	r3, r3, #10
 8018c88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8018c8c:	431a      	orrs	r2, r3
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8018c92:	2300      	movs	r3, #0
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	371c      	adds	r7, #28
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr
 8018ca0:	00d8acbf 	.word	0x00d8acbf
 8018ca4:	00e4e1c0 	.word	0x00e4e1c0
 8018ca8:	00f42400 	.word	0x00f42400
 8018cac:	01067380 	.word	0x01067380
 8018cb0:	011a499f 	.word	0x011a499f
 8018cb4:	01312cff 	.word	0x01312cff
 8018cb8:	014ca43f 	.word	0x014ca43f
 8018cbc:	016e3600 	.word	0x016e3600
 8018cc0:	01a6ab1f 	.word	0x01a6ab1f
 8018cc4:	01e84800 	.word	0x01e84800

08018cc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018cc8:	b480      	push	{r7}
 8018cca:	b083      	sub	sp, #12
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	689b      	ldr	r3, [r3, #8]
 8018cd4:	f043 0201 	orr.w	r2, r3, #1
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018cdc:	2300      	movs	r3, #0
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	370c      	adds	r7, #12
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce8:	4770      	bx	lr

08018cea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8018cea:	b480      	push	{r7}
 8018cec:	b083      	sub	sp, #12
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	689b      	ldr	r3, [r3, #8]
 8018cf6:	f023 0201 	bic.w	r2, r3, #1
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8018cfe:	2300      	movs	r3, #0
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	370c      	adds	r7, #12
 8018d04:	46bd      	mov	sp, r7
 8018d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0a:	4770      	bx	lr

08018d0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b084      	sub	sp, #16
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
 8018d14:	460b      	mov	r3, r1
 8018d16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	68db      	ldr	r3, [r3, #12]
 8018d20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8018d28:	78fb      	ldrb	r3, [r7, #3]
 8018d2a:	2b01      	cmp	r3, #1
 8018d2c:	d115      	bne.n	8018d5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	68db      	ldr	r3, [r3, #12]
 8018d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018d3a:	2001      	movs	r0, #1
 8018d3c:	f7f2 ffb4 	bl	800bca8 <HAL_Delay>
      ms++;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	3301      	adds	r3, #1
 8018d44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f001 fa4b 	bl	801a1e2 <USB_GetMode>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	2b01      	cmp	r3, #1
 8018d50:	d01e      	beq.n	8018d90 <USB_SetCurrentMode+0x84>
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	2b31      	cmp	r3, #49	; 0x31
 8018d56:	d9f0      	bls.n	8018d3a <USB_SetCurrentMode+0x2e>
 8018d58:	e01a      	b.n	8018d90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8018d5a:	78fb      	ldrb	r3, [r7, #3]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d115      	bne.n	8018d8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	68db      	ldr	r3, [r3, #12]
 8018d64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8018d6c:	2001      	movs	r0, #1
 8018d6e:	f7f2 ff9b 	bl	800bca8 <HAL_Delay>
      ms++;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	3301      	adds	r3, #1
 8018d76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8018d78:	6878      	ldr	r0, [r7, #4]
 8018d7a:	f001 fa32 	bl	801a1e2 <USB_GetMode>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d005      	beq.n	8018d90 <USB_SetCurrentMode+0x84>
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	2b31      	cmp	r3, #49	; 0x31
 8018d88:	d9f0      	bls.n	8018d6c <USB_SetCurrentMode+0x60>
 8018d8a:	e001      	b.n	8018d90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	e005      	b.n	8018d9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	2b32      	cmp	r3, #50	; 0x32
 8018d94:	d101      	bne.n	8018d9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8018d96:	2301      	movs	r3, #1
 8018d98:	e000      	b.n	8018d9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8018d9a:	2300      	movs	r3, #0
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3710      	adds	r7, #16
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018da4:	b084      	sub	sp, #16
 8018da6:	b580      	push	{r7, lr}
 8018da8:	b086      	sub	sp, #24
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
 8018dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8018db6:	2300      	movs	r3, #0
 8018db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	613b      	str	r3, [r7, #16]
 8018dc2:	e009      	b.n	8018dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8018dc4:	687a      	ldr	r2, [r7, #4]
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	3340      	adds	r3, #64	; 0x40
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	4413      	add	r3, r2
 8018dce:	2200      	movs	r2, #0
 8018dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	3301      	adds	r3, #1
 8018dd6:	613b      	str	r3, [r7, #16]
 8018dd8:	693b      	ldr	r3, [r7, #16]
 8018dda:	2b0e      	cmp	r3, #14
 8018ddc:	d9f2      	bls.n	8018dc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8018dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d11c      	bne.n	8018e1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	68fa      	ldr	r2, [r7, #12]
 8018dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018df2:	f043 0302 	orr.w	r3, r3, #2
 8018df6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	601a      	str	r2, [r3, #0]
 8018e1c:	e005      	b.n	8018e2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018e30:	461a      	mov	r2, r3
 8018e32:	2300      	movs	r3, #0
 8018e34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e44:	461a      	mov	r2, r3
 8018e46:	680b      	ldr	r3, [r1, #0]
 8018e48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e4c:	2b01      	cmp	r3, #1
 8018e4e:	d10c      	bne.n	8018e6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8018e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d104      	bne.n	8018e60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8018e56:	2100      	movs	r1, #0
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f000 f965 	bl	8019128 <USB_SetDevSpeed>
 8018e5e:	e008      	b.n	8018e72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8018e60:	2101      	movs	r1, #1
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	f000 f960 	bl	8019128 <USB_SetDevSpeed>
 8018e68:	e003      	b.n	8018e72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8018e6a:	2103      	movs	r1, #3
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f000 f95b 	bl	8019128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8018e72:	2110      	movs	r1, #16
 8018e74:	6878      	ldr	r0, [r7, #4]
 8018e76:	f000 f8f3 	bl	8019060 <USB_FlushTxFifo>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d001      	beq.n	8018e84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8018e80:	2301      	movs	r3, #1
 8018e82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8018e84:	6878      	ldr	r0, [r7, #4]
 8018e86:	f000 f91f 	bl	80190c8 <USB_FlushRxFifo>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d001      	beq.n	8018e94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8018e90:	2301      	movs	r3, #1
 8018e92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018e9a:	461a      	mov	r2, r3
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018eb8:	2300      	movs	r3, #0
 8018eba:	613b      	str	r3, [r7, #16]
 8018ebc:	e043      	b.n	8018f46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8018ebe:	693b      	ldr	r3, [r7, #16]
 8018ec0:	015a      	lsls	r2, r3, #5
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	4413      	add	r3, r2
 8018ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018ed4:	d118      	bne.n	8018f08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d10a      	bne.n	8018ef2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	015a      	lsls	r2, r3, #5
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	4413      	add	r3, r2
 8018ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018ee8:	461a      	mov	r2, r3
 8018eea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018eee:	6013      	str	r3, [r2, #0]
 8018ef0:	e013      	b.n	8018f1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8018ef2:	693b      	ldr	r3, [r7, #16]
 8018ef4:	015a      	lsls	r2, r3, #5
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	4413      	add	r3, r2
 8018efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018efe:	461a      	mov	r2, r3
 8018f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018f04:	6013      	str	r3, [r2, #0]
 8018f06:	e008      	b.n	8018f1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	015a      	lsls	r2, r3, #5
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	4413      	add	r3, r2
 8018f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f14:	461a      	mov	r2, r3
 8018f16:	2300      	movs	r3, #0
 8018f18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8018f1a:	693b      	ldr	r3, [r7, #16]
 8018f1c:	015a      	lsls	r2, r3, #5
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	4413      	add	r3, r2
 8018f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f26:	461a      	mov	r2, r3
 8018f28:	2300      	movs	r3, #0
 8018f2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	015a      	lsls	r2, r3, #5
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	4413      	add	r3, r2
 8018f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018f38:	461a      	mov	r2, r3
 8018f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018f3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	3301      	adds	r3, #1
 8018f44:	613b      	str	r3, [r7, #16]
 8018f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f48:	693a      	ldr	r2, [r7, #16]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d3b7      	bcc.n	8018ebe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018f4e:	2300      	movs	r3, #0
 8018f50:	613b      	str	r3, [r7, #16]
 8018f52:	e043      	b.n	8018fdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	015a      	lsls	r2, r3, #5
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	4413      	add	r3, r2
 8018f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f6a:	d118      	bne.n	8018f9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8018f6c:	693b      	ldr	r3, [r7, #16]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10a      	bne.n	8018f88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	015a      	lsls	r2, r3, #5
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	4413      	add	r3, r2
 8018f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018f7e:	461a      	mov	r2, r3
 8018f80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018f84:	6013      	str	r3, [r2, #0]
 8018f86:	e013      	b.n	8018fb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8018f88:	693b      	ldr	r3, [r7, #16]
 8018f8a:	015a      	lsls	r2, r3, #5
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	4413      	add	r3, r2
 8018f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018f94:	461a      	mov	r2, r3
 8018f96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8018f9a:	6013      	str	r3, [r2, #0]
 8018f9c:	e008      	b.n	8018fb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8018f9e:	693b      	ldr	r3, [r7, #16]
 8018fa0:	015a      	lsls	r2, r3, #5
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	4413      	add	r3, r2
 8018fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018faa:	461a      	mov	r2, r3
 8018fac:	2300      	movs	r3, #0
 8018fae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	015a      	lsls	r2, r3, #5
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	4413      	add	r3, r2
 8018fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fbc:	461a      	mov	r2, r3
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8018fc2:	693b      	ldr	r3, [r7, #16]
 8018fc4:	015a      	lsls	r2, r3, #5
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	4413      	add	r3, r2
 8018fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018fce:	461a      	mov	r2, r3
 8018fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8018fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018fd6:	693b      	ldr	r3, [r7, #16]
 8018fd8:	3301      	adds	r3, #1
 8018fda:	613b      	str	r3, [r7, #16]
 8018fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fde:	693a      	ldr	r2, [r7, #16]
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d3b7      	bcc.n	8018f54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018fea:	691b      	ldr	r3, [r3, #16]
 8018fec:	68fa      	ldr	r2, [r7, #12]
 8018fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018ff6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8019004:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	2b00      	cmp	r3, #0
 801900a:	d105      	bne.n	8019018 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	699b      	ldr	r3, [r3, #24]
 8019010:	f043 0210 	orr.w	r2, r3, #16
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	699a      	ldr	r2, [r3, #24]
 801901c:	4b0e      	ldr	r3, [pc, #56]	; (8019058 <USB_DevInit+0x2b4>)
 801901e:	4313      	orrs	r3, r2
 8019020:	687a      	ldr	r2, [r7, #4]
 8019022:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8019024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019026:	2b00      	cmp	r3, #0
 8019028:	d005      	beq.n	8019036 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	699b      	ldr	r3, [r3, #24]
 801902e:	f043 0208 	orr.w	r2, r3, #8
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8019036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019038:	2b01      	cmp	r3, #1
 801903a:	d105      	bne.n	8019048 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	699a      	ldr	r2, [r3, #24]
 8019040:	4b06      	ldr	r3, [pc, #24]	; (801905c <USB_DevInit+0x2b8>)
 8019042:	4313      	orrs	r3, r2
 8019044:	687a      	ldr	r2, [r7, #4]
 8019046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8019048:	7dfb      	ldrb	r3, [r7, #23]
}
 801904a:	4618      	mov	r0, r3
 801904c:	3718      	adds	r7, #24
 801904e:	46bd      	mov	sp, r7
 8019050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019054:	b004      	add	sp, #16
 8019056:	4770      	bx	lr
 8019058:	803c3800 	.word	0x803c3800
 801905c:	40000004 	.word	0x40000004

08019060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8019060:	b480      	push	{r7}
 8019062:	b085      	sub	sp, #20
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
 8019068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801906a:	2300      	movs	r3, #0
 801906c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	3301      	adds	r3, #1
 8019072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	4a13      	ldr	r2, [pc, #76]	; (80190c4 <USB_FlushTxFifo+0x64>)
 8019078:	4293      	cmp	r3, r2
 801907a:	d901      	bls.n	8019080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801907c:	2303      	movs	r3, #3
 801907e:	e01b      	b.n	80190b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	691b      	ldr	r3, [r3, #16]
 8019084:	2b00      	cmp	r3, #0
 8019086:	daf2      	bge.n	801906e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8019088:	2300      	movs	r3, #0
 801908a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	019b      	lsls	r3, r3, #6
 8019090:	f043 0220 	orr.w	r2, r3, #32
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	3301      	adds	r3, #1
 801909c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	4a08      	ldr	r2, [pc, #32]	; (80190c4 <USB_FlushTxFifo+0x64>)
 80190a2:	4293      	cmp	r3, r2
 80190a4:	d901      	bls.n	80190aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80190a6:	2303      	movs	r3, #3
 80190a8:	e006      	b.n	80190b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	691b      	ldr	r3, [r3, #16]
 80190ae:	f003 0320 	and.w	r3, r3, #32
 80190b2:	2b20      	cmp	r3, #32
 80190b4:	d0f0      	beq.n	8019098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80190b6:	2300      	movs	r3, #0
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3714      	adds	r7, #20
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr
 80190c4:	00030d40 	.word	0x00030d40

080190c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80190c8:	b480      	push	{r7}
 80190ca:	b085      	sub	sp, #20
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80190d0:	2300      	movs	r3, #0
 80190d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	3301      	adds	r3, #1
 80190d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	4a11      	ldr	r2, [pc, #68]	; (8019124 <USB_FlushRxFifo+0x5c>)
 80190de:	4293      	cmp	r3, r2
 80190e0:	d901      	bls.n	80190e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80190e2:	2303      	movs	r3, #3
 80190e4:	e018      	b.n	8019118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	691b      	ldr	r3, [r3, #16]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	daf2      	bge.n	80190d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80190ee:	2300      	movs	r3, #0
 80190f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2210      	movs	r2, #16
 80190f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	3301      	adds	r3, #1
 80190fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	4a08      	ldr	r2, [pc, #32]	; (8019124 <USB_FlushRxFifo+0x5c>)
 8019102:	4293      	cmp	r3, r2
 8019104:	d901      	bls.n	801910a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8019106:	2303      	movs	r3, #3
 8019108:	e006      	b.n	8019118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	691b      	ldr	r3, [r3, #16]
 801910e:	f003 0310 	and.w	r3, r3, #16
 8019112:	2b10      	cmp	r3, #16
 8019114:	d0f0      	beq.n	80190f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8019116:	2300      	movs	r3, #0
}
 8019118:	4618      	mov	r0, r3
 801911a:	3714      	adds	r7, #20
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr
 8019124:	00030d40 	.word	0x00030d40

08019128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8019128:	b480      	push	{r7}
 801912a:	b085      	sub	sp, #20
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
 8019130:	460b      	mov	r3, r1
 8019132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801913e:	681a      	ldr	r2, [r3, #0]
 8019140:	78fb      	ldrb	r3, [r7, #3]
 8019142:	68f9      	ldr	r1, [r7, #12]
 8019144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019148:	4313      	orrs	r3, r2
 801914a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801914c:	2300      	movs	r3, #0
}
 801914e:	4618      	mov	r0, r3
 8019150:	3714      	adds	r7, #20
 8019152:	46bd      	mov	sp, r7
 8019154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019158:	4770      	bx	lr

0801915a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801915a:	b480      	push	{r7}
 801915c:	b087      	sub	sp, #28
 801915e:	af00      	add	r7, sp, #0
 8019160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8019166:	693b      	ldr	r3, [r7, #16]
 8019168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801916c:	689b      	ldr	r3, [r3, #8]
 801916e:	f003 0306 	and.w	r3, r3, #6
 8019172:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d102      	bne.n	8019180 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801917a:	2300      	movs	r3, #0
 801917c:	75fb      	strb	r3, [r7, #23]
 801917e:	e00a      	b.n	8019196 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	2b02      	cmp	r3, #2
 8019184:	d002      	beq.n	801918c <USB_GetDevSpeed+0x32>
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	2b06      	cmp	r3, #6
 801918a:	d102      	bne.n	8019192 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801918c:	2302      	movs	r3, #2
 801918e:	75fb      	strb	r3, [r7, #23]
 8019190:	e001      	b.n	8019196 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8019192:	230f      	movs	r3, #15
 8019194:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8019196:	7dfb      	ldrb	r3, [r7, #23]
}
 8019198:	4618      	mov	r0, r3
 801919a:	371c      	adds	r7, #28
 801919c:	46bd      	mov	sp, r7
 801919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a2:	4770      	bx	lr

080191a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80191a4:	b480      	push	{r7}
 80191a6:	b085      	sub	sp, #20
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80191b8:	683b      	ldr	r3, [r7, #0]
 80191ba:	785b      	ldrb	r3, [r3, #1]
 80191bc:	2b01      	cmp	r3, #1
 80191be:	d139      	bne.n	8019234 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80191c6:	69da      	ldr	r2, [r3, #28]
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	781b      	ldrb	r3, [r3, #0]
 80191cc:	f003 030f 	and.w	r3, r3, #15
 80191d0:	2101      	movs	r1, #1
 80191d2:	fa01 f303 	lsl.w	r3, r1, r3
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	68f9      	ldr	r1, [r7, #12]
 80191da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80191de:	4313      	orrs	r3, r2
 80191e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	015a      	lsls	r2, r3, #5
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	4413      	add	r3, r2
 80191ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d153      	bne.n	80192a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80191f8:	68bb      	ldr	r3, [r7, #8]
 80191fa:	015a      	lsls	r2, r3, #5
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	4413      	add	r3, r2
 8019200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	68db      	ldr	r3, [r3, #12]
 801920a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	791b      	ldrb	r3, [r3, #4]
 8019212:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8019214:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8019216:	68bb      	ldr	r3, [r7, #8]
 8019218:	059b      	lsls	r3, r3, #22
 801921a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801921c:	431a      	orrs	r2, r3
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	0159      	lsls	r1, r3, #5
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	440b      	add	r3, r1
 8019226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801922a:	4619      	mov	r1, r3
 801922c:	4b20      	ldr	r3, [pc, #128]	; (80192b0 <USB_ActivateEndpoint+0x10c>)
 801922e:	4313      	orrs	r3, r2
 8019230:	600b      	str	r3, [r1, #0]
 8019232:	e035      	b.n	80192a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801923a:	69da      	ldr	r2, [r3, #28]
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	f003 030f 	and.w	r3, r3, #15
 8019244:	2101      	movs	r1, #1
 8019246:	fa01 f303 	lsl.w	r3, r1, r3
 801924a:	041b      	lsls	r3, r3, #16
 801924c:	68f9      	ldr	r1, [r7, #12]
 801924e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019252:	4313      	orrs	r3, r2
 8019254:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	015a      	lsls	r2, r3, #5
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	4413      	add	r3, r2
 801925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019268:	2b00      	cmp	r3, #0
 801926a:	d119      	bne.n	80192a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801926c:	68bb      	ldr	r3, [r7, #8]
 801926e:	015a      	lsls	r2, r3, #5
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	4413      	add	r3, r2
 8019274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019278:	681a      	ldr	r2, [r3, #0]
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	68db      	ldr	r3, [r3, #12]
 801927e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8019282:	683b      	ldr	r3, [r7, #0]
 8019284:	791b      	ldrb	r3, [r3, #4]
 8019286:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8019288:	430b      	orrs	r3, r1
 801928a:	431a      	orrs	r2, r3
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	0159      	lsls	r1, r3, #5
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	440b      	add	r3, r1
 8019294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019298:	4619      	mov	r1, r3
 801929a:	4b05      	ldr	r3, [pc, #20]	; (80192b0 <USB_ActivateEndpoint+0x10c>)
 801929c:	4313      	orrs	r3, r2
 801929e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80192a0:	2300      	movs	r3, #0
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3714      	adds	r7, #20
 80192a6:	46bd      	mov	sp, r7
 80192a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ac:	4770      	bx	lr
 80192ae:	bf00      	nop
 80192b0:	10008000 	.word	0x10008000

080192b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80192b4:	b480      	push	{r7}
 80192b6:	b085      	sub	sp, #20
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
 80192bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80192c2:	683b      	ldr	r3, [r7, #0]
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	785b      	ldrb	r3, [r3, #1]
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	d161      	bne.n	8019394 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	015a      	lsls	r2, r3, #5
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	4413      	add	r3, r2
 80192d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80192e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80192e6:	d11f      	bne.n	8019328 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	015a      	lsls	r2, r3, #5
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	4413      	add	r3, r2
 80192f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	68ba      	ldr	r2, [r7, #8]
 80192f8:	0151      	lsls	r1, r2, #5
 80192fa:	68fa      	ldr	r2, [r7, #12]
 80192fc:	440a      	add	r2, r1
 80192fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019306:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	015a      	lsls	r2, r3, #5
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	4413      	add	r3, r2
 8019310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	68ba      	ldr	r2, [r7, #8]
 8019318:	0151      	lsls	r1, r2, #5
 801931a:	68fa      	ldr	r2, [r7, #12]
 801931c:	440a      	add	r2, r1
 801931e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801932e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	781b      	ldrb	r3, [r3, #0]
 8019334:	f003 030f 	and.w	r3, r3, #15
 8019338:	2101      	movs	r1, #1
 801933a:	fa01 f303 	lsl.w	r3, r1, r3
 801933e:	b29b      	uxth	r3, r3
 8019340:	43db      	mvns	r3, r3
 8019342:	68f9      	ldr	r1, [r7, #12]
 8019344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019348:	4013      	ands	r3, r2
 801934a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019352:	69da      	ldr	r2, [r3, #28]
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	f003 030f 	and.w	r3, r3, #15
 801935c:	2101      	movs	r1, #1
 801935e:	fa01 f303 	lsl.w	r3, r1, r3
 8019362:	b29b      	uxth	r3, r3
 8019364:	43db      	mvns	r3, r3
 8019366:	68f9      	ldr	r1, [r7, #12]
 8019368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801936c:	4013      	ands	r3, r2
 801936e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8019370:	68bb      	ldr	r3, [r7, #8]
 8019372:	015a      	lsls	r2, r3, #5
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	4413      	add	r3, r2
 8019378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801937c:	681a      	ldr	r2, [r3, #0]
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	0159      	lsls	r1, r3, #5
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	440b      	add	r3, r1
 8019386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801938a:	4619      	mov	r1, r3
 801938c:	4b35      	ldr	r3, [pc, #212]	; (8019464 <USB_DeactivateEndpoint+0x1b0>)
 801938e:	4013      	ands	r3, r2
 8019390:	600b      	str	r3, [r1, #0]
 8019392:	e060      	b.n	8019456 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	015a      	lsls	r2, r3, #5
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	4413      	add	r3, r2
 801939c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80193a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80193aa:	d11f      	bne.n	80193ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	015a      	lsls	r2, r3, #5
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	4413      	add	r3, r2
 80193b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	0151      	lsls	r1, r2, #5
 80193be:	68fa      	ldr	r2, [r7, #12]
 80193c0:	440a      	add	r2, r1
 80193c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80193c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80193ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	015a      	lsls	r2, r3, #5
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	4413      	add	r3, r2
 80193d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	68ba      	ldr	r2, [r7, #8]
 80193dc:	0151      	lsls	r1, r2, #5
 80193de:	68fa      	ldr	r2, [r7, #12]
 80193e0:	440a      	add	r2, r1
 80193e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80193e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80193ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80193f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	f003 030f 	and.w	r3, r3, #15
 80193fc:	2101      	movs	r1, #1
 80193fe:	fa01 f303 	lsl.w	r3, r1, r3
 8019402:	041b      	lsls	r3, r3, #16
 8019404:	43db      	mvns	r3, r3
 8019406:	68f9      	ldr	r1, [r7, #12]
 8019408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801940c:	4013      	ands	r3, r2
 801940e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019416:	69da      	ldr	r2, [r3, #28]
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	f003 030f 	and.w	r3, r3, #15
 8019420:	2101      	movs	r1, #1
 8019422:	fa01 f303 	lsl.w	r3, r1, r3
 8019426:	041b      	lsls	r3, r3, #16
 8019428:	43db      	mvns	r3, r3
 801942a:	68f9      	ldr	r1, [r7, #12]
 801942c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019430:	4013      	ands	r3, r2
 8019432:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	015a      	lsls	r2, r3, #5
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	4413      	add	r3, r2
 801943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019440:	681a      	ldr	r2, [r3, #0]
 8019442:	68bb      	ldr	r3, [r7, #8]
 8019444:	0159      	lsls	r1, r3, #5
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	440b      	add	r3, r1
 801944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801944e:	4619      	mov	r1, r3
 8019450:	4b05      	ldr	r3, [pc, #20]	; (8019468 <USB_DeactivateEndpoint+0x1b4>)
 8019452:	4013      	ands	r3, r2
 8019454:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8019456:	2300      	movs	r3, #0
}
 8019458:	4618      	mov	r0, r3
 801945a:	3714      	adds	r7, #20
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr
 8019464:	ec337800 	.word	0xec337800
 8019468:	eff37800 	.word	0xeff37800

0801946c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b08a      	sub	sp, #40	; 0x28
 8019470:	af02      	add	r7, sp, #8
 8019472:	60f8      	str	r0, [r7, #12]
 8019474:	60b9      	str	r1, [r7, #8]
 8019476:	4613      	mov	r3, r2
 8019478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801947e:	68bb      	ldr	r3, [r7, #8]
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	785b      	ldrb	r3, [r3, #1]
 8019488:	2b01      	cmp	r3, #1
 801948a:	f040 8163 	bne.w	8019754 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801948e:	68bb      	ldr	r3, [r7, #8]
 8019490:	699b      	ldr	r3, [r3, #24]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d132      	bne.n	80194fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	015a      	lsls	r2, r3, #5
 801949a:	69fb      	ldr	r3, [r7, #28]
 801949c:	4413      	add	r3, r2
 801949e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194a2:	691a      	ldr	r2, [r3, #16]
 80194a4:	69bb      	ldr	r3, [r7, #24]
 80194a6:	0159      	lsls	r1, r3, #5
 80194a8:	69fb      	ldr	r3, [r7, #28]
 80194aa:	440b      	add	r3, r1
 80194ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194b0:	4619      	mov	r1, r3
 80194b2:	4ba5      	ldr	r3, [pc, #660]	; (8019748 <USB_EPStartXfer+0x2dc>)
 80194b4:	4013      	ands	r3, r2
 80194b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80194b8:	69bb      	ldr	r3, [r7, #24]
 80194ba:	015a      	lsls	r2, r3, #5
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	4413      	add	r3, r2
 80194c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194c4:	691b      	ldr	r3, [r3, #16]
 80194c6:	69ba      	ldr	r2, [r7, #24]
 80194c8:	0151      	lsls	r1, r2, #5
 80194ca:	69fa      	ldr	r2, [r7, #28]
 80194cc:	440a      	add	r2, r1
 80194ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80194d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80194d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80194d8:	69bb      	ldr	r3, [r7, #24]
 80194da:	015a      	lsls	r2, r3, #5
 80194dc:	69fb      	ldr	r3, [r7, #28]
 80194de:	4413      	add	r3, r2
 80194e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194e4:	691a      	ldr	r2, [r3, #16]
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	0159      	lsls	r1, r3, #5
 80194ea:	69fb      	ldr	r3, [r7, #28]
 80194ec:	440b      	add	r3, r1
 80194ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80194f2:	4619      	mov	r1, r3
 80194f4:	4b95      	ldr	r3, [pc, #596]	; (801974c <USB_EPStartXfer+0x2e0>)
 80194f6:	4013      	ands	r3, r2
 80194f8:	610b      	str	r3, [r1, #16]
 80194fa:	e074      	b.n	80195e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	015a      	lsls	r2, r3, #5
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	4413      	add	r3, r2
 8019504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019508:	691a      	ldr	r2, [r3, #16]
 801950a:	69bb      	ldr	r3, [r7, #24]
 801950c:	0159      	lsls	r1, r3, #5
 801950e:	69fb      	ldr	r3, [r7, #28]
 8019510:	440b      	add	r3, r1
 8019512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019516:	4619      	mov	r1, r3
 8019518:	4b8c      	ldr	r3, [pc, #560]	; (801974c <USB_EPStartXfer+0x2e0>)
 801951a:	4013      	ands	r3, r2
 801951c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801951e:	69bb      	ldr	r3, [r7, #24]
 8019520:	015a      	lsls	r2, r3, #5
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	4413      	add	r3, r2
 8019526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801952a:	691a      	ldr	r2, [r3, #16]
 801952c:	69bb      	ldr	r3, [r7, #24]
 801952e:	0159      	lsls	r1, r3, #5
 8019530:	69fb      	ldr	r3, [r7, #28]
 8019532:	440b      	add	r3, r1
 8019534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019538:	4619      	mov	r1, r3
 801953a:	4b83      	ldr	r3, [pc, #524]	; (8019748 <USB_EPStartXfer+0x2dc>)
 801953c:	4013      	ands	r3, r2
 801953e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8019540:	69bb      	ldr	r3, [r7, #24]
 8019542:	015a      	lsls	r2, r3, #5
 8019544:	69fb      	ldr	r3, [r7, #28]
 8019546:	4413      	add	r3, r2
 8019548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801954c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801954e:	68bb      	ldr	r3, [r7, #8]
 8019550:	6999      	ldr	r1, [r3, #24]
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	68db      	ldr	r3, [r3, #12]
 8019556:	440b      	add	r3, r1
 8019558:	1e59      	subs	r1, r3, #1
 801955a:	68bb      	ldr	r3, [r7, #8]
 801955c:	68db      	ldr	r3, [r3, #12]
 801955e:	fbb1 f3f3 	udiv	r3, r1, r3
 8019562:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8019564:	4b7a      	ldr	r3, [pc, #488]	; (8019750 <USB_EPStartXfer+0x2e4>)
 8019566:	400b      	ands	r3, r1
 8019568:	69b9      	ldr	r1, [r7, #24]
 801956a:	0148      	lsls	r0, r1, #5
 801956c:	69f9      	ldr	r1, [r7, #28]
 801956e:	4401      	add	r1, r0
 8019570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8019574:	4313      	orrs	r3, r2
 8019576:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019578:	69bb      	ldr	r3, [r7, #24]
 801957a:	015a      	lsls	r2, r3, #5
 801957c:	69fb      	ldr	r3, [r7, #28]
 801957e:	4413      	add	r3, r2
 8019580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019584:	691a      	ldr	r2, [r3, #16]
 8019586:	68bb      	ldr	r3, [r7, #8]
 8019588:	699b      	ldr	r3, [r3, #24]
 801958a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801958e:	69b9      	ldr	r1, [r7, #24]
 8019590:	0148      	lsls	r0, r1, #5
 8019592:	69f9      	ldr	r1, [r7, #28]
 8019594:	4401      	add	r1, r0
 8019596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801959a:	4313      	orrs	r3, r2
 801959c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	791b      	ldrb	r3, [r3, #4]
 80195a2:	2b01      	cmp	r3, #1
 80195a4:	d11f      	bne.n	80195e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80195a6:	69bb      	ldr	r3, [r7, #24]
 80195a8:	015a      	lsls	r2, r3, #5
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	4413      	add	r3, r2
 80195ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195b2:	691b      	ldr	r3, [r3, #16]
 80195b4:	69ba      	ldr	r2, [r7, #24]
 80195b6:	0151      	lsls	r1, r2, #5
 80195b8:	69fa      	ldr	r2, [r7, #28]
 80195ba:	440a      	add	r2, r1
 80195bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80195c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80195c6:	69bb      	ldr	r3, [r7, #24]
 80195c8:	015a      	lsls	r2, r3, #5
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	4413      	add	r3, r2
 80195ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80195d2:	691b      	ldr	r3, [r3, #16]
 80195d4:	69ba      	ldr	r2, [r7, #24]
 80195d6:	0151      	lsls	r1, r2, #5
 80195d8:	69fa      	ldr	r2, [r7, #28]
 80195da:	440a      	add	r2, r1
 80195dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80195e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80195e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80195e6:	79fb      	ldrb	r3, [r7, #7]
 80195e8:	2b01      	cmp	r3, #1
 80195ea:	d14b      	bne.n	8019684 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	695b      	ldr	r3, [r3, #20]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d009      	beq.n	8019608 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80195f4:	69bb      	ldr	r3, [r7, #24]
 80195f6:	015a      	lsls	r2, r3, #5
 80195f8:	69fb      	ldr	r3, [r7, #28]
 80195fa:	4413      	add	r3, r2
 80195fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019600:	461a      	mov	r2, r3
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	695b      	ldr	r3, [r3, #20]
 8019606:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	791b      	ldrb	r3, [r3, #4]
 801960c:	2b01      	cmp	r3, #1
 801960e:	d128      	bne.n	8019662 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019610:	69fb      	ldr	r3, [r7, #28]
 8019612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019616:	689b      	ldr	r3, [r3, #8]
 8019618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801961c:	2b00      	cmp	r3, #0
 801961e:	d110      	bne.n	8019642 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8019620:	69bb      	ldr	r3, [r7, #24]
 8019622:	015a      	lsls	r2, r3, #5
 8019624:	69fb      	ldr	r3, [r7, #28]
 8019626:	4413      	add	r3, r2
 8019628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	69ba      	ldr	r2, [r7, #24]
 8019630:	0151      	lsls	r1, r2, #5
 8019632:	69fa      	ldr	r2, [r7, #28]
 8019634:	440a      	add	r2, r1
 8019636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801963a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801963e:	6013      	str	r3, [r2, #0]
 8019640:	e00f      	b.n	8019662 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8019642:	69bb      	ldr	r3, [r7, #24]
 8019644:	015a      	lsls	r2, r3, #5
 8019646:	69fb      	ldr	r3, [r7, #28]
 8019648:	4413      	add	r3, r2
 801964a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	69ba      	ldr	r2, [r7, #24]
 8019652:	0151      	lsls	r1, r2, #5
 8019654:	69fa      	ldr	r2, [r7, #28]
 8019656:	440a      	add	r2, r1
 8019658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801965c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019660:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019662:	69bb      	ldr	r3, [r7, #24]
 8019664:	015a      	lsls	r2, r3, #5
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	4413      	add	r3, r2
 801966a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	69ba      	ldr	r2, [r7, #24]
 8019672:	0151      	lsls	r1, r2, #5
 8019674:	69fa      	ldr	r2, [r7, #28]
 8019676:	440a      	add	r2, r1
 8019678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801967c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019680:	6013      	str	r3, [r2, #0]
 8019682:	e137      	b.n	80198f4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019684:	69bb      	ldr	r3, [r7, #24]
 8019686:	015a      	lsls	r2, r3, #5
 8019688:	69fb      	ldr	r3, [r7, #28]
 801968a:	4413      	add	r3, r2
 801968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	69ba      	ldr	r2, [r7, #24]
 8019694:	0151      	lsls	r1, r2, #5
 8019696:	69fa      	ldr	r2, [r7, #28]
 8019698:	440a      	add	r2, r1
 801969a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801969e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80196a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80196a4:	68bb      	ldr	r3, [r7, #8]
 80196a6:	791b      	ldrb	r3, [r3, #4]
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d015      	beq.n	80196d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	699b      	ldr	r3, [r3, #24]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	f000 811f 	beq.w	80198f4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80196b6:	69fb      	ldr	r3, [r7, #28]
 80196b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80196bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	f003 030f 	and.w	r3, r3, #15
 80196c6:	2101      	movs	r1, #1
 80196c8:	fa01 f303 	lsl.w	r3, r1, r3
 80196cc:	69f9      	ldr	r1, [r7, #28]
 80196ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80196d2:	4313      	orrs	r3, r2
 80196d4:	634b      	str	r3, [r1, #52]	; 0x34
 80196d6:	e10d      	b.n	80198f4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80196d8:	69fb      	ldr	r3, [r7, #28]
 80196da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80196de:	689b      	ldr	r3, [r3, #8]
 80196e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d110      	bne.n	801970a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80196e8:	69bb      	ldr	r3, [r7, #24]
 80196ea:	015a      	lsls	r2, r3, #5
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	4413      	add	r3, r2
 80196f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	69ba      	ldr	r2, [r7, #24]
 80196f8:	0151      	lsls	r1, r2, #5
 80196fa:	69fa      	ldr	r2, [r7, #28]
 80196fc:	440a      	add	r2, r1
 80196fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8019706:	6013      	str	r3, [r2, #0]
 8019708:	e00f      	b.n	801972a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801970a:	69bb      	ldr	r3, [r7, #24]
 801970c:	015a      	lsls	r2, r3, #5
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	4413      	add	r3, r2
 8019712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	69ba      	ldr	r2, [r7, #24]
 801971a:	0151      	lsls	r1, r2, #5
 801971c:	69fa      	ldr	r2, [r7, #28]
 801971e:	440a      	add	r2, r1
 8019720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019728:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	6919      	ldr	r1, [r3, #16]
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	781a      	ldrb	r2, [r3, #0]
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	699b      	ldr	r3, [r3, #24]
 8019736:	b298      	uxth	r0, r3
 8019738:	79fb      	ldrb	r3, [r7, #7]
 801973a:	9300      	str	r3, [sp, #0]
 801973c:	4603      	mov	r3, r0
 801973e:	68f8      	ldr	r0, [r7, #12]
 8019740:	f000 faea 	bl	8019d18 <USB_WritePacket>
 8019744:	e0d6      	b.n	80198f4 <USB_EPStartXfer+0x488>
 8019746:	bf00      	nop
 8019748:	e007ffff 	.word	0xe007ffff
 801974c:	fff80000 	.word	0xfff80000
 8019750:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019754:	69bb      	ldr	r3, [r7, #24]
 8019756:	015a      	lsls	r2, r3, #5
 8019758:	69fb      	ldr	r3, [r7, #28]
 801975a:	4413      	add	r3, r2
 801975c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019760:	691a      	ldr	r2, [r3, #16]
 8019762:	69bb      	ldr	r3, [r7, #24]
 8019764:	0159      	lsls	r1, r3, #5
 8019766:	69fb      	ldr	r3, [r7, #28]
 8019768:	440b      	add	r3, r1
 801976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801976e:	4619      	mov	r1, r3
 8019770:	4b63      	ldr	r3, [pc, #396]	; (8019900 <USB_EPStartXfer+0x494>)
 8019772:	4013      	ands	r3, r2
 8019774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019776:	69bb      	ldr	r3, [r7, #24]
 8019778:	015a      	lsls	r2, r3, #5
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	4413      	add	r3, r2
 801977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019782:	691a      	ldr	r2, [r3, #16]
 8019784:	69bb      	ldr	r3, [r7, #24]
 8019786:	0159      	lsls	r1, r3, #5
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	440b      	add	r3, r1
 801978c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019790:	4619      	mov	r1, r3
 8019792:	4b5c      	ldr	r3, [pc, #368]	; (8019904 <USB_EPStartXfer+0x498>)
 8019794:	4013      	ands	r3, r2
 8019796:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	699b      	ldr	r3, [r3, #24]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d123      	bne.n	80197e8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80197a0:	69bb      	ldr	r3, [r7, #24]
 80197a2:	015a      	lsls	r2, r3, #5
 80197a4:	69fb      	ldr	r3, [r7, #28]
 80197a6:	4413      	add	r3, r2
 80197a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197ac:	691a      	ldr	r2, [r3, #16]
 80197ae:	68bb      	ldr	r3, [r7, #8]
 80197b0:	68db      	ldr	r3, [r3, #12]
 80197b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80197b6:	69b9      	ldr	r1, [r7, #24]
 80197b8:	0148      	lsls	r0, r1, #5
 80197ba:	69f9      	ldr	r1, [r7, #28]
 80197bc:	4401      	add	r1, r0
 80197be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80197c2:	4313      	orrs	r3, r2
 80197c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80197c6:	69bb      	ldr	r3, [r7, #24]
 80197c8:	015a      	lsls	r2, r3, #5
 80197ca:	69fb      	ldr	r3, [r7, #28]
 80197cc:	4413      	add	r3, r2
 80197ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80197d2:	691b      	ldr	r3, [r3, #16]
 80197d4:	69ba      	ldr	r2, [r7, #24]
 80197d6:	0151      	lsls	r1, r2, #5
 80197d8:	69fa      	ldr	r2, [r7, #28]
 80197da:	440a      	add	r2, r1
 80197dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80197e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80197e4:	6113      	str	r3, [r2, #16]
 80197e6:	e037      	b.n	8019858 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	699a      	ldr	r2, [r3, #24]
 80197ec:	68bb      	ldr	r3, [r7, #8]
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	4413      	add	r3, r2
 80197f2:	1e5a      	subs	r2, r3, #1
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80197fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	68db      	ldr	r3, [r3, #12]
 8019802:	8afa      	ldrh	r2, [r7, #22]
 8019804:	fb03 f202 	mul.w	r2, r3, r2
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801980c:	69bb      	ldr	r3, [r7, #24]
 801980e:	015a      	lsls	r2, r3, #5
 8019810:	69fb      	ldr	r3, [r7, #28]
 8019812:	4413      	add	r3, r2
 8019814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019818:	691a      	ldr	r2, [r3, #16]
 801981a:	8afb      	ldrh	r3, [r7, #22]
 801981c:	04d9      	lsls	r1, r3, #19
 801981e:	4b3a      	ldr	r3, [pc, #232]	; (8019908 <USB_EPStartXfer+0x49c>)
 8019820:	400b      	ands	r3, r1
 8019822:	69b9      	ldr	r1, [r7, #24]
 8019824:	0148      	lsls	r0, r1, #5
 8019826:	69f9      	ldr	r1, [r7, #28]
 8019828:	4401      	add	r1, r0
 801982a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801982e:	4313      	orrs	r3, r2
 8019830:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8019832:	69bb      	ldr	r3, [r7, #24]
 8019834:	015a      	lsls	r2, r3, #5
 8019836:	69fb      	ldr	r3, [r7, #28]
 8019838:	4413      	add	r3, r2
 801983a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801983e:	691a      	ldr	r2, [r3, #16]
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	69db      	ldr	r3, [r3, #28]
 8019844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019848:	69b9      	ldr	r1, [r7, #24]
 801984a:	0148      	lsls	r0, r1, #5
 801984c:	69f9      	ldr	r1, [r7, #28]
 801984e:	4401      	add	r1, r0
 8019850:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019854:	4313      	orrs	r3, r2
 8019856:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019858:	79fb      	ldrb	r3, [r7, #7]
 801985a:	2b01      	cmp	r3, #1
 801985c:	d10d      	bne.n	801987a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801985e:	68bb      	ldr	r3, [r7, #8]
 8019860:	691b      	ldr	r3, [r3, #16]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d009      	beq.n	801987a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	6919      	ldr	r1, [r3, #16]
 801986a:	69bb      	ldr	r3, [r7, #24]
 801986c:	015a      	lsls	r2, r3, #5
 801986e:	69fb      	ldr	r3, [r7, #28]
 8019870:	4413      	add	r3, r2
 8019872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019876:	460a      	mov	r2, r1
 8019878:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	791b      	ldrb	r3, [r3, #4]
 801987e:	2b01      	cmp	r3, #1
 8019880:	d128      	bne.n	80198d4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8019882:	69fb      	ldr	r3, [r7, #28]
 8019884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019888:	689b      	ldr	r3, [r3, #8]
 801988a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801988e:	2b00      	cmp	r3, #0
 8019890:	d110      	bne.n	80198b4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8019892:	69bb      	ldr	r3, [r7, #24]
 8019894:	015a      	lsls	r2, r3, #5
 8019896:	69fb      	ldr	r3, [r7, #28]
 8019898:	4413      	add	r3, r2
 801989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	69ba      	ldr	r2, [r7, #24]
 80198a2:	0151      	lsls	r1, r2, #5
 80198a4:	69fa      	ldr	r2, [r7, #28]
 80198a6:	440a      	add	r2, r1
 80198a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80198ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80198b0:	6013      	str	r3, [r2, #0]
 80198b2:	e00f      	b.n	80198d4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80198b4:	69bb      	ldr	r3, [r7, #24]
 80198b6:	015a      	lsls	r2, r3, #5
 80198b8:	69fb      	ldr	r3, [r7, #28]
 80198ba:	4413      	add	r3, r2
 80198bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	69ba      	ldr	r2, [r7, #24]
 80198c4:	0151      	lsls	r1, r2, #5
 80198c6:	69fa      	ldr	r2, [r7, #28]
 80198c8:	440a      	add	r2, r1
 80198ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80198ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80198d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80198d4:	69bb      	ldr	r3, [r7, #24]
 80198d6:	015a      	lsls	r2, r3, #5
 80198d8:	69fb      	ldr	r3, [r7, #28]
 80198da:	4413      	add	r3, r2
 80198dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	69ba      	ldr	r2, [r7, #24]
 80198e4:	0151      	lsls	r1, r2, #5
 80198e6:	69fa      	ldr	r2, [r7, #28]
 80198e8:	440a      	add	r2, r1
 80198ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80198ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80198f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80198f4:	2300      	movs	r3, #0
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	3720      	adds	r7, #32
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}
 80198fe:	bf00      	nop
 8019900:	fff80000 	.word	0xfff80000
 8019904:	e007ffff 	.word	0xe007ffff
 8019908:	1ff80000 	.word	0x1ff80000

0801990c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801990c:	b480      	push	{r7}
 801990e:	b087      	sub	sp, #28
 8019910:	af00      	add	r7, sp, #0
 8019912:	60f8      	str	r0, [r7, #12]
 8019914:	60b9      	str	r1, [r7, #8]
 8019916:	4613      	mov	r3, r2
 8019918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	785b      	ldrb	r3, [r3, #1]
 8019928:	2b01      	cmp	r3, #1
 801992a:	f040 80ce 	bne.w	8019aca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	699b      	ldr	r3, [r3, #24]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d132      	bne.n	801999c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	015a      	lsls	r2, r3, #5
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	4413      	add	r3, r2
 801993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019942:	691a      	ldr	r2, [r3, #16]
 8019944:	693b      	ldr	r3, [r7, #16]
 8019946:	0159      	lsls	r1, r3, #5
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	440b      	add	r3, r1
 801994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019950:	4619      	mov	r1, r3
 8019952:	4b9a      	ldr	r3, [pc, #616]	; (8019bbc <USB_EP0StartXfer+0x2b0>)
 8019954:	4013      	ands	r3, r2
 8019956:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	015a      	lsls	r2, r3, #5
 801995c:	697b      	ldr	r3, [r7, #20]
 801995e:	4413      	add	r3, r2
 8019960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019964:	691b      	ldr	r3, [r3, #16]
 8019966:	693a      	ldr	r2, [r7, #16]
 8019968:	0151      	lsls	r1, r2, #5
 801996a:	697a      	ldr	r2, [r7, #20]
 801996c:	440a      	add	r2, r1
 801996e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	015a      	lsls	r2, r3, #5
 801997c:	697b      	ldr	r3, [r7, #20]
 801997e:	4413      	add	r3, r2
 8019980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019984:	691a      	ldr	r2, [r3, #16]
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	0159      	lsls	r1, r3, #5
 801998a:	697b      	ldr	r3, [r7, #20]
 801998c:	440b      	add	r3, r1
 801998e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019992:	4619      	mov	r1, r3
 8019994:	4b8a      	ldr	r3, [pc, #552]	; (8019bc0 <USB_EP0StartXfer+0x2b4>)
 8019996:	4013      	ands	r3, r2
 8019998:	610b      	str	r3, [r1, #16]
 801999a:	e04e      	b.n	8019a3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801999c:	693b      	ldr	r3, [r7, #16]
 801999e:	015a      	lsls	r2, r3, #5
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	4413      	add	r3, r2
 80199a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199a8:	691a      	ldr	r2, [r3, #16]
 80199aa:	693b      	ldr	r3, [r7, #16]
 80199ac:	0159      	lsls	r1, r3, #5
 80199ae:	697b      	ldr	r3, [r7, #20]
 80199b0:	440b      	add	r3, r1
 80199b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199b6:	4619      	mov	r1, r3
 80199b8:	4b81      	ldr	r3, [pc, #516]	; (8019bc0 <USB_EP0StartXfer+0x2b4>)
 80199ba:	4013      	ands	r3, r2
 80199bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80199be:	693b      	ldr	r3, [r7, #16]
 80199c0:	015a      	lsls	r2, r3, #5
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	4413      	add	r3, r2
 80199c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199ca:	691a      	ldr	r2, [r3, #16]
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	0159      	lsls	r1, r3, #5
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	440b      	add	r3, r1
 80199d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80199d8:	4619      	mov	r1, r3
 80199da:	4b78      	ldr	r3, [pc, #480]	; (8019bbc <USB_EP0StartXfer+0x2b0>)
 80199dc:	4013      	ands	r3, r2
 80199de:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80199e0:	68bb      	ldr	r3, [r7, #8]
 80199e2:	699a      	ldr	r2, [r3, #24]
 80199e4:	68bb      	ldr	r3, [r7, #8]
 80199e6:	68db      	ldr	r3, [r3, #12]
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d903      	bls.n	80199f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	68da      	ldr	r2, [r3, #12]
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	015a      	lsls	r2, r3, #5
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	4413      	add	r3, r2
 80199fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a00:	691b      	ldr	r3, [r3, #16]
 8019a02:	693a      	ldr	r2, [r7, #16]
 8019a04:	0151      	lsls	r1, r2, #5
 8019a06:	697a      	ldr	r2, [r7, #20]
 8019a08:	440a      	add	r2, r1
 8019a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8019a14:	693b      	ldr	r3, [r7, #16]
 8019a16:	015a      	lsls	r2, r3, #5
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	4413      	add	r3, r2
 8019a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a20:	691a      	ldr	r2, [r3, #16]
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	699b      	ldr	r3, [r3, #24]
 8019a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a2a:	6939      	ldr	r1, [r7, #16]
 8019a2c:	0148      	lsls	r0, r1, #5
 8019a2e:	6979      	ldr	r1, [r7, #20]
 8019a30:	4401      	add	r1, r0
 8019a32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8019a36:	4313      	orrs	r3, r2
 8019a38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8019a3a:	79fb      	ldrb	r3, [r7, #7]
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d11e      	bne.n	8019a7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	695b      	ldr	r3, [r3, #20]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d009      	beq.n	8019a5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	015a      	lsls	r2, r3, #5
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	4413      	add	r3, r2
 8019a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a54:	461a      	mov	r2, r3
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	695b      	ldr	r3, [r3, #20]
 8019a5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	015a      	lsls	r2, r3, #5
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	4413      	add	r3, r2
 8019a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	693a      	ldr	r2, [r7, #16]
 8019a6c:	0151      	lsls	r1, r2, #5
 8019a6e:	697a      	ldr	r2, [r7, #20]
 8019a70:	440a      	add	r2, r1
 8019a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019a7a:	6013      	str	r3, [r2, #0]
 8019a7c:	e097      	b.n	8019bae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8019a7e:	693b      	ldr	r3, [r7, #16]
 8019a80:	015a      	lsls	r2, r3, #5
 8019a82:	697b      	ldr	r3, [r7, #20]
 8019a84:	4413      	add	r3, r2
 8019a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	693a      	ldr	r2, [r7, #16]
 8019a8e:	0151      	lsls	r1, r2, #5
 8019a90:	697a      	ldr	r2, [r7, #20]
 8019a92:	440a      	add	r2, r1
 8019a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019a98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019a9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8019a9e:	68bb      	ldr	r3, [r7, #8]
 8019aa0:	699b      	ldr	r3, [r3, #24]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f000 8083 	beq.w	8019bae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	f003 030f 	and.w	r3, r3, #15
 8019ab8:	2101      	movs	r1, #1
 8019aba:	fa01 f303 	lsl.w	r3, r1, r3
 8019abe:	6979      	ldr	r1, [r7, #20]
 8019ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019ac4:	4313      	orrs	r3, r2
 8019ac6:	634b      	str	r3, [r1, #52]	; 0x34
 8019ac8:	e071      	b.n	8019bae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	015a      	lsls	r2, r3, #5
 8019ace:	697b      	ldr	r3, [r7, #20]
 8019ad0:	4413      	add	r3, r2
 8019ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ad6:	691a      	ldr	r2, [r3, #16]
 8019ad8:	693b      	ldr	r3, [r7, #16]
 8019ada:	0159      	lsls	r1, r3, #5
 8019adc:	697b      	ldr	r3, [r7, #20]
 8019ade:	440b      	add	r3, r1
 8019ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	4b36      	ldr	r3, [pc, #216]	; (8019bc0 <USB_EP0StartXfer+0x2b4>)
 8019ae8:	4013      	ands	r3, r2
 8019aea:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8019aec:	693b      	ldr	r3, [r7, #16]
 8019aee:	015a      	lsls	r2, r3, #5
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	4413      	add	r3, r2
 8019af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019af8:	691a      	ldr	r2, [r3, #16]
 8019afa:	693b      	ldr	r3, [r7, #16]
 8019afc:	0159      	lsls	r1, r3, #5
 8019afe:	697b      	ldr	r3, [r7, #20]
 8019b00:	440b      	add	r3, r1
 8019b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b06:	4619      	mov	r1, r3
 8019b08:	4b2c      	ldr	r3, [pc, #176]	; (8019bbc <USB_EP0StartXfer+0x2b0>)
 8019b0a:	4013      	ands	r3, r2
 8019b0c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	699b      	ldr	r3, [r3, #24]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d003      	beq.n	8019b1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	68da      	ldr	r2, [r3, #12]
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	68da      	ldr	r2, [r3, #12]
 8019b22:	68bb      	ldr	r3, [r7, #8]
 8019b24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8019b26:	693b      	ldr	r3, [r7, #16]
 8019b28:	015a      	lsls	r2, r3, #5
 8019b2a:	697b      	ldr	r3, [r7, #20]
 8019b2c:	4413      	add	r3, r2
 8019b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b32:	691b      	ldr	r3, [r3, #16]
 8019b34:	693a      	ldr	r2, [r7, #16]
 8019b36:	0151      	lsls	r1, r2, #5
 8019b38:	697a      	ldr	r2, [r7, #20]
 8019b3a:	440a      	add	r2, r1
 8019b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	015a      	lsls	r2, r3, #5
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b52:	691a      	ldr	r2, [r3, #16]
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	69db      	ldr	r3, [r3, #28]
 8019b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019b5c:	6939      	ldr	r1, [r7, #16]
 8019b5e:	0148      	lsls	r0, r1, #5
 8019b60:	6979      	ldr	r1, [r7, #20]
 8019b62:	4401      	add	r1, r0
 8019b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8019b68:	4313      	orrs	r3, r2
 8019b6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8019b6c:	79fb      	ldrb	r3, [r7, #7]
 8019b6e:	2b01      	cmp	r3, #1
 8019b70:	d10d      	bne.n	8019b8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	691b      	ldr	r3, [r3, #16]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d009      	beq.n	8019b8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	6919      	ldr	r1, [r3, #16]
 8019b7e:	693b      	ldr	r3, [r7, #16]
 8019b80:	015a      	lsls	r2, r3, #5
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	4413      	add	r3, r2
 8019b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b8a:	460a      	mov	r2, r1
 8019b8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	015a      	lsls	r2, r3, #5
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	4413      	add	r3, r2
 8019b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	693a      	ldr	r2, [r7, #16]
 8019b9e:	0151      	lsls	r1, r2, #5
 8019ba0:	697a      	ldr	r2, [r7, #20]
 8019ba2:	440a      	add	r2, r1
 8019ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8019bac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019bae:	2300      	movs	r3, #0
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	371c      	adds	r7, #28
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bba:	4770      	bx	lr
 8019bbc:	e007ffff 	.word	0xe007ffff
 8019bc0:	fff80000 	.word	0xfff80000

08019bc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	b087      	sub	sp, #28
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
 8019bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	785b      	ldrb	r3, [r3, #1]
 8019bde:	2b01      	cmp	r3, #1
 8019be0:	d14a      	bne.n	8019c78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	781b      	ldrb	r3, [r3, #0]
 8019be6:	015a      	lsls	r2, r3, #5
 8019be8:	693b      	ldr	r3, [r7, #16]
 8019bea:	4413      	add	r3, r2
 8019bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019bfa:	f040 8086 	bne.w	8019d0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	015a      	lsls	r2, r3, #5
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	4413      	add	r3, r2
 8019c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	683a      	ldr	r2, [r7, #0]
 8019c10:	7812      	ldrb	r2, [r2, #0]
 8019c12:	0151      	lsls	r1, r2, #5
 8019c14:	693a      	ldr	r2, [r7, #16]
 8019c16:	440a      	add	r2, r1
 8019c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019c20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8019c22:	683b      	ldr	r3, [r7, #0]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	015a      	lsls	r2, r3, #5
 8019c28:	693b      	ldr	r3, [r7, #16]
 8019c2a:	4413      	add	r3, r2
 8019c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	683a      	ldr	r2, [r7, #0]
 8019c34:	7812      	ldrb	r2, [r2, #0]
 8019c36:	0151      	lsls	r1, r2, #5
 8019c38:	693a      	ldr	r2, [r7, #16]
 8019c3a:	440a      	add	r2, r1
 8019c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019c44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8019c52:	4293      	cmp	r3, r2
 8019c54:	d902      	bls.n	8019c5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8019c56:	2301      	movs	r3, #1
 8019c58:	75fb      	strb	r3, [r7, #23]
          break;
 8019c5a:	e056      	b.n	8019d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	781b      	ldrb	r3, [r3, #0]
 8019c60:	015a      	lsls	r2, r3, #5
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	4413      	add	r3, r2
 8019c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c74:	d0e7      	beq.n	8019c46 <USB_EPStopXfer+0x82>
 8019c76:	e048      	b.n	8019d0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	015a      	lsls	r2, r3, #5
 8019c7e:	693b      	ldr	r3, [r7, #16]
 8019c80:	4413      	add	r3, r2
 8019c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c90:	d13b      	bne.n	8019d0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	015a      	lsls	r2, r3, #5
 8019c98:	693b      	ldr	r3, [r7, #16]
 8019c9a:	4413      	add	r3, r2
 8019c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	683a      	ldr	r2, [r7, #0]
 8019ca4:	7812      	ldrb	r2, [r2, #0]
 8019ca6:	0151      	lsls	r1, r2, #5
 8019ca8:	693a      	ldr	r2, [r7, #16]
 8019caa:	440a      	add	r2, r1
 8019cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019cb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	015a      	lsls	r2, r3, #5
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	4413      	add	r3, r2
 8019cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	683a      	ldr	r2, [r7, #0]
 8019cc8:	7812      	ldrb	r2, [r2, #0]
 8019cca:	0151      	lsls	r1, r2, #5
 8019ccc:	693a      	ldr	r2, [r7, #16]
 8019cce:	440a      	add	r2, r1
 8019cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019cd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	3301      	adds	r3, #1
 8019cde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f242 7210 	movw	r2, #10000	; 0x2710
 8019ce6:	4293      	cmp	r3, r2
 8019ce8:	d902      	bls.n	8019cf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8019cea:	2301      	movs	r3, #1
 8019cec:	75fb      	strb	r3, [r7, #23]
          break;
 8019cee:	e00c      	b.n	8019d0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	015a      	lsls	r2, r3, #5
 8019cf6:	693b      	ldr	r3, [r7, #16]
 8019cf8:	4413      	add	r3, r2
 8019cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d08:	d0e7      	beq.n	8019cda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8019d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	371c      	adds	r7, #28
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8019d18:	b480      	push	{r7}
 8019d1a:	b089      	sub	sp, #36	; 0x24
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	60b9      	str	r1, [r7, #8]
 8019d22:	4611      	mov	r1, r2
 8019d24:	461a      	mov	r2, r3
 8019d26:	460b      	mov	r3, r1
 8019d28:	71fb      	strb	r3, [r7, #7]
 8019d2a:	4613      	mov	r3, r2
 8019d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8019d36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d123      	bne.n	8019d86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8019d3e:	88bb      	ldrh	r3, [r7, #4]
 8019d40:	3303      	adds	r3, #3
 8019d42:	089b      	lsrs	r3, r3, #2
 8019d44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8019d46:	2300      	movs	r3, #0
 8019d48:	61bb      	str	r3, [r7, #24]
 8019d4a:	e018      	b.n	8019d7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8019d4c:	79fb      	ldrb	r3, [r7, #7]
 8019d4e:	031a      	lsls	r2, r3, #12
 8019d50:	697b      	ldr	r3, [r7, #20]
 8019d52:	4413      	add	r3, r2
 8019d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d58:	461a      	mov	r2, r3
 8019d5a:	69fb      	ldr	r3, [r7, #28]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8019d60:	69fb      	ldr	r3, [r7, #28]
 8019d62:	3301      	adds	r3, #1
 8019d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d66:	69fb      	ldr	r3, [r7, #28]
 8019d68:	3301      	adds	r3, #1
 8019d6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	3301      	adds	r3, #1
 8019d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8019d72:	69fb      	ldr	r3, [r7, #28]
 8019d74:	3301      	adds	r3, #1
 8019d76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8019d78:	69bb      	ldr	r3, [r7, #24]
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	61bb      	str	r3, [r7, #24]
 8019d7e:	69ba      	ldr	r2, [r7, #24]
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d3e2      	bcc.n	8019d4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8019d86:	2300      	movs	r3, #0
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3724      	adds	r7, #36	; 0x24
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr

08019d94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8019d94:	b480      	push	{r7}
 8019d96:	b08b      	sub	sp, #44	; 0x2c
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	60f8      	str	r0, [r7, #12]
 8019d9c:	60b9      	str	r1, [r7, #8]
 8019d9e:	4613      	mov	r3, r2
 8019da0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8019daa:	88fb      	ldrh	r3, [r7, #6]
 8019dac:	089b      	lsrs	r3, r3, #2
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8019db2:	88fb      	ldrh	r3, [r7, #6]
 8019db4:	f003 0303 	and.w	r3, r3, #3
 8019db8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8019dba:	2300      	movs	r3, #0
 8019dbc:	623b      	str	r3, [r7, #32]
 8019dbe:	e014      	b.n	8019dea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8019dc0:	69bb      	ldr	r3, [r7, #24]
 8019dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019dc6:	681a      	ldr	r2, [r3, #0]
 8019dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dca:	601a      	str	r2, [r3, #0]
    pDest++;
 8019dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dce:	3301      	adds	r3, #1
 8019dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dda:	3301      	adds	r3, #1
 8019ddc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8019dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de0:	3301      	adds	r3, #1
 8019de2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8019de4:	6a3b      	ldr	r3, [r7, #32]
 8019de6:	3301      	adds	r3, #1
 8019de8:	623b      	str	r3, [r7, #32]
 8019dea:	6a3a      	ldr	r2, [r7, #32]
 8019dec:	697b      	ldr	r3, [r7, #20]
 8019dee:	429a      	cmp	r2, r3
 8019df0:	d3e6      	bcc.n	8019dc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8019df2:	8bfb      	ldrh	r3, [r7, #30]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d01e      	beq.n	8019e36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8019dfc:	69bb      	ldr	r3, [r7, #24]
 8019dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e02:	461a      	mov	r2, r3
 8019e04:	f107 0310 	add.w	r3, r7, #16
 8019e08:	6812      	ldr	r2, [r2, #0]
 8019e0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8019e0c:	693a      	ldr	r2, [r7, #16]
 8019e0e:	6a3b      	ldr	r3, [r7, #32]
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	00db      	lsls	r3, r3, #3
 8019e14:	fa22 f303 	lsr.w	r3, r2, r3
 8019e18:	b2da      	uxtb	r2, r3
 8019e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1c:	701a      	strb	r2, [r3, #0]
      i++;
 8019e1e:	6a3b      	ldr	r3, [r7, #32]
 8019e20:	3301      	adds	r3, #1
 8019e22:	623b      	str	r3, [r7, #32]
      pDest++;
 8019e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e26:	3301      	adds	r3, #1
 8019e28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8019e2a:	8bfb      	ldrh	r3, [r7, #30]
 8019e2c:	3b01      	subs	r3, #1
 8019e2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8019e30:	8bfb      	ldrh	r3, [r7, #30]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d1ea      	bne.n	8019e0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8019e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	372c      	adds	r7, #44	; 0x2c
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr

08019e44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019e44:	b480      	push	{r7}
 8019e46:	b085      	sub	sp, #20
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
 8019e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	785b      	ldrb	r3, [r3, #1]
 8019e5c:	2b01      	cmp	r3, #1
 8019e5e:	d12c      	bne.n	8019eba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	015a      	lsls	r2, r3, #5
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	4413      	add	r3, r2
 8019e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	db12      	blt.n	8019e98 <USB_EPSetStall+0x54>
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d00f      	beq.n	8019e98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	015a      	lsls	r2, r3, #5
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	4413      	add	r3, r2
 8019e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	68ba      	ldr	r2, [r7, #8]
 8019e88:	0151      	lsls	r1, r2, #5
 8019e8a:	68fa      	ldr	r2, [r7, #12]
 8019e8c:	440a      	add	r2, r1
 8019e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019e96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	015a      	lsls	r2, r3, #5
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	4413      	add	r3, r2
 8019ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	68ba      	ldr	r2, [r7, #8]
 8019ea8:	0151      	lsls	r1, r2, #5
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	440a      	add	r2, r1
 8019eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019eb6:	6013      	str	r3, [r2, #0]
 8019eb8:	e02b      	b.n	8019f12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	015a      	lsls	r2, r3, #5
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	4413      	add	r3, r2
 8019ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	db12      	blt.n	8019ef2 <USB_EPSetStall+0xae>
 8019ecc:	68bb      	ldr	r3, [r7, #8]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d00f      	beq.n	8019ef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	015a      	lsls	r2, r3, #5
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	4413      	add	r3, r2
 8019eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	68ba      	ldr	r2, [r7, #8]
 8019ee2:	0151      	lsls	r1, r2, #5
 8019ee4:	68fa      	ldr	r2, [r7, #12]
 8019ee6:	440a      	add	r2, r1
 8019ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8019ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	015a      	lsls	r2, r3, #5
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	4413      	add	r3, r2
 8019efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	68ba      	ldr	r2, [r7, #8]
 8019f02:	0151      	lsls	r1, r2, #5
 8019f04:	68fa      	ldr	r2, [r7, #12]
 8019f06:	440a      	add	r2, r1
 8019f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8019f12:	2300      	movs	r3, #0
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3714      	adds	r7, #20
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1e:	4770      	bx	lr

08019f20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8019f20:	b480      	push	{r7}
 8019f22:	b085      	sub	sp, #20
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	781b      	ldrb	r3, [r3, #0]
 8019f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	785b      	ldrb	r3, [r3, #1]
 8019f38:	2b01      	cmp	r3, #1
 8019f3a:	d128      	bne.n	8019f8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	015a      	lsls	r2, r3, #5
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	4413      	add	r3, r2
 8019f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	68ba      	ldr	r2, [r7, #8]
 8019f4c:	0151      	lsls	r1, r2, #5
 8019f4e:	68fa      	ldr	r2, [r7, #12]
 8019f50:	440a      	add	r2, r1
 8019f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019f5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	791b      	ldrb	r3, [r3, #4]
 8019f60:	2b03      	cmp	r3, #3
 8019f62:	d003      	beq.n	8019f6c <USB_EPClearStall+0x4c>
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	791b      	ldrb	r3, [r3, #4]
 8019f68:	2b02      	cmp	r3, #2
 8019f6a:	d138      	bne.n	8019fde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019f6c:	68bb      	ldr	r3, [r7, #8]
 8019f6e:	015a      	lsls	r2, r3, #5
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	4413      	add	r3, r2
 8019f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	68ba      	ldr	r2, [r7, #8]
 8019f7c:	0151      	lsls	r1, r2, #5
 8019f7e:	68fa      	ldr	r2, [r7, #12]
 8019f80:	440a      	add	r2, r1
 8019f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8019f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019f8a:	6013      	str	r3, [r2, #0]
 8019f8c:	e027      	b.n	8019fde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	015a      	lsls	r2, r3, #5
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	4413      	add	r3, r2
 8019f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	68ba      	ldr	r2, [r7, #8]
 8019f9e:	0151      	lsls	r1, r2, #5
 8019fa0:	68fa      	ldr	r2, [r7, #12]
 8019fa2:	440a      	add	r2, r1
 8019fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019fac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	791b      	ldrb	r3, [r3, #4]
 8019fb2:	2b03      	cmp	r3, #3
 8019fb4:	d003      	beq.n	8019fbe <USB_EPClearStall+0x9e>
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	791b      	ldrb	r3, [r3, #4]
 8019fba:	2b02      	cmp	r3, #2
 8019fbc:	d10f      	bne.n	8019fde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8019fbe:	68bb      	ldr	r3, [r7, #8]
 8019fc0:	015a      	lsls	r2, r3, #5
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	4413      	add	r3, r2
 8019fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	68ba      	ldr	r2, [r7, #8]
 8019fce:	0151      	lsls	r1, r2, #5
 8019fd0:	68fa      	ldr	r2, [r7, #12]
 8019fd2:	440a      	add	r2, r1
 8019fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8019fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019fdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8019fde:	2300      	movs	r3, #0
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3714      	adds	r7, #20
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fea:	4770      	bx	lr

08019fec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8019fec:	b480      	push	{r7}
 8019fee:	b085      	sub	sp, #20
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	68fa      	ldr	r2, [r7, #12]
 801a006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a00a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a00e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a016:	681a      	ldr	r2, [r3, #0]
 801a018:	78fb      	ldrb	r3, [r7, #3]
 801a01a:	011b      	lsls	r3, r3, #4
 801a01c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801a020:	68f9      	ldr	r1, [r7, #12]
 801a022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a026:	4313      	orrs	r3, r2
 801a028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801a02a:	2300      	movs	r3, #0
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	3714      	adds	r7, #20
 801a030:	46bd      	mov	sp, r7
 801a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a036:	4770      	bx	lr

0801a038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a038:	b480      	push	{r7}
 801a03a:	b085      	sub	sp, #20
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	68fa      	ldr	r2, [r7, #12]
 801a04e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a052:	f023 0303 	bic.w	r3, r3, #3
 801a056:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a05e:	685b      	ldr	r3, [r3, #4]
 801a060:	68fa      	ldr	r2, [r7, #12]
 801a062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a066:	f023 0302 	bic.w	r3, r3, #2
 801a06a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a06c:	2300      	movs	r3, #0
}
 801a06e:	4618      	mov	r0, r3
 801a070:	3714      	adds	r7, #20
 801a072:	46bd      	mov	sp, r7
 801a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a078:	4770      	bx	lr

0801a07a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a07a:	b480      	push	{r7}
 801a07c:	b085      	sub	sp, #20
 801a07e:	af00      	add	r7, sp, #0
 801a080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	68fa      	ldr	r2, [r7, #12]
 801a090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a094:	f023 0303 	bic.w	r3, r3, #3
 801a098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	68fa      	ldr	r2, [r7, #12]
 801a0a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a0a8:	f043 0302 	orr.w	r3, r3, #2
 801a0ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a0ae:	2300      	movs	r3, #0
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3714      	adds	r7, #20
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801a0bc:	b480      	push	{r7}
 801a0be:	b085      	sub	sp, #20
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	695b      	ldr	r3, [r3, #20]
 801a0c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	699b      	ldr	r3, [r3, #24]
 801a0ce:	68fa      	ldr	r2, [r7, #12]
 801a0d0:	4013      	ands	r3, r2
 801a0d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3714      	adds	r7, #20
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e0:	4770      	bx	lr

0801a0e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a0e2:	b480      	push	{r7}
 801a0e4:	b085      	sub	sp, #20
 801a0e6:	af00      	add	r7, sp, #0
 801a0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0f4:	699b      	ldr	r3, [r3, #24]
 801a0f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0fe:	69db      	ldr	r3, [r3, #28]
 801a100:	68ba      	ldr	r2, [r7, #8]
 801a102:	4013      	ands	r3, r2
 801a104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801a106:	68bb      	ldr	r3, [r7, #8]
 801a108:	0c1b      	lsrs	r3, r3, #16
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3714      	adds	r7, #20
 801a10e:	46bd      	mov	sp, r7
 801a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a114:	4770      	bx	lr

0801a116 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801a116:	b480      	push	{r7}
 801a118:	b085      	sub	sp, #20
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a128:	699b      	ldr	r3, [r3, #24]
 801a12a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a132:	69db      	ldr	r3, [r3, #28]
 801a134:	68ba      	ldr	r2, [r7, #8]
 801a136:	4013      	ands	r3, r2
 801a138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801a13a:	68bb      	ldr	r3, [r7, #8]
 801a13c:	b29b      	uxth	r3, r3
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3714      	adds	r7, #20
 801a142:	46bd      	mov	sp, r7
 801a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a148:	4770      	bx	lr

0801a14a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a14a:	b480      	push	{r7}
 801a14c:	b085      	sub	sp, #20
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
 801a152:	460b      	mov	r3, r1
 801a154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801a15a:	78fb      	ldrb	r3, [r7, #3]
 801a15c:	015a      	lsls	r2, r3, #5
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	4413      	add	r3, r2
 801a162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a166:	689b      	ldr	r3, [r3, #8]
 801a168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a170:	695b      	ldr	r3, [r3, #20]
 801a172:	68ba      	ldr	r2, [r7, #8]
 801a174:	4013      	ands	r3, r2
 801a176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a178:	68bb      	ldr	r3, [r7, #8]
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	3714      	adds	r7, #20
 801a17e:	46bd      	mov	sp, r7
 801a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a184:	4770      	bx	lr

0801a186 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801a186:	b480      	push	{r7}
 801a188:	b087      	sub	sp, #28
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	6078      	str	r0, [r7, #4]
 801a18e:	460b      	mov	r3, r1
 801a190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801a196:	697b      	ldr	r3, [r7, #20]
 801a198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a19c:	691b      	ldr	r3, [r3, #16]
 801a19e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801a1a0:	697b      	ldr	r3, [r7, #20]
 801a1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801a1aa:	78fb      	ldrb	r3, [r7, #3]
 801a1ac:	f003 030f 	and.w	r3, r3, #15
 801a1b0:	68fa      	ldr	r2, [r7, #12]
 801a1b2:	fa22 f303 	lsr.w	r3, r2, r3
 801a1b6:	01db      	lsls	r3, r3, #7
 801a1b8:	b2db      	uxtb	r3, r3
 801a1ba:	693a      	ldr	r2, [r7, #16]
 801a1bc:	4313      	orrs	r3, r2
 801a1be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801a1c0:	78fb      	ldrb	r3, [r7, #3]
 801a1c2:	015a      	lsls	r2, r3, #5
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	4413      	add	r3, r2
 801a1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a1cc:	689b      	ldr	r3, [r3, #8]
 801a1ce:	693a      	ldr	r2, [r7, #16]
 801a1d0:	4013      	ands	r3, r2
 801a1d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801a1d4:	68bb      	ldr	r3, [r7, #8]
}
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	371c      	adds	r7, #28
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e0:	4770      	bx	lr

0801a1e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801a1e2:	b480      	push	{r7}
 801a1e4:	b083      	sub	sp, #12
 801a1e6:	af00      	add	r7, sp, #0
 801a1e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	695b      	ldr	r3, [r3, #20]
 801a1ee:	f003 0301 	and.w	r3, r3, #1
}
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	370c      	adds	r7, #12
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fc:	4770      	bx	lr
	...

0801a200 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801a200:	b480      	push	{r7}
 801a202:	b085      	sub	sp, #20
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a21a:	4619      	mov	r1, r3
 801a21c:	4b09      	ldr	r3, [pc, #36]	; (801a244 <USB_ActivateSetup+0x44>)
 801a21e:	4013      	ands	r3, r2
 801a220:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a228:	685b      	ldr	r3, [r3, #4]
 801a22a:	68fa      	ldr	r2, [r7, #12]
 801a22c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801a236:	2300      	movs	r3, #0
}
 801a238:	4618      	mov	r0, r3
 801a23a:	3714      	adds	r7, #20
 801a23c:	46bd      	mov	sp, r7
 801a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a242:	4770      	bx	lr
 801a244:	fffff800 	.word	0xfffff800

0801a248 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801a248:	b480      	push	{r7}
 801a24a:	b087      	sub	sp, #28
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	60f8      	str	r0, [r7, #12]
 801a250:	460b      	mov	r3, r1
 801a252:	607a      	str	r2, [r7, #4]
 801a254:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	333c      	adds	r3, #60	; 0x3c
 801a25e:	3304      	adds	r3, #4
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	4a26      	ldr	r2, [pc, #152]	; (801a300 <USB_EP0_OutStart+0xb8>)
 801a268:	4293      	cmp	r3, r2
 801a26a:	d90a      	bls.n	801a282 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a26c:	697b      	ldr	r3, [r7, #20]
 801a26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a27c:	d101      	bne.n	801a282 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801a27e:	2300      	movs	r3, #0
 801a280:	e037      	b.n	801a2f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801a282:	697b      	ldr	r3, [r7, #20]
 801a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a288:	461a      	mov	r2, r3
 801a28a:	2300      	movs	r3, #0
 801a28c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801a28e:	697b      	ldr	r3, [r7, #20]
 801a290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a294:	691b      	ldr	r3, [r3, #16]
 801a296:	697a      	ldr	r2, [r7, #20]
 801a298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a29c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801a2a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801a2a2:	697b      	ldr	r3, [r7, #20]
 801a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2a8:	691b      	ldr	r3, [r3, #16]
 801a2aa:	697a      	ldr	r2, [r7, #20]
 801a2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2b0:	f043 0318 	orr.w	r3, r3, #24
 801a2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801a2b6:	697b      	ldr	r3, [r7, #20]
 801a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2bc:	691b      	ldr	r3, [r3, #16]
 801a2be:	697a      	ldr	r2, [r7, #20]
 801a2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801a2c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801a2ca:	7afb      	ldrb	r3, [r7, #11]
 801a2cc:	2b01      	cmp	r3, #1
 801a2ce:	d10f      	bne.n	801a2f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801a2d0:	697b      	ldr	r3, [r7, #20]
 801a2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2d6:	461a      	mov	r2, r3
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801a2dc:	697b      	ldr	r3, [r7, #20]
 801a2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	697a      	ldr	r2, [r7, #20]
 801a2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a2ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801a2ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801a2f0:	2300      	movs	r3, #0
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	371c      	adds	r7, #28
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fc:	4770      	bx	lr
 801a2fe:	bf00      	nop
 801a300:	4f54300a 	.word	0x4f54300a

0801a304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a304:	b480      	push	{r7}
 801a306:	b085      	sub	sp, #20
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a30c:	2300      	movs	r3, #0
 801a30e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	3301      	adds	r3, #1
 801a314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	4a13      	ldr	r2, [pc, #76]	; (801a368 <USB_CoreReset+0x64>)
 801a31a:	4293      	cmp	r3, r2
 801a31c:	d901      	bls.n	801a322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801a31e:	2303      	movs	r3, #3
 801a320:	e01b      	b.n	801a35a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	691b      	ldr	r3, [r3, #16]
 801a326:	2b00      	cmp	r3, #0
 801a328:	daf2      	bge.n	801a310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a32a:	2300      	movs	r3, #0
 801a32c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	691b      	ldr	r3, [r3, #16]
 801a332:	f043 0201 	orr.w	r2, r3, #1
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	3301      	adds	r3, #1
 801a33e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	4a09      	ldr	r2, [pc, #36]	; (801a368 <USB_CoreReset+0x64>)
 801a344:	4293      	cmp	r3, r2
 801a346:	d901      	bls.n	801a34c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801a348:	2303      	movs	r3, #3
 801a34a:	e006      	b.n	801a35a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	691b      	ldr	r3, [r3, #16]
 801a350:	f003 0301 	and.w	r3, r3, #1
 801a354:	2b01      	cmp	r3, #1
 801a356:	d0f0      	beq.n	801a33a <USB_CoreReset+0x36>

  return HAL_OK;
 801a358:	2300      	movs	r3, #0
}
 801a35a:	4618      	mov	r0, r3
 801a35c:	3714      	adds	r7, #20
 801a35e:	46bd      	mov	sp, r7
 801a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a364:	4770      	bx	lr
 801a366:	bf00      	nop
 801a368:	00030d40 	.word	0x00030d40

0801a36c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b084      	sub	sp, #16
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
 801a374:	460b      	mov	r3, r1
 801a376:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a378:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801a37c:	f002 fc54 	bl	801cc28 <USBD_static_malloc>
 801a380:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d109      	bne.n	801a39c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	32b0      	adds	r2, #176	; 0xb0
 801a392:	2100      	movs	r1, #0
 801a394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801a398:	2302      	movs	r3, #2
 801a39a:	e0d4      	b.n	801a546 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801a39c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801a3a0:	2100      	movs	r1, #0
 801a3a2:	68f8      	ldr	r0, [r7, #12]
 801a3a4:	f002 fd42 	bl	801ce2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	32b0      	adds	r2, #176	; 0xb0
 801a3b2:	68f9      	ldr	r1, [r7, #12]
 801a3b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	32b0      	adds	r2, #176	; 0xb0
 801a3c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	7c1b      	ldrb	r3, [r3, #16]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d138      	bne.n	801a446 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a3d4:	4b5e      	ldr	r3, [pc, #376]	; (801a550 <USBD_CDC_Init+0x1e4>)
 801a3d6:	7819      	ldrb	r1, [r3, #0]
 801a3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a3dc:	2202      	movs	r2, #2
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f002 faff 	bl	801c9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a3e4:	4b5a      	ldr	r3, [pc, #360]	; (801a550 <USBD_CDC_Init+0x1e4>)
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	f003 020f 	and.w	r2, r3, #15
 801a3ec:	6879      	ldr	r1, [r7, #4]
 801a3ee:	4613      	mov	r3, r2
 801a3f0:	009b      	lsls	r3, r3, #2
 801a3f2:	4413      	add	r3, r2
 801a3f4:	009b      	lsls	r3, r3, #2
 801a3f6:	440b      	add	r3, r1
 801a3f8:	3324      	adds	r3, #36	; 0x24
 801a3fa:	2201      	movs	r2, #1
 801a3fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a3fe:	4b55      	ldr	r3, [pc, #340]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a400:	7819      	ldrb	r1, [r3, #0]
 801a402:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a406:	2202      	movs	r2, #2
 801a408:	6878      	ldr	r0, [r7, #4]
 801a40a:	f002 faea 	bl	801c9e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a40e:	4b51      	ldr	r3, [pc, #324]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	f003 020f 	and.w	r2, r3, #15
 801a416:	6879      	ldr	r1, [r7, #4]
 801a418:	4613      	mov	r3, r2
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	4413      	add	r3, r2
 801a41e:	009b      	lsls	r3, r3, #2
 801a420:	440b      	add	r3, r1
 801a422:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a426:	2201      	movs	r2, #1
 801a428:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801a42a:	4b4b      	ldr	r3, [pc, #300]	; (801a558 <USBD_CDC_Init+0x1ec>)
 801a42c:	781b      	ldrb	r3, [r3, #0]
 801a42e:	f003 020f 	and.w	r2, r3, #15
 801a432:	6879      	ldr	r1, [r7, #4]
 801a434:	4613      	mov	r3, r2
 801a436:	009b      	lsls	r3, r3, #2
 801a438:	4413      	add	r3, r2
 801a43a:	009b      	lsls	r3, r3, #2
 801a43c:	440b      	add	r3, r1
 801a43e:	3326      	adds	r3, #38	; 0x26
 801a440:	2210      	movs	r2, #16
 801a442:	801a      	strh	r2, [r3, #0]
 801a444:	e035      	b.n	801a4b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801a446:	4b42      	ldr	r3, [pc, #264]	; (801a550 <USBD_CDC_Init+0x1e4>)
 801a448:	7819      	ldrb	r1, [r3, #0]
 801a44a:	2340      	movs	r3, #64	; 0x40
 801a44c:	2202      	movs	r2, #2
 801a44e:	6878      	ldr	r0, [r7, #4]
 801a450:	f002 fac7 	bl	801c9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801a454:	4b3e      	ldr	r3, [pc, #248]	; (801a550 <USBD_CDC_Init+0x1e4>)
 801a456:	781b      	ldrb	r3, [r3, #0]
 801a458:	f003 020f 	and.w	r2, r3, #15
 801a45c:	6879      	ldr	r1, [r7, #4]
 801a45e:	4613      	mov	r3, r2
 801a460:	009b      	lsls	r3, r3, #2
 801a462:	4413      	add	r3, r2
 801a464:	009b      	lsls	r3, r3, #2
 801a466:	440b      	add	r3, r1
 801a468:	3324      	adds	r3, #36	; 0x24
 801a46a:	2201      	movs	r2, #1
 801a46c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801a46e:	4b39      	ldr	r3, [pc, #228]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a470:	7819      	ldrb	r1, [r3, #0]
 801a472:	2340      	movs	r3, #64	; 0x40
 801a474:	2202      	movs	r2, #2
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f002 fab3 	bl	801c9e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801a47c:	4b35      	ldr	r3, [pc, #212]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	f003 020f 	and.w	r2, r3, #15
 801a484:	6879      	ldr	r1, [r7, #4]
 801a486:	4613      	mov	r3, r2
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	4413      	add	r3, r2
 801a48c:	009b      	lsls	r3, r3, #2
 801a48e:	440b      	add	r3, r1
 801a490:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a494:	2201      	movs	r2, #1
 801a496:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801a498:	4b2f      	ldr	r3, [pc, #188]	; (801a558 <USBD_CDC_Init+0x1ec>)
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	f003 020f 	and.w	r2, r3, #15
 801a4a0:	6879      	ldr	r1, [r7, #4]
 801a4a2:	4613      	mov	r3, r2
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	4413      	add	r3, r2
 801a4a8:	009b      	lsls	r3, r3, #2
 801a4aa:	440b      	add	r3, r1
 801a4ac:	3326      	adds	r3, #38	; 0x26
 801a4ae:	2210      	movs	r2, #16
 801a4b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a4b2:	4b29      	ldr	r3, [pc, #164]	; (801a558 <USBD_CDC_Init+0x1ec>)
 801a4b4:	7819      	ldrb	r1, [r3, #0]
 801a4b6:	2308      	movs	r3, #8
 801a4b8:	2203      	movs	r2, #3
 801a4ba:	6878      	ldr	r0, [r7, #4]
 801a4bc:	f002 fa91 	bl	801c9e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801a4c0:	4b25      	ldr	r3, [pc, #148]	; (801a558 <USBD_CDC_Init+0x1ec>)
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	f003 020f 	and.w	r2, r3, #15
 801a4c8:	6879      	ldr	r1, [r7, #4]
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	4413      	add	r3, r2
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	440b      	add	r3, r1
 801a4d4:	3324      	adds	r3, #36	; 0x24
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	2200      	movs	r2, #0
 801a4de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a4e8:	687a      	ldr	r2, [r7, #4]
 801a4ea:	33b0      	adds	r3, #176	; 0xb0
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	4413      	add	r3, r2
 801a4f0:	685b      	ldr	r3, [r3, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	2200      	movs	r2, #0
 801a502:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d101      	bne.n	801a514 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801a510:	2302      	movs	r3, #2
 801a512:	e018      	b.n	801a546 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	7c1b      	ldrb	r3, [r3, #16]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d10a      	bne.n	801a532 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a51c:	4b0d      	ldr	r3, [pc, #52]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a51e:	7819      	ldrb	r1, [r3, #0]
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a526:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a52a:	6878      	ldr	r0, [r7, #4]
 801a52c:	f002 fb48 	bl	801cbc0 <USBD_LL_PrepareReceive>
 801a530:	e008      	b.n	801a544 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801a532:	4b08      	ldr	r3, [pc, #32]	; (801a554 <USBD_CDC_Init+0x1e8>)
 801a534:	7819      	ldrb	r1, [r3, #0]
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a53c:	2340      	movs	r3, #64	; 0x40
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f002 fb3e 	bl	801cbc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801a544:	2300      	movs	r3, #0
}
 801a546:	4618      	mov	r0, r3
 801a548:	3710      	adds	r7, #16
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	24000097 	.word	0x24000097
 801a554:	24000098 	.word	0x24000098
 801a558:	24000099 	.word	0x24000099

0801a55c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b082      	sub	sp, #8
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
 801a564:	460b      	mov	r3, r1
 801a566:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801a568:	4b3a      	ldr	r3, [pc, #232]	; (801a654 <USBD_CDC_DeInit+0xf8>)
 801a56a:	781b      	ldrb	r3, [r3, #0]
 801a56c:	4619      	mov	r1, r3
 801a56e:	6878      	ldr	r0, [r7, #4]
 801a570:	f002 fa5d 	bl	801ca2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801a574:	4b37      	ldr	r3, [pc, #220]	; (801a654 <USBD_CDC_DeInit+0xf8>)
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	f003 020f 	and.w	r2, r3, #15
 801a57c:	6879      	ldr	r1, [r7, #4]
 801a57e:	4613      	mov	r3, r2
 801a580:	009b      	lsls	r3, r3, #2
 801a582:	4413      	add	r3, r2
 801a584:	009b      	lsls	r3, r3, #2
 801a586:	440b      	add	r3, r1
 801a588:	3324      	adds	r3, #36	; 0x24
 801a58a:	2200      	movs	r2, #0
 801a58c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801a58e:	4b32      	ldr	r3, [pc, #200]	; (801a658 <USBD_CDC_DeInit+0xfc>)
 801a590:	781b      	ldrb	r3, [r3, #0]
 801a592:	4619      	mov	r1, r3
 801a594:	6878      	ldr	r0, [r7, #4]
 801a596:	f002 fa4a 	bl	801ca2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801a59a:	4b2f      	ldr	r3, [pc, #188]	; (801a658 <USBD_CDC_DeInit+0xfc>)
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	f003 020f 	and.w	r2, r3, #15
 801a5a2:	6879      	ldr	r1, [r7, #4]
 801a5a4:	4613      	mov	r3, r2
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	4413      	add	r3, r2
 801a5aa:	009b      	lsls	r3, r3, #2
 801a5ac:	440b      	add	r3, r1
 801a5ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801a5b6:	4b29      	ldr	r3, [pc, #164]	; (801a65c <USBD_CDC_DeInit+0x100>)
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	6878      	ldr	r0, [r7, #4]
 801a5be:	f002 fa36 	bl	801ca2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801a5c2:	4b26      	ldr	r3, [pc, #152]	; (801a65c <USBD_CDC_DeInit+0x100>)
 801a5c4:	781b      	ldrb	r3, [r3, #0]
 801a5c6:	f003 020f 	and.w	r2, r3, #15
 801a5ca:	6879      	ldr	r1, [r7, #4]
 801a5cc:	4613      	mov	r3, r2
 801a5ce:	009b      	lsls	r3, r3, #2
 801a5d0:	4413      	add	r3, r2
 801a5d2:	009b      	lsls	r3, r3, #2
 801a5d4:	440b      	add	r3, r1
 801a5d6:	3324      	adds	r3, #36	; 0x24
 801a5d8:	2200      	movs	r2, #0
 801a5da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801a5dc:	4b1f      	ldr	r3, [pc, #124]	; (801a65c <USBD_CDC_DeInit+0x100>)
 801a5de:	781b      	ldrb	r3, [r3, #0]
 801a5e0:	f003 020f 	and.w	r2, r3, #15
 801a5e4:	6879      	ldr	r1, [r7, #4]
 801a5e6:	4613      	mov	r3, r2
 801a5e8:	009b      	lsls	r3, r3, #2
 801a5ea:	4413      	add	r3, r2
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	440b      	add	r3, r1
 801a5f0:	3326      	adds	r3, #38	; 0x26
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	32b0      	adds	r2, #176	; 0xb0
 801a600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d01f      	beq.n	801a648 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a60e:	687a      	ldr	r2, [r7, #4]
 801a610:	33b0      	adds	r3, #176	; 0xb0
 801a612:	009b      	lsls	r3, r3, #2
 801a614:	4413      	add	r3, r2
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	685b      	ldr	r3, [r3, #4]
 801a61a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	32b0      	adds	r2, #176	; 0xb0
 801a626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a62a:	4618      	mov	r0, r3
 801a62c:	f002 fb0a 	bl	801cc44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	32b0      	adds	r2, #176	; 0xb0
 801a63a:	2100      	movs	r1, #0
 801a63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	2200      	movs	r2, #0
 801a644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801a648:	2300      	movs	r3, #0
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3708      	adds	r7, #8
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	24000097 	.word	0x24000097
 801a658:	24000098 	.word	0x24000098
 801a65c:	24000099 	.word	0x24000099

0801a660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b086      	sub	sp, #24
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]
 801a668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	32b0      	adds	r2, #176	; 0xb0
 801a674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a678:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801a67a:	2300      	movs	r3, #0
 801a67c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801a67e:	2300      	movs	r3, #0
 801a680:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801a682:	2300      	movs	r3, #0
 801a684:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801a686:	693b      	ldr	r3, [r7, #16]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d101      	bne.n	801a690 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801a68c:	2303      	movs	r3, #3
 801a68e:	e0bf      	b.n	801a810 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a690:	683b      	ldr	r3, [r7, #0]
 801a692:	781b      	ldrb	r3, [r3, #0]
 801a694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d050      	beq.n	801a73e <USBD_CDC_Setup+0xde>
 801a69c:	2b20      	cmp	r3, #32
 801a69e:	f040 80af 	bne.w	801a800 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801a6a2:	683b      	ldr	r3, [r7, #0]
 801a6a4:	88db      	ldrh	r3, [r3, #6]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d03a      	beq.n	801a720 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	781b      	ldrb	r3, [r3, #0]
 801a6ae:	b25b      	sxtb	r3, r3
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	da1b      	bge.n	801a6ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a6ba:	687a      	ldr	r2, [r7, #4]
 801a6bc:	33b0      	adds	r3, #176	; 0xb0
 801a6be:	009b      	lsls	r3, r3, #2
 801a6c0:	4413      	add	r3, r2
 801a6c2:	685b      	ldr	r3, [r3, #4]
 801a6c4:	689b      	ldr	r3, [r3, #8]
 801a6c6:	683a      	ldr	r2, [r7, #0]
 801a6c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801a6ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a6cc:	683a      	ldr	r2, [r7, #0]
 801a6ce:	88d2      	ldrh	r2, [r2, #6]
 801a6d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	88db      	ldrh	r3, [r3, #6]
 801a6d6:	2b07      	cmp	r3, #7
 801a6d8:	bf28      	it	cs
 801a6da:	2307      	movcs	r3, #7
 801a6dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	89fa      	ldrh	r2, [r7, #14]
 801a6e2:	4619      	mov	r1, r3
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	f001 fd43 	bl	801c170 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801a6ea:	e090      	b.n	801a80e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	785a      	ldrb	r2, [r3, #1]
 801a6f0:	693b      	ldr	r3, [r7, #16]
 801a6f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	88db      	ldrh	r3, [r3, #6]
 801a6fa:	2b3f      	cmp	r3, #63	; 0x3f
 801a6fc:	d803      	bhi.n	801a706 <USBD_CDC_Setup+0xa6>
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	88db      	ldrh	r3, [r3, #6]
 801a702:	b2da      	uxtb	r2, r3
 801a704:	e000      	b.n	801a708 <USBD_CDC_Setup+0xa8>
 801a706:	2240      	movs	r2, #64	; 0x40
 801a708:	693b      	ldr	r3, [r7, #16]
 801a70a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801a70e:	6939      	ldr	r1, [r7, #16]
 801a710:	693b      	ldr	r3, [r7, #16]
 801a712:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801a716:	461a      	mov	r2, r3
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f001 fd55 	bl	801c1c8 <USBD_CtlPrepareRx>
      break;
 801a71e:	e076      	b.n	801a80e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a726:	687a      	ldr	r2, [r7, #4]
 801a728:	33b0      	adds	r3, #176	; 0xb0
 801a72a:	009b      	lsls	r3, r3, #2
 801a72c:	4413      	add	r3, r2
 801a72e:	685b      	ldr	r3, [r3, #4]
 801a730:	689b      	ldr	r3, [r3, #8]
 801a732:	683a      	ldr	r2, [r7, #0]
 801a734:	7850      	ldrb	r0, [r2, #1]
 801a736:	2200      	movs	r2, #0
 801a738:	6839      	ldr	r1, [r7, #0]
 801a73a:	4798      	blx	r3
      break;
 801a73c:	e067      	b.n	801a80e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	785b      	ldrb	r3, [r3, #1]
 801a742:	2b0b      	cmp	r3, #11
 801a744:	d851      	bhi.n	801a7ea <USBD_CDC_Setup+0x18a>
 801a746:	a201      	add	r2, pc, #4	; (adr r2, 801a74c <USBD_CDC_Setup+0xec>)
 801a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a74c:	0801a77d 	.word	0x0801a77d
 801a750:	0801a7f9 	.word	0x0801a7f9
 801a754:	0801a7eb 	.word	0x0801a7eb
 801a758:	0801a7eb 	.word	0x0801a7eb
 801a75c:	0801a7eb 	.word	0x0801a7eb
 801a760:	0801a7eb 	.word	0x0801a7eb
 801a764:	0801a7eb 	.word	0x0801a7eb
 801a768:	0801a7eb 	.word	0x0801a7eb
 801a76c:	0801a7eb 	.word	0x0801a7eb
 801a770:	0801a7eb 	.word	0x0801a7eb
 801a774:	0801a7a7 	.word	0x0801a7a7
 801a778:	0801a7d1 	.word	0x0801a7d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a782:	b2db      	uxtb	r3, r3
 801a784:	2b03      	cmp	r3, #3
 801a786:	d107      	bne.n	801a798 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801a788:	f107 030a 	add.w	r3, r7, #10
 801a78c:	2202      	movs	r2, #2
 801a78e:	4619      	mov	r1, r3
 801a790:	6878      	ldr	r0, [r7, #4]
 801a792:	f001 fced 	bl	801c170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a796:	e032      	b.n	801a7fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a798:	6839      	ldr	r1, [r7, #0]
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f001 fc77 	bl	801c08e <USBD_CtlError>
            ret = USBD_FAIL;
 801a7a0:	2303      	movs	r3, #3
 801a7a2:	75fb      	strb	r3, [r7, #23]
          break;
 801a7a4:	e02b      	b.n	801a7fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7ac:	b2db      	uxtb	r3, r3
 801a7ae:	2b03      	cmp	r3, #3
 801a7b0:	d107      	bne.n	801a7c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801a7b2:	f107 030d 	add.w	r3, r7, #13
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f001 fcd8 	bl	801c170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a7c0:	e01d      	b.n	801a7fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801a7c2:	6839      	ldr	r1, [r7, #0]
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f001 fc62 	bl	801c08e <USBD_CtlError>
            ret = USBD_FAIL;
 801a7ca:	2303      	movs	r3, #3
 801a7cc:	75fb      	strb	r3, [r7, #23]
          break;
 801a7ce:	e016      	b.n	801a7fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7d6:	b2db      	uxtb	r3, r3
 801a7d8:	2b03      	cmp	r3, #3
 801a7da:	d00f      	beq.n	801a7fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801a7dc:	6839      	ldr	r1, [r7, #0]
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f001 fc55 	bl	801c08e <USBD_CtlError>
            ret = USBD_FAIL;
 801a7e4:	2303      	movs	r3, #3
 801a7e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801a7e8:	e008      	b.n	801a7fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801a7ea:	6839      	ldr	r1, [r7, #0]
 801a7ec:	6878      	ldr	r0, [r7, #4]
 801a7ee:	f001 fc4e 	bl	801c08e <USBD_CtlError>
          ret = USBD_FAIL;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	75fb      	strb	r3, [r7, #23]
          break;
 801a7f6:	e002      	b.n	801a7fe <USBD_CDC_Setup+0x19e>
          break;
 801a7f8:	bf00      	nop
 801a7fa:	e008      	b.n	801a80e <USBD_CDC_Setup+0x1ae>
          break;
 801a7fc:	bf00      	nop
      }
      break;
 801a7fe:	e006      	b.n	801a80e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801a800:	6839      	ldr	r1, [r7, #0]
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f001 fc43 	bl	801c08e <USBD_CtlError>
      ret = USBD_FAIL;
 801a808:	2303      	movs	r3, #3
 801a80a:	75fb      	strb	r3, [r7, #23]
      break;
 801a80c:	bf00      	nop
  }

  return (uint8_t)ret;
 801a80e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a810:	4618      	mov	r0, r3
 801a812:	3718      	adds	r7, #24
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}

0801a818 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b084      	sub	sp, #16
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	460b      	mov	r3, r1
 801a822:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a82a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	32b0      	adds	r2, #176	; 0xb0
 801a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d101      	bne.n	801a842 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801a83e:	2303      	movs	r3, #3
 801a840:	e065      	b.n	801a90e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	32b0      	adds	r2, #176	; 0xb0
 801a84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a850:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a852:	78fb      	ldrb	r3, [r7, #3]
 801a854:	f003 020f 	and.w	r2, r3, #15
 801a858:	6879      	ldr	r1, [r7, #4]
 801a85a:	4613      	mov	r3, r2
 801a85c:	009b      	lsls	r3, r3, #2
 801a85e:	4413      	add	r3, r2
 801a860:	009b      	lsls	r3, r3, #2
 801a862:	440b      	add	r3, r1
 801a864:	3318      	adds	r3, #24
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d02f      	beq.n	801a8cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801a86c:	78fb      	ldrb	r3, [r7, #3]
 801a86e:	f003 020f 	and.w	r2, r3, #15
 801a872:	6879      	ldr	r1, [r7, #4]
 801a874:	4613      	mov	r3, r2
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	4413      	add	r3, r2
 801a87a:	009b      	lsls	r3, r3, #2
 801a87c:	440b      	add	r3, r1
 801a87e:	3318      	adds	r3, #24
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	78fb      	ldrb	r3, [r7, #3]
 801a884:	f003 010f 	and.w	r1, r3, #15
 801a888:	68f8      	ldr	r0, [r7, #12]
 801a88a:	460b      	mov	r3, r1
 801a88c:	00db      	lsls	r3, r3, #3
 801a88e:	440b      	add	r3, r1
 801a890:	009b      	lsls	r3, r3, #2
 801a892:	4403      	add	r3, r0
 801a894:	3348      	adds	r3, #72	; 0x48
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	fbb2 f1f3 	udiv	r1, r2, r3
 801a89c:	fb01 f303 	mul.w	r3, r1, r3
 801a8a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d112      	bne.n	801a8cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801a8a6:	78fb      	ldrb	r3, [r7, #3]
 801a8a8:	f003 020f 	and.w	r2, r3, #15
 801a8ac:	6879      	ldr	r1, [r7, #4]
 801a8ae:	4613      	mov	r3, r2
 801a8b0:	009b      	lsls	r3, r3, #2
 801a8b2:	4413      	add	r3, r2
 801a8b4:	009b      	lsls	r3, r3, #2
 801a8b6:	440b      	add	r3, r1
 801a8b8:	3318      	adds	r3, #24
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a8be:	78f9      	ldrb	r1, [r7, #3]
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	6878      	ldr	r0, [r7, #4]
 801a8c6:	f002 f95a 	bl	801cb7e <USBD_LL_Transmit>
 801a8ca:	e01f      	b.n	801a90c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801a8cc:	68bb      	ldr	r3, [r7, #8]
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a8da:	687a      	ldr	r2, [r7, #4]
 801a8dc:	33b0      	adds	r3, #176	; 0xb0
 801a8de:	009b      	lsls	r3, r3, #2
 801a8e0:	4413      	add	r3, r2
 801a8e2:	685b      	ldr	r3, [r3, #4]
 801a8e4:	691b      	ldr	r3, [r3, #16]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d010      	beq.n	801a90c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a8f0:	687a      	ldr	r2, [r7, #4]
 801a8f2:	33b0      	adds	r3, #176	; 0xb0
 801a8f4:	009b      	lsls	r3, r3, #2
 801a8f6:	4413      	add	r3, r2
 801a8f8:	685b      	ldr	r3, [r3, #4]
 801a8fa:	691b      	ldr	r3, [r3, #16]
 801a8fc:	68ba      	ldr	r2, [r7, #8]
 801a8fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801a902:	68ba      	ldr	r2, [r7, #8]
 801a904:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801a908:	78fa      	ldrb	r2, [r7, #3]
 801a90a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801a90c:	2300      	movs	r3, #0
}
 801a90e:	4618      	mov	r0, r3
 801a910:	3710      	adds	r7, #16
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}

0801a916 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a916:	b580      	push	{r7, lr}
 801a918:	b084      	sub	sp, #16
 801a91a:	af00      	add	r7, sp, #0
 801a91c:	6078      	str	r0, [r7, #4]
 801a91e:	460b      	mov	r3, r1
 801a920:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	32b0      	adds	r2, #176	; 0xb0
 801a92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a930:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	32b0      	adds	r2, #176	; 0xb0
 801a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d101      	bne.n	801a948 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801a944:	2303      	movs	r3, #3
 801a946:	e01a      	b.n	801a97e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a948:	78fb      	ldrb	r3, [r7, #3]
 801a94a:	4619      	mov	r1, r3
 801a94c:	6878      	ldr	r0, [r7, #4]
 801a94e:	f002 f958 	bl	801cc02 <USBD_LL_GetRxDataSize>
 801a952:	4602      	mov	r2, r0
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a960:	687a      	ldr	r2, [r7, #4]
 801a962:	33b0      	adds	r3, #176	; 0xb0
 801a964:	009b      	lsls	r3, r3, #2
 801a966:	4413      	add	r3, r2
 801a968:	685b      	ldr	r3, [r3, #4]
 801a96a:	68db      	ldr	r3, [r3, #12]
 801a96c:	68fa      	ldr	r2, [r7, #12]
 801a96e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801a972:	68fa      	ldr	r2, [r7, #12]
 801a974:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801a978:	4611      	mov	r1, r2
 801a97a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	4618      	mov	r0, r3
 801a980:	3710      	adds	r7, #16
 801a982:	46bd      	mov	sp, r7
 801a984:	bd80      	pop	{r7, pc}

0801a986 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a986:	b580      	push	{r7, lr}
 801a988:	b084      	sub	sp, #16
 801a98a:	af00      	add	r7, sp, #0
 801a98c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	32b0      	adds	r2, #176	; 0xb0
 801a998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a99c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d101      	bne.n	801a9a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801a9a4:	2303      	movs	r3, #3
 801a9a6:	e025      	b.n	801a9f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	33b0      	adds	r3, #176	; 0xb0
 801a9b2:	009b      	lsls	r3, r3, #2
 801a9b4:	4413      	add	r3, r2
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d01a      	beq.n	801a9f2 <USBD_CDC_EP0_RxReady+0x6c>
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801a9c2:	2bff      	cmp	r3, #255	; 0xff
 801a9c4:	d015      	beq.n	801a9f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	33b0      	adds	r3, #176	; 0xb0
 801a9d0:	009b      	lsls	r3, r3, #2
 801a9d2:	4413      	add	r3, r2
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	689b      	ldr	r3, [r3, #8]
 801a9d8:	68fa      	ldr	r2, [r7, #12]
 801a9da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801a9de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801a9e0:	68fa      	ldr	r2, [r7, #12]
 801a9e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801a9e6:	b292      	uxth	r2, r2
 801a9e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	22ff      	movs	r2, #255	; 0xff
 801a9ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801a9f2:	2300      	movs	r3, #0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3710      	adds	r7, #16
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}

0801a9fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b086      	sub	sp, #24
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801aa04:	2182      	movs	r1, #130	; 0x82
 801aa06:	4818      	ldr	r0, [pc, #96]	; (801aa68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa08:	f000 fd09 	bl	801b41e <USBD_GetEpDesc>
 801aa0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aa0e:	2101      	movs	r1, #1
 801aa10:	4815      	ldr	r0, [pc, #84]	; (801aa68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa12:	f000 fd04 	bl	801b41e <USBD_GetEpDesc>
 801aa16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aa18:	2181      	movs	r1, #129	; 0x81
 801aa1a:	4813      	ldr	r0, [pc, #76]	; (801aa68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801aa1c:	f000 fcff 	bl	801b41e <USBD_GetEpDesc>
 801aa20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801aa22:	697b      	ldr	r3, [r7, #20]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d002      	beq.n	801aa2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801aa28:	697b      	ldr	r3, [r7, #20]
 801aa2a:	2210      	movs	r2, #16
 801aa2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801aa2e:	693b      	ldr	r3, [r7, #16]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d006      	beq.n	801aa42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	2200      	movs	r2, #0
 801aa38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa3c:	711a      	strb	r2, [r3, #4]
 801aa3e:	2200      	movs	r2, #0
 801aa40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d006      	beq.n	801aa56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aa50:	711a      	strb	r2, [r3, #4]
 801aa52:	2200      	movs	r2, #0
 801aa54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	2243      	movs	r2, #67	; 0x43
 801aa5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801aa5c:	4b02      	ldr	r3, [pc, #8]	; (801aa68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801aa5e:	4618      	mov	r0, r3
 801aa60:	3718      	adds	r7, #24
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	24000054 	.word	0x24000054

0801aa6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b086      	sub	sp, #24
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801aa74:	2182      	movs	r1, #130	; 0x82
 801aa76:	4818      	ldr	r0, [pc, #96]	; (801aad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aa78:	f000 fcd1 	bl	801b41e <USBD_GetEpDesc>
 801aa7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aa7e:	2101      	movs	r1, #1
 801aa80:	4815      	ldr	r0, [pc, #84]	; (801aad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aa82:	f000 fccc 	bl	801b41e <USBD_GetEpDesc>
 801aa86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aa88:	2181      	movs	r1, #129	; 0x81
 801aa8a:	4813      	ldr	r0, [pc, #76]	; (801aad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801aa8c:	f000 fcc7 	bl	801b41e <USBD_GetEpDesc>
 801aa90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801aa92:	697b      	ldr	r3, [r7, #20]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d002      	beq.n	801aa9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	2210      	movs	r2, #16
 801aa9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801aa9e:	693b      	ldr	r3, [r7, #16]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d006      	beq.n	801aab2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801aaa4:	693b      	ldr	r3, [r7, #16]
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	711a      	strb	r2, [r3, #4]
 801aaaa:	2200      	movs	r2, #0
 801aaac:	f042 0202 	orr.w	r2, r2, #2
 801aab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d006      	beq.n	801aac6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	2200      	movs	r2, #0
 801aabc:	711a      	strb	r2, [r3, #4]
 801aabe:	2200      	movs	r2, #0
 801aac0:	f042 0202 	orr.w	r2, r2, #2
 801aac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	2243      	movs	r2, #67	; 0x43
 801aaca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801aacc:	4b02      	ldr	r3, [pc, #8]	; (801aad8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801aace:	4618      	mov	r0, r3
 801aad0:	3718      	adds	r7, #24
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bd80      	pop	{r7, pc}
 801aad6:	bf00      	nop
 801aad8:	24000054 	.word	0x24000054

0801aadc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b086      	sub	sp, #24
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801aae4:	2182      	movs	r1, #130	; 0x82
 801aae6:	4818      	ldr	r0, [pc, #96]	; (801ab48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aae8:	f000 fc99 	bl	801b41e <USBD_GetEpDesc>
 801aaec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801aaee:	2101      	movs	r1, #1
 801aaf0:	4815      	ldr	r0, [pc, #84]	; (801ab48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aaf2:	f000 fc94 	bl	801b41e <USBD_GetEpDesc>
 801aaf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801aaf8:	2181      	movs	r1, #129	; 0x81
 801aafa:	4813      	ldr	r0, [pc, #76]	; (801ab48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801aafc:	f000 fc8f 	bl	801b41e <USBD_GetEpDesc>
 801ab00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d002      	beq.n	801ab0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ab08:	697b      	ldr	r3, [r7, #20]
 801ab0a:	2210      	movs	r2, #16
 801ab0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d006      	beq.n	801ab22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ab14:	693b      	ldr	r3, [r7, #16]
 801ab16:	2200      	movs	r2, #0
 801ab18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ab1c:	711a      	strb	r2, [r3, #4]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d006      	beq.n	801ab36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ab30:	711a      	strb	r2, [r3, #4]
 801ab32:	2200      	movs	r2, #0
 801ab34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	2243      	movs	r2, #67	; 0x43
 801ab3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ab3c:	4b02      	ldr	r3, [pc, #8]	; (801ab48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801ab3e:	4618      	mov	r0, r3
 801ab40:	3718      	adds	r7, #24
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	24000054 	.word	0x24000054

0801ab4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b083      	sub	sp, #12
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	220a      	movs	r2, #10
 801ab58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801ab5a:	4b03      	ldr	r3, [pc, #12]	; (801ab68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	370c      	adds	r7, #12
 801ab60:	46bd      	mov	sp, r7
 801ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab66:	4770      	bx	lr
 801ab68:	24000010 	.word	0x24000010

0801ab6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801ab6c:	b480      	push	{r7}
 801ab6e:	b083      	sub	sp, #12
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
 801ab74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d101      	bne.n	801ab80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801ab7c:	2303      	movs	r3, #3
 801ab7e:	e009      	b.n	801ab94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ab86:	687a      	ldr	r2, [r7, #4]
 801ab88:	33b0      	adds	r3, #176	; 0xb0
 801ab8a:	009b      	lsls	r3, r3, #2
 801ab8c:	4413      	add	r3, r2
 801ab8e:	683a      	ldr	r2, [r7, #0]
 801ab90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801ab92:	2300      	movs	r3, #0
}
 801ab94:	4618      	mov	r0, r3
 801ab96:	370c      	adds	r7, #12
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr

0801aba0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b087      	sub	sp, #28
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	60f8      	str	r0, [r7, #12]
 801aba8:	60b9      	str	r1, [r7, #8]
 801abaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	32b0      	adds	r2, #176	; 0xb0
 801abb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d101      	bne.n	801abc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801abc2:	2303      	movs	r3, #3
 801abc4:	e008      	b.n	801abd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	68ba      	ldr	r2, [r7, #8]
 801abca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801abce:	697b      	ldr	r3, [r7, #20]
 801abd0:	687a      	ldr	r2, [r7, #4]
 801abd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801abd6:	2300      	movs	r3, #0
}
 801abd8:	4618      	mov	r0, r3
 801abda:	371c      	adds	r7, #28
 801abdc:	46bd      	mov	sp, r7
 801abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe2:	4770      	bx	lr

0801abe4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801abe4:	b480      	push	{r7}
 801abe6:	b085      	sub	sp, #20
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	32b0      	adds	r2, #176	; 0xb0
 801abf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d101      	bne.n	801ac08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801ac04:	2303      	movs	r3, #3
 801ac06:	e004      	b.n	801ac12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	683a      	ldr	r2, [r7, #0]
 801ac0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801ac10:	2300      	movs	r3, #0
}
 801ac12:	4618      	mov	r0, r3
 801ac14:	3714      	adds	r7, #20
 801ac16:	46bd      	mov	sp, r7
 801ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1c:	4770      	bx	lr
	...

0801ac20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b084      	sub	sp, #16
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	32b0      	adds	r2, #176	; 0xb0
 801ac32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	32b0      	adds	r2, #176	; 0xb0
 801ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d101      	bne.n	801ac4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801ac4a:	2303      	movs	r3, #3
 801ac4c:	e018      	b.n	801ac80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	7c1b      	ldrb	r3, [r3, #16]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d10a      	bne.n	801ac6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ac56:	4b0c      	ldr	r3, [pc, #48]	; (801ac88 <USBD_CDC_ReceivePacket+0x68>)
 801ac58:	7819      	ldrb	r1, [r3, #0]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ac60:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ac64:	6878      	ldr	r0, [r7, #4]
 801ac66:	f001 ffab 	bl	801cbc0 <USBD_LL_PrepareReceive>
 801ac6a:	e008      	b.n	801ac7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ac6c:	4b06      	ldr	r3, [pc, #24]	; (801ac88 <USBD_CDC_ReceivePacket+0x68>)
 801ac6e:	7819      	ldrb	r1, [r3, #0]
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ac76:	2340      	movs	r3, #64	; 0x40
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f001 ffa1 	bl	801cbc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801ac7e:	2300      	movs	r3, #0
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3710      	adds	r7, #16
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}
 801ac88:	24000098 	.word	0x24000098

0801ac8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b086      	sub	sp, #24
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	60f8      	str	r0, [r7, #12]
 801ac94:	60b9      	str	r1, [r7, #8]
 801ac96:	4613      	mov	r3, r2
 801ac98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d101      	bne.n	801aca4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801aca0:	2303      	movs	r3, #3
 801aca2:	e01f      	b.n	801ace4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2200      	movs	r2, #0
 801aca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	2200      	movs	r2, #0
 801acb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	2200      	movs	r2, #0
 801acb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d003      	beq.n	801acca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	68ba      	ldr	r2, [r7, #8]
 801acc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	2201      	movs	r2, #1
 801acce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	79fa      	ldrb	r2, [r7, #7]
 801acd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801acd8:	68f8      	ldr	r0, [r7, #12]
 801acda:	f001 fe17 	bl	801c90c <USBD_LL_Init>
 801acde:	4603      	mov	r3, r0
 801ace0:	75fb      	strb	r3, [r7, #23]

  return ret;
 801ace2:	7dfb      	ldrb	r3, [r7, #23]
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	3718      	adds	r7, #24
 801ace8:	46bd      	mov	sp, r7
 801acea:	bd80      	pop	{r7, pc}

0801acec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b084      	sub	sp, #16
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
 801acf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801acf6:	2300      	movs	r3, #0
 801acf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d101      	bne.n	801ad04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801ad00:	2303      	movs	r3, #3
 801ad02:	e025      	b.n	801ad50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	683a      	ldr	r2, [r7, #0]
 801ad08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	32ae      	adds	r2, #174	; 0xae
 801ad16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d00f      	beq.n	801ad40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	32ae      	adds	r2, #174	; 0xae
 801ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad30:	f107 020e 	add.w	r2, r7, #14
 801ad34:	4610      	mov	r0, r2
 801ad36:	4798      	blx	r3
 801ad38:	4602      	mov	r2, r0
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801ad46:	1c5a      	adds	r2, r3, #1
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801ad4e:	2300      	movs	r3, #0
}
 801ad50:	4618      	mov	r0, r3
 801ad52:	3710      	adds	r7, #16
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd80      	pop	{r7, pc}

0801ad58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801ad60:	6878      	ldr	r0, [r7, #4]
 801ad62:	f001 fe23 	bl	801c9ac <USBD_LL_Start>
 801ad66:	4603      	mov	r3, r0
}
 801ad68:	4618      	mov	r0, r3
 801ad6a:	3708      	adds	r7, #8
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	bd80      	pop	{r7, pc}

0801ad70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801ad70:	b480      	push	{r7}
 801ad72:	b083      	sub	sp, #12
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ad78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	370c      	adds	r7, #12
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad84:	4770      	bx	lr

0801ad86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ad86:	b580      	push	{r7, lr}
 801ad88:	b084      	sub	sp, #16
 801ad8a:	af00      	add	r7, sp, #0
 801ad8c:	6078      	str	r0, [r7, #4]
 801ad8e:	460b      	mov	r3, r1
 801ad90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801ad92:	2300      	movs	r3, #0
 801ad94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d009      	beq.n	801adb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	78fa      	ldrb	r2, [r7, #3]
 801adaa:	4611      	mov	r1, r2
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	4798      	blx	r3
 801adb0:	4603      	mov	r3, r0
 801adb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3710      	adds	r7, #16
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}

0801adbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801adbe:	b580      	push	{r7, lr}
 801adc0:	b084      	sub	sp, #16
 801adc2:	af00      	add	r7, sp, #0
 801adc4:	6078      	str	r0, [r7, #4]
 801adc6:	460b      	mov	r3, r1
 801adc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801adca:	2300      	movs	r3, #0
 801adcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801add4:	685b      	ldr	r3, [r3, #4]
 801add6:	78fa      	ldrb	r2, [r7, #3]
 801add8:	4611      	mov	r1, r2
 801adda:	6878      	ldr	r0, [r7, #4]
 801addc:	4798      	blx	r3
 801adde:	4603      	mov	r3, r0
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d001      	beq.n	801ade8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801ade4:	2303      	movs	r3, #3
 801ade6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 801adea:	4618      	mov	r0, r3
 801adec:	3710      	adds	r7, #16
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}

0801adf2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801adf2:	b580      	push	{r7, lr}
 801adf4:	b084      	sub	sp, #16
 801adf6:	af00      	add	r7, sp, #0
 801adf8:	6078      	str	r0, [r7, #4]
 801adfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae02:	6839      	ldr	r1, [r7, #0]
 801ae04:	4618      	mov	r0, r3
 801ae06:	f001 f908 	bl	801c01a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	2201      	movs	r2, #1
 801ae0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801ae18:	461a      	mov	r2, r3
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ae26:	f003 031f 	and.w	r3, r3, #31
 801ae2a:	2b02      	cmp	r3, #2
 801ae2c:	d01a      	beq.n	801ae64 <USBD_LL_SetupStage+0x72>
 801ae2e:	2b02      	cmp	r3, #2
 801ae30:	d822      	bhi.n	801ae78 <USBD_LL_SetupStage+0x86>
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d002      	beq.n	801ae3c <USBD_LL_SetupStage+0x4a>
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	d00a      	beq.n	801ae50 <USBD_LL_SetupStage+0x5e>
 801ae3a:	e01d      	b.n	801ae78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae42:	4619      	mov	r1, r3
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f000 fb5f 	bl	801b508 <USBD_StdDevReq>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	73fb      	strb	r3, [r7, #15]
      break;
 801ae4e:	e020      	b.n	801ae92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae56:	4619      	mov	r1, r3
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f000 fbc7 	bl	801b5ec <USBD_StdItfReq>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	73fb      	strb	r3, [r7, #15]
      break;
 801ae62:	e016      	b.n	801ae92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801ae6a:	4619      	mov	r1, r3
 801ae6c:	6878      	ldr	r0, [r7, #4]
 801ae6e:	f000 fc29 	bl	801b6c4 <USBD_StdEPReq>
 801ae72:	4603      	mov	r3, r0
 801ae74:	73fb      	strb	r3, [r7, #15]
      break;
 801ae76:	e00c      	b.n	801ae92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801ae7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ae82:	b2db      	uxtb	r3, r3
 801ae84:	4619      	mov	r1, r3
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	f001 fdf0 	bl	801ca6c <USBD_LL_StallEP>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	73fb      	strb	r3, [r7, #15]
      break;
 801ae90:	bf00      	nop
  }

  return ret;
 801ae92:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3710      	adds	r7, #16
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd80      	pop	{r7, pc}

0801ae9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b086      	sub	sp, #24
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	60f8      	str	r0, [r7, #12]
 801aea4:	460b      	mov	r3, r1
 801aea6:	607a      	str	r2, [r7, #4]
 801aea8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801aeae:	7afb      	ldrb	r3, [r7, #11]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d16e      	bne.n	801af92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801aeba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801aec2:	2b03      	cmp	r3, #3
 801aec4:	f040 8098 	bne.w	801aff8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801aec8:	693b      	ldr	r3, [r7, #16]
 801aeca:	689a      	ldr	r2, [r3, #8]
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	68db      	ldr	r3, [r3, #12]
 801aed0:	429a      	cmp	r2, r3
 801aed2:	d913      	bls.n	801aefc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	689a      	ldr	r2, [r3, #8]
 801aed8:	693b      	ldr	r3, [r7, #16]
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	1ad2      	subs	r2, r2, r3
 801aede:	693b      	ldr	r3, [r7, #16]
 801aee0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	68da      	ldr	r2, [r3, #12]
 801aee6:	693b      	ldr	r3, [r7, #16]
 801aee8:	689b      	ldr	r3, [r3, #8]
 801aeea:	4293      	cmp	r3, r2
 801aeec:	bf28      	it	cs
 801aeee:	4613      	movcs	r3, r2
 801aef0:	461a      	mov	r2, r3
 801aef2:	6879      	ldr	r1, [r7, #4]
 801aef4:	68f8      	ldr	r0, [r7, #12]
 801aef6:	f001 f984 	bl	801c202 <USBD_CtlContinueRx>
 801aefa:	e07d      	b.n	801aff8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801af02:	f003 031f 	and.w	r3, r3, #31
 801af06:	2b02      	cmp	r3, #2
 801af08:	d014      	beq.n	801af34 <USBD_LL_DataOutStage+0x98>
 801af0a:	2b02      	cmp	r3, #2
 801af0c:	d81d      	bhi.n	801af4a <USBD_LL_DataOutStage+0xae>
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d002      	beq.n	801af18 <USBD_LL_DataOutStage+0x7c>
 801af12:	2b01      	cmp	r3, #1
 801af14:	d003      	beq.n	801af1e <USBD_LL_DataOutStage+0x82>
 801af16:	e018      	b.n	801af4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801af18:	2300      	movs	r3, #0
 801af1a:	75bb      	strb	r3, [r7, #22]
            break;
 801af1c:	e018      	b.n	801af50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801af24:	b2db      	uxtb	r3, r3
 801af26:	4619      	mov	r1, r3
 801af28:	68f8      	ldr	r0, [r7, #12]
 801af2a:	f000 fa5e 	bl	801b3ea <USBD_CoreFindIF>
 801af2e:	4603      	mov	r3, r0
 801af30:	75bb      	strb	r3, [r7, #22]
            break;
 801af32:	e00d      	b.n	801af50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	4619      	mov	r1, r3
 801af3e:	68f8      	ldr	r0, [r7, #12]
 801af40:	f000 fa60 	bl	801b404 <USBD_CoreFindEP>
 801af44:	4603      	mov	r3, r0
 801af46:	75bb      	strb	r3, [r7, #22]
            break;
 801af48:	e002      	b.n	801af50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801af4a:	2300      	movs	r3, #0
 801af4c:	75bb      	strb	r3, [r7, #22]
            break;
 801af4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801af50:	7dbb      	ldrb	r3, [r7, #22]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d119      	bne.n	801af8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af5c:	b2db      	uxtb	r3, r3
 801af5e:	2b03      	cmp	r3, #3
 801af60:	d113      	bne.n	801af8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801af62:	7dba      	ldrb	r2, [r7, #22]
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	32ae      	adds	r2, #174	; 0xae
 801af68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af6c:	691b      	ldr	r3, [r3, #16]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d00b      	beq.n	801af8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801af72:	7dba      	ldrb	r2, [r7, #22]
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801af7a:	7dba      	ldrb	r2, [r7, #22]
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	32ae      	adds	r2, #174	; 0xae
 801af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af84:	691b      	ldr	r3, [r3, #16]
 801af86:	68f8      	ldr	r0, [r7, #12]
 801af88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801af8a:	68f8      	ldr	r0, [r7, #12]
 801af8c:	f001 f94a 	bl	801c224 <USBD_CtlSendStatus>
 801af90:	e032      	b.n	801aff8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801af92:	7afb      	ldrb	r3, [r7, #11]
 801af94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801af98:	b2db      	uxtb	r3, r3
 801af9a:	4619      	mov	r1, r3
 801af9c:	68f8      	ldr	r0, [r7, #12]
 801af9e:	f000 fa31 	bl	801b404 <USBD_CoreFindEP>
 801afa2:	4603      	mov	r3, r0
 801afa4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801afa6:	7dbb      	ldrb	r3, [r7, #22]
 801afa8:	2bff      	cmp	r3, #255	; 0xff
 801afaa:	d025      	beq.n	801aff8 <USBD_LL_DataOutStage+0x15c>
 801afac:	7dbb      	ldrb	r3, [r7, #22]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d122      	bne.n	801aff8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afb8:	b2db      	uxtb	r3, r3
 801afba:	2b03      	cmp	r3, #3
 801afbc:	d117      	bne.n	801afee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801afbe:	7dba      	ldrb	r2, [r7, #22]
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	32ae      	adds	r2, #174	; 0xae
 801afc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801afc8:	699b      	ldr	r3, [r3, #24]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d00f      	beq.n	801afee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801afce:	7dba      	ldrb	r2, [r7, #22]
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801afd6:	7dba      	ldrb	r2, [r7, #22]
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	32ae      	adds	r2, #174	; 0xae
 801afdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801afe0:	699b      	ldr	r3, [r3, #24]
 801afe2:	7afa      	ldrb	r2, [r7, #11]
 801afe4:	4611      	mov	r1, r2
 801afe6:	68f8      	ldr	r0, [r7, #12]
 801afe8:	4798      	blx	r3
 801afea:	4603      	mov	r3, r0
 801afec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801afee:	7dfb      	ldrb	r3, [r7, #23]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d001      	beq.n	801aff8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801aff4:	7dfb      	ldrb	r3, [r7, #23]
 801aff6:	e000      	b.n	801affa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801aff8:	2300      	movs	r3, #0
}
 801affa:	4618      	mov	r0, r3
 801affc:	3718      	adds	r7, #24
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}

0801b002 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b002:	b580      	push	{r7, lr}
 801b004:	b086      	sub	sp, #24
 801b006:	af00      	add	r7, sp, #0
 801b008:	60f8      	str	r0, [r7, #12]
 801b00a:	460b      	mov	r3, r1
 801b00c:	607a      	str	r2, [r7, #4]
 801b00e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801b010:	7afb      	ldrb	r3, [r7, #11]
 801b012:	2b00      	cmp	r3, #0
 801b014:	d16f      	bne.n	801b0f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	3314      	adds	r3, #20
 801b01a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801b022:	2b02      	cmp	r3, #2
 801b024:	d15a      	bne.n	801b0dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801b026:	693b      	ldr	r3, [r7, #16]
 801b028:	689a      	ldr	r2, [r3, #8]
 801b02a:	693b      	ldr	r3, [r7, #16]
 801b02c:	68db      	ldr	r3, [r3, #12]
 801b02e:	429a      	cmp	r2, r3
 801b030:	d914      	bls.n	801b05c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801b032:	693b      	ldr	r3, [r7, #16]
 801b034:	689a      	ldr	r2, [r3, #8]
 801b036:	693b      	ldr	r3, [r7, #16]
 801b038:	68db      	ldr	r3, [r3, #12]
 801b03a:	1ad2      	subs	r2, r2, r3
 801b03c:	693b      	ldr	r3, [r7, #16]
 801b03e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801b040:	693b      	ldr	r3, [r7, #16]
 801b042:	689b      	ldr	r3, [r3, #8]
 801b044:	461a      	mov	r2, r3
 801b046:	6879      	ldr	r1, [r7, #4]
 801b048:	68f8      	ldr	r0, [r7, #12]
 801b04a:	f001 f8ac 	bl	801c1a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b04e:	2300      	movs	r3, #0
 801b050:	2200      	movs	r2, #0
 801b052:	2100      	movs	r1, #0
 801b054:	68f8      	ldr	r0, [r7, #12]
 801b056:	f001 fdb3 	bl	801cbc0 <USBD_LL_PrepareReceive>
 801b05a:	e03f      	b.n	801b0dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801b05c:	693b      	ldr	r3, [r7, #16]
 801b05e:	68da      	ldr	r2, [r3, #12]
 801b060:	693b      	ldr	r3, [r7, #16]
 801b062:	689b      	ldr	r3, [r3, #8]
 801b064:	429a      	cmp	r2, r3
 801b066:	d11c      	bne.n	801b0a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	685a      	ldr	r2, [r3, #4]
 801b06c:	693b      	ldr	r3, [r7, #16]
 801b06e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801b070:	429a      	cmp	r2, r3
 801b072:	d316      	bcc.n	801b0a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	685a      	ldr	r2, [r3, #4]
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801b07e:	429a      	cmp	r2, r3
 801b080:	d20f      	bcs.n	801b0a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b082:	2200      	movs	r2, #0
 801b084:	2100      	movs	r1, #0
 801b086:	68f8      	ldr	r0, [r7, #12]
 801b088:	f001 f88d 	bl	801c1a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	2200      	movs	r2, #0
 801b090:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b094:	2300      	movs	r3, #0
 801b096:	2200      	movs	r2, #0
 801b098:	2100      	movs	r1, #0
 801b09a:	68f8      	ldr	r0, [r7, #12]
 801b09c:	f001 fd90 	bl	801cbc0 <USBD_LL_PrepareReceive>
 801b0a0:	e01c      	b.n	801b0dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	2b03      	cmp	r3, #3
 801b0ac:	d10f      	bne.n	801b0ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0b4:	68db      	ldr	r3, [r3, #12]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d009      	beq.n	801b0ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2200      	movs	r2, #0
 801b0be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0c8:	68db      	ldr	r3, [r3, #12]
 801b0ca:	68f8      	ldr	r0, [r7, #12]
 801b0cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801b0ce:	2180      	movs	r1, #128	; 0x80
 801b0d0:	68f8      	ldr	r0, [r7, #12]
 801b0d2:	f001 fccb 	bl	801ca6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801b0d6:	68f8      	ldr	r0, [r7, #12]
 801b0d8:	f001 f8b7 	bl	801c24a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d03a      	beq.n	801b15c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801b0e6:	68f8      	ldr	r0, [r7, #12]
 801b0e8:	f7ff fe42 	bl	801ad70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801b0f4:	e032      	b.n	801b15c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801b0f6:	7afb      	ldrb	r3, [r7, #11]
 801b0f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	4619      	mov	r1, r3
 801b100:	68f8      	ldr	r0, [r7, #12]
 801b102:	f000 f97f 	bl	801b404 <USBD_CoreFindEP>
 801b106:	4603      	mov	r3, r0
 801b108:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b10a:	7dfb      	ldrb	r3, [r7, #23]
 801b10c:	2bff      	cmp	r3, #255	; 0xff
 801b10e:	d025      	beq.n	801b15c <USBD_LL_DataInStage+0x15a>
 801b110:	7dfb      	ldrb	r3, [r7, #23]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d122      	bne.n	801b15c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b11c:	b2db      	uxtb	r3, r3
 801b11e:	2b03      	cmp	r3, #3
 801b120:	d11c      	bne.n	801b15c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801b122:	7dfa      	ldrb	r2, [r7, #23]
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	32ae      	adds	r2, #174	; 0xae
 801b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d014      	beq.n	801b15c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801b132:	7dfa      	ldrb	r2, [r7, #23]
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801b13a:	7dfa      	ldrb	r2, [r7, #23]
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	32ae      	adds	r2, #174	; 0xae
 801b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b144:	695b      	ldr	r3, [r3, #20]
 801b146:	7afa      	ldrb	r2, [r7, #11]
 801b148:	4611      	mov	r1, r2
 801b14a:	68f8      	ldr	r0, [r7, #12]
 801b14c:	4798      	blx	r3
 801b14e:	4603      	mov	r3, r0
 801b150:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801b152:	7dbb      	ldrb	r3, [r7, #22]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d001      	beq.n	801b15c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801b158:	7dbb      	ldrb	r3, [r7, #22]
 801b15a:	e000      	b.n	801b15e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801b15c:	2300      	movs	r3, #0
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3718      	adds	r7, #24
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}

0801b166 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b166:	b580      	push	{r7, lr}
 801b168:	b084      	sub	sp, #16
 801b16a:	af00      	add	r7, sp, #0
 801b16c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801b16e:	2300      	movs	r3, #0
 801b170:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2201      	movs	r2, #1
 801b176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	2200      	movs	r2, #0
 801b17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2200      	movs	r2, #0
 801b186:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2200      	movs	r2, #0
 801b18c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	2200      	movs	r2, #0
 801b194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d014      	beq.n	801b1cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d00e      	beq.n	801b1cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b1b4:	685b      	ldr	r3, [r3, #4]
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	6852      	ldr	r2, [r2, #4]
 801b1ba:	b2d2      	uxtb	r2, r2
 801b1bc:	4611      	mov	r1, r2
 801b1be:	6878      	ldr	r0, [r7, #4]
 801b1c0:	4798      	blx	r3
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d001      	beq.n	801b1cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801b1c8:	2303      	movs	r3, #3
 801b1ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b1cc:	2340      	movs	r3, #64	; 0x40
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	2100      	movs	r1, #0
 801b1d2:	6878      	ldr	r0, [r7, #4]
 801b1d4:	f001 fc05 	bl	801c9e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2201      	movs	r2, #1
 801b1dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	2240      	movs	r2, #64	; 0x40
 801b1e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b1e8:	2340      	movs	r3, #64	; 0x40
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	2180      	movs	r1, #128	; 0x80
 801b1ee:	6878      	ldr	r0, [r7, #4]
 801b1f0:	f001 fbf7 	bl	801c9e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	2201      	movs	r2, #1
 801b1f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	2240      	movs	r2, #64	; 0x40
 801b1fe:	621a      	str	r2, [r3, #32]

  return ret;
 801b200:	7bfb      	ldrb	r3, [r7, #15]
}
 801b202:	4618      	mov	r0, r3
 801b204:	3710      	adds	r7, #16
 801b206:	46bd      	mov	sp, r7
 801b208:	bd80      	pop	{r7, pc}

0801b20a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b20a:	b480      	push	{r7}
 801b20c:	b083      	sub	sp, #12
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
 801b212:	460b      	mov	r3, r1
 801b214:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	78fa      	ldrb	r2, [r7, #3]
 801b21a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b21c:	2300      	movs	r3, #0
}
 801b21e:	4618      	mov	r0, r3
 801b220:	370c      	adds	r7, #12
 801b222:	46bd      	mov	sp, r7
 801b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b228:	4770      	bx	lr

0801b22a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b22a:	b480      	push	{r7}
 801b22c:	b083      	sub	sp, #12
 801b22e:	af00      	add	r7, sp, #0
 801b230:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	2204      	movs	r2, #4
 801b244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801b248:	2300      	movs	r3, #0
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	370c      	adds	r7, #12
 801b24e:	46bd      	mov	sp, r7
 801b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b254:	4770      	bx	lr

0801b256 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b256:	b480      	push	{r7}
 801b258:	b083      	sub	sp, #12
 801b25a:	af00      	add	r7, sp, #0
 801b25c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b264:	b2db      	uxtb	r3, r3
 801b266:	2b04      	cmp	r3, #4
 801b268:	d106      	bne.n	801b278 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801b270:	b2da      	uxtb	r2, r3
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801b278:	2300      	movs	r3, #0
}
 801b27a:	4618      	mov	r0, r3
 801b27c:	370c      	adds	r7, #12
 801b27e:	46bd      	mov	sp, r7
 801b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b284:	4770      	bx	lr

0801b286 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b286:	b580      	push	{r7, lr}
 801b288:	b082      	sub	sp, #8
 801b28a:	af00      	add	r7, sp, #0
 801b28c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b294:	b2db      	uxtb	r3, r3
 801b296:	2b03      	cmp	r3, #3
 801b298:	d110      	bne.n	801b2bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d00b      	beq.n	801b2bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2aa:	69db      	ldr	r3, [r3, #28]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d005      	beq.n	801b2bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b2b6:	69db      	ldr	r3, [r3, #28]
 801b2b8:	6878      	ldr	r0, [r7, #4]
 801b2ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801b2bc:	2300      	movs	r3, #0
}
 801b2be:	4618      	mov	r0, r3
 801b2c0:	3708      	adds	r7, #8
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}

0801b2c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801b2c6:	b580      	push	{r7, lr}
 801b2c8:	b082      	sub	sp, #8
 801b2ca:	af00      	add	r7, sp, #0
 801b2cc:	6078      	str	r0, [r7, #4]
 801b2ce:	460b      	mov	r3, r1
 801b2d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	32ae      	adds	r2, #174	; 0xae
 801b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d101      	bne.n	801b2e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801b2e4:	2303      	movs	r3, #3
 801b2e6:	e01c      	b.n	801b322 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b2ee:	b2db      	uxtb	r3, r3
 801b2f0:	2b03      	cmp	r3, #3
 801b2f2:	d115      	bne.n	801b320 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	32ae      	adds	r2, #174	; 0xae
 801b2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b302:	6a1b      	ldr	r3, [r3, #32]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d00b      	beq.n	801b320 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	32ae      	adds	r2, #174	; 0xae
 801b312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b316:	6a1b      	ldr	r3, [r3, #32]
 801b318:	78fa      	ldrb	r2, [r7, #3]
 801b31a:	4611      	mov	r1, r2
 801b31c:	6878      	ldr	r0, [r7, #4]
 801b31e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b320:	2300      	movs	r3, #0
}
 801b322:	4618      	mov	r0, r3
 801b324:	3708      	adds	r7, #8
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}

0801b32a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801b32a:	b580      	push	{r7, lr}
 801b32c:	b082      	sub	sp, #8
 801b32e:	af00      	add	r7, sp, #0
 801b330:	6078      	str	r0, [r7, #4]
 801b332:	460b      	mov	r3, r1
 801b334:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	32ae      	adds	r2, #174	; 0xae
 801b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d101      	bne.n	801b34c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801b348:	2303      	movs	r3, #3
 801b34a:	e01c      	b.n	801b386 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b352:	b2db      	uxtb	r3, r3
 801b354:	2b03      	cmp	r3, #3
 801b356:	d115      	bne.n	801b384 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	32ae      	adds	r2, #174	; 0xae
 801b362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d00b      	beq.n	801b384 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	32ae      	adds	r2, #174	; 0xae
 801b376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b37c:	78fa      	ldrb	r2, [r7, #3]
 801b37e:	4611      	mov	r1, r2
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b384:	2300      	movs	r3, #0
}
 801b386:	4618      	mov	r0, r3
 801b388:	3708      	adds	r7, #8
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bd80      	pop	{r7, pc}

0801b38e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801b38e:	b480      	push	{r7}
 801b390:	b083      	sub	sp, #12
 801b392:	af00      	add	r7, sp, #0
 801b394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b396:	2300      	movs	r3, #0
}
 801b398:	4618      	mov	r0, r3
 801b39a:	370c      	adds	r7, #12
 801b39c:	46bd      	mov	sp, r7
 801b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a2:	4770      	bx	lr

0801b3a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b084      	sub	sp, #16
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	2201      	movs	r2, #1
 801b3b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d00e      	beq.n	801b3e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b3c8:	685b      	ldr	r3, [r3, #4]
 801b3ca:	687a      	ldr	r2, [r7, #4]
 801b3cc:	6852      	ldr	r2, [r2, #4]
 801b3ce:	b2d2      	uxtb	r2, r2
 801b3d0:	4611      	mov	r1, r2
 801b3d2:	6878      	ldr	r0, [r7, #4]
 801b3d4:	4798      	blx	r3
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d001      	beq.n	801b3e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801b3dc:	2303      	movs	r3, #3
 801b3de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801b3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	3710      	adds	r7, #16
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}

0801b3ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b3ea:	b480      	push	{r7}
 801b3ec:	b083      	sub	sp, #12
 801b3ee:	af00      	add	r7, sp, #0
 801b3f0:	6078      	str	r0, [r7, #4]
 801b3f2:	460b      	mov	r3, r1
 801b3f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b3f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	370c      	adds	r7, #12
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b402:	4770      	bx	lr

0801b404 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801b404:	b480      	push	{r7}
 801b406:	b083      	sub	sp, #12
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	460b      	mov	r3, r1
 801b40e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801b410:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801b412:	4618      	mov	r0, r3
 801b414:	370c      	adds	r7, #12
 801b416:	46bd      	mov	sp, r7
 801b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41c:	4770      	bx	lr

0801b41e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801b41e:	b580      	push	{r7, lr}
 801b420:	b086      	sub	sp, #24
 801b422:	af00      	add	r7, sp, #0
 801b424:	6078      	str	r0, [r7, #4]
 801b426:	460b      	mov	r3, r1
 801b428:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801b432:	2300      	movs	r3, #0
 801b434:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	885b      	ldrh	r3, [r3, #2]
 801b43a:	b29a      	uxth	r2, r3
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	781b      	ldrb	r3, [r3, #0]
 801b440:	b29b      	uxth	r3, r3
 801b442:	429a      	cmp	r2, r3
 801b444:	d920      	bls.n	801b488 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801b44e:	e013      	b.n	801b478 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801b450:	f107 030a 	add.w	r3, r7, #10
 801b454:	4619      	mov	r1, r3
 801b456:	6978      	ldr	r0, [r7, #20]
 801b458:	f000 f81b 	bl	801b492 <USBD_GetNextDesc>
 801b45c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801b45e:	697b      	ldr	r3, [r7, #20]
 801b460:	785b      	ldrb	r3, [r3, #1]
 801b462:	2b05      	cmp	r3, #5
 801b464:	d108      	bne.n	801b478 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801b466:	697b      	ldr	r3, [r7, #20]
 801b468:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	789b      	ldrb	r3, [r3, #2]
 801b46e:	78fa      	ldrb	r2, [r7, #3]
 801b470:	429a      	cmp	r2, r3
 801b472:	d008      	beq.n	801b486 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801b474:	2300      	movs	r3, #0
 801b476:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	885b      	ldrh	r3, [r3, #2]
 801b47c:	b29a      	uxth	r2, r3
 801b47e:	897b      	ldrh	r3, [r7, #10]
 801b480:	429a      	cmp	r2, r3
 801b482:	d8e5      	bhi.n	801b450 <USBD_GetEpDesc+0x32>
 801b484:	e000      	b.n	801b488 <USBD_GetEpDesc+0x6a>
          break;
 801b486:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801b488:	693b      	ldr	r3, [r7, #16]
}
 801b48a:	4618      	mov	r0, r3
 801b48c:	3718      	adds	r7, #24
 801b48e:	46bd      	mov	sp, r7
 801b490:	bd80      	pop	{r7, pc}

0801b492 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801b492:	b480      	push	{r7}
 801b494:	b085      	sub	sp, #20
 801b496:	af00      	add	r7, sp, #0
 801b498:	6078      	str	r0, [r7, #4]
 801b49a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801b4a0:	683b      	ldr	r3, [r7, #0]
 801b4a2:	881a      	ldrh	r2, [r3, #0]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	b29b      	uxth	r3, r3
 801b4aa:	4413      	add	r3, r2
 801b4ac:	b29a      	uxth	r2, r3
 801b4ae:	683b      	ldr	r3, [r7, #0]
 801b4b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	461a      	mov	r2, r3
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	4413      	add	r3, r2
 801b4bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801b4be:	68fb      	ldr	r3, [r7, #12]
}
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	3714      	adds	r7, #20
 801b4c4:	46bd      	mov	sp, r7
 801b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ca:	4770      	bx	lr

0801b4cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801b4cc:	b480      	push	{r7}
 801b4ce:	b087      	sub	sp, #28
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801b4d8:	697b      	ldr	r3, [r7, #20]
 801b4da:	781b      	ldrb	r3, [r3, #0]
 801b4dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801b4de:	697b      	ldr	r3, [r7, #20]
 801b4e0:	3301      	adds	r3, #1
 801b4e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801b4e4:	697b      	ldr	r3, [r7, #20]
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801b4ea:	8a3b      	ldrh	r3, [r7, #16]
 801b4ec:	021b      	lsls	r3, r3, #8
 801b4ee:	b21a      	sxth	r2, r3
 801b4f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b4f4:	4313      	orrs	r3, r2
 801b4f6:	b21b      	sxth	r3, r3
 801b4f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801b4fa:	89fb      	ldrh	r3, [r7, #14]
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	371c      	adds	r7, #28
 801b500:	46bd      	mov	sp, r7
 801b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b506:	4770      	bx	lr

0801b508 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
 801b510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b512:	2300      	movs	r3, #0
 801b514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b516:	683b      	ldr	r3, [r7, #0]
 801b518:	781b      	ldrb	r3, [r3, #0]
 801b51a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b51e:	2b40      	cmp	r3, #64	; 0x40
 801b520:	d005      	beq.n	801b52e <USBD_StdDevReq+0x26>
 801b522:	2b40      	cmp	r3, #64	; 0x40
 801b524:	d857      	bhi.n	801b5d6 <USBD_StdDevReq+0xce>
 801b526:	2b00      	cmp	r3, #0
 801b528:	d00f      	beq.n	801b54a <USBD_StdDevReq+0x42>
 801b52a:	2b20      	cmp	r3, #32
 801b52c:	d153      	bne.n	801b5d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	32ae      	adds	r2, #174	; 0xae
 801b538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b53c:	689b      	ldr	r3, [r3, #8]
 801b53e:	6839      	ldr	r1, [r7, #0]
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	4798      	blx	r3
 801b544:	4603      	mov	r3, r0
 801b546:	73fb      	strb	r3, [r7, #15]
      break;
 801b548:	e04a      	b.n	801b5e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b54a:	683b      	ldr	r3, [r7, #0]
 801b54c:	785b      	ldrb	r3, [r3, #1]
 801b54e:	2b09      	cmp	r3, #9
 801b550:	d83b      	bhi.n	801b5ca <USBD_StdDevReq+0xc2>
 801b552:	a201      	add	r2, pc, #4	; (adr r2, 801b558 <USBD_StdDevReq+0x50>)
 801b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b558:	0801b5ad 	.word	0x0801b5ad
 801b55c:	0801b5c1 	.word	0x0801b5c1
 801b560:	0801b5cb 	.word	0x0801b5cb
 801b564:	0801b5b7 	.word	0x0801b5b7
 801b568:	0801b5cb 	.word	0x0801b5cb
 801b56c:	0801b58b 	.word	0x0801b58b
 801b570:	0801b581 	.word	0x0801b581
 801b574:	0801b5cb 	.word	0x0801b5cb
 801b578:	0801b5a3 	.word	0x0801b5a3
 801b57c:	0801b595 	.word	0x0801b595
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b580:	6839      	ldr	r1, [r7, #0]
 801b582:	6878      	ldr	r0, [r7, #4]
 801b584:	f000 fa3c 	bl	801ba00 <USBD_GetDescriptor>
          break;
 801b588:	e024      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b58a:	6839      	ldr	r1, [r7, #0]
 801b58c:	6878      	ldr	r0, [r7, #4]
 801b58e:	f000 fba1 	bl	801bcd4 <USBD_SetAddress>
          break;
 801b592:	e01f      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801b594:	6839      	ldr	r1, [r7, #0]
 801b596:	6878      	ldr	r0, [r7, #4]
 801b598:	f000 fbe0 	bl	801bd5c <USBD_SetConfig>
 801b59c:	4603      	mov	r3, r0
 801b59e:	73fb      	strb	r3, [r7, #15]
          break;
 801b5a0:	e018      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b5a2:	6839      	ldr	r1, [r7, #0]
 801b5a4:	6878      	ldr	r0, [r7, #4]
 801b5a6:	f000 fc83 	bl	801beb0 <USBD_GetConfig>
          break;
 801b5aa:	e013      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b5ac:	6839      	ldr	r1, [r7, #0]
 801b5ae:	6878      	ldr	r0, [r7, #4]
 801b5b0:	f000 fcb4 	bl	801bf1c <USBD_GetStatus>
          break;
 801b5b4:	e00e      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b5b6:	6839      	ldr	r1, [r7, #0]
 801b5b8:	6878      	ldr	r0, [r7, #4]
 801b5ba:	f000 fce3 	bl	801bf84 <USBD_SetFeature>
          break;
 801b5be:	e009      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b5c0:	6839      	ldr	r1, [r7, #0]
 801b5c2:	6878      	ldr	r0, [r7, #4]
 801b5c4:	f000 fd07 	bl	801bfd6 <USBD_ClrFeature>
          break;
 801b5c8:	e004      	b.n	801b5d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b5ca:	6839      	ldr	r1, [r7, #0]
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f000 fd5e 	bl	801c08e <USBD_CtlError>
          break;
 801b5d2:	bf00      	nop
      }
      break;
 801b5d4:	e004      	b.n	801b5e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801b5d6:	6839      	ldr	r1, [r7, #0]
 801b5d8:	6878      	ldr	r0, [r7, #4]
 801b5da:	f000 fd58 	bl	801c08e <USBD_CtlError>
      break;
 801b5de:	bf00      	nop
  }

  return ret;
 801b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	3710      	adds	r7, #16
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	bd80      	pop	{r7, pc}
 801b5ea:	bf00      	nop

0801b5ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b084      	sub	sp, #16
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
 801b5f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b5fa:	683b      	ldr	r3, [r7, #0]
 801b5fc:	781b      	ldrb	r3, [r3, #0]
 801b5fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b602:	2b40      	cmp	r3, #64	; 0x40
 801b604:	d005      	beq.n	801b612 <USBD_StdItfReq+0x26>
 801b606:	2b40      	cmp	r3, #64	; 0x40
 801b608:	d852      	bhi.n	801b6b0 <USBD_StdItfReq+0xc4>
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d001      	beq.n	801b612 <USBD_StdItfReq+0x26>
 801b60e:	2b20      	cmp	r3, #32
 801b610:	d14e      	bne.n	801b6b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b618:	b2db      	uxtb	r3, r3
 801b61a:	3b01      	subs	r3, #1
 801b61c:	2b02      	cmp	r3, #2
 801b61e:	d840      	bhi.n	801b6a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	889b      	ldrh	r3, [r3, #4]
 801b624:	b2db      	uxtb	r3, r3
 801b626:	2b01      	cmp	r3, #1
 801b628:	d836      	bhi.n	801b698 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801b62a:	683b      	ldr	r3, [r7, #0]
 801b62c:	889b      	ldrh	r3, [r3, #4]
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	4619      	mov	r1, r3
 801b632:	6878      	ldr	r0, [r7, #4]
 801b634:	f7ff fed9 	bl	801b3ea <USBD_CoreFindIF>
 801b638:	4603      	mov	r3, r0
 801b63a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b63c:	7bbb      	ldrb	r3, [r7, #14]
 801b63e:	2bff      	cmp	r3, #255	; 0xff
 801b640:	d01d      	beq.n	801b67e <USBD_StdItfReq+0x92>
 801b642:	7bbb      	ldrb	r3, [r7, #14]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d11a      	bne.n	801b67e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801b648:	7bba      	ldrb	r2, [r7, #14]
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	32ae      	adds	r2, #174	; 0xae
 801b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b652:	689b      	ldr	r3, [r3, #8]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d00f      	beq.n	801b678 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801b658:	7bba      	ldrb	r2, [r7, #14]
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b660:	7bba      	ldrb	r2, [r7, #14]
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	32ae      	adds	r2, #174	; 0xae
 801b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b66a:	689b      	ldr	r3, [r3, #8]
 801b66c:	6839      	ldr	r1, [r7, #0]
 801b66e:	6878      	ldr	r0, [r7, #4]
 801b670:	4798      	blx	r3
 801b672:	4603      	mov	r3, r0
 801b674:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b676:	e004      	b.n	801b682 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801b678:	2303      	movs	r3, #3
 801b67a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801b67c:	e001      	b.n	801b682 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801b67e:	2303      	movs	r3, #3
 801b680:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b682:	683b      	ldr	r3, [r7, #0]
 801b684:	88db      	ldrh	r3, [r3, #6]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d110      	bne.n	801b6ac <USBD_StdItfReq+0xc0>
 801b68a:	7bfb      	ldrb	r3, [r7, #15]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d10d      	bne.n	801b6ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801b690:	6878      	ldr	r0, [r7, #4]
 801b692:	f000 fdc7 	bl	801c224 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b696:	e009      	b.n	801b6ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801b698:	6839      	ldr	r1, [r7, #0]
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f000 fcf7 	bl	801c08e <USBD_CtlError>
          break;
 801b6a0:	e004      	b.n	801b6ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b6a2:	6839      	ldr	r1, [r7, #0]
 801b6a4:	6878      	ldr	r0, [r7, #4]
 801b6a6:	f000 fcf2 	bl	801c08e <USBD_CtlError>
          break;
 801b6aa:	e000      	b.n	801b6ae <USBD_StdItfReq+0xc2>
          break;
 801b6ac:	bf00      	nop
      }
      break;
 801b6ae:	e004      	b.n	801b6ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801b6b0:	6839      	ldr	r1, [r7, #0]
 801b6b2:	6878      	ldr	r0, [r7, #4]
 801b6b4:	f000 fceb 	bl	801c08e <USBD_CtlError>
      break;
 801b6b8:	bf00      	nop
  }

  return ret;
 801b6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6bc:	4618      	mov	r0, r3
 801b6be:	3710      	adds	r7, #16
 801b6c0:	46bd      	mov	sp, r7
 801b6c2:	bd80      	pop	{r7, pc}

0801b6c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b084      	sub	sp, #16
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
 801b6cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	889b      	ldrh	r3, [r3, #4]
 801b6d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b6d8:	683b      	ldr	r3, [r7, #0]
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b6e0:	2b40      	cmp	r3, #64	; 0x40
 801b6e2:	d007      	beq.n	801b6f4 <USBD_StdEPReq+0x30>
 801b6e4:	2b40      	cmp	r3, #64	; 0x40
 801b6e6:	f200 817f 	bhi.w	801b9e8 <USBD_StdEPReq+0x324>
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d02a      	beq.n	801b744 <USBD_StdEPReq+0x80>
 801b6ee:	2b20      	cmp	r3, #32
 801b6f0:	f040 817a 	bne.w	801b9e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801b6f4:	7bbb      	ldrb	r3, [r7, #14]
 801b6f6:	4619      	mov	r1, r3
 801b6f8:	6878      	ldr	r0, [r7, #4]
 801b6fa:	f7ff fe83 	bl	801b404 <USBD_CoreFindEP>
 801b6fe:	4603      	mov	r3, r0
 801b700:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b702:	7b7b      	ldrb	r3, [r7, #13]
 801b704:	2bff      	cmp	r3, #255	; 0xff
 801b706:	f000 8174 	beq.w	801b9f2 <USBD_StdEPReq+0x32e>
 801b70a:	7b7b      	ldrb	r3, [r7, #13]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	f040 8170 	bne.w	801b9f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801b712:	7b7a      	ldrb	r2, [r7, #13]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801b71a:	7b7a      	ldrb	r2, [r7, #13]
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	32ae      	adds	r2, #174	; 0xae
 801b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b724:	689b      	ldr	r3, [r3, #8]
 801b726:	2b00      	cmp	r3, #0
 801b728:	f000 8163 	beq.w	801b9f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801b72c:	7b7a      	ldrb	r2, [r7, #13]
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	32ae      	adds	r2, #174	; 0xae
 801b732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b736:	689b      	ldr	r3, [r3, #8]
 801b738:	6839      	ldr	r1, [r7, #0]
 801b73a:	6878      	ldr	r0, [r7, #4]
 801b73c:	4798      	blx	r3
 801b73e:	4603      	mov	r3, r0
 801b740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801b742:	e156      	b.n	801b9f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	785b      	ldrb	r3, [r3, #1]
 801b748:	2b03      	cmp	r3, #3
 801b74a:	d008      	beq.n	801b75e <USBD_StdEPReq+0x9a>
 801b74c:	2b03      	cmp	r3, #3
 801b74e:	f300 8145 	bgt.w	801b9dc <USBD_StdEPReq+0x318>
 801b752:	2b00      	cmp	r3, #0
 801b754:	f000 809b 	beq.w	801b88e <USBD_StdEPReq+0x1ca>
 801b758:	2b01      	cmp	r3, #1
 801b75a:	d03c      	beq.n	801b7d6 <USBD_StdEPReq+0x112>
 801b75c:	e13e      	b.n	801b9dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b764:	b2db      	uxtb	r3, r3
 801b766:	2b02      	cmp	r3, #2
 801b768:	d002      	beq.n	801b770 <USBD_StdEPReq+0xac>
 801b76a:	2b03      	cmp	r3, #3
 801b76c:	d016      	beq.n	801b79c <USBD_StdEPReq+0xd8>
 801b76e:	e02c      	b.n	801b7ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b770:	7bbb      	ldrb	r3, [r7, #14]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d00d      	beq.n	801b792 <USBD_StdEPReq+0xce>
 801b776:	7bbb      	ldrb	r3, [r7, #14]
 801b778:	2b80      	cmp	r3, #128	; 0x80
 801b77a:	d00a      	beq.n	801b792 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b77c:	7bbb      	ldrb	r3, [r7, #14]
 801b77e:	4619      	mov	r1, r3
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f001 f973 	bl	801ca6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b786:	2180      	movs	r1, #128	; 0x80
 801b788:	6878      	ldr	r0, [r7, #4]
 801b78a:	f001 f96f 	bl	801ca6c <USBD_LL_StallEP>
 801b78e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b790:	e020      	b.n	801b7d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801b792:	6839      	ldr	r1, [r7, #0]
 801b794:	6878      	ldr	r0, [r7, #4]
 801b796:	f000 fc7a 	bl	801c08e <USBD_CtlError>
              break;
 801b79a:	e01b      	b.n	801b7d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b79c:	683b      	ldr	r3, [r7, #0]
 801b79e:	885b      	ldrh	r3, [r3, #2]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d10e      	bne.n	801b7c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b7a4:	7bbb      	ldrb	r3, [r7, #14]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d00b      	beq.n	801b7c2 <USBD_StdEPReq+0xfe>
 801b7aa:	7bbb      	ldrb	r3, [r7, #14]
 801b7ac:	2b80      	cmp	r3, #128	; 0x80
 801b7ae:	d008      	beq.n	801b7c2 <USBD_StdEPReq+0xfe>
 801b7b0:	683b      	ldr	r3, [r7, #0]
 801b7b2:	88db      	ldrh	r3, [r3, #6]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d104      	bne.n	801b7c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801b7b8:	7bbb      	ldrb	r3, [r7, #14]
 801b7ba:	4619      	mov	r1, r3
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f001 f955 	bl	801ca6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801b7c2:	6878      	ldr	r0, [r7, #4]
 801b7c4:	f000 fd2e 	bl	801c224 <USBD_CtlSendStatus>

              break;
 801b7c8:	e004      	b.n	801b7d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801b7ca:	6839      	ldr	r1, [r7, #0]
 801b7cc:	6878      	ldr	r0, [r7, #4]
 801b7ce:	f000 fc5e 	bl	801c08e <USBD_CtlError>
              break;
 801b7d2:	bf00      	nop
          }
          break;
 801b7d4:	e107      	b.n	801b9e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b7dc:	b2db      	uxtb	r3, r3
 801b7de:	2b02      	cmp	r3, #2
 801b7e0:	d002      	beq.n	801b7e8 <USBD_StdEPReq+0x124>
 801b7e2:	2b03      	cmp	r3, #3
 801b7e4:	d016      	beq.n	801b814 <USBD_StdEPReq+0x150>
 801b7e6:	e04b      	b.n	801b880 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b7e8:	7bbb      	ldrb	r3, [r7, #14]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d00d      	beq.n	801b80a <USBD_StdEPReq+0x146>
 801b7ee:	7bbb      	ldrb	r3, [r7, #14]
 801b7f0:	2b80      	cmp	r3, #128	; 0x80
 801b7f2:	d00a      	beq.n	801b80a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801b7f4:	7bbb      	ldrb	r3, [r7, #14]
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	6878      	ldr	r0, [r7, #4]
 801b7fa:	f001 f937 	bl	801ca6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801b7fe:	2180      	movs	r1, #128	; 0x80
 801b800:	6878      	ldr	r0, [r7, #4]
 801b802:	f001 f933 	bl	801ca6c <USBD_LL_StallEP>
 801b806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b808:	e040      	b.n	801b88c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801b80a:	6839      	ldr	r1, [r7, #0]
 801b80c:	6878      	ldr	r0, [r7, #4]
 801b80e:	f000 fc3e 	bl	801c08e <USBD_CtlError>
              break;
 801b812:	e03b      	b.n	801b88c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b814:	683b      	ldr	r3, [r7, #0]
 801b816:	885b      	ldrh	r3, [r3, #2]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d136      	bne.n	801b88a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b81c:	7bbb      	ldrb	r3, [r7, #14]
 801b81e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b822:	2b00      	cmp	r3, #0
 801b824:	d004      	beq.n	801b830 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801b826:	7bbb      	ldrb	r3, [r7, #14]
 801b828:	4619      	mov	r1, r3
 801b82a:	6878      	ldr	r0, [r7, #4]
 801b82c:	f001 f93d 	bl	801caaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801b830:	6878      	ldr	r0, [r7, #4]
 801b832:	f000 fcf7 	bl	801c224 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801b836:	7bbb      	ldrb	r3, [r7, #14]
 801b838:	4619      	mov	r1, r3
 801b83a:	6878      	ldr	r0, [r7, #4]
 801b83c:	f7ff fde2 	bl	801b404 <USBD_CoreFindEP>
 801b840:	4603      	mov	r3, r0
 801b842:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801b844:	7b7b      	ldrb	r3, [r7, #13]
 801b846:	2bff      	cmp	r3, #255	; 0xff
 801b848:	d01f      	beq.n	801b88a <USBD_StdEPReq+0x1c6>
 801b84a:	7b7b      	ldrb	r3, [r7, #13]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d11c      	bne.n	801b88a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801b850:	7b7a      	ldrb	r2, [r7, #13]
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801b858:	7b7a      	ldrb	r2, [r7, #13]
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	32ae      	adds	r2, #174	; 0xae
 801b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b862:	689b      	ldr	r3, [r3, #8]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d010      	beq.n	801b88a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801b868:	7b7a      	ldrb	r2, [r7, #13]
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	32ae      	adds	r2, #174	; 0xae
 801b86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b872:	689b      	ldr	r3, [r3, #8]
 801b874:	6839      	ldr	r1, [r7, #0]
 801b876:	6878      	ldr	r0, [r7, #4]
 801b878:	4798      	blx	r3
 801b87a:	4603      	mov	r3, r0
 801b87c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801b87e:	e004      	b.n	801b88a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801b880:	6839      	ldr	r1, [r7, #0]
 801b882:	6878      	ldr	r0, [r7, #4]
 801b884:	f000 fc03 	bl	801c08e <USBD_CtlError>
              break;
 801b888:	e000      	b.n	801b88c <USBD_StdEPReq+0x1c8>
              break;
 801b88a:	bf00      	nop
          }
          break;
 801b88c:	e0ab      	b.n	801b9e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b894:	b2db      	uxtb	r3, r3
 801b896:	2b02      	cmp	r3, #2
 801b898:	d002      	beq.n	801b8a0 <USBD_StdEPReq+0x1dc>
 801b89a:	2b03      	cmp	r3, #3
 801b89c:	d032      	beq.n	801b904 <USBD_StdEPReq+0x240>
 801b89e:	e097      	b.n	801b9d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b8a0:	7bbb      	ldrb	r3, [r7, #14]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d007      	beq.n	801b8b6 <USBD_StdEPReq+0x1f2>
 801b8a6:	7bbb      	ldrb	r3, [r7, #14]
 801b8a8:	2b80      	cmp	r3, #128	; 0x80
 801b8aa:	d004      	beq.n	801b8b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801b8ac:	6839      	ldr	r1, [r7, #0]
 801b8ae:	6878      	ldr	r0, [r7, #4]
 801b8b0:	f000 fbed 	bl	801c08e <USBD_CtlError>
                break;
 801b8b4:	e091      	b.n	801b9da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b8b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	da0b      	bge.n	801b8d6 <USBD_StdEPReq+0x212>
 801b8be:	7bbb      	ldrb	r3, [r7, #14]
 801b8c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b8c4:	4613      	mov	r3, r2
 801b8c6:	009b      	lsls	r3, r3, #2
 801b8c8:	4413      	add	r3, r2
 801b8ca:	009b      	lsls	r3, r3, #2
 801b8cc:	3310      	adds	r3, #16
 801b8ce:	687a      	ldr	r2, [r7, #4]
 801b8d0:	4413      	add	r3, r2
 801b8d2:	3304      	adds	r3, #4
 801b8d4:	e00b      	b.n	801b8ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b8d6:	7bbb      	ldrb	r3, [r7, #14]
 801b8d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b8dc:	4613      	mov	r3, r2
 801b8de:	009b      	lsls	r3, r3, #2
 801b8e0:	4413      	add	r3, r2
 801b8e2:	009b      	lsls	r3, r3, #2
 801b8e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b8e8:	687a      	ldr	r2, [r7, #4]
 801b8ea:	4413      	add	r3, r2
 801b8ec:	3304      	adds	r3, #4
 801b8ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	2200      	movs	r2, #0
 801b8f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	2202      	movs	r2, #2
 801b8fa:	4619      	mov	r1, r3
 801b8fc:	6878      	ldr	r0, [r7, #4]
 801b8fe:	f000 fc37 	bl	801c170 <USBD_CtlSendData>
              break;
 801b902:	e06a      	b.n	801b9da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	da11      	bge.n	801b930 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b90c:	7bbb      	ldrb	r3, [r7, #14]
 801b90e:	f003 020f 	and.w	r2, r3, #15
 801b912:	6879      	ldr	r1, [r7, #4]
 801b914:	4613      	mov	r3, r2
 801b916:	009b      	lsls	r3, r3, #2
 801b918:	4413      	add	r3, r2
 801b91a:	009b      	lsls	r3, r3, #2
 801b91c:	440b      	add	r3, r1
 801b91e:	3324      	adds	r3, #36	; 0x24
 801b920:	881b      	ldrh	r3, [r3, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d117      	bne.n	801b956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b926:	6839      	ldr	r1, [r7, #0]
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f000 fbb0 	bl	801c08e <USBD_CtlError>
                  break;
 801b92e:	e054      	b.n	801b9da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b930:	7bbb      	ldrb	r3, [r7, #14]
 801b932:	f003 020f 	and.w	r2, r3, #15
 801b936:	6879      	ldr	r1, [r7, #4]
 801b938:	4613      	mov	r3, r2
 801b93a:	009b      	lsls	r3, r3, #2
 801b93c:	4413      	add	r3, r2
 801b93e:	009b      	lsls	r3, r3, #2
 801b940:	440b      	add	r3, r1
 801b942:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801b946:	881b      	ldrh	r3, [r3, #0]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d104      	bne.n	801b956 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801b94c:	6839      	ldr	r1, [r7, #0]
 801b94e:	6878      	ldr	r0, [r7, #4]
 801b950:	f000 fb9d 	bl	801c08e <USBD_CtlError>
                  break;
 801b954:	e041      	b.n	801b9da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	da0b      	bge.n	801b976 <USBD_StdEPReq+0x2b2>
 801b95e:	7bbb      	ldrb	r3, [r7, #14]
 801b960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b964:	4613      	mov	r3, r2
 801b966:	009b      	lsls	r3, r3, #2
 801b968:	4413      	add	r3, r2
 801b96a:	009b      	lsls	r3, r3, #2
 801b96c:	3310      	adds	r3, #16
 801b96e:	687a      	ldr	r2, [r7, #4]
 801b970:	4413      	add	r3, r2
 801b972:	3304      	adds	r3, #4
 801b974:	e00b      	b.n	801b98e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b976:	7bbb      	ldrb	r3, [r7, #14]
 801b978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b97c:	4613      	mov	r3, r2
 801b97e:	009b      	lsls	r3, r3, #2
 801b980:	4413      	add	r3, r2
 801b982:	009b      	lsls	r3, r3, #2
 801b984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801b988:	687a      	ldr	r2, [r7, #4]
 801b98a:	4413      	add	r3, r2
 801b98c:	3304      	adds	r3, #4
 801b98e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b990:	7bbb      	ldrb	r3, [r7, #14]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d002      	beq.n	801b99c <USBD_StdEPReq+0x2d8>
 801b996:	7bbb      	ldrb	r3, [r7, #14]
 801b998:	2b80      	cmp	r3, #128	; 0x80
 801b99a:	d103      	bne.n	801b9a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801b99c:	68bb      	ldr	r3, [r7, #8]
 801b99e:	2200      	movs	r2, #0
 801b9a0:	601a      	str	r2, [r3, #0]
 801b9a2:	e00e      	b.n	801b9c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801b9a4:	7bbb      	ldrb	r3, [r7, #14]
 801b9a6:	4619      	mov	r1, r3
 801b9a8:	6878      	ldr	r0, [r7, #4]
 801b9aa:	f001 f89d 	bl	801cae8 <USBD_LL_IsStallEP>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d003      	beq.n	801b9bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801b9b4:	68bb      	ldr	r3, [r7, #8]
 801b9b6:	2201      	movs	r2, #1
 801b9b8:	601a      	str	r2, [r3, #0]
 801b9ba:	e002      	b.n	801b9c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801b9bc:	68bb      	ldr	r3, [r7, #8]
 801b9be:	2200      	movs	r2, #0
 801b9c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	2202      	movs	r2, #2
 801b9c6:	4619      	mov	r1, r3
 801b9c8:	6878      	ldr	r0, [r7, #4]
 801b9ca:	f000 fbd1 	bl	801c170 <USBD_CtlSendData>
              break;
 801b9ce:	e004      	b.n	801b9da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801b9d0:	6839      	ldr	r1, [r7, #0]
 801b9d2:	6878      	ldr	r0, [r7, #4]
 801b9d4:	f000 fb5b 	bl	801c08e <USBD_CtlError>
              break;
 801b9d8:	bf00      	nop
          }
          break;
 801b9da:	e004      	b.n	801b9e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801b9dc:	6839      	ldr	r1, [r7, #0]
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f000 fb55 	bl	801c08e <USBD_CtlError>
          break;
 801b9e4:	bf00      	nop
      }
      break;
 801b9e6:	e005      	b.n	801b9f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801b9e8:	6839      	ldr	r1, [r7, #0]
 801b9ea:	6878      	ldr	r0, [r7, #4]
 801b9ec:	f000 fb4f 	bl	801c08e <USBD_CtlError>
      break;
 801b9f0:	e000      	b.n	801b9f4 <USBD_StdEPReq+0x330>
      break;
 801b9f2:	bf00      	nop
  }

  return ret;
 801b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	3710      	adds	r7, #16
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}
	...

0801ba00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b084      	sub	sp, #16
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	6078      	str	r0, [r7, #4]
 801ba08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801ba0e:	2300      	movs	r3, #0
 801ba10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ba12:	2300      	movs	r3, #0
 801ba14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	885b      	ldrh	r3, [r3, #2]
 801ba1a:	0a1b      	lsrs	r3, r3, #8
 801ba1c:	b29b      	uxth	r3, r3
 801ba1e:	3b01      	subs	r3, #1
 801ba20:	2b06      	cmp	r3, #6
 801ba22:	f200 8128 	bhi.w	801bc76 <USBD_GetDescriptor+0x276>
 801ba26:	a201      	add	r2, pc, #4	; (adr r2, 801ba2c <USBD_GetDescriptor+0x2c>)
 801ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba2c:	0801ba49 	.word	0x0801ba49
 801ba30:	0801ba61 	.word	0x0801ba61
 801ba34:	0801baa1 	.word	0x0801baa1
 801ba38:	0801bc77 	.word	0x0801bc77
 801ba3c:	0801bc77 	.word	0x0801bc77
 801ba40:	0801bc17 	.word	0x0801bc17
 801ba44:	0801bc43 	.word	0x0801bc43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	7c12      	ldrb	r2, [r2, #16]
 801ba54:	f107 0108 	add.w	r1, r7, #8
 801ba58:	4610      	mov	r0, r2
 801ba5a:	4798      	blx	r3
 801ba5c:	60f8      	str	r0, [r7, #12]
      break;
 801ba5e:	e112      	b.n	801bc86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	7c1b      	ldrb	r3, [r3, #16]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d10d      	bne.n	801ba84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba70:	f107 0208 	add.w	r2, r7, #8
 801ba74:	4610      	mov	r0, r2
 801ba76:	4798      	blx	r3
 801ba78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	2202      	movs	r2, #2
 801ba80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ba82:	e100      	b.n	801bc86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba8c:	f107 0208 	add.w	r2, r7, #8
 801ba90:	4610      	mov	r0, r2
 801ba92:	4798      	blx	r3
 801ba94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	3301      	adds	r3, #1
 801ba9a:	2202      	movs	r2, #2
 801ba9c:	701a      	strb	r2, [r3, #0]
      break;
 801ba9e:	e0f2      	b.n	801bc86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801baa0:	683b      	ldr	r3, [r7, #0]
 801baa2:	885b      	ldrh	r3, [r3, #2]
 801baa4:	b2db      	uxtb	r3, r3
 801baa6:	2b05      	cmp	r3, #5
 801baa8:	f200 80ac 	bhi.w	801bc04 <USBD_GetDescriptor+0x204>
 801baac:	a201      	add	r2, pc, #4	; (adr r2, 801bab4 <USBD_GetDescriptor+0xb4>)
 801baae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bab2:	bf00      	nop
 801bab4:	0801bacd 	.word	0x0801bacd
 801bab8:	0801bb01 	.word	0x0801bb01
 801babc:	0801bb35 	.word	0x0801bb35
 801bac0:	0801bb69 	.word	0x0801bb69
 801bac4:	0801bb9d 	.word	0x0801bb9d
 801bac8:	0801bbd1 	.word	0x0801bbd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bad2:	685b      	ldr	r3, [r3, #4]
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d00b      	beq.n	801baf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bade:	685b      	ldr	r3, [r3, #4]
 801bae0:	687a      	ldr	r2, [r7, #4]
 801bae2:	7c12      	ldrb	r2, [r2, #16]
 801bae4:	f107 0108 	add.w	r1, r7, #8
 801bae8:	4610      	mov	r0, r2
 801baea:	4798      	blx	r3
 801baec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801baee:	e091      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801baf0:	6839      	ldr	r1, [r7, #0]
 801baf2:	6878      	ldr	r0, [r7, #4]
 801baf4:	f000 facb 	bl	801c08e <USBD_CtlError>
            err++;
 801baf8:	7afb      	ldrb	r3, [r7, #11]
 801bafa:	3301      	adds	r3, #1
 801bafc:	72fb      	strb	r3, [r7, #11]
          break;
 801bafe:	e089      	b.n	801bc14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb06:	689b      	ldr	r3, [r3, #8]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d00b      	beq.n	801bb24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb12:	689b      	ldr	r3, [r3, #8]
 801bb14:	687a      	ldr	r2, [r7, #4]
 801bb16:	7c12      	ldrb	r2, [r2, #16]
 801bb18:	f107 0108 	add.w	r1, r7, #8
 801bb1c:	4610      	mov	r0, r2
 801bb1e:	4798      	blx	r3
 801bb20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb22:	e077      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb24:	6839      	ldr	r1, [r7, #0]
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f000 fab1 	bl	801c08e <USBD_CtlError>
            err++;
 801bb2c:	7afb      	ldrb	r3, [r7, #11]
 801bb2e:	3301      	adds	r3, #1
 801bb30:	72fb      	strb	r3, [r7, #11]
          break;
 801bb32:	e06f      	b.n	801bc14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb3a:	68db      	ldr	r3, [r3, #12]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d00b      	beq.n	801bb58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb46:	68db      	ldr	r3, [r3, #12]
 801bb48:	687a      	ldr	r2, [r7, #4]
 801bb4a:	7c12      	ldrb	r2, [r2, #16]
 801bb4c:	f107 0108 	add.w	r1, r7, #8
 801bb50:	4610      	mov	r0, r2
 801bb52:	4798      	blx	r3
 801bb54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb56:	e05d      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb58:	6839      	ldr	r1, [r7, #0]
 801bb5a:	6878      	ldr	r0, [r7, #4]
 801bb5c:	f000 fa97 	bl	801c08e <USBD_CtlError>
            err++;
 801bb60:	7afb      	ldrb	r3, [r7, #11]
 801bb62:	3301      	adds	r3, #1
 801bb64:	72fb      	strb	r3, [r7, #11]
          break;
 801bb66:	e055      	b.n	801bc14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb6e:	691b      	ldr	r3, [r3, #16]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d00b      	beq.n	801bb8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bb7a:	691b      	ldr	r3, [r3, #16]
 801bb7c:	687a      	ldr	r2, [r7, #4]
 801bb7e:	7c12      	ldrb	r2, [r2, #16]
 801bb80:	f107 0108 	add.w	r1, r7, #8
 801bb84:	4610      	mov	r0, r2
 801bb86:	4798      	blx	r3
 801bb88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bb8a:	e043      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bb8c:	6839      	ldr	r1, [r7, #0]
 801bb8e:	6878      	ldr	r0, [r7, #4]
 801bb90:	f000 fa7d 	bl	801c08e <USBD_CtlError>
            err++;
 801bb94:	7afb      	ldrb	r3, [r7, #11]
 801bb96:	3301      	adds	r3, #1
 801bb98:	72fb      	strb	r3, [r7, #11]
          break;
 801bb9a:	e03b      	b.n	801bc14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bba2:	695b      	ldr	r3, [r3, #20]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d00b      	beq.n	801bbc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbae:	695b      	ldr	r3, [r3, #20]
 801bbb0:	687a      	ldr	r2, [r7, #4]
 801bbb2:	7c12      	ldrb	r2, [r2, #16]
 801bbb4:	f107 0108 	add.w	r1, r7, #8
 801bbb8:	4610      	mov	r0, r2
 801bbba:	4798      	blx	r3
 801bbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bbbe:	e029      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bbc0:	6839      	ldr	r1, [r7, #0]
 801bbc2:	6878      	ldr	r0, [r7, #4]
 801bbc4:	f000 fa63 	bl	801c08e <USBD_CtlError>
            err++;
 801bbc8:	7afb      	ldrb	r3, [r7, #11]
 801bbca:	3301      	adds	r3, #1
 801bbcc:	72fb      	strb	r3, [r7, #11]
          break;
 801bbce:	e021      	b.n	801bc14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbd6:	699b      	ldr	r3, [r3, #24]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d00b      	beq.n	801bbf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801bbe2:	699b      	ldr	r3, [r3, #24]
 801bbe4:	687a      	ldr	r2, [r7, #4]
 801bbe6:	7c12      	ldrb	r2, [r2, #16]
 801bbe8:	f107 0108 	add.w	r1, r7, #8
 801bbec:	4610      	mov	r0, r2
 801bbee:	4798      	blx	r3
 801bbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801bbf2:	e00f      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801bbf4:	6839      	ldr	r1, [r7, #0]
 801bbf6:	6878      	ldr	r0, [r7, #4]
 801bbf8:	f000 fa49 	bl	801c08e <USBD_CtlError>
            err++;
 801bbfc:	7afb      	ldrb	r3, [r7, #11]
 801bbfe:	3301      	adds	r3, #1
 801bc00:	72fb      	strb	r3, [r7, #11]
          break;
 801bc02:	e007      	b.n	801bc14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801bc04:	6839      	ldr	r1, [r7, #0]
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	f000 fa41 	bl	801c08e <USBD_CtlError>
          err++;
 801bc0c:	7afb      	ldrb	r3, [r7, #11]
 801bc0e:	3301      	adds	r3, #1
 801bc10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801bc12:	bf00      	nop
      }
      break;
 801bc14:	e037      	b.n	801bc86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	7c1b      	ldrb	r3, [r3, #16]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d109      	bne.n	801bc32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc26:	f107 0208 	add.w	r2, r7, #8
 801bc2a:	4610      	mov	r0, r2
 801bc2c:	4798      	blx	r3
 801bc2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc30:	e029      	b.n	801bc86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bc32:	6839      	ldr	r1, [r7, #0]
 801bc34:	6878      	ldr	r0, [r7, #4]
 801bc36:	f000 fa2a 	bl	801c08e <USBD_CtlError>
        err++;
 801bc3a:	7afb      	ldrb	r3, [r7, #11]
 801bc3c:	3301      	adds	r3, #1
 801bc3e:	72fb      	strb	r3, [r7, #11]
      break;
 801bc40:	e021      	b.n	801bc86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	7c1b      	ldrb	r3, [r3, #16]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d10d      	bne.n	801bc66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc52:	f107 0208 	add.w	r2, r7, #8
 801bc56:	4610      	mov	r0, r2
 801bc58:	4798      	blx	r3
 801bc5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	3301      	adds	r3, #1
 801bc60:	2207      	movs	r2, #7
 801bc62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bc64:	e00f      	b.n	801bc86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801bc66:	6839      	ldr	r1, [r7, #0]
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f000 fa10 	bl	801c08e <USBD_CtlError>
        err++;
 801bc6e:	7afb      	ldrb	r3, [r7, #11]
 801bc70:	3301      	adds	r3, #1
 801bc72:	72fb      	strb	r3, [r7, #11]
      break;
 801bc74:	e007      	b.n	801bc86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801bc76:	6839      	ldr	r1, [r7, #0]
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	f000 fa08 	bl	801c08e <USBD_CtlError>
      err++;
 801bc7e:	7afb      	ldrb	r3, [r7, #11]
 801bc80:	3301      	adds	r3, #1
 801bc82:	72fb      	strb	r3, [r7, #11]
      break;
 801bc84:	bf00      	nop
  }

  if (err != 0U)
 801bc86:	7afb      	ldrb	r3, [r7, #11]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d11e      	bne.n	801bcca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	88db      	ldrh	r3, [r3, #6]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d016      	beq.n	801bcc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801bc94:	893b      	ldrh	r3, [r7, #8]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d00e      	beq.n	801bcb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801bc9a:	683b      	ldr	r3, [r7, #0]
 801bc9c:	88da      	ldrh	r2, [r3, #6]
 801bc9e:	893b      	ldrh	r3, [r7, #8]
 801bca0:	4293      	cmp	r3, r2
 801bca2:	bf28      	it	cs
 801bca4:	4613      	movcs	r3, r2
 801bca6:	b29b      	uxth	r3, r3
 801bca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bcaa:	893b      	ldrh	r3, [r7, #8]
 801bcac:	461a      	mov	r2, r3
 801bcae:	68f9      	ldr	r1, [r7, #12]
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f000 fa5d 	bl	801c170 <USBD_CtlSendData>
 801bcb6:	e009      	b.n	801bccc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801bcb8:	6839      	ldr	r1, [r7, #0]
 801bcba:	6878      	ldr	r0, [r7, #4]
 801bcbc:	f000 f9e7 	bl	801c08e <USBD_CtlError>
 801bcc0:	e004      	b.n	801bccc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f000 faae 	bl	801c224 <USBD_CtlSendStatus>
 801bcc8:	e000      	b.n	801bccc <USBD_GetDescriptor+0x2cc>
    return;
 801bcca:	bf00      	nop
  }
}
 801bccc:	3710      	adds	r7, #16
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}
 801bcd2:	bf00      	nop

0801bcd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b084      	sub	sp, #16
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
 801bcdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	889b      	ldrh	r3, [r3, #4]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d131      	bne.n	801bd4a <USBD_SetAddress+0x76>
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	88db      	ldrh	r3, [r3, #6]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d12d      	bne.n	801bd4a <USBD_SetAddress+0x76>
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	885b      	ldrh	r3, [r3, #2]
 801bcf2:	2b7f      	cmp	r3, #127	; 0x7f
 801bcf4:	d829      	bhi.n	801bd4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bcf6:	683b      	ldr	r3, [r7, #0]
 801bcf8:	885b      	ldrh	r3, [r3, #2]
 801bcfa:	b2db      	uxtb	r3, r3
 801bcfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bd00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bd08:	b2db      	uxtb	r3, r3
 801bd0a:	2b03      	cmp	r3, #3
 801bd0c:	d104      	bne.n	801bd18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801bd0e:	6839      	ldr	r1, [r7, #0]
 801bd10:	6878      	ldr	r0, [r7, #4]
 801bd12:	f000 f9bc 	bl	801c08e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd16:	e01d      	b.n	801bd54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	7bfa      	ldrb	r2, [r7, #15]
 801bd1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bd20:	7bfb      	ldrb	r3, [r7, #15]
 801bd22:	4619      	mov	r1, r3
 801bd24:	6878      	ldr	r0, [r7, #4]
 801bd26:	f000 ff0b 	bl	801cb40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 fa7a 	bl	801c224 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bd30:	7bfb      	ldrb	r3, [r7, #15]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d004      	beq.n	801bd40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2202      	movs	r2, #2
 801bd3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd3e:	e009      	b.n	801bd54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	2201      	movs	r2, #1
 801bd44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd48:	e004      	b.n	801bd54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bd4a:	6839      	ldr	r1, [r7, #0]
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f000 f99e 	bl	801c08e <USBD_CtlError>
  }
}
 801bd52:	bf00      	nop
 801bd54:	bf00      	nop
 801bd56:	3710      	adds	r7, #16
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	bd80      	pop	{r7, pc}

0801bd5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b084      	sub	sp, #16
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bd66:	2300      	movs	r3, #0
 801bd68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bd6a:	683b      	ldr	r3, [r7, #0]
 801bd6c:	885b      	ldrh	r3, [r3, #2]
 801bd6e:	b2da      	uxtb	r2, r3
 801bd70:	4b4e      	ldr	r3, [pc, #312]	; (801beac <USBD_SetConfig+0x150>)
 801bd72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bd74:	4b4d      	ldr	r3, [pc, #308]	; (801beac <USBD_SetConfig+0x150>)
 801bd76:	781b      	ldrb	r3, [r3, #0]
 801bd78:	2b01      	cmp	r3, #1
 801bd7a:	d905      	bls.n	801bd88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801bd7c:	6839      	ldr	r1, [r7, #0]
 801bd7e:	6878      	ldr	r0, [r7, #4]
 801bd80:	f000 f985 	bl	801c08e <USBD_CtlError>
    return USBD_FAIL;
 801bd84:	2303      	movs	r3, #3
 801bd86:	e08c      	b.n	801bea2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	2b02      	cmp	r3, #2
 801bd92:	d002      	beq.n	801bd9a <USBD_SetConfig+0x3e>
 801bd94:	2b03      	cmp	r3, #3
 801bd96:	d029      	beq.n	801bdec <USBD_SetConfig+0x90>
 801bd98:	e075      	b.n	801be86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801bd9a:	4b44      	ldr	r3, [pc, #272]	; (801beac <USBD_SetConfig+0x150>)
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d020      	beq.n	801bde4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801bda2:	4b42      	ldr	r3, [pc, #264]	; (801beac <USBD_SetConfig+0x150>)
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	461a      	mov	r2, r3
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801bdac:	4b3f      	ldr	r3, [pc, #252]	; (801beac <USBD_SetConfig+0x150>)
 801bdae:	781b      	ldrb	r3, [r3, #0]
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	6878      	ldr	r0, [r7, #4]
 801bdb4:	f7fe ffe7 	bl	801ad86 <USBD_SetClassConfig>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801bdbc:	7bfb      	ldrb	r3, [r7, #15]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d008      	beq.n	801bdd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801bdc2:	6839      	ldr	r1, [r7, #0]
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f000 f962 	bl	801c08e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	2202      	movs	r2, #2
 801bdce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801bdd2:	e065      	b.n	801bea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f000 fa25 	bl	801c224 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	2203      	movs	r2, #3
 801bdde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801bde2:	e05d      	b.n	801bea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801bde4:	6878      	ldr	r0, [r7, #4]
 801bde6:	f000 fa1d 	bl	801c224 <USBD_CtlSendStatus>
      break;
 801bdea:	e059      	b.n	801bea0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801bdec:	4b2f      	ldr	r3, [pc, #188]	; (801beac <USBD_SetConfig+0x150>)
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d112      	bne.n	801be1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2202      	movs	r2, #2
 801bdf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801bdfc:	4b2b      	ldr	r3, [pc, #172]	; (801beac <USBD_SetConfig+0x150>)
 801bdfe:	781b      	ldrb	r3, [r3, #0]
 801be00:	461a      	mov	r2, r3
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801be06:	4b29      	ldr	r3, [pc, #164]	; (801beac <USBD_SetConfig+0x150>)
 801be08:	781b      	ldrb	r3, [r3, #0]
 801be0a:	4619      	mov	r1, r3
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	f7fe ffd6 	bl	801adbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801be12:	6878      	ldr	r0, [r7, #4]
 801be14:	f000 fa06 	bl	801c224 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801be18:	e042      	b.n	801bea0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801be1a:	4b24      	ldr	r3, [pc, #144]	; (801beac <USBD_SetConfig+0x150>)
 801be1c:	781b      	ldrb	r3, [r3, #0]
 801be1e:	461a      	mov	r2, r3
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	685b      	ldr	r3, [r3, #4]
 801be24:	429a      	cmp	r2, r3
 801be26:	d02a      	beq.n	801be7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	685b      	ldr	r3, [r3, #4]
 801be2c:	b2db      	uxtb	r3, r3
 801be2e:	4619      	mov	r1, r3
 801be30:	6878      	ldr	r0, [r7, #4]
 801be32:	f7fe ffc4 	bl	801adbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801be36:	4b1d      	ldr	r3, [pc, #116]	; (801beac <USBD_SetConfig+0x150>)
 801be38:	781b      	ldrb	r3, [r3, #0]
 801be3a:	461a      	mov	r2, r3
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801be40:	4b1a      	ldr	r3, [pc, #104]	; (801beac <USBD_SetConfig+0x150>)
 801be42:	781b      	ldrb	r3, [r3, #0]
 801be44:	4619      	mov	r1, r3
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f7fe ff9d 	bl	801ad86 <USBD_SetClassConfig>
 801be4c:	4603      	mov	r3, r0
 801be4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801be50:	7bfb      	ldrb	r3, [r7, #15]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d00f      	beq.n	801be76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801be56:	6839      	ldr	r1, [r7, #0]
 801be58:	6878      	ldr	r0, [r7, #4]
 801be5a:	f000 f918 	bl	801c08e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	685b      	ldr	r3, [r3, #4]
 801be62:	b2db      	uxtb	r3, r3
 801be64:	4619      	mov	r1, r3
 801be66:	6878      	ldr	r0, [r7, #4]
 801be68:	f7fe ffa9 	bl	801adbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	2202      	movs	r2, #2
 801be70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801be74:	e014      	b.n	801bea0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	f000 f9d4 	bl	801c224 <USBD_CtlSendStatus>
      break;
 801be7c:	e010      	b.n	801bea0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f000 f9d0 	bl	801c224 <USBD_CtlSendStatus>
      break;
 801be84:	e00c      	b.n	801bea0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801be86:	6839      	ldr	r1, [r7, #0]
 801be88:	6878      	ldr	r0, [r7, #4]
 801be8a:	f000 f900 	bl	801c08e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801be8e:	4b07      	ldr	r3, [pc, #28]	; (801beac <USBD_SetConfig+0x150>)
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	4619      	mov	r1, r3
 801be94:	6878      	ldr	r0, [r7, #4]
 801be96:	f7fe ff92 	bl	801adbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801be9a:	2303      	movs	r3, #3
 801be9c:	73fb      	strb	r3, [r7, #15]
      break;
 801be9e:	bf00      	nop
  }

  return ret;
 801bea0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	3710      	adds	r7, #16
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	bf00      	nop
 801beac:	24001ad8 	.word	0x24001ad8

0801beb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b082      	sub	sp, #8
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
 801beb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801beba:	683b      	ldr	r3, [r7, #0]
 801bebc:	88db      	ldrh	r3, [r3, #6]
 801bebe:	2b01      	cmp	r3, #1
 801bec0:	d004      	beq.n	801becc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801bec2:	6839      	ldr	r1, [r7, #0]
 801bec4:	6878      	ldr	r0, [r7, #4]
 801bec6:	f000 f8e2 	bl	801c08e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801beca:	e023      	b.n	801bf14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bed2:	b2db      	uxtb	r3, r3
 801bed4:	2b02      	cmp	r3, #2
 801bed6:	dc02      	bgt.n	801bede <USBD_GetConfig+0x2e>
 801bed8:	2b00      	cmp	r3, #0
 801beda:	dc03      	bgt.n	801bee4 <USBD_GetConfig+0x34>
 801bedc:	e015      	b.n	801bf0a <USBD_GetConfig+0x5a>
 801bede:	2b03      	cmp	r3, #3
 801bee0:	d00b      	beq.n	801befa <USBD_GetConfig+0x4a>
 801bee2:	e012      	b.n	801bf0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	2200      	movs	r2, #0
 801bee8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	3308      	adds	r3, #8
 801beee:	2201      	movs	r2, #1
 801bef0:	4619      	mov	r1, r3
 801bef2:	6878      	ldr	r0, [r7, #4]
 801bef4:	f000 f93c 	bl	801c170 <USBD_CtlSendData>
        break;
 801bef8:	e00c      	b.n	801bf14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	3304      	adds	r3, #4
 801befe:	2201      	movs	r2, #1
 801bf00:	4619      	mov	r1, r3
 801bf02:	6878      	ldr	r0, [r7, #4]
 801bf04:	f000 f934 	bl	801c170 <USBD_CtlSendData>
        break;
 801bf08:	e004      	b.n	801bf14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801bf0a:	6839      	ldr	r1, [r7, #0]
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f000 f8be 	bl	801c08e <USBD_CtlError>
        break;
 801bf12:	bf00      	nop
}
 801bf14:	bf00      	nop
 801bf16:	3708      	adds	r7, #8
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}

0801bf1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b082      	sub	sp, #8
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	6078      	str	r0, [r7, #4]
 801bf24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	3b01      	subs	r3, #1
 801bf30:	2b02      	cmp	r3, #2
 801bf32:	d81e      	bhi.n	801bf72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bf34:	683b      	ldr	r3, [r7, #0]
 801bf36:	88db      	ldrh	r3, [r3, #6]
 801bf38:	2b02      	cmp	r3, #2
 801bf3a:	d004      	beq.n	801bf46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801bf3c:	6839      	ldr	r1, [r7, #0]
 801bf3e:	6878      	ldr	r0, [r7, #4]
 801bf40:	f000 f8a5 	bl	801c08e <USBD_CtlError>
        break;
 801bf44:	e01a      	b.n	801bf7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	2201      	movs	r2, #1
 801bf4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d005      	beq.n	801bf62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	68db      	ldr	r3, [r3, #12]
 801bf5a:	f043 0202 	orr.w	r2, r3, #2
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	330c      	adds	r3, #12
 801bf66:	2202      	movs	r2, #2
 801bf68:	4619      	mov	r1, r3
 801bf6a:	6878      	ldr	r0, [r7, #4]
 801bf6c:	f000 f900 	bl	801c170 <USBD_CtlSendData>
      break;
 801bf70:	e004      	b.n	801bf7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801bf72:	6839      	ldr	r1, [r7, #0]
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f000 f88a 	bl	801c08e <USBD_CtlError>
      break;
 801bf7a:	bf00      	nop
  }
}
 801bf7c:	bf00      	nop
 801bf7e:	3708      	adds	r7, #8
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bd80      	pop	{r7, pc}

0801bf84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b082      	sub	sp, #8
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	6078      	str	r0, [r7, #4]
 801bf8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bf8e:	683b      	ldr	r3, [r7, #0]
 801bf90:	885b      	ldrh	r3, [r3, #2]
 801bf92:	2b01      	cmp	r3, #1
 801bf94:	d107      	bne.n	801bfa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	2201      	movs	r2, #1
 801bf9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801bf9e:	6878      	ldr	r0, [r7, #4]
 801bfa0:	f000 f940 	bl	801c224 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801bfa4:	e013      	b.n	801bfce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	885b      	ldrh	r3, [r3, #2]
 801bfaa:	2b02      	cmp	r3, #2
 801bfac:	d10b      	bne.n	801bfc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	889b      	ldrh	r3, [r3, #4]
 801bfb2:	0a1b      	lsrs	r3, r3, #8
 801bfb4:	b29b      	uxth	r3, r3
 801bfb6:	b2da      	uxtb	r2, r3
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801bfbe:	6878      	ldr	r0, [r7, #4]
 801bfc0:	f000 f930 	bl	801c224 <USBD_CtlSendStatus>
}
 801bfc4:	e003      	b.n	801bfce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801bfc6:	6839      	ldr	r1, [r7, #0]
 801bfc8:	6878      	ldr	r0, [r7, #4]
 801bfca:	f000 f860 	bl	801c08e <USBD_CtlError>
}
 801bfce:	bf00      	nop
 801bfd0:	3708      	adds	r7, #8
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	bd80      	pop	{r7, pc}

0801bfd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bfd6:	b580      	push	{r7, lr}
 801bfd8:	b082      	sub	sp, #8
 801bfda:	af00      	add	r7, sp, #0
 801bfdc:	6078      	str	r0, [r7, #4]
 801bfde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bfe6:	b2db      	uxtb	r3, r3
 801bfe8:	3b01      	subs	r3, #1
 801bfea:	2b02      	cmp	r3, #2
 801bfec:	d80b      	bhi.n	801c006 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	885b      	ldrh	r3, [r3, #2]
 801bff2:	2b01      	cmp	r3, #1
 801bff4:	d10c      	bne.n	801c010 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	2200      	movs	r2, #0
 801bffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801bffe:	6878      	ldr	r0, [r7, #4]
 801c000:	f000 f910 	bl	801c224 <USBD_CtlSendStatus>
      }
      break;
 801c004:	e004      	b.n	801c010 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801c006:	6839      	ldr	r1, [r7, #0]
 801c008:	6878      	ldr	r0, [r7, #4]
 801c00a:	f000 f840 	bl	801c08e <USBD_CtlError>
      break;
 801c00e:	e000      	b.n	801c012 <USBD_ClrFeature+0x3c>
      break;
 801c010:	bf00      	nop
  }
}
 801c012:	bf00      	nop
 801c014:	3708      	adds	r7, #8
 801c016:	46bd      	mov	sp, r7
 801c018:	bd80      	pop	{r7, pc}

0801c01a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c01a:	b580      	push	{r7, lr}
 801c01c:	b084      	sub	sp, #16
 801c01e:	af00      	add	r7, sp, #0
 801c020:	6078      	str	r0, [r7, #4]
 801c022:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	781a      	ldrb	r2, [r3, #0]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	3301      	adds	r3, #1
 801c034:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	781a      	ldrb	r2, [r3, #0]
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	3301      	adds	r3, #1
 801c042:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801c044:	68f8      	ldr	r0, [r7, #12]
 801c046:	f7ff fa41 	bl	801b4cc <SWAPBYTE>
 801c04a:	4603      	mov	r3, r0
 801c04c:	461a      	mov	r2, r3
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	3301      	adds	r3, #1
 801c056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	3301      	adds	r3, #1
 801c05c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801c05e:	68f8      	ldr	r0, [r7, #12]
 801c060:	f7ff fa34 	bl	801b4cc <SWAPBYTE>
 801c064:	4603      	mov	r3, r0
 801c066:	461a      	mov	r2, r3
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	3301      	adds	r3, #1
 801c070:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	3301      	adds	r3, #1
 801c076:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801c078:	68f8      	ldr	r0, [r7, #12]
 801c07a:	f7ff fa27 	bl	801b4cc <SWAPBYTE>
 801c07e:	4603      	mov	r3, r0
 801c080:	461a      	mov	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	80da      	strh	r2, [r3, #6]
}
 801c086:	bf00      	nop
 801c088:	3710      	adds	r7, #16
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}

0801c08e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c08e:	b580      	push	{r7, lr}
 801c090:	b082      	sub	sp, #8
 801c092:	af00      	add	r7, sp, #0
 801c094:	6078      	str	r0, [r7, #4]
 801c096:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801c098:	2180      	movs	r1, #128	; 0x80
 801c09a:	6878      	ldr	r0, [r7, #4]
 801c09c:	f000 fce6 	bl	801ca6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801c0a0:	2100      	movs	r1, #0
 801c0a2:	6878      	ldr	r0, [r7, #4]
 801c0a4:	f000 fce2 	bl	801ca6c <USBD_LL_StallEP>
}
 801c0a8:	bf00      	nop
 801c0aa:	3708      	adds	r7, #8
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}

0801c0b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b086      	sub	sp, #24
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	60f8      	str	r0, [r7, #12]
 801c0b8:	60b9      	str	r1, [r7, #8]
 801c0ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c0bc:	2300      	movs	r3, #0
 801c0be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d036      	beq.n	801c134 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801c0ca:	6938      	ldr	r0, [r7, #16]
 801c0cc:	f000 f836 	bl	801c13c <USBD_GetLen>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	3301      	adds	r3, #1
 801c0d4:	b29b      	uxth	r3, r3
 801c0d6:	005b      	lsls	r3, r3, #1
 801c0d8:	b29a      	uxth	r2, r3
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801c0de:	7dfb      	ldrb	r3, [r7, #23]
 801c0e0:	68ba      	ldr	r2, [r7, #8]
 801c0e2:	4413      	add	r3, r2
 801c0e4:	687a      	ldr	r2, [r7, #4]
 801c0e6:	7812      	ldrb	r2, [r2, #0]
 801c0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 801c0ea:	7dfb      	ldrb	r3, [r7, #23]
 801c0ec:	3301      	adds	r3, #1
 801c0ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801c0f0:	7dfb      	ldrb	r3, [r7, #23]
 801c0f2:	68ba      	ldr	r2, [r7, #8]
 801c0f4:	4413      	add	r3, r2
 801c0f6:	2203      	movs	r2, #3
 801c0f8:	701a      	strb	r2, [r3, #0]
  idx++;
 801c0fa:	7dfb      	ldrb	r3, [r7, #23]
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801c100:	e013      	b.n	801c12a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801c102:	7dfb      	ldrb	r3, [r7, #23]
 801c104:	68ba      	ldr	r2, [r7, #8]
 801c106:	4413      	add	r3, r2
 801c108:	693a      	ldr	r2, [r7, #16]
 801c10a:	7812      	ldrb	r2, [r2, #0]
 801c10c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801c10e:	693b      	ldr	r3, [r7, #16]
 801c110:	3301      	adds	r3, #1
 801c112:	613b      	str	r3, [r7, #16]
    idx++;
 801c114:	7dfb      	ldrb	r3, [r7, #23]
 801c116:	3301      	adds	r3, #1
 801c118:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801c11a:	7dfb      	ldrb	r3, [r7, #23]
 801c11c:	68ba      	ldr	r2, [r7, #8]
 801c11e:	4413      	add	r3, r2
 801c120:	2200      	movs	r2, #0
 801c122:	701a      	strb	r2, [r3, #0]
    idx++;
 801c124:	7dfb      	ldrb	r3, [r7, #23]
 801c126:	3301      	adds	r3, #1
 801c128:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801c12a:	693b      	ldr	r3, [r7, #16]
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d1e7      	bne.n	801c102 <USBD_GetString+0x52>
 801c132:	e000      	b.n	801c136 <USBD_GetString+0x86>
    return;
 801c134:	bf00      	nop
  }
}
 801c136:	3718      	adds	r7, #24
 801c138:	46bd      	mov	sp, r7
 801c13a:	bd80      	pop	{r7, pc}

0801c13c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c13c:	b480      	push	{r7}
 801c13e:	b085      	sub	sp, #20
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c144:	2300      	movs	r3, #0
 801c146:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801c14c:	e005      	b.n	801c15a <USBD_GetLen+0x1e>
  {
    len++;
 801c14e:	7bfb      	ldrb	r3, [r7, #15]
 801c150:	3301      	adds	r3, #1
 801c152:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801c154:	68bb      	ldr	r3, [r7, #8]
 801c156:	3301      	adds	r3, #1
 801c158:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801c15a:	68bb      	ldr	r3, [r7, #8]
 801c15c:	781b      	ldrb	r3, [r3, #0]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d1f5      	bne.n	801c14e <USBD_GetLen+0x12>
  }

  return len;
 801c162:	7bfb      	ldrb	r3, [r7, #15]
}
 801c164:	4618      	mov	r0, r3
 801c166:	3714      	adds	r7, #20
 801c168:	46bd      	mov	sp, r7
 801c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16e:	4770      	bx	lr

0801c170 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	60f8      	str	r0, [r7, #12]
 801c178:	60b9      	str	r1, [r7, #8]
 801c17a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	2202      	movs	r2, #2
 801c180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	687a      	ldr	r2, [r7, #4]
 801c188:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	687a      	ldr	r2, [r7, #4]
 801c18e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	68ba      	ldr	r2, [r7, #8]
 801c194:	2100      	movs	r1, #0
 801c196:	68f8      	ldr	r0, [r7, #12]
 801c198:	f000 fcf1 	bl	801cb7e <USBD_LL_Transmit>

  return USBD_OK;
 801c19c:	2300      	movs	r3, #0
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	3710      	adds	r7, #16
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}

0801c1a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801c1a6:	b580      	push	{r7, lr}
 801c1a8:	b084      	sub	sp, #16
 801c1aa:	af00      	add	r7, sp, #0
 801c1ac:	60f8      	str	r0, [r7, #12]
 801c1ae:	60b9      	str	r1, [r7, #8]
 801c1b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	68ba      	ldr	r2, [r7, #8]
 801c1b6:	2100      	movs	r1, #0
 801c1b8:	68f8      	ldr	r0, [r7, #12]
 801c1ba:	f000 fce0 	bl	801cb7e <USBD_LL_Transmit>

  return USBD_OK;
 801c1be:	2300      	movs	r3, #0
}
 801c1c0:	4618      	mov	r0, r3
 801c1c2:	3710      	adds	r7, #16
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	bd80      	pop	{r7, pc}

0801c1c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b084      	sub	sp, #16
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	60f8      	str	r0, [r7, #12]
 801c1d0:	60b9      	str	r1, [r7, #8]
 801c1d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	2203      	movs	r2, #3
 801c1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	687a      	ldr	r2, [r7, #4]
 801c1e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	687a      	ldr	r2, [r7, #4]
 801c1e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	68ba      	ldr	r2, [r7, #8]
 801c1f0:	2100      	movs	r1, #0
 801c1f2:	68f8      	ldr	r0, [r7, #12]
 801c1f4:	f000 fce4 	bl	801cbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c1f8:	2300      	movs	r3, #0
}
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	3710      	adds	r7, #16
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd80      	pop	{r7, pc}

0801c202 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801c202:	b580      	push	{r7, lr}
 801c204:	b084      	sub	sp, #16
 801c206:	af00      	add	r7, sp, #0
 801c208:	60f8      	str	r0, [r7, #12]
 801c20a:	60b9      	str	r1, [r7, #8]
 801c20c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	68ba      	ldr	r2, [r7, #8]
 801c212:	2100      	movs	r1, #0
 801c214:	68f8      	ldr	r0, [r7, #12]
 801c216:	f000 fcd3 	bl	801cbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c21a:	2300      	movs	r3, #0
}
 801c21c:	4618      	mov	r0, r3
 801c21e:	3710      	adds	r7, #16
 801c220:	46bd      	mov	sp, r7
 801c222:	bd80      	pop	{r7, pc}

0801c224 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c224:	b580      	push	{r7, lr}
 801c226:	b082      	sub	sp, #8
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	2204      	movs	r2, #4
 801c230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c234:	2300      	movs	r3, #0
 801c236:	2200      	movs	r2, #0
 801c238:	2100      	movs	r1, #0
 801c23a:	6878      	ldr	r0, [r7, #4]
 801c23c:	f000 fc9f 	bl	801cb7e <USBD_LL_Transmit>

  return USBD_OK;
 801c240:	2300      	movs	r3, #0
}
 801c242:	4618      	mov	r0, r3
 801c244:	3708      	adds	r7, #8
 801c246:	46bd      	mov	sp, r7
 801c248:	bd80      	pop	{r7, pc}

0801c24a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c24a:	b580      	push	{r7, lr}
 801c24c:	b082      	sub	sp, #8
 801c24e:	af00      	add	r7, sp, #0
 801c250:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	2205      	movs	r2, #5
 801c256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c25a:	2300      	movs	r3, #0
 801c25c:	2200      	movs	r2, #0
 801c25e:	2100      	movs	r1, #0
 801c260:	6878      	ldr	r0, [r7, #4]
 801c262:	f000 fcad 	bl	801cbc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c266:	2300      	movs	r3, #0
}
 801c268:	4618      	mov	r0, r3
 801c26a:	3708      	adds	r7, #8
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c274:	2200      	movs	r2, #0
 801c276:	4913      	ldr	r1, [pc, #76]	; (801c2c4 <MX_USB_DEVICE_Init+0x54>)
 801c278:	4813      	ldr	r0, [pc, #76]	; (801c2c8 <MX_USB_DEVICE_Init+0x58>)
 801c27a:	f7fe fd07 	bl	801ac8c <USBD_Init>
 801c27e:	4603      	mov	r3, r0
 801c280:	2b00      	cmp	r3, #0
 801c282:	d001      	beq.n	801c288 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c284:	f7ee fc66 	bl	800ab54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c288:	4910      	ldr	r1, [pc, #64]	; (801c2cc <MX_USB_DEVICE_Init+0x5c>)
 801c28a:	480f      	ldr	r0, [pc, #60]	; (801c2c8 <MX_USB_DEVICE_Init+0x58>)
 801c28c:	f7fe fd2e 	bl	801acec <USBD_RegisterClass>
 801c290:	4603      	mov	r3, r0
 801c292:	2b00      	cmp	r3, #0
 801c294:	d001      	beq.n	801c29a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c296:	f7ee fc5d 	bl	800ab54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c29a:	490d      	ldr	r1, [pc, #52]	; (801c2d0 <MX_USB_DEVICE_Init+0x60>)
 801c29c:	480a      	ldr	r0, [pc, #40]	; (801c2c8 <MX_USB_DEVICE_Init+0x58>)
 801c29e:	f7fe fc65 	bl	801ab6c <USBD_CDC_RegisterInterface>
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d001      	beq.n	801c2ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c2a8:	f7ee fc54 	bl	800ab54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c2ac:	4806      	ldr	r0, [pc, #24]	; (801c2c8 <MX_USB_DEVICE_Init+0x58>)
 801c2ae:	f7fe fd53 	bl	801ad58 <USBD_Start>
 801c2b2:	4603      	mov	r3, r0
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d001      	beq.n	801c2bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c2b8:	f7ee fc4c 	bl	800ab54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801c2bc:	f7f5 fcc0 	bl	8011c40 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c2c0:	bf00      	nop
 801c2c2:	bd80      	pop	{r7, pc}
 801c2c4:	240000b0 	.word	0x240000b0
 801c2c8:	24001adc 	.word	0x24001adc
 801c2cc:	2400001c 	.word	0x2400001c
 801c2d0:	2400009c 	.word	0x2400009c

0801c2d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c2d8:	2200      	movs	r2, #0
 801c2da:	4905      	ldr	r1, [pc, #20]	; (801c2f0 <CDC_Init_FS+0x1c>)
 801c2dc:	4805      	ldr	r0, [pc, #20]	; (801c2f4 <CDC_Init_FS+0x20>)
 801c2de:	f7fe fc5f 	bl	801aba0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c2e2:	4905      	ldr	r1, [pc, #20]	; (801c2f8 <CDC_Init_FS+0x24>)
 801c2e4:	4803      	ldr	r0, [pc, #12]	; (801c2f4 <CDC_Init_FS+0x20>)
 801c2e6:	f7fe fc7d 	bl	801abe4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c2ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	bd80      	pop	{r7, pc}
 801c2f0:	240025b8 	.word	0x240025b8
 801c2f4:	24001adc 	.word	0x24001adc
 801c2f8:	24001db8 	.word	0x24001db8

0801c2fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c2fc:	b480      	push	{r7}
 801c2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c300:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c302:	4618      	mov	r0, r3
 801c304:	46bd      	mov	sp, r7
 801c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c30a:	4770      	bx	lr

0801c30c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c30c:	b480      	push	{r7}
 801c30e:	b083      	sub	sp, #12
 801c310:	af00      	add	r7, sp, #0
 801c312:	4603      	mov	r3, r0
 801c314:	6039      	str	r1, [r7, #0]
 801c316:	71fb      	strb	r3, [r7, #7]
 801c318:	4613      	mov	r3, r2
 801c31a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c31c:	79fb      	ldrb	r3, [r7, #7]
 801c31e:	2b23      	cmp	r3, #35	; 0x23
 801c320:	d84a      	bhi.n	801c3b8 <CDC_Control_FS+0xac>
 801c322:	a201      	add	r2, pc, #4	; (adr r2, 801c328 <CDC_Control_FS+0x1c>)
 801c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c328:	0801c3b9 	.word	0x0801c3b9
 801c32c:	0801c3b9 	.word	0x0801c3b9
 801c330:	0801c3b9 	.word	0x0801c3b9
 801c334:	0801c3b9 	.word	0x0801c3b9
 801c338:	0801c3b9 	.word	0x0801c3b9
 801c33c:	0801c3b9 	.word	0x0801c3b9
 801c340:	0801c3b9 	.word	0x0801c3b9
 801c344:	0801c3b9 	.word	0x0801c3b9
 801c348:	0801c3b9 	.word	0x0801c3b9
 801c34c:	0801c3b9 	.word	0x0801c3b9
 801c350:	0801c3b9 	.word	0x0801c3b9
 801c354:	0801c3b9 	.word	0x0801c3b9
 801c358:	0801c3b9 	.word	0x0801c3b9
 801c35c:	0801c3b9 	.word	0x0801c3b9
 801c360:	0801c3b9 	.word	0x0801c3b9
 801c364:	0801c3b9 	.word	0x0801c3b9
 801c368:	0801c3b9 	.word	0x0801c3b9
 801c36c:	0801c3b9 	.word	0x0801c3b9
 801c370:	0801c3b9 	.word	0x0801c3b9
 801c374:	0801c3b9 	.word	0x0801c3b9
 801c378:	0801c3b9 	.word	0x0801c3b9
 801c37c:	0801c3b9 	.word	0x0801c3b9
 801c380:	0801c3b9 	.word	0x0801c3b9
 801c384:	0801c3b9 	.word	0x0801c3b9
 801c388:	0801c3b9 	.word	0x0801c3b9
 801c38c:	0801c3b9 	.word	0x0801c3b9
 801c390:	0801c3b9 	.word	0x0801c3b9
 801c394:	0801c3b9 	.word	0x0801c3b9
 801c398:	0801c3b9 	.word	0x0801c3b9
 801c39c:	0801c3b9 	.word	0x0801c3b9
 801c3a0:	0801c3b9 	.word	0x0801c3b9
 801c3a4:	0801c3b9 	.word	0x0801c3b9
 801c3a8:	0801c3b9 	.word	0x0801c3b9
 801c3ac:	0801c3b9 	.word	0x0801c3b9
 801c3b0:	0801c3b9 	.word	0x0801c3b9
 801c3b4:	0801c3b9 	.word	0x0801c3b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c3b8:	bf00      	nop
  }

  return (USBD_OK);
 801c3ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	370c      	adds	r7, #12
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3c6:	4770      	bx	lr

0801c3c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b082      	sub	sp, #8
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
 801c3d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c3d2:	6879      	ldr	r1, [r7, #4]
 801c3d4:	4805      	ldr	r0, [pc, #20]	; (801c3ec <CDC_Receive_FS+0x24>)
 801c3d6:	f7fe fc05 	bl	801abe4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c3da:	4804      	ldr	r0, [pc, #16]	; (801c3ec <CDC_Receive_FS+0x24>)
 801c3dc:	f7fe fc20 	bl	801ac20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c3e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	3708      	adds	r7, #8
 801c3e6:	46bd      	mov	sp, r7
 801c3e8:	bd80      	pop	{r7, pc}
 801c3ea:	bf00      	nop
 801c3ec:	24001adc 	.word	0x24001adc

0801c3f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c3f0:	b480      	push	{r7}
 801c3f2:	b087      	sub	sp, #28
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	60f8      	str	r0, [r7, #12]
 801c3f8:	60b9      	str	r1, [r7, #8]
 801c3fa:	4613      	mov	r3, r2
 801c3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c3fe:	2300      	movs	r3, #0
 801c400:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801c402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c406:	4618      	mov	r0, r3
 801c408:	371c      	adds	r7, #28
 801c40a:	46bd      	mov	sp, r7
 801c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c410:	4770      	bx	lr
	...

0801c414 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c414:	b480      	push	{r7}
 801c416:	b083      	sub	sp, #12
 801c418:	af00      	add	r7, sp, #0
 801c41a:	4603      	mov	r3, r0
 801c41c:	6039      	str	r1, [r7, #0]
 801c41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c420:	683b      	ldr	r3, [r7, #0]
 801c422:	2212      	movs	r2, #18
 801c424:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c426:	4b03      	ldr	r3, [pc, #12]	; (801c434 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c428:	4618      	mov	r0, r3
 801c42a:	370c      	adds	r7, #12
 801c42c:	46bd      	mov	sp, r7
 801c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c432:	4770      	bx	lr
 801c434:	240000cc 	.word	0x240000cc

0801c438 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c438:	b480      	push	{r7}
 801c43a:	b083      	sub	sp, #12
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	4603      	mov	r3, r0
 801c440:	6039      	str	r1, [r7, #0]
 801c442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c444:	683b      	ldr	r3, [r7, #0]
 801c446:	2204      	movs	r2, #4
 801c448:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c44a:	4b03      	ldr	r3, [pc, #12]	; (801c458 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c44c:	4618      	mov	r0, r3
 801c44e:	370c      	adds	r7, #12
 801c450:	46bd      	mov	sp, r7
 801c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c456:	4770      	bx	lr
 801c458:	240000e0 	.word	0x240000e0

0801c45c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b082      	sub	sp, #8
 801c460:	af00      	add	r7, sp, #0
 801c462:	4603      	mov	r3, r0
 801c464:	6039      	str	r1, [r7, #0]
 801c466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c468:	79fb      	ldrb	r3, [r7, #7]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d105      	bne.n	801c47a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c46e:	683a      	ldr	r2, [r7, #0]
 801c470:	4907      	ldr	r1, [pc, #28]	; (801c490 <USBD_FS_ProductStrDescriptor+0x34>)
 801c472:	4808      	ldr	r0, [pc, #32]	; (801c494 <USBD_FS_ProductStrDescriptor+0x38>)
 801c474:	f7ff fe1c 	bl	801c0b0 <USBD_GetString>
 801c478:	e004      	b.n	801c484 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c47a:	683a      	ldr	r2, [r7, #0]
 801c47c:	4904      	ldr	r1, [pc, #16]	; (801c490 <USBD_FS_ProductStrDescriptor+0x34>)
 801c47e:	4805      	ldr	r0, [pc, #20]	; (801c494 <USBD_FS_ProductStrDescriptor+0x38>)
 801c480:	f7ff fe16 	bl	801c0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c484:	4b02      	ldr	r3, [pc, #8]	; (801c490 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801c486:	4618      	mov	r0, r3
 801c488:	3708      	adds	r7, #8
 801c48a:	46bd      	mov	sp, r7
 801c48c:	bd80      	pop	{r7, pc}
 801c48e:	bf00      	nop
 801c490:	24002db8 	.word	0x24002db8
 801c494:	0801e3a4 	.word	0x0801e3a4

0801c498 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b082      	sub	sp, #8
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	4603      	mov	r3, r0
 801c4a0:	6039      	str	r1, [r7, #0]
 801c4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c4a4:	683a      	ldr	r2, [r7, #0]
 801c4a6:	4904      	ldr	r1, [pc, #16]	; (801c4b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801c4a8:	4804      	ldr	r0, [pc, #16]	; (801c4bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c4aa:	f7ff fe01 	bl	801c0b0 <USBD_GetString>
  return USBD_StrDesc;
 801c4ae:	4b02      	ldr	r3, [pc, #8]	; (801c4b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	3708      	adds	r7, #8
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	24002db8 	.word	0x24002db8
 801c4bc:	0801e3bc 	.word	0x0801e3bc

0801c4c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b082      	sub	sp, #8
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	6039      	str	r1, [r7, #0]
 801c4ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c4cc:	683b      	ldr	r3, [r7, #0]
 801c4ce:	221a      	movs	r2, #26
 801c4d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c4d2:	f000 f843 	bl	801c55c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c4d6:	4b02      	ldr	r3, [pc, #8]	; (801c4e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	3708      	adds	r7, #8
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}
 801c4e0:	240000e4 	.word	0x240000e4

0801c4e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4e4:	b580      	push	{r7, lr}
 801c4e6:	b082      	sub	sp, #8
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	6039      	str	r1, [r7, #0]
 801c4ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801c4f0:	79fb      	ldrb	r3, [r7, #7]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d105      	bne.n	801c502 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c4f6:	683a      	ldr	r2, [r7, #0]
 801c4f8:	4907      	ldr	r1, [pc, #28]	; (801c518 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c4fa:	4808      	ldr	r0, [pc, #32]	; (801c51c <USBD_FS_ConfigStrDescriptor+0x38>)
 801c4fc:	f7ff fdd8 	bl	801c0b0 <USBD_GetString>
 801c500:	e004      	b.n	801c50c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c502:	683a      	ldr	r2, [r7, #0]
 801c504:	4904      	ldr	r1, [pc, #16]	; (801c518 <USBD_FS_ConfigStrDescriptor+0x34>)
 801c506:	4805      	ldr	r0, [pc, #20]	; (801c51c <USBD_FS_ConfigStrDescriptor+0x38>)
 801c508:	f7ff fdd2 	bl	801c0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c50c:	4b02      	ldr	r3, [pc, #8]	; (801c518 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801c50e:	4618      	mov	r0, r3
 801c510:	3708      	adds	r7, #8
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	24002db8 	.word	0x24002db8
 801c51c:	0801e3d0 	.word	0x0801e3d0

0801c520 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c520:	b580      	push	{r7, lr}
 801c522:	b082      	sub	sp, #8
 801c524:	af00      	add	r7, sp, #0
 801c526:	4603      	mov	r3, r0
 801c528:	6039      	str	r1, [r7, #0]
 801c52a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c52c:	79fb      	ldrb	r3, [r7, #7]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d105      	bne.n	801c53e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c532:	683a      	ldr	r2, [r7, #0]
 801c534:	4907      	ldr	r1, [pc, #28]	; (801c554 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c536:	4808      	ldr	r0, [pc, #32]	; (801c558 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c538:	f7ff fdba 	bl	801c0b0 <USBD_GetString>
 801c53c:	e004      	b.n	801c548 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c53e:	683a      	ldr	r2, [r7, #0]
 801c540:	4904      	ldr	r1, [pc, #16]	; (801c554 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801c542:	4805      	ldr	r0, [pc, #20]	; (801c558 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801c544:	f7ff fdb4 	bl	801c0b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c548:	4b02      	ldr	r3, [pc, #8]	; (801c554 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3708      	adds	r7, #8
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}
 801c552:	bf00      	nop
 801c554:	24002db8 	.word	0x24002db8
 801c558:	0801e3dc 	.word	0x0801e3dc

0801c55c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c562:	4b0f      	ldr	r3, [pc, #60]	; (801c5a0 <Get_SerialNum+0x44>)
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c568:	4b0e      	ldr	r3, [pc, #56]	; (801c5a4 <Get_SerialNum+0x48>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c56e:	4b0e      	ldr	r3, [pc, #56]	; (801c5a8 <Get_SerialNum+0x4c>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c574:	68fa      	ldr	r2, [r7, #12]
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	4413      	add	r3, r2
 801c57a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d009      	beq.n	801c596 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c582:	2208      	movs	r2, #8
 801c584:	4909      	ldr	r1, [pc, #36]	; (801c5ac <Get_SerialNum+0x50>)
 801c586:	68f8      	ldr	r0, [r7, #12]
 801c588:	f000 f814 	bl	801c5b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c58c:	2204      	movs	r2, #4
 801c58e:	4908      	ldr	r1, [pc, #32]	; (801c5b0 <Get_SerialNum+0x54>)
 801c590:	68b8      	ldr	r0, [r7, #8]
 801c592:	f000 f80f 	bl	801c5b4 <IntToUnicode>
  }
}
 801c596:	bf00      	nop
 801c598:	3710      	adds	r7, #16
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	bf00      	nop
 801c5a0:	1ff1e800 	.word	0x1ff1e800
 801c5a4:	1ff1e804 	.word	0x1ff1e804
 801c5a8:	1ff1e808 	.word	0x1ff1e808
 801c5ac:	240000e6 	.word	0x240000e6
 801c5b0:	240000f6 	.word	0x240000f6

0801c5b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c5b4:	b480      	push	{r7}
 801c5b6:	b087      	sub	sp, #28
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	60f8      	str	r0, [r7, #12]
 801c5bc:	60b9      	str	r1, [r7, #8]
 801c5be:	4613      	mov	r3, r2
 801c5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	75fb      	strb	r3, [r7, #23]
 801c5ca:	e027      	b.n	801c61c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	0f1b      	lsrs	r3, r3, #28
 801c5d0:	2b09      	cmp	r3, #9
 801c5d2:	d80b      	bhi.n	801c5ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	0f1b      	lsrs	r3, r3, #28
 801c5d8:	b2da      	uxtb	r2, r3
 801c5da:	7dfb      	ldrb	r3, [r7, #23]
 801c5dc:	005b      	lsls	r3, r3, #1
 801c5de:	4619      	mov	r1, r3
 801c5e0:	68bb      	ldr	r3, [r7, #8]
 801c5e2:	440b      	add	r3, r1
 801c5e4:	3230      	adds	r2, #48	; 0x30
 801c5e6:	b2d2      	uxtb	r2, r2
 801c5e8:	701a      	strb	r2, [r3, #0]
 801c5ea:	e00a      	b.n	801c602 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	0f1b      	lsrs	r3, r3, #28
 801c5f0:	b2da      	uxtb	r2, r3
 801c5f2:	7dfb      	ldrb	r3, [r7, #23]
 801c5f4:	005b      	lsls	r3, r3, #1
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	68bb      	ldr	r3, [r7, #8]
 801c5fa:	440b      	add	r3, r1
 801c5fc:	3237      	adds	r2, #55	; 0x37
 801c5fe:	b2d2      	uxtb	r2, r2
 801c600:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	011b      	lsls	r3, r3, #4
 801c606:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c608:	7dfb      	ldrb	r3, [r7, #23]
 801c60a:	005b      	lsls	r3, r3, #1
 801c60c:	3301      	adds	r3, #1
 801c60e:	68ba      	ldr	r2, [r7, #8]
 801c610:	4413      	add	r3, r2
 801c612:	2200      	movs	r2, #0
 801c614:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c616:	7dfb      	ldrb	r3, [r7, #23]
 801c618:	3301      	adds	r3, #1
 801c61a:	75fb      	strb	r3, [r7, #23]
 801c61c:	7dfa      	ldrb	r2, [r7, #23]
 801c61e:	79fb      	ldrb	r3, [r7, #7]
 801c620:	429a      	cmp	r2, r3
 801c622:	d3d3      	bcc.n	801c5cc <IntToUnicode+0x18>
  }
}
 801c624:	bf00      	nop
 801c626:	bf00      	nop
 801c628:	371c      	adds	r7, #28
 801c62a:	46bd      	mov	sp, r7
 801c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c630:	4770      	bx	lr
	...

0801c634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b0b8      	sub	sp, #224	; 0xe0
 801c638:	af00      	add	r7, sp, #0
 801c63a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c63c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c640:	2200      	movs	r2, #0
 801c642:	601a      	str	r2, [r3, #0]
 801c644:	605a      	str	r2, [r3, #4]
 801c646:	609a      	str	r2, [r3, #8]
 801c648:	60da      	str	r2, [r3, #12]
 801c64a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c64c:	f107 0310 	add.w	r3, r7, #16
 801c650:	22bc      	movs	r2, #188	; 0xbc
 801c652:	2100      	movs	r1, #0
 801c654:	4618      	mov	r0, r3
 801c656:	f000 fbe9 	bl	801ce2c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	4a2f      	ldr	r2, [pc, #188]	; (801c71c <HAL_PCD_MspInit+0xe8>)
 801c660:	4293      	cmp	r3, r2
 801c662:	d156      	bne.n	801c712 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c668:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801c66a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801c66e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c672:	f107 0310 	add.w	r3, r7, #16
 801c676:	4618      	mov	r0, r3
 801c678:	f7f6 faac 	bl	8012bd4 <HAL_RCCEx_PeriphCLKConfig>
 801c67c:	4603      	mov	r3, r0
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d001      	beq.n	801c686 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 801c682:	f7ee fa67 	bl	800ab54 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c686:	f7f5 fadb 	bl	8011c40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c68a:	4b25      	ldr	r3, [pc, #148]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c68c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c690:	4a23      	ldr	r2, [pc, #140]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c692:	f043 0301 	orr.w	r3, r3, #1
 801c696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c69a:	4b21      	ldr	r3, [pc, #132]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c6a0:	f003 0301 	and.w	r3, r3, #1
 801c6a4:	60fb      	str	r3, [r7, #12]
 801c6a6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801c6a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c6ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c6b0:	2302      	movs	r3, #2
 801c6b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801c6c2:	230a      	movs	r3, #10
 801c6c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c6c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c6cc:	4619      	mov	r1, r3
 801c6ce:	4815      	ldr	r0, [pc, #84]	; (801c724 <HAL_PCD_MspInit+0xf0>)
 801c6d0:	f7f2 fe30 	bl	800f334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c6d4:	4b12      	ldr	r3, [pc, #72]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c6d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c6da:	4a11      	ldr	r2, [pc, #68]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c6dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c6e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801c6e4:	4b0e      	ldr	r3, [pc, #56]	; (801c720 <HAL_PCD_MspInit+0xec>)
 801c6e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c6ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c6ee:	60bb      	str	r3, [r7, #8]
 801c6f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	2100      	movs	r1, #0
 801c6f6:	2062      	movs	r0, #98	; 0x62
 801c6f8:	f7ef fdc9 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 801c6fc:	2062      	movs	r0, #98	; 0x62
 801c6fe:	f7ef fde0 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c702:	2200      	movs	r2, #0
 801c704:	2100      	movs	r1, #0
 801c706:	2065      	movs	r0, #101	; 0x65
 801c708:	f7ef fdc1 	bl	800c28e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c70c:	2065      	movs	r0, #101	; 0x65
 801c70e:	f7ef fdd8 	bl	800c2c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c712:	bf00      	nop
 801c714:	37e0      	adds	r7, #224	; 0xe0
 801c716:	46bd      	mov	sp, r7
 801c718:	bd80      	pop	{r7, pc}
 801c71a:	bf00      	nop
 801c71c:	40080000 	.word	0x40080000
 801c720:	58024400 	.word	0x58024400
 801c724:	58020000 	.word	0x58020000

0801c728 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c728:	b580      	push	{r7, lr}
 801c72a:	b082      	sub	sp, #8
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801c73c:	4619      	mov	r1, r3
 801c73e:	4610      	mov	r0, r2
 801c740:	f7fe fb57 	bl	801adf2 <USBD_LL_SetupStage>
}
 801c744:	bf00      	nop
 801c746:	3708      	adds	r7, #8
 801c748:	46bd      	mov	sp, r7
 801c74a:	bd80      	pop	{r7, pc}

0801c74c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c74c:	b580      	push	{r7, lr}
 801c74e:	b082      	sub	sp, #8
 801c750:	af00      	add	r7, sp, #0
 801c752:	6078      	str	r0, [r7, #4]
 801c754:	460b      	mov	r3, r1
 801c756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c75e:	78fa      	ldrb	r2, [r7, #3]
 801c760:	6879      	ldr	r1, [r7, #4]
 801c762:	4613      	mov	r3, r2
 801c764:	00db      	lsls	r3, r3, #3
 801c766:	4413      	add	r3, r2
 801c768:	009b      	lsls	r3, r3, #2
 801c76a:	440b      	add	r3, r1
 801c76c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801c770:	681a      	ldr	r2, [r3, #0]
 801c772:	78fb      	ldrb	r3, [r7, #3]
 801c774:	4619      	mov	r1, r3
 801c776:	f7fe fb91 	bl	801ae9c <USBD_LL_DataOutStage>
}
 801c77a:	bf00      	nop
 801c77c:	3708      	adds	r7, #8
 801c77e:	46bd      	mov	sp, r7
 801c780:	bd80      	pop	{r7, pc}

0801c782 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c782:	b580      	push	{r7, lr}
 801c784:	b082      	sub	sp, #8
 801c786:	af00      	add	r7, sp, #0
 801c788:	6078      	str	r0, [r7, #4]
 801c78a:	460b      	mov	r3, r1
 801c78c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801c794:	78fa      	ldrb	r2, [r7, #3]
 801c796:	6879      	ldr	r1, [r7, #4]
 801c798:	4613      	mov	r3, r2
 801c79a:	00db      	lsls	r3, r3, #3
 801c79c:	4413      	add	r3, r2
 801c79e:	009b      	lsls	r3, r3, #2
 801c7a0:	440b      	add	r3, r1
 801c7a2:	334c      	adds	r3, #76	; 0x4c
 801c7a4:	681a      	ldr	r2, [r3, #0]
 801c7a6:	78fb      	ldrb	r3, [r7, #3]
 801c7a8:	4619      	mov	r1, r3
 801c7aa:	f7fe fc2a 	bl	801b002 <USBD_LL_DataInStage>
}
 801c7ae:	bf00      	nop
 801c7b0:	3708      	adds	r7, #8
 801c7b2:	46bd      	mov	sp, r7
 801c7b4:	bd80      	pop	{r7, pc}

0801c7b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7b6:	b580      	push	{r7, lr}
 801c7b8:	b082      	sub	sp, #8
 801c7ba:	af00      	add	r7, sp, #0
 801c7bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c7c4:	4618      	mov	r0, r3
 801c7c6:	f7fe fd5e 	bl	801b286 <USBD_LL_SOF>
}
 801c7ca:	bf00      	nop
 801c7cc:	3708      	adds	r7, #8
 801c7ce:	46bd      	mov	sp, r7
 801c7d0:	bd80      	pop	{r7, pc}

0801c7d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7d2:	b580      	push	{r7, lr}
 801c7d4:	b084      	sub	sp, #16
 801c7d6:	af00      	add	r7, sp, #0
 801c7d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c7da:	2301      	movs	r3, #1
 801c7dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	68db      	ldr	r3, [r3, #12]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d102      	bne.n	801c7ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	73fb      	strb	r3, [r7, #15]
 801c7ea:	e008      	b.n	801c7fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	68db      	ldr	r3, [r3, #12]
 801c7f0:	2b02      	cmp	r3, #2
 801c7f2:	d102      	bne.n	801c7fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801c7f4:	2301      	movs	r3, #1
 801c7f6:	73fb      	strb	r3, [r7, #15]
 801c7f8:	e001      	b.n	801c7fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801c7fa:	f7ee f9ab 	bl	800ab54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c804:	7bfa      	ldrb	r2, [r7, #15]
 801c806:	4611      	mov	r1, r2
 801c808:	4618      	mov	r0, r3
 801c80a:	f7fe fcfe 	bl	801b20a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c814:	4618      	mov	r0, r3
 801c816:	f7fe fca6 	bl	801b166 <USBD_LL_Reset>
}
 801c81a:	bf00      	nop
 801c81c:	3710      	adds	r7, #16
 801c81e:	46bd      	mov	sp, r7
 801c820:	bd80      	pop	{r7, pc}
	...

0801c824 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b082      	sub	sp, #8
 801c828:	af00      	add	r7, sp, #0
 801c82a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c832:	4618      	mov	r0, r3
 801c834:	f7fe fcf9 	bl	801b22a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	687a      	ldr	r2, [r7, #4]
 801c844:	6812      	ldr	r2, [r2, #0]
 801c846:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801c84a:	f043 0301 	orr.w	r3, r3, #1
 801c84e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	6a1b      	ldr	r3, [r3, #32]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d005      	beq.n	801c864 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c858:	4b04      	ldr	r3, [pc, #16]	; (801c86c <HAL_PCD_SuspendCallback+0x48>)
 801c85a:	691b      	ldr	r3, [r3, #16]
 801c85c:	4a03      	ldr	r2, [pc, #12]	; (801c86c <HAL_PCD_SuspendCallback+0x48>)
 801c85e:	f043 0306 	orr.w	r3, r3, #6
 801c862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801c864:	bf00      	nop
 801c866:	3708      	adds	r7, #8
 801c868:	46bd      	mov	sp, r7
 801c86a:	bd80      	pop	{r7, pc}
 801c86c:	e000ed00 	.word	0xe000ed00

0801c870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b082      	sub	sp, #8
 801c874:	af00      	add	r7, sp, #0
 801c876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c87e:	4618      	mov	r0, r3
 801c880:	f7fe fce9 	bl	801b256 <USBD_LL_Resume>
}
 801c884:	bf00      	nop
 801c886:	3708      	adds	r7, #8
 801c888:	46bd      	mov	sp, r7
 801c88a:	bd80      	pop	{r7, pc}

0801c88c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c88c:	b580      	push	{r7, lr}
 801c88e:	b082      	sub	sp, #8
 801c890:	af00      	add	r7, sp, #0
 801c892:	6078      	str	r0, [r7, #4]
 801c894:	460b      	mov	r3, r1
 801c896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c89e:	78fa      	ldrb	r2, [r7, #3]
 801c8a0:	4611      	mov	r1, r2
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f7fe fd41 	bl	801b32a <USBD_LL_IsoOUTIncomplete>
}
 801c8a8:	bf00      	nop
 801c8aa:	3708      	adds	r7, #8
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
 801c8b8:	460b      	mov	r3, r1
 801c8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8c2:	78fa      	ldrb	r2, [r7, #3]
 801c8c4:	4611      	mov	r1, r2
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7fe fcfd 	bl	801b2c6 <USBD_LL_IsoINIncomplete>
}
 801c8cc:	bf00      	nop
 801c8ce:	3708      	adds	r7, #8
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}

0801c8d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b082      	sub	sp, #8
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7fe fd53 	bl	801b38e <USBD_LL_DevConnected>
}
 801c8e8:	bf00      	nop
 801c8ea:	3708      	adds	r7, #8
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	bd80      	pop	{r7, pc}

0801c8f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b082      	sub	sp, #8
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801c8fe:	4618      	mov	r0, r3
 801c900:	f7fe fd50 	bl	801b3a4 <USBD_LL_DevDisconnected>
}
 801c904:	bf00      	nop
 801c906:	3708      	adds	r7, #8
 801c908:	46bd      	mov	sp, r7
 801c90a:	bd80      	pop	{r7, pc}

0801c90c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d13e      	bne.n	801c99a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801c91c:	4a21      	ldr	r2, [pc, #132]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	4a1f      	ldr	r2, [pc, #124]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c928:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c92c:	4b1d      	ldr	r3, [pc, #116]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c92e:	4a1e      	ldr	r2, [pc, #120]	; (801c9a8 <USBD_LL_Init+0x9c>)
 801c930:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801c932:	4b1c      	ldr	r3, [pc, #112]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c934:	2209      	movs	r2, #9
 801c936:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801c938:	4b1a      	ldr	r3, [pc, #104]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c93a:	2202      	movs	r2, #2
 801c93c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c93e:	4b19      	ldr	r3, [pc, #100]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c940:	2200      	movs	r2, #0
 801c942:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c944:	4b17      	ldr	r3, [pc, #92]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c946:	2202      	movs	r2, #2
 801c948:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c94a:	4b16      	ldr	r3, [pc, #88]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c94c:	2200      	movs	r2, #0
 801c94e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801c950:	4b14      	ldr	r3, [pc, #80]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c952:	2200      	movs	r2, #0
 801c954:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801c956:	4b13      	ldr	r3, [pc, #76]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c958:	2200      	movs	r2, #0
 801c95a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801c95c:	4b11      	ldr	r3, [pc, #68]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c95e:	2200      	movs	r2, #0
 801c960:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801c962:	4b10      	ldr	r3, [pc, #64]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c964:	2200      	movs	r2, #0
 801c966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801c968:	4b0e      	ldr	r3, [pc, #56]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c96a:	2200      	movs	r2, #0
 801c96c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801c96e:	480d      	ldr	r0, [pc, #52]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c970:	f7f3 fe56 	bl	8010620 <HAL_PCD_Init>
 801c974:	4603      	mov	r3, r0
 801c976:	2b00      	cmp	r3, #0
 801c978:	d001      	beq.n	801c97e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801c97a:	f7ee f8eb 	bl	800ab54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801c97e:	2180      	movs	r1, #128	; 0x80
 801c980:	4808      	ldr	r0, [pc, #32]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c982:	f7f5 f8e2 	bl	8011b4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801c986:	2240      	movs	r2, #64	; 0x40
 801c988:	2100      	movs	r1, #0
 801c98a:	4806      	ldr	r0, [pc, #24]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c98c:	f7f5 f896 	bl	8011abc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801c990:	2280      	movs	r2, #128	; 0x80
 801c992:	2101      	movs	r1, #1
 801c994:	4803      	ldr	r0, [pc, #12]	; (801c9a4 <USBD_LL_Init+0x98>)
 801c996:	f7f5 f891 	bl	8011abc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801c99a:	2300      	movs	r3, #0
}
 801c99c:	4618      	mov	r0, r3
 801c99e:	3708      	adds	r7, #8
 801c9a0:	46bd      	mov	sp, r7
 801c9a2:	bd80      	pop	{r7, pc}
 801c9a4:	24002fb8 	.word	0x24002fb8
 801c9a8:	40080000 	.word	0x40080000

0801c9ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7f3 ff50 	bl	8010868 <HAL_PCD_Start>
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9cc:	7bfb      	ldrb	r3, [r7, #15]
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f000 f942 	bl	801cc58 <USBD_Get_USB_Status>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	3710      	adds	r7, #16
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}

0801c9e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c9e2:	b580      	push	{r7, lr}
 801c9e4:	b084      	sub	sp, #16
 801c9e6:	af00      	add	r7, sp, #0
 801c9e8:	6078      	str	r0, [r7, #4]
 801c9ea:	4608      	mov	r0, r1
 801c9ec:	4611      	mov	r1, r2
 801c9ee:	461a      	mov	r2, r3
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	70fb      	strb	r3, [r7, #3]
 801c9f4:	460b      	mov	r3, r1
 801c9f6:	70bb      	strb	r3, [r7, #2]
 801c9f8:	4613      	mov	r3, r2
 801c9fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca00:	2300      	movs	r3, #0
 801ca02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ca0a:	78bb      	ldrb	r3, [r7, #2]
 801ca0c:	883a      	ldrh	r2, [r7, #0]
 801ca0e:	78f9      	ldrb	r1, [r7, #3]
 801ca10:	f7f4 fc4e 	bl	80112b0 <HAL_PCD_EP_Open>
 801ca14:	4603      	mov	r3, r0
 801ca16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca18:	7bfb      	ldrb	r3, [r7, #15]
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	f000 f91c 	bl	801cc58 <USBD_Get_USB_Status>
 801ca20:	4603      	mov	r3, r0
 801ca22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca24:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca26:	4618      	mov	r0, r3
 801ca28:	3710      	adds	r7, #16
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}

0801ca2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca2e:	b580      	push	{r7, lr}
 801ca30:	b084      	sub	sp, #16
 801ca32:	af00      	add	r7, sp, #0
 801ca34:	6078      	str	r0, [r7, #4]
 801ca36:	460b      	mov	r3, r1
 801ca38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca3e:	2300      	movs	r3, #0
 801ca40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca48:	78fa      	ldrb	r2, [r7, #3]
 801ca4a:	4611      	mov	r1, r2
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	f7f4 fc97 	bl	8011380 <HAL_PCD_EP_Close>
 801ca52:	4603      	mov	r3, r0
 801ca54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca56:	7bfb      	ldrb	r3, [r7, #15]
 801ca58:	4618      	mov	r0, r3
 801ca5a:	f000 f8fd 	bl	801cc58 <USBD_Get_USB_Status>
 801ca5e:	4603      	mov	r3, r0
 801ca60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ca62:	7bbb      	ldrb	r3, [r7, #14]
}
 801ca64:	4618      	mov	r0, r3
 801ca66:	3710      	adds	r7, #16
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}

0801ca6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b084      	sub	sp, #16
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
 801ca74:	460b      	mov	r3, r1
 801ca76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca78:	2300      	movs	r3, #0
 801ca7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ca86:	78fa      	ldrb	r2, [r7, #3]
 801ca88:	4611      	mov	r1, r2
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7f4 fd6f 	bl	801156e <HAL_PCD_EP_SetStall>
 801ca90:	4603      	mov	r3, r0
 801ca92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca94:	7bfb      	ldrb	r3, [r7, #15]
 801ca96:	4618      	mov	r0, r3
 801ca98:	f000 f8de 	bl	801cc58 <USBD_Get_USB_Status>
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801caa0:	7bbb      	ldrb	r3, [r7, #14]
}
 801caa2:	4618      	mov	r0, r3
 801caa4:	3710      	adds	r7, #16
 801caa6:	46bd      	mov	sp, r7
 801caa8:	bd80      	pop	{r7, pc}

0801caaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801caaa:	b580      	push	{r7, lr}
 801caac:	b084      	sub	sp, #16
 801caae:	af00      	add	r7, sp, #0
 801cab0:	6078      	str	r0, [r7, #4]
 801cab2:	460b      	mov	r3, r1
 801cab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cab6:	2300      	movs	r3, #0
 801cab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801caba:	2300      	movs	r3, #0
 801cabc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cac4:	78fa      	ldrb	r2, [r7, #3]
 801cac6:	4611      	mov	r1, r2
 801cac8:	4618      	mov	r0, r3
 801caca:	f7f4 fdb4 	bl	8011636 <HAL_PCD_EP_ClrStall>
 801cace:	4603      	mov	r3, r0
 801cad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cad2:	7bfb      	ldrb	r3, [r7, #15]
 801cad4:	4618      	mov	r0, r3
 801cad6:	f000 f8bf 	bl	801cc58 <USBD_Get_USB_Status>
 801cada:	4603      	mov	r3, r0
 801cadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cade:	7bbb      	ldrb	r3, [r7, #14]
}
 801cae0:	4618      	mov	r0, r3
 801cae2:	3710      	adds	r7, #16
 801cae4:	46bd      	mov	sp, r7
 801cae6:	bd80      	pop	{r7, pc}

0801cae8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cae8:	b480      	push	{r7}
 801caea:	b085      	sub	sp, #20
 801caec:	af00      	add	r7, sp, #0
 801caee:	6078      	str	r0, [r7, #4]
 801caf0:	460b      	mov	r3, r1
 801caf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cafa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801cafc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	da0b      	bge.n	801cb1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cb04:	78fb      	ldrb	r3, [r7, #3]
 801cb06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cb0a:	68f9      	ldr	r1, [r7, #12]
 801cb0c:	4613      	mov	r3, r2
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	4413      	add	r3, r2
 801cb12:	009b      	lsls	r3, r3, #2
 801cb14:	440b      	add	r3, r1
 801cb16:	333e      	adds	r3, #62	; 0x3e
 801cb18:	781b      	ldrb	r3, [r3, #0]
 801cb1a:	e00b      	b.n	801cb34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cb1c:	78fb      	ldrb	r3, [r7, #3]
 801cb1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cb22:	68f9      	ldr	r1, [r7, #12]
 801cb24:	4613      	mov	r3, r2
 801cb26:	00db      	lsls	r3, r3, #3
 801cb28:	4413      	add	r3, r2
 801cb2a:	009b      	lsls	r3, r3, #2
 801cb2c:	440b      	add	r3, r1
 801cb2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801cb32:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cb34:	4618      	mov	r0, r3
 801cb36:	3714      	adds	r7, #20
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb3e:	4770      	bx	lr

0801cb40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b084      	sub	sp, #16
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
 801cb48:	460b      	mov	r3, r1
 801cb4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb50:	2300      	movs	r3, #0
 801cb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cb5a:	78fa      	ldrb	r2, [r7, #3]
 801cb5c:	4611      	mov	r1, r2
 801cb5e:	4618      	mov	r0, r3
 801cb60:	f7f4 fb81 	bl	8011266 <HAL_PCD_SetAddress>
 801cb64:	4603      	mov	r3, r0
 801cb66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb68:	7bfb      	ldrb	r3, [r7, #15]
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	f000 f874 	bl	801cc58 <USBD_Get_USB_Status>
 801cb70:	4603      	mov	r3, r0
 801cb72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cb74:	7bbb      	ldrb	r3, [r7, #14]
}
 801cb76:	4618      	mov	r0, r3
 801cb78:	3710      	adds	r7, #16
 801cb7a:	46bd      	mov	sp, r7
 801cb7c:	bd80      	pop	{r7, pc}

0801cb7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cb7e:	b580      	push	{r7, lr}
 801cb80:	b086      	sub	sp, #24
 801cb82:	af00      	add	r7, sp, #0
 801cb84:	60f8      	str	r0, [r7, #12]
 801cb86:	607a      	str	r2, [r7, #4]
 801cb88:	603b      	str	r3, [r7, #0]
 801cb8a:	460b      	mov	r3, r1
 801cb8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb8e:	2300      	movs	r3, #0
 801cb90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb92:	2300      	movs	r3, #0
 801cb94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cb9c:	7af9      	ldrb	r1, [r7, #11]
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	687a      	ldr	r2, [r7, #4]
 801cba2:	f7f4 fc9a 	bl	80114da <HAL_PCD_EP_Transmit>
 801cba6:	4603      	mov	r3, r0
 801cba8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbaa:	7dfb      	ldrb	r3, [r7, #23]
 801cbac:	4618      	mov	r0, r3
 801cbae:	f000 f853 	bl	801cc58 <USBD_Get_USB_Status>
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cbb6:	7dbb      	ldrb	r3, [r7, #22]
}
 801cbb8:	4618      	mov	r0, r3
 801cbba:	3718      	adds	r7, #24
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	bd80      	pop	{r7, pc}

0801cbc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b086      	sub	sp, #24
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	60f8      	str	r0, [r7, #12]
 801cbc8:	607a      	str	r2, [r7, #4]
 801cbca:	603b      	str	r3, [r7, #0]
 801cbcc:	460b      	mov	r3, r1
 801cbce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbd0:	2300      	movs	r3, #0
 801cbd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cbde:	7af9      	ldrb	r1, [r7, #11]
 801cbe0:	683b      	ldr	r3, [r7, #0]
 801cbe2:	687a      	ldr	r2, [r7, #4]
 801cbe4:	f7f4 fc16 	bl	8011414 <HAL_PCD_EP_Receive>
 801cbe8:	4603      	mov	r3, r0
 801cbea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbec:	7dfb      	ldrb	r3, [r7, #23]
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f000 f832 	bl	801cc58 <USBD_Get_USB_Status>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801cbf8:	7dbb      	ldrb	r3, [r7, #22]
}
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	3718      	adds	r7, #24
 801cbfe:	46bd      	mov	sp, r7
 801cc00:	bd80      	pop	{r7, pc}

0801cc02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cc02:	b580      	push	{r7, lr}
 801cc04:	b082      	sub	sp, #8
 801cc06:	af00      	add	r7, sp, #0
 801cc08:	6078      	str	r0, [r7, #4]
 801cc0a:	460b      	mov	r3, r1
 801cc0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cc14:	78fa      	ldrb	r2, [r7, #3]
 801cc16:	4611      	mov	r1, r2
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7f4 fc46 	bl	80114aa <HAL_PCD_EP_GetRxCount>
 801cc1e:	4603      	mov	r3, r0
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3708      	adds	r7, #8
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}

0801cc28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cc28:	b480      	push	{r7}
 801cc2a:	b083      	sub	sp, #12
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cc30:	4b03      	ldr	r3, [pc, #12]	; (801cc40 <USBD_static_malloc+0x18>)
}
 801cc32:	4618      	mov	r0, r3
 801cc34:	370c      	adds	r7, #12
 801cc36:	46bd      	mov	sp, r7
 801cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3c:	4770      	bx	lr
 801cc3e:	bf00      	nop
 801cc40:	240034c4 	.word	0x240034c4

0801cc44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cc44:	b480      	push	{r7}
 801cc46:	b083      	sub	sp, #12
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]

}
 801cc4c:	bf00      	nop
 801cc4e:	370c      	adds	r7, #12
 801cc50:	46bd      	mov	sp, r7
 801cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc56:	4770      	bx	lr

0801cc58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cc58:	b480      	push	{r7}
 801cc5a:	b085      	sub	sp, #20
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	4603      	mov	r3, r0
 801cc60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc62:	2300      	movs	r3, #0
 801cc64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801cc66:	79fb      	ldrb	r3, [r7, #7]
 801cc68:	2b03      	cmp	r3, #3
 801cc6a:	d817      	bhi.n	801cc9c <USBD_Get_USB_Status+0x44>
 801cc6c:	a201      	add	r2, pc, #4	; (adr r2, 801cc74 <USBD_Get_USB_Status+0x1c>)
 801cc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc72:	bf00      	nop
 801cc74:	0801cc85 	.word	0x0801cc85
 801cc78:	0801cc8b 	.word	0x0801cc8b
 801cc7c:	0801cc91 	.word	0x0801cc91
 801cc80:	0801cc97 	.word	0x0801cc97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cc84:	2300      	movs	r3, #0
 801cc86:	73fb      	strb	r3, [r7, #15]
    break;
 801cc88:	e00b      	b.n	801cca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801cc8a:	2303      	movs	r3, #3
 801cc8c:	73fb      	strb	r3, [r7, #15]
    break;
 801cc8e:	e008      	b.n	801cca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cc90:	2301      	movs	r3, #1
 801cc92:	73fb      	strb	r3, [r7, #15]
    break;
 801cc94:	e005      	b.n	801cca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801cc96:	2303      	movs	r3, #3
 801cc98:	73fb      	strb	r3, [r7, #15]
    break;
 801cc9a:	e002      	b.n	801cca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801cc9c:	2303      	movs	r3, #3
 801cc9e:	73fb      	strb	r3, [r7, #15]
    break;
 801cca0:	bf00      	nop
  }
  return usb_status;
 801cca2:	7bfb      	ldrb	r3, [r7, #15]
}
 801cca4:	4618      	mov	r0, r3
 801cca6:	3714      	adds	r7, #20
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccae:	4770      	bx	lr

0801ccb0 <_ZdlPvj>:
 801ccb0:	f000 b817 	b.w	801cce2 <_ZdlPv>

0801ccb4 <_Znwj>:
 801ccb4:	2801      	cmp	r0, #1
 801ccb6:	bf38      	it	cc
 801ccb8:	2001      	movcc	r0, #1
 801ccba:	b510      	push	{r4, lr}
 801ccbc:	4604      	mov	r4, r0
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	f000 f87c 	bl	801cdbc <malloc>
 801ccc4:	b930      	cbnz	r0, 801ccd4 <_Znwj+0x20>
 801ccc6:	f000 f80f 	bl	801cce8 <_ZSt15get_new_handlerv>
 801ccca:	b908      	cbnz	r0, 801ccd0 <_Znwj+0x1c>
 801cccc:	f000 f814 	bl	801ccf8 <abort>
 801ccd0:	4780      	blx	r0
 801ccd2:	e7f4      	b.n	801ccbe <_Znwj+0xa>
 801ccd4:	bd10      	pop	{r4, pc}

0801ccd6 <_ZSt17__throw_bad_allocv>:
 801ccd6:	b508      	push	{r3, lr}
 801ccd8:	f000 f80e 	bl	801ccf8 <abort>

0801ccdc <_ZSt20__throw_length_errorPKc>:
 801ccdc:	b508      	push	{r3, lr}
 801ccde:	f000 f80b 	bl	801ccf8 <abort>

0801cce2 <_ZdlPv>:
 801cce2:	f000 b873 	b.w	801cdcc <free>
	...

0801cce8 <_ZSt15get_new_handlerv>:
 801cce8:	4b02      	ldr	r3, [pc, #8]	; (801ccf4 <_ZSt15get_new_handlerv+0xc>)
 801ccea:	6818      	ldr	r0, [r3, #0]
 801ccec:	f3bf 8f5b 	dmb	ish
 801ccf0:	4770      	bx	lr
 801ccf2:	bf00      	nop
 801ccf4:	240036e4 	.word	0x240036e4

0801ccf8 <abort>:
 801ccf8:	b508      	push	{r3, lr}
 801ccfa:	2006      	movs	r0, #6
 801ccfc:	f000 fca4 	bl	801d648 <raise>
 801cd00:	2001      	movs	r0, #1
 801cd02:	f7ee f95b 	bl	800afbc <_exit>
	...

0801cd08 <__assert_func>:
 801cd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd0a:	4614      	mov	r4, r2
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	4b09      	ldr	r3, [pc, #36]	; (801cd34 <__assert_func+0x2c>)
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	4605      	mov	r5, r0
 801cd14:	68d8      	ldr	r0, [r3, #12]
 801cd16:	b14c      	cbz	r4, 801cd2c <__assert_func+0x24>
 801cd18:	4b07      	ldr	r3, [pc, #28]	; (801cd38 <__assert_func+0x30>)
 801cd1a:	9100      	str	r1, [sp, #0]
 801cd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd20:	4906      	ldr	r1, [pc, #24]	; (801cd3c <__assert_func+0x34>)
 801cd22:	462b      	mov	r3, r5
 801cd24:	f000 f814 	bl	801cd50 <fiprintf>
 801cd28:	f7ff ffe6 	bl	801ccf8 <abort>
 801cd2c:	4b04      	ldr	r3, [pc, #16]	; (801cd40 <__assert_func+0x38>)
 801cd2e:	461c      	mov	r4, r3
 801cd30:	e7f3      	b.n	801cd1a <__assert_func+0x12>
 801cd32:	bf00      	nop
 801cd34:	24000100 	.word	0x24000100
 801cd38:	08038aa4 	.word	0x08038aa4
 801cd3c:	08038ab1 	.word	0x08038ab1
 801cd40:	08038adf 	.word	0x08038adf

0801cd44 <__errno>:
 801cd44:	4b01      	ldr	r3, [pc, #4]	; (801cd4c <__errno+0x8>)
 801cd46:	6818      	ldr	r0, [r3, #0]
 801cd48:	4770      	bx	lr
 801cd4a:	bf00      	nop
 801cd4c:	24000100 	.word	0x24000100

0801cd50 <fiprintf>:
 801cd50:	b40e      	push	{r1, r2, r3}
 801cd52:	b503      	push	{r0, r1, lr}
 801cd54:	4601      	mov	r1, r0
 801cd56:	ab03      	add	r3, sp, #12
 801cd58:	4805      	ldr	r0, [pc, #20]	; (801cd70 <fiprintf+0x20>)
 801cd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd5e:	6800      	ldr	r0, [r0, #0]
 801cd60:	9301      	str	r3, [sp, #4]
 801cd62:	f000 f975 	bl	801d050 <_vfiprintf_r>
 801cd66:	b002      	add	sp, #8
 801cd68:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd6c:	b003      	add	sp, #12
 801cd6e:	4770      	bx	lr
 801cd70:	24000100 	.word	0x24000100

0801cd74 <__libc_init_array>:
 801cd74:	b570      	push	{r4, r5, r6, lr}
 801cd76:	4d0d      	ldr	r5, [pc, #52]	; (801cdac <__libc_init_array+0x38>)
 801cd78:	4c0d      	ldr	r4, [pc, #52]	; (801cdb0 <__libc_init_array+0x3c>)
 801cd7a:	1b64      	subs	r4, r4, r5
 801cd7c:	10a4      	asrs	r4, r4, #2
 801cd7e:	2600      	movs	r6, #0
 801cd80:	42a6      	cmp	r6, r4
 801cd82:	d109      	bne.n	801cd98 <__libc_init_array+0x24>
 801cd84:	4d0b      	ldr	r5, [pc, #44]	; (801cdb4 <__libc_init_array+0x40>)
 801cd86:	4c0c      	ldr	r4, [pc, #48]	; (801cdb8 <__libc_init_array+0x44>)
 801cd88:	f001 f812 	bl	801ddb0 <_init>
 801cd8c:	1b64      	subs	r4, r4, r5
 801cd8e:	10a4      	asrs	r4, r4, #2
 801cd90:	2600      	movs	r6, #0
 801cd92:	42a6      	cmp	r6, r4
 801cd94:	d105      	bne.n	801cda2 <__libc_init_array+0x2e>
 801cd96:	bd70      	pop	{r4, r5, r6, pc}
 801cd98:	f855 3b04 	ldr.w	r3, [r5], #4
 801cd9c:	4798      	blx	r3
 801cd9e:	3601      	adds	r6, #1
 801cda0:	e7ee      	b.n	801cd80 <__libc_init_array+0xc>
 801cda2:	f855 3b04 	ldr.w	r3, [r5], #4
 801cda6:	4798      	blx	r3
 801cda8:	3601      	adds	r6, #1
 801cdaa:	e7f2      	b.n	801cd92 <__libc_init_array+0x1e>
 801cdac:	08038b80 	.word	0x08038b80
 801cdb0:	08038b80 	.word	0x08038b80
 801cdb4:	08038b80 	.word	0x08038b80
 801cdb8:	08038b88 	.word	0x08038b88

0801cdbc <malloc>:
 801cdbc:	4b02      	ldr	r3, [pc, #8]	; (801cdc8 <malloc+0xc>)
 801cdbe:	4601      	mov	r1, r0
 801cdc0:	6818      	ldr	r0, [r3, #0]
 801cdc2:	f000 b8a7 	b.w	801cf14 <_malloc_r>
 801cdc6:	bf00      	nop
 801cdc8:	24000100 	.word	0x24000100

0801cdcc <free>:
 801cdcc:	4b02      	ldr	r3, [pc, #8]	; (801cdd8 <free+0xc>)
 801cdce:	4601      	mov	r1, r0
 801cdd0:	6818      	ldr	r0, [r3, #0]
 801cdd2:	f000 b833 	b.w	801ce3c <_free_r>
 801cdd6:	bf00      	nop
 801cdd8:	24000100 	.word	0x24000100

0801cddc <memcpy>:
 801cddc:	440a      	add	r2, r1
 801cdde:	4291      	cmp	r1, r2
 801cde0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801cde4:	d100      	bne.n	801cde8 <memcpy+0xc>
 801cde6:	4770      	bx	lr
 801cde8:	b510      	push	{r4, lr}
 801cdea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cdf2:	4291      	cmp	r1, r2
 801cdf4:	d1f9      	bne.n	801cdea <memcpy+0xe>
 801cdf6:	bd10      	pop	{r4, pc}

0801cdf8 <memmove>:
 801cdf8:	4288      	cmp	r0, r1
 801cdfa:	b510      	push	{r4, lr}
 801cdfc:	eb01 0402 	add.w	r4, r1, r2
 801ce00:	d902      	bls.n	801ce08 <memmove+0x10>
 801ce02:	4284      	cmp	r4, r0
 801ce04:	4623      	mov	r3, r4
 801ce06:	d807      	bhi.n	801ce18 <memmove+0x20>
 801ce08:	1e43      	subs	r3, r0, #1
 801ce0a:	42a1      	cmp	r1, r4
 801ce0c:	d008      	beq.n	801ce20 <memmove+0x28>
 801ce0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce12:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce16:	e7f8      	b.n	801ce0a <memmove+0x12>
 801ce18:	4402      	add	r2, r0
 801ce1a:	4601      	mov	r1, r0
 801ce1c:	428a      	cmp	r2, r1
 801ce1e:	d100      	bne.n	801ce22 <memmove+0x2a>
 801ce20:	bd10      	pop	{r4, pc}
 801ce22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce2a:	e7f7      	b.n	801ce1c <memmove+0x24>

0801ce2c <memset>:
 801ce2c:	4402      	add	r2, r0
 801ce2e:	4603      	mov	r3, r0
 801ce30:	4293      	cmp	r3, r2
 801ce32:	d100      	bne.n	801ce36 <memset+0xa>
 801ce34:	4770      	bx	lr
 801ce36:	f803 1b01 	strb.w	r1, [r3], #1
 801ce3a:	e7f9      	b.n	801ce30 <memset+0x4>

0801ce3c <_free_r>:
 801ce3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce3e:	2900      	cmp	r1, #0
 801ce40:	d044      	beq.n	801cecc <_free_r+0x90>
 801ce42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce46:	9001      	str	r0, [sp, #4]
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	f1a1 0404 	sub.w	r4, r1, #4
 801ce4e:	bfb8      	it	lt
 801ce50:	18e4      	addlt	r4, r4, r3
 801ce52:	f000 fef5 	bl	801dc40 <__malloc_lock>
 801ce56:	4a1e      	ldr	r2, [pc, #120]	; (801ced0 <_free_r+0x94>)
 801ce58:	9801      	ldr	r0, [sp, #4]
 801ce5a:	6813      	ldr	r3, [r2, #0]
 801ce5c:	b933      	cbnz	r3, 801ce6c <_free_r+0x30>
 801ce5e:	6063      	str	r3, [r4, #4]
 801ce60:	6014      	str	r4, [r2, #0]
 801ce62:	b003      	add	sp, #12
 801ce64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ce68:	f000 bef0 	b.w	801dc4c <__malloc_unlock>
 801ce6c:	42a3      	cmp	r3, r4
 801ce6e:	d908      	bls.n	801ce82 <_free_r+0x46>
 801ce70:	6825      	ldr	r5, [r4, #0]
 801ce72:	1961      	adds	r1, r4, r5
 801ce74:	428b      	cmp	r3, r1
 801ce76:	bf01      	itttt	eq
 801ce78:	6819      	ldreq	r1, [r3, #0]
 801ce7a:	685b      	ldreq	r3, [r3, #4]
 801ce7c:	1949      	addeq	r1, r1, r5
 801ce7e:	6021      	streq	r1, [r4, #0]
 801ce80:	e7ed      	b.n	801ce5e <_free_r+0x22>
 801ce82:	461a      	mov	r2, r3
 801ce84:	685b      	ldr	r3, [r3, #4]
 801ce86:	b10b      	cbz	r3, 801ce8c <_free_r+0x50>
 801ce88:	42a3      	cmp	r3, r4
 801ce8a:	d9fa      	bls.n	801ce82 <_free_r+0x46>
 801ce8c:	6811      	ldr	r1, [r2, #0]
 801ce8e:	1855      	adds	r5, r2, r1
 801ce90:	42a5      	cmp	r5, r4
 801ce92:	d10b      	bne.n	801ceac <_free_r+0x70>
 801ce94:	6824      	ldr	r4, [r4, #0]
 801ce96:	4421      	add	r1, r4
 801ce98:	1854      	adds	r4, r2, r1
 801ce9a:	42a3      	cmp	r3, r4
 801ce9c:	6011      	str	r1, [r2, #0]
 801ce9e:	d1e0      	bne.n	801ce62 <_free_r+0x26>
 801cea0:	681c      	ldr	r4, [r3, #0]
 801cea2:	685b      	ldr	r3, [r3, #4]
 801cea4:	6053      	str	r3, [r2, #4]
 801cea6:	4421      	add	r1, r4
 801cea8:	6011      	str	r1, [r2, #0]
 801ceaa:	e7da      	b.n	801ce62 <_free_r+0x26>
 801ceac:	d902      	bls.n	801ceb4 <_free_r+0x78>
 801ceae:	230c      	movs	r3, #12
 801ceb0:	6003      	str	r3, [r0, #0]
 801ceb2:	e7d6      	b.n	801ce62 <_free_r+0x26>
 801ceb4:	6825      	ldr	r5, [r4, #0]
 801ceb6:	1961      	adds	r1, r4, r5
 801ceb8:	428b      	cmp	r3, r1
 801ceba:	bf04      	itt	eq
 801cebc:	6819      	ldreq	r1, [r3, #0]
 801cebe:	685b      	ldreq	r3, [r3, #4]
 801cec0:	6063      	str	r3, [r4, #4]
 801cec2:	bf04      	itt	eq
 801cec4:	1949      	addeq	r1, r1, r5
 801cec6:	6021      	streq	r1, [r4, #0]
 801cec8:	6054      	str	r4, [r2, #4]
 801ceca:	e7ca      	b.n	801ce62 <_free_r+0x26>
 801cecc:	b003      	add	sp, #12
 801cece:	bd30      	pop	{r4, r5, pc}
 801ced0:	240036e8 	.word	0x240036e8

0801ced4 <sbrk_aligned>:
 801ced4:	b570      	push	{r4, r5, r6, lr}
 801ced6:	4e0e      	ldr	r6, [pc, #56]	; (801cf10 <sbrk_aligned+0x3c>)
 801ced8:	460c      	mov	r4, r1
 801ceda:	6831      	ldr	r1, [r6, #0]
 801cedc:	4605      	mov	r5, r0
 801cede:	b911      	cbnz	r1, 801cee6 <sbrk_aligned+0x12>
 801cee0:	f000 fb7a 	bl	801d5d8 <_sbrk_r>
 801cee4:	6030      	str	r0, [r6, #0]
 801cee6:	4621      	mov	r1, r4
 801cee8:	4628      	mov	r0, r5
 801ceea:	f000 fb75 	bl	801d5d8 <_sbrk_r>
 801ceee:	1c43      	adds	r3, r0, #1
 801cef0:	d00a      	beq.n	801cf08 <sbrk_aligned+0x34>
 801cef2:	1cc4      	adds	r4, r0, #3
 801cef4:	f024 0403 	bic.w	r4, r4, #3
 801cef8:	42a0      	cmp	r0, r4
 801cefa:	d007      	beq.n	801cf0c <sbrk_aligned+0x38>
 801cefc:	1a21      	subs	r1, r4, r0
 801cefe:	4628      	mov	r0, r5
 801cf00:	f000 fb6a 	bl	801d5d8 <_sbrk_r>
 801cf04:	3001      	adds	r0, #1
 801cf06:	d101      	bne.n	801cf0c <sbrk_aligned+0x38>
 801cf08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	bd70      	pop	{r4, r5, r6, pc}
 801cf10:	240036ec 	.word	0x240036ec

0801cf14 <_malloc_r>:
 801cf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf18:	1ccd      	adds	r5, r1, #3
 801cf1a:	f025 0503 	bic.w	r5, r5, #3
 801cf1e:	3508      	adds	r5, #8
 801cf20:	2d0c      	cmp	r5, #12
 801cf22:	bf38      	it	cc
 801cf24:	250c      	movcc	r5, #12
 801cf26:	2d00      	cmp	r5, #0
 801cf28:	4607      	mov	r7, r0
 801cf2a:	db01      	blt.n	801cf30 <_malloc_r+0x1c>
 801cf2c:	42a9      	cmp	r1, r5
 801cf2e:	d905      	bls.n	801cf3c <_malloc_r+0x28>
 801cf30:	230c      	movs	r3, #12
 801cf32:	603b      	str	r3, [r7, #0]
 801cf34:	2600      	movs	r6, #0
 801cf36:	4630      	mov	r0, r6
 801cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf3c:	4e2e      	ldr	r6, [pc, #184]	; (801cff8 <_malloc_r+0xe4>)
 801cf3e:	f000 fe7f 	bl	801dc40 <__malloc_lock>
 801cf42:	6833      	ldr	r3, [r6, #0]
 801cf44:	461c      	mov	r4, r3
 801cf46:	bb34      	cbnz	r4, 801cf96 <_malloc_r+0x82>
 801cf48:	4629      	mov	r1, r5
 801cf4a:	4638      	mov	r0, r7
 801cf4c:	f7ff ffc2 	bl	801ced4 <sbrk_aligned>
 801cf50:	1c43      	adds	r3, r0, #1
 801cf52:	4604      	mov	r4, r0
 801cf54:	d14d      	bne.n	801cff2 <_malloc_r+0xde>
 801cf56:	6834      	ldr	r4, [r6, #0]
 801cf58:	4626      	mov	r6, r4
 801cf5a:	2e00      	cmp	r6, #0
 801cf5c:	d140      	bne.n	801cfe0 <_malloc_r+0xcc>
 801cf5e:	6823      	ldr	r3, [r4, #0]
 801cf60:	4631      	mov	r1, r6
 801cf62:	4638      	mov	r0, r7
 801cf64:	eb04 0803 	add.w	r8, r4, r3
 801cf68:	f000 fb36 	bl	801d5d8 <_sbrk_r>
 801cf6c:	4580      	cmp	r8, r0
 801cf6e:	d13a      	bne.n	801cfe6 <_malloc_r+0xd2>
 801cf70:	6821      	ldr	r1, [r4, #0]
 801cf72:	3503      	adds	r5, #3
 801cf74:	1a6d      	subs	r5, r5, r1
 801cf76:	f025 0503 	bic.w	r5, r5, #3
 801cf7a:	3508      	adds	r5, #8
 801cf7c:	2d0c      	cmp	r5, #12
 801cf7e:	bf38      	it	cc
 801cf80:	250c      	movcc	r5, #12
 801cf82:	4629      	mov	r1, r5
 801cf84:	4638      	mov	r0, r7
 801cf86:	f7ff ffa5 	bl	801ced4 <sbrk_aligned>
 801cf8a:	3001      	adds	r0, #1
 801cf8c:	d02b      	beq.n	801cfe6 <_malloc_r+0xd2>
 801cf8e:	6823      	ldr	r3, [r4, #0]
 801cf90:	442b      	add	r3, r5
 801cf92:	6023      	str	r3, [r4, #0]
 801cf94:	e00e      	b.n	801cfb4 <_malloc_r+0xa0>
 801cf96:	6822      	ldr	r2, [r4, #0]
 801cf98:	1b52      	subs	r2, r2, r5
 801cf9a:	d41e      	bmi.n	801cfda <_malloc_r+0xc6>
 801cf9c:	2a0b      	cmp	r2, #11
 801cf9e:	d916      	bls.n	801cfce <_malloc_r+0xba>
 801cfa0:	1961      	adds	r1, r4, r5
 801cfa2:	42a3      	cmp	r3, r4
 801cfa4:	6025      	str	r5, [r4, #0]
 801cfa6:	bf18      	it	ne
 801cfa8:	6059      	strne	r1, [r3, #4]
 801cfaa:	6863      	ldr	r3, [r4, #4]
 801cfac:	bf08      	it	eq
 801cfae:	6031      	streq	r1, [r6, #0]
 801cfb0:	5162      	str	r2, [r4, r5]
 801cfb2:	604b      	str	r3, [r1, #4]
 801cfb4:	4638      	mov	r0, r7
 801cfb6:	f104 060b 	add.w	r6, r4, #11
 801cfba:	f000 fe47 	bl	801dc4c <__malloc_unlock>
 801cfbe:	f026 0607 	bic.w	r6, r6, #7
 801cfc2:	1d23      	adds	r3, r4, #4
 801cfc4:	1af2      	subs	r2, r6, r3
 801cfc6:	d0b6      	beq.n	801cf36 <_malloc_r+0x22>
 801cfc8:	1b9b      	subs	r3, r3, r6
 801cfca:	50a3      	str	r3, [r4, r2]
 801cfcc:	e7b3      	b.n	801cf36 <_malloc_r+0x22>
 801cfce:	6862      	ldr	r2, [r4, #4]
 801cfd0:	42a3      	cmp	r3, r4
 801cfd2:	bf0c      	ite	eq
 801cfd4:	6032      	streq	r2, [r6, #0]
 801cfd6:	605a      	strne	r2, [r3, #4]
 801cfd8:	e7ec      	b.n	801cfb4 <_malloc_r+0xa0>
 801cfda:	4623      	mov	r3, r4
 801cfdc:	6864      	ldr	r4, [r4, #4]
 801cfde:	e7b2      	b.n	801cf46 <_malloc_r+0x32>
 801cfe0:	4634      	mov	r4, r6
 801cfe2:	6876      	ldr	r6, [r6, #4]
 801cfe4:	e7b9      	b.n	801cf5a <_malloc_r+0x46>
 801cfe6:	230c      	movs	r3, #12
 801cfe8:	603b      	str	r3, [r7, #0]
 801cfea:	4638      	mov	r0, r7
 801cfec:	f000 fe2e 	bl	801dc4c <__malloc_unlock>
 801cff0:	e7a1      	b.n	801cf36 <_malloc_r+0x22>
 801cff2:	6025      	str	r5, [r4, #0]
 801cff4:	e7de      	b.n	801cfb4 <_malloc_r+0xa0>
 801cff6:	bf00      	nop
 801cff8:	240036e8 	.word	0x240036e8

0801cffc <__sfputc_r>:
 801cffc:	6893      	ldr	r3, [r2, #8]
 801cffe:	3b01      	subs	r3, #1
 801d000:	2b00      	cmp	r3, #0
 801d002:	b410      	push	{r4}
 801d004:	6093      	str	r3, [r2, #8]
 801d006:	da08      	bge.n	801d01a <__sfputc_r+0x1e>
 801d008:	6994      	ldr	r4, [r2, #24]
 801d00a:	42a3      	cmp	r3, r4
 801d00c:	db01      	blt.n	801d012 <__sfputc_r+0x16>
 801d00e:	290a      	cmp	r1, #10
 801d010:	d103      	bne.n	801d01a <__sfputc_r+0x1e>
 801d012:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d016:	f000 bb33 	b.w	801d680 <__swbuf_r>
 801d01a:	6813      	ldr	r3, [r2, #0]
 801d01c:	1c58      	adds	r0, r3, #1
 801d01e:	6010      	str	r0, [r2, #0]
 801d020:	7019      	strb	r1, [r3, #0]
 801d022:	4608      	mov	r0, r1
 801d024:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d028:	4770      	bx	lr

0801d02a <__sfputs_r>:
 801d02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d02c:	4606      	mov	r6, r0
 801d02e:	460f      	mov	r7, r1
 801d030:	4614      	mov	r4, r2
 801d032:	18d5      	adds	r5, r2, r3
 801d034:	42ac      	cmp	r4, r5
 801d036:	d101      	bne.n	801d03c <__sfputs_r+0x12>
 801d038:	2000      	movs	r0, #0
 801d03a:	e007      	b.n	801d04c <__sfputs_r+0x22>
 801d03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d040:	463a      	mov	r2, r7
 801d042:	4630      	mov	r0, r6
 801d044:	f7ff ffda 	bl	801cffc <__sfputc_r>
 801d048:	1c43      	adds	r3, r0, #1
 801d04a:	d1f3      	bne.n	801d034 <__sfputs_r+0xa>
 801d04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d050 <_vfiprintf_r>:
 801d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d054:	460d      	mov	r5, r1
 801d056:	b09d      	sub	sp, #116	; 0x74
 801d058:	4614      	mov	r4, r2
 801d05a:	4698      	mov	r8, r3
 801d05c:	4606      	mov	r6, r0
 801d05e:	b118      	cbz	r0, 801d068 <_vfiprintf_r+0x18>
 801d060:	6983      	ldr	r3, [r0, #24]
 801d062:	b90b      	cbnz	r3, 801d068 <_vfiprintf_r+0x18>
 801d064:	f000 fce6 	bl	801da34 <__sinit>
 801d068:	4b89      	ldr	r3, [pc, #548]	; (801d290 <_vfiprintf_r+0x240>)
 801d06a:	429d      	cmp	r5, r3
 801d06c:	d11b      	bne.n	801d0a6 <_vfiprintf_r+0x56>
 801d06e:	6875      	ldr	r5, [r6, #4]
 801d070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d072:	07d9      	lsls	r1, r3, #31
 801d074:	d405      	bmi.n	801d082 <_vfiprintf_r+0x32>
 801d076:	89ab      	ldrh	r3, [r5, #12]
 801d078:	059a      	lsls	r2, r3, #22
 801d07a:	d402      	bmi.n	801d082 <_vfiprintf_r+0x32>
 801d07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d07e:	f000 fd77 	bl	801db70 <__retarget_lock_acquire_recursive>
 801d082:	89ab      	ldrh	r3, [r5, #12]
 801d084:	071b      	lsls	r3, r3, #28
 801d086:	d501      	bpl.n	801d08c <_vfiprintf_r+0x3c>
 801d088:	692b      	ldr	r3, [r5, #16]
 801d08a:	b9eb      	cbnz	r3, 801d0c8 <_vfiprintf_r+0x78>
 801d08c:	4629      	mov	r1, r5
 801d08e:	4630      	mov	r0, r6
 801d090:	f000 fb48 	bl	801d724 <__swsetup_r>
 801d094:	b1c0      	cbz	r0, 801d0c8 <_vfiprintf_r+0x78>
 801d096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d098:	07dc      	lsls	r4, r3, #31
 801d09a:	d50e      	bpl.n	801d0ba <_vfiprintf_r+0x6a>
 801d09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d0a0:	b01d      	add	sp, #116	; 0x74
 801d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a6:	4b7b      	ldr	r3, [pc, #492]	; (801d294 <_vfiprintf_r+0x244>)
 801d0a8:	429d      	cmp	r5, r3
 801d0aa:	d101      	bne.n	801d0b0 <_vfiprintf_r+0x60>
 801d0ac:	68b5      	ldr	r5, [r6, #8]
 801d0ae:	e7df      	b.n	801d070 <_vfiprintf_r+0x20>
 801d0b0:	4b79      	ldr	r3, [pc, #484]	; (801d298 <_vfiprintf_r+0x248>)
 801d0b2:	429d      	cmp	r5, r3
 801d0b4:	bf08      	it	eq
 801d0b6:	68f5      	ldreq	r5, [r6, #12]
 801d0b8:	e7da      	b.n	801d070 <_vfiprintf_r+0x20>
 801d0ba:	89ab      	ldrh	r3, [r5, #12]
 801d0bc:	0598      	lsls	r0, r3, #22
 801d0be:	d4ed      	bmi.n	801d09c <_vfiprintf_r+0x4c>
 801d0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0c2:	f000 fd56 	bl	801db72 <__retarget_lock_release_recursive>
 801d0c6:	e7e9      	b.n	801d09c <_vfiprintf_r+0x4c>
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	9309      	str	r3, [sp, #36]	; 0x24
 801d0cc:	2320      	movs	r3, #32
 801d0ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0d6:	2330      	movs	r3, #48	; 0x30
 801d0d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d29c <_vfiprintf_r+0x24c>
 801d0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d0e0:	f04f 0901 	mov.w	r9, #1
 801d0e4:	4623      	mov	r3, r4
 801d0e6:	469a      	mov	sl, r3
 801d0e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0ec:	b10a      	cbz	r2, 801d0f2 <_vfiprintf_r+0xa2>
 801d0ee:	2a25      	cmp	r2, #37	; 0x25
 801d0f0:	d1f9      	bne.n	801d0e6 <_vfiprintf_r+0x96>
 801d0f2:	ebba 0b04 	subs.w	fp, sl, r4
 801d0f6:	d00b      	beq.n	801d110 <_vfiprintf_r+0xc0>
 801d0f8:	465b      	mov	r3, fp
 801d0fa:	4622      	mov	r2, r4
 801d0fc:	4629      	mov	r1, r5
 801d0fe:	4630      	mov	r0, r6
 801d100:	f7ff ff93 	bl	801d02a <__sfputs_r>
 801d104:	3001      	adds	r0, #1
 801d106:	f000 80aa 	beq.w	801d25e <_vfiprintf_r+0x20e>
 801d10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d10c:	445a      	add	r2, fp
 801d10e:	9209      	str	r2, [sp, #36]	; 0x24
 801d110:	f89a 3000 	ldrb.w	r3, [sl]
 801d114:	2b00      	cmp	r3, #0
 801d116:	f000 80a2 	beq.w	801d25e <_vfiprintf_r+0x20e>
 801d11a:	2300      	movs	r3, #0
 801d11c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d124:	f10a 0a01 	add.w	sl, sl, #1
 801d128:	9304      	str	r3, [sp, #16]
 801d12a:	9307      	str	r3, [sp, #28]
 801d12c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d130:	931a      	str	r3, [sp, #104]	; 0x68
 801d132:	4654      	mov	r4, sl
 801d134:	2205      	movs	r2, #5
 801d136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d13a:	4858      	ldr	r0, [pc, #352]	; (801d29c <_vfiprintf_r+0x24c>)
 801d13c:	f7e3 f8d0 	bl	80002e0 <memchr>
 801d140:	9a04      	ldr	r2, [sp, #16]
 801d142:	b9d8      	cbnz	r0, 801d17c <_vfiprintf_r+0x12c>
 801d144:	06d1      	lsls	r1, r2, #27
 801d146:	bf44      	itt	mi
 801d148:	2320      	movmi	r3, #32
 801d14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d14e:	0713      	lsls	r3, r2, #28
 801d150:	bf44      	itt	mi
 801d152:	232b      	movmi	r3, #43	; 0x2b
 801d154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d158:	f89a 3000 	ldrb.w	r3, [sl]
 801d15c:	2b2a      	cmp	r3, #42	; 0x2a
 801d15e:	d015      	beq.n	801d18c <_vfiprintf_r+0x13c>
 801d160:	9a07      	ldr	r2, [sp, #28]
 801d162:	4654      	mov	r4, sl
 801d164:	2000      	movs	r0, #0
 801d166:	f04f 0c0a 	mov.w	ip, #10
 801d16a:	4621      	mov	r1, r4
 801d16c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d170:	3b30      	subs	r3, #48	; 0x30
 801d172:	2b09      	cmp	r3, #9
 801d174:	d94e      	bls.n	801d214 <_vfiprintf_r+0x1c4>
 801d176:	b1b0      	cbz	r0, 801d1a6 <_vfiprintf_r+0x156>
 801d178:	9207      	str	r2, [sp, #28]
 801d17a:	e014      	b.n	801d1a6 <_vfiprintf_r+0x156>
 801d17c:	eba0 0308 	sub.w	r3, r0, r8
 801d180:	fa09 f303 	lsl.w	r3, r9, r3
 801d184:	4313      	orrs	r3, r2
 801d186:	9304      	str	r3, [sp, #16]
 801d188:	46a2      	mov	sl, r4
 801d18a:	e7d2      	b.n	801d132 <_vfiprintf_r+0xe2>
 801d18c:	9b03      	ldr	r3, [sp, #12]
 801d18e:	1d19      	adds	r1, r3, #4
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	9103      	str	r1, [sp, #12]
 801d194:	2b00      	cmp	r3, #0
 801d196:	bfbb      	ittet	lt
 801d198:	425b      	neglt	r3, r3
 801d19a:	f042 0202 	orrlt.w	r2, r2, #2
 801d19e:	9307      	strge	r3, [sp, #28]
 801d1a0:	9307      	strlt	r3, [sp, #28]
 801d1a2:	bfb8      	it	lt
 801d1a4:	9204      	strlt	r2, [sp, #16]
 801d1a6:	7823      	ldrb	r3, [r4, #0]
 801d1a8:	2b2e      	cmp	r3, #46	; 0x2e
 801d1aa:	d10c      	bne.n	801d1c6 <_vfiprintf_r+0x176>
 801d1ac:	7863      	ldrb	r3, [r4, #1]
 801d1ae:	2b2a      	cmp	r3, #42	; 0x2a
 801d1b0:	d135      	bne.n	801d21e <_vfiprintf_r+0x1ce>
 801d1b2:	9b03      	ldr	r3, [sp, #12]
 801d1b4:	1d1a      	adds	r2, r3, #4
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	9203      	str	r2, [sp, #12]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	bfb8      	it	lt
 801d1be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d1c2:	3402      	adds	r4, #2
 801d1c4:	9305      	str	r3, [sp, #20]
 801d1c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d2ac <_vfiprintf_r+0x25c>
 801d1ca:	7821      	ldrb	r1, [r4, #0]
 801d1cc:	2203      	movs	r2, #3
 801d1ce:	4650      	mov	r0, sl
 801d1d0:	f7e3 f886 	bl	80002e0 <memchr>
 801d1d4:	b140      	cbz	r0, 801d1e8 <_vfiprintf_r+0x198>
 801d1d6:	2340      	movs	r3, #64	; 0x40
 801d1d8:	eba0 000a 	sub.w	r0, r0, sl
 801d1dc:	fa03 f000 	lsl.w	r0, r3, r0
 801d1e0:	9b04      	ldr	r3, [sp, #16]
 801d1e2:	4303      	orrs	r3, r0
 801d1e4:	3401      	adds	r4, #1
 801d1e6:	9304      	str	r3, [sp, #16]
 801d1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1ec:	482c      	ldr	r0, [pc, #176]	; (801d2a0 <_vfiprintf_r+0x250>)
 801d1ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d1f2:	2206      	movs	r2, #6
 801d1f4:	f7e3 f874 	bl	80002e0 <memchr>
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	d03f      	beq.n	801d27c <_vfiprintf_r+0x22c>
 801d1fc:	4b29      	ldr	r3, [pc, #164]	; (801d2a4 <_vfiprintf_r+0x254>)
 801d1fe:	bb1b      	cbnz	r3, 801d248 <_vfiprintf_r+0x1f8>
 801d200:	9b03      	ldr	r3, [sp, #12]
 801d202:	3307      	adds	r3, #7
 801d204:	f023 0307 	bic.w	r3, r3, #7
 801d208:	3308      	adds	r3, #8
 801d20a:	9303      	str	r3, [sp, #12]
 801d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d20e:	443b      	add	r3, r7
 801d210:	9309      	str	r3, [sp, #36]	; 0x24
 801d212:	e767      	b.n	801d0e4 <_vfiprintf_r+0x94>
 801d214:	fb0c 3202 	mla	r2, ip, r2, r3
 801d218:	460c      	mov	r4, r1
 801d21a:	2001      	movs	r0, #1
 801d21c:	e7a5      	b.n	801d16a <_vfiprintf_r+0x11a>
 801d21e:	2300      	movs	r3, #0
 801d220:	3401      	adds	r4, #1
 801d222:	9305      	str	r3, [sp, #20]
 801d224:	4619      	mov	r1, r3
 801d226:	f04f 0c0a 	mov.w	ip, #10
 801d22a:	4620      	mov	r0, r4
 801d22c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d230:	3a30      	subs	r2, #48	; 0x30
 801d232:	2a09      	cmp	r2, #9
 801d234:	d903      	bls.n	801d23e <_vfiprintf_r+0x1ee>
 801d236:	2b00      	cmp	r3, #0
 801d238:	d0c5      	beq.n	801d1c6 <_vfiprintf_r+0x176>
 801d23a:	9105      	str	r1, [sp, #20]
 801d23c:	e7c3      	b.n	801d1c6 <_vfiprintf_r+0x176>
 801d23e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d242:	4604      	mov	r4, r0
 801d244:	2301      	movs	r3, #1
 801d246:	e7f0      	b.n	801d22a <_vfiprintf_r+0x1da>
 801d248:	ab03      	add	r3, sp, #12
 801d24a:	9300      	str	r3, [sp, #0]
 801d24c:	462a      	mov	r2, r5
 801d24e:	4b16      	ldr	r3, [pc, #88]	; (801d2a8 <_vfiprintf_r+0x258>)
 801d250:	a904      	add	r1, sp, #16
 801d252:	4630      	mov	r0, r6
 801d254:	f3af 8000 	nop.w
 801d258:	4607      	mov	r7, r0
 801d25a:	1c78      	adds	r0, r7, #1
 801d25c:	d1d6      	bne.n	801d20c <_vfiprintf_r+0x1bc>
 801d25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d260:	07d9      	lsls	r1, r3, #31
 801d262:	d405      	bmi.n	801d270 <_vfiprintf_r+0x220>
 801d264:	89ab      	ldrh	r3, [r5, #12]
 801d266:	059a      	lsls	r2, r3, #22
 801d268:	d402      	bmi.n	801d270 <_vfiprintf_r+0x220>
 801d26a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d26c:	f000 fc81 	bl	801db72 <__retarget_lock_release_recursive>
 801d270:	89ab      	ldrh	r3, [r5, #12]
 801d272:	065b      	lsls	r3, r3, #25
 801d274:	f53f af12 	bmi.w	801d09c <_vfiprintf_r+0x4c>
 801d278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d27a:	e711      	b.n	801d0a0 <_vfiprintf_r+0x50>
 801d27c:	ab03      	add	r3, sp, #12
 801d27e:	9300      	str	r3, [sp, #0]
 801d280:	462a      	mov	r2, r5
 801d282:	4b09      	ldr	r3, [pc, #36]	; (801d2a8 <_vfiprintf_r+0x258>)
 801d284:	a904      	add	r1, sp, #16
 801d286:	4630      	mov	r0, r6
 801d288:	f000 f880 	bl	801d38c <_printf_i>
 801d28c:	e7e4      	b.n	801d258 <_vfiprintf_r+0x208>
 801d28e:	bf00      	nop
 801d290:	08038b38 	.word	0x08038b38
 801d294:	08038b58 	.word	0x08038b58
 801d298:	08038b18 	.word	0x08038b18
 801d29c:	08038ae4 	.word	0x08038ae4
 801d2a0:	08038aee 	.word	0x08038aee
 801d2a4:	00000000 	.word	0x00000000
 801d2a8:	0801d02b 	.word	0x0801d02b
 801d2ac:	08038aea 	.word	0x08038aea

0801d2b0 <_printf_common>:
 801d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2b4:	4616      	mov	r6, r2
 801d2b6:	4699      	mov	r9, r3
 801d2b8:	688a      	ldr	r2, [r1, #8]
 801d2ba:	690b      	ldr	r3, [r1, #16]
 801d2bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d2c0:	4293      	cmp	r3, r2
 801d2c2:	bfb8      	it	lt
 801d2c4:	4613      	movlt	r3, r2
 801d2c6:	6033      	str	r3, [r6, #0]
 801d2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d2cc:	4607      	mov	r7, r0
 801d2ce:	460c      	mov	r4, r1
 801d2d0:	b10a      	cbz	r2, 801d2d6 <_printf_common+0x26>
 801d2d2:	3301      	adds	r3, #1
 801d2d4:	6033      	str	r3, [r6, #0]
 801d2d6:	6823      	ldr	r3, [r4, #0]
 801d2d8:	0699      	lsls	r1, r3, #26
 801d2da:	bf42      	ittt	mi
 801d2dc:	6833      	ldrmi	r3, [r6, #0]
 801d2de:	3302      	addmi	r3, #2
 801d2e0:	6033      	strmi	r3, [r6, #0]
 801d2e2:	6825      	ldr	r5, [r4, #0]
 801d2e4:	f015 0506 	ands.w	r5, r5, #6
 801d2e8:	d106      	bne.n	801d2f8 <_printf_common+0x48>
 801d2ea:	f104 0a19 	add.w	sl, r4, #25
 801d2ee:	68e3      	ldr	r3, [r4, #12]
 801d2f0:	6832      	ldr	r2, [r6, #0]
 801d2f2:	1a9b      	subs	r3, r3, r2
 801d2f4:	42ab      	cmp	r3, r5
 801d2f6:	dc26      	bgt.n	801d346 <_printf_common+0x96>
 801d2f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d2fc:	1e13      	subs	r3, r2, #0
 801d2fe:	6822      	ldr	r2, [r4, #0]
 801d300:	bf18      	it	ne
 801d302:	2301      	movne	r3, #1
 801d304:	0692      	lsls	r2, r2, #26
 801d306:	d42b      	bmi.n	801d360 <_printf_common+0xb0>
 801d308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d30c:	4649      	mov	r1, r9
 801d30e:	4638      	mov	r0, r7
 801d310:	47c0      	blx	r8
 801d312:	3001      	adds	r0, #1
 801d314:	d01e      	beq.n	801d354 <_printf_common+0xa4>
 801d316:	6823      	ldr	r3, [r4, #0]
 801d318:	68e5      	ldr	r5, [r4, #12]
 801d31a:	6832      	ldr	r2, [r6, #0]
 801d31c:	f003 0306 	and.w	r3, r3, #6
 801d320:	2b04      	cmp	r3, #4
 801d322:	bf08      	it	eq
 801d324:	1aad      	subeq	r5, r5, r2
 801d326:	68a3      	ldr	r3, [r4, #8]
 801d328:	6922      	ldr	r2, [r4, #16]
 801d32a:	bf0c      	ite	eq
 801d32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d330:	2500      	movne	r5, #0
 801d332:	4293      	cmp	r3, r2
 801d334:	bfc4      	itt	gt
 801d336:	1a9b      	subgt	r3, r3, r2
 801d338:	18ed      	addgt	r5, r5, r3
 801d33a:	2600      	movs	r6, #0
 801d33c:	341a      	adds	r4, #26
 801d33e:	42b5      	cmp	r5, r6
 801d340:	d11a      	bne.n	801d378 <_printf_common+0xc8>
 801d342:	2000      	movs	r0, #0
 801d344:	e008      	b.n	801d358 <_printf_common+0xa8>
 801d346:	2301      	movs	r3, #1
 801d348:	4652      	mov	r2, sl
 801d34a:	4649      	mov	r1, r9
 801d34c:	4638      	mov	r0, r7
 801d34e:	47c0      	blx	r8
 801d350:	3001      	adds	r0, #1
 801d352:	d103      	bne.n	801d35c <_printf_common+0xac>
 801d354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d35c:	3501      	adds	r5, #1
 801d35e:	e7c6      	b.n	801d2ee <_printf_common+0x3e>
 801d360:	18e1      	adds	r1, r4, r3
 801d362:	1c5a      	adds	r2, r3, #1
 801d364:	2030      	movs	r0, #48	; 0x30
 801d366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d36a:	4422      	add	r2, r4
 801d36c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d374:	3302      	adds	r3, #2
 801d376:	e7c7      	b.n	801d308 <_printf_common+0x58>
 801d378:	2301      	movs	r3, #1
 801d37a:	4622      	mov	r2, r4
 801d37c:	4649      	mov	r1, r9
 801d37e:	4638      	mov	r0, r7
 801d380:	47c0      	blx	r8
 801d382:	3001      	adds	r0, #1
 801d384:	d0e6      	beq.n	801d354 <_printf_common+0xa4>
 801d386:	3601      	adds	r6, #1
 801d388:	e7d9      	b.n	801d33e <_printf_common+0x8e>
	...

0801d38c <_printf_i>:
 801d38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d390:	7e0f      	ldrb	r7, [r1, #24]
 801d392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d394:	2f78      	cmp	r7, #120	; 0x78
 801d396:	4691      	mov	r9, r2
 801d398:	4680      	mov	r8, r0
 801d39a:	460c      	mov	r4, r1
 801d39c:	469a      	mov	sl, r3
 801d39e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d3a2:	d807      	bhi.n	801d3b4 <_printf_i+0x28>
 801d3a4:	2f62      	cmp	r7, #98	; 0x62
 801d3a6:	d80a      	bhi.n	801d3be <_printf_i+0x32>
 801d3a8:	2f00      	cmp	r7, #0
 801d3aa:	f000 80d8 	beq.w	801d55e <_printf_i+0x1d2>
 801d3ae:	2f58      	cmp	r7, #88	; 0x58
 801d3b0:	f000 80a3 	beq.w	801d4fa <_printf_i+0x16e>
 801d3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d3bc:	e03a      	b.n	801d434 <_printf_i+0xa8>
 801d3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d3c2:	2b15      	cmp	r3, #21
 801d3c4:	d8f6      	bhi.n	801d3b4 <_printf_i+0x28>
 801d3c6:	a101      	add	r1, pc, #4	; (adr r1, 801d3cc <_printf_i+0x40>)
 801d3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d3cc:	0801d425 	.word	0x0801d425
 801d3d0:	0801d439 	.word	0x0801d439
 801d3d4:	0801d3b5 	.word	0x0801d3b5
 801d3d8:	0801d3b5 	.word	0x0801d3b5
 801d3dc:	0801d3b5 	.word	0x0801d3b5
 801d3e0:	0801d3b5 	.word	0x0801d3b5
 801d3e4:	0801d439 	.word	0x0801d439
 801d3e8:	0801d3b5 	.word	0x0801d3b5
 801d3ec:	0801d3b5 	.word	0x0801d3b5
 801d3f0:	0801d3b5 	.word	0x0801d3b5
 801d3f4:	0801d3b5 	.word	0x0801d3b5
 801d3f8:	0801d545 	.word	0x0801d545
 801d3fc:	0801d469 	.word	0x0801d469
 801d400:	0801d527 	.word	0x0801d527
 801d404:	0801d3b5 	.word	0x0801d3b5
 801d408:	0801d3b5 	.word	0x0801d3b5
 801d40c:	0801d567 	.word	0x0801d567
 801d410:	0801d3b5 	.word	0x0801d3b5
 801d414:	0801d469 	.word	0x0801d469
 801d418:	0801d3b5 	.word	0x0801d3b5
 801d41c:	0801d3b5 	.word	0x0801d3b5
 801d420:	0801d52f 	.word	0x0801d52f
 801d424:	682b      	ldr	r3, [r5, #0]
 801d426:	1d1a      	adds	r2, r3, #4
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	602a      	str	r2, [r5, #0]
 801d42c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d434:	2301      	movs	r3, #1
 801d436:	e0a3      	b.n	801d580 <_printf_i+0x1f4>
 801d438:	6820      	ldr	r0, [r4, #0]
 801d43a:	6829      	ldr	r1, [r5, #0]
 801d43c:	0606      	lsls	r6, r0, #24
 801d43e:	f101 0304 	add.w	r3, r1, #4
 801d442:	d50a      	bpl.n	801d45a <_printf_i+0xce>
 801d444:	680e      	ldr	r6, [r1, #0]
 801d446:	602b      	str	r3, [r5, #0]
 801d448:	2e00      	cmp	r6, #0
 801d44a:	da03      	bge.n	801d454 <_printf_i+0xc8>
 801d44c:	232d      	movs	r3, #45	; 0x2d
 801d44e:	4276      	negs	r6, r6
 801d450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d454:	485e      	ldr	r0, [pc, #376]	; (801d5d0 <_printf_i+0x244>)
 801d456:	230a      	movs	r3, #10
 801d458:	e019      	b.n	801d48e <_printf_i+0x102>
 801d45a:	680e      	ldr	r6, [r1, #0]
 801d45c:	602b      	str	r3, [r5, #0]
 801d45e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d462:	bf18      	it	ne
 801d464:	b236      	sxthne	r6, r6
 801d466:	e7ef      	b.n	801d448 <_printf_i+0xbc>
 801d468:	682b      	ldr	r3, [r5, #0]
 801d46a:	6820      	ldr	r0, [r4, #0]
 801d46c:	1d19      	adds	r1, r3, #4
 801d46e:	6029      	str	r1, [r5, #0]
 801d470:	0601      	lsls	r1, r0, #24
 801d472:	d501      	bpl.n	801d478 <_printf_i+0xec>
 801d474:	681e      	ldr	r6, [r3, #0]
 801d476:	e002      	b.n	801d47e <_printf_i+0xf2>
 801d478:	0646      	lsls	r6, r0, #25
 801d47a:	d5fb      	bpl.n	801d474 <_printf_i+0xe8>
 801d47c:	881e      	ldrh	r6, [r3, #0]
 801d47e:	4854      	ldr	r0, [pc, #336]	; (801d5d0 <_printf_i+0x244>)
 801d480:	2f6f      	cmp	r7, #111	; 0x6f
 801d482:	bf0c      	ite	eq
 801d484:	2308      	moveq	r3, #8
 801d486:	230a      	movne	r3, #10
 801d488:	2100      	movs	r1, #0
 801d48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d48e:	6865      	ldr	r5, [r4, #4]
 801d490:	60a5      	str	r5, [r4, #8]
 801d492:	2d00      	cmp	r5, #0
 801d494:	bfa2      	ittt	ge
 801d496:	6821      	ldrge	r1, [r4, #0]
 801d498:	f021 0104 	bicge.w	r1, r1, #4
 801d49c:	6021      	strge	r1, [r4, #0]
 801d49e:	b90e      	cbnz	r6, 801d4a4 <_printf_i+0x118>
 801d4a0:	2d00      	cmp	r5, #0
 801d4a2:	d04d      	beq.n	801d540 <_printf_i+0x1b4>
 801d4a4:	4615      	mov	r5, r2
 801d4a6:	fbb6 f1f3 	udiv	r1, r6, r3
 801d4aa:	fb03 6711 	mls	r7, r3, r1, r6
 801d4ae:	5dc7      	ldrb	r7, [r0, r7]
 801d4b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d4b4:	4637      	mov	r7, r6
 801d4b6:	42bb      	cmp	r3, r7
 801d4b8:	460e      	mov	r6, r1
 801d4ba:	d9f4      	bls.n	801d4a6 <_printf_i+0x11a>
 801d4bc:	2b08      	cmp	r3, #8
 801d4be:	d10b      	bne.n	801d4d8 <_printf_i+0x14c>
 801d4c0:	6823      	ldr	r3, [r4, #0]
 801d4c2:	07de      	lsls	r6, r3, #31
 801d4c4:	d508      	bpl.n	801d4d8 <_printf_i+0x14c>
 801d4c6:	6923      	ldr	r3, [r4, #16]
 801d4c8:	6861      	ldr	r1, [r4, #4]
 801d4ca:	4299      	cmp	r1, r3
 801d4cc:	bfde      	ittt	le
 801d4ce:	2330      	movle	r3, #48	; 0x30
 801d4d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d4d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d4d8:	1b52      	subs	r2, r2, r5
 801d4da:	6122      	str	r2, [r4, #16]
 801d4dc:	f8cd a000 	str.w	sl, [sp]
 801d4e0:	464b      	mov	r3, r9
 801d4e2:	aa03      	add	r2, sp, #12
 801d4e4:	4621      	mov	r1, r4
 801d4e6:	4640      	mov	r0, r8
 801d4e8:	f7ff fee2 	bl	801d2b0 <_printf_common>
 801d4ec:	3001      	adds	r0, #1
 801d4ee:	d14c      	bne.n	801d58a <_printf_i+0x1fe>
 801d4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4f4:	b004      	add	sp, #16
 801d4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4fa:	4835      	ldr	r0, [pc, #212]	; (801d5d0 <_printf_i+0x244>)
 801d4fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d500:	6829      	ldr	r1, [r5, #0]
 801d502:	6823      	ldr	r3, [r4, #0]
 801d504:	f851 6b04 	ldr.w	r6, [r1], #4
 801d508:	6029      	str	r1, [r5, #0]
 801d50a:	061d      	lsls	r5, r3, #24
 801d50c:	d514      	bpl.n	801d538 <_printf_i+0x1ac>
 801d50e:	07df      	lsls	r7, r3, #31
 801d510:	bf44      	itt	mi
 801d512:	f043 0320 	orrmi.w	r3, r3, #32
 801d516:	6023      	strmi	r3, [r4, #0]
 801d518:	b91e      	cbnz	r6, 801d522 <_printf_i+0x196>
 801d51a:	6823      	ldr	r3, [r4, #0]
 801d51c:	f023 0320 	bic.w	r3, r3, #32
 801d520:	6023      	str	r3, [r4, #0]
 801d522:	2310      	movs	r3, #16
 801d524:	e7b0      	b.n	801d488 <_printf_i+0xfc>
 801d526:	6823      	ldr	r3, [r4, #0]
 801d528:	f043 0320 	orr.w	r3, r3, #32
 801d52c:	6023      	str	r3, [r4, #0]
 801d52e:	2378      	movs	r3, #120	; 0x78
 801d530:	4828      	ldr	r0, [pc, #160]	; (801d5d4 <_printf_i+0x248>)
 801d532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d536:	e7e3      	b.n	801d500 <_printf_i+0x174>
 801d538:	0659      	lsls	r1, r3, #25
 801d53a:	bf48      	it	mi
 801d53c:	b2b6      	uxthmi	r6, r6
 801d53e:	e7e6      	b.n	801d50e <_printf_i+0x182>
 801d540:	4615      	mov	r5, r2
 801d542:	e7bb      	b.n	801d4bc <_printf_i+0x130>
 801d544:	682b      	ldr	r3, [r5, #0]
 801d546:	6826      	ldr	r6, [r4, #0]
 801d548:	6961      	ldr	r1, [r4, #20]
 801d54a:	1d18      	adds	r0, r3, #4
 801d54c:	6028      	str	r0, [r5, #0]
 801d54e:	0635      	lsls	r5, r6, #24
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	d501      	bpl.n	801d558 <_printf_i+0x1cc>
 801d554:	6019      	str	r1, [r3, #0]
 801d556:	e002      	b.n	801d55e <_printf_i+0x1d2>
 801d558:	0670      	lsls	r0, r6, #25
 801d55a:	d5fb      	bpl.n	801d554 <_printf_i+0x1c8>
 801d55c:	8019      	strh	r1, [r3, #0]
 801d55e:	2300      	movs	r3, #0
 801d560:	6123      	str	r3, [r4, #16]
 801d562:	4615      	mov	r5, r2
 801d564:	e7ba      	b.n	801d4dc <_printf_i+0x150>
 801d566:	682b      	ldr	r3, [r5, #0]
 801d568:	1d1a      	adds	r2, r3, #4
 801d56a:	602a      	str	r2, [r5, #0]
 801d56c:	681d      	ldr	r5, [r3, #0]
 801d56e:	6862      	ldr	r2, [r4, #4]
 801d570:	2100      	movs	r1, #0
 801d572:	4628      	mov	r0, r5
 801d574:	f7e2 feb4 	bl	80002e0 <memchr>
 801d578:	b108      	cbz	r0, 801d57e <_printf_i+0x1f2>
 801d57a:	1b40      	subs	r0, r0, r5
 801d57c:	6060      	str	r0, [r4, #4]
 801d57e:	6863      	ldr	r3, [r4, #4]
 801d580:	6123      	str	r3, [r4, #16]
 801d582:	2300      	movs	r3, #0
 801d584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d588:	e7a8      	b.n	801d4dc <_printf_i+0x150>
 801d58a:	6923      	ldr	r3, [r4, #16]
 801d58c:	462a      	mov	r2, r5
 801d58e:	4649      	mov	r1, r9
 801d590:	4640      	mov	r0, r8
 801d592:	47d0      	blx	sl
 801d594:	3001      	adds	r0, #1
 801d596:	d0ab      	beq.n	801d4f0 <_printf_i+0x164>
 801d598:	6823      	ldr	r3, [r4, #0]
 801d59a:	079b      	lsls	r3, r3, #30
 801d59c:	d413      	bmi.n	801d5c6 <_printf_i+0x23a>
 801d59e:	68e0      	ldr	r0, [r4, #12]
 801d5a0:	9b03      	ldr	r3, [sp, #12]
 801d5a2:	4298      	cmp	r0, r3
 801d5a4:	bfb8      	it	lt
 801d5a6:	4618      	movlt	r0, r3
 801d5a8:	e7a4      	b.n	801d4f4 <_printf_i+0x168>
 801d5aa:	2301      	movs	r3, #1
 801d5ac:	4632      	mov	r2, r6
 801d5ae:	4649      	mov	r1, r9
 801d5b0:	4640      	mov	r0, r8
 801d5b2:	47d0      	blx	sl
 801d5b4:	3001      	adds	r0, #1
 801d5b6:	d09b      	beq.n	801d4f0 <_printf_i+0x164>
 801d5b8:	3501      	adds	r5, #1
 801d5ba:	68e3      	ldr	r3, [r4, #12]
 801d5bc:	9903      	ldr	r1, [sp, #12]
 801d5be:	1a5b      	subs	r3, r3, r1
 801d5c0:	42ab      	cmp	r3, r5
 801d5c2:	dcf2      	bgt.n	801d5aa <_printf_i+0x21e>
 801d5c4:	e7eb      	b.n	801d59e <_printf_i+0x212>
 801d5c6:	2500      	movs	r5, #0
 801d5c8:	f104 0619 	add.w	r6, r4, #25
 801d5cc:	e7f5      	b.n	801d5ba <_printf_i+0x22e>
 801d5ce:	bf00      	nop
 801d5d0:	08038af5 	.word	0x08038af5
 801d5d4:	08038b06 	.word	0x08038b06

0801d5d8 <_sbrk_r>:
 801d5d8:	b538      	push	{r3, r4, r5, lr}
 801d5da:	4d06      	ldr	r5, [pc, #24]	; (801d5f4 <_sbrk_r+0x1c>)
 801d5dc:	2300      	movs	r3, #0
 801d5de:	4604      	mov	r4, r0
 801d5e0:	4608      	mov	r0, r1
 801d5e2:	602b      	str	r3, [r5, #0]
 801d5e4:	f7ed fd62 	bl	800b0ac <_sbrk>
 801d5e8:	1c43      	adds	r3, r0, #1
 801d5ea:	d102      	bne.n	801d5f2 <_sbrk_r+0x1a>
 801d5ec:	682b      	ldr	r3, [r5, #0]
 801d5ee:	b103      	cbz	r3, 801d5f2 <_sbrk_r+0x1a>
 801d5f0:	6023      	str	r3, [r4, #0]
 801d5f2:	bd38      	pop	{r3, r4, r5, pc}
 801d5f4:	240036f4 	.word	0x240036f4

0801d5f8 <_raise_r>:
 801d5f8:	291f      	cmp	r1, #31
 801d5fa:	b538      	push	{r3, r4, r5, lr}
 801d5fc:	4604      	mov	r4, r0
 801d5fe:	460d      	mov	r5, r1
 801d600:	d904      	bls.n	801d60c <_raise_r+0x14>
 801d602:	2316      	movs	r3, #22
 801d604:	6003      	str	r3, [r0, #0]
 801d606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d60a:	bd38      	pop	{r3, r4, r5, pc}
 801d60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d60e:	b112      	cbz	r2, 801d616 <_raise_r+0x1e>
 801d610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d614:	b94b      	cbnz	r3, 801d62a <_raise_r+0x32>
 801d616:	4620      	mov	r0, r4
 801d618:	f000 f830 	bl	801d67c <_getpid_r>
 801d61c:	462a      	mov	r2, r5
 801d61e:	4601      	mov	r1, r0
 801d620:	4620      	mov	r0, r4
 801d622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d626:	f000 b817 	b.w	801d658 <_kill_r>
 801d62a:	2b01      	cmp	r3, #1
 801d62c:	d00a      	beq.n	801d644 <_raise_r+0x4c>
 801d62e:	1c59      	adds	r1, r3, #1
 801d630:	d103      	bne.n	801d63a <_raise_r+0x42>
 801d632:	2316      	movs	r3, #22
 801d634:	6003      	str	r3, [r0, #0]
 801d636:	2001      	movs	r0, #1
 801d638:	e7e7      	b.n	801d60a <_raise_r+0x12>
 801d63a:	2400      	movs	r4, #0
 801d63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d640:	4628      	mov	r0, r5
 801d642:	4798      	blx	r3
 801d644:	2000      	movs	r0, #0
 801d646:	e7e0      	b.n	801d60a <_raise_r+0x12>

0801d648 <raise>:
 801d648:	4b02      	ldr	r3, [pc, #8]	; (801d654 <raise+0xc>)
 801d64a:	4601      	mov	r1, r0
 801d64c:	6818      	ldr	r0, [r3, #0]
 801d64e:	f7ff bfd3 	b.w	801d5f8 <_raise_r>
 801d652:	bf00      	nop
 801d654:	24000100 	.word	0x24000100

0801d658 <_kill_r>:
 801d658:	b538      	push	{r3, r4, r5, lr}
 801d65a:	4d07      	ldr	r5, [pc, #28]	; (801d678 <_kill_r+0x20>)
 801d65c:	2300      	movs	r3, #0
 801d65e:	4604      	mov	r4, r0
 801d660:	4608      	mov	r0, r1
 801d662:	4611      	mov	r1, r2
 801d664:	602b      	str	r3, [r5, #0]
 801d666:	f7ed fc99 	bl	800af9c <_kill>
 801d66a:	1c43      	adds	r3, r0, #1
 801d66c:	d102      	bne.n	801d674 <_kill_r+0x1c>
 801d66e:	682b      	ldr	r3, [r5, #0]
 801d670:	b103      	cbz	r3, 801d674 <_kill_r+0x1c>
 801d672:	6023      	str	r3, [r4, #0]
 801d674:	bd38      	pop	{r3, r4, r5, pc}
 801d676:	bf00      	nop
 801d678:	240036f4 	.word	0x240036f4

0801d67c <_getpid_r>:
 801d67c:	f7ed bc86 	b.w	800af8c <_getpid>

0801d680 <__swbuf_r>:
 801d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d682:	460e      	mov	r6, r1
 801d684:	4614      	mov	r4, r2
 801d686:	4605      	mov	r5, r0
 801d688:	b118      	cbz	r0, 801d692 <__swbuf_r+0x12>
 801d68a:	6983      	ldr	r3, [r0, #24]
 801d68c:	b90b      	cbnz	r3, 801d692 <__swbuf_r+0x12>
 801d68e:	f000 f9d1 	bl	801da34 <__sinit>
 801d692:	4b21      	ldr	r3, [pc, #132]	; (801d718 <__swbuf_r+0x98>)
 801d694:	429c      	cmp	r4, r3
 801d696:	d12b      	bne.n	801d6f0 <__swbuf_r+0x70>
 801d698:	686c      	ldr	r4, [r5, #4]
 801d69a:	69a3      	ldr	r3, [r4, #24]
 801d69c:	60a3      	str	r3, [r4, #8]
 801d69e:	89a3      	ldrh	r3, [r4, #12]
 801d6a0:	071a      	lsls	r2, r3, #28
 801d6a2:	d52f      	bpl.n	801d704 <__swbuf_r+0x84>
 801d6a4:	6923      	ldr	r3, [r4, #16]
 801d6a6:	b36b      	cbz	r3, 801d704 <__swbuf_r+0x84>
 801d6a8:	6923      	ldr	r3, [r4, #16]
 801d6aa:	6820      	ldr	r0, [r4, #0]
 801d6ac:	1ac0      	subs	r0, r0, r3
 801d6ae:	6963      	ldr	r3, [r4, #20]
 801d6b0:	b2f6      	uxtb	r6, r6
 801d6b2:	4283      	cmp	r3, r0
 801d6b4:	4637      	mov	r7, r6
 801d6b6:	dc04      	bgt.n	801d6c2 <__swbuf_r+0x42>
 801d6b8:	4621      	mov	r1, r4
 801d6ba:	4628      	mov	r0, r5
 801d6bc:	f000 f926 	bl	801d90c <_fflush_r>
 801d6c0:	bb30      	cbnz	r0, 801d710 <__swbuf_r+0x90>
 801d6c2:	68a3      	ldr	r3, [r4, #8]
 801d6c4:	3b01      	subs	r3, #1
 801d6c6:	60a3      	str	r3, [r4, #8]
 801d6c8:	6823      	ldr	r3, [r4, #0]
 801d6ca:	1c5a      	adds	r2, r3, #1
 801d6cc:	6022      	str	r2, [r4, #0]
 801d6ce:	701e      	strb	r6, [r3, #0]
 801d6d0:	6963      	ldr	r3, [r4, #20]
 801d6d2:	3001      	adds	r0, #1
 801d6d4:	4283      	cmp	r3, r0
 801d6d6:	d004      	beq.n	801d6e2 <__swbuf_r+0x62>
 801d6d8:	89a3      	ldrh	r3, [r4, #12]
 801d6da:	07db      	lsls	r3, r3, #31
 801d6dc:	d506      	bpl.n	801d6ec <__swbuf_r+0x6c>
 801d6de:	2e0a      	cmp	r6, #10
 801d6e0:	d104      	bne.n	801d6ec <__swbuf_r+0x6c>
 801d6e2:	4621      	mov	r1, r4
 801d6e4:	4628      	mov	r0, r5
 801d6e6:	f000 f911 	bl	801d90c <_fflush_r>
 801d6ea:	b988      	cbnz	r0, 801d710 <__swbuf_r+0x90>
 801d6ec:	4638      	mov	r0, r7
 801d6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6f0:	4b0a      	ldr	r3, [pc, #40]	; (801d71c <__swbuf_r+0x9c>)
 801d6f2:	429c      	cmp	r4, r3
 801d6f4:	d101      	bne.n	801d6fa <__swbuf_r+0x7a>
 801d6f6:	68ac      	ldr	r4, [r5, #8]
 801d6f8:	e7cf      	b.n	801d69a <__swbuf_r+0x1a>
 801d6fa:	4b09      	ldr	r3, [pc, #36]	; (801d720 <__swbuf_r+0xa0>)
 801d6fc:	429c      	cmp	r4, r3
 801d6fe:	bf08      	it	eq
 801d700:	68ec      	ldreq	r4, [r5, #12]
 801d702:	e7ca      	b.n	801d69a <__swbuf_r+0x1a>
 801d704:	4621      	mov	r1, r4
 801d706:	4628      	mov	r0, r5
 801d708:	f000 f80c 	bl	801d724 <__swsetup_r>
 801d70c:	2800      	cmp	r0, #0
 801d70e:	d0cb      	beq.n	801d6a8 <__swbuf_r+0x28>
 801d710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d714:	e7ea      	b.n	801d6ec <__swbuf_r+0x6c>
 801d716:	bf00      	nop
 801d718:	08038b38 	.word	0x08038b38
 801d71c:	08038b58 	.word	0x08038b58
 801d720:	08038b18 	.word	0x08038b18

0801d724 <__swsetup_r>:
 801d724:	4b32      	ldr	r3, [pc, #200]	; (801d7f0 <__swsetup_r+0xcc>)
 801d726:	b570      	push	{r4, r5, r6, lr}
 801d728:	681d      	ldr	r5, [r3, #0]
 801d72a:	4606      	mov	r6, r0
 801d72c:	460c      	mov	r4, r1
 801d72e:	b125      	cbz	r5, 801d73a <__swsetup_r+0x16>
 801d730:	69ab      	ldr	r3, [r5, #24]
 801d732:	b913      	cbnz	r3, 801d73a <__swsetup_r+0x16>
 801d734:	4628      	mov	r0, r5
 801d736:	f000 f97d 	bl	801da34 <__sinit>
 801d73a:	4b2e      	ldr	r3, [pc, #184]	; (801d7f4 <__swsetup_r+0xd0>)
 801d73c:	429c      	cmp	r4, r3
 801d73e:	d10f      	bne.n	801d760 <__swsetup_r+0x3c>
 801d740:	686c      	ldr	r4, [r5, #4]
 801d742:	89a3      	ldrh	r3, [r4, #12]
 801d744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d748:	0719      	lsls	r1, r3, #28
 801d74a:	d42c      	bmi.n	801d7a6 <__swsetup_r+0x82>
 801d74c:	06dd      	lsls	r5, r3, #27
 801d74e:	d411      	bmi.n	801d774 <__swsetup_r+0x50>
 801d750:	2309      	movs	r3, #9
 801d752:	6033      	str	r3, [r6, #0]
 801d754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d758:	81a3      	strh	r3, [r4, #12]
 801d75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d75e:	e03e      	b.n	801d7de <__swsetup_r+0xba>
 801d760:	4b25      	ldr	r3, [pc, #148]	; (801d7f8 <__swsetup_r+0xd4>)
 801d762:	429c      	cmp	r4, r3
 801d764:	d101      	bne.n	801d76a <__swsetup_r+0x46>
 801d766:	68ac      	ldr	r4, [r5, #8]
 801d768:	e7eb      	b.n	801d742 <__swsetup_r+0x1e>
 801d76a:	4b24      	ldr	r3, [pc, #144]	; (801d7fc <__swsetup_r+0xd8>)
 801d76c:	429c      	cmp	r4, r3
 801d76e:	bf08      	it	eq
 801d770:	68ec      	ldreq	r4, [r5, #12]
 801d772:	e7e6      	b.n	801d742 <__swsetup_r+0x1e>
 801d774:	0758      	lsls	r0, r3, #29
 801d776:	d512      	bpl.n	801d79e <__swsetup_r+0x7a>
 801d778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d77a:	b141      	cbz	r1, 801d78e <__swsetup_r+0x6a>
 801d77c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d780:	4299      	cmp	r1, r3
 801d782:	d002      	beq.n	801d78a <__swsetup_r+0x66>
 801d784:	4630      	mov	r0, r6
 801d786:	f7ff fb59 	bl	801ce3c <_free_r>
 801d78a:	2300      	movs	r3, #0
 801d78c:	6363      	str	r3, [r4, #52]	; 0x34
 801d78e:	89a3      	ldrh	r3, [r4, #12]
 801d790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d794:	81a3      	strh	r3, [r4, #12]
 801d796:	2300      	movs	r3, #0
 801d798:	6063      	str	r3, [r4, #4]
 801d79a:	6923      	ldr	r3, [r4, #16]
 801d79c:	6023      	str	r3, [r4, #0]
 801d79e:	89a3      	ldrh	r3, [r4, #12]
 801d7a0:	f043 0308 	orr.w	r3, r3, #8
 801d7a4:	81a3      	strh	r3, [r4, #12]
 801d7a6:	6923      	ldr	r3, [r4, #16]
 801d7a8:	b94b      	cbnz	r3, 801d7be <__swsetup_r+0x9a>
 801d7aa:	89a3      	ldrh	r3, [r4, #12]
 801d7ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d7b4:	d003      	beq.n	801d7be <__swsetup_r+0x9a>
 801d7b6:	4621      	mov	r1, r4
 801d7b8:	4630      	mov	r0, r6
 801d7ba:	f000 fa01 	bl	801dbc0 <__smakebuf_r>
 801d7be:	89a0      	ldrh	r0, [r4, #12]
 801d7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7c4:	f010 0301 	ands.w	r3, r0, #1
 801d7c8:	d00a      	beq.n	801d7e0 <__swsetup_r+0xbc>
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	60a3      	str	r3, [r4, #8]
 801d7ce:	6963      	ldr	r3, [r4, #20]
 801d7d0:	425b      	negs	r3, r3
 801d7d2:	61a3      	str	r3, [r4, #24]
 801d7d4:	6923      	ldr	r3, [r4, #16]
 801d7d6:	b943      	cbnz	r3, 801d7ea <__swsetup_r+0xc6>
 801d7d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d7dc:	d1ba      	bne.n	801d754 <__swsetup_r+0x30>
 801d7de:	bd70      	pop	{r4, r5, r6, pc}
 801d7e0:	0781      	lsls	r1, r0, #30
 801d7e2:	bf58      	it	pl
 801d7e4:	6963      	ldrpl	r3, [r4, #20]
 801d7e6:	60a3      	str	r3, [r4, #8]
 801d7e8:	e7f4      	b.n	801d7d4 <__swsetup_r+0xb0>
 801d7ea:	2000      	movs	r0, #0
 801d7ec:	e7f7      	b.n	801d7de <__swsetup_r+0xba>
 801d7ee:	bf00      	nop
 801d7f0:	24000100 	.word	0x24000100
 801d7f4:	08038b38 	.word	0x08038b38
 801d7f8:	08038b58 	.word	0x08038b58
 801d7fc:	08038b18 	.word	0x08038b18

0801d800 <__sflush_r>:
 801d800:	898a      	ldrh	r2, [r1, #12]
 801d802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d806:	4605      	mov	r5, r0
 801d808:	0710      	lsls	r0, r2, #28
 801d80a:	460c      	mov	r4, r1
 801d80c:	d458      	bmi.n	801d8c0 <__sflush_r+0xc0>
 801d80e:	684b      	ldr	r3, [r1, #4]
 801d810:	2b00      	cmp	r3, #0
 801d812:	dc05      	bgt.n	801d820 <__sflush_r+0x20>
 801d814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d816:	2b00      	cmp	r3, #0
 801d818:	dc02      	bgt.n	801d820 <__sflush_r+0x20>
 801d81a:	2000      	movs	r0, #0
 801d81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d822:	2e00      	cmp	r6, #0
 801d824:	d0f9      	beq.n	801d81a <__sflush_r+0x1a>
 801d826:	2300      	movs	r3, #0
 801d828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d82c:	682f      	ldr	r7, [r5, #0]
 801d82e:	602b      	str	r3, [r5, #0]
 801d830:	d032      	beq.n	801d898 <__sflush_r+0x98>
 801d832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d834:	89a3      	ldrh	r3, [r4, #12]
 801d836:	075a      	lsls	r2, r3, #29
 801d838:	d505      	bpl.n	801d846 <__sflush_r+0x46>
 801d83a:	6863      	ldr	r3, [r4, #4]
 801d83c:	1ac0      	subs	r0, r0, r3
 801d83e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d840:	b10b      	cbz	r3, 801d846 <__sflush_r+0x46>
 801d842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d844:	1ac0      	subs	r0, r0, r3
 801d846:	2300      	movs	r3, #0
 801d848:	4602      	mov	r2, r0
 801d84a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d84c:	6a21      	ldr	r1, [r4, #32]
 801d84e:	4628      	mov	r0, r5
 801d850:	47b0      	blx	r6
 801d852:	1c43      	adds	r3, r0, #1
 801d854:	89a3      	ldrh	r3, [r4, #12]
 801d856:	d106      	bne.n	801d866 <__sflush_r+0x66>
 801d858:	6829      	ldr	r1, [r5, #0]
 801d85a:	291d      	cmp	r1, #29
 801d85c:	d82c      	bhi.n	801d8b8 <__sflush_r+0xb8>
 801d85e:	4a2a      	ldr	r2, [pc, #168]	; (801d908 <__sflush_r+0x108>)
 801d860:	40ca      	lsrs	r2, r1
 801d862:	07d6      	lsls	r6, r2, #31
 801d864:	d528      	bpl.n	801d8b8 <__sflush_r+0xb8>
 801d866:	2200      	movs	r2, #0
 801d868:	6062      	str	r2, [r4, #4]
 801d86a:	04d9      	lsls	r1, r3, #19
 801d86c:	6922      	ldr	r2, [r4, #16]
 801d86e:	6022      	str	r2, [r4, #0]
 801d870:	d504      	bpl.n	801d87c <__sflush_r+0x7c>
 801d872:	1c42      	adds	r2, r0, #1
 801d874:	d101      	bne.n	801d87a <__sflush_r+0x7a>
 801d876:	682b      	ldr	r3, [r5, #0]
 801d878:	b903      	cbnz	r3, 801d87c <__sflush_r+0x7c>
 801d87a:	6560      	str	r0, [r4, #84]	; 0x54
 801d87c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d87e:	602f      	str	r7, [r5, #0]
 801d880:	2900      	cmp	r1, #0
 801d882:	d0ca      	beq.n	801d81a <__sflush_r+0x1a>
 801d884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d888:	4299      	cmp	r1, r3
 801d88a:	d002      	beq.n	801d892 <__sflush_r+0x92>
 801d88c:	4628      	mov	r0, r5
 801d88e:	f7ff fad5 	bl	801ce3c <_free_r>
 801d892:	2000      	movs	r0, #0
 801d894:	6360      	str	r0, [r4, #52]	; 0x34
 801d896:	e7c1      	b.n	801d81c <__sflush_r+0x1c>
 801d898:	6a21      	ldr	r1, [r4, #32]
 801d89a:	2301      	movs	r3, #1
 801d89c:	4628      	mov	r0, r5
 801d89e:	47b0      	blx	r6
 801d8a0:	1c41      	adds	r1, r0, #1
 801d8a2:	d1c7      	bne.n	801d834 <__sflush_r+0x34>
 801d8a4:	682b      	ldr	r3, [r5, #0]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d0c4      	beq.n	801d834 <__sflush_r+0x34>
 801d8aa:	2b1d      	cmp	r3, #29
 801d8ac:	d001      	beq.n	801d8b2 <__sflush_r+0xb2>
 801d8ae:	2b16      	cmp	r3, #22
 801d8b0:	d101      	bne.n	801d8b6 <__sflush_r+0xb6>
 801d8b2:	602f      	str	r7, [r5, #0]
 801d8b4:	e7b1      	b.n	801d81a <__sflush_r+0x1a>
 801d8b6:	89a3      	ldrh	r3, [r4, #12]
 801d8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8bc:	81a3      	strh	r3, [r4, #12]
 801d8be:	e7ad      	b.n	801d81c <__sflush_r+0x1c>
 801d8c0:	690f      	ldr	r7, [r1, #16]
 801d8c2:	2f00      	cmp	r7, #0
 801d8c4:	d0a9      	beq.n	801d81a <__sflush_r+0x1a>
 801d8c6:	0793      	lsls	r3, r2, #30
 801d8c8:	680e      	ldr	r6, [r1, #0]
 801d8ca:	bf08      	it	eq
 801d8cc:	694b      	ldreq	r3, [r1, #20]
 801d8ce:	600f      	str	r7, [r1, #0]
 801d8d0:	bf18      	it	ne
 801d8d2:	2300      	movne	r3, #0
 801d8d4:	eba6 0807 	sub.w	r8, r6, r7
 801d8d8:	608b      	str	r3, [r1, #8]
 801d8da:	f1b8 0f00 	cmp.w	r8, #0
 801d8de:	dd9c      	ble.n	801d81a <__sflush_r+0x1a>
 801d8e0:	6a21      	ldr	r1, [r4, #32]
 801d8e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d8e4:	4643      	mov	r3, r8
 801d8e6:	463a      	mov	r2, r7
 801d8e8:	4628      	mov	r0, r5
 801d8ea:	47b0      	blx	r6
 801d8ec:	2800      	cmp	r0, #0
 801d8ee:	dc06      	bgt.n	801d8fe <__sflush_r+0xfe>
 801d8f0:	89a3      	ldrh	r3, [r4, #12]
 801d8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8f6:	81a3      	strh	r3, [r4, #12]
 801d8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8fc:	e78e      	b.n	801d81c <__sflush_r+0x1c>
 801d8fe:	4407      	add	r7, r0
 801d900:	eba8 0800 	sub.w	r8, r8, r0
 801d904:	e7e9      	b.n	801d8da <__sflush_r+0xda>
 801d906:	bf00      	nop
 801d908:	20400001 	.word	0x20400001

0801d90c <_fflush_r>:
 801d90c:	b538      	push	{r3, r4, r5, lr}
 801d90e:	690b      	ldr	r3, [r1, #16]
 801d910:	4605      	mov	r5, r0
 801d912:	460c      	mov	r4, r1
 801d914:	b913      	cbnz	r3, 801d91c <_fflush_r+0x10>
 801d916:	2500      	movs	r5, #0
 801d918:	4628      	mov	r0, r5
 801d91a:	bd38      	pop	{r3, r4, r5, pc}
 801d91c:	b118      	cbz	r0, 801d926 <_fflush_r+0x1a>
 801d91e:	6983      	ldr	r3, [r0, #24]
 801d920:	b90b      	cbnz	r3, 801d926 <_fflush_r+0x1a>
 801d922:	f000 f887 	bl	801da34 <__sinit>
 801d926:	4b14      	ldr	r3, [pc, #80]	; (801d978 <_fflush_r+0x6c>)
 801d928:	429c      	cmp	r4, r3
 801d92a:	d11b      	bne.n	801d964 <_fflush_r+0x58>
 801d92c:	686c      	ldr	r4, [r5, #4]
 801d92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d0ef      	beq.n	801d916 <_fflush_r+0xa>
 801d936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d938:	07d0      	lsls	r0, r2, #31
 801d93a:	d404      	bmi.n	801d946 <_fflush_r+0x3a>
 801d93c:	0599      	lsls	r1, r3, #22
 801d93e:	d402      	bmi.n	801d946 <_fflush_r+0x3a>
 801d940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d942:	f000 f915 	bl	801db70 <__retarget_lock_acquire_recursive>
 801d946:	4628      	mov	r0, r5
 801d948:	4621      	mov	r1, r4
 801d94a:	f7ff ff59 	bl	801d800 <__sflush_r>
 801d94e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d950:	07da      	lsls	r2, r3, #31
 801d952:	4605      	mov	r5, r0
 801d954:	d4e0      	bmi.n	801d918 <_fflush_r+0xc>
 801d956:	89a3      	ldrh	r3, [r4, #12]
 801d958:	059b      	lsls	r3, r3, #22
 801d95a:	d4dd      	bmi.n	801d918 <_fflush_r+0xc>
 801d95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d95e:	f000 f908 	bl	801db72 <__retarget_lock_release_recursive>
 801d962:	e7d9      	b.n	801d918 <_fflush_r+0xc>
 801d964:	4b05      	ldr	r3, [pc, #20]	; (801d97c <_fflush_r+0x70>)
 801d966:	429c      	cmp	r4, r3
 801d968:	d101      	bne.n	801d96e <_fflush_r+0x62>
 801d96a:	68ac      	ldr	r4, [r5, #8]
 801d96c:	e7df      	b.n	801d92e <_fflush_r+0x22>
 801d96e:	4b04      	ldr	r3, [pc, #16]	; (801d980 <_fflush_r+0x74>)
 801d970:	429c      	cmp	r4, r3
 801d972:	bf08      	it	eq
 801d974:	68ec      	ldreq	r4, [r5, #12]
 801d976:	e7da      	b.n	801d92e <_fflush_r+0x22>
 801d978:	08038b38 	.word	0x08038b38
 801d97c:	08038b58 	.word	0x08038b58
 801d980:	08038b18 	.word	0x08038b18

0801d984 <std>:
 801d984:	2300      	movs	r3, #0
 801d986:	b510      	push	{r4, lr}
 801d988:	4604      	mov	r4, r0
 801d98a:	e9c0 3300 	strd	r3, r3, [r0]
 801d98e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d992:	6083      	str	r3, [r0, #8]
 801d994:	8181      	strh	r1, [r0, #12]
 801d996:	6643      	str	r3, [r0, #100]	; 0x64
 801d998:	81c2      	strh	r2, [r0, #14]
 801d99a:	6183      	str	r3, [r0, #24]
 801d99c:	4619      	mov	r1, r3
 801d99e:	2208      	movs	r2, #8
 801d9a0:	305c      	adds	r0, #92	; 0x5c
 801d9a2:	f7ff fa43 	bl	801ce2c <memset>
 801d9a6:	4b05      	ldr	r3, [pc, #20]	; (801d9bc <std+0x38>)
 801d9a8:	6263      	str	r3, [r4, #36]	; 0x24
 801d9aa:	4b05      	ldr	r3, [pc, #20]	; (801d9c0 <std+0x3c>)
 801d9ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801d9ae:	4b05      	ldr	r3, [pc, #20]	; (801d9c4 <std+0x40>)
 801d9b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d9b2:	4b05      	ldr	r3, [pc, #20]	; (801d9c8 <std+0x44>)
 801d9b4:	6224      	str	r4, [r4, #32]
 801d9b6:	6323      	str	r3, [r4, #48]	; 0x30
 801d9b8:	bd10      	pop	{r4, pc}
 801d9ba:	bf00      	nop
 801d9bc:	0801dc59 	.word	0x0801dc59
 801d9c0:	0801dc7b 	.word	0x0801dc7b
 801d9c4:	0801dcb3 	.word	0x0801dcb3
 801d9c8:	0801dcd7 	.word	0x0801dcd7

0801d9cc <_cleanup_r>:
 801d9cc:	4901      	ldr	r1, [pc, #4]	; (801d9d4 <_cleanup_r+0x8>)
 801d9ce:	f000 b8af 	b.w	801db30 <_fwalk_reent>
 801d9d2:	bf00      	nop
 801d9d4:	0801d90d 	.word	0x0801d90d

0801d9d8 <__sfmoreglue>:
 801d9d8:	b570      	push	{r4, r5, r6, lr}
 801d9da:	2268      	movs	r2, #104	; 0x68
 801d9dc:	1e4d      	subs	r5, r1, #1
 801d9de:	4355      	muls	r5, r2
 801d9e0:	460e      	mov	r6, r1
 801d9e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d9e6:	f7ff fa95 	bl	801cf14 <_malloc_r>
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	b140      	cbz	r0, 801da00 <__sfmoreglue+0x28>
 801d9ee:	2100      	movs	r1, #0
 801d9f0:	e9c0 1600 	strd	r1, r6, [r0]
 801d9f4:	300c      	adds	r0, #12
 801d9f6:	60a0      	str	r0, [r4, #8]
 801d9f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d9fc:	f7ff fa16 	bl	801ce2c <memset>
 801da00:	4620      	mov	r0, r4
 801da02:	bd70      	pop	{r4, r5, r6, pc}

0801da04 <__sfp_lock_acquire>:
 801da04:	4801      	ldr	r0, [pc, #4]	; (801da0c <__sfp_lock_acquire+0x8>)
 801da06:	f000 b8b3 	b.w	801db70 <__retarget_lock_acquire_recursive>
 801da0a:	bf00      	nop
 801da0c:	240036f1 	.word	0x240036f1

0801da10 <__sfp_lock_release>:
 801da10:	4801      	ldr	r0, [pc, #4]	; (801da18 <__sfp_lock_release+0x8>)
 801da12:	f000 b8ae 	b.w	801db72 <__retarget_lock_release_recursive>
 801da16:	bf00      	nop
 801da18:	240036f1 	.word	0x240036f1

0801da1c <__sinit_lock_acquire>:
 801da1c:	4801      	ldr	r0, [pc, #4]	; (801da24 <__sinit_lock_acquire+0x8>)
 801da1e:	f000 b8a7 	b.w	801db70 <__retarget_lock_acquire_recursive>
 801da22:	bf00      	nop
 801da24:	240036f2 	.word	0x240036f2

0801da28 <__sinit_lock_release>:
 801da28:	4801      	ldr	r0, [pc, #4]	; (801da30 <__sinit_lock_release+0x8>)
 801da2a:	f000 b8a2 	b.w	801db72 <__retarget_lock_release_recursive>
 801da2e:	bf00      	nop
 801da30:	240036f2 	.word	0x240036f2

0801da34 <__sinit>:
 801da34:	b510      	push	{r4, lr}
 801da36:	4604      	mov	r4, r0
 801da38:	f7ff fff0 	bl	801da1c <__sinit_lock_acquire>
 801da3c:	69a3      	ldr	r3, [r4, #24]
 801da3e:	b11b      	cbz	r3, 801da48 <__sinit+0x14>
 801da40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da44:	f7ff bff0 	b.w	801da28 <__sinit_lock_release>
 801da48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801da4c:	6523      	str	r3, [r4, #80]	; 0x50
 801da4e:	4b13      	ldr	r3, [pc, #76]	; (801da9c <__sinit+0x68>)
 801da50:	4a13      	ldr	r2, [pc, #76]	; (801daa0 <__sinit+0x6c>)
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	62a2      	str	r2, [r4, #40]	; 0x28
 801da56:	42a3      	cmp	r3, r4
 801da58:	bf04      	itt	eq
 801da5a:	2301      	moveq	r3, #1
 801da5c:	61a3      	streq	r3, [r4, #24]
 801da5e:	4620      	mov	r0, r4
 801da60:	f000 f820 	bl	801daa4 <__sfp>
 801da64:	6060      	str	r0, [r4, #4]
 801da66:	4620      	mov	r0, r4
 801da68:	f000 f81c 	bl	801daa4 <__sfp>
 801da6c:	60a0      	str	r0, [r4, #8]
 801da6e:	4620      	mov	r0, r4
 801da70:	f000 f818 	bl	801daa4 <__sfp>
 801da74:	2200      	movs	r2, #0
 801da76:	60e0      	str	r0, [r4, #12]
 801da78:	2104      	movs	r1, #4
 801da7a:	6860      	ldr	r0, [r4, #4]
 801da7c:	f7ff ff82 	bl	801d984 <std>
 801da80:	68a0      	ldr	r0, [r4, #8]
 801da82:	2201      	movs	r2, #1
 801da84:	2109      	movs	r1, #9
 801da86:	f7ff ff7d 	bl	801d984 <std>
 801da8a:	68e0      	ldr	r0, [r4, #12]
 801da8c:	2202      	movs	r2, #2
 801da8e:	2112      	movs	r1, #18
 801da90:	f7ff ff78 	bl	801d984 <std>
 801da94:	2301      	movs	r3, #1
 801da96:	61a3      	str	r3, [r4, #24]
 801da98:	e7d2      	b.n	801da40 <__sinit+0xc>
 801da9a:	bf00      	nop
 801da9c:	08038ae0 	.word	0x08038ae0
 801daa0:	0801d9cd 	.word	0x0801d9cd

0801daa4 <__sfp>:
 801daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801daa6:	4607      	mov	r7, r0
 801daa8:	f7ff ffac 	bl	801da04 <__sfp_lock_acquire>
 801daac:	4b1e      	ldr	r3, [pc, #120]	; (801db28 <__sfp+0x84>)
 801daae:	681e      	ldr	r6, [r3, #0]
 801dab0:	69b3      	ldr	r3, [r6, #24]
 801dab2:	b913      	cbnz	r3, 801daba <__sfp+0x16>
 801dab4:	4630      	mov	r0, r6
 801dab6:	f7ff ffbd 	bl	801da34 <__sinit>
 801daba:	3648      	adds	r6, #72	; 0x48
 801dabc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dac0:	3b01      	subs	r3, #1
 801dac2:	d503      	bpl.n	801dacc <__sfp+0x28>
 801dac4:	6833      	ldr	r3, [r6, #0]
 801dac6:	b30b      	cbz	r3, 801db0c <__sfp+0x68>
 801dac8:	6836      	ldr	r6, [r6, #0]
 801daca:	e7f7      	b.n	801dabc <__sfp+0x18>
 801dacc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dad0:	b9d5      	cbnz	r5, 801db08 <__sfp+0x64>
 801dad2:	4b16      	ldr	r3, [pc, #88]	; (801db2c <__sfp+0x88>)
 801dad4:	60e3      	str	r3, [r4, #12]
 801dad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dada:	6665      	str	r5, [r4, #100]	; 0x64
 801dadc:	f000 f847 	bl	801db6e <__retarget_lock_init_recursive>
 801dae0:	f7ff ff96 	bl	801da10 <__sfp_lock_release>
 801dae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801daec:	6025      	str	r5, [r4, #0]
 801daee:	61a5      	str	r5, [r4, #24]
 801daf0:	2208      	movs	r2, #8
 801daf2:	4629      	mov	r1, r5
 801daf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801daf8:	f7ff f998 	bl	801ce2c <memset>
 801dafc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801db00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801db04:	4620      	mov	r0, r4
 801db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db08:	3468      	adds	r4, #104	; 0x68
 801db0a:	e7d9      	b.n	801dac0 <__sfp+0x1c>
 801db0c:	2104      	movs	r1, #4
 801db0e:	4638      	mov	r0, r7
 801db10:	f7ff ff62 	bl	801d9d8 <__sfmoreglue>
 801db14:	4604      	mov	r4, r0
 801db16:	6030      	str	r0, [r6, #0]
 801db18:	2800      	cmp	r0, #0
 801db1a:	d1d5      	bne.n	801dac8 <__sfp+0x24>
 801db1c:	f7ff ff78 	bl	801da10 <__sfp_lock_release>
 801db20:	230c      	movs	r3, #12
 801db22:	603b      	str	r3, [r7, #0]
 801db24:	e7ee      	b.n	801db04 <__sfp+0x60>
 801db26:	bf00      	nop
 801db28:	08038ae0 	.word	0x08038ae0
 801db2c:	ffff0001 	.word	0xffff0001

0801db30 <_fwalk_reent>:
 801db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db34:	4606      	mov	r6, r0
 801db36:	4688      	mov	r8, r1
 801db38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801db3c:	2700      	movs	r7, #0
 801db3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801db42:	f1b9 0901 	subs.w	r9, r9, #1
 801db46:	d505      	bpl.n	801db54 <_fwalk_reent+0x24>
 801db48:	6824      	ldr	r4, [r4, #0]
 801db4a:	2c00      	cmp	r4, #0
 801db4c:	d1f7      	bne.n	801db3e <_fwalk_reent+0xe>
 801db4e:	4638      	mov	r0, r7
 801db50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db54:	89ab      	ldrh	r3, [r5, #12]
 801db56:	2b01      	cmp	r3, #1
 801db58:	d907      	bls.n	801db6a <_fwalk_reent+0x3a>
 801db5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801db5e:	3301      	adds	r3, #1
 801db60:	d003      	beq.n	801db6a <_fwalk_reent+0x3a>
 801db62:	4629      	mov	r1, r5
 801db64:	4630      	mov	r0, r6
 801db66:	47c0      	blx	r8
 801db68:	4307      	orrs	r7, r0
 801db6a:	3568      	adds	r5, #104	; 0x68
 801db6c:	e7e9      	b.n	801db42 <_fwalk_reent+0x12>

0801db6e <__retarget_lock_init_recursive>:
 801db6e:	4770      	bx	lr

0801db70 <__retarget_lock_acquire_recursive>:
 801db70:	4770      	bx	lr

0801db72 <__retarget_lock_release_recursive>:
 801db72:	4770      	bx	lr

0801db74 <__swhatbuf_r>:
 801db74:	b570      	push	{r4, r5, r6, lr}
 801db76:	460e      	mov	r6, r1
 801db78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db7c:	2900      	cmp	r1, #0
 801db7e:	b096      	sub	sp, #88	; 0x58
 801db80:	4614      	mov	r4, r2
 801db82:	461d      	mov	r5, r3
 801db84:	da08      	bge.n	801db98 <__swhatbuf_r+0x24>
 801db86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801db8a:	2200      	movs	r2, #0
 801db8c:	602a      	str	r2, [r5, #0]
 801db8e:	061a      	lsls	r2, r3, #24
 801db90:	d410      	bmi.n	801dbb4 <__swhatbuf_r+0x40>
 801db92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801db96:	e00e      	b.n	801dbb6 <__swhatbuf_r+0x42>
 801db98:	466a      	mov	r2, sp
 801db9a:	f000 f8c3 	bl	801dd24 <_fstat_r>
 801db9e:	2800      	cmp	r0, #0
 801dba0:	dbf1      	blt.n	801db86 <__swhatbuf_r+0x12>
 801dba2:	9a01      	ldr	r2, [sp, #4]
 801dba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dbac:	425a      	negs	r2, r3
 801dbae:	415a      	adcs	r2, r3
 801dbb0:	602a      	str	r2, [r5, #0]
 801dbb2:	e7ee      	b.n	801db92 <__swhatbuf_r+0x1e>
 801dbb4:	2340      	movs	r3, #64	; 0x40
 801dbb6:	2000      	movs	r0, #0
 801dbb8:	6023      	str	r3, [r4, #0]
 801dbba:	b016      	add	sp, #88	; 0x58
 801dbbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dbc0 <__smakebuf_r>:
 801dbc0:	898b      	ldrh	r3, [r1, #12]
 801dbc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dbc4:	079d      	lsls	r5, r3, #30
 801dbc6:	4606      	mov	r6, r0
 801dbc8:	460c      	mov	r4, r1
 801dbca:	d507      	bpl.n	801dbdc <__smakebuf_r+0x1c>
 801dbcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dbd0:	6023      	str	r3, [r4, #0]
 801dbd2:	6123      	str	r3, [r4, #16]
 801dbd4:	2301      	movs	r3, #1
 801dbd6:	6163      	str	r3, [r4, #20]
 801dbd8:	b002      	add	sp, #8
 801dbda:	bd70      	pop	{r4, r5, r6, pc}
 801dbdc:	ab01      	add	r3, sp, #4
 801dbde:	466a      	mov	r2, sp
 801dbe0:	f7ff ffc8 	bl	801db74 <__swhatbuf_r>
 801dbe4:	9900      	ldr	r1, [sp, #0]
 801dbe6:	4605      	mov	r5, r0
 801dbe8:	4630      	mov	r0, r6
 801dbea:	f7ff f993 	bl	801cf14 <_malloc_r>
 801dbee:	b948      	cbnz	r0, 801dc04 <__smakebuf_r+0x44>
 801dbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbf4:	059a      	lsls	r2, r3, #22
 801dbf6:	d4ef      	bmi.n	801dbd8 <__smakebuf_r+0x18>
 801dbf8:	f023 0303 	bic.w	r3, r3, #3
 801dbfc:	f043 0302 	orr.w	r3, r3, #2
 801dc00:	81a3      	strh	r3, [r4, #12]
 801dc02:	e7e3      	b.n	801dbcc <__smakebuf_r+0xc>
 801dc04:	4b0d      	ldr	r3, [pc, #52]	; (801dc3c <__smakebuf_r+0x7c>)
 801dc06:	62b3      	str	r3, [r6, #40]	; 0x28
 801dc08:	89a3      	ldrh	r3, [r4, #12]
 801dc0a:	6020      	str	r0, [r4, #0]
 801dc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc10:	81a3      	strh	r3, [r4, #12]
 801dc12:	9b00      	ldr	r3, [sp, #0]
 801dc14:	6163      	str	r3, [r4, #20]
 801dc16:	9b01      	ldr	r3, [sp, #4]
 801dc18:	6120      	str	r0, [r4, #16]
 801dc1a:	b15b      	cbz	r3, 801dc34 <__smakebuf_r+0x74>
 801dc1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc20:	4630      	mov	r0, r6
 801dc22:	f000 f891 	bl	801dd48 <_isatty_r>
 801dc26:	b128      	cbz	r0, 801dc34 <__smakebuf_r+0x74>
 801dc28:	89a3      	ldrh	r3, [r4, #12]
 801dc2a:	f023 0303 	bic.w	r3, r3, #3
 801dc2e:	f043 0301 	orr.w	r3, r3, #1
 801dc32:	81a3      	strh	r3, [r4, #12]
 801dc34:	89a0      	ldrh	r0, [r4, #12]
 801dc36:	4305      	orrs	r5, r0
 801dc38:	81a5      	strh	r5, [r4, #12]
 801dc3a:	e7cd      	b.n	801dbd8 <__smakebuf_r+0x18>
 801dc3c:	0801d9cd 	.word	0x0801d9cd

0801dc40 <__malloc_lock>:
 801dc40:	4801      	ldr	r0, [pc, #4]	; (801dc48 <__malloc_lock+0x8>)
 801dc42:	f7ff bf95 	b.w	801db70 <__retarget_lock_acquire_recursive>
 801dc46:	bf00      	nop
 801dc48:	240036f0 	.word	0x240036f0

0801dc4c <__malloc_unlock>:
 801dc4c:	4801      	ldr	r0, [pc, #4]	; (801dc54 <__malloc_unlock+0x8>)
 801dc4e:	f7ff bf90 	b.w	801db72 <__retarget_lock_release_recursive>
 801dc52:	bf00      	nop
 801dc54:	240036f0 	.word	0x240036f0

0801dc58 <__sread>:
 801dc58:	b510      	push	{r4, lr}
 801dc5a:	460c      	mov	r4, r1
 801dc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc60:	f000 f894 	bl	801dd8c <_read_r>
 801dc64:	2800      	cmp	r0, #0
 801dc66:	bfab      	itete	ge
 801dc68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dc6a:	89a3      	ldrhlt	r3, [r4, #12]
 801dc6c:	181b      	addge	r3, r3, r0
 801dc6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dc72:	bfac      	ite	ge
 801dc74:	6563      	strge	r3, [r4, #84]	; 0x54
 801dc76:	81a3      	strhlt	r3, [r4, #12]
 801dc78:	bd10      	pop	{r4, pc}

0801dc7a <__swrite>:
 801dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc7e:	461f      	mov	r7, r3
 801dc80:	898b      	ldrh	r3, [r1, #12]
 801dc82:	05db      	lsls	r3, r3, #23
 801dc84:	4605      	mov	r5, r0
 801dc86:	460c      	mov	r4, r1
 801dc88:	4616      	mov	r6, r2
 801dc8a:	d505      	bpl.n	801dc98 <__swrite+0x1e>
 801dc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc90:	2302      	movs	r3, #2
 801dc92:	2200      	movs	r2, #0
 801dc94:	f000 f868 	bl	801dd68 <_lseek_r>
 801dc98:	89a3      	ldrh	r3, [r4, #12]
 801dc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dca2:	81a3      	strh	r3, [r4, #12]
 801dca4:	4632      	mov	r2, r6
 801dca6:	463b      	mov	r3, r7
 801dca8:	4628      	mov	r0, r5
 801dcaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dcae:	f000 b817 	b.w	801dce0 <_write_r>

0801dcb2 <__sseek>:
 801dcb2:	b510      	push	{r4, lr}
 801dcb4:	460c      	mov	r4, r1
 801dcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcba:	f000 f855 	bl	801dd68 <_lseek_r>
 801dcbe:	1c43      	adds	r3, r0, #1
 801dcc0:	89a3      	ldrh	r3, [r4, #12]
 801dcc2:	bf15      	itete	ne
 801dcc4:	6560      	strne	r0, [r4, #84]	; 0x54
 801dcc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dcca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dcce:	81a3      	strheq	r3, [r4, #12]
 801dcd0:	bf18      	it	ne
 801dcd2:	81a3      	strhne	r3, [r4, #12]
 801dcd4:	bd10      	pop	{r4, pc}

0801dcd6 <__sclose>:
 801dcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcda:	f000 b813 	b.w	801dd04 <_close_r>
	...

0801dce0 <_write_r>:
 801dce0:	b538      	push	{r3, r4, r5, lr}
 801dce2:	4d07      	ldr	r5, [pc, #28]	; (801dd00 <_write_r+0x20>)
 801dce4:	4604      	mov	r4, r0
 801dce6:	4608      	mov	r0, r1
 801dce8:	4611      	mov	r1, r2
 801dcea:	2200      	movs	r2, #0
 801dcec:	602a      	str	r2, [r5, #0]
 801dcee:	461a      	mov	r2, r3
 801dcf0:	f7ed f98b 	bl	800b00a <_write>
 801dcf4:	1c43      	adds	r3, r0, #1
 801dcf6:	d102      	bne.n	801dcfe <_write_r+0x1e>
 801dcf8:	682b      	ldr	r3, [r5, #0]
 801dcfa:	b103      	cbz	r3, 801dcfe <_write_r+0x1e>
 801dcfc:	6023      	str	r3, [r4, #0]
 801dcfe:	bd38      	pop	{r3, r4, r5, pc}
 801dd00:	240036f4 	.word	0x240036f4

0801dd04 <_close_r>:
 801dd04:	b538      	push	{r3, r4, r5, lr}
 801dd06:	4d06      	ldr	r5, [pc, #24]	; (801dd20 <_close_r+0x1c>)
 801dd08:	2300      	movs	r3, #0
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	4608      	mov	r0, r1
 801dd0e:	602b      	str	r3, [r5, #0]
 801dd10:	f7ed f997 	bl	800b042 <_close>
 801dd14:	1c43      	adds	r3, r0, #1
 801dd16:	d102      	bne.n	801dd1e <_close_r+0x1a>
 801dd18:	682b      	ldr	r3, [r5, #0]
 801dd1a:	b103      	cbz	r3, 801dd1e <_close_r+0x1a>
 801dd1c:	6023      	str	r3, [r4, #0]
 801dd1e:	bd38      	pop	{r3, r4, r5, pc}
 801dd20:	240036f4 	.word	0x240036f4

0801dd24 <_fstat_r>:
 801dd24:	b538      	push	{r3, r4, r5, lr}
 801dd26:	4d07      	ldr	r5, [pc, #28]	; (801dd44 <_fstat_r+0x20>)
 801dd28:	2300      	movs	r3, #0
 801dd2a:	4604      	mov	r4, r0
 801dd2c:	4608      	mov	r0, r1
 801dd2e:	4611      	mov	r1, r2
 801dd30:	602b      	str	r3, [r5, #0]
 801dd32:	f7ed f992 	bl	800b05a <_fstat>
 801dd36:	1c43      	adds	r3, r0, #1
 801dd38:	d102      	bne.n	801dd40 <_fstat_r+0x1c>
 801dd3a:	682b      	ldr	r3, [r5, #0]
 801dd3c:	b103      	cbz	r3, 801dd40 <_fstat_r+0x1c>
 801dd3e:	6023      	str	r3, [r4, #0]
 801dd40:	bd38      	pop	{r3, r4, r5, pc}
 801dd42:	bf00      	nop
 801dd44:	240036f4 	.word	0x240036f4

0801dd48 <_isatty_r>:
 801dd48:	b538      	push	{r3, r4, r5, lr}
 801dd4a:	4d06      	ldr	r5, [pc, #24]	; (801dd64 <_isatty_r+0x1c>)
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	4604      	mov	r4, r0
 801dd50:	4608      	mov	r0, r1
 801dd52:	602b      	str	r3, [r5, #0]
 801dd54:	f7ed f991 	bl	800b07a <_isatty>
 801dd58:	1c43      	adds	r3, r0, #1
 801dd5a:	d102      	bne.n	801dd62 <_isatty_r+0x1a>
 801dd5c:	682b      	ldr	r3, [r5, #0]
 801dd5e:	b103      	cbz	r3, 801dd62 <_isatty_r+0x1a>
 801dd60:	6023      	str	r3, [r4, #0]
 801dd62:	bd38      	pop	{r3, r4, r5, pc}
 801dd64:	240036f4 	.word	0x240036f4

0801dd68 <_lseek_r>:
 801dd68:	b538      	push	{r3, r4, r5, lr}
 801dd6a:	4d07      	ldr	r5, [pc, #28]	; (801dd88 <_lseek_r+0x20>)
 801dd6c:	4604      	mov	r4, r0
 801dd6e:	4608      	mov	r0, r1
 801dd70:	4611      	mov	r1, r2
 801dd72:	2200      	movs	r2, #0
 801dd74:	602a      	str	r2, [r5, #0]
 801dd76:	461a      	mov	r2, r3
 801dd78:	f7ed f98a 	bl	800b090 <_lseek>
 801dd7c:	1c43      	adds	r3, r0, #1
 801dd7e:	d102      	bne.n	801dd86 <_lseek_r+0x1e>
 801dd80:	682b      	ldr	r3, [r5, #0]
 801dd82:	b103      	cbz	r3, 801dd86 <_lseek_r+0x1e>
 801dd84:	6023      	str	r3, [r4, #0]
 801dd86:	bd38      	pop	{r3, r4, r5, pc}
 801dd88:	240036f4 	.word	0x240036f4

0801dd8c <_read_r>:
 801dd8c:	b538      	push	{r3, r4, r5, lr}
 801dd8e:	4d07      	ldr	r5, [pc, #28]	; (801ddac <_read_r+0x20>)
 801dd90:	4604      	mov	r4, r0
 801dd92:	4608      	mov	r0, r1
 801dd94:	4611      	mov	r1, r2
 801dd96:	2200      	movs	r2, #0
 801dd98:	602a      	str	r2, [r5, #0]
 801dd9a:	461a      	mov	r2, r3
 801dd9c:	f7ed f918 	bl	800afd0 <_read>
 801dda0:	1c43      	adds	r3, r0, #1
 801dda2:	d102      	bne.n	801ddaa <_read_r+0x1e>
 801dda4:	682b      	ldr	r3, [r5, #0]
 801dda6:	b103      	cbz	r3, 801ddaa <_read_r+0x1e>
 801dda8:	6023      	str	r3, [r4, #0]
 801ddaa:	bd38      	pop	{r3, r4, r5, pc}
 801ddac:	240036f4 	.word	0x240036f4

0801ddb0 <_init>:
 801ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddb2:	bf00      	nop
 801ddb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddb6:	bc08      	pop	{r3}
 801ddb8:	469e      	mov	lr, r3
 801ddba:	4770      	bx	lr

0801ddbc <_fini>:
 801ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddbe:	bf00      	nop
 801ddc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddc2:	bc08      	pop	{r3}
 801ddc4:	469e      	mov	lr, r3
 801ddc6:	4770      	bx	lr
